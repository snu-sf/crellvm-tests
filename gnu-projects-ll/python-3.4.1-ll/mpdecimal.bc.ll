; ModuleID = './mpdecimal.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mpd_t = type { i8, i64, i64, i64, i64, i64* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.mpd_context_t = type { i64, i64, i64, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"2.4.0\00", align 1
@mpd_pow10 = external hidden constant [0 x i64], align 8
@mpd_free = external hidden global void (i8*)*, align 8
@MPD_MINALLOC = external hidden global i64, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"sNaN\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"+Infinity\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"+Zero\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"+Normal\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"+Subnormal\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"-Infinity\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"-Zero\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"-Normal\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"-Subnormal\00", align 1
@mpd_qln10.static10_data = private unnamed_addr constant [1 x i64] [i64 10], align 8
@_mpd_ln10 = internal constant %struct.mpd_t { i8 -112, i64 -1215, i64 1216, i64 64, i64 64, i64* getelementptr inbounds ([64 x i64], [64 x i64]* @mpd_ln10_data, i32 0, i32 0) }, align 8
@one = internal constant %struct.mpd_t { i8 -112, i64 0, i64 1, i64 1, i64 1, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @data_one, i32 0, i32 0) }, align 8
@mpd_qnext_minus.tiny_data = private unnamed_addr constant [1 x i64] [i64 1], align 8
@mpd_qnext_plus.tiny_data = private unnamed_addr constant [1 x i64] [i64 1], align 8
@mpd_qpowmod.two_data = private unnamed_addr constant [1 x i64] [i64 2], align 8
@mpd_qsqrt.two_data = private unnamed_addr constant [1 x i64] [i64 2], align 8
@_mpd_qaddsub.tiny_data = private unnamed_addr constant [1 x i64] [i64 1], align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.11 = private unnamed_addr constant [17 x i8] c"%s:%d: warning: \00", align 1
@.str.12 = private unnamed_addr constant [75 x i8] c"/home/juneyoung.lee/tmp/Python-3.4.1/Modules/_decimal/libmpdec/mpdecimal.c\00", align 1
@.str.13 = private unnamed_addr constant [61 x i8] c"libmpdec: internal error in _mpd_base_ndivmod: please report\00", align 1
@zero = internal constant %struct.mpd_t { i8 -112, i64 0, i64 1, i64 1, i64 1, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @data_zero, i32 0, i32 0) }, align 8
@minus_one = internal constant %struct.mpd_t { i8 -111, i64 0, i64 1, i64 1, i64 1, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @data_one, i32 0, i32 0) }, align 8
@_mpd_qreciprocal.two_data = private unnamed_addr constant [1 x i64] [i64 2], align 8
@data_zero = internal global [1 x i64] zeroinitializer, align 8
@data_one = internal global [1 x i64] [i64 1], align 8
@_mpd_qexp.word_data = private unnamed_addr constant [1 x i64] [i64 1], align 8
@_mpd_qexp_check_one.lim_data = private unnamed_addr constant [1 x i64] [i64 9], align 8
@mpd_bits = external hidden constant [0 x i64], align 8
@mpd_ln10_data = internal constant [64 x i64] [i64 6983716328982174407, i64 9089704281976336583, i64 1515961135648465461, i64 4416816335727555703, i64 2900988039194170265, i64 2307925037472986509, i64 107598438319191292, i64 3466624107184669231, i64 4450099781311469159, i64 -8638916013958357762, i64 7713456862091670584, i64 1492198849978748873, i64 6528728696511086257, i64 2385392051446341972, i64 8692180205189339507, i64 6518769751037497088, i64 2375253577097505395, i64 9095610299291824318, i64 982748238504564801, i64 5438635917781170543, i64 7547331541421808427, i64 752371033310119785, i64 3171643095059950878, i64 -8661478690501944890, i64 2932258279850258550, i64 5497347726624257094, i64 2976979522110718264, i64 9221477656763693866, i64 1979650047149510504, i64 6674183485704422507, i64 -8743977213114301945, i64 -9168647310996793863, i64 -9131895548760906745, i64 6826928280848118428, i64 754403708474699401, i64 230105703089634572, i64 1929203337658714166, i64 7589402567763113569, i64 4208241314695689016, i64 2922455440575892572, i64 -9090009867003740252, i64 2684916746550586856, i64 644507064800027750, i64 -8969909437541630598, i64 5659121373450747856, i64 2835522011480466371, i64 6470806855677432162, i64 7141748003688084012, i64 -8827339673487446515, i64 5504893431493939147, i64 6674744042432743651, i64 2287698219886746543, i64 7773262884616336622, i64 1985283935053089653, i64 4680843799894826233, i64 8168948290720832555, i64 8067566662873690987, i64 6248633409525465082, i64 -8616909876931147388, i64 3524802359972050895, i64 3327900967572609677, i64 110148862877297603, i64 179914546843642076, i64 2302585092994045684], align 16
@lnapprox = internal constant [900 x i16] [i16 0, i16 10, i16 20, i16 30, i16 39, i16 49, i16 58, i16 68, i16 77, i16 86, i16 95, i16 104, i16 113, i16 122, i16 131, i16 140, i16 148, i16 157, i16 166, i16 174, i16 182, i16 191, i16 199, i16 207, i16 215, i16 223, i16 231, i16 239, i16 247, i16 255, i16 262, i16 270, i16 278, i16 285, i16 293, i16 300, i16 308, i16 315, i16 322, i16 329, i16 336, i16 344, i16 351, i16 358, i16 365, i16 372, i16 378, i16 385, i16 392, i16 399, i16 406, i16 412, i16 419, i16 425, i16 432, i16 438, i16 445, i16 451, i16 457, i16 464, i16 470, i16 476, i16 482, i16 489, i16 495, i16 501, i16 507, i16 513, i16 519, i16 525, i16 531, i16 536, i16 542, i16 548, i16 554, i16 560, i16 565, i16 571, i16 577, i16 582, i16 588, i16 593, i16 599, i16 604, i16 610, i16 615, i16 621, i16 626, i16 631, i16 637, i16 642, i16 647, i16 652, i16 658, i16 663, i16 668, i16 673, i16 678, i16 683, i16 688, i16 693, i16 698, i16 703, i16 708, i16 713, i16 718, i16 723, i16 728, i16 732, i16 737, i16 742, i16 747, i16 751, i16 756, i16 761, i16 766, i16 770, i16 775, i16 779, i16 784, i16 788, i16 793, i16 798, i16 802, i16 806, i16 811, i16 815, i16 820, i16 824, i16 829, i16 833, i16 837, i16 842, i16 846, i16 850, i16 854, i16 859, i16 863, i16 867, i16 871, i16 876, i16 880, i16 884, i16 888, i16 892, i16 896, i16 900, i16 904, i16 908, i16 912, i16 916, i16 920, i16 924, i16 928, i16 932, i16 936, i16 940, i16 944, i16 948, i16 952, i16 956, i16 959, i16 963, i16 967, i16 971, i16 975, i16 978, i16 982, i16 986, i16 990, i16 993, i16 997, i16 1001, i16 1004, i16 1008, i16 1012, i16 1015, i16 1019, i16 1022, i16 1026, i16 1030, i16 1033, i16 1037, i16 1040, i16 1044, i16 1047, i16 1051, i16 1054, i16 1058, i16 1061, i16 1065, i16 1068, i16 1072, i16 1075, i16 1078, i16 1082, i16 1085, i16 1089, i16 1092, i16 1095, i16 1099, i16 1102, i16 1105, i16 1109, i16 1112, i16 1115, i16 1118, i16 1122, i16 1125, i16 1128, i16 1131, i16 1135, i16 1138, i16 1141, i16 1144, i16 1147, i16 1151, i16 1154, i16 1157, i16 1160, i16 1163, i16 1166, i16 1169, i16 1172, i16 1176, i16 1179, i16 1182, i16 1185, i16 1188, i16 1191, i16 1194, i16 1197, i16 1200, i16 1203, i16 1206, i16 1209, i16 1212, i16 1215, i16 1218, i16 1221, i16 1224, i16 1227, i16 1230, i16 1233, i16 1235, i16 1238, i16 1241, i16 1244, i16 1247, i16 1250, i16 1253, i16 1256, i16 1258, i16 1261, i16 1264, i16 1267, i16 1270, i16 1273, i16 1275, i16 1278, i16 1281, i16 1284, i16 1286, i16 1289, i16 1292, i16 1295, i16 1297, i16 1300, i16 1303, i16 1306, i16 1308, i16 1311, i16 1314, i16 1316, i16 1319, i16 1322, i16 1324, i16 1327, i16 1330, i16 1332, i16 1335, i16 1338, i16 1340, i16 1343, i16 1345, i16 1348, i16 1351, i16 1353, i16 1356, i16 1358, i16 1361, i16 1364, i16 1366, i16 1369, i16 1371, i16 1374, i16 1376, i16 1379, i16 1381, i16 1384, i16 1386, i16 1389, i16 1391, i16 1394, i16 1396, i16 1399, i16 1401, i16 1404, i16 1406, i16 1409, i16 1411, i16 1413, i16 1416, i16 1418, i16 1421, i16 1423, i16 1426, i16 1428, i16 1430, i16 1433, i16 1435, i16 1437, i16 1440, i16 1442, i16 1445, i16 1447, i16 1449, i16 1452, i16 1454, i16 1456, i16 1459, i16 1461, i16 1463, i16 1466, i16 1468, i16 1470, i16 1472, i16 1475, i16 1477, i16 1479, i16 1482, i16 1484, i16 1486, i16 1488, i16 1491, i16 1493, i16 1495, i16 1497, i16 1500, i16 1502, i16 1504, i16 1506, i16 1509, i16 1511, i16 1513, i16 1515, i16 1517, i16 1520, i16 1522, i16 1524, i16 1526, i16 1528, i16 1530, i16 1533, i16 1535, i16 1537, i16 1539, i16 1541, i16 1543, i16 1545, i16 1548, i16 1550, i16 1552, i16 1554, i16 1556, i16 1558, i16 1560, i16 1562, i16 1564, i16 1567, i16 1569, i16 1571, i16 1573, i16 1575, i16 1577, i16 1579, i16 1581, i16 1583, i16 1585, i16 1587, i16 1589, i16 1591, i16 1593, i16 1595, i16 1597, i16 1599, i16 1601, i16 1603, i16 1605, i16 1607, i16 1609, i16 691, i16 689, i16 687, i16 685, i16 683, i16 681, i16 679, i16 677, i16 675, i16 673, i16 671, i16 669, i16 668, i16 666, i16 664, i16 662, i16 660, i16 658, i16 656, i16 654, i16 652, i16 650, i16 648, i16 646, i16 644, i16 642, i16 641, i16 639, i16 637, i16 635, i16 633, i16 631, i16 629, i16 627, i16 626, i16 624, i16 622, i16 620, i16 618, i16 616, i16 614, i16 612, i16 611, i16 609, i16 607, i16 605, i16 603, i16 602, i16 600, i16 598, i16 596, i16 594, i16 592, i16 591, i16 589, i16 587, i16 585, i16 583, i16 582, i16 580, i16 578, i16 576, i16 574, i16 573, i16 571, i16 569, i16 567, i16 566, i16 564, i16 562, i16 560, i16 559, i16 557, i16 555, i16 553, i16 552, i16 550, i16 548, i16 546, i16 545, i16 543, i16 541, i16 540, i16 538, i16 536, i16 534, i16 533, i16 531, i16 529, i16 528, i16 526, i16 524, i16 523, i16 521, i16 519, i16 518, i16 516, i16 514, i16 512, i16 511, i16 509, i16 508, i16 506, i16 504, i16 502, i16 501, i16 499, i16 498, i16 496, i16 494, i16 493, i16 491, i16 489, i16 488, i16 486, i16 484, i16 483, i16 481, i16 480, i16 478, i16 476, i16 475, i16 473, i16 472, i16 470, i16 468, i16 467, i16 465, i16 464, i16 462, i16 460, i16 459, i16 457, i16 456, i16 454, i16 453, i16 451, i16 449, i16 448, i16 446, i16 445, i16 443, i16 442, i16 440, i16 438, i16 437, i16 435, i16 434, i16 432, i16 431, i16 429, i16 428, i16 426, i16 425, i16 423, i16 422, i16 420, i16 419, i16 417, i16 416, i16 414, i16 412, i16 411, i16 410, i16 408, i16 406, i16 405, i16 404, i16 402, i16 400, i16 399, i16 398, i16 396, i16 394, i16 393, i16 392, i16 390, i16 389, i16 387, i16 386, i16 384, i16 383, i16 381, i16 380, i16 378, i16 377, i16 375, i16 374, i16 372, i16 371, i16 370, i16 368, i16 367, i16 365, i16 364, i16 362, i16 361, i16 360, i16 358, i16 357, i16 355, i16 354, i16 352, i16 351, i16 350, i16 348, i16 347, i16 345, i16 344, i16 342, i16 341, i16 340, i16 338, i16 337, i16 336, i16 334, i16 333, i16 331, i16 330, i16 328, i16 327, i16 326, i16 324, i16 323, i16 322, i16 320, i16 319, i16 318, i16 316, i16 315, i16 313, i16 312, i16 311, i16 309, i16 308, i16 306, i16 305, i16 304, i16 302, i16 301, i16 300, i16 298, i16 297, i16 296, i16 294, i16 293, i16 292, i16 290, i16 289, i16 288, i16 286, i16 285, i16 284, i16 282, i16 281, i16 280, i16 278, i16 277, i16 276, i16 274, i16 273, i16 272, i16 270, i16 269, i16 268, i16 267, i16 265, i16 264, i16 263, i16 261, i16 260, i16 259, i16 258, i16 256, i16 255, i16 254, i16 252, i16 251, i16 250, i16 248, i16 247, i16 246, i16 245, i16 243, i16 242, i16 241, i16 240, i16 238, i16 237, i16 236, i16 234, i16 233, i16 232, i16 231, i16 229, i16 228, i16 227, i16 226, i16 224, i16 223, i16 222, i16 221, i16 219, i16 218, i16 217, i16 216, i16 214, i16 213, i16 212, i16 211, i16 210, i16 208, i16 207, i16 206, i16 205, i16 203, i16 202, i16 201, i16 200, i16 198, i16 197, i16 196, i16 195, i16 194, i16 192, i16 191, i16 190, i16 189, i16 188, i16 186, i16 185, i16 184, i16 183, i16 182, i16 180, i16 179, i16 178, i16 177, i16 176, i16 174, i16 173, i16 172, i16 171, i16 170, i16 168, i16 167, i16 166, i16 165, i16 164, i16 162, i16 161, i16 160, i16 159, i16 158, i16 157, i16 156, i16 154, i16 153, i16 152, i16 151, i16 150, i16 148, i16 147, i16 146, i16 145, i16 144, i16 143, i16 142, i16 140, i16 139, i16 138, i16 137, i16 136, i16 135, i16 134, i16 132, i16 131, i16 130, i16 129, i16 128, i16 127, i16 126, i16 124, i16 123, i16 122, i16 121, i16 120, i16 119, i16 118, i16 116, i16 115, i16 114, i16 113, i16 112, i16 111, i16 110, i16 109, i16 108, i16 106, i16 105, i16 104, i16 103, i16 102, i16 101, i16 100, i16 99, i16 98, i16 97, i16 95, i16 94, i16 93, i16 92, i16 91, i16 90, i16 89, i16 88, i16 87, i16 86, i16 84, i16 83, i16 82, i16 81, i16 80, i16 79, i16 78, i16 77, i16 76, i16 75, i16 74, i16 73, i16 72, i16 70, i16 69, i16 68, i16 67, i16 66, i16 65, i16 64, i16 63, i16 62, i16 61, i16 60, i16 59, i16 58, i16 57, i16 56, i16 54, i16 53, i16 52, i16 51, i16 50, i16 49, i16 48, i16 47, i16 46, i16 45, i16 44, i16 43, i16 42, i16 41, i16 40, i16 39, i16 38, i16 37, i16 36, i16 35, i16 34, i16 33, i16 31, i16 30, i16 29, i16 28, i16 27, i16 26, i16 25, i16 24, i16 23, i16 22, i16 21, i16 20, i16 19, i16 18, i16 17, i16 16, i16 15, i16 14, i16 13, i16 12, i16 11, i16 10, i16 9, i16 8, i16 7, i16 6, i16 5, i16 4, i16 3, i16 2, i16 1], align 16
@mprime_rdx = external hidden constant i64, align 8
@.str.14 = private unnamed_addr constant [15 x i8] c"%s:%d: error: \00", align 1
@.str.15 = private unnamed_addr constant [75 x i8] c"/home/juneyoung.lee/tmp/Python-3.4.1/Modules/_decimal/libmpdec/typearith.h\00", align 1
@.str.16 = private unnamed_addr constant [42 x i8] c"add_size_t(): overflow: check the context\00", align 1
@.str.17 = private unnamed_addr constant [42 x i8] c"mul_size_t(): overflow: check the context\00", align 1
@_mpd_qpow_mpd.two_data = private unnamed_addr constant [1 x i64] [i64 2], align 8
@_mpd_qinvroot.one_half_data = private unnamed_addr constant [1 x i64] [i64 5], align 8
@_mpd_qinvroot.three_data = private unnamed_addr constant [1 x i64] [i64 3], align 8

; Function Attrs: nounwind uwtable
define hidden i8* @mpd_version() #0 {
entry:
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0)
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_word_digits(i64 %word) #1 {
entry:
  %retval = alloca i32, align 4
  %word.addr = alloca i64, align 8
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %1 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 9), align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end.19

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %word.addr, align 8
  %3 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 4), align 8
  %cmp1 = icmp ult i64 %2, %3
  br i1 %cmp1, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.then
  %4 = load i64, i64* %word.addr, align 8
  %5 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 2), align 8
  %cmp3 = icmp ult i64 %4, %5
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  %6 = load i64, i64* %word.addr, align 8
  %7 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 1), align 8
  %cmp5 = icmp ult i64 %6, %7
  %cond = select i1 %cmp5, i32 1, i32 2
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  %8 = load i64, i64* %word.addr, align 8
  %9 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 3), align 8
  %cmp6 = icmp ult i64 %8, %9
  %cond7 = select i1 %cmp6, i32 3, i32 4
  store i32 %cond7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.then
  %10 = load i64, i64* %word.addr, align 8
  %11 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 6), align 8
  %cmp9 = icmp ult i64 %10, %11
  br i1 %cmp9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %if.end.8
  %12 = load i64, i64* %word.addr, align 8
  %13 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 5), align 8
  %cmp11 = icmp ult i64 %12, %13
  %cond12 = select i1 %cmp11, i32 5, i32 6
  store i32 %cond12, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.8
  %14 = load i64, i64* %word.addr, align 8
  %15 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 8), align 8
  %cmp14 = icmp ult i64 %14, %15
  br i1 %cmp14, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %if.end.13
  %16 = load i64, i64* %word.addr, align 8
  %17 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 7), align 8
  %cmp16 = icmp ult i64 %16, %17
  %cond17 = select i1 %cmp16, i32 7, i32 8
  store i32 %cond17, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.end.13
  store i32 9, i32* %retval
  br label %return

if.end.19:                                        ; preds = %entry
  %18 = load i64, i64* %word.addr, align 8
  %19 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 14), align 8
  %cmp20 = icmp ult i64 %18, %19
  br i1 %cmp20, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %if.end.19
  %20 = load i64, i64* %word.addr, align 8
  %21 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 11), align 8
  %cmp22 = icmp ult i64 %20, %21
  br i1 %cmp22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.then.21
  %22 = load i64, i64* %word.addr, align 8
  %23 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 10), align 8
  %cmp24 = icmp ult i64 %22, %23
  %cond25 = select i1 %cmp24, i32 10, i32 11
  store i32 %cond25, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.then.21
  %24 = load i64, i64* %word.addr, align 8
  %25 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 13), align 8
  %cmp27 = icmp ult i64 %24, %25
  br i1 %cmp27, label %if.then.28, label %if.end.31

if.then.28:                                       ; preds = %if.end.26
  %26 = load i64, i64* %word.addr, align 8
  %27 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 12), align 8
  %cmp29 = icmp ult i64 %26, %27
  %cond30 = select i1 %cmp29, i32 12, i32 13
  store i32 %cond30, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.26
  store i32 14, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.19
  %28 = load i64, i64* %word.addr, align 8
  %29 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 18), align 8
  %cmp33 = icmp ult i64 %28, %29
  br i1 %cmp33, label %if.then.34, label %if.end.42

if.then.34:                                       ; preds = %if.end.32
  %30 = load i64, i64* %word.addr, align 8
  %31 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 16), align 8
  %cmp35 = icmp ult i64 %30, %31
  br i1 %cmp35, label %if.then.36, label %if.end.39

if.then.36:                                       ; preds = %if.then.34
  %32 = load i64, i64* %word.addr, align 8
  %33 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 15), align 8
  %cmp37 = icmp ult i64 %32, %33
  %cond38 = select i1 %cmp37, i32 15, i32 16
  store i32 %cond38, i32* %retval
  br label %return

if.end.39:                                        ; preds = %if.then.34
  %34 = load i64, i64* %word.addr, align 8
  %35 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 17), align 8
  %cmp40 = icmp ult i64 %34, %35
  %cond41 = select i1 %cmp40, i32 17, i32 18
  store i32 %cond41, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.32
  %36 = load i64, i64* %word.addr, align 8
  %37 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 19), align 8
  %cmp43 = icmp ult i64 %36, %37
  %cond44 = select i1 %cmp43, i32 19, i32 20
  store i32 %cond44, i32* %retval
  br label %return

return:                                           ; preds = %if.end.42, %if.end.39, %if.then.36, %if.end.31, %if.then.28, %if.then.23, %if.end.18, %if.then.15, %if.then.10, %if.end, %if.then.4
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_adjexp(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 1
  %1 = load i64, i64* %exp, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 2
  %3 = load i64, i64* %digits, align 8
  %add = add i64 %1, %3
  %sub = sub i64 %add, 1
  ret i64 %sub
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_etiny(%struct.mpd_context_t* %ctx) #1 {
entry:
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 2
  %1 = load i64, i64* %emin, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 0
  %3 = load i64, i64* %prec, align 8
  %sub = sub i64 %3, 1
  %sub1 = sub i64 %1, %sub
  ret i64 %sub1
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_etop(%struct.mpd_context_t* %ctx) #1 {
entry:
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 1
  %1 = load i64, i64* %emax, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 0
  %3 = load i64, i64* %prec, align 8
  %sub = sub i64 %3, 1
  %sub1 = sub i64 %1, %sub
  ret i64 %sub1
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_msword(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 3
  %1 = load i64, i64* %len, align 8
  %sub = sub i64 %1, 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 5
  %3 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %3, i64 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: inlinehint nounwind uwtable
define hidden i64 @mpd_msd(i64 %word) #2 {
entry:
  %word.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %call = call i32 @mpd_word_digits(i64 %0)
  store i32 %call, i32* %n, align 4
  %1 = load i64, i64* %word.addr, align 8
  %2 = load i32, i32* %n, align 4
  %sub = sub i32 %2, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %div = udiv i64 %1, %3
  ret i64 %div
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_lsd(i64 %word) #1 {
entry:
  %word.addr = alloca i64, align 8
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %rem = urem i64 %0, 10
  ret i64 %rem
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_digits_to_size(i64 %digits) #1 {
entry:
  %digits.addr = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  store i64 %digits, i64* %digits.addr, align 8
  %0 = load i64, i64* %digits.addr, align 8
  call void @_mpd_idiv_word(i64* %q, i64* %r, i64 %0, i64 19)
  %1 = load i64, i64* %r, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %q, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %q, align 8
  %add = add i64 %3, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %add, %cond.false ]
  ret i64 %cond
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_idiv_word(i64* %q, i64* %r, i64 %v, i64 %d) #2 {
entry:
  %q.addr = alloca i64*, align 8
  %r.addr = alloca i64*, align 8
  %v.addr = alloca i64, align 8
  %d.addr = alloca i64, align 8
  store i64* %q, i64** %q.addr, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store i64 %d, i64* %d.addr, align 8
  %0 = load i64, i64* %v.addr, align 8
  %1 = load i64, i64* %d.addr, align 8
  %div = sdiv i64 %0, %1
  %2 = load i64*, i64** %q.addr, align 8
  store i64 %div, i64* %2, align 8
  %3 = load i64, i64* %v.addr, align 8
  %4 = load i64*, i64** %q.addr, align 8
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %d.addr, align 8
  %mul = mul i64 %5, %6
  %sub = sub i64 %3, %mul
  %7 = load i64*, i64** %r.addr, align 8
  store i64 %sub, i64* %7, align 8
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define hidden i32 @mpd_exp_digits(i64 %exp) #2 {
entry:
  %exp.addr = alloca i64, align 8
  store i64 %exp, i64* %exp.addr, align 8
  %0 = load i64, i64* %exp.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %exp.addr, align 8
  %sub = sub i64 0, %1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %exp.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %2, %cond.false ]
  store i64 %cond, i64* %exp.addr, align 8
  %3 = load i64, i64* %exp.addr, align 8
  %call = call i32 @mpd_word_digits(i64 %3)
  ret i32 %call
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_iscanonical(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  ret i32 1
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isfinite(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 14
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isinfinite(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 2
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isnan(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 12
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isnegative(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_ispositive(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isqnan(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_issigned(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_issnan(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 8
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isspecial(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 14
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_iszero(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i64 @mpd_msword(%struct.mpd_t* %1)
  %cmp = icmp eq i64 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_iszerocoeff(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i64 @mpd_msword(%struct.mpd_t* %0)
  %cmp = icmp eq i64 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define hidden i32 @mpd_isnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx) #2 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call5 = call i64 @mpd_adjexp(%struct.mpd_t* %2)
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %3, i32 0, i32 2
  %4 = load i64, i64* %emin, align 8
  %cmp = icmp sge i64 %call5, %4
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: inlinehint nounwind uwtable
define hidden i32 @mpd_issubnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx) #2 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call5 = call i64 @mpd_adjexp(%struct.mpd_t* %2)
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %3, i32 0, i32 2
  %4 = load i64, i64* %emin, align 8
  %cmp = icmp slt i64 %call5, %4
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isoddword(i64 %word) #1 {
entry:
  %word.addr = alloca i64, align 8
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %and = and i64 %0, 1
  %conv = trunc i64 %and to i32
  ret i32 %conv
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isoddcoeff(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 5
  %1 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %1, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %call = call i32 @mpd_isoddword(i64 %2)
  ret i32 %call
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden zeroext i8 @mpd_sign(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  %conv1 = trunc i32 %and to i8
  ret i8 %conv1
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_arith_sign(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isnegative(%struct.mpd_t* %0)
  %mul = mul i32 2, %call
  %sub = sub i32 1, %mul
  ret i32 %sub
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i64 @mpd_radix() #1 {
entry:
  ret i64 10
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isdynamic(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isstatic(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 16
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isdynamic_data(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 224
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isstatic_data(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 32
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isshared_data(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 64
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_isconst_data(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  ret i32 %and
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_uint_zero(i64* %dest, i64 %len) #1 {
entry:
  %dest.addr = alloca i64*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64* %dest, i64** %dest.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %3 = load i64*, i64** %dest.addr, align 8
  %arrayidx = getelementptr i64, i64* %3, i64 %2
  store i64 0, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_del(%struct.mpd_t* %dec) #1 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isdynamic_data(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 5
  %3 = load i64*, i64** %data, align 8
  %4 = bitcast i64* %3 to i8*
  call void %1(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @mpd_isdynamic(%struct.mpd_t* %5)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %6 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %8 = bitcast %struct.mpd_t* %7 to i8*
  call void %6(i8* %8)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_qresize(%struct.mpd_t* %result, i64 %nwords, i32* %status) #1 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %nwords.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %nwords, i64* %nwords.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %nwords.addr, align 8
  %1 = load i64, i64* @MPD_MINALLOC, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* @MPD_MINALLOC, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %nwords.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  store i64 %cond, i64* %nwords.addr, align 8
  %4 = load i64, i64* %nwords.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 4
  %6 = load i64, i64* %alloc, align 8
  %cmp1 = icmp eq i64 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_isstatic_data(%struct.mpd_t* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.end
  %8 = load i64, i64* %nwords.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 4
  %10 = load i64, i64* %alloc3, align 8
  %cmp4 = icmp sgt i64 %8, %10
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.then.2
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load i64, i64* %nwords.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call6 = call i32 @mpd_switch_to_dyn(%struct.mpd_t* %11, i64 %12, i32* %13)
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.2
  store i32 1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load i64, i64* %nwords.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  %call9 = call i32 @mpd_realloc_dyn(%struct.mpd_t* %14, i64 %15, i32* %16)
  store i32 %call9, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.end.7, %if.then.5, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

declare hidden i32 @mpd_switch_to_dyn(%struct.mpd_t*, i64, i32*) #3

declare hidden i32 @mpd_realloc_dyn(%struct.mpd_t*, i64, i32*) #3

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden i32 @mpd_qresize_zero(%struct.mpd_t* %result, i64 %nwords, i32* %status) #1 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %nwords.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %nwords, i64* %nwords.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %nwords.addr, align 8
  %1 = load i64, i64* @MPD_MINALLOC, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* @MPD_MINALLOC, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %nwords.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  store i64 %cond, i64* %nwords.addr, align 8
  %4 = load i64, i64* %nwords.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 4
  %6 = load i64, i64* %alloc, align 8
  %cmp1 = icmp ne i64 %4, %6
  br i1 %cmp1, label %if.then, label %if.end.12

if.then:                                          ; preds = %cond.end
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_isstatic_data(%struct.mpd_t* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %8 = load i64, i64* %nwords.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 4
  %10 = load i64, i64* %alloc3, align 8
  %cmp4 = icmp sgt i64 %8, %10
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.2
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load i64, i64* %nwords.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call6 = call i32 @mpd_switch_to_dyn_zero(%struct.mpd_t* %11, i64 %12, i32* %13)
  store i32 %call6, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  br label %if.end.11

if.else:                                          ; preds = %if.then
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load i64, i64* %nwords.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_realloc_dyn(%struct.mpd_t* %14, i64 %15, i32* %16)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.else
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %if.end
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %cond.end
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 5
  %18 = load i64*, i64** %data, align 8
  %19 = load i64, i64* %nwords.addr, align 8
  call void @mpd_uint_zero(i64* %18, i64 %19)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.9, %if.then.5
  %20 = load i32, i32* %retval
  ret i32 %20
}

declare hidden i32 @mpd_switch_to_dyn_zero(%struct.mpd_t*, i64, i32*) #3

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_minalloc(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %err = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_isstatic_data(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.6, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 4
  %2 = load i64, i64* %alloc, align 8
  %3 = load i64, i64* @MPD_MINALLOC, align 8
  %cmp = icmp sgt i64 %2, %3
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %err, align 1
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 5
  %5 = load i64*, i64** %data, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64, i64* @MPD_MINALLOC, align 8
  %call1 = call i8* @mpd_realloc(i8* %6, i64 %7, i64 8, i8* %err)
  %8 = bitcast i8* %call1 to i64*
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 5
  store i64* %8, i64** %data2, align 8
  %10 = load i8, i8* %err, align 1
  %tobool3 = icmp ne i8 %10, 0
  br i1 %tobool3, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %11 = load i64, i64* @MPD_MINALLOC, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 4
  store i64 %11, i64* %alloc5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

declare hidden i8* @mpd_realloc(i8*, i64, i64, i8*) #3

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_resize(%struct.mpd_t* %result, i64 %nwords, %struct.mpd_context_t* %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %nwords.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %nwords, i64* %nwords.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %nwords.addr, align 8
  %call = call i32 @mpd_qresize(%struct.mpd_t* %0, i64 %1, i32* %status)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32, i32* %status, align 4
  call void @mpd_addstatus_raise(%struct.mpd_context_t* %2, i32 %3)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

declare hidden void @mpd_addstatus_raise(%struct.mpd_context_t*, i32) #3

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_resize_zero(%struct.mpd_t* %result, i64 %nwords, %struct.mpd_context_t* %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %nwords.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %nwords, i64* %nwords.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %nwords.addr, align 8
  %call = call i32 @mpd_qresize_zero(%struct.mpd_t* %0, i64 %1, i32* %status)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32, i32* %status, align 4
  call void @mpd_addstatus_raise(%struct.mpd_context_t* %2, i32 %3)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define hidden void @mpd_setdigits(%struct.mpd_t* %result) #2 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %wdigits = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i64 @mpd_msword(%struct.mpd_t* %0)
  %call1 = call i32 @mpd_word_digits(i64 %call)
  %conv = sext i32 %call1 to i64
  store i64 %conv, i64* %wdigits, align 8
  %1 = load i64, i64* %wdigits, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 3
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %mul = mul i64 %sub, 19
  %add = add i64 %1, %mul
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 2
  store i64 %add, i64* %digits, align 8
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_sign(%struct.mpd_t* %result, i8 zeroext %sign) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %sign.addr = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i8 %sign, i8* %sign.addr, align 1
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -2
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load i8, i8* %sign.addr, align 1
  %conv2 = zext i8 %2 to i32
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 0
  %4 = load i8, i8* %flags3, align 1
  %conv4 = zext i8 %4 to i32
  %or = or i32 %conv4, %conv2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %flags3, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_signcpy(%struct.mpd_t* %result, %struct.mpd_t* %a) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %sign, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %and4 = and i32 %conv3, -2
  %conv5 = trunc i32 %and4 to i8
  store i8 %conv5, i8* %flags2, align 1
  %4 = load i8, i8* %sign, align 1
  %conv6 = zext i8 %4 to i32
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 0
  %6 = load i8, i8* %flags7, align 1
  %conv8 = zext i8 %6 to i32
  %or = or i32 %conv8, %conv6
  %conv9 = trunc i32 %or to i8
  store i8 %conv9, i8* %flags7, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_infinity(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -15
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 2
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_qnan(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -15
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 4
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_snan(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -15
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 8
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_negative(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %or = or i32 %conv, 1
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_positive(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -2
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_dynamic(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -17
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_static(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %or = or i32 %conv, 16
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_dynamic_data(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -225
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_static_data(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -225
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 32
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_shared_data(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -225
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 64
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_const_data(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -225
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %conv3, 128
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %flags2, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_clear_flags(%struct.mpd_t* %result) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 240
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_set_flags(%struct.mpd_t* %result, i8 zeroext %flags) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %flags.addr = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i8 %flags, i8* %flags.addr, align 1
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags1, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 240
  %conv2 = trunc i32 %and to i8
  store i8 %conv2, i8* %flags1, align 1
  %2 = load i8, i8* %flags.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 0
  %4 = load i8, i8* %flags4, align 1
  %conv5 = zext i8 %4 to i32
  %or = or i32 %conv5, %conv3
  %conv6 = trunc i32 %or to i8
  store i8 %conv6, i8* %flags4, align 1
  ret void
}

; Function Attrs: alwaysinline inlinehint nounwind uwtable
define hidden void @mpd_copy_flags(%struct.mpd_t* %result, %struct.mpd_t* %a) #1 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %aflags = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  store i8 %1, i8* %aflags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags1, align 1
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 240
  %conv2 = trunc i32 %and to i8
  store i8 %conv2, i8* %flags1, align 1
  %4 = load i8, i8* %aflags, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, -241
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 0
  %6 = load i8, i8* %flags5, align 1
  %conv6 = zext i8 %6 to i32
  %or = or i32 %conv6, %and4
  %conv7 = trunc i32 %or to i8
  store i8 %conv7, i8* %flags5, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_zerocoeff(%struct.mpd_t* %result) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 5
  %4 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %4, i64 0
  store i64 0, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmaxcoeff(%struct.mpd_t* %result, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %len = alloca i64, align 8
  %r = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 0
  %1 = load i64, i64* %prec, align 8
  call void @_mpd_idiv_word(i64* %len, i64* %r, i64 %1, i64 19)
  %2 = load i64, i64* %r, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %len, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i64, i64* %len, align 8
  %add = add i64 %4, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %add, %cond.false ]
  store i64 %cond, i64* %len, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load i64, i64* %len, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qresize(%struct.mpd_t* %5, i64 %6, i32* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  br label %for.end

if.end:                                           ; preds = %cond.end
  %8 = load i64, i64* %len, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  store i64 %8, i64* %len1, align 8
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec2 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %10, i32 0, i32 0
  %11 = load i64, i64* %prec2, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  store i64 %11, i64* %digits, align 8
  %13 = load i64, i64* %len, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %len, align 8
  %14 = load i64, i64* %r, align 8
  %cmp3 = icmp sgt i64 %14, 0
  br i1 %cmp3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %15 = load i64, i64* %r, align 8
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %15
  %16 = load i64, i64* %arrayidx, align 8
  %sub = sub i64 %16, 1
  %17 = load i64, i64* %len, align 8
  %dec5 = add i64 %17, -1
  store i64 %dec5, i64* %len, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 5
  %19 = load i64*, i64** %data, align 8
  %arrayidx6 = getelementptr i64, i64* %19, i64 %17
  store i64 %sub, i64* %arrayidx6, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %20 = load i64, i64* %len, align 8
  %cmp8 = icmp sge i64 %20, 0
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i64, i64* %len, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 5
  %23 = load i64*, i64** %data9, align 8
  %arrayidx10 = getelementptr i64, i64* %23, i64 %21
  store i64 -8446744073709551617, i64* %arrayidx10, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i64, i64* %len, align 8
  %dec11 = add i64 %24, -1
  store i64 %dec11, i64* %len, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_trail_zeros(%struct.mpd_t* %dec) #0 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %word = alloca i64, align 8
  %i = alloca i64, align 8
  %tz = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i64 0, i64* %tz, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 3
  %2 = load i64, i64* %len, align 8
  %cmp = icmp slt i64 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %i, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 5
  %5 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %5, i64 %3
  %6 = load i64, i64* %arrayidx, align 8
  %cmp1 = icmp ne i64 %6, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 5
  %9 = load i64*, i64** %data2, align 8
  %arrayidx3 = getelementptr i64, i64* %9, i64 %7
  %10 = load i64, i64* %arrayidx3, align 8
  store i64 %10, i64* %word, align 8
  %11 = load i64, i64* %i, align 8
  %mul = mul i64 %11, 19
  store i64 %mul, i64* %tz, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %12 = load i64, i64* %word, align 8
  %rem = urem i64 %12, 10
  %cmp4 = icmp eq i64 %rem, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %word, align 8
  %div = udiv i64 %13, 10
  store i64 %div, i64* %word, align 8
  %14 = load i64, i64* %tz, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %tz, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i64, i64* %i, align 8
  %inc5 = add i64 %15, 1
  store i64 %inc5, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %while.end, %for.cond
  %16 = load i64, i64* %tz, align 8
  ret i64 %16
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_isinteger(%struct.mpd_t* %dec) #0 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @_mpd_isint(%struct.mpd_t* %1)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_isint(%struct.mpd_t* %dec) #0 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %tz = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i64 @mpd_trail_zeros(%struct.mpd_t* %1)
  store i64 %call1, i64* %tz, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 1
  %3 = load i64, i64* %exp, align 8
  %4 = load i64, i64* %tz, align 8
  %add = add i64 %3, %4
  %cmp = icmp sge i64 %add, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_isodd(%struct.mpd_t* %dec) #0 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 1
  %2 = load i64, i64* %exp, align 8
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then.1, label %if.end.5

if.then.1:                                        ; preds = %if.end
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp2, align 8
  %sub = sub i64 0, %4
  call void @_mpd_div_word(i64* %q, i64* %r, i64 %sub, i64 19)
  %5 = load i64, i64* %q, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 5
  %7 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %7, i64 %5
  %8 = load i64, i64* %arrayidx, align 8
  %9 = load i64, i64* %r, align 8
  %arrayidx3 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %9
  %10 = load i64, i64* %arrayidx3, align 8
  %div = udiv i64 %8, %10
  store i64 %div, i64* %q, align 8
  %11 = load i64, i64* %q, align 8
  %call4 = call i32 @mpd_isoddword(i64 %11)
  store i32 %call4, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp6, align 8
  %cmp7 = icmp eq i64 %13, 0
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.5
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 5
  %15 = load i64*, i64** %data8, align 8
  %arrayidx9 = getelementptr i64, i64* %15, i64 0
  %16 = load i64, i64* %arrayidx9, align 8
  %call10 = call i32 @mpd_isoddword(i64 %16)
  %tobool11 = icmp ne i32 %call10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.5
  %17 = phi i1 [ false, %if.end.5 ], [ %tobool11, %land.rhs ]
  %land.ext = zext i1 %17 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.1, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_div_word(i64* %q, i64* %r, i64 %v, i64 %d) #2 {
entry:
  %q.addr = alloca i64*, align 8
  %r.addr = alloca i64*, align 8
  %v.addr = alloca i64, align 8
  %d.addr = alloca i64, align 8
  store i64* %q, i64** %q.addr, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store i64 %d, i64* %d.addr, align 8
  %0 = load i64, i64* %v.addr, align 8
  %1 = load i64, i64* %d.addr, align 8
  %div = udiv i64 %0, %1
  %2 = load i64*, i64** %q.addr, align 8
  store i64 %div, i64* %2, align 8
  %3 = load i64, i64* %v.addr, align 8
  %4 = load i64*, i64** %q.addr, align 8
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %d.addr, align 8
  %mul = mul i64 %5, %6
  %sub = sub i64 %3, %mul
  %7 = load i64*, i64** %r.addr, align 8
  store i64 %sub, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_iseven(%struct.mpd_t* %dec) #0 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isodd(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_setspecial(%struct.mpd_t* %result, i8 zeroext %sign, i8 zeroext %type) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %sign.addr = alloca i8, align 1
  %type.addr = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i8 %sign, i8* %sign.addr, align 1
  store i8 %type, i8* %type.addr, align 1
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 0
  %2 = load i8, i8* %flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, -16
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 1
  %3 = load i8, i8* %sign.addr, align 1
  %conv2 = zext i8 %3 to i32
  %4 = load i8, i8* %type.addr, align 1
  %conv3 = zext i8 %4 to i32
  %or = or i32 %conv2, %conv3
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 0
  %6 = load i8, i8* %flags4, align 1
  %conv5 = zext i8 %6 to i32
  %or6 = or i32 %conv5, %or
  %conv7 = trunc i32 %or6 to i8
  store i8 %conv7, i8* %flags4, align 1
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_seterror(%struct.mpd_t* %result, i32 %flags, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %flags.addr = alloca i32, align 4
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_qnan(%struct.mpd_t* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_positive(%struct.mpd_t* %2)
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %7 = load i32*, i32** %status.addr, align 8
  %8 = load i32, i32* %7, align 4
  %or = or i32 %8, %6
  store i32 %or, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_ssize(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %u = alloca i64, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i8 0, i8* %sign, align 1
  %0 = load i64, i64* %a.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else.3

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8
  %cmp1 = icmp eq i64 %1, -9223372036854775808
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  store i64 -9223372036854775808, i64* %u, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %2 = load i64, i64* %a.addr, align 8
  %sub = sub i64 0, %2
  store i64 %sub, i64* %u, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  store i8 1, i8* %sign, align 1
  br label %if.end.4

if.else.3:                                        ; preds = %entry
  %3 = load i64, i64* %a.addr, align 8
  store i64 %3, i64* %u, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.else.3, %if.end
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load i8, i8* %sign, align 1
  %6 = load i64, i64* %u, align 8
  call void @_ssettriple(%struct.mpd_t* %4, i8 zeroext %5, i64 %6, i64 0)
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %9)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_ssettriple(%struct.mpd_t* %result, i8 zeroext %sign, i64 %a, i64 %exp) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %sign.addr = alloca i8, align 1
  %a.addr = alloca i64, align 8
  %exp.addr = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i8 %sign, i8* %sign.addr, align 1
  store i64 %a, i64* %a.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i8, i8* %sign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %0, i8 zeroext %1)
  %2 = load i64, i64* %exp.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  store i64 %2, i64* %exp1, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 5
  %5 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %5, i64 1
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 5
  %7 = load i64*, i64** %data2, align 8
  %arrayidx3 = getelementptr i64, i64* %7, i64 0
  %8 = load i64, i64* %a.addr, align 8
  call void @_mpd_div_word(i64* %arrayidx, i64* %arrayidx3, i64 %8, i64 -8446744073709551616)
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 5
  %10 = load i64*, i64** %data4, align 8
  %arrayidx5 = getelementptr i64, i64* %10, i64 1
  %11 = load i64, i64* %arrayidx5, align 8
  %cmp = icmp eq i64 %11, 0
  %cond = select i1 %cmp, i32 1, i32 2
  %conv = sext i32 %cond to i64
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 3
  store i64 %conv, i64* %len, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %13)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qfinalize(%struct.mpd_t* %result, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_fix_nan(%struct.mpd_t* %2, %struct.mpd_context_t* %3)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  br label %return

if.end.4:                                         ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  call void @_mpd_check_exp(%struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @_mpd_check_round(%struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %9)
  br label %return

return:                                           ; preds = %if.end.4, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_uint(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  call void @_ssettriple(%struct.mpd_t* %0, i8 zeroext 0, i64 %1, i64 0)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_i32(%struct.mpd_t* %result, i32 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i32, i32* %a.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %0, i64 %conv, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_u32(%struct.mpd_t* %result, i32 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i32, i32* %a.addr, align 4
  %conv = zext i32 %1 to i64
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %0, i64 %conv, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_i64(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsset_u64(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_ssize(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load i64, i64* %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_uint(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  call void @_settriple(%struct.mpd_t* %0, i8 zeroext 0, i64 %1, i64 0)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_settriple(%struct.mpd_t* %result, i8 zeroext %sign, i64 %a, i64 %exp) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %sign.addr = alloca i8, align 1
  %a.addr = alloca i64, align 8
  %exp.addr = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i8 %sign, i8* %sign.addr, align 1
  store i64 %a, i64* %a.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load i8, i8* %sign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %1, i8 zeroext %2)
  %3 = load i64, i64* %exp.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 1
  store i64 %3, i64* %exp1, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 5
  %6 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %6, i64 1
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 5
  %8 = load i64*, i64** %data2, align 8
  %arrayidx3 = getelementptr i64, i64* %8, i64 0
  %9 = load i64, i64* %a.addr, align 8
  call void @_mpd_div_word(i64* %arrayidx, i64* %arrayidx3, i64 %9, i64 -8446744073709551616)
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 5
  %11 = load i64*, i64** %data4, align 8
  %arrayidx5 = getelementptr i64, i64* %11, i64 1
  %12 = load i64, i64* %arrayidx5, align 8
  %cmp = icmp eq i64 %12, 0
  %cond = select i1 %cmp, i32 1, i32 2
  %conv = sext i32 %cond to i64
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 3
  store i64 %conv, i64* %len, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %14)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_i32(%struct.mpd_t* %result, i32 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i32, i32* %a.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qset_ssize(%struct.mpd_t* %0, i64 %conv, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_u32(%struct.mpd_t* %result, i32 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32 %a, i32* %a.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i32, i32* %a.addr, align 4
  %conv = zext i32 %1 to i64
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qset_uint(%struct.mpd_t* %0, i64 %conv, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_i64(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qset_ssize(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qset_u64(%struct.mpd_t* %result, i64 %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i64, i64* %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_qset_uint(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qget_uint(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @_mpd_qget_uint(i32 1, %struct.mpd_t* %0, i32* %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @_mpd_qget_uint(i32 %use_sign, %struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %use_sign.addr = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %tmp = alloca %struct.mpd_t, align 8
  %tmp_data = alloca [2 x i64], align 16
  %lo = alloca i64, align 8
  %hi = alloca i64, align 8
  store i32 %use_sign, i32* %use_sign.addr, align 4
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %status.addr, align 8
  %2 = load i32, i32* %1, align 4
  %or = or i32 %2, 256
  store i32 %or, i32* %1, align 4
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_iszero(%struct.mpd_t* %3)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store i64 0, i64* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %4 = load i32, i32* %use_sign.addr, align 4
  %tobool8 = icmp ne i32 %4, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.end.7
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %land.lhs.true
  %6 = load i32*, i32** %status.addr, align 8
  %7 = load i32, i32* %6, align 4
  %or12 = or i32 %7, 256
  store i32 %or12, i32* %6, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.13:                                        ; preds = %land.lhs.true, %if.end.7
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 2
  %9 = load i64, i64* %digits, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 1
  %11 = load i64, i64* %exp, align 8
  %add = add i64 %9, %11
  %cmp = icmp sgt i64 %add, 20
  br i1 %cmp, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end.13
  %12 = load i32*, i32** %status.addr, align 8
  %13 = load i32, i32* %12, align 4
  %or15 = or i32 %13, 256
  store i32 %or15, i32* %12, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.13
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 1
  %15 = load i64, i64* %exp17, align 8
  %cmp18 = icmp slt i64 %15, 0
  br i1 %cmp18, label %if.then.19, label %if.end.28

if.then.19:                                       ; preds = %if.end.16
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call20 = call i32 @_mpd_isint(%struct.mpd_t* %16)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end.24, label %if.then.22

if.then.22:                                       ; preds = %if.then.19
  %17 = load i32*, i32** %status.addr, align 8
  %18 = load i32, i32* %17, align 4
  %or23 = or i32 %18, 256
  store i32 %or23, i32* %17, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.19
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %tmp_data, i32 0, i32 0
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  store i64* %arraydecay, i64** %data, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 2, i64* %alloc, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 1
  %21 = load i64, i64* %exp25, align 8
  %sub = sub i64 0, %21
  %call26 = call i64 @mpd_qsshiftr(%struct.mpd_t* %tmp, %struct.mpd_t* %19, i64 %sub)
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp27, align 8
  store %struct.mpd_t* %tmp, %struct.mpd_t** %a.addr, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.24, %if.end.16
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @_mpd_get_msdigits(i64* %hi, i64* %lo, %struct.mpd_t* %22, i32 20)
  %23 = load i64, i64* %hi, align 8
  %tobool29 = icmp ne i64 %23, 0
  br i1 %tobool29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.28
  %24 = load i32*, i32** %status.addr, align 8
  %25 = load i32, i32* %24, align 4
  %or31 = or i32 %25, 256
  store i32 %or31, i32* %24, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp33, align 8
  %cmp34 = icmp sgt i64 %27, 0
  br i1 %cmp34, label %if.then.35, label %if.end.41

if.then.35:                                       ; preds = %if.end.32
  %28 = load i64, i64* %lo, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp36 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 1
  %30 = load i64, i64* %exp36, align 8
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %30
  %31 = load i64, i64* %arrayidx, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %28, i64 %31)
  %32 = load i64, i64* %hi, align 8
  %tobool37 = icmp ne i64 %32, 0
  br i1 %tobool37, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %if.then.35
  %33 = load i32*, i32** %status.addr, align 8
  %34 = load i32, i32* %33, align 4
  %or39 = or i32 %34, 256
  store i32 %or39, i32* %33, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.40:                                        ; preds = %if.then.35
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.32
  %35 = load i64, i64* %lo, align 8
  store i64 %35, i64* %retval
  br label %return

return:                                           ; preds = %if.end.41, %if.then.38, %if.then.30, %if.then.22, %if.then.14, %if.then.11, %if.then.6, %if.then
  %36 = load i64, i64* %retval
  ret i64 %36
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qabs_uint(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @_mpd_qget_uint(i32 0, %struct.mpd_t* %0, i32* %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qget_ssize(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %u = alloca i64, align 8
  %isneg = alloca i32, align 4
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qabs_uint(%struct.mpd_t* %0, i32* %1)
  store i64 %call, i64* %u, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %and = and i32 %3, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isnegative(%struct.mpd_t* %4)
  store i32 %call1, i32* %isneg, align 4
  %5 = load i64, i64* %u, align 8
  %cmp = icmp ule i64 %5, 9223372036854775807
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %6 = load i32, i32* %isneg, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.2
  %7 = load i64, i64* %u, align 8
  %sub = sub i64 0, %7
  br label %cond.end

cond.false:                                       ; preds = %if.then.2
  %8 = load i64, i64* %u, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %8, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %isneg, align 4
  %tobool4 = icmp ne i32 %9, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.else
  %10 = load i64, i64* %u, align 8
  %add = add i64 %10, -1
  %cmp5 = icmp eq i64 %add, 9223372036854775807
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %land.lhs.true
  store i64 -9223372036854775808, i64* %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true, %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7
  %11 = load i32*, i32** %status.addr, align 8
  %12 = load i32, i32* %11, align 4
  %or = or i32 %12, 256
  store i32 %or, i32* %11, align 4
  store i64 9223372036854775807, i64* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.6, %cond.end, %if.then
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qget_u64(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qget_uint(%struct.mpd_t* %0, i32* %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qget_i64(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qget_ssize(%struct.mpd_t* %0, i32* %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qget_u32(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %x = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qget_uint(%struct.mpd_t* %0, i32* %1)
  store i64 %call, i64* %x, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %and = and i32 %3, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %x, align 8
  %cmp = icmp ugt i64 %4, 4294967295
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %5 = load i32*, i32** %status.addr, align 8
  %6 = load i32, i32* %5, align 4
  %or = or i32 %6, 256
  store i32 %or, i32* %5, align 4
  store i32 -1, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %7 = load i64, i64* %x, align 8
  %conv = trunc i64 %7 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.2, %if.then.1, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qget_i32(%struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %x = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qget_ssize(%struct.mpd_t* %0, i32* %1)
  store i64 %call, i64* %x, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %and = and i32 %3, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 2147483647, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %x, align 8
  %cmp = icmp slt i64 %4, -2147483648
  br i1 %cmp, label %if.then.2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i64, i64* %x, align 8
  %cmp1 = icmp sgt i64 %5, 2147483647
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %lor.lhs.false, %if.end
  %6 = load i32*, i32** %status.addr, align 8
  %7 = load i32, i32* %6, align 4
  %or = or i32 %7, 256
  store i32 %or, i32* %6, align 4
  store i32 2147483647, i32* %retval
  br label %return

if.end.3:                                         ; preds = %lor.lhs.false
  %8 = load i64, i64* %x, align 8
  %conv = trunc i64 %8 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcheck_nan(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_issnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  %cond = select i1 %tobool2, i32 256, i32 0
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %or = or i32 %3, %cond
  store i32 %or, i32* %2, align 4
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy(%struct.mpd_t* %4, %struct.mpd_t* %5, i32* %6)
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_qnan(%struct.mpd_t* %7)
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_fix_nan(%struct.mpd_t* %8, %struct.mpd_context_t* %9)
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcopy(%struct.mpd_t* %result, %struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 3
  %4 = load i64, i64* %len, align 8
  %5 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qresize(%struct.mpd_t* %2, i64 %4, i32* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.2, label %if.then.1

if.then.1:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %6, %struct.mpd_t* %7)
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 1
  store i64 %9, i64* %exp3, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 2
  %12 = load i64, i64* %digits, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 2
  store i64 %12, i64* %digits4, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 3
  %15 = load i64, i64* %len5, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  store i64 %15, i64* %len6, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 5
  %18 = load i64*, i64** %data, align 8
  %19 = bitcast i64* %18 to i8*
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 5
  %21 = load i64*, i64** %data7, align 8
  %22 = bitcast i64* %21 to i8*
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 3
  %24 = load i64, i64* %len8, align 8
  %mul = mul i64 %24, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %22, i64 %mul, i32 8, i1 false)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.2, %if.then.1, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_fix_nan(%struct.mpd_t* %result, %struct.mpd_context_t* %ctx) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %dummy = alloca i32, align 4
  %prec = alloca i64, align 8
  %len = alloca i64, align 8
  %r = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec1 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 0
  %1 = load i64, i64* %prec1, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 7
  %3 = load i32, i32* %clamp, align 4
  %conv = sext i32 %3 to i64
  %sub = sub i64 %1, %conv
  store i64 %sub, i64* %prec, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 3
  %5 = load i64, i64* %len2, align 8
  %cmp = icmp sgt i64 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 2
  %7 = load i64, i64* %digits, align 8
  %8 = load i64, i64* %prec, align 8
  %cmp4 = icmp sgt i64 %7, %8
  br i1 %cmp4, label %if.then, label %if.end.27

if.then:                                          ; preds = %land.lhs.true
  %9 = load i64, i64* %prec, align 8
  %cmp6 = icmp eq i64 %9, 0
  br i1 %cmp6, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.then
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %10)
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 2
  store i64 0, i64* %digits9, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 3
  store i64 0, i64* %len10, align 8
  br label %if.end.26

if.else:                                          ; preds = %if.then
  %13 = load i64, i64* %prec, align 8
  call void @_mpd_idiv_word(i64* %len, i64* %r, i64 %13, i64 19)
  %14 = load i64, i64* %r, align 8
  %cmp11 = icmp eq i64 %14, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %15 = load i64, i64* %len, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %16 = load i64, i64* %len, align 8
  %add = add i64 %16, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %15, %cond.true ], [ %add, %cond.false ]
  store i64 %cond, i64* %len, align 8
  %17 = load i64, i64* %r, align 8
  %cmp13 = icmp ne i64 %17, 0
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %cond.end
  %18 = load i64, i64* %r, align 8
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %18
  %19 = load i64, i64* %arrayidx, align 8
  %20 = load i64, i64* %len, align 8
  %sub16 = sub i64 %20, 1
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 5
  %22 = load i64*, i64** %data, align 8
  %arrayidx17 = getelementptr i64, i64* %22, i64 %sub16
  %23 = load i64, i64* %arrayidx17, align 8
  %rem = urem i64 %23, %19
  store i64 %rem, i64* %arrayidx17, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.15, %cond.end
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 5
  %25 = load i64*, i64** %data18, align 8
  %26 = load i64, i64* %len, align 8
  %call = call i64 @_mpd_real_size(i64* %25, i64 %26)
  store i64 %call, i64* %len, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load i64, i64* %len, align 8
  %call19 = call i32 @mpd_qresize(%struct.mpd_t* %27, i64 %28, i32* %dummy)
  %29 = load i64, i64* %len, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 3
  store i64 %29, i64* %len20, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %31)
  %32 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call21 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %32)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.end
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %33, i32 0, i32 2
  store i64 0, i64* %digits23, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %34, i32 0, i32 3
  store i64 0, i64* %len24, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %if.end
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.8
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcheck_nans(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %choice = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags1, align 1
  %conv2 = zext i8 %3 to i32
  %or = or i32 %conv, %conv2
  %and = and i32 %or, 12
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %4, %struct.mpd_t** %choice, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_issnan(%struct.mpd_t* %5)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %6, %struct.mpd_t** %choice, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %8 = load i32, i32* %7, align 4
  %or5 = or i32 %8, 256
  store i32 %or5, i32* %7, align 4
  br label %if.end.15

if.else:                                          ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call6 = call i32 @mpd_issnan(%struct.mpd_t* %9)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.else.10

if.then.8:                                        ; preds = %if.else
  %10 = load i32*, i32** %status.addr, align 8
  %11 = load i32, i32* %10, align 4
  %or9 = or i32 %11, 256
  store i32 %or9, i32* %10, align 4
  br label %if.end.14

if.else.10:                                       ; preds = %if.else
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call11 = call i32 @mpd_isqnan(%struct.mpd_t* %12)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.else.10
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %13, %struct.mpd_t** %choice, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.13, %if.else.10
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then.8
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.4
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %choice, align 8
  %16 = load i32*, i32** %status.addr, align 8
  %call16 = call i32 @mpd_qcopy(%struct.mpd_t* %14, %struct.mpd_t* %15, i32* %16)
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_qnan(%struct.mpd_t* %17)
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_fix_nan(%struct.mpd_t* %18, %struct.mpd_context_t* %19)
  store i32 1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.end.15
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_check_exp(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %adjexp = alloca i64, align 8
  %etiny = alloca i64, align 8
  %shift = alloca i64, align 8
  %rnd = alloca i32, align 4
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i64 @mpd_adjexp(%struct.mpd_t* %0)
  store i64 %call, i64* %adjexp, align 8
  %1 = load i64, i64* %adjexp, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 1
  %3 = load i64, i64* %emax, align 8
  %cmp = icmp sgt i64 %1, %3
  br i1 %cmp, label %if.then, label %if.else.37

if.then:                                          ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %4)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.then
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax3 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %5, i32 0, i32 1
  %6 = load i64, i64* %emax3, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  store i64 %6, i64* %exp, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %8, i32 0, i32 7
  %9 = load i32, i32* %clamp, align 4
  %tobool4 = icmp ne i32 %9, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.2
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %10, i32 0, i32 0
  %11 = load i64, i64* %prec, align 8
  %sub = sub i64 %11, 1
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp6, align 8
  %sub7 = sub i64 %13, %sub
  store i64 %sub7, i64* %exp6, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then.2
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %14)
  %15 = load i32*, i32** %status.addr, align 8
  %16 = load i32, i32* %15, align 4
  %or = or i32 %16, 1
  store i32 %or, i32* %15, align 4
  br label %if.end.98

if.end.8:                                         ; preds = %if.then
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 6
  %18 = load i32, i32* %round, align 4
  switch i32 %18, label %sw.default [
    i32 4, label %sw.bb
    i32 6, label %sw.bb
    i32 5, label %sw.bb
    i32 0, label %sw.bb
    i32 8, label %sw.bb
    i32 1, label %sw.bb.10
    i32 7, label %sw.bb.10
    i32 2, label %sw.bb.15
    i32 3, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %if.end.8, %if.end.8, %if.end.8, %if.end.8, %if.end.8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call9 = call zeroext i8 @mpd_sign(%struct.mpd_t* %20)
  call void @mpd_setspecial(%struct.mpd_t* %19, i8 zeroext %call9, i8 zeroext 2)
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end.8, %if.end.8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmaxcoeff(%struct.mpd_t* %21, %struct.mpd_context_t* %22, i32* %23)
  %24 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax11 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %24, i32 0, i32 1
  %25 = load i64, i64* %emax11, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec12 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %26, i32 0, i32 0
  %27 = load i64, i64* %prec12, align 8
  %sub13 = sub i64 %25, %27
  %add = add i64 %sub13, 1
  %28 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 1
  store i64 %add, i64* %exp14, align 8
  br label %sw.epilog

sw.bb.15:                                         ; preds = %if.end.8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call16 = call i32 @mpd_isnegative(%struct.mpd_t* %29)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %sw.bb.15
  %30 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %31 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %32 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmaxcoeff(%struct.mpd_t* %30, %struct.mpd_context_t* %31, i32* %32)
  %33 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax19 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %33, i32 0, i32 1
  %34 = load i64, i64* %emax19, align 8
  %35 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec20 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %35, i32 0, i32 0
  %36 = load i64, i64* %prec20, align 8
  %sub21 = sub i64 %34, %36
  %add22 = add i64 %sub21, 1
  %37 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 1
  store i64 %add22, i64* %exp23, align 8
  br label %if.end.24

if.else:                                          ; preds = %sw.bb.15
  %38 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %38, i8 zeroext 0, i8 zeroext 2)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.18
  br label %sw.epilog

sw.bb.25:                                         ; preds = %if.end.8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call26 = call i32 @mpd_ispositive(%struct.mpd_t* %39)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.else.34

if.then.28:                                       ; preds = %sw.bb.25
  %40 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %41 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %42 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmaxcoeff(%struct.mpd_t* %40, %struct.mpd_context_t* %41, i32* %42)
  %43 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax29 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %43, i32 0, i32 1
  %44 = load i64, i64* %emax29, align 8
  %45 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec30 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %45, i32 0, i32 0
  %46 = load i64, i64* %prec30, align 8
  %sub31 = sub i64 %44, %46
  %add32 = add i64 %sub31, 1
  %47 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %47, i32 0, i32 1
  store i64 %add32, i64* %exp33, align 8
  br label %if.end.35

if.else.34:                                       ; preds = %sw.bb.25
  %48 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %48, i8 zeroext 1, i8 zeroext 2)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.28
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.8
  call void @abort() #8
  unreachable

sw.epilog:                                        ; preds = %if.end.35, %if.end.24, %sw.bb.10, %sw.bb
  %49 = load i32*, i32** %status.addr, align 8
  %50 = load i32, i32* %49, align 4
  %or36 = or i32 %50, 6208
  store i32 %or36, i32* %49, align 4
  br label %if.end.98

if.else.37:                                       ; preds = %entry
  %51 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp38 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %51, i32 0, i32 7
  %52 = load i32, i32* %clamp38, align 4
  %tobool39 = icmp ne i32 %52, 0
  br i1 %tobool39, label %land.lhs.true, label %if.else.61

land.lhs.true:                                    ; preds = %if.else.37
  %53 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp40 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %53, i32 0, i32 1
  %54 = load i64, i64* %exp40, align 8
  %55 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call41 = call i64 @mpd_etop(%struct.mpd_context_t* %55)
  %cmp42 = icmp sgt i64 %54, %call41
  br i1 %cmp42, label %if.then.43, label %if.else.61

if.then.43:                                       ; preds = %land.lhs.true
  %56 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 1
  %57 = load i64, i64* %exp44, align 8
  %58 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call45 = call i64 @mpd_etop(%struct.mpd_context_t* %58)
  %sub46 = sub i64 %57, %call45
  store i64 %sub46, i64* %shift, align 8
  %59 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %60 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %61 = load i64, i64* %shift, align 8
  %62 = load i32*, i32** %status.addr, align 8
  %call47 = call i32 @mpd_qshiftl(%struct.mpd_t* %59, %struct.mpd_t* %60, i64 %61, i32* %62)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.end.50, label %if.then.49

if.then.49:                                       ; preds = %if.then.43
  br label %if.end.98

if.end.50:                                        ; preds = %if.then.43
  %63 = load i64, i64* %shift, align 8
  %64 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp51 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %64, i32 0, i32 1
  %65 = load i64, i64* %exp51, align 8
  %sub52 = sub i64 %65, %63
  store i64 %sub52, i64* %exp51, align 8
  %66 = load i32*, i32** %status.addr, align 8
  %67 = load i32, i32* %66, align 4
  %or53 = or i32 %67, 1
  store i32 %or53, i32* %66, align 4
  %68 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call54 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %68)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.60, label %land.lhs.true.56

land.lhs.true.56:                                 ; preds = %if.end.50
  %69 = load i64, i64* %adjexp, align 8
  %70 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %70, i32 0, i32 2
  %71 = load i64, i64* %emin, align 8
  %cmp57 = icmp slt i64 %69, %71
  br i1 %cmp57, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %land.lhs.true.56
  %72 = load i32*, i32** %status.addr, align 8
  %73 = load i32, i32* %72, align 4
  %or59 = or i32 %73, 8192
  store i32 %or59, i32* %72, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %land.lhs.true.56, %if.end.50
  br label %if.end.97

if.else.61:                                       ; preds = %land.lhs.true, %if.else.37
  %74 = load i64, i64* %adjexp, align 8
  %75 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin62 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %75, i32 0, i32 2
  %76 = load i64, i64* %emin62, align 8
  %cmp63 = icmp slt i64 %74, %76
  br i1 %cmp63, label %if.then.64, label %if.end.96

if.then.64:                                       ; preds = %if.else.61
  %77 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call65 = call i64 @mpd_etiny(%struct.mpd_context_t* %77)
  store i64 %call65, i64* %etiny, align 8
  %78 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call66 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %78)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.then.68, label %if.end.75

if.then.68:                                       ; preds = %if.then.64
  %79 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp69 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %79, i32 0, i32 1
  %80 = load i64, i64* %exp69, align 8
  %81 = load i64, i64* %etiny, align 8
  %cmp70 = icmp slt i64 %80, %81
  br i1 %cmp70, label %if.then.71, label %if.end.74

if.then.71:                                       ; preds = %if.then.68
  %82 = load i64, i64* %etiny, align 8
  %83 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp72 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %83, i32 0, i32 1
  store i64 %82, i64* %exp72, align 8
  %84 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %84)
  %85 = load i32*, i32** %status.addr, align 8
  %86 = load i32, i32* %85, align 4
  %or73 = or i32 %86, 1
  store i32 %or73, i32* %85, align 4
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %if.then.68
  br label %if.end.98

if.end.75:                                        ; preds = %if.then.64
  %87 = load i32*, i32** %status.addr, align 8
  %88 = load i32, i32* %87, align 4
  %or76 = or i32 %88, 8192
  store i32 %or76, i32* %87, align 4
  %89 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp77 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %89, i32 0, i32 1
  %90 = load i64, i64* %exp77, align 8
  %91 = load i64, i64* %etiny, align 8
  %cmp78 = icmp slt i64 %90, %91
  br i1 %cmp78, label %if.then.79, label %if.end.95

if.then.79:                                       ; preds = %if.end.75
  %92 = load i64, i64* %etiny, align 8
  %93 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp80 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %93, i32 0, i32 1
  %94 = load i64, i64* %exp80, align 8
  %sub81 = sub i64 %92, %94
  store i64 %sub81, i64* %shift, align 8
  %95 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %96 = load i64, i64* %shift, align 8
  %call82 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %95, i64 %96)
  %conv = trunc i64 %call82 to i32
  store i32 %conv, i32* %rnd, align 4
  %97 = load i64, i64* %etiny, align 8
  %98 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp83 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %98, i32 0, i32 1
  store i64 %97, i64* %exp83, align 8
  %99 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %100 = load i32, i32* %rnd, align 4
  %conv84 = sext i32 %100 to i64
  %101 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %102 = load i32*, i32** %status.addr, align 8
  call void @_mpd_apply_round_excess(%struct.mpd_t* %99, i64 %conv84, %struct.mpd_context_t* %101, i32* %102)
  %103 = load i32*, i32** %status.addr, align 8
  %104 = load i32, i32* %103, align 4
  %or85 = or i32 %104, 4096
  store i32 %or85, i32* %103, align 4
  %105 = load i32, i32* %rnd, align 4
  %tobool86 = icmp ne i32 %105, 0
  br i1 %tobool86, label %if.then.87, label %if.end.94

if.then.87:                                       ; preds = %if.then.79
  %106 = load i32*, i32** %status.addr, align 8
  %107 = load i32, i32* %106, align 4
  %or88 = or i32 %107, 16448
  store i32 %or88, i32* %106, align 4
  %108 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call89 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %108)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.then.91, label %if.end.93

if.then.91:                                       ; preds = %if.then.87
  %109 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %109)
  %110 = load i32*, i32** %status.addr, align 8
  %111 = load i32, i32* %110, align 4
  %or92 = or i32 %111, 1
  store i32 %or92, i32* %110, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.91, %if.then.87
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.79
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.end.75
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.else.61
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.60
  br label %if.end.98

if.end.98:                                        ; preds = %if.end, %if.then.49, %if.end.74, %if.end.97, %sw.epilog
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_check_round(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %rnd = alloca i64, align 8
  %shift = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.9

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 2
  %2 = load i64, i64* %digits, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %3, i32 0, i32 0
  %4 = load i64, i64* %prec, align 8
  %cmp = icmp sgt i64 %2, %4
  br i1 %cmp, label %if.then.1, label %if.end.9

if.then.1:                                        ; preds = %if.end
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 2
  %6 = load i64, i64* %digits2, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec3 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %7, i32 0, i32 0
  %8 = load i64, i64* %prec3, align 8
  %sub = sub i64 %6, %8
  store i64 %sub, i64* %shift, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %10 = load i64, i64* %shift, align 8
  %call4 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %9, i64 %10)
  store i64 %call4, i64* %rnd, align 8
  %11 = load i64, i64* %shift, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp, align 8
  %add = add i64 %13, %11
  store i64 %add, i64* %exp, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %15 = load i64, i64* %rnd, align 8
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @_mpd_apply_round(%struct.mpd_t* %14, i64 %15, %struct.mpd_context_t* %16, i32* %17)
  %18 = load i32*, i32** %status.addr, align 8
  %19 = load i32, i32* %18, align 4
  %or = or i32 %19, 4096
  store i32 %or, i32* %18, align 4
  %20 = load i64, i64* %rnd, align 8
  %tobool5 = icmp ne i64 %20, 0
  br i1 %tobool5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.then.1
  %21 = load i32*, i32** %status.addr, align 8
  %22 = load i32, i32* %21, align 4
  %or7 = or i32 %22, 64
  store i32 %or7, i32* %21, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.then.1
  br label %if.end.9

if.end.9:                                         ; preds = %if.then, %if.end.8, %if.end
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define hidden %struct.mpd_t* @mpd_qncopy(%struct.mpd_t* %a) #0 {
entry:
  %retval = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %result = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 3
  %1 = load i64, i64* %len, align 8
  %call = call %struct.mpd_t* @mpd_qnew_size(i64 %1)
  store %struct.mpd_t* %call, %struct.mpd_t** %result, align 8
  %cmp = icmp eq %struct.mpd_t* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mpd_t* null, %struct.mpd_t** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 5
  %3 = load i64*, i64** %data, align 8
  %4 = bitcast i64* %3 to i8*
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 5
  %6 = load i64*, i64** %data1, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 3
  %9 = load i64, i64* %len2, align 8
  %mul = mul i64 %9, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %7, i64 %mul, i32 8, i1 false)
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %10, %struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  %exp3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 1
  store i64 %13, i64* %exp3, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 2
  %16 = load i64, i64* %digits, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  %digits4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 2
  store i64 %16, i64* %digits4, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 3
  %19 = load i64, i64* %len5, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 3
  store i64 %19, i64* %len6, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result, align 8
  store %struct.mpd_t* %21, %struct.mpd_t** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load %struct.mpd_t*, %struct.mpd_t** %retval
  ret %struct.mpd_t* %22
}

declare hidden %struct.mpd_t* @mpd_qnew_size(i64) #3

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcopy_abs(%struct.mpd_t* %result, %struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %0, %struct.mpd_t* %1, i32* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_positive(%struct.mpd_t* %3)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcopy_negate(%struct.mpd_t* %result, %struct.mpd_t* %a, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %0, %struct.mpd_t* %1, i32* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_mpd_negate(%struct.mpd_t* %3)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_negate(%struct.mpd_t* %dec) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %xor = xor i32 %conv, 1
  %conv1 = trunc i32 %xor to i8
  store i8 %conv1, i8* %flags, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcopy_sign(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %sign_b = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  store i8 %call, i8* %sign_b, align 1
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcopy(%struct.mpd_t* %1, %struct.mpd_t* %2, i32* %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load i8, i8* %sign_b, align 1
  call void @mpd_set_sign(%struct.mpd_t* %4, i8 zeroext %5)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcmp(%struct.mpd_t* %a, %struct.mpd_t* %b, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.9

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call3 = call i32 @mpd_isnan(%struct.mpd_t* %2)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.8, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %if.then
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call6 = call i32 @mpd_isnan(%struct.mpd_t* %3)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %lor.lhs.false.5, %if.then
  %4 = load i32*, i32** %status.addr, align 8
  %5 = load i32, i32* %4, align 4
  %or = or i32 %5, 256
  store i32 %or, i32* %4, align 4
  store i32 2147483647, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %lor.lhs.false
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call10 = call i32 @_mpd_cmp(%struct.mpd_t* %6, %struct.mpd_t* %7)
  store i32 %call10, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.8
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_cmp(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %adjexp_a = alloca i64, align 8
  %adjexp_b = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.1, label %if.end.9

if.then.1:                                        ; preds = %if.end
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call2 = call i32 @mpd_isinfinite(%struct.mpd_t* %3)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.then.1
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call i32 @mpd_isnegative(%struct.mpd_t* %4)
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call6 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %sub = sub i32 %call5, %call6
  store i32 %sub, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.1
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call8 = call i32 @mpd_arith_sign(%struct.mpd_t* %6)
  store i32 %call8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call10 = call i32 @mpd_isinfinite(%struct.mpd_t* %7)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end.9
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call13 = call i32 @mpd_arith_sign(%struct.mpd_t* %8)
  %sub14 = sub i32 0, %call13
  store i32 %sub14, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.9
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call16 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %9)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %if.end.15
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call19 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %10)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.18
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.18
  %11 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call23 = call i32 @mpd_arith_sign(%struct.mpd_t* %11)
  %sub24 = sub i32 0, %call23
  store i32 %sub24, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.15
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call26 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %12)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.end.25
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call29 = call i32 @mpd_arith_sign(%struct.mpd_t* %13)
  store i32 %call29, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.25
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call31 = call zeroext i8 @mpd_sign(%struct.mpd_t* %14)
  %conv = zext i8 %call31 to i32
  %15 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call32 = call zeroext i8 @mpd_sign(%struct.mpd_t* %15)
  %conv33 = zext i8 %call32 to i32
  %cmp34 = icmp ne i32 %conv, %conv33
  br i1 %cmp34, label %if.then.36, label %if.end.42

if.then.36:                                       ; preds = %if.end.30
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call37 = call zeroext i8 @mpd_sign(%struct.mpd_t* %16)
  %conv38 = zext i8 %call37 to i32
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call39 = call zeroext i8 @mpd_sign(%struct.mpd_t* %17)
  %conv40 = zext i8 %call39 to i32
  %sub41 = sub i32 %conv38, %conv40
  store i32 %sub41, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.30
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call43 = call i64 @mpd_adjexp(%struct.mpd_t* %18)
  store i64 %call43, i64* %adjexp_a, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call44 = call i64 @mpd_adjexp(%struct.mpd_t* %19)
  store i64 %call44, i64* %adjexp_b, align 8
  %20 = load i64, i64* %adjexp_a, align 8
  %21 = load i64, i64* %adjexp_b, align 8
  %cmp45 = icmp ne i64 %20, %21
  br i1 %cmp45, label %if.then.47, label %if.end.54

if.then.47:                                       ; preds = %if.end.42
  %22 = load i64, i64* %adjexp_a, align 8
  %23 = load i64, i64* %adjexp_b, align 8
  %cmp48 = icmp slt i64 %22, %23
  br i1 %cmp48, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %if.then.47
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call51 = call i32 @mpd_arith_sign(%struct.mpd_t* %24)
  %mul = mul i32 -1, %call51
  store i32 %mul, i32* %retval
  br label %return

if.end.52:                                        ; preds = %if.then.47
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call53 = call i32 @mpd_arith_sign(%struct.mpd_t* %25)
  store i32 %call53, i32* %retval
  br label %return

if.end.54:                                        ; preds = %if.end.42
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call55 = call i32 @_mpd_cmp_same_adjexp(%struct.mpd_t* %26, %struct.mpd_t* %27)
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call56 = call i32 @mpd_arith_sign(%struct.mpd_t* %28)
  %mul57 = mul i32 %call55, %call56
  store i32 %mul57, i32* %retval
  br label %return

return:                                           ; preds = %if.end.54, %if.end.52, %if.then.50, %if.then.36, %if.then.28, %if.end.22, %if.then.21, %if.then.12, %if.end.7, %if.then.4, %if.then
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcompare(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  store i32 2147483647, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @_mpd_cmp(%struct.mpd_t* %7, %struct.mpd_t* %8)
  store i32 %call7, i32* %c, align 4
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load i32, i32* %c, align 4
  %cmp = icmp slt i32 %10, 0
  %conv = zext i1 %cmp to i32
  %conv8 = trunc i32 %conv to i8
  %11 = load i32, i32* %c, align 4
  %cmp9 = icmp ne i32 %11, 0
  %conv10 = zext i1 %cmp9 to i32
  %conv11 = sext i32 %conv10 to i64
  call void @_settriple(%struct.mpd_t* %9, i8 zeroext %conv8, i64 %conv11, i64 0)
  %12 = load i32, i32* %c, align 4
  store i32 %12, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qcompare_signal(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  %7 = load i32*, i32** %status.addr, align 8
  %8 = load i32, i32* %7, align 4
  %or = or i32 %8, 256
  store i32 %or, i32* %7, align 4
  store i32 2147483647, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @_mpd_cmp(%struct.mpd_t* %9, %struct.mpd_t* %10)
  store i32 %call7, i32* %c, align 4
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load i32, i32* %c, align 4
  %cmp = icmp slt i32 %12, 0
  %conv = zext i1 %cmp to i32
  %conv8 = trunc i32 %conv to i8
  %13 = load i32, i32* %c, align 4
  %cmp9 = icmp ne i32 %13, 0
  %conv10 = zext i1 %cmp9 to i32
  %conv11 = sext i32 %conv10 to i64
  call void @_settriple(%struct.mpd_t* %11, i8 zeroext %conv8, i64 %conv11, i64 0)
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_cmp_total(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %aa = alloca %struct.mpd_t, align 8
  %bb = alloca %struct.mpd_t, align 8
  %nan_a = alloca i32, align 4
  %nan_b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  %conv = zext i8 %call to i32
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv2 = zext i8 %call1 to i32
  %cmp = icmp ne i32 %conv, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call zeroext i8 @mpd_sign(%struct.mpd_t* %2)
  %conv5 = zext i8 %call4 to i32
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call6 = call zeroext i8 @mpd_sign(%struct.mpd_t* %3)
  %conv7 = zext i8 %call6 to i32
  %sub = sub i32 %conv5, %conv7
  store i32 %sub, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call8 = call i32 @mpd_isnan(%struct.mpd_t* %4)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then.9, label %if.else.41

if.then.9:                                        ; preds = %if.end
  store i32 1, i32* %c, align 4
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call10 = call i32 @mpd_isnan(%struct.mpd_t* %5)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.40

if.then.12:                                       ; preds = %if.then.9
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call i32 @mpd_isqnan(%struct.mpd_t* %6)
  %tobool14 = icmp ne i32 %call13, 0
  %cond = select i1 %tobool14, i32 1, i32 0
  store i32 %cond, i32* %nan_a, align 4
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call15 = call i32 @mpd_isqnan(%struct.mpd_t* %7)
  %tobool16 = icmp ne i32 %call15, 0
  %cond17 = select i1 %tobool16, i32 1, i32 0
  store i32 %cond17, i32* %nan_b, align 4
  %8 = load i32, i32* %nan_b, align 4
  %9 = load i32, i32* %nan_a, align 4
  %cmp18 = icmp eq i32 %8, %9
  br i1 %cmp18, label %if.then.20, label %if.else.37

if.then.20:                                       ; preds = %if.then.12
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 3
  %11 = load i64, i64* %len, align 8
  %cmp21 = icmp sgt i64 %11, 0
  br i1 %cmp21, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.20
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 3
  %13 = load i64, i64* %len23, align 8
  %cmp24 = icmp sgt i64 %13, 0
  br i1 %cmp24, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %land.lhs.true
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %aa, %struct.mpd_t* %14)
  %15 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %bb, %struct.mpd_t* %15)
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  store i64 0, i64* %exp27, align 8
  %call28 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %aa, %struct.mpd_t* %bb)
  store i32 %call28, i32* %c, align 4
  br label %if.end.36

if.else:                                          ; preds = %land.lhs.true, %if.then.20
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  %17 = load i64, i64* %len29, align 8
  %cmp30 = icmp sgt i64 %17, 0
  %conv31 = zext i1 %cmp30 to i32
  %18 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 3
  %19 = load i64, i64* %len32, align 8
  %cmp33 = icmp sgt i64 %19, 0
  %conv34 = zext i1 %cmp33 to i32
  %sub35 = sub i32 %conv31, %conv34
  store i32 %sub35, i32* %c, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.else, %if.then.26
  br label %if.end.39

if.else.37:                                       ; preds = %if.then.12
  %20 = load i32, i32* %nan_a, align 4
  %21 = load i32, i32* %nan_b, align 4
  %sub38 = sub i32 %20, %21
  store i32 %sub38, i32* %c, align 4
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.end.36
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.9
  br label %if.end.62

if.else.41:                                       ; preds = %if.end
  %22 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call42 = call i32 @mpd_isnan(%struct.mpd_t* %22)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.else.41
  store i32 -1, i32* %c, align 4
  br label %if.end.61

if.else.45:                                       ; preds = %if.else.41
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call46 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %23, %struct.mpd_t* %24)
  store i32 %call46, i32* %c, align 4
  %25 = load i32, i32* %c, align 4
  %cmp47 = icmp eq i32 %25, 0
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.60

land.lhs.true.49:                                 ; preds = %if.else.45
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp50, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp51 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 1
  %29 = load i64, i64* %exp51, align 8
  %cmp52 = icmp ne i64 %27, %29
  br i1 %cmp52, label %if.then.54, label %if.end.60

if.then.54:                                       ; preds = %land.lhs.true.49
  %30 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp55 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 1
  %31 = load i64, i64* %exp55, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 1
  %33 = load i64, i64* %exp56, align 8
  %cmp57 = icmp slt i64 %31, %33
  %cond59 = select i1 %cmp57, i32 -1, i32 1
  store i32 %cond59, i32* %c, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.54, %land.lhs.true.49, %if.else.45
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.44
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.40
  %34 = load i32, i32* %c, align 4
  %35 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call63 = call i32 @mpd_arith_sign(%struct.mpd_t* %35)
  %mul = mul i32 %34, %call63
  store i32 %mul, i32* %retval
  br label %return

return:                                           ; preds = %if.end.62, %if.then
  %36 = load i32, i32* %retval
  ret i32 %36
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_copy_shared(%struct.mpd_t* %dest, %struct.mpd_t* %src) #2 {
entry:
  %dest.addr = alloca %struct.mpd_t*, align 8
  %src.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dest, %struct.mpd_t** %dest.addr, align 8
  store %struct.mpd_t* %src, %struct.mpd_t** %src.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  store i8 %1, i8* %flags1, align 1
  %3 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  store i64 %4, i64* %exp2, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 2
  %7 = load i64, i64* %digits, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 2
  store i64 %7, i64* %digits3, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 3
  store i64 %10, i64* %len4, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 4
  %13 = load i64, i64* %alloc, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 4
  store i64 %13, i64* %alloc5, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 5
  %16 = load i64*, i64** %data, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 5
  store i64* %16, i64** %data6, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %dest.addr, align 8
  call void @mpd_set_shared_data(%struct.mpd_t* %18)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_cmp_abs(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %adjexp_a = alloca i64, align 8
  %adjexp_b = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call2 = call i32 @mpd_isinfinite(%struct.mpd_t* %3)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @mpd_isinfinite(%struct.mpd_t* %4)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call11 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %5)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %if.end.10
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call14 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %6)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.13
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.then.13
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.end.10
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call19 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %7)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.18
  store i32 1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.18
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call23 = call i64 @mpd_adjexp(%struct.mpd_t* %8)
  store i64 %call23, i64* %adjexp_a, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call24 = call i64 @mpd_adjexp(%struct.mpd_t* %9)
  store i64 %call24, i64* %adjexp_b, align 8
  %10 = load i64, i64* %adjexp_a, align 8
  %11 = load i64, i64* %adjexp_b, align 8
  %cmp25 = icmp ne i64 %10, %11
  br i1 %cmp25, label %if.then.26, label %if.end.30

if.then.26:                                       ; preds = %if.end.22
  %12 = load i64, i64* %adjexp_a, align 8
  %13 = load i64, i64* %adjexp_b, align 8
  %cmp27 = icmp slt i64 %12, %13
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.26
  store i32 -1, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.26
  store i32 1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.22
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call31 = call i32 @_mpd_cmp_same_adjexp(%struct.mpd_t* %14, %struct.mpd_t* %15)
  store i32 %call31, i32* %retval
  br label %return

return:                                           ; preds = %if.end.30, %if.end.29, %if.then.28, %if.then.21, %if.end.17, %if.then.16, %if.then.9, %if.end.5, %if.then.4, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_compare_total(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call = call i32 @mpd_cmp_total(%struct.mpd_t* %0, %struct.mpd_t* %1)
  store i32 %call, i32* %c, align 4
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32, i32* %c, align 4
  %cmp = icmp slt i32 %3, 0
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp ne i32 %4, 0
  %conv3 = zext i1 %cmp2 to i32
  %conv4 = sext i32 %conv3 to i64
  call void @_settriple(%struct.mpd_t* %2, i8 zeroext %conv1, i64 %conv4, i64 0)
  %5 = load i32, i32* %c, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_cmp_total_mag(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %aa = alloca %struct.mpd_t, align 8
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %aa, %struct.mpd_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %bb, %struct.mpd_t* %1)
  call void @mpd_set_positive(%struct.mpd_t* %aa)
  call void @mpd_set_positive(%struct.mpd_t* %bb)
  %call = call i32 @mpd_cmp_total(%struct.mpd_t* %aa, %struct.mpd_t* %bb)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_compare_total_mag(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call = call i32 @mpd_cmp_total_mag(%struct.mpd_t* %0, %struct.mpd_t* %1)
  store i32 %call, i32* %c, align 4
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32, i32* %c, align 4
  %cmp = icmp slt i32 %3, 0
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp ne i32 %4, 0
  %conv3 = zext i1 %cmp2 to i32
  %conv4 = sext i32 %conv3 to i64
  call void @_settriple(%struct.mpd_t* %2, i8 zeroext %conv1, i64 %conv4, i64 0)
  %5 = load i32, i32* %c, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_qshiftl(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %n, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  %size = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  store i32 %call1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 2
  %6 = load i64, i64* %digits, align 8
  %7 = load i64, i64* %n.addr, align 8
  %add = add i64 %6, %7
  %call2 = call i64 @mpd_digits_to_size(i64 %add)
  store i64 %call2, i64* %size, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i64, i64* %size, align 8
  %10 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qresize(%struct.mpd_t* %8, i64 %9, i32* %10)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 5
  %12 = load i64*, i64** %data, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 5
  %14 = load i64*, i64** %data7, align 8
  %15 = load i64, i64* %size, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  %17 = load i64, i64* %len, align 8
  %18 = load i64, i64* %n.addr, align 8
  call void @_mpd_baseshiftl(i64* %12, i64* %14, i64 %15, i64 %17, i64 %18)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %19, %struct.mpd_t* %20)
  %21 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 1
  %22 = load i64, i64* %exp, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 1
  store i64 %22, i64* %exp8, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 2
  %25 = load i64, i64* %digits9, align 8
  %26 = load i64, i64* %n.addr, align 8
  %add10 = add i64 %25, %26
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %27, i32 0, i32 2
  store i64 %add10, i64* %digits11, align 8
  %28 = load i64, i64* %size, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 3
  store i64 %28, i64* %len12, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %30 = load i32, i32* %retval
  ret i32 %30
}

declare hidden void @_mpd_baseshiftl(i64*, i64*, i64, i64, i64) #3

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qshiftr_inplace(%struct.mpd_t* %result, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %result.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i64, align 8
  %dummy = alloca i32, align 4
  %rnd = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i64, i64* %n.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 2
  %4 = load i64, i64* %digits, align 8
  %cmp1 = icmp sge i64 %2, %4
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 5
  %6 = load i64*, i64** %data, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 3
  %8 = load i64, i64* %len, align 8
  %9 = load i64, i64* %n.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 2
  %11 = load i64, i64* %digits3, align 8
  %cmp4 = icmp eq i64 %9, %11
  %conv = zext i1 %cmp4 to i32
  %call5 = call i64 @_mpd_get_rnd(i64* %6, i64 %8, i32 %conv)
  store i64 %call5, i64* %rnd, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %12)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 5
  %14 = load i64*, i64** %data6, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 5
  %16 = load i64*, i64** %data7, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 3
  %18 = load i64, i64* %len8, align 8
  %19 = load i64, i64* %n.addr, align 8
  %call9 = call i64 @_mpd_baseshiftr(i64* %14, i64* %16, i64 %18, i64 %19)
  store i64 %call9, i64* %rnd, align 8
  %20 = load i64, i64* %n.addr, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 2
  %22 = load i64, i64* %digits10, align 8
  %sub = sub i64 %22, %20
  store i64 %sub, i64* %digits10, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 2
  %24 = load i64, i64* %digits11, align 8
  %call12 = call i64 @mpd_digits_to_size(i64 %24)
  store i64 %call12, i64* %size, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load i64, i64* %size, align 8
  %call13 = call i32 @mpd_qresize(%struct.mpd_t* %25, i64 %26, i32* %dummy)
  %27 = load i64, i64* %size, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 3
  store i64 %27, i64* %len14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.2
  %29 = load i64, i64* %rnd, align 8
  store i64 %29, i64* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then
  %30 = load i64, i64* %retval
  ret i64 %30
}

; Function Attrs: nounwind uwtable
define internal i64 @_mpd_get_rnd(i64* %data, i64 %len, i32 %use_msd) #0 {
entry:
  %data.addr = alloca i64*, align 8
  %len.addr = alloca i64, align 8
  %use_msd.addr = alloca i32, align 4
  %rnd = alloca i64, align 8
  %rest = alloca i64, align 8
  %word = alloca i64, align 8
  store i64* %data, i64** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %use_msd, i32* %use_msd.addr, align 4
  store i64 0, i64* %rnd, align 8
  store i64 0, i64* %rest, align 8
  %0 = load i64, i64* %len.addr, align 8
  %sub = sub i64 %0, 1
  %1 = load i64*, i64** %data.addr, align 8
  %arrayidx = getelementptr i64, i64* %1, i64 %sub
  %2 = load i64, i64* %arrayidx, align 8
  store i64 %2, i64* %word, align 8
  %3 = load i32, i32* %use_msd.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %word, align 8
  %5 = load i64, i64* %word, align 8
  %call = call i32 @mpd_word_digits(i64 %5)
  %sub1 = sub i32 %call, 1
  %conv = sext i32 %sub1 to i64
  call void @_mpd_divmod_pow10(i64* %rnd, i64* %rest, i64 %4, i64 %conv)
  %6 = load i64, i64* %len.addr, align 8
  %cmp = icmp sgt i64 %6, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %7 = load i64, i64* %rest, align 8
  %cmp3 = icmp eq i64 %7, 0
  br i1 %cmp3, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %land.lhs.true
  %8 = load i64*, i64** %data.addr, align 8
  %9 = load i64, i64* %len.addr, align 8
  %sub6 = sub i64 %9, 1
  %call7 = call i32 @_mpd_isallzero(i64* %8, i64 %sub6)
  %tobool8 = icmp ne i32 %call7, 0
  %lnot = xor i1 %tobool8, true
  %lnot.ext = zext i1 %lnot to i32
  %conv9 = sext i32 %lnot.ext to i64
  store i64 %conv9, i64* %rest, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %land.lhs.true, %if.then
  br label %if.end.15

if.else:                                          ; preds = %entry
  %10 = load i64*, i64** %data.addr, align 8
  %11 = load i64, i64* %len.addr, align 8
  %call10 = call i32 @_mpd_isallzero(i64* %10, i64 %11)
  %tobool11 = icmp ne i32 %call10, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv14 = sext i32 %lnot.ext13 to i64
  store i64 %conv14, i64* %rest, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.end
  %12 = load i64, i64* %rnd, align 8
  %cmp16 = icmp eq i64 %12, 0
  br i1 %cmp16, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.15
  %13 = load i64, i64* %rnd, align 8
  %cmp18 = icmp eq i64 %13, 5
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end.15
  %14 = load i64, i64* %rnd, align 8
  %15 = load i64, i64* %rest, align 8
  %tobool20 = icmp ne i64 %15, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %add = add i64 %14, %conv25
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %16 = load i64, i64* %rnd, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %16, %cond.false ]
  ret i64 %cond
}

declare hidden i64 @_mpd_baseshiftr(i64*, i64*, i64, i64) #3

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qshiftr(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %n, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  %rnd = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  store i64 0, i64* %retval
  br label %return

if.end.4:                                         ; preds = %lor.lhs.false
  %5 = load i64, i64* %n.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 2
  %7 = load i64, i64* %digits, align 8
  %cmp5 = icmp sge i64 %5, %7
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 5
  %9 = load i64*, i64** %data, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 3
  %11 = load i64, i64* %len, align 8
  %12 = load i64, i64* %n.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 2
  %14 = load i64, i64* %digits7, align 8
  %cmp8 = icmp eq i64 %12, %14
  %conv = zext i1 %cmp8 to i32
  %call9 = call i64 @_mpd_get_rnd(i64* %9, i64 %11, i32 %conv)
  store i64 %call9, i64* %rnd, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %15)
  br label %if.end.33

if.else:                                          ; preds = %if.end.4
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 2
  %17 = load i64, i64* %digits10, align 8
  %18 = load i64, i64* %n.addr, align 8
  %sub = sub i64 %17, %18
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 2
  store i64 %sub, i64* %digits11, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 2
  %21 = load i64, i64* %digits12, align 8
  %call13 = call i64 @mpd_digits_to_size(i64 %21)
  store i64 %call13, i64* %size, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp14 = icmp eq %struct.mpd_t* %22, %23
  br i1 %cmp14, label %if.then.16, label %if.else.22

if.then.16:                                       ; preds = %if.else
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 5
  %25 = load i64*, i64** %data17, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 5
  %27 = load i64*, i64** %data18, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 3
  %29 = load i64, i64* %len19, align 8
  %30 = load i64, i64* %n.addr, align 8
  %call20 = call i64 @_mpd_baseshiftr(i64* %25, i64* %27, i64 %29, i64 %30)
  store i64 %call20, i64* %rnd, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %32 = load i64, i64* %size, align 8
  %33 = load i32*, i32** %status.addr, align 8
  %call21 = call i32 @mpd_qresize(%struct.mpd_t* %31, i64 %32, i32* %33)
  br label %if.end.31

if.else.22:                                       ; preds = %if.else
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %35 = load i64, i64* %size, align 8
  %36 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qresize(%struct.mpd_t* %34, i64 %35, i32* %36)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.else.22
  store i64 -1, i64* %retval
  br label %return

if.end.26:                                        ; preds = %if.else.22
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 5
  %38 = load i64*, i64** %data27, align 8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %39, i32 0, i32 5
  %40 = load i64*, i64** %data28, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 3
  %42 = load i64, i64* %len29, align 8
  %43 = load i64, i64* %n.addr, align 8
  %call30 = call i64 @_mpd_baseshiftr(i64* %38, i64* %40, i64 %42, i64 %43)
  store i64 %call30, i64* %rnd, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.26, %if.then.16
  %44 = load i64, i64* %size, align 8
  %45 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %45, i32 0, i32 3
  store i64 %44, i64* %len32, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.31, %if.then.6
  %46 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %47 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %46, %struct.mpd_t* %47)
  %48 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 1
  %49 = load i64, i64* %exp, align 8
  %50 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %50, i32 0, i32 1
  store i64 %49, i64* %exp34, align 8
  %51 = load i64, i64* %rnd, align 8
  store i64 %51, i64* %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then.25, %if.end, %if.then.3
  %52 = load i64, i64* %retval
  ret i64 %52
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qand(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %big = alloca %struct.mpd_t*, align 8
  %small = alloca %struct.mpd_t*, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %z = alloca i64, align 8
  %xbit = alloca i64, align 8
  %ybit = alloca i64, align 8
  %k = alloca i32, align 4
  %mswdigits = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %big, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %small, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %4)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 1
  %7 = load i64, i64* %exp, align 8
  %cmp = icmp ne i64 %7, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.9
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp11, align 8
  %cmp12 = icmp ne i64 %9, 0
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false.3, %lor.lhs.false, %entry
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end:                                           ; preds = %lor.lhs.false.10
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  %13 = load i64, i64* %digits, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 2
  %15 = load i64, i64* %digits13, align 8
  %cmp14 = icmp sgt i64 %13, %15
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %16, %struct.mpd_t** %big, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %17, %struct.mpd_t** %small, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 3
  %20 = load i64, i64* %len, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call17 = call i32 @mpd_qresize(%struct.mpd_t* %18, i64 %20, i32* %21)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %return

if.end.20:                                        ; preds = %if.end.16
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %if.end.20
  %22 = load i64, i64* %i, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 3
  %24 = load i64, i64* %len21, align 8
  %sub = sub i64 %24, 1
  %cmp22 = icmp slt i64 %22, %sub
  br i1 %cmp22, label %for.body, label %for.end.41

for.body:                                         ; preds = %for.cond
  %25 = load i64, i64* %i, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 5
  %27 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %27, i64 %25
  %28 = load i64, i64* %arrayidx, align 8
  store i64 %28, i64* %x, align 8
  %29 = load i64, i64* %i, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 5
  %31 = load i64*, i64** %data23, align 8
  %arrayidx24 = getelementptr i64, i64* %31, i64 %29
  %32 = load i64, i64* %arrayidx24, align 8
  store i64 %32, i64* %y, align 8
  store i64 0, i64* %z, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc, %for.body
  %33 = load i32, i32* %k, align 4
  %cmp26 = icmp slt i32 %33, 19
  br i1 %cmp26, label %for.body.27, label %for.end

for.body.27:                                      ; preds = %for.cond.25
  %34 = load i64, i64* %x, align 8
  %rem = urem i64 %34, 10
  store i64 %rem, i64* %xbit, align 8
  %35 = load i64, i64* %x, align 8
  %div = udiv i64 %35, 10
  store i64 %div, i64* %x, align 8
  %36 = load i64, i64* %y, align 8
  %rem28 = urem i64 %36, 10
  store i64 %rem28, i64* %ybit, align 8
  %37 = load i64, i64* %y, align 8
  %div29 = udiv i64 %37, 10
  store i64 %div29, i64* %y, align 8
  %38 = load i64, i64* %xbit, align 8
  %cmp30 = icmp ugt i64 %38, 1
  br i1 %cmp30, label %if.then.33, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %for.body.27
  %39 = load i64, i64* %ybit, align 8
  %cmp32 = icmp ugt i64 %39, 1
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.31, %for.body.27
  br label %invalid_operation

if.end.34:                                        ; preds = %lor.lhs.false.31
  %40 = load i64, i64* %xbit, align 8
  %41 = load i64, i64* %ybit, align 8
  %and = and i64 %40, %41
  %tobool35 = icmp ne i64 %and, 0
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.34
  %42 = load i32, i32* %k, align 4
  %idxprom = sext i32 %42 to i64
  %arrayidx36 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %43 = load i64, i64* %arrayidx36, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ 0, %cond.false ]
  %44 = load i64, i64* %z, align 8
  %add = add i64 %44, %cond
  store i64 %add, i64* %z, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %45 = load i32, i32* %k, align 4
  %inc = add i32 %45, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.25

for.end:                                          ; preds = %for.cond.25
  %46 = load i64, i64* %z, align 8
  %47 = load i64, i64* %i, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 5
  %49 = load i64*, i64** %data37, align 8
  %arrayidx38 = getelementptr i64, i64* %49, i64 %47
  store i64 %46, i64* %arrayidx38, align 8
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.end
  %50 = load i64, i64* %i, align 8
  %inc40 = add i64 %50, 1
  store i64 %inc40, i64* %i, align 8
  br label %for.cond

for.end.41:                                       ; preds = %for.cond
  %51 = load i64, i64* %i, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %52, i32 0, i32 5
  %53 = load i64*, i64** %data42, align 8
  %arrayidx43 = getelementptr i64, i64* %53, i64 %51
  %54 = load i64, i64* %arrayidx43, align 8
  store i64 %54, i64* %x, align 8
  %55 = load i64, i64* %i, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 5
  %57 = load i64*, i64** %data44, align 8
  %arrayidx45 = getelementptr i64, i64* %57, i64 %55
  %58 = load i64, i64* %arrayidx45, align 8
  store i64 %58, i64* %y, align 8
  store i64 0, i64* %z, align 8
  %59 = load i64, i64* %x, align 8
  %call46 = call i32 @mpd_word_digits(i64 %59)
  store i32 %call46, i32* %mswdigits, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.68, %for.end.41
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %mswdigits, align 4
  %cmp48 = icmp slt i32 %60, %61
  br i1 %cmp48, label %for.body.49, label %for.end.70

for.body.49:                                      ; preds = %for.cond.47
  %62 = load i64, i64* %x, align 8
  %rem50 = urem i64 %62, 10
  store i64 %rem50, i64* %xbit, align 8
  %63 = load i64, i64* %x, align 8
  %div51 = udiv i64 %63, 10
  store i64 %div51, i64* %x, align 8
  %64 = load i64, i64* %y, align 8
  %rem52 = urem i64 %64, 10
  store i64 %rem52, i64* %ybit, align 8
  %65 = load i64, i64* %y, align 8
  %div53 = udiv i64 %65, 10
  store i64 %div53, i64* %y, align 8
  %66 = load i64, i64* %xbit, align 8
  %cmp54 = icmp ugt i64 %66, 1
  br i1 %cmp54, label %if.then.57, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %for.body.49
  %67 = load i64, i64* %ybit, align 8
  %cmp56 = icmp ugt i64 %67, 1
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %lor.lhs.false.55, %for.body.49
  br label %invalid_operation

if.end.58:                                        ; preds = %lor.lhs.false.55
  %68 = load i64, i64* %xbit, align 8
  %69 = load i64, i64* %ybit, align 8
  %and59 = and i64 %68, %69
  %tobool60 = icmp ne i64 %and59, 0
  br i1 %tobool60, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %if.end.58
  %70 = load i32, i32* %k, align 4
  %idxprom62 = sext i32 %70 to i64
  %arrayidx63 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom62
  %71 = load i64, i64* %arrayidx63, align 8
  br label %cond.end.65

cond.false.64:                                    ; preds = %if.end.58
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.61
  %cond66 = phi i64 [ %71, %cond.true.61 ], [ 0, %cond.false.64 ]
  %72 = load i64, i64* %z, align 8
  %add67 = add i64 %72, %cond66
  store i64 %add67, i64* %z, align 8
  br label %for.inc.68

for.inc.68:                                       ; preds = %cond.end.65
  %73 = load i32, i32* %k, align 4
  %inc69 = add i32 %73, 1
  store i32 %inc69, i32* %k, align 4
  br label %for.cond.47

for.end.70:                                       ; preds = %for.cond.47
  %74 = load i64, i64* %z, align 8
  %75 = load i64, i64* %i, align 8
  %inc71 = add i64 %75, 1
  store i64 %inc71, i64* %i, align 8
  %76 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data72 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %76, i32 0, i32 5
  %77 = load i64*, i64** %data72, align 8
  %arrayidx73 = getelementptr i64, i64* %77, i64 %75
  store i64 %74, i64* %arrayidx73, align 8
  br label %for.cond.74

for.cond.74:                                      ; preds = %for.inc.82, %for.end.70
  %78 = load i32, i32* %k, align 4
  %cmp75 = icmp slt i32 %78, 19
  br i1 %cmp75, label %for.body.76, label %for.end.84

for.body.76:                                      ; preds = %for.cond.74
  %79 = load i64, i64* %y, align 8
  %rem77 = urem i64 %79, 10
  store i64 %rem77, i64* %ybit, align 8
  %80 = load i64, i64* %y, align 8
  %div78 = udiv i64 %80, 10
  store i64 %div78, i64* %y, align 8
  %81 = load i64, i64* %ybit, align 8
  %cmp79 = icmp ugt i64 %81, 1
  br i1 %cmp79, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %for.body.76
  br label %invalid_operation

if.end.81:                                        ; preds = %for.body.76
  br label %for.inc.82

for.inc.82:                                       ; preds = %if.end.81
  %82 = load i32, i32* %k, align 4
  %inc83 = add i32 %82, 1
  store i32 %inc83, i32* %k, align 4
  br label %for.cond.74

for.end.84:                                       ; preds = %for.cond.74
  br label %for.cond.85

for.cond.85:                                      ; preds = %for.inc.102, %for.end.84
  %83 = load i64, i64* %i, align 8
  %84 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %84, i32 0, i32 3
  %85 = load i64, i64* %len86, align 8
  %cmp87 = icmp slt i64 %83, %85
  br i1 %cmp87, label %for.body.88, label %for.end.104

for.body.88:                                      ; preds = %for.cond.85
  %86 = load i64, i64* %i, align 8
  %87 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data89 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %87, i32 0, i32 5
  %88 = load i64*, i64** %data89, align 8
  %arrayidx90 = getelementptr i64, i64* %88, i64 %86
  %89 = load i64, i64* %arrayidx90, align 8
  store i64 %89, i64* %y, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.91

for.cond.91:                                      ; preds = %for.inc.99, %for.body.88
  %90 = load i32, i32* %k, align 4
  %cmp92 = icmp slt i32 %90, 19
  br i1 %cmp92, label %for.body.93, label %for.end.101

for.body.93:                                      ; preds = %for.cond.91
  %91 = load i64, i64* %y, align 8
  %rem94 = urem i64 %91, 10
  store i64 %rem94, i64* %ybit, align 8
  %92 = load i64, i64* %y, align 8
  %div95 = udiv i64 %92, 10
  store i64 %div95, i64* %y, align 8
  %93 = load i64, i64* %ybit, align 8
  %cmp96 = icmp ugt i64 %93, 1
  br i1 %cmp96, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %for.body.93
  br label %invalid_operation

if.end.98:                                        ; preds = %for.body.93
  br label %for.inc.99

for.inc.99:                                       ; preds = %if.end.98
  %94 = load i32, i32* %k, align 4
  %inc100 = add i32 %94, 1
  store i32 %inc100, i32* %k, align 4
  br label %for.cond.91

for.end.101:                                      ; preds = %for.cond.91
  br label %for.inc.102

for.inc.102:                                      ; preds = %for.end.101
  %95 = load i64, i64* %i, align 8
  %inc103 = add i64 %95, 1
  store i64 %inc103, i64* %i, align 8
  br label %for.cond.85

for.end.104:                                      ; preds = %for.cond.85
  %96 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %96)
  %97 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %97, i32 0, i32 1
  store i64 0, i64* %exp105, align 8
  %98 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data106 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %98, i32 0, i32 5
  %99 = load i64*, i64** %data106, align 8
  %100 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len107 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %100, i32 0, i32 3
  %101 = load i64, i64* %len107, align 8
  %call108 = call i64 @_mpd_real_size(i64* %99, i64 %101)
  %102 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len109 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %102, i32 0, i32 3
  store i64 %call108, i64* %len109, align 8
  %103 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %104 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len110 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %104, i32 0, i32 3
  %105 = load i64, i64* %len110, align 8
  %106 = load i32*, i32** %status.addr, align 8
  %call111 = call i32 @mpd_qresize(%struct.mpd_t* %103, i64 %105, i32* %106)
  %107 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %107)
  %108 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %109 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %108, %struct.mpd_context_t* %109)
  br label %return

invalid_operation:                                ; preds = %if.then.97, %if.then.80, %if.then.57, %if.then.33
  %110 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %111 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %110, i32 256, i32* %111)
  br label %return

return:                                           ; preds = %invalid_operation, %for.end.104, %if.then.19, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @_mpd_real_size(i64* %data, i64 %size) #2 {
entry:
  %data.addr = alloca i64*, align 8
  %size.addr = alloca i64, align 8
  store i64* %data, i64** %data.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %size.addr, align 8
  %cmp = icmp sgt i64 %0, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load i64, i64* %size.addr, align 8
  %sub = sub i64 %1, 1
  %2 = load i64*, i64** %data.addr, align 8
  %arrayidx = getelementptr i64, i64* %2, i64 %sub
  %3 = load i64, i64* %arrayidx, align 8
  %cmp1 = icmp eq i64 %3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i64, i64* %size.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %size.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load i64, i64* %size.addr, align 8
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_cap(%struct.mpd_t* %result, %struct.mpd_context_t* %ctx) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %dummy = alloca i32, align 4
  %len = alloca i64, align 8
  %r = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 3
  %1 = load i64, i64* %len1, align 8
  %cmp = icmp sgt i64 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 2
  %3 = load i64, i64* %digits, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %4, i32 0, i32 0
  %5 = load i64, i64* %prec, align 8
  %cmp2 = icmp sgt i64 %3, %5
  br i1 %cmp2, label %if.then, label %if.end.11

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec3 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 0
  %7 = load i64, i64* %prec3, align 8
  call void @_mpd_idiv_word(i64* %len, i64* %r, i64 %7, i64 19)
  %8 = load i64, i64* %r, align 8
  %cmp4 = icmp eq i64 %8, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %9 = load i64, i64* %len, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %10 = load i64, i64* %len, align 8
  %add = add i64 %10, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %9, %cond.true ], [ %add, %cond.false ]
  store i64 %cond, i64* %len, align 8
  %11 = load i64, i64* %r, align 8
  %cmp5 = icmp ne i64 %11, 0
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %cond.end
  %12 = load i64, i64* %r, align 8
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %12
  %13 = load i64, i64* %arrayidx, align 8
  %14 = load i64, i64* %len, align 8
  %sub = sub i64 %14, 1
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 5
  %16 = load i64*, i64** %data, align 8
  %arrayidx7 = getelementptr i64, i64* %16, i64 %sub
  %17 = load i64, i64* %arrayidx7, align 8
  %rem = urem i64 %17, %13
  store i64 %rem, i64* %arrayidx7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.6, %cond.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 5
  %19 = load i64*, i64** %data8, align 8
  %20 = load i64, i64* %len, align 8
  %call = call i64 @_mpd_real_size(i64* %19, i64 %20)
  store i64 %call, i64* %len, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load i64, i64* %len, align 8
  %call9 = call i32 @mpd_qresize(%struct.mpd_t* %21, i64 %22, i32* %dummy)
  %23 = load i64, i64* %len, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 3
  store i64 %23, i64* %len10, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %25)
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %land.lhs.true, %entry
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call12 = call i32 @mpd_iszero(%struct.mpd_t* %26)
  %tobool = icmp ne i32 %call12, 0
  br i1 %tobool, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.end.11
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call14 = call zeroext i8 @mpd_sign(%struct.mpd_t* %28)
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 1
  %30 = load i64, i64* %exp, align 8
  call void @_settriple(%struct.mpd_t* %27, i8 zeroext %call14, i64 0, i64 %30)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.13, %if.end.11
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i8* @mpd_class(%struct.mpd_t* %a, %struct.mpd_context_t* %ctx) #0 {
entry:
  %retval = alloca i8*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else.4

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isqnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8** %retval
  br label %return

if.else:                                          ; preds = %if.then
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8** %retval
  br label %return

if.else.4:                                        ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_ispositive(%struct.mpd_t* %2)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else.20

if.then.7:                                        ; preds = %if.else.4
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call8 = call i32 @mpd_isinfinite(%struct.mpd_t* %3)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %if.then.7
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8** %retval
  br label %return

if.else.11:                                       ; preds = %if.then.7
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call12 = call i32 @mpd_iszero(%struct.mpd_t* %4)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else.11
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8** %retval
  br label %return

if.else.15:                                       ; preds = %if.else.11
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call16 = call i32 @mpd_isnormal(%struct.mpd_t* %5, %struct.mpd_context_t* %6)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %if.else.15
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8** %retval
  br label %return

if.else.19:                                       ; preds = %if.else.15
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0), i8** %retval
  br label %return

if.else.20:                                       ; preds = %if.else.4
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call21 = call i32 @mpd_isinfinite(%struct.mpd_t* %7)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %if.else.20
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8** %retval
  br label %return

if.else.24:                                       ; preds = %if.else.20
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call25 = call i32 @mpd_iszero(%struct.mpd_t* %8)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.else.24
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i8** %retval
  br label %return

if.else.28:                                       ; preds = %if.else.24
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call29 = call i32 @mpd_isnormal(%struct.mpd_t* %9, %struct.mpd_context_t* %10)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %if.else.28
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8** %retval
  br label %return

if.else.32:                                       ; preds = %if.else.28
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %if.else.32, %if.then.31, %if.then.27, %if.then.23, %if.else.19, %if.then.18, %if.then.14, %if.then.10, %if.else, %if.then.3
  %11 = load i8*, i8** %retval
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qinvert(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %x = alloca i64, align 8
  %z = alloca i64, align 8
  %xbit = alloca i64, align 8
  %i = alloca i64, align 8
  %digits = alloca i64, align 8
  %len = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %k = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isnegative(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 1
  %3 = load i64, i64* %exp, align 8
  %cmp = icmp ne i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %4, i32 256, i32* %5)
  br label %return

if.end:                                           ; preds = %lor.lhs.false.3
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 2
  %7 = load i64, i64* %digits4, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %8, i32 0, i32 0
  %9 = load i64, i64* %prec, align 8
  %cmp5 = icmp slt i64 %7, %9
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec6 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %10, i32 0, i32 0
  %11 = load i64, i64* %prec6, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  %13 = load i64, i64* %digits7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %13, %cond.false ]
  store i64 %cond, i64* %digits, align 8
  %14 = load i64, i64* %digits, align 8
  call void @_mpd_idiv_word(i64* %q, i64* %r, i64 %14, i64 19)
  %15 = load i64, i64* %r, align 8
  %cmp8 = icmp eq i64 %15, 0
  br i1 %cmp8, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %cond.end
  %16 = load i64, i64* %q, align 8
  br label %cond.end.11

cond.false.10:                                    ; preds = %cond.end
  %17 = load i64, i64* %q, align 8
  %add = add i64 %17, 1
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.10, %cond.true.9
  %cond12 = phi i64 [ %16, %cond.true.9 ], [ %add, %cond.false.10 ]
  store i64 %cond12, i64* %len, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load i64, i64* %len, align 8
  %20 = load i32*, i32** %status.addr, align 8
  %call13 = call i32 @mpd_qresize(%struct.mpd_t* %18, i64 %19, i32* %20)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %cond.end.11
  br label %return

if.end.16:                                        ; preds = %cond.end.11
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %if.end.16
  %21 = load i64, i64* %i, align 8
  %22 = load i64, i64* %len, align 8
  %cmp17 = icmp slt i64 %21, %22
  br i1 %cmp17, label %for.body, label %for.end.41

for.body:                                         ; preds = %for.cond
  %23 = load i64, i64* %i, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 3
  %25 = load i64, i64* %len18, align 8
  %cmp19 = icmp slt i64 %23, %25
  br i1 %cmp19, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %for.body
  %26 = load i64, i64* %i, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %27, i32 0, i32 5
  %28 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %28, i64 %26
  %29 = load i64, i64* %arrayidx, align 8
  br label %cond.end.22

cond.false.21:                                    ; preds = %for.body
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.21, %cond.true.20
  %cond23 = phi i64 [ %29, %cond.true.20 ], [ 0, %cond.false.21 ]
  store i64 %cond23, i64* %x, align 8
  store i64 0, i64* %z, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc, %cond.end.22
  %30 = load i32, i32* %k, align 4
  %cmp25 = icmp slt i32 %30, 19
  br i1 %cmp25, label %for.body.26, label %for.end

for.body.26:                                      ; preds = %for.cond.24
  %31 = load i64, i64* %x, align 8
  %rem = urem i64 %31, 10
  store i64 %rem, i64* %xbit, align 8
  %32 = load i64, i64* %x, align 8
  %div = udiv i64 %32, 10
  store i64 %div, i64* %x, align 8
  %33 = load i64, i64* %xbit, align 8
  %cmp27 = icmp ugt i64 %33, 1
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %for.body.26
  br label %invalid_operation

if.end.29:                                        ; preds = %for.body.26
  %34 = load i64, i64* %xbit, align 8
  %tobool30 = icmp ne i64 %34, 0
  br i1 %tobool30, label %cond.false.33, label %cond.true.31

cond.true.31:                                     ; preds = %if.end.29
  %35 = load i32, i32* %k, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx32 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %36 = load i64, i64* %arrayidx32, align 8
  br label %cond.end.34

cond.false.33:                                    ; preds = %if.end.29
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.33, %cond.true.31
  %cond35 = phi i64 [ %36, %cond.true.31 ], [ 0, %cond.false.33 ]
  %37 = load i64, i64* %z, align 8
  %add36 = add i64 %37, %cond35
  store i64 %add36, i64* %z, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end.34
  %38 = load i32, i32* %k, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.24

for.end:                                          ; preds = %for.cond.24
  %39 = load i64, i64* %z, align 8
  %40 = load i64, i64* %i, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 5
  %42 = load i64*, i64** %data37, align 8
  %arrayidx38 = getelementptr i64, i64* %42, i64 %40
  store i64 %39, i64* %arrayidx38, align 8
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.end
  %43 = load i64, i64* %i, align 8
  %inc40 = add i64 %43, 1
  store i64 %inc40, i64* %i, align 8
  br label %for.cond

for.end.41:                                       ; preds = %for.cond
  %44 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %44)
  %45 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %45, i32 0, i32 1
  store i64 0, i64* %exp42, align 8
  %46 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %46, i32 0, i32 5
  %47 = load i64*, i64** %data43, align 8
  %48 = load i64, i64* %len, align 8
  %call44 = call i64 @_mpd_real_size(i64* %47, i64 %48)
  %49 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %49, i32 0, i32 3
  store i64 %call44, i64* %len45, align 8
  %50 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %51, i32 0, i32 3
  %52 = load i64, i64* %len46, align 8
  %53 = load i32*, i32** %status.addr, align 8
  %call47 = call i32 @mpd_qresize(%struct.mpd_t* %50, i64 %52, i32* %53)
  %54 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %54)
  %55 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %56 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %55, %struct.mpd_context_t* %56)
  br label %return

invalid_operation:                                ; preds = %if.then.28
  %57 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %58 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %57, i32 256, i32* %58)
  br label %return

return:                                           ; preds = %invalid_operation, %for.end.41, %if.then.15, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qlogb(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.10

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %5, i8 zeroext 0, i8 zeroext 2)
  br label %if.end.10

if.else:                                          ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %6)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %if.else
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %7, i8 zeroext 1, i8 zeroext 2)
  %8 = load i32*, i32** %status.addr, align 8
  %9 = load i32, i32* %8, align 4
  %or = or i32 %9, 4
  store i32 %or, i32* %8, align 4
  br label %if.end.9

if.else.7:                                        ; preds = %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call8 = call i64 @mpd_adjexp(%struct.mpd_t* %11)
  %12 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  call void @mpd_qset_ssize(%struct.mpd_t* %10, i64 %call8, %struct.mpd_context_t* %12, i32* %13)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else.7, %if.then.6
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.3, %if.end.9, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qor(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %big = alloca %struct.mpd_t*, align 8
  %small = alloca %struct.mpd_t*, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %z = alloca i64, align 8
  %xbit = alloca i64, align 8
  %ybit = alloca i64, align 8
  %k = alloca i32, align 4
  %mswdigits = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %big, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %small, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %4)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 1
  %7 = load i64, i64* %exp, align 8
  %cmp = icmp ne i64 %7, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.9
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp11, align 8
  %cmp12 = icmp ne i64 %9, 0
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false.3, %lor.lhs.false, %entry
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end:                                           ; preds = %lor.lhs.false.10
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  %13 = load i64, i64* %digits, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 2
  %15 = load i64, i64* %digits13, align 8
  %cmp14 = icmp sgt i64 %13, %15
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %16, %struct.mpd_t** %big, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %17, %struct.mpd_t** %small, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 3
  %20 = load i64, i64* %len, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call17 = call i32 @mpd_qresize(%struct.mpd_t* %18, i64 %20, i32* %21)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %return

if.end.20:                                        ; preds = %if.end.16
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %if.end.20
  %22 = load i64, i64* %i, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 3
  %24 = load i64, i64* %len21, align 8
  %sub = sub i64 %24, 1
  %cmp22 = icmp slt i64 %22, %sub
  br i1 %cmp22, label %for.body, label %for.end.41

for.body:                                         ; preds = %for.cond
  %25 = load i64, i64* %i, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 5
  %27 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %27, i64 %25
  %28 = load i64, i64* %arrayidx, align 8
  store i64 %28, i64* %x, align 8
  %29 = load i64, i64* %i, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 5
  %31 = load i64*, i64** %data23, align 8
  %arrayidx24 = getelementptr i64, i64* %31, i64 %29
  %32 = load i64, i64* %arrayidx24, align 8
  store i64 %32, i64* %y, align 8
  store i64 0, i64* %z, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc, %for.body
  %33 = load i32, i32* %k, align 4
  %cmp26 = icmp slt i32 %33, 19
  br i1 %cmp26, label %for.body.27, label %for.end

for.body.27:                                      ; preds = %for.cond.25
  %34 = load i64, i64* %x, align 8
  %rem = urem i64 %34, 10
  store i64 %rem, i64* %xbit, align 8
  %35 = load i64, i64* %x, align 8
  %div = udiv i64 %35, 10
  store i64 %div, i64* %x, align 8
  %36 = load i64, i64* %y, align 8
  %rem28 = urem i64 %36, 10
  store i64 %rem28, i64* %ybit, align 8
  %37 = load i64, i64* %y, align 8
  %div29 = udiv i64 %37, 10
  store i64 %div29, i64* %y, align 8
  %38 = load i64, i64* %xbit, align 8
  %cmp30 = icmp ugt i64 %38, 1
  br i1 %cmp30, label %if.then.33, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %for.body.27
  %39 = load i64, i64* %ybit, align 8
  %cmp32 = icmp ugt i64 %39, 1
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.31, %for.body.27
  br label %invalid_operation

if.end.34:                                        ; preds = %lor.lhs.false.31
  %40 = load i64, i64* %xbit, align 8
  %41 = load i64, i64* %ybit, align 8
  %or = or i64 %40, %41
  %tobool35 = icmp ne i64 %or, 0
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.34
  %42 = load i32, i32* %k, align 4
  %idxprom = sext i32 %42 to i64
  %arrayidx36 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %43 = load i64, i64* %arrayidx36, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ 0, %cond.false ]
  %44 = load i64, i64* %z, align 8
  %add = add i64 %44, %cond
  store i64 %add, i64* %z, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %45 = load i32, i32* %k, align 4
  %inc = add i32 %45, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.25

for.end:                                          ; preds = %for.cond.25
  %46 = load i64, i64* %z, align 8
  %47 = load i64, i64* %i, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 5
  %49 = load i64*, i64** %data37, align 8
  %arrayidx38 = getelementptr i64, i64* %49, i64 %47
  store i64 %46, i64* %arrayidx38, align 8
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.end
  %50 = load i64, i64* %i, align 8
  %inc40 = add i64 %50, 1
  store i64 %inc40, i64* %i, align 8
  br label %for.cond

for.end.41:                                       ; preds = %for.cond
  %51 = load i64, i64* %i, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %52, i32 0, i32 5
  %53 = load i64*, i64** %data42, align 8
  %arrayidx43 = getelementptr i64, i64* %53, i64 %51
  %54 = load i64, i64* %arrayidx43, align 8
  store i64 %54, i64* %x, align 8
  %55 = load i64, i64* %i, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 5
  %57 = load i64*, i64** %data44, align 8
  %arrayidx45 = getelementptr i64, i64* %57, i64 %55
  %58 = load i64, i64* %arrayidx45, align 8
  store i64 %58, i64* %y, align 8
  store i64 0, i64* %z, align 8
  %59 = load i64, i64* %x, align 8
  %call46 = call i32 @mpd_word_digits(i64 %59)
  store i32 %call46, i32* %mswdigits, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.68, %for.end.41
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %mswdigits, align 4
  %cmp48 = icmp slt i32 %60, %61
  br i1 %cmp48, label %for.body.49, label %for.end.70

for.body.49:                                      ; preds = %for.cond.47
  %62 = load i64, i64* %x, align 8
  %rem50 = urem i64 %62, 10
  store i64 %rem50, i64* %xbit, align 8
  %63 = load i64, i64* %x, align 8
  %div51 = udiv i64 %63, 10
  store i64 %div51, i64* %x, align 8
  %64 = load i64, i64* %y, align 8
  %rem52 = urem i64 %64, 10
  store i64 %rem52, i64* %ybit, align 8
  %65 = load i64, i64* %y, align 8
  %div53 = udiv i64 %65, 10
  store i64 %div53, i64* %y, align 8
  %66 = load i64, i64* %xbit, align 8
  %cmp54 = icmp ugt i64 %66, 1
  br i1 %cmp54, label %if.then.57, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %for.body.49
  %67 = load i64, i64* %ybit, align 8
  %cmp56 = icmp ugt i64 %67, 1
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %lor.lhs.false.55, %for.body.49
  br label %invalid_operation

if.end.58:                                        ; preds = %lor.lhs.false.55
  %68 = load i64, i64* %xbit, align 8
  %69 = load i64, i64* %ybit, align 8
  %or59 = or i64 %68, %69
  %tobool60 = icmp ne i64 %or59, 0
  br i1 %tobool60, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %if.end.58
  %70 = load i32, i32* %k, align 4
  %idxprom62 = sext i32 %70 to i64
  %arrayidx63 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom62
  %71 = load i64, i64* %arrayidx63, align 8
  br label %cond.end.65

cond.false.64:                                    ; preds = %if.end.58
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.61
  %cond66 = phi i64 [ %71, %cond.true.61 ], [ 0, %cond.false.64 ]
  %72 = load i64, i64* %z, align 8
  %add67 = add i64 %72, %cond66
  store i64 %add67, i64* %z, align 8
  br label %for.inc.68

for.inc.68:                                       ; preds = %cond.end.65
  %73 = load i32, i32* %k, align 4
  %inc69 = add i32 %73, 1
  store i32 %inc69, i32* %k, align 4
  br label %for.cond.47

for.end.70:                                       ; preds = %for.cond.47
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.82, %for.end.70
  %74 = load i32, i32* %k, align 4
  %cmp72 = icmp slt i32 %74, 19
  br i1 %cmp72, label %for.body.73, label %for.end.84

for.body.73:                                      ; preds = %for.cond.71
  %75 = load i64, i64* %y, align 8
  %rem74 = urem i64 %75, 10
  store i64 %rem74, i64* %ybit, align 8
  %76 = load i64, i64* %y, align 8
  %div75 = udiv i64 %76, 10
  store i64 %div75, i64* %y, align 8
  %77 = load i64, i64* %ybit, align 8
  %cmp76 = icmp ugt i64 %77, 1
  br i1 %cmp76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %for.body.73
  br label %invalid_operation

if.end.78:                                        ; preds = %for.body.73
  %78 = load i64, i64* %ybit, align 8
  %79 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %79 to i64
  %arrayidx80 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom79
  %80 = load i64, i64* %arrayidx80, align 8
  %mul = mul i64 %78, %80
  %81 = load i64, i64* %z, align 8
  %add81 = add i64 %81, %mul
  store i64 %add81, i64* %z, align 8
  br label %for.inc.82

for.inc.82:                                       ; preds = %if.end.78
  %82 = load i32, i32* %k, align 4
  %inc83 = add i32 %82, 1
  store i32 %inc83, i32* %k, align 4
  br label %for.cond.71

for.end.84:                                       ; preds = %for.cond.71
  %83 = load i64, i64* %z, align 8
  %84 = load i64, i64* %i, align 8
  %inc85 = add i64 %84, 1
  store i64 %inc85, i64* %i, align 8
  %85 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %85, i32 0, i32 5
  %86 = load i64*, i64** %data86, align 8
  %arrayidx87 = getelementptr i64, i64* %86, i64 %84
  store i64 %83, i64* %arrayidx87, align 8
  br label %for.cond.88

for.cond.88:                                      ; preds = %for.inc.109, %for.end.84
  %87 = load i64, i64* %i, align 8
  %88 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len89 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %88, i32 0, i32 3
  %89 = load i64, i64* %len89, align 8
  %cmp90 = icmp slt i64 %87, %89
  br i1 %cmp90, label %for.body.91, label %for.end.111

for.body.91:                                      ; preds = %for.cond.88
  %90 = load i64, i64* %i, align 8
  %91 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 5
  %92 = load i64*, i64** %data92, align 8
  %arrayidx93 = getelementptr i64, i64* %92, i64 %90
  %93 = load i64, i64* %arrayidx93, align 8
  store i64 %93, i64* %y, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.94

for.cond.94:                                      ; preds = %for.inc.102, %for.body.91
  %94 = load i32, i32* %k, align 4
  %cmp95 = icmp slt i32 %94, 19
  br i1 %cmp95, label %for.body.96, label %for.end.104

for.body.96:                                      ; preds = %for.cond.94
  %95 = load i64, i64* %y, align 8
  %rem97 = urem i64 %95, 10
  store i64 %rem97, i64* %ybit, align 8
  %96 = load i64, i64* %y, align 8
  %div98 = udiv i64 %96, 10
  store i64 %div98, i64* %y, align 8
  %97 = load i64, i64* %ybit, align 8
  %cmp99 = icmp ugt i64 %97, 1
  br i1 %cmp99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %for.body.96
  br label %invalid_operation

if.end.101:                                       ; preds = %for.body.96
  br label %for.inc.102

for.inc.102:                                      ; preds = %if.end.101
  %98 = load i32, i32* %k, align 4
  %inc103 = add i32 %98, 1
  store i32 %inc103, i32* %k, align 4
  br label %for.cond.94

for.end.104:                                      ; preds = %for.cond.94
  %99 = load i64, i64* %i, align 8
  %100 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %100, i32 0, i32 5
  %101 = load i64*, i64** %data105, align 8
  %arrayidx106 = getelementptr i64, i64* %101, i64 %99
  %102 = load i64, i64* %arrayidx106, align 8
  %103 = load i64, i64* %i, align 8
  %104 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data107 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %104, i32 0, i32 5
  %105 = load i64*, i64** %data107, align 8
  %arrayidx108 = getelementptr i64, i64* %105, i64 %103
  store i64 %102, i64* %arrayidx108, align 8
  br label %for.inc.109

for.inc.109:                                      ; preds = %for.end.104
  %106 = load i64, i64* %i, align 8
  %inc110 = add i64 %106, 1
  store i64 %inc110, i64* %i, align 8
  br label %for.cond.88

for.end.111:                                      ; preds = %for.cond.88
  %107 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %107)
  %108 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp112 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %108, i32 0, i32 1
  store i64 0, i64* %exp112, align 8
  %109 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data113 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %109, i32 0, i32 5
  %110 = load i64*, i64** %data113, align 8
  %111 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %111, i32 0, i32 3
  %112 = load i64, i64* %len114, align 8
  %call115 = call i64 @_mpd_real_size(i64* %110, i64 %112)
  %113 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len116 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %113, i32 0, i32 3
  store i64 %call115, i64* %len116, align 8
  %114 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %115 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len117 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %115, i32 0, i32 3
  %116 = load i64, i64* %len117, align 8
  %117 = load i32*, i32** %status.addr, align 8
  %call118 = call i32 @mpd_qresize(%struct.mpd_t* %114, i64 %116, i32* %117)
  %118 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %118)
  %119 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %120 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %119, %struct.mpd_context_t* %120)
  br label %return

invalid_operation:                                ; preds = %if.then.100, %if.then.77, %if.then.57, %if.then.33
  %121 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %122 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %121, i32 256, i32* %122)
  br label %return

return:                                           ; preds = %invalid_operation, %for.end.111, %if.then.19, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qrotate(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %tmp_data = alloca [64 x i64], align 16
  %tmp = alloca %struct.mpd_t, align 8
  %big_data = alloca [64 x i64], align 16
  %big = alloca %struct.mpd_t, align 8
  %small_data = alloca [64 x i64], align 16
  %small = alloca %struct.mpd_t, align 8
  %n = alloca i64, align 8
  %lshift = alloca i64, align 8
  %rshift = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tmp_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 0
  store i8 48, i8* %flags3, align 1
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 1
  store i64 0, i64* %exp4, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 2
  store i64 0, i64* %digits5, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 3
  store i64 0, i64* %len6, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 4
  store i64 64, i64* %alloc7, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big, i32 0, i32 5
  %arraydecay9 = getelementptr inbounds [64 x i64], [64 x i64]* %big_data, i32 0, i32 0
  store i64* %arraydecay9, i64** %data8, align 8
  %flags12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 0
  store i8 48, i8* %flags12, align 1
  %exp13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 1
  store i64 0, i64* %exp13, align 8
  %digits14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 2
  store i64 0, i64* %digits14, align 8
  %len15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 3
  store i64 0, i64* %len15, align 8
  %alloc16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 4
  store i64 64, i64* %alloc16, align 8
  %data17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %small, i32 0, i32 5
  %arraydecay18 = getelementptr inbounds [64 x i64], [64 x i64]* %small_data, i32 0, i32 0
  store i64* %arraydecay18, i64** %data17, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call22 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then, label %if.end.27

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call24 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %lor.lhs.false
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp28, align 8
  %cmp = icmp ne i64 %8, 0
  br i1 %cmp, label %if.then.32, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %if.end.27
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call30 = call i32 @mpd_isinfinite(%struct.mpd_t* %9)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %lor.lhs.false.29, %if.end.27
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false.29
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call34 = call i64 @mpd_qget_ssize(%struct.mpd_t* %12, i32* %workstatus)
  store i64 %call34, i64* %n, align 8
  %13 = load i32, i32* %workstatus, align 4
  %and = and i32 %13, 256
  %tobool35 = icmp ne i32 %and, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %14, i32 256, i32* %15)
  br label %return

if.end.37:                                        ; preds = %if.end.33
  %16 = load i64, i64* %n, align 8
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 0
  %18 = load i64, i64* %prec, align 8
  %cmp38 = icmp sgt i64 %16, %18
  br i1 %cmp38, label %if.then.42, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %if.end.37
  %19 = load i64, i64* %n, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec40 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 0
  %21 = load i64, i64* %prec40, align 8
  %sub = sub i64 0, %21
  %cmp41 = icmp slt i64 %19, %sub
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %lor.lhs.false.39, %if.end.37
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %22, i32 256, i32* %23)
  br label %return

if.end.43:                                        ; preds = %lor.lhs.false.39
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call44 = call i32 @mpd_isinfinite(%struct.mpd_t* %24)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.then.46, label %if.end.48

if.then.46:                                       ; preds = %if.end.43
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  %call47 = call i32 @mpd_qcopy(%struct.mpd_t* %25, %struct.mpd_t* %26, i32* %27)
  br label %return

if.end.48:                                        ; preds = %if.end.43
  %28 = load i64, i64* %n, align 8
  %cmp49 = icmp sge i64 %28, 0
  br i1 %cmp49, label %if.then.50, label %if.else

if.then.50:                                       ; preds = %if.end.48
  %29 = load i64, i64* %n, align 8
  store i64 %29, i64* %lshift, align 8
  %30 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec51 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %30, i32 0, i32 0
  %31 = load i64, i64* %prec51, align 8
  %32 = load i64, i64* %n, align 8
  %sub52 = sub i64 %31, %32
  store i64 %sub52, i64* %rshift, align 8
  br label %if.end.55

if.else:                                          ; preds = %if.end.48
  %33 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec53 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %33, i32 0, i32 0
  %34 = load i64, i64* %prec53, align 8
  %35 = load i64, i64* %n, align 8
  %add = add i64 %34, %35
  store i64 %add, i64* %lshift, align 8
  %36 = load i64, i64* %n, align 8
  %sub54 = sub i64 0, %36
  store i64 %sub54, i64* %rshift, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %if.then.50
  %37 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 2
  %38 = load i64, i64* %digits56, align 8
  %39 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec57 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %39, i32 0, i32 0
  %40 = load i64, i64* %prec57, align 8
  %cmp58 = icmp sgt i64 %38, %40
  br i1 %cmp58, label %if.then.59, label %if.end.64

if.then.59:                                       ; preds = %if.end.55
  %41 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %42 = load i32*, i32** %status.addr, align 8
  %call60 = call i32 @mpd_qcopy(%struct.mpd_t* %tmp, %struct.mpd_t* %41, i32* %42)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %if.then.59
  %43 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %44 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %43, i32 512, i32* %44)
  br label %finish

if.end.63:                                        ; preds = %if.then.59
  %45 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %tmp, %struct.mpd_context_t* %45)
  store %struct.mpd_t* %tmp, %struct.mpd_t** %a.addr, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.end.55
  %46 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %47 = load i64, i64* %lshift, align 8
  %48 = load i32*, i32** %status.addr, align 8
  %call65 = call i32 @mpd_qshiftl(%struct.mpd_t* %big, %struct.mpd_t* %46, i64 %47, i32* %48)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.end.64
  %49 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %50 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %49, i32 512, i32* %50)
  br label %finish

if.end.68:                                        ; preds = %if.end.64
  %51 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %big, %struct.mpd_context_t* %51)
  %52 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %53 = load i64, i64* %rshift, align 8
  %54 = load i32*, i32** %status.addr, align 8
  %call69 = call i64 @mpd_qshiftr(%struct.mpd_t* %small, %struct.mpd_t* %52, i64 %53, i32* %54)
  %cmp70 = icmp eq i64 %call69, -1
  br i1 %cmp70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.68
  %55 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %56 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %55, i32 512, i32* %56)
  br label %finish

if.end.72:                                        ; preds = %if.end.68
  %57 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %58 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %59 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qadd(%struct.mpd_t* %57, %struct.mpd_t* %big, %struct.mpd_t* %small, %struct.mpd_context_t* %58, i32* %59)
  br label %finish

finish:                                           ; preds = %if.end.72, %if.then.71, %if.then.67, %if.then.62
  call void @mpd_del(%struct.mpd_t* %tmp)
  call void @mpd_del(%struct.mpd_t* %big)
  call void @mpd_del(%struct.mpd_t* %small)
  br label %return

return:                                           ; preds = %finish, %if.then.46, %if.then.42, %if.then.36, %if.then.32, %if.then.26
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qadd(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %3)
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, i8 zeroext %call, %struct.mpd_context_t* %4, i32* %5)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qscaleb(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %n = alloca i64, align 8
  %maxjump = alloca i64, align 8
  %exp = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp7, align 8
  %cmp = icmp ne i64 %8, 0
  br i1 %cmp, label %if.then.11, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end.6
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call9 = call i32 @mpd_isinfinite(%struct.mpd_t* %9)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %lor.lhs.false.8, %if.end.6
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false.8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call13 = call i64 @mpd_qabs_uint(%struct.mpd_t* %12, i32* %workstatus)
  store i64 %call13, i64* %n, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 1
  %14 = load i64, i64* %emax, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %15, i32 0, i32 0
  %16 = load i64, i64* %prec, align 8
  %add = add i64 %14, %16
  %mul = mul i64 2, %add
  store i64 %mul, i64* %maxjump, align 8
  %17 = load i64, i64* %n, align 8
  %18 = load i64, i64* %maxjump, align 8
  %cmp14 = icmp ugt i64 %17, %18
  br i1 %cmp14, label %if.then.17, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %if.end.12
  %19 = load i32, i32* %workstatus, align 4
  %and = and i32 %19, 256
  %tobool16 = icmp ne i32 %and, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %lor.lhs.false.15, %if.end.12
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %21 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %20, i32 256, i32* %21)
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false.15
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call19 = call i32 @mpd_isinfinite(%struct.mpd_t* %22)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %if.end.18
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %25 = load i32*, i32** %status.addr, align 8
  %call22 = call i32 @mpd_qcopy(%struct.mpd_t* %23, %struct.mpd_t* %24, i32* %25)
  br label %return

if.end.23:                                        ; preds = %if.end.18
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp24, align 8
  %28 = load i64, i64* %n, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call25 = call i32 @mpd_arith_sign(%struct.mpd_t* %29)
  %conv = sext i32 %call25 to i64
  %mul26 = mul i64 %28, %conv
  %add27 = add i64 %27, %mul26
  store i64 %add27, i64* %exp, align 8
  %30 = load i64, i64* %exp, align 8
  %cmp28 = icmp sgt i64 %30, 2000000000000000001
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.23
  br label %cond.end

cond.false:                                       ; preds = %if.end.23
  %31 = load i64, i64* %exp, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 2000000000000000001, %cond.true ], [ %31, %cond.false ]
  store i64 %cond, i64* %exp, align 8
  %32 = load i64, i64* %exp, align 8
  %cmp30 = icmp slt i64 %32, -4000000000000000001
  br i1 %cmp30, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %cond.end
  br label %cond.end.34

cond.false.33:                                    ; preds = %cond.end
  %33 = load i64, i64* %exp, align 8
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.33, %cond.true.32
  %cond35 = phi i64 [ -4000000000000000001, %cond.true.32 ], [ %33, %cond.false.33 ]
  store i64 %cond35, i64* %exp, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %36 = load i32*, i32** %status.addr, align 8
  %call36 = call i32 @mpd_qcopy(%struct.mpd_t* %34, %struct.mpd_t* %35, i32* %36)
  %37 = load i64, i64* %exp, align 8
  %38 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %38, i32 0, i32 1
  store i64 %37, i64* %exp37, align 8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %40 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %41 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %39, %struct.mpd_context_t* %40, i32* %41)
  br label %return

return:                                           ; preds = %cond.end.34, %if.then.21, %if.then.17, %if.then.11, %if.then.5
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qshiftn(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %n, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.22

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call4 = call i32 @mpd_qcopy(%struct.mpd_t* %5, %struct.mpd_t* %6, i32* %7)
  br label %if.end.22

if.end.5:                                         ; preds = %entry
  %8 = load i64, i64* %n.addr, align 8
  %cmp = icmp sge i64 %8, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.5
  %9 = load i64, i64* %n.addr, align 8
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %10, i32 0, i32 0
  %11 = load i64, i64* %prec, align 8
  %cmp6 = icmp sle i64 %9, %11
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %14 = load i64, i64* %n.addr, align 8
  %15 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qshiftl(%struct.mpd_t* %12, %struct.mpd_t* %13, i64 %14, i32* %15)
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %16, %struct.mpd_context_t* %17)
  br label %if.end.22

if.else:                                          ; preds = %land.lhs.true, %if.end.5
  %18 = load i64, i64* %n.addr, align 8
  %cmp9 = icmp slt i64 %18, 0
  br i1 %cmp9, label %land.lhs.true.10, label %if.else.20

land.lhs.true.10:                                 ; preds = %if.else
  %19 = load i64, i64* %n.addr, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec11 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 0
  %21 = load i64, i64* %prec11, align 8
  %sub = sub i64 0, %21
  %cmp12 = icmp sge i64 %19, %sub
  br i1 %cmp12, label %if.then.13, label %if.else.20

if.then.13:                                       ; preds = %land.lhs.true.10
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %24 = load i32*, i32** %status.addr, align 8
  %call14 = call i32 @mpd_qcopy(%struct.mpd_t* %22, %struct.mpd_t* %23, i32* %24)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.then.13
  br label %if.end.22

if.end.17:                                        ; preds = %if.then.13
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %25, %struct.mpd_context_t* %26)
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load i64, i64* %n.addr, align 8
  %sub18 = sub i64 0, %28
  %call19 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %27, i64 %sub18)
  br label %if.end.21

if.else.20:                                       ; preds = %land.lhs.true.10, %if.else
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %30 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %29, i32 256, i32* %30)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.20, %if.end.17
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.3, %if.end, %if.then.16, %if.end.21, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qshift(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %if.end.36

if.end:                                           ; preds = %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp, align 8
  %cmp = icmp ne i64 %8, 0
  br i1 %cmp, label %if.then.10, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %if.end.6
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call8 = call i32 @mpd_isinfinite(%struct.mpd_t* %9)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %lor.lhs.false.7, %if.end.6
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %if.end.36

if.end.11:                                        ; preds = %lor.lhs.false.7
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call12 = call i64 @mpd_qget_ssize(%struct.mpd_t* %12, i32* %workstatus)
  store i64 %call12, i64* %n, align 8
  %13 = load i32, i32* %workstatus, align 4
  %and = and i32 %13, 256
  %tobool13 = icmp ne i32 %and, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %14, i32 256, i32* %15)
  br label %if.end.36

if.end.15:                                        ; preds = %if.end.11
  %16 = load i64, i64* %n, align 8
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 0
  %18 = load i64, i64* %prec, align 8
  %cmp16 = icmp sgt i64 %16, %18
  br i1 %cmp16, label %if.then.20, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %if.end.15
  %19 = load i64, i64* %n, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec18 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 0
  %21 = load i64, i64* %prec18, align 8
  %sub = sub i64 0, %21
  %cmp19 = icmp slt i64 %19, %sub
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %lor.lhs.false.17, %if.end.15
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %22, i32 256, i32* %23)
  br label %if.end.36

if.end.21:                                        ; preds = %lor.lhs.false.17
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call22 = call i32 @mpd_isinfinite(%struct.mpd_t* %24)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %if.end.21
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  %call25 = call i32 @mpd_qcopy(%struct.mpd_t* %25, %struct.mpd_t* %26, i32* %27)
  br label %if.end.36

if.end.26:                                        ; preds = %if.end.21
  %28 = load i64, i64* %n, align 8
  %cmp27 = icmp sge i64 %28, 0
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.end.26
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %31 = load i64, i64* %n, align 8
  %32 = load i32*, i32** %status.addr, align 8
  %call29 = call i32 @mpd_qshiftl(%struct.mpd_t* %29, %struct.mpd_t* %30, i64 %31, i32* %32)
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %34 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %33, %struct.mpd_context_t* %34)
  br label %if.end.36

if.else:                                          ; preds = %if.end.26
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %36 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %37 = load i32*, i32** %status.addr, align 8
  %call30 = call i32 @mpd_qcopy(%struct.mpd_t* %35, %struct.mpd_t* %36, i32* %37)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.else
  br label %if.end.36

if.end.33:                                        ; preds = %if.else
  %38 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %39 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %38, %struct.mpd_context_t* %39)
  %40 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %41 = load i64, i64* %n, align 8
  %sub34 = sub i64 0, %41
  %call35 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %40, i64 %sub34)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.5, %if.then.10, %if.then.14, %if.then.20, %if.then.24, %if.then.32, %if.end.33, %if.then.28
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qxor(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %big = alloca %struct.mpd_t*, align 8
  %small = alloca %struct.mpd_t*, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %z = alloca i64, align 8
  %xbit = alloca i64, align 8
  %ybit = alloca i64, align 8
  %k = alloca i32, align 4
  %mswdigits = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %big, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %small, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %4)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call7 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 1
  %7 = load i64, i64* %exp, align 8
  %cmp = icmp ne i64 %7, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.9
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp11, align 8
  %cmp12 = icmp ne i64 %9, 0
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false.3, %lor.lhs.false, %entry
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end:                                           ; preds = %lor.lhs.false.10
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  %13 = load i64, i64* %digits, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 2
  %15 = load i64, i64* %digits13, align 8
  %cmp14 = icmp sgt i64 %13, %15
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %16, %struct.mpd_t** %big, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %17, %struct.mpd_t** %small, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 3
  %20 = load i64, i64* %len, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call17 = call i32 @mpd_qresize(%struct.mpd_t* %18, i64 %20, i32* %21)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %return

if.end.20:                                        ; preds = %if.end.16
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %if.end.20
  %22 = load i64, i64* %i, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 3
  %24 = load i64, i64* %len21, align 8
  %sub = sub i64 %24, 1
  %cmp22 = icmp slt i64 %22, %sub
  br i1 %cmp22, label %for.body, label %for.end.41

for.body:                                         ; preds = %for.cond
  %25 = load i64, i64* %i, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 5
  %27 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %27, i64 %25
  %28 = load i64, i64* %arrayidx, align 8
  store i64 %28, i64* %x, align 8
  %29 = load i64, i64* %i, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 5
  %31 = load i64*, i64** %data23, align 8
  %arrayidx24 = getelementptr i64, i64* %31, i64 %29
  %32 = load i64, i64* %arrayidx24, align 8
  store i64 %32, i64* %y, align 8
  store i64 0, i64* %z, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc, %for.body
  %33 = load i32, i32* %k, align 4
  %cmp26 = icmp slt i32 %33, 19
  br i1 %cmp26, label %for.body.27, label %for.end

for.body.27:                                      ; preds = %for.cond.25
  %34 = load i64, i64* %x, align 8
  %rem = urem i64 %34, 10
  store i64 %rem, i64* %xbit, align 8
  %35 = load i64, i64* %x, align 8
  %div = udiv i64 %35, 10
  store i64 %div, i64* %x, align 8
  %36 = load i64, i64* %y, align 8
  %rem28 = urem i64 %36, 10
  store i64 %rem28, i64* %ybit, align 8
  %37 = load i64, i64* %y, align 8
  %div29 = udiv i64 %37, 10
  store i64 %div29, i64* %y, align 8
  %38 = load i64, i64* %xbit, align 8
  %cmp30 = icmp ugt i64 %38, 1
  br i1 %cmp30, label %if.then.33, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %for.body.27
  %39 = load i64, i64* %ybit, align 8
  %cmp32 = icmp ugt i64 %39, 1
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.31, %for.body.27
  br label %invalid_operation

if.end.34:                                        ; preds = %lor.lhs.false.31
  %40 = load i64, i64* %xbit, align 8
  %41 = load i64, i64* %ybit, align 8
  %xor = xor i64 %40, %41
  %tobool35 = icmp ne i64 %xor, 0
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.34
  %42 = load i32, i32* %k, align 4
  %idxprom = sext i32 %42 to i64
  %arrayidx36 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %43 = load i64, i64* %arrayidx36, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ 0, %cond.false ]
  %44 = load i64, i64* %z, align 8
  %add = add i64 %44, %cond
  store i64 %add, i64* %z, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %45 = load i32, i32* %k, align 4
  %inc = add i32 %45, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.25

for.end:                                          ; preds = %for.cond.25
  %46 = load i64, i64* %z, align 8
  %47 = load i64, i64* %i, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 5
  %49 = load i64*, i64** %data37, align 8
  %arrayidx38 = getelementptr i64, i64* %49, i64 %47
  store i64 %46, i64* %arrayidx38, align 8
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.end
  %50 = load i64, i64* %i, align 8
  %inc40 = add i64 %50, 1
  store i64 %inc40, i64* %i, align 8
  br label %for.cond

for.end.41:                                       ; preds = %for.cond
  %51 = load i64, i64* %i, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %52, i32 0, i32 5
  %53 = load i64*, i64** %data42, align 8
  %arrayidx43 = getelementptr i64, i64* %53, i64 %51
  %54 = load i64, i64* %arrayidx43, align 8
  store i64 %54, i64* %x, align 8
  %55 = load i64, i64* %i, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 5
  %57 = load i64*, i64** %data44, align 8
  %arrayidx45 = getelementptr i64, i64* %57, i64 %55
  %58 = load i64, i64* %arrayidx45, align 8
  store i64 %58, i64* %y, align 8
  store i64 0, i64* %z, align 8
  %59 = load i64, i64* %x, align 8
  %call46 = call i32 @mpd_word_digits(i64 %59)
  store i32 %call46, i32* %mswdigits, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.68, %for.end.41
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %mswdigits, align 4
  %cmp48 = icmp slt i32 %60, %61
  br i1 %cmp48, label %for.body.49, label %for.end.70

for.body.49:                                      ; preds = %for.cond.47
  %62 = load i64, i64* %x, align 8
  %rem50 = urem i64 %62, 10
  store i64 %rem50, i64* %xbit, align 8
  %63 = load i64, i64* %x, align 8
  %div51 = udiv i64 %63, 10
  store i64 %div51, i64* %x, align 8
  %64 = load i64, i64* %y, align 8
  %rem52 = urem i64 %64, 10
  store i64 %rem52, i64* %ybit, align 8
  %65 = load i64, i64* %y, align 8
  %div53 = udiv i64 %65, 10
  store i64 %div53, i64* %y, align 8
  %66 = load i64, i64* %xbit, align 8
  %cmp54 = icmp ugt i64 %66, 1
  br i1 %cmp54, label %if.then.57, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %for.body.49
  %67 = load i64, i64* %ybit, align 8
  %cmp56 = icmp ugt i64 %67, 1
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %lor.lhs.false.55, %for.body.49
  br label %invalid_operation

if.end.58:                                        ; preds = %lor.lhs.false.55
  %68 = load i64, i64* %xbit, align 8
  %69 = load i64, i64* %ybit, align 8
  %xor59 = xor i64 %68, %69
  %tobool60 = icmp ne i64 %xor59, 0
  br i1 %tobool60, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %if.end.58
  %70 = load i32, i32* %k, align 4
  %idxprom62 = sext i32 %70 to i64
  %arrayidx63 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom62
  %71 = load i64, i64* %arrayidx63, align 8
  br label %cond.end.65

cond.false.64:                                    ; preds = %if.end.58
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.61
  %cond66 = phi i64 [ %71, %cond.true.61 ], [ 0, %cond.false.64 ]
  %72 = load i64, i64* %z, align 8
  %add67 = add i64 %72, %cond66
  store i64 %add67, i64* %z, align 8
  br label %for.inc.68

for.inc.68:                                       ; preds = %cond.end.65
  %73 = load i32, i32* %k, align 4
  %inc69 = add i32 %73, 1
  store i32 %inc69, i32* %k, align 4
  br label %for.cond.47

for.end.70:                                       ; preds = %for.cond.47
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.82, %for.end.70
  %74 = load i32, i32* %k, align 4
  %cmp72 = icmp slt i32 %74, 19
  br i1 %cmp72, label %for.body.73, label %for.end.84

for.body.73:                                      ; preds = %for.cond.71
  %75 = load i64, i64* %y, align 8
  %rem74 = urem i64 %75, 10
  store i64 %rem74, i64* %ybit, align 8
  %76 = load i64, i64* %y, align 8
  %div75 = udiv i64 %76, 10
  store i64 %div75, i64* %y, align 8
  %77 = load i64, i64* %ybit, align 8
  %cmp76 = icmp ugt i64 %77, 1
  br i1 %cmp76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %for.body.73
  br label %invalid_operation

if.end.78:                                        ; preds = %for.body.73
  %78 = load i64, i64* %ybit, align 8
  %79 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %79 to i64
  %arrayidx80 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom79
  %80 = load i64, i64* %arrayidx80, align 8
  %mul = mul i64 %78, %80
  %81 = load i64, i64* %z, align 8
  %add81 = add i64 %81, %mul
  store i64 %add81, i64* %z, align 8
  br label %for.inc.82

for.inc.82:                                       ; preds = %if.end.78
  %82 = load i32, i32* %k, align 4
  %inc83 = add i32 %82, 1
  store i32 %inc83, i32* %k, align 4
  br label %for.cond.71

for.end.84:                                       ; preds = %for.cond.71
  %83 = load i64, i64* %z, align 8
  %84 = load i64, i64* %i, align 8
  %inc85 = add i64 %84, 1
  store i64 %inc85, i64* %i, align 8
  %85 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %85, i32 0, i32 5
  %86 = load i64*, i64** %data86, align 8
  %arrayidx87 = getelementptr i64, i64* %86, i64 %84
  store i64 %83, i64* %arrayidx87, align 8
  br label %for.cond.88

for.cond.88:                                      ; preds = %for.inc.109, %for.end.84
  %87 = load i64, i64* %i, align 8
  %88 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len89 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %88, i32 0, i32 3
  %89 = load i64, i64* %len89, align 8
  %cmp90 = icmp slt i64 %87, %89
  br i1 %cmp90, label %for.body.91, label %for.end.111

for.body.91:                                      ; preds = %for.cond.88
  %90 = load i64, i64* %i, align 8
  %91 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 5
  %92 = load i64*, i64** %data92, align 8
  %arrayidx93 = getelementptr i64, i64* %92, i64 %90
  %93 = load i64, i64* %arrayidx93, align 8
  store i64 %93, i64* %y, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.94

for.cond.94:                                      ; preds = %for.inc.102, %for.body.91
  %94 = load i32, i32* %k, align 4
  %cmp95 = icmp slt i32 %94, 19
  br i1 %cmp95, label %for.body.96, label %for.end.104

for.body.96:                                      ; preds = %for.cond.94
  %95 = load i64, i64* %y, align 8
  %rem97 = urem i64 %95, 10
  store i64 %rem97, i64* %ybit, align 8
  %96 = load i64, i64* %y, align 8
  %div98 = udiv i64 %96, 10
  store i64 %div98, i64* %y, align 8
  %97 = load i64, i64* %ybit, align 8
  %cmp99 = icmp ugt i64 %97, 1
  br i1 %cmp99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %for.body.96
  br label %invalid_operation

if.end.101:                                       ; preds = %for.body.96
  br label %for.inc.102

for.inc.102:                                      ; preds = %if.end.101
  %98 = load i32, i32* %k, align 4
  %inc103 = add i32 %98, 1
  store i32 %inc103, i32* %k, align 4
  br label %for.cond.94

for.end.104:                                      ; preds = %for.cond.94
  %99 = load i64, i64* %i, align 8
  %100 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %100, i32 0, i32 5
  %101 = load i64*, i64** %data105, align 8
  %arrayidx106 = getelementptr i64, i64* %101, i64 %99
  %102 = load i64, i64* %arrayidx106, align 8
  %103 = load i64, i64* %i, align 8
  %104 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data107 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %104, i32 0, i32 5
  %105 = load i64*, i64** %data107, align 8
  %arrayidx108 = getelementptr i64, i64* %105, i64 %103
  store i64 %102, i64* %arrayidx108, align 8
  br label %for.inc.109

for.inc.109:                                      ; preds = %for.end.104
  %106 = load i64, i64* %i, align 8
  %inc110 = add i64 %106, 1
  store i64 %inc110, i64* %i, align 8
  br label %for.cond.88

for.end.111:                                      ; preds = %for.cond.88
  %107 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %107)
  %108 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp112 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %108, i32 0, i32 1
  store i64 0, i64* %exp112, align 8
  %109 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data113 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %109, i32 0, i32 5
  %110 = load i64*, i64** %data113, align 8
  %111 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %111, i32 0, i32 3
  %112 = load i64, i64* %len114, align 8
  %call115 = call i64 @_mpd_real_size(i64* %110, i64 %112)
  %113 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len116 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %113, i32 0, i32 3
  store i64 %call115, i64* %len116, align 8
  %114 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %115 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len117 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %115, i32 0, i32 3
  %116 = load i64, i64* %len117, align 8
  %117 = load i32*, i32** %status.addr, align 8
  %call118 = call i32 @mpd_qresize(%struct.mpd_t* %114, i64 %116, i32* %117)
  %118 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %118)
  %119 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %120 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_cap(%struct.mpd_t* %119, %struct.mpd_context_t* %120)
  br label %return

invalid_operation:                                ; preds = %if.then.100, %if.then.77, %if.then.57, %if.then.33
  %121 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %122 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %121, i32 256, i32* %122)
  br label %return

return:                                           ; preds = %invalid_operation, %for.end.111, %if.then.19, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qabs(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.8

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end.4
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_qminus(%struct.mpd_t* %6, %struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %9)
  br label %if.end.8

if.else:                                          ; preds = %if.end.4
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  call void @mpd_qplus(%struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_context_t* %12, i32* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.3, %if.else, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qminus(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_iszero(%struct.mpd_t* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.4
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 6
  %7 = load i32, i32* %round, align 4
  %cmp = icmp ne i32 %7, 3
  br i1 %cmp, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qcopy_abs(%struct.mpd_t* %8, %struct.mpd_t* %9, i32* %10)
  br label %if.end.10

if.else:                                          ; preds = %land.lhs.true, %if.end.4
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call9 = call i32 @mpd_qcopy_negate(%struct.mpd_t* %11, %struct.mpd_t* %12, i32* %13)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.7
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %14, %struct.mpd_context_t* %15, i32* %16)
  br label %return

return:                                           ; preds = %if.end.10, %if.then.3
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qplus(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_iszero(%struct.mpd_t* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.4
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 6
  %7 = load i32, i32* %round, align 4
  %cmp = icmp ne i32 %7, 3
  br i1 %cmp, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qcopy_abs(%struct.mpd_t* %8, %struct.mpd_t* %9, i32* %10)
  br label %if.end.10

if.else:                                          ; preds = %land.lhs.true, %if.end.4
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call9 = call i32 @mpd_qcopy(%struct.mpd_t* %11, %struct.mpd_t* %12, i32* %13)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.7
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %14, %struct.mpd_context_t* %15, i32* %16)
  br label %return

return:                                           ; preds = %if.end.10, %if.then.3
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.7

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call6 = call zeroext i8 @mpd_sign(%struct.mpd_t* %10)
  %11 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub_inf(%struct.mpd_t* %7, %struct.mpd_t* %8, %struct.mpd_t* %9, i8 zeroext %call6, i32* %11)
  br label %return

if.end.7:                                         ; preds = %lor.lhs.false
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call8 = call zeroext i8 @mpd_sign(%struct.mpd_t* %15)
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub(%struct.mpd_t* %12, %struct.mpd_t* %13, %struct.mpd_t* %14, i8 zeroext %call8, %struct.mpd_context_t* %16, i32* %17)
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %18, %struct.mpd_context_t* %19, i32* %20)
  br label %return

return:                                           ; preds = %if.end.7, %if.end, %if.then.5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qaddsub_inf(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, i8 zeroext %sign_b, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %sign_b.addr = alloca i8, align 1
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i8 %sign_b, i8* %sign_b.addr, align 1
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv = zext i8 %call1 to i32
  %2 = load i8, i8* %sign_b.addr, align 1
  %conv2 = zext i8 %2 to i32
  %cmp = icmp ne i32 %conv, %conv2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isinfinite(%struct.mpd_t* %3)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %land.lhs.true
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %4, i32 256, i32* %5)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call zeroext i8 @mpd_sign(%struct.mpd_t* %7)
  call void @mpd_setspecial(%struct.mpd_t* %6, i8 zeroext %call7, i8 zeroext 2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  br label %return

if.end.8:                                         ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i8, i8* %sign_b.addr, align 1
  call void @mpd_setspecial(%struct.mpd_t* %8, i8 zeroext %9, i8 zeroext 2)
  br label %return

return:                                           ; preds = %if.end.8, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qaddsub(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, i8 zeroext %sign_b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %sign_b.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %big = alloca %struct.mpd_t*, align 8
  %small = alloca %struct.mpd_t*, align 8
  %big_aligned_data = alloca [64 x i64], align 16
  %big_aligned = alloca %struct.mpd_t, align 8
  %tiny_data = alloca [1 x i64], align 8
  %tiny = alloca %struct.mpd_t, align 8
  %carry = alloca i64, align 8
  %newsize = alloca i64, align 8
  %shift = alloca i64, align 8
  %exp8 = alloca i64, align 8
  %i = alloca i64, align 8
  %swap = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i8 %sign_b, i8* %sign_b.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %big_aligned, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %big_aligned_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = bitcast [1 x i64]* %tiny_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @_mpd_qaddsub.tiny_data to i8*), i64 8, i32 8, i1 false)
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 0
  store i8 -112, i8* %flags1, align 1
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 1
  store i64 0, i64* %exp2, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 2
  store i64 1, i64* %digits3, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 3
  store i64 1, i64* %len4, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 4
  store i64 1, i64* %alloc5, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 5
  %arraydecay7 = getelementptr inbounds [1 x i64], [1 x i64]* %tiny_data, i32 0, i32 0
  store i64* %arraydecay7, i64** %data6, align 8
  store i32 0, i32* %swap, align 4
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %big, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %2, %struct.mpd_t** %small, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %exp9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp9, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %exp10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  %6 = load i64, i64* %exp10, align 8
  %cmp = icmp ne i64 %4, %6
  br i1 %cmp, label %if.then, label %if.end.42

if.then:                                          ; preds = %entry
  %7 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %exp11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp11, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %exp12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 1
  %10 = load i64, i64* %exp12, align 8
  %cmp13 = icmp sgt i64 %8, %10
  br i1 %cmp13, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then
  call void @_mpd_ptrswap(%struct.mpd_t** %big, %struct.mpd_t** %small)
  %11 = load i32, i32* %swap, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %swap, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  %12 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %12)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.41, label %if.then.15

if.then.15:                                       ; preds = %if.end
  %13 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 1
  %14 = load i64, i64* %exp16, align 8
  %sub = sub i64 %14, 1
  store i64 %sub, i64* %exp8, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %digits17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 2
  %16 = load i64, i64* %digits17, align 8
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 0
  %18 = load i64, i64* %prec, align 8
  %cmp18 = icmp sgt i64 %16, %18
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.15
  br label %cond.end

cond.false:                                       ; preds = %if.then.15
  %19 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %digits19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 2
  %20 = load i64, i64* %digits19, align 8
  %21 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec20 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %21, i32 0, i32 0
  %22 = load i64, i64* %prec20, align 8
  %sub21 = sub i64 %20, %22
  %sub22 = sub i64 %sub21, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub22, %cond.false ]
  %23 = load i64, i64* %exp8, align 8
  %add = add i64 %23, %cond
  store i64 %add, i64* %exp8, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %call23 = call i64 @mpd_adjexp(%struct.mpd_t* %24)
  %25 = load i64, i64* %exp8, align 8
  %cmp24 = icmp slt i64 %call23, %25
  br i1 %cmp24, label %if.then.25, label %if.end.33

if.then.25:                                       ; preds = %cond.end
  %26 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %tiny, %struct.mpd_t* %26)
  %27 = load i64, i64* %exp8, align 8
  %exp26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 1
  store i64 %27, i64* %exp26, align 8
  %digits27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 2
  store i64 1, i64* %digits27, align 8
  %len28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 3
  store i64 1, i64* %len28, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %call29 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %28)
  %tobool30 = icmp ne i32 %call29, 0
  %cond31 = select i1 %tobool30, i32 0, i32 1
  %conv = sext i32 %cond31 to i64
  %data32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 5
  %29 = load i64*, i64** %data32, align 8
  %arrayidx = getelementptr i64, i64* %29, i64 0
  store i64 %conv, i64* %arrayidx, align 8
  store %struct.mpd_t* %tiny, %struct.mpd_t** %small, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.25, %cond.end
  %30 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %exp34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 1
  %31 = load i64, i64* %exp34, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %exp35 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 1
  %33 = load i64, i64* %exp35, align 8
  %sub36 = sub i64 %31, %33
  store i64 %sub36, i64* %shift, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %35 = load i64, i64* %shift, align 8
  %36 = load i32*, i32** %status.addr, align 8
  %call37 = call i32 @mpd_qshiftl(%struct.mpd_t* %big_aligned, %struct.mpd_t* %34, i64 %35, i32* %36)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.end.33
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %38 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %37, i32 512, i32* %38)
  br label %finish

if.end.40:                                        ; preds = %if.end.33
  store %struct.mpd_t* %big_aligned, %struct.mpd_t** %big, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %entry
  %39 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %exp43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %39, i32 0, i32 1
  %40 = load i64, i64* %exp43, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 1
  store i64 %40, i64* %exp44, align 8
  %42 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %42, i32 0, i32 3
  %43 = load i64, i64* %len45, align 8
  %44 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %44, i32 0, i32 3
  %45 = load i64, i64* %len46, align 8
  %cmp47 = icmp slt i64 %43, %45
  br i1 %cmp47, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %if.end.42
  call void @_mpd_ptrswap(%struct.mpd_t** %big, %struct.mpd_t** %small)
  %46 = load i32, i32* %swap, align 4
  %inc50 = add i32 %46, 1
  store i32 %inc50, i32* %swap, align 4
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %if.end.42
  %47 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len52 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %47, i32 0, i32 3
  %48 = load i64, i64* %len52, align 8
  store i64 %48, i64* %newsize, align 8
  %49 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %50 = load i64, i64* %newsize, align 8
  %51 = load i32*, i32** %status.addr, align 8
  %call53 = call i32 @mpd_qresize(%struct.mpd_t* %49, i64 %50, i32* %51)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.end.51
  br label %finish

if.end.56:                                        ; preds = %if.end.51
  %52 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call57 = call zeroext i8 @mpd_sign(%struct.mpd_t* %52)
  %conv58 = zext i8 %call57 to i32
  %53 = load i8, i8* %sign_b.addr, align 1
  %conv59 = zext i8 %53 to i32
  %cmp60 = icmp eq i32 %conv58, %conv59
  br i1 %cmp60, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %if.end.56
  %54 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data63 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %54, i32 0, i32 5
  %55 = load i64*, i64** %data63, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data64 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 5
  %57 = load i64*, i64** %data64, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data65 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %58, i32 0, i32 5
  %59 = load i64*, i64** %data65, align 8
  %60 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len66 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %60, i32 0, i32 3
  %61 = load i64, i64* %len66, align 8
  %62 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len67 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %62, i32 0, i32 3
  %63 = load i64, i64* %len67, align 8
  %call68 = call i64 @_mpd_baseadd(i64* %55, i64* %57, i64* %59, i64 %61, i64 %63)
  store i64 %call68, i64* %carry, align 8
  %64 = load i64, i64* %carry, align 8
  %tobool69 = icmp ne i64 %64, 0
  br i1 %tobool69, label %if.then.70, label %if.end.80

if.then.70:                                       ; preds = %if.then.62
  %65 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len71 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %65, i32 0, i32 3
  %66 = load i64, i64* %len71, align 8
  %add72 = add i64 %66, 1
  store i64 %add72, i64* %newsize, align 8
  %67 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %68 = load i64, i64* %newsize, align 8
  %69 = load i32*, i32** %status.addr, align 8
  %call73 = call i32 @mpd_qresize(%struct.mpd_t* %67, i64 %68, i32* %69)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %if.then.70
  br label %finish

if.end.76:                                        ; preds = %if.then.70
  %70 = load i64, i64* %carry, align 8
  %71 = load i64, i64* %newsize, align 8
  %sub77 = sub i64 %71, 1
  %72 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data78 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %72, i32 0, i32 5
  %73 = load i64*, i64** %data78, align 8
  %arrayidx79 = getelementptr i64, i64* %73, i64 %sub77
  store i64 %70, i64* %arrayidx79, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.76, %if.then.62
  %74 = load i64, i64* %newsize, align 8
  %75 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len81 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %75, i32 0, i32 3
  store i64 %74, i64* %len81, align 8
  %76 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %77 = load i8, i8* %sign_b.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %76, i8 zeroext %77)
  br label %if.end.136

if.else:                                          ; preds = %if.end.56
  %78 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len82 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %78, i32 0, i32 3
  %79 = load i64, i64* %len82, align 8
  %80 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len83 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %80, i32 0, i32 3
  %81 = load i64, i64* %len83, align 8
  %cmp84 = icmp eq i64 %79, %81
  br i1 %cmp84, label %if.then.86, label %if.end.108

if.then.86:                                       ; preds = %if.else
  %82 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len87 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %82, i32 0, i32 3
  %83 = load i64, i64* %len87, align 8
  %sub88 = sub i64 %83, 1
  store i64 %sub88, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.86
  %84 = load i64, i64* %i, align 8
  %cmp89 = icmp sge i64 %84, 0
  br i1 %cmp89, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %85 = load i64, i64* %i, align 8
  %86 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data91 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %86, i32 0, i32 5
  %87 = load i64*, i64** %data91, align 8
  %arrayidx92 = getelementptr i64, i64* %87, i64 %85
  %88 = load i64, i64* %arrayidx92, align 8
  %89 = load i64, i64* %i, align 8
  %90 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data93 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %90, i32 0, i32 5
  %91 = load i64*, i64** %data93, align 8
  %arrayidx94 = getelementptr i64, i64* %91, i64 %89
  %92 = load i64, i64* %arrayidx94, align 8
  %cmp95 = icmp ne i64 %88, %92
  br i1 %cmp95, label %if.then.97, label %if.end.107

if.then.97:                                       ; preds = %for.body
  %93 = load i64, i64* %i, align 8
  %94 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data98 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %94, i32 0, i32 5
  %95 = load i64*, i64** %data98, align 8
  %arrayidx99 = getelementptr i64, i64* %95, i64 %93
  %96 = load i64, i64* %arrayidx99, align 8
  %97 = load i64, i64* %i, align 8
  %98 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data100 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %98, i32 0, i32 5
  %99 = load i64*, i64** %data100, align 8
  %arrayidx101 = getelementptr i64, i64* %99, i64 %97
  %100 = load i64, i64* %arrayidx101, align 8
  %cmp102 = icmp ult i64 %96, %100
  br i1 %cmp102, label %if.then.104, label %if.end.106

if.then.104:                                      ; preds = %if.then.97
  call void @_mpd_ptrswap(%struct.mpd_t** %big, %struct.mpd_t** %small)
  %101 = load i32, i32* %swap, align 4
  %inc105 = add i32 %101, 1
  store i32 %inc105, i32* %swap, align 4
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.104, %if.then.97
  br label %for.end

if.end.107:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.107
  %102 = load i64, i64* %i, align 8
  %dec = add i64 %102, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.106, %for.cond
  br label %if.end.108

if.end.108:                                       ; preds = %for.end, %if.else
  %103 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data109 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %103, i32 0, i32 5
  %104 = load i64*, i64** %data109, align 8
  %105 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data110 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %105, i32 0, i32 5
  %106 = load i64*, i64** %data110, align 8
  %107 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data111 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %107, i32 0, i32 5
  %108 = load i64*, i64** %data111, align 8
  %109 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len112 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %109, i32 0, i32 3
  %110 = load i64, i64* %len112, align 8
  %111 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len113 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %111, i32 0, i32 3
  %112 = load i64, i64* %len113, align 8
  call void @_mpd_basesub(i64* %104, i64* %106, i64* %108, i64 %110, i64 %112)
  %113 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %113, i32 0, i32 5
  %114 = load i64*, i64** %data114, align 8
  %115 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len115 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %115, i32 0, i32 3
  %116 = load i64, i64* %len115, align 8
  %call116 = call i64 @_mpd_real_size(i64* %114, i64 %116)
  store i64 %call116, i64* %newsize, align 8
  %117 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %118 = load i64, i64* %newsize, align 8
  %119 = load i32*, i32** %status.addr, align 8
  %call117 = call i32 @mpd_qresize(%struct.mpd_t* %117, i64 %118, i32* %119)
  %120 = load i64, i64* %newsize, align 8
  %121 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len118 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %121, i32 0, i32 3
  store i64 %120, i64* %len118, align 8
  %122 = load i32, i32* %swap, align 4
  %and = and i32 %122, 1
  %tobool119 = icmp ne i32 %and, 0
  br i1 %tobool119, label %cond.true.120, label %cond.false.122

cond.true.120:                                    ; preds = %if.end.108
  %123 = load i8, i8* %sign_b.addr, align 1
  %conv121 = zext i8 %123 to i32
  br label %cond.end.125

cond.false.122:                                   ; preds = %if.end.108
  %124 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call123 = call zeroext i8 @mpd_sign(%struct.mpd_t* %124)
  %conv124 = zext i8 %call123 to i32
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.122, %cond.true.120
  %cond126 = phi i32 [ %conv121, %cond.true.120 ], [ %conv124, %cond.false.122 ]
  %conv127 = trunc i32 %cond126 to i8
  store i8 %conv127, i8* %sign_b.addr, align 1
  %125 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %126 = load i8, i8* %sign_b.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %125, i8 zeroext %126)
  %127 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call128 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %127)
  %tobool129 = icmp ne i32 %call128, 0
  br i1 %tobool129, label %if.then.130, label %if.end.135

if.then.130:                                      ; preds = %cond.end.125
  %128 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_positive(%struct.mpd_t* %128)
  %129 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %129, i32 0, i32 6
  %130 = load i32, i32* %round, align 4
  %cmp131 = icmp eq i32 %130, 3
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %if.then.130
  %131 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_negative(%struct.mpd_t* %131)
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.133, %if.then.130
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %cond.end.125
  br label %if.end.136

if.end.136:                                       ; preds = %if.end.135, %if.end.80
  %132 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %132)
  br label %finish

finish:                                           ; preds = %if.end.136, %if.then.75, %if.then.55, %if.then.39
  call void @mpd_del(%struct.mpd_t* %big_aligned)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.8

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call6 = call zeroext i8 @mpd_sign(%struct.mpd_t* %10)
  %tobool7 = icmp ne i8 %call6, 0
  %lnot = xor i1 %tobool7, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = trunc i32 %lnot.ext to i8
  %11 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub_inf(%struct.mpd_t* %7, %struct.mpd_t* %8, %struct.mpd_t* %9, i8 zeroext %conv, i32* %11)
  br label %return

if.end.8:                                         ; preds = %lor.lhs.false
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call9 = call zeroext i8 @mpd_sign(%struct.mpd_t* %15)
  %tobool10 = icmp ne i8 %call9, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot.ext12 = zext i1 %lnot11 to i32
  %conv13 = trunc i32 %lnot.ext12 to i8
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub(%struct.mpd_t* %12, %struct.mpd_t* %13, %struct.mpd_t* %14, i8 zeroext %conv13, %struct.mpd_context_t* %16, i32* %17)
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %18, %struct.mpd_context_t* %19, i32* %20)
  br label %return

return:                                           ; preds = %if.end.8, %if.end, %if.then.5
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_ssize(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

declare hidden void @mpd_maxcontext(%struct.mpd_context_t*) #3

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_uint(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_ssize(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_uint(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_i32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_u32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_i64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qadd_u64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_i32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_u32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_i64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsub_u64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv(%struct.mpd_t* %q, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %q.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdiv(i32 1, %struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qdiv(i32 %action, %struct.mpd_t* %q, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %action.addr = alloca i32, align 4
  %q.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %aligned_data = alloca [64 x i64], align 16
  %aligned = alloca %struct.mpd_t, align 8
  %ld = alloca i64, align 8
  %shift = alloca i64, align 8
  %exp1 = alloca i64, align 8
  %tz = alloca i64, align 8
  %newsize = alloca i64, align 8
  %ideal_exp = alloca i64, align 8
  %rem = alloca i64, align 8
  %sign_a = alloca i8, align 1
  %sign_b = alloca i8, align 1
  %ret = alloca i32, align 4
  %r_data = alloca [64 x i64], align 16
  %r = alloca %struct.mpd_t, align 8
  store i32 %action, i32* %action.addr, align 4
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %aligned_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  store i8 %call, i8* %sign_a, align 1
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call2 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  store i8 %call2, i8* %sign_b, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call3 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end.9

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call6 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %7, i32* %8)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %12 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdiv_inf(%struct.mpd_t* %9, %struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_context_t* %12, i32* %13)
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false
  %14 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call10 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %14)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.19

if.then.12:                                       ; preds = %if.end.9
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %15)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.then.12
  %16 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %16, i32 16, i32* %17)
  br label %if.end.18

if.else:                                          ; preds = %if.then.12
  %18 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %19 = load i8, i8* %sign_a, align 1
  %conv = zext i8 %19 to i32
  %20 = load i8, i8* %sign_b, align 1
  %conv16 = zext i8 %20 to i32
  %xor = xor i32 %conv, %conv16
  %conv17 = trunc i32 %xor to i8
  call void @mpd_setspecial(%struct.mpd_t* %18, i8 zeroext %conv17, i8 zeroext 2)
  %21 = load i32*, i32** %status.addr, align 8
  %22 = load i32, i32* %21, align 4
  %or = or i32 %22, 4
  store i32 %or, i32* %21, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.15
  br label %return

if.end.19:                                        ; preds = %if.end.9
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call20 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.29

if.then.22:                                       ; preds = %if.end.19
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 1
  %25 = load i64, i64* %exp23, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp24, align 8
  %sub = sub i64 %25, %27
  store i64 %sub, i64* %exp1, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %29 = load i8, i8* %sign_a, align 1
  %conv25 = zext i8 %29 to i32
  %30 = load i8, i8* %sign_b, align 1
  %conv26 = zext i8 %30 to i32
  %xor27 = xor i32 %conv25, %conv26
  %conv28 = trunc i32 %xor27 to i8
  %31 = load i64, i64* %exp1, align 8
  call void @_settriple(%struct.mpd_t* %28, i8 zeroext %conv28, i64 0, i64 %31)
  %32 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %33 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %34 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %32, %struct.mpd_context_t* %33, i32* %34)
  br label %return

if.end.29:                                        ; preds = %if.end.19
  %35 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %digits30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 2
  %36 = load i64, i64* %digits30, align 8
  %37 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits31 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 2
  %38 = load i64, i64* %digits31, align 8
  %sub32 = sub i64 %36, %38
  %39 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %39, i32 0, i32 0
  %40 = load i64, i64* %prec, align 8
  %add = add i64 %sub32, %40
  %add33 = add i64 %add, 1
  store i64 %add33, i64* %shift, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 1
  %42 = load i64, i64* %exp34, align 8
  %43 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp35 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %43, i32 0, i32 1
  %44 = load i64, i64* %exp35, align 8
  %sub36 = sub i64 %42, %44
  store i64 %sub36, i64* %ideal_exp, align 8
  %45 = load i64, i64* %ideal_exp, align 8
  %46 = load i64, i64* %shift, align 8
  %sub37 = sub i64 %45, %46
  store i64 %sub37, i64* %exp1, align 8
  %47 = load i64, i64* %shift, align 8
  %cmp = icmp sgt i64 %47, 0
  br i1 %cmp, label %if.then.39, label %if.else.44

if.then.39:                                       ; preds = %if.end.29
  %48 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %49 = load i64, i64* %shift, align 8
  %50 = load i32*, i32** %status.addr, align 8
  %call40 = call i32 @mpd_qshiftl(%struct.mpd_t* %aligned, %struct.mpd_t* %48, i64 %49, i32* %50)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %if.then.39
  %51 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %52 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %51, i32 512, i32* %52)
  br label %finish

if.end.43:                                        ; preds = %if.then.39
  store %struct.mpd_t* %aligned, %struct.mpd_t** %a.addr, align 8
  br label %if.end.54

if.else.44:                                       ; preds = %if.end.29
  %53 = load i64, i64* %shift, align 8
  %cmp45 = icmp slt i64 %53, 0
  br i1 %cmp45, label %if.then.47, label %if.end.53

if.then.47:                                       ; preds = %if.else.44
  %54 = load i64, i64* %shift, align 8
  %sub48 = sub i64 0, %54
  store i64 %sub48, i64* %shift, align 8
  %55 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %56 = load i64, i64* %shift, align 8
  %57 = load i32*, i32** %status.addr, align 8
  %call49 = call i32 @mpd_qshiftl(%struct.mpd_t* %aligned, %struct.mpd_t* %55, i64 %56, i32* %57)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %if.then.47
  %58 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %59 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %58, i32 512, i32* %59)
  br label %finish

if.end.52:                                        ; preds = %if.then.47
  store %struct.mpd_t* %aligned, %struct.mpd_t** %b.addr, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.else.44
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.end.43
  %60 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len55 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %60, i32 0, i32 3
  %61 = load i64, i64* %len55, align 8
  %62 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %62, i32 0, i32 3
  %63 = load i64, i64* %len56, align 8
  %sub57 = sub i64 %61, %63
  %add58 = add i64 %sub57, 1
  store i64 %add58, i64* %newsize, align 8
  %64 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %65 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp59 = icmp ne %struct.mpd_t* %64, %65
  br i1 %cmp59, label %land.lhs.true, label %lor.lhs.false.63

land.lhs.true:                                    ; preds = %if.end.54
  %66 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %67 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp61 = icmp ne %struct.mpd_t* %66, %67
  br i1 %cmp61, label %if.then.70, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %land.lhs.true, %if.end.54
  %68 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %69 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp64 = icmp eq %struct.mpd_t* %68, %69
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.75

land.lhs.true.66:                                 ; preds = %lor.lhs.false.63
  %70 = load i64, i64* %newsize, align 8
  %71 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len67 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %71, i32 0, i32 3
  %72 = load i64, i64* %len67, align 8
  %cmp68 = icmp sgt i64 %70, %72
  br i1 %cmp68, label %if.then.70, label %if.end.75

if.then.70:                                       ; preds = %land.lhs.true.66, %land.lhs.true
  %73 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %74 = load i64, i64* %newsize, align 8
  %75 = load i32*, i32** %status.addr, align 8
  %call71 = call i32 @mpd_qresize(%struct.mpd_t* %73, i64 %74, i32* %75)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %if.then.70
  %76 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %77 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %76, i32 512, i32* %77)
  br label %finish

if.end.74:                                        ; preds = %if.then.70
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %land.lhs.true.66, %lor.lhs.false.63
  %78 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len76 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %78, i32 0, i32 3
  %79 = load i64, i64* %len76, align 8
  %cmp77 = icmp eq i64 %79, 1
  br i1 %cmp77, label %if.then.79, label %if.else.85

if.then.79:                                       ; preds = %if.end.75
  %80 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data80 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %80, i32 0, i32 5
  %81 = load i64*, i64** %data80, align 8
  %82 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data81 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %82, i32 0, i32 5
  %83 = load i64*, i64** %data81, align 8
  %84 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len82 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %84, i32 0, i32 3
  %85 = load i64, i64* %len82, align 8
  %86 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data83 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %86, i32 0, i32 5
  %87 = load i64*, i64** %data83, align 8
  %arrayidx = getelementptr i64, i64* %87, i64 0
  %88 = load i64, i64* %arrayidx, align 8
  %call84 = call i64 @_mpd_shortdiv(i64* %81, i64* %83, i64 %85, i64 %88)
  store i64 %call84, i64* %rem, align 8
  br label %if.end.121

if.else.85:                                       ; preds = %if.end.75
  %89 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %89, i32 0, i32 3
  %90 = load i64, i64* %len86, align 8
  %cmp87 = icmp sle i64 %90, 1024
  br i1 %cmp87, label %if.then.89, label %if.else.101

if.then.89:                                       ; preds = %if.else.85
  %91 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data90 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 5
  %92 = load i64*, i64** %data90, align 8
  %93 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data91 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %93, i32 0, i32 5
  %94 = load i64*, i64** %data91, align 8
  %95 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %95, i32 0, i32 5
  %96 = load i64*, i64** %data92, align 8
  %97 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len93 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %97, i32 0, i32 3
  %98 = load i64, i64* %len93, align 8
  %99 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len94 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %99, i32 0, i32 3
  %100 = load i64, i64* %len94, align 8
  %call95 = call i32 @_mpd_basedivmod(i64* %92, i64* null, i64* %94, i64* %96, i64 %98, i64 %100)
  store i32 %call95, i32* %ret, align 4
  %101 = load i32, i32* %ret, align 4
  %cmp96 = icmp slt i32 %101, 0
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %if.then.89
  %102 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %103 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %102, i32 512, i32* %103)
  br label %finish

if.end.99:                                        ; preds = %if.then.89
  %104 = load i32, i32* %ret, align 4
  %conv100 = sext i32 %104 to i64
  store i64 %conv100, i64* %rem, align 8
  br label %if.end.120

if.else.101:                                      ; preds = %if.else.85
  %flags102 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 0
  store i8 48, i8* %flags102, align 1
  %exp103 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 1
  store i64 0, i64* %exp103, align 8
  %digits104 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 2
  store i64 0, i64* %digits104, align 8
  %len105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 3
  store i64 0, i64* %len105, align 8
  %alloc106 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 4
  store i64 64, i64* %alloc106, align 8
  %data107 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 5
  %arraydecay108 = getelementptr inbounds [64 x i64], [64 x i64]* %r_data, i32 0, i32 0
  store i64* %arraydecay108, i64** %data107, align 8
  %105 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %106 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %107 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %108 = load i32*, i32** %status.addr, align 8
  call void @_mpd_base_ndivmod(%struct.mpd_t* %105, %struct.mpd_t* %r, %struct.mpd_t* %106, %struct.mpd_t* %107, i32* %108)
  %109 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %call109 = call i32 @mpd_isspecial(%struct.mpd_t* %109)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then.114, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %if.else.101
  %call112 = call i32 @mpd_isspecial(%struct.mpd_t* %r)
  %tobool113 = icmp ne i32 %call112, 0
  br i1 %tobool113, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %lor.lhs.false.111, %if.else.101
  %110 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %110, i8 zeroext 0, i8 zeroext 4)
  call void @mpd_del(%struct.mpd_t* %r)
  br label %finish

if.end.115:                                       ; preds = %lor.lhs.false.111
  %call116 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %r)
  %tobool117 = icmp ne i32 %call116, 0
  %lnot = xor i1 %tobool117, true
  %lnot.ext = zext i1 %lnot to i32
  %conv118 = sext i32 %lnot.ext to i64
  store i64 %conv118, i64* %rem, align 8
  call void @mpd_del(%struct.mpd_t* %r)
  %111 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %len119 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %111, i32 0, i32 3
  %112 = load i64, i64* %len119, align 8
  store i64 %112, i64* %newsize, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.115, %if.end.99
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.then.79
  %113 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data122 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %113, i32 0, i32 5
  %114 = load i64*, i64** %data122, align 8
  %115 = load i64, i64* %newsize, align 8
  %call123 = call i64 @_mpd_real_size(i64* %114, i64 %115)
  store i64 %call123, i64* %newsize, align 8
  %116 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %117 = load i64, i64* %newsize, align 8
  %118 = load i32*, i32** %status.addr, align 8
  %call124 = call i32 @mpd_qresize(%struct.mpd_t* %116, i64 %117, i32* %118)
  %119 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %120 = load i8, i8* %sign_a, align 1
  %conv125 = zext i8 %120 to i32
  %121 = load i8, i8* %sign_b, align 1
  %conv126 = zext i8 %121 to i32
  %xor127 = xor i32 %conv125, %conv126
  %conv128 = trunc i32 %xor127 to i8
  call void @mpd_set_flags(%struct.mpd_t* %119, i8 zeroext %conv128)
  %122 = load i64, i64* %newsize, align 8
  %123 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %len129 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %123, i32 0, i32 3
  store i64 %122, i64* %len129, align 8
  %124 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %124)
  %125 = load i64, i64* %ideal_exp, align 8
  %126 = load i64, i64* %exp1, align 8
  %sub130 = sub i64 %125, %126
  store i64 %sub130, i64* %shift, align 8
  %127 = load i64, i64* %rem, align 8
  %tobool131 = icmp ne i64 %127, 0
  br i1 %tobool131, label %if.then.132, label %if.else.146

if.then.132:                                      ; preds = %if.end.121
  %128 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data133 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %128, i32 0, i32 5
  %129 = load i64*, i64** %data133, align 8
  %arrayidx134 = getelementptr i64, i64* %129, i64 0
  %130 = load i64, i64* %arrayidx134, align 8
  %call135 = call i64 @mpd_lsd(i64 %130)
  store i64 %call135, i64* %ld, align 8
  %131 = load i64, i64* %ld, align 8
  %cmp136 = icmp eq i64 %131, 0
  br i1 %cmp136, label %if.then.141, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %if.then.132
  %132 = load i64, i64* %ld, align 8
  %cmp139 = icmp eq i64 %132, 5
  br i1 %cmp139, label %if.then.141, label %if.end.145

if.then.141:                                      ; preds = %lor.lhs.false.138, %if.then.132
  %133 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data142 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %133, i32 0, i32 5
  %134 = load i64*, i64** %data142, align 8
  %arrayidx143 = getelementptr i64, i64* %134, i64 0
  %135 = load i64, i64* %arrayidx143, align 8
  %add144 = add i64 %135, 1
  store i64 %add144, i64* %arrayidx143, align 8
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.141, %lor.lhs.false.138
  br label %if.end.159

if.else.146:                                      ; preds = %if.end.121
  %136 = load i32, i32* %action.addr, align 4
  %cmp147 = icmp eq i32 %136, 1
  br i1 %cmp147, label %land.lhs.true.149, label %if.end.158

land.lhs.true.149:                                ; preds = %if.else.146
  %137 = load i64, i64* %shift, align 8
  %cmp150 = icmp sgt i64 %137, 0
  br i1 %cmp150, label %if.then.152, label %if.end.158

if.then.152:                                      ; preds = %land.lhs.true.149
  %138 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %call153 = call i64 @mpd_trail_zeros(%struct.mpd_t* %138)
  store i64 %call153, i64* %tz, align 8
  %139 = load i64, i64* %tz, align 8
  %140 = load i64, i64* %shift, align 8
  %cmp154 = icmp sgt i64 %139, %140
  br i1 %cmp154, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.152
  %141 = load i64, i64* %shift, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.152
  %142 = load i64, i64* %tz, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %141, %cond.true ], [ %142, %cond.false ]
  store i64 %cond, i64* %shift, align 8
  %143 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %144 = load i64, i64* %shift, align 8
  %call156 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %143, i64 %144)
  %145 = load i64, i64* %shift, align 8
  %146 = load i64, i64* %exp1, align 8
  %add157 = add i64 %146, %145
  store i64 %add157, i64* %exp1, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %cond.end, %land.lhs.true.149, %if.else.146
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %if.end.145
  %147 = load i64, i64* %exp1, align 8
  %148 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %exp160 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %148, i32 0, i32 1
  store i64 %147, i64* %exp160, align 8
  br label %finish

finish:                                           ; preds = %if.end.159, %if.then.114, %if.then.98, %if.then.73, %if.then.51, %if.then.42
  call void @mpd_del(%struct.mpd_t* %aligned)
  %149 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %150 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %151 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %149, %struct.mpd_context_t* %150, i32* %151)
  br label %return

return:                                           ; preds = %finish, %if.then.22, %if.end.18, %if.end, %if.then.8
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdivmod(%struct.mpd_t* %q, %struct.mpd_t* %r, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %q.addr = alloca %struct.mpd_t*, align 8
  %r.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  %conv = zext i8 %call to i32
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv2 = zext i8 %call1 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %sign, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then, label %if.end.27

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %7, i32* %8)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcopy(%struct.mpd_t* %9, %struct.mpd_t* %10, i32* %11)
  br label %return

if.end:                                           ; preds = %if.then
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call11 = call i32 @mpd_isinfinite(%struct.mpd_t* %12)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %if.end
  %13 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call14 = call i32 @mpd_isinfinite(%struct.mpd_t* %13)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %if.then.13
  %14 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %14, i8 zeroext 0, i8 zeroext 4)
  br label %if.end.17

if.else:                                          ; preds = %if.then.13
  %15 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %16 = load i8, i8* %sign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %15, i8 zeroext %16, i8 zeroext 2)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.16
  %17 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %17, i8 zeroext 0, i8 zeroext 4)
  %18 = load i32*, i32** %status.addr, align 8
  %19 = load i32, i32* %18, align 4
  %or = or i32 %19, 256
  store i32 %or, i32* %18, align 4
  br label %return

if.end.18:                                        ; preds = %if.end
  %20 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call19 = call i32 @mpd_isinfinite(%struct.mpd_t* %20)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.26

if.then.21:                                       ; preds = %if.end.18
  %21 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  %call22 = call i32 @mpd_qcopy(%struct.mpd_t* %21, %struct.mpd_t* %22, i32* %23)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %if.then.21
  %24 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %25 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %24, i32 512, i32* %25)
  br label %return

if.end.25:                                        ; preds = %if.then.21
  %26 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %27 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %28 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %26, %struct.mpd_context_t* %27, i32* %28)
  %29 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %30 = load i8, i8* %sign, align 1
  call void @_settriple(%struct.mpd_t* %29, i8 zeroext %30, i64 0, i64 0)
  br label %return

if.end.26:                                        ; preds = %if.end.18
  call void @abort() #8
  unreachable

if.end.27:                                        ; preds = %lor.lhs.false
  %31 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call28 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %31)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then.30, label %if.end.38

if.then.30:                                       ; preds = %if.end.27
  %32 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call31 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %32)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.33, label %if.else.35

if.then.33:                                       ; preds = %if.then.30
  %33 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %33, i8 zeroext 0, i8 zeroext 4)
  %34 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %34, i8 zeroext 0, i8 zeroext 4)
  %35 = load i32*, i32** %status.addr, align 8
  %36 = load i32, i32* %35, align 4
  %or34 = or i32 %36, 16
  store i32 %or34, i32* %35, align 4
  br label %if.end.37

if.else.35:                                       ; preds = %if.then.30
  %37 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %38 = load i8, i8* %sign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %37, i8 zeroext %38, i8 zeroext 2)
  %39 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %39, i8 zeroext 0, i8 zeroext 4)
  %40 = load i32*, i32** %status.addr, align 8
  %41 = load i32, i32* %40, align 4
  %or36 = or i32 %41, 260
  store i32 %or36, i32* %40, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.35, %if.then.33
  br label %return

if.end.38:                                        ; preds = %if.end.27
  %42 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %43 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %44 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %45 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %46 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %47 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdivmod(%struct.mpd_t* %42, %struct.mpd_t* %43, %struct.mpd_t* %44, %struct.mpd_t* %45, %struct.mpd_context_t* %46, i32* %47)
  %48 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %49 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %50 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %48, %struct.mpd_context_t* %49, i32* %50)
  %51 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %52 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %53 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %51, %struct.mpd_context_t* %52, i32* %53)
  br label %return

return:                                           ; preds = %if.end.38, %if.end.37, %if.end.25, %if.then.24, %if.end.17, %if.then.9
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() #5

; Function Attrs: nounwind uwtable
define internal void @_mpd_qdivmod(%struct.mpd_t* %q, %struct.mpd_t* %r, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %q.addr = alloca %struct.mpd_t*, align 8
  %r.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %aligned_data = alloca [64 x i64], align 16
  %aligned = alloca %struct.mpd_t, align 8
  %qsize = alloca i64, align 8
  %rsize = alloca i64, align 8
  %ideal_exp = alloca i64, align 8
  %expdiff = alloca i64, align 8
  %shift = alloca i64, align 8
  %sign_a = alloca i8, align 1
  %sign_ab = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aligned, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %aligned_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  store i8 %call, i8* %sign_a, align 1
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv = zext i8 %call1 to i32
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call2 = call zeroext i8 @mpd_sign(%struct.mpd_t* %2)
  %conv3 = zext i8 %call2 to i32
  %xor = xor i32 %conv, %conv3
  %conv4 = trunc i32 %xor to i8
  store i8 %conv4, i8* %sign_ab, align 1
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp5, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  %6 = load i64, i64* %exp6, align 8
  %cmp = icmp sgt i64 %4, %6
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp8, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 1
  %10 = load i64, i64* %exp9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %10, %cond.false ]
  store i64 %cond, i64* %ideal_exp, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call10 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %11)
  %tobool = icmp ne i32 %call10, 0
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %cond.end
  %12 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call11 = call i32 @mpd_qcopy(%struct.mpd_t* %12, %struct.mpd_t* %13, i32* %14)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end, label %if.then.13

if.then.13:                                       ; preds = %if.then
  br label %nanresult

if.end:                                           ; preds = %if.then
  %15 = load i64, i64* %ideal_exp, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 1
  store i64 %15, i64* %exp14, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %18 = load i8, i8* %sign_ab, align 1
  call void @_settriple(%struct.mpd_t* %17, i8 zeroext %18, i64 0, i64 0)
  br label %return

if.end.15:                                        ; preds = %cond.end
  %19 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call16 = call i64 @mpd_adjexp(%struct.mpd_t* %19)
  %20 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call17 = call i64 @mpd_adjexp(%struct.mpd_t* %20)
  %sub = sub i64 %call16, %call17
  store i64 %sub, i64* %expdiff, align 8
  %21 = load i64, i64* %expdiff, align 8
  %cmp18 = icmp slt i64 %21, 0
  br i1 %cmp18, label %if.then.20, label %if.end.39

if.then.20:                                       ; preds = %if.end.15
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  %23 = load i64, i64* %exp21, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 1
  %25 = load i64, i64* %exp22, align 8
  %cmp23 = icmp sgt i64 %23, %25
  br i1 %cmp23, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.20
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp26, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 1
  %29 = load i64, i64* %exp27, align 8
  %sub28 = sub i64 %27, %29
  store i64 %sub28, i64* %shift, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %32 = load i64, i64* %shift, align 8
  %33 = load i32*, i32** %status.addr, align 8
  %call29 = call i32 @mpd_qshiftl(%struct.mpd_t* %30, %struct.mpd_t* %31, i64 %32, i32* %33)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.then.25
  br label %nanresult

if.end.32:                                        ; preds = %if.then.25
  %34 = load i64, i64* %ideal_exp, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %exp33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 1
  store i64 %34, i64* %exp33, align 8
  br label %if.end.38

if.else:                                          ; preds = %if.then.20
  %36 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %37 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %38 = load i32*, i32** %status.addr, align 8
  %call34 = call i32 @mpd_qcopy(%struct.mpd_t* %36, %struct.mpd_t* %37, i32* %38)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.37, label %if.then.36

if.then.36:                                       ; preds = %if.else
  br label %nanresult

if.end.37:                                        ; preds = %if.else
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.32
  %39 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %40 = load i8, i8* %sign_ab, align 1
  call void @_settriple(%struct.mpd_t* %39, i8 zeroext %40, i64 0, i64 0)
  br label %return

if.end.39:                                        ; preds = %if.end.15
  %41 = load i64, i64* %expdiff, align 8
  %42 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %42, i32 0, i32 0
  %43 = load i64, i64* %prec, align 8
  %cmp40 = icmp sgt i64 %41, %43
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.39
  %44 = load i32*, i32** %status.addr, align 8
  %45 = load i32, i32* %44, align 4
  %or = or i32 %45, 8
  store i32 %or, i32* %44, align 4
  br label %nanresult

if.end.43:                                        ; preds = %if.end.39
  %46 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %46, i32 0, i32 1
  %47 = load i64, i64* %exp44, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 1
  %49 = load i64, i64* %exp45, align 8
  %cmp46 = icmp ne i64 %47, %49
  br i1 %cmp46, label %if.then.48, label %if.end.66

if.then.48:                                       ; preds = %if.end.43
  %50 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp49 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %50, i32 0, i32 1
  %51 = load i64, i64* %exp49, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %52, i32 0, i32 1
  %53 = load i64, i64* %exp50, align 8
  %sub51 = sub i64 %51, %53
  store i64 %sub51, i64* %shift, align 8
  %54 = load i64, i64* %shift, align 8
  %cmp52 = icmp sgt i64 %54, 0
  br i1 %cmp52, label %if.then.54, label %if.else.59

if.then.54:                                       ; preds = %if.then.48
  %55 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %56 = load i64, i64* %shift, align 8
  %57 = load i32*, i32** %status.addr, align 8
  %call55 = call i32 @mpd_qshiftl(%struct.mpd_t* %aligned, %struct.mpd_t* %55, i64 %56, i32* %57)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %if.then.54
  br label %nanresult

if.end.58:                                        ; preds = %if.then.54
  store %struct.mpd_t* %aligned, %struct.mpd_t** %a.addr, align 8
  br label %if.end.65

if.else.59:                                       ; preds = %if.then.48
  %58 = load i64, i64* %shift, align 8
  %sub60 = sub i64 0, %58
  store i64 %sub60, i64* %shift, align 8
  %59 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %60 = load i64, i64* %shift, align 8
  %61 = load i32*, i32** %status.addr, align 8
  %call61 = call i32 @mpd_qshiftl(%struct.mpd_t* %aligned, %struct.mpd_t* %59, i64 %60, i32* %61)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %if.else.59
  br label %nanresult

if.end.64:                                        ; preds = %if.else.59
  store %struct.mpd_t* %aligned, %struct.mpd_t** %b.addr, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.58
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.end.43
  %62 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len67 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %62, i32 0, i32 3
  %63 = load i64, i64* %len67, align 8
  %64 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len68 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %64, i32 0, i32 3
  %65 = load i64, i64* %len68, align 8
  %sub69 = sub i64 %63, %65
  %add = add i64 %sub69, 1
  store i64 %add, i64* %qsize, align 8
  %66 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %67 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp70 = icmp eq %struct.mpd_t* %66, %67
  br i1 %cmp70, label %land.lhs.true, label %land.lhs.true.75

land.lhs.true:                                    ; preds = %if.end.66
  %68 = load i64, i64* %qsize, align 8
  %69 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len72 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %69, i32 0, i32 3
  %70 = load i64, i64* %len72, align 8
  %cmp73 = icmp slt i64 %68, %70
  br i1 %cmp73, label %if.end.87, label %land.lhs.true.75

land.lhs.true.75:                                 ; preds = %land.lhs.true, %if.end.66
  %71 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %72 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp76 = icmp eq %struct.mpd_t* %71, %72
  br i1 %cmp76, label %land.lhs.true.78, label %if.then.82

land.lhs.true.78:                                 ; preds = %land.lhs.true.75
  %73 = load i64, i64* %qsize, align 8
  %74 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len79 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %74, i32 0, i32 3
  %75 = load i64, i64* %len79, align 8
  %cmp80 = icmp slt i64 %73, %75
  br i1 %cmp80, label %if.end.87, label %if.then.82

if.then.82:                                       ; preds = %land.lhs.true.78, %land.lhs.true.75
  %76 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %77 = load i64, i64* %qsize, align 8
  %78 = load i32*, i32** %status.addr, align 8
  %call83 = call i32 @mpd_qresize(%struct.mpd_t* %76, i64 %77, i32* %78)
  %tobool84 = icmp ne i32 %call83, 0
  br i1 %tobool84, label %if.end.86, label %if.then.85

if.then.85:                                       ; preds = %if.then.82
  br label %nanresult

if.end.86:                                        ; preds = %if.then.82
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %land.lhs.true.78, %land.lhs.true
  %79 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len88 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %79, i32 0, i32 3
  %80 = load i64, i64* %len88, align 8
  store i64 %80, i64* %rsize, align 8
  %81 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %82 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp89 = icmp eq %struct.mpd_t* %81, %82
  br i1 %cmp89, label %land.lhs.true.91, label %if.then.95

land.lhs.true.91:                                 ; preds = %if.end.87
  %83 = load i64, i64* %rsize, align 8
  %84 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %84, i32 0, i32 3
  %85 = load i64, i64* %len92, align 8
  %cmp93 = icmp slt i64 %83, %85
  br i1 %cmp93, label %if.end.100, label %if.then.95

if.then.95:                                       ; preds = %land.lhs.true.91, %if.end.87
  %86 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %87 = load i64, i64* %rsize, align 8
  %88 = load i32*, i32** %status.addr, align 8
  %call96 = call i32 @mpd_qresize(%struct.mpd_t* %86, i64 %87, i32* %88)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %if.then.95
  br label %nanresult

if.end.99:                                        ; preds = %if.then.95
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %land.lhs.true.91
  %89 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len101 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %89, i32 0, i32 3
  %90 = load i64, i64* %len101, align 8
  %cmp102 = icmp eq i64 %90, 1
  br i1 %cmp102, label %if.then.104, label %if.else.126

if.then.104:                                      ; preds = %if.end.100
  %91 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 3
  %92 = load i64, i64* %len105, align 8
  %cmp106 = icmp eq i64 %92, 1
  br i1 %cmp106, label %if.then.108, label %if.else.116

if.then.108:                                      ; preds = %if.then.104
  %93 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data109 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %93, i32 0, i32 5
  %94 = load i64*, i64** %data109, align 8
  %arrayidx = getelementptr i64, i64* %94, i64 0
  %95 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %data110 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %95, i32 0, i32 5
  %96 = load i64*, i64** %data110, align 8
  %arrayidx111 = getelementptr i64, i64* %96, i64 0
  %97 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data112 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %97, i32 0, i32 5
  %98 = load i64*, i64** %data112, align 8
  %arrayidx113 = getelementptr i64, i64* %98, i64 0
  %99 = load i64, i64* %arrayidx113, align 8
  %100 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %100, i32 0, i32 5
  %101 = load i64*, i64** %data114, align 8
  %arrayidx115 = getelementptr i64, i64* %101, i64 0
  %102 = load i64, i64* %arrayidx115, align 8
  call void @_mpd_div_word(i64* %arrayidx, i64* %arrayidx111, i64 %99, i64 %102)
  br label %if.end.125

if.else.116:                                      ; preds = %if.then.104
  %103 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data117 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %103, i32 0, i32 5
  %104 = load i64*, i64** %data117, align 8
  %105 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data118 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %105, i32 0, i32 5
  %106 = load i64*, i64** %data118, align 8
  %107 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len119 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %107, i32 0, i32 3
  %108 = load i64, i64* %len119, align 8
  %109 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data120 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %109, i32 0, i32 5
  %110 = load i64*, i64** %data120, align 8
  %arrayidx121 = getelementptr i64, i64* %110, i64 0
  %111 = load i64, i64* %arrayidx121, align 8
  %call122 = call i64 @_mpd_shortdiv(i64* %104, i64* %106, i64 %108, i64 %111)
  %112 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %data123 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %112, i32 0, i32 5
  %113 = load i64*, i64** %data123, align 8
  %arrayidx124 = getelementptr i64, i64* %113, i64 0
  store i64 %call122, i64* %arrayidx124, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.116, %if.then.108
  br label %if.end.153

if.else.126:                                      ; preds = %if.end.100
  %114 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len127 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %114, i32 0, i32 3
  %115 = load i64, i64* %len127, align 8
  %cmp128 = icmp sle i64 %115, 1024
  br i1 %cmp128, label %if.then.130, label %if.else.143

if.then.130:                                      ; preds = %if.else.126
  %116 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data131 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %116, i32 0, i32 5
  %117 = load i64*, i64** %data131, align 8
  %118 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %data132 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %118, i32 0, i32 5
  %119 = load i64*, i64** %data132, align 8
  %120 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data133 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %120, i32 0, i32 5
  %121 = load i64*, i64** %data133, align 8
  %122 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data134 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %122, i32 0, i32 5
  %123 = load i64*, i64** %data134, align 8
  %124 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len135 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %124, i32 0, i32 3
  %125 = load i64, i64* %len135, align 8
  %126 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len136 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %126, i32 0, i32 3
  %127 = load i64, i64* %len136, align 8
  %call137 = call i32 @_mpd_basedivmod(i64* %117, i64* %119, i64* %121, i64* %123, i64 %125, i64 %127)
  store i32 %call137, i32* %ret, align 4
  %128 = load i32, i32* %ret, align 4
  %cmp138 = icmp eq i32 %128, -1
  br i1 %cmp138, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %if.then.130
  %129 = load i32*, i32** %status.addr, align 8
  %130 = load i32, i32* %129, align 4
  %or141 = or i32 %130, 512
  store i32 %or141, i32* %129, align 4
  br label %nanresult

if.end.142:                                       ; preds = %if.then.130
  br label %if.end.152

if.else.143:                                      ; preds = %if.else.126
  %131 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %132 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %133 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %134 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %135 = load i32*, i32** %status.addr, align 8
  call void @_mpd_base_ndivmod(%struct.mpd_t* %131, %struct.mpd_t* %132, %struct.mpd_t* %133, %struct.mpd_t* %134, i32* %135)
  %136 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %call144 = call i32 @mpd_isspecial(%struct.mpd_t* %136)
  %tobool145 = icmp ne i32 %call144, 0
  br i1 %tobool145, label %if.then.148, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.143
  %137 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call146 = call i32 @mpd_isspecial(%struct.mpd_t* %137)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %lor.lhs.false, %if.else.143
  br label %nanresult

if.end.149:                                       ; preds = %lor.lhs.false
  %138 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %len150 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %138, i32 0, i32 3
  %139 = load i64, i64* %len150, align 8
  store i64 %139, i64* %qsize, align 8
  %140 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %len151 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %140, i32 0, i32 3
  %141 = load i64, i64* %len151, align 8
  store i64 %141, i64* %rsize, align 8
  br label %if.end.152

if.end.152:                                       ; preds = %if.end.149, %if.end.142
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %if.end.125
  %142 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %data154 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %142, i32 0, i32 5
  %143 = load i64*, i64** %data154, align 8
  %144 = load i64, i64* %qsize, align 8
  %call155 = call i64 @_mpd_real_size(i64* %143, i64 %144)
  store i64 %call155, i64* %qsize, align 8
  %145 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %146 = load i64, i64* %qsize, align 8
  %147 = load i32*, i32** %status.addr, align 8
  %call156 = call i32 @mpd_qresize(%struct.mpd_t* %145, i64 %146, i32* %147)
  %148 = load i64, i64* %qsize, align 8
  %149 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %len157 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %149, i32 0, i32 3
  store i64 %148, i64* %len157, align 8
  %150 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %150)
  %151 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %152 = load i8, i8* %sign_ab, align 1
  call void @mpd_set_flags(%struct.mpd_t* %151, i8 zeroext %152)
  %153 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %exp158 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %153, i32 0, i32 1
  store i64 0, i64* %exp158, align 8
  %154 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %digits159 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %154, i32 0, i32 2
  %155 = load i64, i64* %digits159, align 8
  %156 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec160 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %156, i32 0, i32 0
  %157 = load i64, i64* %prec160, align 8
  %cmp161 = icmp sgt i64 %155, %157
  br i1 %cmp161, label %if.then.163, label %if.end.165

if.then.163:                                      ; preds = %if.end.153
  %158 = load i32*, i32** %status.addr, align 8
  %159 = load i32, i32* %158, align 4
  %or164 = or i32 %159, 8
  store i32 %or164, i32* %158, align 4
  br label %nanresult

if.end.165:                                       ; preds = %if.end.153
  %160 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %data166 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %160, i32 0, i32 5
  %161 = load i64*, i64** %data166, align 8
  %162 = load i64, i64* %rsize, align 8
  %call167 = call i64 @_mpd_real_size(i64* %161, i64 %162)
  store i64 %call167, i64* %rsize, align 8
  %163 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %164 = load i64, i64* %rsize, align 8
  %165 = load i32*, i32** %status.addr, align 8
  %call168 = call i32 @mpd_qresize(%struct.mpd_t* %163, i64 %164, i32* %165)
  %166 = load i64, i64* %rsize, align 8
  %167 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %len169 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %167, i32 0, i32 3
  store i64 %166, i64* %len169, align 8
  %168 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %168)
  %169 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %170 = load i8, i8* %sign_a, align 1
  call void @mpd_set_flags(%struct.mpd_t* %169, i8 zeroext %170)
  %171 = load i64, i64* %ideal_exp, align 8
  %172 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %exp170 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %172, i32 0, i32 1
  store i64 %171, i64* %exp170, align 8
  br label %out

out:                                              ; preds = %nanresult, %if.end.165
  call void @mpd_del(%struct.mpd_t* %aligned)
  br label %return

nanresult:                                        ; preds = %if.then.163, %if.then.148, %if.then.140, %if.then.98, %if.then.85, %if.then.63, %if.then.57, %if.then.42, %if.then.36, %if.then.31, %if.then.13
  %173 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %173, i8 zeroext 0, i8 zeroext 4)
  %174 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %174, i8 zeroext 0, i8 zeroext 4)
  br label %out

return:                                           ; preds = %out, %if.end.38, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdivint(%struct.mpd_t* %q, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %q.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %r_data = alloca [64 x i64], align 16
  %r = alloca %struct.mpd_t, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %r_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  %conv = zext i8 %call to i32
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv2 = zext i8 %call1 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %sign, align 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then, label %if.end.24

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %7, i32* %8)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call10 = call i32 @mpd_isinfinite(%struct.mpd_t* %9)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call12 = call i32 @mpd_isinfinite(%struct.mpd_t* %10)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true
  %11 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %12 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %11, i32 256, i32* %12)
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %if.end
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call16 = call i32 @mpd_isinfinite(%struct.mpd_t* %13)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  %14 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %15 = load i8, i8* %sign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %14, i8 zeroext %15, i8 zeroext 2)
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call20 = call i32 @mpd_isinfinite(%struct.mpd_t* %16)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  %17 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %18 = load i8, i8* %sign, align 1
  call void @_settriple(%struct.mpd_t* %17, i8 zeroext %18, i64 0, i64 0)
  br label %return

if.end.23:                                        ; preds = %if.end.19
  call void @abort() #8
  unreachable

if.end.24:                                        ; preds = %lor.lhs.false
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call25 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %19)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.32

if.then.27:                                       ; preds = %if.end.24
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call28 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %20)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %if.then.27
  %21 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %22 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %21, i32 16, i32* %22)
  br label %if.end.31

if.else:                                          ; preds = %if.then.27
  %23 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %24 = load i8, i8* %sign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %23, i8 zeroext %24, i8 zeroext 2)
  %25 = load i32*, i32** %status.addr, align 8
  %26 = load i32, i32* %25, align 4
  %or = or i32 %26, 4
  store i32 %or, i32* %25, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.30
  br label %return

if.end.32:                                        ; preds = %if.end.24
  %27 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %30 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %31 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdivmod(%struct.mpd_t* %27, %struct.mpd_t* %r, %struct.mpd_t* %28, %struct.mpd_t* %29, %struct.mpd_context_t* %30, i32* %31)
  call void @mpd_del(%struct.mpd_t* %r)
  %32 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %33 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %34 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %32, %struct.mpd_context_t* %33, i32* %34)
  br label %return

return:                                           ; preds = %if.end.32, %if.end.31, %if.then.22, %if.then.18, %if.then.14, %if.then.9
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_ssize(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_uint(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_i32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_u32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_i64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qdiv_u64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qexp(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %t1_data = alloca [64 x i64], align 16
  %t1 = alloca %struct.mpd_t, align 8
  %t2_data = alloca [64 x i64], align 16
  %t2 = alloca %struct.mpd_t, align 8
  %ulp_data = alloca [64 x i64], align 16
  %ulp = alloca %struct.mpd_t, align 8
  %aa_data = alloca [64 x i64], align 16
  %aa = alloca %struct.mpd_t, align 8
  %prec = alloca i64, align 8
  %ulpexp = alloca i64, align 8
  %workstatus = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.69

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %6, i8 zeroext 0, i64 0, i64 0)
  br label %if.end.7

if.else:                                          ; preds = %if.end
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %7, i8 zeroext 0, i8 zeroext 2)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %if.end.69

if.end.8:                                         ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %9, i8 zeroext 0, i64 1, i64 0)
  br label %if.end.69

if.end.12:                                        ; preds = %if.end.8
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %11 = bitcast %struct.mpd_context_t* %workctx to i8*
  %12 = bitcast %struct.mpd_context_t* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %allcr = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 8
  %14 = load i32, i32* %allcr, align 4
  %tobool13 = icmp ne i32 %14, 0
  br i1 %tobool13, label %if.then.14, label %if.else.68

if.then.14:                                       ; preds = %if.end.12
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %t1_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 0
  store i8 48, i8* %flags15, align 1
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 1
  store i64 0, i64* %exp16, align 8
  %digits17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 2
  store i64 0, i64* %digits17, align 8
  %len18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 3
  store i64 0, i64* %len18, align 8
  %alloc19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 4
  store i64 64, i64* %alloc19, align 8
  %data20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 5
  %arraydecay21 = getelementptr inbounds [64 x i64], [64 x i64]* %t2_data, i32 0, i32 0
  store i64* %arraydecay21, i64** %data20, align 8
  %flags22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 0
  store i8 48, i8* %flags22, align 1
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 1
  store i64 0, i64* %exp23, align 8
  %digits24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 2
  store i64 0, i64* %digits24, align 8
  %len25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 3
  store i64 0, i64* %len25, align 8
  %alloc26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 4
  store i64 64, i64* %alloc26, align 8
  %data27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 5
  %arraydecay28 = getelementptr inbounds [64 x i64], [64 x i64]* %ulp_data, i32 0, i32 0
  store i64* %arraydecay28, i64** %data27, align 8
  %flags29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 0
  store i8 48, i8* %flags29, align 1
  %exp30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  store i64 0, i64* %exp30, align 8
  %digits31 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 2
  store i64 0, i64* %digits31, align 8
  %len32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 3
  store i64 0, i64* %len32, align 8
  %alloc33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 4
  store i64 64, i64* %alloc33, align 8
  %data34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 5
  %arraydecay35 = getelementptr inbounds [64 x i64], [64 x i64]* %aa_data, i32 0, i32 0
  store i64* %arraydecay35, i64** %data34, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %15, %16
  br i1 %cmp, label %if.then.36, label %if.end.41

if.then.36:                                       ; preds = %if.then.14
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %18 = load i32*, i32** %status.addr, align 8
  %call37 = call i32 @mpd_qcopy(%struct.mpd_t* %aa, %struct.mpd_t* %17, i32* %18)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.36
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %19, i32 512, i32* %20)
  br label %if.end.69

if.end.40:                                        ; preds = %if.then.36
  store %struct.mpd_t* %aa, %struct.mpd_t** %a.addr, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.14
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 0, i32* %clamp, align 4
  %21 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec42 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %21, i32 0, i32 0
  %22 = load i64, i64* %prec42, align 8
  %add = add i64 %22, 3
  store i64 %add, i64* %prec, align 8
  br label %while.body

while.body:                                       ; preds = %if.end.41, %if.end.66
  %23 = load i64, i64* %prec, align 8
  %prec43 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %23, i64* %prec43, align 8
  store i32 0, i32* %workstatus, align 4
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @_mpd_qexp(%struct.mpd_t* %24, %struct.mpd_t* %25, %struct.mpd_context_t* %workctx, i32* %workstatus)
  %26 = load i32, i32* %workstatus, align 4
  %27 = load i32*, i32** %status.addr, align 8
  %28 = load i32, i32* %27, align 4
  %or = or i32 %28, %26
  store i32 %or, i32* %27, align 4
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 1
  %30 = load i64, i64* %exp44, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 2
  %32 = load i64, i64* %digits45, align 8
  %add46 = add i64 %30, %32
  %prec47 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %33 = load i64, i64* %prec47, align 8
  %sub = sub i64 %add46, %33
  store i64 %sub, i64* %ulpexp, align 8
  %34 = load i32, i32* %workstatus, align 4
  %and = and i32 %34, 16384
  %tobool48 = icmp ne i32 %and, 0
  br i1 %tobool48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %while.body
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 1
  %36 = load i64, i64* %exp50, align 8
  store i64 %36, i64* %ulpexp, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %while.body
  %37 = load i64, i64* %ulpexp, align 8
  call void @_ssettriple(%struct.mpd_t* %ulp, i8 zeroext 0, i64 1, i64 %37)
  %38 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec52 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %38, i32 0, i32 0
  %39 = load i64, i64* %prec52, align 8
  %prec53 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %39, i64* %prec53, align 8
  %40 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status54 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qadd(%struct.mpd_t* %t1, %struct.mpd_t* %40, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status54)
  %41 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status55 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qsub(%struct.mpd_t* %t2, %struct.mpd_t* %41, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status55)
  %42 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call56 = call i32 @mpd_isspecial(%struct.mpd_t* %42)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.then.63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.51
  %43 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call58 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %43)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then.63, label %lor.lhs.false.60

lor.lhs.false.60:                                 ; preds = %lor.lhs.false
  %44 = load i32*, i32** %status.addr, align 8
  %call61 = call i32 @mpd_qcmp(%struct.mpd_t* %t1, %struct.mpd_t* %t2, i32* %44)
  %cmp62 = icmp eq i32 %call61, 0
  br i1 %cmp62, label %if.then.63, label %if.end.66

if.then.63:                                       ; preds = %lor.lhs.false.60, %lor.lhs.false, %if.end.51
  %45 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp64 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %45, i32 0, i32 7
  %46 = load i32, i32* %clamp64, align 4
  %clamp65 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 %46, i32* %clamp65, align 4
  %47 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %48 = load i32*, i32** %status.addr, align 8
  call void @_mpd_zeropad(%struct.mpd_t* %47, %struct.mpd_context_t* %workctx, i32* %48)
  %49 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %50 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %49, %struct.mpd_context_t* %workctx, i32* %50)
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %52 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %51, %struct.mpd_context_t* %workctx, i32* %52)
  br label %while.end

if.end.66:                                        ; preds = %lor.lhs.false.60
  %53 = load i64, i64* %prec, align 8
  %add67 = add i64 %53, 19
  store i64 %add67, i64* %prec, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.63
  call void @mpd_del(%struct.mpd_t* %t1)
  call void @mpd_del(%struct.mpd_t* %t2)
  call void @mpd_del(%struct.mpd_t* %ulp)
  call void @mpd_del(%struct.mpd_t* %aa)
  br label %if.end.69

if.else.68:                                       ; preds = %if.end.12
  %54 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %55 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %56 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qexp(%struct.mpd_t* %54, %struct.mpd_t* %55, %struct.mpd_context_t* %workctx, i32* %56)
  %57 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %58 = load i32*, i32** %status.addr, align 8
  call void @_mpd_zeropad(%struct.mpd_t* %57, %struct.mpd_context_t* %workctx, i32* %58)
  %59 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %60 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %59, %struct.mpd_context_t* %workctx, i32* %60)
  %61 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %61, %struct.mpd_context_t* %workctx, i32* %62)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.3, %if.end.7, %if.then.11, %if.then.39, %if.else.68, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qexp(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %tmp_data = alloca [64 x i64], align 16
  %tmp = alloca %struct.mpd_t, align 8
  %sum_data = alloca [64 x i64], align 16
  %sum = alloca %struct.mpd_t, align 8
  %word_data = alloca [1 x i64], align 8
  %word = alloca %struct.mpd_t, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %t = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tmp_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 0
  store i8 48, i8* %flags3, align 1
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 1
  store i64 0, i64* %exp4, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 2
  store i64 0, i64* %digits5, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 3
  store i64 0, i64* %len6, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 4
  store i64 64, i64* %alloc7, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %sum, i32 0, i32 5
  %arraydecay9 = getelementptr inbounds [64 x i64], [64 x i64]* %sum_data, i32 0, i32 0
  store i64* %arraydecay9, i64** %data8, align 8
  %0 = bitcast [1 x i64]* %word_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @_mpd_qexp.word_data to i8*), i64 8, i32 8, i1 false)
  %flags12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 0
  store i8 -112, i8* %flags12, align 1
  %exp13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 1
  store i64 0, i64* %exp13, align 8
  %digits14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 2
  store i64 1, i64* %digits14, align 8
  %len15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 3
  store i64 1, i64* %len15, align 8
  %alloc16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 4
  store i64 1, i64* %alloc16, align 8
  %data17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 5
  %arraydecay18 = getelementptr inbounds [1 x i64], [1 x i64]* %word_data, i32 0, i32 0
  store i64* %arraydecay18, i64** %data17, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %2, i8 zeroext 0, i64 1, i64 0)
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 2
  %4 = load i64, i64* %digits22, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  %6 = load i64, i64* %exp23, align 8
  %add = add i64 %4, %6
  store i64 %add, i64* %t, align 8
  %7 = load i64, i64* %t, align 8
  %cmp = icmp sgt i64 %7, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load i64, i64* %t, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %t, align 8
  %9 = load i64, i64* %t, align 8
  %cmp24 = icmp sgt i64 %9, 19
  br i1 %cmp24, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %cond.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call26 = call i32 @mpd_ispositive(%struct.mpd_t* %10)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.then.25
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %11, i8 zeroext 0, i8 zeroext 2)
  %12 = load i32*, i32** %status.addr, align 8
  %13 = load i32, i32* %12, align 4
  %or = or i32 %13, 6208
  store i32 %or, i32* %12, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.then.25
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call29 = call i64 @mpd_etiny(%struct.mpd_context_t* %15)
  call void @_settriple(%struct.mpd_t* %14, i8 zeroext 0, i64 0, i64 %call29)
  %16 = load i32*, i32** %status.addr, align 8
  %17 = load i32, i32* %16, align 4
  %or30 = or i32 %17, 28737
  store i32 %or30, i32* %16, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.28
  br label %return

if.end.32:                                        ; preds = %cond.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call33 = call i32 @_mpd_qexp_check_one(%struct.mpd_t* %18, %struct.mpd_t* %19, %struct.mpd_context_t* %20, i32* %21)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.32
  br label %return

if.end.36:                                        ; preds = %if.end.32
  call void @mpd_maxcontext(%struct.mpd_context_t* %workctx)
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %22, i32 0, i32 0
  %23 = load i64, i64* %prec, align 8
  %24 = load i64, i64* %t, align 8
  %add37 = add i64 %23, %24
  %add38 = add i64 %add37, 2
  %prec39 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %add38, i64* %prec39, align 8
  %prec40 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %25 = load i64, i64* %prec40, align 8
  %cmp41 = icmp slt i64 %25, 10
  br i1 %cmp41, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %if.end.36
  br label %cond.end.45

cond.false.43:                                    ; preds = %if.end.36
  %prec44 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %26 = load i64, i64* %prec44, align 8
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.43, %cond.true.42
  %cond46 = phi i64 [ 10, %cond.true.42 ], [ %26, %cond.false.43 ]
  %prec47 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %cond46, i64* %prec47, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  %call48 = call i32 @mpd_qcopy(%struct.mpd_t* %27, %struct.mpd_t* %28, i32* %29)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %cond.end.45
  br label %return

if.end.51:                                        ; preds = %cond.end.45
  %30 = load i64, i64* %t, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp52 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 1
  %32 = load i64, i64* %exp52, align 8
  %sub = sub i64 %32, %30
  store i64 %sub, i64* %exp52, align 8
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %prec53 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %34 = load i64, i64* %prec53, align 8
  %call54 = call i64 @_mpd_get_exp_iterations(%struct.mpd_t* %33, i64 %34)
  store i64 %call54, i64* %n, align 8
  %35 = load i64, i64* %n, align 8
  %cmp55 = icmp eq i64 %35, 9223372036854775807
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.51
  %36 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %37 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %36, i32 256, i32* %37)
  br label %return

if.end.57:                                        ; preds = %if.end.51
  call void @_settriple(%struct.mpd_t* %sum, i8 zeroext 0, i64 1, i64 0)
  %38 = load i64, i64* %n, align 8
  %sub58 = sub i64 %38, 1
  store i64 %sub58, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.57
  %39 = load i64, i64* %j, align 8
  %cmp59 = icmp sge i64 %39, 1
  br i1 %cmp59, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i64, i64* %j, align 8
  %data60 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %word, i32 0, i32 5
  %41 = load i64*, i64** %data60, align 8
  %arrayidx = getelementptr i64, i64* %41, i64 0
  store i64 %40, i64* %arrayidx, align 8
  call void @mpd_setdigits(%struct.mpd_t* %word)
  %42 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status61 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qdiv(%struct.mpd_t* %tmp, %struct.mpd_t* %42, %struct.mpd_t* %word, %struct.mpd_context_t* %workctx, i32* %status61)
  %status62 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qfma(%struct.mpd_t* %sum, %struct.mpd_t* %sum, %struct.mpd_t* %tmp, %struct.mpd_t* @one, %struct.mpd_context_t* %workctx, i32* %status62)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %43 = load i64, i64* %j, align 8
  %dec = add i64 %43, -1
  store i64 %dec, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %44 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %45 = load i64, i64* %t, align 8
  %arrayidx63 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %45
  %46 = load i64, i64* %arrayidx63, align 8
  %47 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpow_uint(%struct.mpd_t* %44, %struct.mpd_t* %sum, i64 %46, i8 zeroext 0, %struct.mpd_context_t* %workctx, i32* %47)
  call void @mpd_del(%struct.mpd_t* %tmp)
  call void @mpd_del(%struct.mpd_t* %sum)
  %status64 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %48 = load i32, i32* %status64, align 4
  %and = and i32 %48, 958
  %49 = load i32*, i32** %status.addr, align 8
  %50 = load i32, i32* %49, align 4
  %or65 = or i32 %50, %and
  store i32 %or65, i32* %49, align 4
  %51 = load i32*, i32** %status.addr, align 8
  %52 = load i32, i32* %51, align 4
  %or66 = or i32 %52, 4160
  store i32 %or66, i32* %51, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then.56, %if.then.50, %if.then.35, %if.end.31, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_zeropad(%struct.mpd_t* %result, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %shift = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call1 = call i32 @mpd_iszero(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true.3

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 2
  %3 = load i64, i64* %digits, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %4, i32 0, i32 0
  %5 = load i64, i64* %prec, align 8
  %cmp = icmp slt i64 %3, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.3
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec4 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 0
  %7 = load i64, i64* %prec4, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 2
  %9 = load i64, i64* %digits5, align 8
  %sub = sub i64 %7, %9
  store i64 %sub, i64* %shift, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load i64, i64* %shift, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call6 = call i32 @mpd_qshiftl(%struct.mpd_t* %10, %struct.mpd_t* %11, i64 %12, i32* %13)
  %14 = load i64, i64* %shift, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 1
  %16 = load i64, i64* %exp, align 8
  %sub7 = sub i64 %16, %14
  store i64 %sub7, i64* %exp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.3, %land.lhs.true, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @mpd_check_underflow(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i64 @mpd_adjexp(%struct.mpd_t* %0)
  %1 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %1, i32 0, i32 2
  %2 = load i64, i64* %emin, align 8
  %cmp = icmp slt i64 %call, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call1 = call i32 @mpd_iszero(%struct.mpd_t* %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true.2

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 1
  %5 = load i64, i64* %exp, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call3 = call i64 @mpd_etiny(%struct.mpd_context_t* %6)
  %cmp4 = icmp slt i64 %5, %call3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.2
  %7 = load i32*, i32** %status.addr, align 8
  %8 = load i32, i32* %7, align 4
  %or = or i32 %8, 16384
  store i32 %or, i32* %7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.2, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qfma(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_t* %c, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %c.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %cc = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %c, %struct.mpd_t** %c.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  store %struct.mpd_t* null, %struct.mpd_t** %cc, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %0, %1
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  %call = call %struct.mpd_t* @mpd_qncopy(%struct.mpd_t* %2)
  store %struct.mpd_t* %call, %struct.mpd_t** %cc, align 8
  %cmp1 = icmp eq %struct.mpd_t* %call, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %3, i32 512, i32* %4)
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %cc, align 8
  store %struct.mpd_t* %5, %struct.mpd_t** %c.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_qmul(%struct.mpd_t* %6, %struct.mpd_t* %7, %struct.mpd_t* %8, %struct.mpd_context_t* %9, i32* %workstatus)
  %10 = load i32, i32* %workstatus, align 4
  %and = and i32 %10, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end.3
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  %14 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_t* %13, %struct.mpd_context_t* %14, i32* %workstatus)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end.3
  %15 = load %struct.mpd_t*, %struct.mpd_t** %cc, align 8
  %tobool6 = icmp ne %struct.mpd_t* %15, null
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.5
  %16 = load %struct.mpd_t*, %struct.mpd_t** %cc, align 8
  call void @mpd_del(%struct.mpd_t* %16)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.5
  %17 = load i32, i32* %workstatus, align 4
  %18 = load i32*, i32** %status.addr, align 8
  %19 = load i32, i32* %18, align 4
  %or = or i32 %19, %17
  store i32 %or, i32* %18, align 4
  br label %return

return:                                           ; preds = %if.end.8, %if.then.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_qmul(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %big = alloca %struct.mpd_t*, align 8
  %small = alloca %struct.mpd_t*, align 8
  %rdata = alloca i64*, align 8
  %rbuf = alloca [64 x i64], align 16
  %rsize = alloca i64, align 8
  %i = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %big, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %small, align 8
  store i64* null, i64** %rdata, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %7, i32* %8)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %12 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_inf(%struct.mpd_t* %9, %struct.mpd_t* %10, %struct.mpd_t* %11, i32* %12)
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false
  %13 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 3
  %14 = load i64, i64* %len, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 3
  %16 = load i64, i64* %len7, align 8
  %cmp = icmp sgt i64 %14, %16
  br i1 %cmp, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  call void @_mpd_ptrswap(%struct.mpd_t** %big, %struct.mpd_t** %small)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end.6
  %17 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 3
  %18 = load i64, i64* %len10, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 3
  %20 = load i64, i64* %len11, align 8
  %add = add i64 %18, %20
  store i64 %add, i64* %rsize, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 3
  %22 = load i64, i64* %len12, align 8
  %cmp13 = icmp eq i64 %22, 1
  br i1 %cmp13, label %if.then.14, label %if.end.18

if.then.14:                                       ; preds = %if.end.9
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 5
  %24 = load i64*, i64** %data, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %25, i32 0, i32 5
  %26 = load i64*, i64** %data15, align 8
  %arrayidx = getelementptr i64, i64* %26, i64 0
  %27 = load i64, i64* %arrayidx, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 5
  %29 = load i64*, i64** %data16, align 8
  %arrayidx17 = getelementptr i64, i64* %29, i64 0
  %30 = load i64, i64* %arrayidx17, align 8
  call void @_mpd_singlemul(i64* %24, i64 %27, i64 %30)
  br label %finish

if.end.18:                                        ; preds = %if.end.9
  %31 = load i64, i64* %rsize, align 8
  %cmp19 = icmp ule i64 %31, 64
  br i1 %cmp19, label %if.then.20, label %if.end.52

if.then.20:                                       ; preds = %if.end.18
  %32 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 3
  %33 = load i64, i64* %len21, align 8
  %cmp22 = icmp eq i64 %33, 2
  br i1 %cmp22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %if.then.20
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %rbuf, i32 0, i32 0
  %34 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %34, i32 0, i32 5
  %35 = load i64*, i64** %data24, align 8
  %36 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %36, i32 0, i32 5
  %37 = load i64*, i64** %data25, align 8
  %38 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %38, i32 0, i32 3
  %39 = load i64, i64* %len26, align 8
  call void @_mpd_mul_2_le2(i64* %arraydecay, i64* %35, i64* %37, i64 %39)
  br label %if.end.43

if.else:                                          ; preds = %if.then.20
  %arraydecay27 = getelementptr inbounds [64 x i64], [64 x i64]* %rbuf, i32 0, i32 0
  %40 = load i64, i64* %rsize, align 8
  call void @mpd_uint_zero(i64* %arraydecay27, i64 %40)
  %41 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 3
  %42 = load i64, i64* %len28, align 8
  %cmp29 = icmp eq i64 %42, 1
  br i1 %cmp29, label %if.then.30, label %if.else.36

if.then.30:                                       ; preds = %if.else
  %arraydecay31 = getelementptr inbounds [64 x i64], [64 x i64]* %rbuf, i32 0, i32 0
  %43 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %43, i32 0, i32 5
  %44 = load i64*, i64** %data32, align 8
  %45 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %45, i32 0, i32 3
  %46 = load i64, i64* %len33, align 8
  %47 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %47, i32 0, i32 5
  %48 = load i64*, i64** %data34, align 8
  %arrayidx35 = getelementptr i64, i64* %48, i64 0
  %49 = load i64, i64* %arrayidx35, align 8
  call void @_mpd_shortmul(i64* %arraydecay31, i64* %44, i64 %46, i64 %49)
  br label %if.end.42

if.else.36:                                       ; preds = %if.else
  %arraydecay37 = getelementptr inbounds [64 x i64], [64 x i64]* %rbuf, i32 0, i32 0
  %50 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data38 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %50, i32 0, i32 5
  %51 = load i64*, i64** %data38, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data39 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %52, i32 0, i32 5
  %53 = load i64*, i64** %data39, align 8
  %54 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len40 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %54, i32 0, i32 3
  %55 = load i64, i64* %len40, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len41 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 3
  %57 = load i64, i64* %len41, align 8
  call void @_mpd_basemul(i64* %arraydecay37, i64* %51, i64* %53, i64 %55, i64 %57)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.36, %if.then.30
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.23
  %58 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %59 = load i64, i64* %rsize, align 8
  %60 = load i32*, i32** %status.addr, align 8
  %call44 = call i32 @mpd_qresize(%struct.mpd_t* %58, i64 %59, i32* %60)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %if.end.43
  br label %return

if.end.47:                                        ; preds = %if.end.43
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.47
  %61 = load i64, i64* %i, align 8
  %62 = load i64, i64* %rsize, align 8
  %cmp48 = icmp ult i64 %61, %62
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %63 = load i64, i64* %i, align 8
  %arrayidx49 = getelementptr [64 x i64], [64 x i64]* %rbuf, i32 0, i64 %63
  %64 = load i64, i64* %arrayidx49, align 8
  %65 = load i64, i64* %i, align 8
  %66 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %66, i32 0, i32 5
  %67 = load i64*, i64** %data50, align 8
  %arrayidx51 = getelementptr i64, i64* %67, i64 %65
  store i64 %64, i64* %arrayidx51, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %68 = load i64, i64* %i, align 8
  %inc = add i64 %68, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %finish

if.end.52:                                        ; preds = %if.end.18
  %69 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %69, i32 0, i32 3
  %70 = load i64, i64* %len53, align 8
  %cmp54 = icmp sle i64 %70, 256
  br i1 %cmp54, label %if.then.55, label %if.else.73

if.then.55:                                       ; preds = %if.end.52
  %71 = load i64, i64* %rsize, align 8
  %call56 = call i8* @mpd_calloc(i64 %71, i64 8)
  %72 = bitcast i8* %call56 to i64*
  store i64* %72, i64** %rdata, align 8
  %73 = load i64*, i64** %rdata, align 8
  %cmp57 = icmp ne i64* %73, null
  br i1 %cmp57, label %if.then.58, label %if.end.72

if.then.58:                                       ; preds = %if.then.55
  %74 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len59 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %74, i32 0, i32 3
  %75 = load i64, i64* %len59, align 8
  %cmp60 = icmp eq i64 %75, 1
  br i1 %cmp60, label %if.then.61, label %if.else.66

if.then.61:                                       ; preds = %if.then.58
  %76 = load i64*, i64** %rdata, align 8
  %77 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data62 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %77, i32 0, i32 5
  %78 = load i64*, i64** %data62, align 8
  %79 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len63 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %79, i32 0, i32 3
  %80 = load i64, i64* %len63, align 8
  %81 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data64 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %81, i32 0, i32 5
  %82 = load i64*, i64** %data64, align 8
  %arrayidx65 = getelementptr i64, i64* %82, i64 0
  %83 = load i64, i64* %arrayidx65, align 8
  call void @_mpd_shortmul(i64* %76, i64* %78, i64 %80, i64 %83)
  br label %if.end.71

if.else.66:                                       ; preds = %if.then.58
  %84 = load i64*, i64** %rdata, align 8
  %85 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data67 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %85, i32 0, i32 5
  %86 = load i64*, i64** %data67, align 8
  %87 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data68 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %87, i32 0, i32 5
  %88 = load i64*, i64** %data68, align 8
  %89 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len69 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %89, i32 0, i32 3
  %90 = load i64, i64* %len69, align 8
  %91 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len70 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 3
  %92 = load i64, i64* %len70, align 8
  call void @_mpd_basemul(i64* %84, i64* %86, i64* %88, i64 %90, i64 %92)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.66, %if.then.61
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.55
  br label %if.end.97

if.else.73:                                       ; preds = %if.end.52
  %93 = load i64, i64* %rsize, align 8
  %cmp74 = icmp ule i64 %93, 1024
  br i1 %cmp74, label %if.then.75, label %if.else.81

if.then.75:                                       ; preds = %if.else.73
  %94 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data76 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %94, i32 0, i32 5
  %95 = load i64*, i64** %data76, align 8
  %96 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data77 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %96, i32 0, i32 5
  %97 = load i64*, i64** %data77, align 8
  %98 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len78 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %98, i32 0, i32 3
  %99 = load i64, i64* %len78, align 8
  %100 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len79 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %100, i32 0, i32 3
  %101 = load i64, i64* %len79, align 8
  %call80 = call i64* @_mpd_kmul(i64* %95, i64* %97, i64 %99, i64 %101, i64* %rsize)
  store i64* %call80, i64** %rdata, align 8
  br label %if.end.96

if.else.81:                                       ; preds = %if.else.73
  %102 = load i64, i64* %rsize, align 8
  %cmp82 = icmp ule i64 %102, 12884901888
  br i1 %cmp82, label %if.then.83, label %if.else.89

if.then.83:                                       ; preds = %if.else.81
  %103 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data84 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %103, i32 0, i32 5
  %104 = load i64*, i64** %data84, align 8
  %105 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data85 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %105, i32 0, i32 5
  %106 = load i64*, i64** %data85, align 8
  %107 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %107, i32 0, i32 3
  %108 = load i64, i64* %len86, align 8
  %109 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len87 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %109, i32 0, i32 3
  %110 = load i64, i64* %len87, align 8
  %call88 = call i64* @_mpd_fntmul(i64* %104, i64* %106, i64 %108, i64 %110, i64* %rsize)
  store i64* %call88, i64** %rdata, align 8
  br label %if.end.95

if.else.89:                                       ; preds = %if.else.81
  %111 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %data90 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %111, i32 0, i32 5
  %112 = load i64*, i64** %data90, align 8
  %113 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %data91 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %113, i32 0, i32 5
  %114 = load i64*, i64** %data91, align 8
  %115 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %len92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %115, i32 0, i32 3
  %116 = load i64, i64* %len92, align 8
  %117 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %len93 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %117, i32 0, i32 3
  %118 = load i64, i64* %len93, align 8
  %call94 = call i64* @_mpd_kmul_fnt(i64* %112, i64* %114, i64 %116, i64 %118, i64* %rsize)
  store i64* %call94, i64** %rdata, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.89, %if.then.83
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.75
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.72
  %119 = load i64*, i64** %rdata, align 8
  %cmp98 = icmp eq i64* %119, null
  br i1 %cmp98, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %if.end.97
  %120 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %121 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %120, i32 512, i32* %121)
  br label %return

if.end.100:                                       ; preds = %if.end.97
  %122 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call101 = call i32 @mpd_isdynamic_data(%struct.mpd_t* %122)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.then.103, label %if.end.105

if.then.103:                                      ; preds = %if.end.100
  %123 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %124 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data104 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %124, i32 0, i32 5
  %125 = load i64*, i64** %data104, align 8
  %126 = bitcast i64* %125 to i8*
  call void %123(i8* %126)
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.103, %if.end.100
  %127 = load i64*, i64** %rdata, align 8
  %128 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data106 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %128, i32 0, i32 5
  store i64* %127, i64** %data106, align 8
  %129 = load i64, i64* %rsize, align 8
  %130 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %130, i32 0, i32 4
  store i64 %129, i64* %alloc, align 8
  %131 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_dynamic_data(%struct.mpd_t* %131)
  br label %finish

finish:                                           ; preds = %if.end.105, %for.end, %if.then.14
  %132 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %133 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call107 = call zeroext i8 @mpd_sign(%struct.mpd_t* %133)
  %conv = zext i8 %call107 to i32
  %134 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call108 = call zeroext i8 @mpd_sign(%struct.mpd_t* %134)
  %conv109 = zext i8 %call108 to i32
  %xor = xor i32 %conv, %conv109
  %conv110 = trunc i32 %xor to i8
  call void @mpd_set_flags(%struct.mpd_t* %132, i8 zeroext %conv110)
  %135 = load %struct.mpd_t*, %struct.mpd_t** %big, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %135, i32 0, i32 1
  %136 = load i64, i64* %exp, align 8
  %137 = load %struct.mpd_t*, %struct.mpd_t** %small, align 8
  %exp111 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %137, i32 0, i32 1
  %138 = load i64, i64* %exp111, align 8
  %add112 = add i64 %136, %138
  %139 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp113 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %139, i32 0, i32 1
  store i64 %add112, i64* %exp113, align 8
  %140 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %140, i32 0, i32 5
  %141 = load i64*, i64** %data114, align 8
  %142 = load i64, i64* %rsize, align 8
  %call115 = call i64 @_mpd_real_size(i64* %141, i64 %142)
  %143 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len116 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %143, i32 0, i32 3
  store i64 %call115, i64* %len116, align 8
  %144 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %145 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len117 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %145, i32 0, i32 3
  %146 = load i64, i64* %len117, align 8
  %147 = load i32*, i32** %status.addr, align 8
  %call118 = call i32 @mpd_qresize(%struct.mpd_t* %144, i64 %146, i32* %147)
  %148 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %148)
  br label %return

return:                                           ; preds = %finish, %if.then.99, %if.then.46, %if.end, %if.then.5
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qln10(%struct.mpd_t* %result, i64 %prec, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %prec.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  %varcontext = alloca %struct.mpd_context_t, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %tmp_data = alloca [64 x i64], align 16
  %tmp = alloca %struct.mpd_t, align 8
  %static10_data = alloca [1 x i64], align 8
  %static10 = alloca %struct.mpd_t, align 8
  %klist = alloca [64 x i64], align 16
  %rnd = alloca i64, align 8
  %shift = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i64 %prec, i64* %prec.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tmp_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = bitcast [1 x i64]* %static10_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @mpd_qln10.static10_data to i8*), i64 8, i32 8, i1 false)
  %flags3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 0
  store i8 -112, i8* %flags3, align 1
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 1
  store i64 0, i64* %exp4, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 2
  store i64 2, i64* %digits5, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 3
  store i64 1, i64* %len6, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 4
  store i64 1, i64* %alloc7, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %static10, i32 0, i32 5
  %arraydecay9 = getelementptr inbounds [1 x i64], [1 x i64]* %static10_data, i32 0, i32 0
  store i64* %arraydecay9, i64** %data8, align 8
  %1 = load i64, i64* %prec.addr, align 8
  %sub = sub i64 1216, %1
  store i64 %sub, i64* %shift, align 8
  %2 = load i64, i64* %shift, align 8
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %shift, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %3, %cond.false ]
  store i64 %cond, i64* %shift, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load i64, i64* %shift, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call = call i64 @mpd_qshiftr(%struct.mpd_t* %4, %struct.mpd_t* @_mpd_ln10, i64 %5, i32* %6)
  store i64 %call, i64* %rnd, align 8
  %7 = load i64, i64* %rnd, align 8
  %cmp14 = icmp eq i64 %7, -1
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 512, i32* %9)
  br label %return

if.end:                                           ; preds = %cond.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 2
  %11 = load i64, i64* %digits15, align 8
  %sub16 = sub i64 %11, 1
  %sub17 = sub i64 0, %sub16
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  store i64 %sub17, i64* %exp18, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %13 = load i64, i64* %prec.addr, align 8
  %cmp19 = icmp slt i64 %13, 1216
  br i1 %cmp19, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.end
  %14 = load i64, i64* %prec.addr, align 8
  %prec21 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 0
  store i64 %14, i64* %prec21, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load i64, i64* %rnd, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @_mpd_apply_round_excess(%struct.mpd_t* %15, i64 %16, %struct.mpd_context_t* %maxcontext, i32* %17)
  %18 = load i32*, i32** %status.addr, align 8
  %19 = load i32, i32* %18, align 4
  %or = or i32 %19, 4160
  store i32 %or, i32* %18, align 4
  br label %return

if.end.22:                                        ; preds = %if.end
  call void @mpd_maxcontext(%struct.mpd_context_t* %varcontext)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 6
  store i32 8, i32* %round, align 4
  %arraydecay23 = getelementptr inbounds [64 x i64], [64 x i64]* %klist, i32 0, i32 0
  %20 = load i64, i64* %prec.addr, align 8
  %add = add i64 %20, 2
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 1
  %22 = load i64, i64* %exp24, align 8
  %sub25 = sub i64 0, %22
  %call26 = call i32 @ln_schedule_prec(i64* %arraydecay23, i64 %add, i64 %sub25)
  store i32 %call26, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.22
  %23 = load i32, i32* %i, align 4
  %cmp27 = icmp sge i32 %23, 0
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4
  %idxprom = sext i32 %24 to i64
  %arrayidx = getelementptr [64 x i64], [64 x i64]* %klist, i32 0, i64 %idxprom
  %25 = load i64, i64* %arrayidx, align 8
  %mul = mul i64 2, %25
  %add28 = add i64 %mul, 3
  %prec29 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  store i64 %add28, i64* %prec29, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 0
  %27 = load i8, i8* %flags30, align 1
  %conv = zext i8 %27 to i32
  %xor = xor i32 %conv, 1
  %conv31 = trunc i32 %xor to i8
  store i8 %conv31, i8* %flags30, align 1
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qexp(%struct.mpd_t* %tmp, %struct.mpd_t* %28, %struct.mpd_context_t* %varcontext, i32* %29)
  %30 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %flags32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 0
  %31 = load i8, i8* %flags32, align 1
  %conv33 = zext i8 %31 to i32
  %xor34 = xor i32 %conv33, 1
  %conv35 = trunc i32 %xor34 to i8
  store i8 %conv35, i8* %flags32, align 1
  %32 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %tmp, %struct.mpd_t* %static10, %struct.mpd_t* %tmp, %struct.mpd_context_t* %varcontext, i32* %32)
  %33 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %tmp, %struct.mpd_t* %tmp, %struct.mpd_t* @one, %struct.mpd_context_t* %maxcontext, i32* %33)
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %36 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %34, %struct.mpd_t* %35, %struct.mpd_t* %tmp, %struct.mpd_context_t* %maxcontext, i32* %36)
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call36 = call i32 @mpd_isspecial(%struct.mpd_t* %37)
  %tobool = icmp ne i32 %call36, 0
  br i1 %tobool, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %for.body
  br label %for.end

if.end.38:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.38
  %38 = load i32, i32* %i, align 4
  %dec = add i32 %38, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.37, %for.cond
  call void @mpd_del(%struct.mpd_t* %tmp)
  %39 = load i64, i64* %prec.addr, align 8
  %prec39 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 0
  store i64 %39, i64* %prec39, align 8
  %40 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %41 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %40, %struct.mpd_context_t* %maxcontext, i32* %41)
  br label %return

return:                                           ; preds = %for.end, %if.then.20, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_apply_round_excess(%struct.mpd_t* %dec, i64 %rnd, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %rnd.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %carry = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i64 %rnd, i64* %rnd.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %1 = load i64, i64* %rnd.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call = call i32 @_mpd_rnd_incr(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 5
  %4 = load i64*, i64** %data, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 3
  %6 = load i64, i64* %len, align 8
  %call1 = call i64 @_mpd_baseincr(i64* %4, i64 %6)
  store i64 %call1, i64* %carry, align 8
  %7 = load i64, i64* %carry, align 8
  %tobool2 = icmp ne i64 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end.12

if.then.3:                                        ; preds = %if.then
  %8 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len4, align 8
  %add = add i64 %10, 1
  %11 = load i32*, i32** %status.addr, align 8
  %call5 = call i32 @mpd_qresize(%struct.mpd_t* %8, i64 %add, i32* %11)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %if.then.3
  br label %if.end.13

if.end:                                           ; preds = %if.then.3
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 3
  %13 = load i64, i64* %len8, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 5
  %15 = load i64*, i64** %data9, align 8
  %arrayidx = getelementptr i64, i64* %15, i64 %13
  store i64 1, i64* %arrayidx, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  %17 = load i64, i64* %len10, align 8
  %add11 = add i64 %17, 1
  store i64 %add11, i64* %len10, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %18 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %18)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.7, %if.end.12, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @ln_schedule_prec(i64* %klist, i64 %maxprec, i64 %initprec) #2 {
entry:
  %retval = alloca i32, align 4
  %klist.addr = alloca i64*, align 8
  %maxprec.addr = alloca i64, align 8
  %initprec.addr = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i32, align 4
  store i64* %klist, i64** %klist.addr, align 8
  store i64 %maxprec, i64* %maxprec.addr, align 8
  store i64 %initprec, i64* %initprec.addr, align 8
  %0 = load i64, i64* %maxprec.addr, align 8
  %1 = load i64, i64* %initprec.addr, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  %2 = load i64, i64* %maxprec.addr, align 8
  store i64 %2, i64* %k, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %3 = load i64, i64* %k, align 8
  %add = add i64 %3, 2
  %div = sdiv i64 %add, 2
  store i64 %div, i64* %k, align 8
  %4 = load i64, i64* %k, align 8
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i64*, i64** %klist.addr, align 8
  %arrayidx = getelementptr i64, i64* %6, i64 %idxprom
  store i64 %4, i64* %arrayidx, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i64, i64* %k, align 8
  %8 = load i64, i64* %initprec.addr, align 8
  %cmp1 = icmp sgt i64 %7, %8
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %9, 1
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %5, %struct.mpd_context_t* %6, i32* %7)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qln(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %adjexp = alloca i64, align 8
  %t = alloca i64, align 8
  %t1_data = alloca [64 x i64], align 16
  %t1 = alloca %struct.mpd_t, align 8
  %t2_data = alloca [64 x i64], align 16
  %t2 = alloca %struct.mpd_t, align 8
  %ulp_data = alloca [64 x i64], align 16
  %ulp = alloca %struct.mpd_t, align 8
  %aa_data = alloca [64 x i64], align 16
  %aa = alloca %struct.mpd_t, align 8
  %prec = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.87

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %6, i32 256, i32* %7)
  br label %if.end.87

if.end.7:                                         ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %8, i8 zeroext 0, i8 zeroext 2)
  br label %if.end.87

if.end.8:                                         ; preds = %entry
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %9)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %10, i8 zeroext 1, i8 zeroext 2)
  br label %if.end.87

if.end.12:                                        ; preds = %if.end.8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call i32 @mpd_isnegative(%struct.mpd_t* %11)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %12, i32 256, i32* %13)
  br label %if.end.87

if.end.16:                                        ; preds = %if.end.12
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call17 = call i32 @_mpd_cmp(%struct.mpd_t* %14, %struct.mpd_t* @one)
  %cmp = icmp eq i32 %call17, 0
  br i1 %cmp, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.16
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %15, i8 zeroext 0, i64 0, i64 0)
  br label %if.end.87

if.end.19:                                        ; preds = %if.end.16
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call20 = call i64 @mpd_adjexp(%struct.mpd_t* %16)
  store i64 %call20, i64* %adjexp, align 8
  %17 = load i64, i64* %adjexp, align 8
  %cmp21 = icmp slt i64 %17, 0
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.19
  %18 = load i64, i64* %adjexp, align 8
  %sub = sub i64 0, %18
  %sub22 = sub i64 %sub, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end.19
  %19 = load i64, i64* %adjexp, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub22, %cond.true ], [ %19, %cond.false ]
  store i64 %cond, i64* %t, align 8
  %20 = load i64, i64* %t, align 8
  %mul = mul i64 %20, 2
  store i64 %mul, i64* %t, align 8
  %21 = load i64, i64* %t, align 8
  %call23 = call i32 @mpd_exp_digits(i64 %21)
  %sub24 = sub i32 %call23, 1
  %conv = sext i32 %sub24 to i64
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %22, i32 0, i32 1
  %23 = load i64, i64* %emax, align 8
  %cmp25 = icmp sgt i64 %conv, %23
  br i1 %cmp25, label %if.then.27, label %if.end.31

if.then.27:                                       ; preds = %cond.end
  %24 = load i32*, i32** %status.addr, align 8
  %25 = load i32, i32* %24, align 4
  %or = or i32 %25, 6208
  store i32 %or, i32* %24, align 4
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load i64, i64* %adjexp, align 8
  %cmp28 = icmp slt i64 %27, 0
  %conv29 = zext i1 %cmp28 to i32
  %conv30 = trunc i32 %conv29 to i8
  call void @mpd_setspecial(%struct.mpd_t* %26, i8 zeroext %conv30, i8 zeroext 2)
  br label %if.end.87

if.end.31:                                        ; preds = %cond.end
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = bitcast %struct.mpd_context_t* %workctx to i8*
  %30 = bitcast %struct.mpd_context_t* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %31 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %allcr = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %31, i32 0, i32 8
  %32 = load i32, i32* %allcr, align 4
  %tobool32 = icmp ne i32 %32, 0
  br i1 %tobool32, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %if.end.31
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %t1_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 0
  store i8 48, i8* %flags34, align 1
  %exp35 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 1
  store i64 0, i64* %exp35, align 8
  %digits36 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 2
  store i64 0, i64* %digits36, align 8
  %len37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 3
  store i64 0, i64* %len37, align 8
  %alloc38 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 4
  store i64 64, i64* %alloc38, align 8
  %data39 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 5
  %arraydecay40 = getelementptr inbounds [64 x i64], [64 x i64]* %t2_data, i32 0, i32 0
  store i64* %arraydecay40, i64** %data39, align 8
  %flags41 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 0
  store i8 48, i8* %flags41, align 1
  %exp42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 1
  store i64 0, i64* %exp42, align 8
  %digits43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 2
  store i64 0, i64* %digits43, align 8
  %len44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 3
  store i64 0, i64* %len44, align 8
  %alloc45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 4
  store i64 64, i64* %alloc45, align 8
  %data46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 5
  %arraydecay47 = getelementptr inbounds [64 x i64], [64 x i64]* %ulp_data, i32 0, i32 0
  store i64* %arraydecay47, i64** %data46, align 8
  %flags48 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 0
  store i8 48, i8* %flags48, align 1
  %exp49 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  store i64 0, i64* %exp49, align 8
  %digits50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 2
  store i64 0, i64* %digits50, align 8
  %len51 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 3
  store i64 0, i64* %len51, align 8
  %alloc52 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 4
  store i64 64, i64* %alloc52, align 8
  %data53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 5
  %arraydecay54 = getelementptr inbounds [64 x i64], [64 x i64]* %aa_data, i32 0, i32 0
  store i64* %arraydecay54, i64** %data53, align 8
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp55 = icmp eq %struct.mpd_t* %33, %34
  br i1 %cmp55, label %if.then.57, label %if.end.62

if.then.57:                                       ; preds = %if.then.33
  %35 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %36 = load i32*, i32** %status.addr, align 8
  %call58 = call i32 @mpd_qcopy(%struct.mpd_t* %aa, %struct.mpd_t* %35, i32* %36)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %if.then.57
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %38 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %37, i32 512, i32* %38)
  br label %if.end.87

if.end.61:                                        ; preds = %if.then.57
  store %struct.mpd_t* %aa, %struct.mpd_t** %a.addr, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.then.33
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 0, i32* %clamp, align 4
  %39 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec63 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %39, i32 0, i32 0
  %40 = load i64, i64* %prec63, align 8
  %add = add i64 %40, 3
  store i64 %add, i64* %prec, align 8
  br label %while.body

while.body:                                       ; preds = %if.end.62, %if.end.85
  %41 = load i64, i64* %prec, align 8
  %prec64 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %41, i64* %prec64, align 8
  %42 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %43 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %44 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qln(%struct.mpd_t* %42, %struct.mpd_t* %43, %struct.mpd_context_t* %workctx, i32* %44)
  %45 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp65 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %45, i32 0, i32 1
  %46 = load i64, i64* %exp65, align 8
  %47 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits66 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %47, i32 0, i32 2
  %48 = load i64, i64* %digits66, align 8
  %add67 = add i64 %46, %48
  %prec68 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %49 = load i64, i64* %prec68, align 8
  %sub69 = sub i64 %add67, %49
  call void @_ssettriple(%struct.mpd_t* %ulp, i8 zeroext 0, i64 1, i64 %sub69)
  %50 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec70 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %50, i32 0, i32 0
  %51 = load i64, i64* %prec70, align 8
  %prec71 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %51, i64* %prec71, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status72 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qadd(%struct.mpd_t* %t1, %struct.mpd_t* %52, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status72)
  %53 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status73 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qsub(%struct.mpd_t* %t2, %struct.mpd_t* %53, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status73)
  %54 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call74 = call i32 @mpd_isspecial(%struct.mpd_t* %54)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.then.82, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %55 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call76 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %55)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.then.82, label %lor.lhs.false.78

lor.lhs.false.78:                                 ; preds = %lor.lhs.false
  %56 = load i32*, i32** %status.addr, align 8
  %call79 = call i32 @mpd_qcmp(%struct.mpd_t* %t1, %struct.mpd_t* %t2, i32* %56)
  %cmp80 = icmp eq i32 %call79, 0
  br i1 %cmp80, label %if.then.82, label %if.end.85

if.then.82:                                       ; preds = %lor.lhs.false.78, %lor.lhs.false, %while.body
  %57 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp83 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %57, i32 0, i32 7
  %58 = load i32, i32* %clamp83, align 4
  %clamp84 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 %58, i32* %clamp84, align 4
  %59 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %60 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %59, %struct.mpd_context_t* %workctx, i32* %60)
  %61 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %61, %struct.mpd_context_t* %workctx, i32* %62)
  br label %while.end

if.end.85:                                        ; preds = %lor.lhs.false.78
  %63 = load i64, i64* %prec, align 8
  %add86 = add i64 %63, 19
  store i64 %add86, i64* %prec, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.82
  call void @mpd_del(%struct.mpd_t* %t1)
  call void @mpd_del(%struct.mpd_t* %t2)
  call void @mpd_del(%struct.mpd_t* %ulp)
  call void @mpd_del(%struct.mpd_t* %aa)
  br label %if.end.87

if.else:                                          ; preds = %if.end.31
  %64 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %65 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %66 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qln(%struct.mpd_t* %64, %struct.mpd_t* %65, %struct.mpd_context_t* %workctx, i32* %66)
  %67 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %68 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %67, %struct.mpd_context_t* %workctx, i32* %68)
  %69 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %70 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %69, %struct.mpd_context_t* %workctx, i32* %70)
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.3, %if.then.6, %if.end.7, %if.then.11, %if.then.15, %if.then.18, %if.then.27, %if.then.60, %if.else, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qln(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %varcontext = alloca %struct.mpd_context_t, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %z = alloca %struct.mpd_t*, align 8
  %v_data = alloca [64 x i64], align 16
  %v = alloca %struct.mpd_t, align 8
  %vtmp_data = alloca [64 x i64], align 16
  %vtmp = alloca %struct.mpd_t, align 8
  %tmp_data = alloca [64 x i64], align 16
  %tmp = alloca %struct.mpd_t, align 8
  %klist = alloca [64 x i64], align 16
  %maxprec = alloca i64, align 8
  %shift = alloca i64, align 8
  %t = alloca i64, align 8
  %a_digits = alloca i64, align 8
  %a_exp = alloca i64, align 8
  %dummy = alloca i64, align 8
  %x = alloca i64, align 8
  %i = alloca i32, align 4
  %cmp56 = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %z, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %v_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 0
  store i8 48, i8* %flags1, align 1
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 1
  store i64 0, i64* %exp2, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 2
  store i64 0, i64* %digits3, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 3
  store i64 0, i64* %len4, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 4
  store i64 64, i64* %alloc5, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 5
  %arraydecay7 = getelementptr inbounds [64 x i64], [64 x i64]* %vtmp_data, i32 0, i32 0
  store i64* %arraydecay7, i64** %data6, align 8
  %flags8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags8, align 1
  %exp9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp9, align 8
  %digits10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 2
  store i64 0, i64* %digits10, align 8
  %len11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 3
  store i64 0, i64* %len11, align 8
  %alloc12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 64, i64* %alloc12, align 8
  %data13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  %arraydecay14 = getelementptr inbounds [64 x i64], [64 x i64]* %tmp_data, i32 0, i32 0
  store i64* %arraydecay14, i64** %data13, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %v, %struct.mpd_t* %1, i32* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %3, i32 512, i32* %4)
  br label %finish

if.end:                                           ; preds = %entry
  call void @_mpd_get_msdigits(i64* %dummy, i64* %x, %struct.mpd_t* %v, i32 3)
  %5 = load i64, i64* %x, align 8
  %cmp = icmp ult i64 %5, 10
  br i1 %cmp, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end
  %6 = load i64, i64* %x, align 8
  %mul = mul i64 %6, 10
  store i64 %mul, i64* %x, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.end
  %7 = load i64, i64* %x, align 8
  %cmp26 = icmp ult i64 %7, 100
  br i1 %cmp26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.25
  %8 = load i64, i64* %x, align 8
  %mul28 = mul i64 %8, 10
  store i64 %mul28, i64* %x, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.25
  %9 = load i64, i64* %x, align 8
  %sub = sub i64 %9, 100
  store i64 %sub, i64* %x, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 2
  %11 = load i64, i64* %digits30, align 8
  store i64 %11, i64* %a_digits, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp31 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp31, align 8
  store i64 %13, i64* %a_exp, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_minalloc(%struct.mpd_t* %14)
  %15 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %15)
  %16 = load i64, i64* %x, align 8
  %arrayidx = getelementptr [900 x i16], [900 x i16]* @lnapprox, i32 0, i64 %16
  %17 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %17 to i64
  %18 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %data32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 5
  %19 = load i64*, i64** %data32, align 8
  %arrayidx33 = getelementptr i64, i64* %19, i64 0
  store i64 %conv, i64* %arrayidx33, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %len34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 3
  store i64 1, i64* %len34, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %exp35 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 1
  store i64 -3, i64* %exp35, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_setdigits(%struct.mpd_t* %22)
  %23 = load i64, i64* %x, align 8
  %cmp36 = icmp ule i64 %23, 400
  br i1 %cmp36, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.end.29
  %24 = load i64, i64* %a_digits, align 8
  %sub39 = sub i64 %24, 1
  %sub40 = sub i64 0, %sub39
  %exp41 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 1
  store i64 %sub40, i64* %exp41, align 8
  %25 = load i64, i64* %a_exp, align 8
  %26 = load i64, i64* %a_digits, align 8
  %add = add i64 %25, %26
  %sub42 = sub i64 %add, 1
  store i64 %sub42, i64* %t, align 8
  br label %if.end.46

if.else:                                          ; preds = %if.end.29
  %27 = load i64, i64* %a_digits, align 8
  %sub43 = sub i64 0, %27
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 1
  store i64 %sub43, i64* %exp44, align 8
  %28 = load i64, i64* %a_exp, align 8
  %29 = load i64, i64* %a_digits, align 8
  %add45 = add i64 %28, %29
  store i64 %add45, i64* %t, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_set_negative(%struct.mpd_t* %30)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else, %if.then.38
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  call void @mpd_maxcontext(%struct.mpd_context_t* %varcontext)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 6
  store i32 8, i32* %round, align 4
  %31 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %31, i32 0, i32 0
  %32 = load i64, i64* %prec, align 8
  %add47 = add i64 %32, 2
  store i64 %add47, i64* %maxprec, align 8
  %33 = load i64, i64* %t, align 8
  %cmp48 = icmp eq i64 %33, 0
  br i1 %cmp48, label %land.lhs.true, label %if.end.89

land.lhs.true:                                    ; preds = %if.end.46
  %34 = load i64, i64* %x, align 8
  %cmp50 = icmp ule i64 %34, 15
  br i1 %cmp50, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %35 = load i64, i64* %x, align 8
  %cmp52 = icmp uge i64 %35, 800
  br i1 %cmp52, label %if.then.54, label %if.end.89

if.then.54:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %call57 = call i32 @_mpd_cmp(%struct.mpd_t* %v, %struct.mpd_t* @one)
  store i32 %call57, i32* %cmp56, align 4
  %status58 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @_mpd_qsub(%struct.mpd_t* %tmp, %struct.mpd_t* %v, %struct.mpd_t* @one, %struct.mpd_context_t* %maxcontext, i32* %status58)
  %status59 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %36 = load i32, i32* %status59, align 4
  %and = and i32 %36, 958
  %tobool60 = icmp ne i32 %and, 0
  br i1 %tobool60, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.then.54
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %38 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %37, i32 512, i32* %38)
  br label %finish

if.end.62:                                        ; preds = %if.then.54
  %39 = load i32, i32* %cmp56, align 4
  %cmp63 = icmp slt i32 %39, 0
  br i1 %cmp63, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %if.end.62
  %exp66 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  %40 = load i64, i64* %exp66, align 8
  %add67 = add i64 %40, 1
  store i64 %add67, i64* %exp66, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %if.end.62
  %call69 = call i64 @mpd_adjexp(%struct.mpd_t* %tmp)
  %41 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call70 = call i64 @mpd_etiny(%struct.mpd_context_t* %41)
  %cmp71 = icmp slt i64 %call69, %call70
  br i1 %cmp71, label %if.then.73, label %if.end.79

if.then.73:                                       ; preds = %if.end.68
  %42 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %43 = load i32, i32* %cmp56, align 4
  %cmp74 = icmp slt i32 %43, 0
  %conv75 = zext i1 %cmp74 to i32
  %conv76 = trunc i32 %conv75 to i8
  %44 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call77 = call i64 @mpd_etiny(%struct.mpd_context_t* %44)
  %sub78 = sub i64 %call77, 1
  call void @_settriple(%struct.mpd_t* %42, i8 zeroext %conv76, i64 1, i64 %sub78)
  br label %finish

if.end.79:                                        ; preds = %if.end.68
  %exp80 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  %45 = load i64, i64* %exp80, align 8
  %sub81 = sub i64 %45, 1
  store i64 %sub81, i64* %exp80, align 8
  %call82 = call i64 @mpd_adjexp(%struct.mpd_t* %tmp)
  %cmp83 = icmp slt i64 %call82, 0
  br i1 %cmp83, label %if.then.85, label %if.end.88

if.then.85:                                       ; preds = %if.end.79
  %46 = load i64, i64* %maxprec, align 8
  %call86 = call i64 @mpd_adjexp(%struct.mpd_t* %tmp)
  %sub87 = sub i64 %46, %call86
  store i64 %sub87, i64* %maxprec, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.85, %if.end.79
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %lor.lhs.false, %if.end.46
  %arraydecay90 = getelementptr inbounds [64 x i64], [64 x i64]* %klist, i32 0, i32 0
  %47 = load i64, i64* %maxprec, align 8
  %call91 = call i32 @ln_schedule_prec(i64* %arraydecay90, i64 %47, i64 2)
  store i32 %call91, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.89
  %48 = load i32, i32* %i, align 4
  %cmp92 = icmp sge i32 %48, 0
  br i1 %cmp92, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %49 = load i32, i32* %i, align 4
  %idxprom = sext i32 %49 to i64
  %arrayidx94 = getelementptr [64 x i64], [64 x i64]* %klist, i32 0, i64 %idxprom
  %50 = load i64, i64* %arrayidx94, align 8
  %mul95 = mul i64 2, %50
  %add96 = add i64 %mul95, 3
  %prec97 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  store i64 %add96, i64* %prec97, align 8
  %51 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %flags98 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %51, i32 0, i32 0
  %52 = load i8, i8* %flags98, align 1
  %conv99 = zext i8 %52 to i32
  %xor = xor i32 %conv99, 1
  %conv100 = trunc i32 %xor to i8
  store i8 %conv100, i8* %flags98, align 1
  %53 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %54 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qexp(%struct.mpd_t* %tmp, %struct.mpd_t* %53, %struct.mpd_context_t* %varcontext, i32* %54)
  %55 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %flags101 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %55, i32 0, i32 0
  %56 = load i8, i8* %flags101, align 1
  %conv102 = zext i8 %56 to i32
  %xor103 = xor i32 %conv102, 1
  %conv104 = trunc i32 %xor103 to i8
  store i8 %conv104, i8* %flags101, align 1
  %digits105 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 2
  %57 = load i64, i64* %digits105, align 8
  %prec106 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %58 = load i64, i64* %prec106, align 8
  %cmp107 = icmp sgt i64 %57, %58
  br i1 %cmp107, label %if.then.109, label %if.else.116

if.then.109:                                      ; preds = %for.body
  %digits110 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %v, i32 0, i32 2
  %59 = load i64, i64* %digits110, align 8
  %prec111 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %60 = load i64, i64* %prec111, align 8
  %sub112 = sub i64 %59, %60
  store i64 %sub112, i64* %shift, align 8
  %61 = load i64, i64* %shift, align 8
  %62 = load i32*, i32** %status.addr, align 8
  %call113 = call i64 @mpd_qshiftr(%struct.mpd_t* %vtmp, %struct.mpd_t* %v, i64 %61, i32* %62)
  %63 = load i64, i64* %shift, align 8
  %exp114 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 1
  %64 = load i64, i64* %exp114, align 8
  %add115 = add i64 %64, %63
  store i64 %add115, i64* %exp114, align 8
  %65 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %tmp, %struct.mpd_t* %vtmp, %struct.mpd_t* %tmp, %struct.mpd_context_t* %varcontext, i32* %65)
  br label %if.end.117

if.else.116:                                      ; preds = %for.body
  %66 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %tmp, %struct.mpd_t* %v, %struct.mpd_t* %tmp, %struct.mpd_context_t* %varcontext, i32* %66)
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.116, %if.then.109
  %67 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %tmp, %struct.mpd_t* %tmp, %struct.mpd_t* @one, %struct.mpd_context_t* %maxcontext, i32* %67)
  %68 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %69 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %70 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %68, %struct.mpd_t* %69, %struct.mpd_t* %tmp, %struct.mpd_context_t* %maxcontext, i32* %70)
  %71 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %call118 = call i32 @mpd_isspecial(%struct.mpd_t* %71)
  %tobool119 = icmp ne i32 %call118, 0
  br i1 %tobool119, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.end.117
  br label %for.end

if.end.121:                                       ; preds = %if.end.117
  br label %for.inc

for.inc:                                          ; preds = %if.end.121
  %72 = load i32, i32* %i, align 4
  %dec = add i32 %72, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.120, %for.cond
  %73 = load i64, i64* %maxprec, align 8
  %add122 = add i64 %73, 1
  %74 = load i32*, i32** %status.addr, align 8
  call void @mpd_qln10(%struct.mpd_t* %v, i64 %add122, i32* %74)
  %75 = load i64, i64* %t, align 8
  %76 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul_ssize(%struct.mpd_t* %tmp, %struct.mpd_t* %v, i64 %75, %struct.mpd_context_t* %maxcontext, i32* %76)
  %77 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %78 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %79 = load i32*, i32** %status.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %77, %struct.mpd_t* %tmp, %struct.mpd_t* %78, %struct.mpd_context_t* %maxcontext, i32* %79)
  br label %finish

finish:                                           ; preds = %for.end, %if.then.73, %if.then.61, %if.then
  %80 = load i32*, i32** %status.addr, align 8
  %81 = load i32, i32* %80, align 4
  %or = or i32 %81, 4160
  store i32 %or, i32* %80, align 4
  call void @mpd_del(%struct.mpd_t* %v)
  call void @mpd_del(%struct.mpd_t* %vtmp)
  call void @mpd_del(%struct.mpd_t* %tmp)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qlog10(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %adjexp = alloca i64, align 8
  %t = alloca i64, align 8
  %sign = alloca i8, align 1
  %t1_data = alloca [64 x i64], align 16
  %t1 = alloca %struct.mpd_t, align 8
  %t2_data = alloca [64 x i64], align 16
  %t2 = alloca %struct.mpd_t, align 8
  %ulp_data = alloca [64 x i64], align 16
  %ulp = alloca %struct.mpd_t, align 8
  %aa_data = alloca [64 x i64], align 16
  %aa = alloca %struct.mpd_t, align 8
  %prec = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %1 = bitcast %struct.mpd_context_t* %workctx to i8*
  %2 = bitcast %struct.mpd_context_t* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_context_t* %6, i32* %7)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.92

if.end:                                           ; preds = %if.then
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %8)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %9, i32 256, i32* %10)
  br label %if.end.92

if.end.7:                                         ; preds = %if.end
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %11, i8 zeroext 0, i8 zeroext 2)
  br label %if.end.92

if.end.8:                                         ; preds = %entry
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %12)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %13, i8 zeroext 1, i8 zeroext 2)
  br label %if.end.92

if.end.12:                                        ; preds = %if.end.8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call i32 @mpd_isnegative(%struct.mpd_t* %14)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %15, i32 256, i32* %16)
  br label %if.end.92

if.end.16:                                        ; preds = %if.end.12
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call17 = call i32 @mpd_coeff_ispow10(%struct.mpd_t* %17)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.23

if.then.19:                                       ; preds = %if.end.16
  store i8 0, i8* %sign, align 1
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call20 = call i64 @mpd_adjexp(%struct.mpd_t* %18)
  store i64 %call20, i64* %adjexp, align 8
  %19 = load i64, i64* %adjexp, align 8
  %cmp = icmp slt i64 %19, 0
  br i1 %cmp, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.19
  store i8 1, i8* %sign, align 1
  %20 = load i64, i64* %adjexp, align 8
  %sub = sub i64 0, %20
  store i64 %sub, i64* %adjexp, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.then.19
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load i8, i8* %sign, align 1
  %23 = load i64, i64* %adjexp, align 8
  call void @_settriple(%struct.mpd_t* %21, i8 zeroext %22, i64 %23, i64 0)
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %24, %struct.mpd_context_t* %workctx, i32* %25)
  br label %if.end.92

if.end.23:                                        ; preds = %if.end.16
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call24 = call i64 @mpd_adjexp(%struct.mpd_t* %26)
  store i64 %call24, i64* %adjexp, align 8
  %27 = load i64, i64* %adjexp, align 8
  %cmp25 = icmp slt i64 %27, 0
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.23
  %28 = load i64, i64* %adjexp, align 8
  %sub26 = sub i64 0, %28
  %sub27 = sub i64 %sub26, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end.23
  %29 = load i64, i64* %adjexp, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub27, %cond.true ], [ %29, %cond.false ]
  store i64 %cond, i64* %t, align 8
  %30 = load i64, i64* %t, align 8
  %call28 = call i32 @mpd_exp_digits(i64 %30)
  %sub29 = sub i32 %call28, 1
  %conv = sext i32 %sub29 to i64
  %31 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %31, i32 0, i32 1
  %32 = load i64, i64* %emax, align 8
  %cmp30 = icmp sgt i64 %conv, %32
  br i1 %cmp30, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %cond.end
  %33 = load i32*, i32** %status.addr, align 8
  %34 = load i32, i32* %33, align 4
  %or = or i32 %34, 6208
  store i32 %or, i32* %33, align 4
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %36 = load i64, i64* %adjexp, align 8
  %cmp33 = icmp slt i64 %36, 0
  %conv34 = zext i1 %cmp33 to i32
  %conv35 = trunc i32 %conv34 to i8
  call void @mpd_setspecial(%struct.mpd_t* %35, i8 zeroext %conv35, i8 zeroext 2)
  br label %if.end.92

if.end.36:                                        ; preds = %cond.end
  %37 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %allcr = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %37, i32 0, i32 8
  %38 = load i32, i32* %allcr, align 4
  %tobool37 = icmp ne i32 %38, 0
  br i1 %tobool37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.end.36
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t1, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %t1_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags39 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 0
  store i8 48, i8* %flags39, align 1
  %exp40 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 1
  store i64 0, i64* %exp40, align 8
  %digits41 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 2
  store i64 0, i64* %digits41, align 8
  %len42 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 3
  store i64 0, i64* %len42, align 8
  %alloc43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 4
  store i64 64, i64* %alloc43, align 8
  %data44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t2, i32 0, i32 5
  %arraydecay45 = getelementptr inbounds [64 x i64], [64 x i64]* %t2_data, i32 0, i32 0
  store i64* %arraydecay45, i64** %data44, align 8
  %flags46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 0
  store i8 48, i8* %flags46, align 1
  %exp47 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 1
  store i64 0, i64* %exp47, align 8
  %digits48 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 2
  store i64 0, i64* %digits48, align 8
  %len49 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 3
  store i64 0, i64* %len49, align 8
  %alloc50 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 4
  store i64 64, i64* %alloc50, align 8
  %data51 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ulp, i32 0, i32 5
  %arraydecay52 = getelementptr inbounds [64 x i64], [64 x i64]* %ulp_data, i32 0, i32 0
  store i64* %arraydecay52, i64** %data51, align 8
  %flags53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 0
  store i8 48, i8* %flags53, align 1
  %exp54 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  store i64 0, i64* %exp54, align 8
  %digits55 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 2
  store i64 0, i64* %digits55, align 8
  %len56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 3
  store i64 0, i64* %len56, align 8
  %alloc57 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 4
  store i64 64, i64* %alloc57, align 8
  %data58 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 5
  %arraydecay59 = getelementptr inbounds [64 x i64], [64 x i64]* %aa_data, i32 0, i32 0
  store i64* %arraydecay59, i64** %data58, align 8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %40 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp60 = icmp eq %struct.mpd_t* %39, %40
  br i1 %cmp60, label %if.then.62, label %if.end.67

if.then.62:                                       ; preds = %if.then.38
  %41 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %42 = load i32*, i32** %status.addr, align 8
  %call63 = call i32 @mpd_qcopy(%struct.mpd_t* %aa, %struct.mpd_t* %41, i32* %42)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %if.then.62
  %43 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %44 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %43, i32 512, i32* %44)
  br label %if.end.92

if.end.66:                                        ; preds = %if.then.62
  store %struct.mpd_t* %aa, %struct.mpd_t** %a.addr, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.38
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 0, i32* %clamp, align 4
  %45 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec68 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %45, i32 0, i32 0
  %46 = load i64, i64* %prec68, align 8
  %add = add i64 %46, 3
  store i64 %add, i64* %prec, align 8
  br label %while.body

while.body:                                       ; preds = %if.end.67, %if.end.90
  %47 = load i64, i64* %prec, align 8
  %prec69 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %47, i64* %prec69, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %49 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %50 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qlog10(i32 0, %struct.mpd_t* %48, %struct.mpd_t* %49, %struct.mpd_context_t* %workctx, i32* %50)
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp70 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %51, i32 0, i32 1
  %52 = load i64, i64* %exp70, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits71 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %53, i32 0, i32 2
  %54 = load i64, i64* %digits71, align 8
  %add72 = add i64 %52, %54
  %prec73 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %55 = load i64, i64* %prec73, align 8
  %sub74 = sub i64 %add72, %55
  call void @_ssettriple(%struct.mpd_t* %ulp, i8 zeroext 0, i64 1, i64 %sub74)
  %56 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec75 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %56, i32 0, i32 0
  %57 = load i64, i64* %prec75, align 8
  %prec76 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %57, i64* %prec76, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status77 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qadd(%struct.mpd_t* %t1, %struct.mpd_t* %58, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status77)
  %59 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status78 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qsub(%struct.mpd_t* %t2, %struct.mpd_t* %59, %struct.mpd_t* %ulp, %struct.mpd_context_t* %workctx, i32* %status78)
  %60 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call79 = call i32 @mpd_isspecial(%struct.mpd_t* %60)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.then.87, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %61 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call81 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %61)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.then.87, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %lor.lhs.false
  %62 = load i32*, i32** %status.addr, align 8
  %call84 = call i32 @mpd_qcmp(%struct.mpd_t* %t1, %struct.mpd_t* %t2, i32* %62)
  %cmp85 = icmp eq i32 %call84, 0
  br i1 %cmp85, label %if.then.87, label %if.end.90

if.then.87:                                       ; preds = %lor.lhs.false.83, %lor.lhs.false, %while.body
  %63 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp88 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %63, i32 0, i32 7
  %64 = load i32, i32* %clamp88, align 4
  %clamp89 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 %64, i32* %clamp89, align 4
  %65 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %66 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %65, %struct.mpd_context_t* %workctx, i32* %66)
  %67 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %68 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %67, %struct.mpd_context_t* %workctx, i32* %68)
  br label %while.end

if.end.90:                                        ; preds = %lor.lhs.false.83
  %69 = load i64, i64* %prec, align 8
  %add91 = add i64 %69, 19
  store i64 %add91, i64* %prec, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.87
  call void @mpd_del(%struct.mpd_t* %t1)
  call void @mpd_del(%struct.mpd_t* %t2)
  call void @mpd_del(%struct.mpd_t* %ulp)
  call void @mpd_del(%struct.mpd_t* %aa)
  br label %if.end.92

if.else:                                          ; preds = %if.end.36
  %70 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %71 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %72 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qlog10(i32 1, %struct.mpd_t* %70, %struct.mpd_t* %71, %struct.mpd_context_t* %workctx, i32* %72)
  %73 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %74 = load i32*, i32** %status.addr, align 8
  call void @mpd_check_underflow(%struct.mpd_t* %73, %struct.mpd_context_t* %workctx, i32* %74)
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.3, %if.then.6, %if.end.7, %if.then.11, %if.then.15, %if.end.22, %if.then.32, %if.then.65, %if.else, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mpd_coeff_ispow10(%struct.mpd_t* %dec) #0 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i64 @mpd_msword(%struct.mpd_t* %0)
  %call1 = call i32 @mpd_word_ispow10(i64 %call)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 5
  %2 = load i64*, i64** %data, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 3
  %4 = load i64, i64* %len, align 8
  %sub = sub i64 %4, 1
  %call2 = call i32 @_mpd_isallzero(i64* %2, i64 %sub)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qlog10(i32 %action, %struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %action.addr = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %ln10_data = alloca [64 x i64], align 16
  %ln10 = alloca %struct.mpd_t, align 8
  store i32 %action, i32* %action.addr, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ln10, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %ln10_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %workctx)
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 0
  %1 = load i64, i64* %prec, align 8
  %add = add i64 %1, 3
  %prec1 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %add, i64* %prec1, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qln(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_context_t* %workctx, i32* %4)
  %prec2 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %5 = load i64, i64* %prec2, align 8
  %6 = load i32*, i32** %status.addr, align 8
  call void @mpd_qln10(%struct.mpd_t* %ln10, i64 %5, i32* %6)
  %7 = load i32, i32* %action.addr, align 4
  %cmp = icmp eq i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = bitcast %struct.mpd_context_t* %workctx to i8*
  %10 = bitcast %struct.mpd_context_t* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdiv(i32 0, %struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_t* %ln10, %struct.mpd_context_t* %workctx, i32* %13)
  call void @mpd_del(%struct.mpd_t* %ln10)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmax(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isqnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  br label %if.end.27

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isqnan(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.else.11

land.lhs.true.6:                                  ; preds = %if.else
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_isnan(%struct.mpd_t* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.else.11, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.6
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcopy(%struct.mpd_t* %7, %struct.mpd_t* %8, i32* %9)
  br label %if.end.26

if.else.11:                                       ; preds = %land.lhs.true.6, %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call12 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else.11
  br label %return

if.else.15:                                       ; preds = %if.else.11
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call16 = call i32 @_mpd_cmp(%struct.mpd_t* %15, %struct.mpd_t* %16)
  store i32 %call16, i32* %c, align 4
  %17 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %17, 0
  br i1 %cmp, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.else.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call18 = call i32 @_mpd_cmp_numequal(%struct.mpd_t* %18, %struct.mpd_t* %19)
  store i32 %call18, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.else.15
  %20 = load i32, i32* %c, align 4
  %cmp19 = icmp slt i32 %20, 0
  br i1 %cmp19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.end
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  %call21 = call i32 @mpd_qcopy(%struct.mpd_t* %21, %struct.mpd_t* %22, i32* %23)
  br label %if.end.24

if.else.22:                                       ; preds = %if.end
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qcopy(%struct.mpd_t* %24, %struct.mpd_t* %25, i32* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.20
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.9
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %27, %struct.mpd_context_t* %28, i32* %29)
  br label %return

return:                                           ; preds = %if.end.27, %if.then.14
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @_mpd_cmp_numequal(%struct.mpd_t* %a, %struct.mpd_t* %b) #2 {
entry:
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %sign_a = alloca i32, align 4
  %sign_b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %sign_a, align 4
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call zeroext i8 @mpd_sign(%struct.mpd_t* %1)
  %conv2 = zext i8 %call1 to i32
  store i32 %conv2, i32* %sign_b, align 4
  %2 = load i32, i32* %sign_a, align 4
  %3 = load i32, i32* %sign_b, align 4
  %cmp = icmp ne i32 %2, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %sign_b, align 4
  %5 = load i32, i32* %sign_a, align 4
  %sub = sub i32 %4, %5
  store i32 %sub, i32* %c, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 1
  %7 = load i64, i64* %exp, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp4, align 8
  %cmp5 = icmp slt i64 %7, %9
  %cond = select i1 %cmp5, i32 -1, i32 1
  store i32 %cond, i32* %c, align 4
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_arith_sign(%struct.mpd_t* %10)
  %11 = load i32, i32* %c, align 4
  %mul = mul i32 %11, %call7
  store i32 %mul, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %c, align 4
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmax_mag(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isqnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  br label %if.end.27

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isqnan(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.else.11

land.lhs.true.6:                                  ; preds = %if.else
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_isnan(%struct.mpd_t* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.else.11, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.6
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcopy(%struct.mpd_t* %7, %struct.mpd_t* %8, i32* %9)
  br label %if.end.26

if.else.11:                                       ; preds = %land.lhs.true.6, %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call12 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else.11
  br label %return

if.else.15:                                       ; preds = %if.else.11
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call16 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %15, %struct.mpd_t* %16)
  store i32 %call16, i32* %c, align 4
  %17 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %17, 0
  br i1 %cmp, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.else.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call18 = call i32 @_mpd_cmp_numequal(%struct.mpd_t* %18, %struct.mpd_t* %19)
  store i32 %call18, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.else.15
  %20 = load i32, i32* %c, align 4
  %cmp19 = icmp slt i32 %20, 0
  br i1 %cmp19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.end
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  %call21 = call i32 @mpd_qcopy(%struct.mpd_t* %21, %struct.mpd_t* %22, i32* %23)
  br label %if.end.24

if.else.22:                                       ; preds = %if.end
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qcopy(%struct.mpd_t* %24, %struct.mpd_t* %25, i32* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.20
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.9
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %27, %struct.mpd_context_t* %28, i32* %29)
  br label %return

return:                                           ; preds = %if.end.27, %if.then.14
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmin(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isqnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  br label %if.end.27

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isqnan(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.else.11

land.lhs.true.6:                                  ; preds = %if.else
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_isnan(%struct.mpd_t* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.else.11, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.6
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcopy(%struct.mpd_t* %7, %struct.mpd_t* %8, i32* %9)
  br label %if.end.26

if.else.11:                                       ; preds = %land.lhs.true.6, %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call12 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else.11
  br label %return

if.else.15:                                       ; preds = %if.else.11
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call16 = call i32 @_mpd_cmp(%struct.mpd_t* %15, %struct.mpd_t* %16)
  store i32 %call16, i32* %c, align 4
  %17 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %17, 0
  br i1 %cmp, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.else.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call18 = call i32 @_mpd_cmp_numequal(%struct.mpd_t* %18, %struct.mpd_t* %19)
  store i32 %call18, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.else.15
  %20 = load i32, i32* %c, align 4
  %cmp19 = icmp slt i32 %20, 0
  br i1 %cmp19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.end
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  %call21 = call i32 @mpd_qcopy(%struct.mpd_t* %21, %struct.mpd_t* %22, i32* %23)
  br label %if.end.24

if.else.22:                                       ; preds = %if.end
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qcopy(%struct.mpd_t* %24, %struct.mpd_t* %25, i32* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.20
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.9
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %27, %struct.mpd_context_t* %28, i32* %29)
  br label %return

return:                                           ; preds = %if.end.27, %if.then.14
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmin_mag(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isqnan(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy(%struct.mpd_t* %2, %struct.mpd_t* %3, i32* %4)
  br label %if.end.27

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call4 = call i32 @mpd_isqnan(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.else.11

land.lhs.true.6:                                  ; preds = %if.else
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_isnan(%struct.mpd_t* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.else.11, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.6
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcopy(%struct.mpd_t* %7, %struct.mpd_t* %8, i32* %9)
  br label %if.end.26

if.else.11:                                       ; preds = %land.lhs.true.6, %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call12 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else.11
  br label %return

if.else.15:                                       ; preds = %if.else.11
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call16 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %15, %struct.mpd_t* %16)
  store i32 %call16, i32* %c, align 4
  %17 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %17, 0
  br i1 %cmp, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.else.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call18 = call i32 @_mpd_cmp_numequal(%struct.mpd_t* %18, %struct.mpd_t* %19)
  store i32 %call18, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.else.15
  %20 = load i32, i32* %c, align 4
  %cmp19 = icmp slt i32 %20, 0
  br i1 %cmp19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.end
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  %call21 = call i32 @mpd_qcopy(%struct.mpd_t* %21, %struct.mpd_t* %22, i32* %23)
  br label %if.end.24

if.else.22:                                       ; preds = %if.end
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qcopy(%struct.mpd_t* %24, %struct.mpd_t* %25, i32* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.20
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.9
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %27, %struct.mpd_context_t* %28, i32* %29)
  br label %return

return:                                           ; preds = %if.end.27, %if.then.14
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_ssize(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_uint(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %bb_data = alloca [64 x i64], align 16
  %bb = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %bb_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load i64, i64* %b.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsset_uint(%struct.mpd_t* %bb, i64 %0, %struct.mpd_context_t* %maxcontext, i32* %1)
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %bb, %struct.mpd_context_t* %4, i32* %5)
  call void @mpd_del(%struct.mpd_t* %bb)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_i32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_u32(%struct.mpd_t* %result, %struct.mpd_t* %a, i32 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %b, i32* %b.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %conv, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_i64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul_ssize(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qmul_u64(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul_uint(%struct.mpd_t* %0, %struct.mpd_t* %1, i64 %2, %struct.mpd_context_t* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qnext_minus(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %tiny_data = alloca [1 x i64], align 8
  %tiny = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = bitcast [1 x i64]* %tiny_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @mpd_qnext_minus.tiny_data to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 1
  %1 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call = call i64 @mpd_etiny(%struct.mpd_context_t* %1)
  %sub = sub i64 %call, 1
  store i64 %sub, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %tiny_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call2 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_isnegative(%struct.mpd_t* %7)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qcopy(%struct.mpd_t* %8, %struct.mpd_t* %9, i32* %10)
  br label %return

if.else:                                          ; preds = %if.end
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmaxcoeff(%struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call9 = call i32 @mpd_isnan(%struct.mpd_t* %15)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  br label %return

if.end.12:                                        ; preds = %if.else
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call13 = call i64 @mpd_etop(%struct.mpd_context_t* %16)
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 1
  store i64 %call13, i64* %exp14, align 8
  br label %return

if.end.15:                                        ; preds = %entry
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_workcontext(%struct.mpd_context_t* %workctx, %struct.mpd_context_t* %18)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 3, i32* %round, align 4
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call16 = call i32 @mpd_qcopy(%struct.mpd_t* %19, %struct.mpd_t* %20, i32* %21)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %if.end.15
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status20 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qfinalize(%struct.mpd_t* %22, %struct.mpd_context_t* %workctx, i32* %status20)
  %status21 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %23 = load i32, i32* %status21, align 4
  %and = and i32 %23, 1022
  %tobool22 = icmp ne i32 %and, 0
  br i1 %tobool22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.19
  %status24 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %24 = load i32, i32* %status24, align 4
  %and25 = and i32 %24, 958
  %25 = load i32*, i32** %status.addr, align 8
  %26 = load i32, i32* %25, align 4
  %or = or i32 %26, %and25
  store i32 %or, i32* %25, align 4
  br label %return

if.end.26:                                        ; preds = %if.end.19
  %status27 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  store i32 0, i32* %status27, align 4
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %status28 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qsub(%struct.mpd_t* %27, %struct.mpd_t* %28, %struct.mpd_t* %tiny, %struct.mpd_context_t* %workctx, i32* %status28)
  %status29 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %29 = load i32, i32* %status29, align 4
  %and30 = and i32 %29, 958
  %30 = load i32*, i32** %status.addr, align 8
  %31 = load i32, i32* %30, align 4
  %or31 = or i32 %31, %and30
  store i32 %or31, i32* %30, align 4
  br label %return

return:                                           ; preds = %if.end.26, %if.then.23, %if.then.18, %if.end.12, %if.then.11, %if.then.7, %if.then.4
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @mpd_workcontext(%struct.mpd_context_t* %workctx, %struct.mpd_context_t* %ctx) #2 {
entry:
  %workctx.addr = alloca %struct.mpd_context_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_context_t* %workctx, %struct.mpd_context_t** %workctx.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 0
  %1 = load i64, i64* %prec, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %prec1 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 0
  store i64 %1, i64* %prec1, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %3, i32 0, i32 1
  %4 = load i64, i64* %emax, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %emax2 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %5, i32 0, i32 1
  store i64 %4, i64* %emax2, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 2
  %7 = load i64, i64* %emin, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %emin3 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %8, i32 0, i32 2
  store i64 %7, i64* %emin3, align 8
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %9, i32 0, i32 6
  %10 = load i32, i32* %round, align 4
  %11 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %round4 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %11, i32 0, i32 6
  store i32 %10, i32* %round4, align 4
  %12 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %traps = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %12, i32 0, i32 3
  store i32 0, i32* %traps, align 4
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 4
  store i32 0, i32* %status, align 4
  %14 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %newtrap = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %14, i32 0, i32 5
  store i32 0, i32* %newtrap, align 4
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %15, i32 0, i32 7
  %16 = load i32, i32* %clamp, align 4
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %clamp5 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 7
  store i32 %16, i32* %clamp5, align 4
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %allcr = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %18, i32 0, i32 8
  %19 = load i32, i32* %allcr, align 4
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %workctx.addr, align 8
  %allcr6 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 8
  store i32 %19, i32* %allcr6, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qnext_plus(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %tiny_data = alloca [1 x i64], align 8
  %tiny = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = bitcast [1 x i64]* %tiny_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @mpd_qnext_plus.tiny_data to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 1
  %1 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call = call i64 @mpd_etiny(%struct.mpd_context_t* %1)
  %sub = sub i64 %call, 1
  store i64 %sub, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tiny, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %tiny_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end.16

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call2 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call i32 @mpd_ispositive(%struct.mpd_t* %7)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qcopy(%struct.mpd_t* %8, %struct.mpd_t* %9, i32* %10)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmaxcoeff(%struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call9 = call i32 @mpd_isnan(%struct.mpd_t* %15)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  br label %return

if.end.12:                                        ; preds = %if.else
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_flags(%struct.mpd_t* %16, i8 zeroext 1)
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call13 = call i64 @mpd_etop(%struct.mpd_context_t* %17)
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 1
  store i64 %call13, i64* %exp14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.12, %if.then.7
  br label %return

if.end.16:                                        ; preds = %entry
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_workcontext(%struct.mpd_context_t* %workctx, %struct.mpd_context_t* %19)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 2, i32* %round, align 4
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %22 = load i32*, i32** %status.addr, align 8
  %call17 = call i32 @mpd_qcopy(%struct.mpd_t* %20, %struct.mpd_t* %21, i32* %22)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %return

if.end.20:                                        ; preds = %if.end.16
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status21 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qfinalize(%struct.mpd_t* %23, %struct.mpd_context_t* %workctx, i32* %status21)
  %status22 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %24 = load i32, i32* %status22, align 4
  %and = and i32 %24, 1022
  %tobool23 = icmp ne i32 %and, 0
  br i1 %tobool23, label %if.then.24, label %if.end.27

if.then.24:                                       ; preds = %if.end.20
  %status25 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %25 = load i32, i32* %status25, align 4
  %and26 = and i32 %25, 958
  %26 = load i32*, i32** %status.addr, align 8
  %27 = load i32, i32* %26, align 4
  %or = or i32 %27, %and26
  store i32 %or, i32* %26, align 4
  br label %return

if.end.27:                                        ; preds = %if.end.20
  %status28 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  store i32 0, i32* %status28, align 4
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %status29 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qadd(%struct.mpd_t* %28, %struct.mpd_t* %29, %struct.mpd_t* %tiny, %struct.mpd_context_t* %workctx, i32* %status29)
  %status30 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %30 = load i32, i32* %status30, align 4
  %and31 = and i32 %30, 958
  %31 = load i32*, i32** %status.addr, align 8
  %32 = load i32, i32* %31, align 4
  %or32 = or i32 %32, %and31
  store i32 %or32, i32* %31, align 4
  br label %return

return:                                           ; preds = %if.end.27, %if.then.24, %if.then.19, %if.end.15, %if.then.11, %if.then.4
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qnext_toward(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcheck_nans(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.22

if.end:                                           ; preds = %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @_mpd_cmp(%struct.mpd_t* %5, %struct.mpd_t* %6)
  store i32 %call1, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcopy_sign(%struct.mpd_t* %8, %struct.mpd_t* %9, %struct.mpd_t* %10, i32* %11)
  br label %if.end.22

if.end.4:                                         ; preds = %if.end
  %12 = load i32, i32* %c, align 4
  %cmp5 = icmp slt i32 %12, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_qnext_plus(%struct.mpd_t* %13, %struct.mpd_t* %14, %struct.mpd_context_t* %15, i32* %16)
  br label %if.end.7

if.else:                                          ; preds = %if.end.4
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_qnext_minus(%struct.mpd_t* %17, %struct.mpd_t* %18, %struct.mpd_context_t* %19, i32* %20)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call8 = call i32 @mpd_isinfinite(%struct.mpd_t* %21)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %if.end.7
  %22 = load i32*, i32** %status.addr, align 8
  %23 = load i32, i32* %22, align 4
  %or = or i32 %23, 6208
  store i32 %or, i32* %22, align 4
  br label %if.end.22

if.else.11:                                       ; preds = %if.end.7
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call12 = call i64 @mpd_adjexp(%struct.mpd_t* %24)
  %25 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %25, i32 0, i32 2
  %26 = load i64, i64* %emin, align 8
  %cmp13 = icmp slt i64 %call12, %26
  br i1 %cmp13, label %if.then.14, label %if.end.21

if.then.14:                                       ; preds = %if.else.11
  %27 = load i32*, i32** %status.addr, align 8
  %28 = load i32, i32* %27, align 4
  %or15 = or i32 %28, 28736
  store i32 %or15, i32* %27, align 4
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call16 = call i32 @mpd_iszero(%struct.mpd_t* %29)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.14
  %30 = load i32*, i32** %status.addr, align 8
  %31 = load i32, i32* %30, align 4
  %or19 = or i32 %31, 1
  store i32 %or19, i32* %30, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.then.14
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.else.11
  br label %if.end.22

if.end.22:                                        ; preds = %if.then, %if.then.2, %if.end.21, %if.then.10
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qpow(%struct.mpd_t* %result, %struct.mpd_t* %base, %struct.mpd_t* %exp, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %resultsign = alloca i8, align 1
  %intexp = alloca i32, align 4
  %cmp = alloca i32, align 4
  %shift = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store %struct.mpd_t* %exp, %struct.mpd_t** %exp.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i8 0, i8* %resultsign, align 1
  store i32 0, i32* %intexp, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %if.end.98

if.end:                                           ; preds = %if.then
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %7 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call7 = call i32 @mpd_isinteger(%struct.mpd_t* %7)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end.14

if.then.9:                                        ; preds = %if.end.6
  store i32 1, i32* %intexp, align 4
  %8 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call10 = call i32 @mpd_isnegative(%struct.mpd_t* %8)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.9
  %9 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call12 = call i32 @mpd_isodd(%struct.mpd_t* %9)
  %tobool13 = icmp ne i32 %call12, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.9
  %10 = phi i1 [ false, %if.then.9 ], [ %tobool13, %land.rhs ]
  %land.ext = zext i1 %10 to i32
  %conv = trunc i32 %land.ext to i8
  store i8 %conv, i8* %resultsign, align 1
  br label %if.end.14

if.end.14:                                        ; preds = %land.end, %if.end.6
  %11 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call15 = call i32 @mpd_iszero(%struct.mpd_t* %11)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.27

if.then.17:                                       ; preds = %if.end.14
  %12 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call18 = call i32 @mpd_iszero(%struct.mpd_t* %12)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.then.17
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %13, i32 256, i32* %14)
  br label %if.end.26

if.else:                                          ; preds = %if.then.17
  %15 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call21 = call i32 @mpd_isnegative(%struct.mpd_t* %15)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %if.else
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %17 = load i8, i8* %resultsign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %16, i8 zeroext %17, i8 zeroext 2)
  br label %if.end.25

if.else.24:                                       ; preds = %if.else
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load i8, i8* %resultsign, align 1
  call void @_settriple(%struct.mpd_t* %18, i8 zeroext %19, i64 0, i64 0)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.23
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.20
  br label %if.end.98

if.end.27:                                        ; preds = %if.end.14
  %20 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call28 = call i32 @mpd_isnegative(%struct.mpd_t* %20)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %if.end.27
  %21 = load i32, i32* %intexp, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %lor.lhs.false.32, label %if.then.35

lor.lhs.false.32:                                 ; preds = %if.then.30
  %22 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call33 = call i32 @mpd_isinfinite(%struct.mpd_t* %22)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %lor.lhs.false.32, %if.then.30
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %24 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %23, i32 256, i32* %24)
  br label %if.end.98

if.end.36:                                        ; preds = %lor.lhs.false.32
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end.27
  %25 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call38 = call i32 @mpd_isinfinite(%struct.mpd_t* %25)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then.40, label %if.end.53

if.then.40:                                       ; preds = %if.end.37
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %28 = load i8, i8* %resultsign, align 1
  %29 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %30 = load i32*, i32** %status.addr, align 8
  %call41 = call i32 @_qcheck_pow_one_inf(%struct.mpd_t* %26, %struct.mpd_t* %27, i8 zeroext %28, %struct.mpd_context_t* %29, i32* %30)
  store i32 %call41, i32* %cmp, align 4
  %31 = load i32, i32* %cmp, align 4
  %cmp42 = icmp eq i32 %31, 0
  br i1 %cmp42, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.then.40
  br label %if.end.98

if.else.45:                                       ; preds = %if.then.40
  %32 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call46 = call i32 @mpd_arith_sign(%struct.mpd_t* %32)
  %33 = load i32, i32* %cmp, align 4
  %mul = mul i32 %33, %call46
  store i32 %mul, i32* %cmp, align 4
  %34 = load i32, i32* %cmp, align 4
  %cmp47 = icmp slt i32 %34, 0
  br i1 %cmp47, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %if.else.45
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %36 = load i8, i8* %resultsign, align 1
  call void @_settriple(%struct.mpd_t* %35, i8 zeroext %36, i64 0, i64 0)
  br label %if.end.51

if.else.50:                                       ; preds = %if.else.45
  %37 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %38 = load i8, i8* %resultsign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %37, i8 zeroext %38, i8 zeroext 2)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.49
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51
  br label %if.end.98

if.end.53:                                        ; preds = %if.end.37
  %39 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call54 = call i32 @mpd_isinfinite(%struct.mpd_t* %39)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.then.56, label %if.end.67

if.then.56:                                       ; preds = %if.end.53
  %40 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call57 = call i32 @mpd_iszero(%struct.mpd_t* %40)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %if.then.56
  %41 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %42 = load i8, i8* %resultsign, align 1
  call void @_settriple(%struct.mpd_t* %41, i8 zeroext %42, i64 1, i64 0)
  br label %if.end.66

if.else.60:                                       ; preds = %if.then.56
  %43 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call61 = call i32 @mpd_isnegative(%struct.mpd_t* %43)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %if.else.60
  %44 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %45 = load i8, i8* %resultsign, align 1
  call void @_settriple(%struct.mpd_t* %44, i8 zeroext %45, i64 0, i64 0)
  br label %if.end.65

if.else.64:                                       ; preds = %if.else.60
  %46 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %47 = load i8, i8* %resultsign, align 1
  call void @mpd_setspecial(%struct.mpd_t* %46, i8 zeroext %47, i8 zeroext 2)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.64, %if.then.63
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.then.59
  br label %if.end.98

if.end.67:                                        ; preds = %if.end.53
  %48 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call68 = call i32 @mpd_iszero(%struct.mpd_t* %48)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.67
  %49 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %50 = load i8, i8* %resultsign, align 1
  call void @_settriple(%struct.mpd_t* %49, i8 zeroext %50, i64 1, i64 0)
  br label %if.end.98

if.end.71:                                        ; preds = %if.end.67
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %52 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %54 = load i8, i8* %resultsign, align 1
  %55 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %56 = load i32*, i32** %status.addr, align 8
  %call72 = call i32 @_qcheck_pow_one(%struct.mpd_t* %51, %struct.mpd_t* %52, %struct.mpd_t* %53, i8 zeroext %54, %struct.mpd_context_t* %55, i32* %56)
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.end.71
  br label %if.end.98

if.end.76:                                        ; preds = %if.end.71
  %57 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %59 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %60 = load i8, i8* %resultsign, align 1
  %61 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  %call77 = call i32 @_qcheck_pow_bounds(%struct.mpd_t* %57, %struct.mpd_t* %58, %struct.mpd_t* %59, i8 zeroext %60, %struct.mpd_context_t* %61, i32* %62)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.76
  br label %if.end.98

if.end.80:                                        ; preds = %if.end.76
  %63 = load i32, i32* %intexp, align 4
  %tobool81 = icmp ne i32 %63, 0
  br i1 %tobool81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %if.end.80
  %64 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %65 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %66 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %67 = load i8, i8* %resultsign, align 1
  %68 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %69 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpow_int(%struct.mpd_t* %64, %struct.mpd_t* %65, %struct.mpd_t* %66, i8 zeroext %67, %struct.mpd_context_t* %68, i32* %69)
  br label %if.end.98

if.else.83:                                       ; preds = %if.end.80
  %70 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %71 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %72 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %73 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %74 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpow_real(%struct.mpd_t* %70, %struct.mpd_t* %71, %struct.mpd_t* %72, %struct.mpd_context_t* %73, i32* %74)
  %75 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call84 = call i32 @mpd_isspecial(%struct.mpd_t* %75)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end.93, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else.83
  %76 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call86 = call i32 @_mpd_cmp(%struct.mpd_t* %76, %struct.mpd_t* @one)
  %cmp87 = icmp eq i32 %call86, 0
  br i1 %cmp87, label %if.then.89, label %if.end.93

if.then.89:                                       ; preds = %land.lhs.true
  %77 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %77, i32 0, i32 0
  %78 = load i64, i64* %prec, align 8
  %sub = sub i64 %78, 1
  store i64 %sub, i64* %shift, align 8
  %79 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %80 = load i64, i64* %shift, align 8
  %81 = load i32*, i32** %status.addr, align 8
  %call90 = call i32 @mpd_qshiftl(%struct.mpd_t* %79, %struct.mpd_t* @one, i64 %80, i32* %81)
  %82 = load i64, i64* %shift, align 8
  %sub91 = sub i64 0, %82
  %83 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp92 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %83, i32 0, i32 1
  store i64 %sub91, i64* %exp92, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.89, %land.lhs.true, %if.else.83
  %84 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call94 = call i32 @mpd_isinfinite(%struct.mpd_t* %84)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %if.end.93
  %85 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %85, i8 zeroext 0, i64 1, i64 2000000000000000001)
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.96, %if.end.93
  %86 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %87 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %88 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %86, %struct.mpd_context_t* %87, i32* %88)
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.5, %if.end.26, %if.then.35, %if.then.44, %if.end.52, %if.end.66, %if.then.70, %if.then.75, %if.then.79, %if.end.97, %if.then.82
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @_qcheck_pow_one_inf(%struct.mpd_t* %result, %struct.mpd_t* %base, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %shift = alloca i64, align 8
  %cmp = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call = call i32 @_mpd_cmp(%struct.mpd_t* %0, %struct.mpd_t* @one)
  store i32 %call, i32* %cmp, align 4
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %1, i32 0, i32 0
  %2 = load i64, i64* %prec, align 8
  %sub = sub i64 %2, 1
  store i64 %sub, i64* %shift, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i64, i64* %shift, align 8
  %5 = load i32*, i32** %status.addr, align 8
  %call2 = call i32 @mpd_qshiftl(%struct.mpd_t* %3, %struct.mpd_t* @one, i64 %4, i32* %5)
  %6 = load i64, i64* %shift, align 8
  %sub3 = sub i64 0, %6
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  store i64 %sub3, i64* %exp, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i8, i8* %resultsign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %8, i8 zeroext %9)
  %10 = load i32*, i32** %status.addr, align 8
  %11 = load i32, i32* %10, align 4
  %or = or i32 %11, 4160
  store i32 %or, i32* %10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %cmp, align 4
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @_qcheck_pow_one(%struct.mpd_t* %result, %struct.mpd_t* %base, %struct.mpd_t* %exp, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca %struct.mpd_t*, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %shift = alloca i64, align 8
  %cmp = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store %struct.mpd_t* %exp, %struct.mpd_t** %exp.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call = call i32 @_mpd_cmp_abs(%struct.mpd_t* %0, %struct.mpd_t* @one)
  store i32 %call, i32* %cmp, align 4
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end.35

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call2 = call i32 @_mpd_isint(%struct.mpd_t* %1)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %2 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %2)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.3
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i8, i8* %resultsign.addr, align 1
  call void @_settriple(%struct.mpd_t* %3, i8 zeroext %4, i64 1, i64 0)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.3
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %exp7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 1
  %8 = load i64, i64* %exp7, align 8
  %sub = sub i64 0, %8
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul_ssize(%struct.mpd_t* %5, %struct.mpd_t* %6, i64 %sub, %struct.mpd_context_t* %9, i32* %workstatus)
  %10 = load i32, i32* %workstatus, align 4
  %and = and i32 %10, 958
  %tobool8 = icmp ne i32 %and, 0
  br i1 %tobool8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %11 = load i32, i32* %workstatus, align 4
  %and10 = and i32 %11, 958
  %12 = load i32*, i32** %status.addr, align 8
  %13 = load i32, i32* %12, align 4
  %or = or i32 %13, %and10
  store i32 %or, i32* %12, align 4
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call12 = call i64 @mpd_qget_ssize(%struct.mpd_t* %14, i32* %workstatus)
  store i64 %call12, i64* %shift, align 8
  %15 = load i64, i64* %shift, align 8
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %16, i32 0, i32 0
  %17 = load i64, i64* %prec, align 8
  %sub13 = sub i64 %17, 1
  %cmp14 = icmp sgt i64 %15, %sub13
  br i1 %cmp14, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %if.end.11
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec16 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %18, i32 0, i32 0
  %19 = load i64, i64* %prec16, align 8
  %sub17 = sub i64 %19, 1
  store i64 %sub17, i64* %shift, align 8
  %20 = load i32*, i32** %status.addr, align 8
  %21 = load i32, i32* %20, align 4
  %or18 = or i32 %21, 4096
  store i32 %or18, i32* %20, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %if.end.11
  br label %if.end.28

if.else:                                          ; preds = %if.then
  %22 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call20 = call i32 @mpd_ispositive(%struct.mpd_t* %22)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.else.26

if.then.22:                                       ; preds = %if.else
  %23 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec23 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %23, i32 0, i32 0
  %24 = load i64, i64* %prec23, align 8
  %sub24 = sub i64 %24, 1
  store i64 %sub24, i64* %shift, align 8
  %25 = load i32*, i32** %status.addr, align 8
  %26 = load i32, i32* %25, align 4
  %or25 = or i32 %26, 4160
  store i32 %or25, i32* %25, align 4
  br label %if.end.27

if.else.26:                                       ; preds = %if.else
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.then.22
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end.19
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load i64, i64* %shift, align 8
  %29 = load i32*, i32** %status.addr, align 8
  %call29 = call i32 @mpd_qshiftl(%struct.mpd_t* %27, %struct.mpd_t* @one, i64 %28, i32* %29)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  %30 = load i64, i64* %shift, align 8
  %sub33 = sub i64 0, %30
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 1
  store i64 %sub33, i64* %exp34, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %33 = load i8, i8* %resultsign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %32, i8 zeroext %33)
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.32, %entry
  %34 = load i32, i32* %cmp, align 4
  store i32 %34, i32* %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.then.31, %if.else.26, %if.then.9, %if.then.6
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @_qcheck_pow_bounds(%struct.mpd_t* %result, %struct.mpd_t* %x, %struct.mpd_t* %y, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %x.addr = alloca %struct.mpd_t*, align 8
  %y.addr = alloca %struct.mpd_t*, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %abs_x = alloca %struct.mpd_t, align 8
  %ub_omega = alloca i64, align 8
  %lb_zeta = alloca i64, align 8
  %lb_theta = alloca i64, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %x, %struct.mpd_t** %x.addr, align 8
  store %struct.mpd_t* %y, %struct.mpd_t** %y.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 0
  %0 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags1, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, -225
  %or = or i32 %and, 16
  %or2 = or i32 %or, 64
  %conv3 = trunc i32 %or2 to i8
  store i8 %conv3, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 1
  %2 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 1
  %3 = load i64, i64* %exp4, align 8
  store i64 %3, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 2
  %4 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 2
  %5 = load i64, i64* %digits5, align 8
  store i64 %5, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 3
  %6 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 3
  %7 = load i64, i64* %len6, align 8
  store i64 %7, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 4
  %8 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 4
  %9 = load i64, i64* %alloc7, align 8
  store i64 %9, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %abs_x, i32 0, i32 5
  %10 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 5
  %11 = load i64*, i64** %data8, align 8
  store i64* %11, i64** %data, align 8
  call void @mpd_set_positive(%struct.mpd_t* %abs_x)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %y.addr, align 8
  %call = call i64 @mpd_adjexp(%struct.mpd_t* %12)
  store i64 %call, i64* %lb_theta, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call9 = call i64 @_lower_bound_zeta(%struct.mpd_t* %abs_x, i32* %13)
  store i64 %call9, i64* %lb_zeta, align 8
  %14 = load i64, i64* %lb_zeta, align 8
  %cmp = icmp eq i64 %14, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %15, i32 512, i32* %16)
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %call11 = call i64 @mpd_adjexp(%struct.mpd_t* %abs_x)
  %cmp12 = icmp slt i64 %call11, 0
  %conv13 = zext i1 %cmp12 to i32
  %17 = load %struct.mpd_t*, %struct.mpd_t** %y.addr, align 8
  %call14 = call zeroext i8 @mpd_sign(%struct.mpd_t* %17)
  %conv15 = zext i8 %call14 to i32
  %xor = xor i32 %conv13, %conv15
  %conv16 = trunc i32 %xor to i8
  store i8 %conv16, i8* %sign, align 1
  %18 = load i8, i8* %sign, align 1
  %conv17 = zext i8 %18 to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.end
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %19, i32 0, i32 1
  %20 = load i64, i64* %emax, align 8
  %call21 = call i32 @mpd_exp_digits(i64 %20)
  %conv22 = sext i32 %call21 to i64
  store i64 %conv22, i64* %ub_omega, align 8
  %21 = load i64, i64* %ub_omega, align 8
  %22 = load i64, i64* %lb_zeta, align 8
  %23 = load i64, i64* %lb_theta, align 8
  %add = add i64 %22, %23
  %cmp23 = icmp slt i64 %21, %add
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.20
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load i8, i8* %resultsign.addr, align 1
  call void @_settriple(%struct.mpd_t* %24, i8 zeroext %25, i64 1, i64 2000000000000000001)
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %28 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %26, %struct.mpd_context_t* %27, i32* %28)
  store i32 1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.then.20
  br label %if.end.36

if.else:                                          ; preds = %if.end
  %29 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call27 = call i64 @mpd_etiny(%struct.mpd_context_t* %29)
  %call28 = call i32 @mpd_exp_digits(i64 %call27)
  %conv29 = sext i32 %call28 to i64
  store i64 %conv29, i64* %ub_omega, align 8
  %30 = load i64, i64* %ub_omega, align 8
  %31 = load i64, i64* %lb_zeta, align 8
  %32 = load i64, i64* %lb_theta, align 8
  %add30 = add i64 %31, %32
  %cmp31 = icmp slt i64 %30, %add30
  br i1 %cmp31, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %if.else
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %34 = load i8, i8* %resultsign.addr, align 1
  %35 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call34 = call i64 @mpd_etiny(%struct.mpd_context_t* %35)
  %sub = sub i64 %call34, 1
  call void @_settriple(%struct.mpd_t* %33, i8 zeroext %34, i64 1, i64 %sub)
  %36 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %37 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %38 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %36, %struct.mpd_context_t* %37, i32* %38)
  store i32 1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.else
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.26
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.33, %if.then.25, %if.then
  %39 = load i32, i32* %retval
  ret i32 %39
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qpow_int(%struct.mpd_t* %result, %struct.mpd_t* %base, %struct.mpd_t* %exp, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca %struct.mpd_t*, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %tbase_data = alloca [64 x i64], align 16
  %tbase = alloca %struct.mpd_t, align 8
  %texp_data = alloca [64 x i64], align 16
  %texp = alloca %struct.mpd_t, align 8
  %n = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store %struct.mpd_t* %exp, %struct.mpd_t** %exp.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 1
  store i64 0, i64* %exp1, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tbase_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 0
  store i8 48, i8* %flags2, align 1
  %exp3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 1
  store i64 0, i64* %exp3, align 8
  %digits4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 2
  store i64 0, i64* %digits4, align 8
  %len5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 3
  store i64 0, i64* %len5, align 8
  %alloc6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 4
  store i64 64, i64* %alloc6, align 8
  %data7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 5
  %arraydecay8 = getelementptr inbounds [64 x i64], [64 x i64]* %texp_data, i32 0, i32 0
  store i64* %arraydecay8, i64** %data7, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_workcontext(%struct.mpd_context_t* %workctx, %struct.mpd_context_t* %0)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %digits9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 2
  %2 = load i64, i64* %digits9, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %exp10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp10, align 8
  %add = add i64 %2, %4
  %add11 = add i64 %add, 2
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %5 = load i64, i64* %prec, align 8
  %add12 = add i64 %5, %add11
  store i64 %add12, i64* %prec, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 7
  store i32 0, i32* %clamp, align 4
  %6 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call = call i32 @mpd_isnegative(%struct.mpd_t* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %prec13 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %7 = load i64, i64* %prec13, align 8
  %add14 = add i64 %7, 1
  store i64 %add14, i64* %prec13, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdiv(%struct.mpd_t* %tbase, %struct.mpd_t* @one, %struct.mpd_t* %8, %struct.mpd_context_t* %workctx, i32* %9)
  %10 = load i32*, i32** %status.addr, align 8
  %11 = load i32, i32* %10, align 4
  %and = and i32 %11, 958
  %tobool15 = icmp ne i32 %and, 0
  br i1 %tobool15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %if.then
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %12, i8 zeroext 0, i8 zeroext 4)
  br label %finish

if.end:                                           ; preds = %if.then
  br label %if.end.21

if.else:                                          ; preds = %entry
  %13 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  %call17 = call i32 @mpd_qcopy(%struct.mpd_t* %tbase, %struct.mpd_t* %13, i32* %14)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.else
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %15, i8 zeroext 0, i8 zeroext 4)
  br label %finish

if.end.20:                                        ; preds = %if.else
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %status22 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %call23 = call i64 @mpd_qabs_uint(%struct.mpd_t* %16, i32* %status22)
  store i64 %call23, i64* %n, align 8
  %status24 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %17 = load i32, i32* %status24, align 4
  %and25 = and i32 %17, 256
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.else.32

if.then.27:                                       ; preds = %if.end.21
  %18 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %19 = load i32*, i32** %status.addr, align 8
  %call28 = call i32 @mpd_qcopy(%struct.mpd_t* %texp, %struct.mpd_t* %18, i32* %19)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.then.27
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %20, i8 zeroext 0, i8 zeroext 4)
  br label %finish

if.end.31:                                        ; preds = %if.then.27
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load i8, i8* %resultsign.addr, align 1
  %23 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpow_mpd(%struct.mpd_t* %21, %struct.mpd_t* %tbase, %struct.mpd_t* %texp, i8 zeroext %22, %struct.mpd_context_t* %workctx, i32* %23)
  br label %if.end.33

if.else.32:                                       ; preds = %if.end.21
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load i64, i64* %n, align 8
  %26 = load i8, i8* %resultsign.addr, align 1
  %27 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpow_uint(%struct.mpd_t* %24, %struct.mpd_t* %tbase, i64 %25, i8 zeroext %26, %struct.mpd_context_t* %workctx, i32* %27)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.32, %if.end.31
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call34 = call i32 @mpd_isinfinite(%struct.mpd_t* %28)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %30 = load i8, i8* %resultsign.addr, align 1
  call void @_settriple(%struct.mpd_t* %29, i8 zeroext %30, i64 1, i64 2000000000000000001)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %if.end.33
  br label %finish

finish:                                           ; preds = %if.end.37, %if.then.30, %if.then.19, %if.then.16
  call void @mpd_del(%struct.mpd_t* %tbase)
  call void @mpd_del(%struct.mpd_t* %texp)
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %32 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %33 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %31, %struct.mpd_context_t* %32, i32* %33)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qpow_real(%struct.mpd_t* %result, %struct.mpd_t* %base, %struct.mpd_t* %exp, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %texp_data = alloca [64 x i64], align 16
  %texp = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store %struct.mpd_t* %exp, %struct.mpd_t** %exp.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 1
  store i64 0, i64* %exp1, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %texp_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %texp, %struct.mpd_t* %0, i32* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %2, i32 512, i32* %3)
  br label %return

if.end:                                           ; preds = %entry
  call void @mpd_maxcontext(%struct.mpd_context_t* %workctx)
  %4 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %digits2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 2
  %5 = load i64, i64* %digits2, align 8
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 0
  %7 = load i64, i64* %prec, align 8
  %cmp = icmp sgt i64 %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 2
  %9 = load i64, i64* %digits3, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec4 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %10, i32 0, i32 0
  %11 = load i64, i64* %prec4, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %9, %cond.true ], [ %11, %cond.false ]
  %prec5 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %cond, i64* %prec5, align 8
  %prec6 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %12 = load i64, i64* %prec6, align 8
  %add = add i64 %12, 23
  store i64 %add, i64* %prec6, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %allcr = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 8
  %14 = load i32, i32* %allcr, align 4
  %allcr7 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 8
  store i32 %14, i32* %allcr7, align 4
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %status8 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qln(%struct.mpd_t* %15, %struct.mpd_t* %16, %struct.mpd_context_t* %workctx, i32* %status8)
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status9 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qmul(%struct.mpd_t* %17, %struct.mpd_t* %18, %struct.mpd_t* %texp, %struct.mpd_context_t* %workctx, i32* %status9)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %21 = load i32*, i32** %status.addr, align 8
  call void @mpd_qexp(%struct.mpd_t* %19, %struct.mpd_t* %20, %struct.mpd_context_t* %workctx, i32* %21)
  call void @mpd_del(%struct.mpd_t* %texp)
  %status10 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %22 = load i32, i32* %status10, align 4
  %and = and i32 %22, 958
  %23 = load i32*, i32** %status.addr, align 8
  %24 = load i32, i32* %23, align 4
  %or = or i32 %24, %and
  store i32 %or, i32* %23, align 4
  %25 = load i32*, i32** %status.addr, align 8
  %26 = load i32, i32* %25, align 4
  %or11 = or i32 %26, 4160
  store i32 %or11, i32* %25, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qpowmod(%struct.mpd_t* %result, %struct.mpd_t* %base, %struct.mpd_t* %exp, %struct.mpd_t* %mod, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca %struct.mpd_t*, align 8
  %mod.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %tbase_data = alloca [64 x i64], align 16
  %tbase = alloca %struct.mpd_t, align 8
  %texp_data = alloca [64 x i64], align 16
  %texp = alloca %struct.mpd_t, align 8
  %tmod_data = alloca [64 x i64], align 16
  %tmod = alloca %struct.mpd_t, align 8
  %tmp_data = alloca [64 x i64], align 16
  %tmp = alloca %struct.mpd_t, align 8
  %two_data = alloca [1 x i64], align 8
  %two = alloca %struct.mpd_t, align 8
  %tbase_exp = alloca i64, align 8
  %texp_exp = alloca i64, align 8
  %i = alloca i64, align 8
  %t = alloca %struct.mpd_t, align 8
  %r = alloca i64, align 8
  %sign = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store %struct.mpd_t* %exp, %struct.mpd_t** %exp.addr, align 8
  store %struct.mpd_t* %mod, %struct.mpd_t** %mod.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 1
  store i64 0, i64* %exp1, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tbase_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 0
  store i8 48, i8* %flags2, align 1
  %exp3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 1
  store i64 0, i64* %exp3, align 8
  %digits4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 2
  store i64 0, i64* %digits4, align 8
  %len5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 3
  store i64 0, i64* %len5, align 8
  %alloc6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 4
  store i64 64, i64* %alloc6, align 8
  %data7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 5
  %arraydecay8 = getelementptr inbounds [64 x i64], [64 x i64]* %texp_data, i32 0, i32 0
  store i64* %arraydecay8, i64** %data7, align 8
  %flags9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 0
  store i8 48, i8* %flags9, align 1
  %exp10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 1
  store i64 0, i64* %exp10, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 2
  store i64 0, i64* %digits11, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 3
  store i64 0, i64* %len12, align 8
  %alloc13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 4
  store i64 64, i64* %alloc13, align 8
  %data14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmod, i32 0, i32 5
  %arraydecay15 = getelementptr inbounds [64 x i64], [64 x i64]* %tmod_data, i32 0, i32 0
  store i64* %arraydecay15, i64** %data14, align 8
  %flags16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 0
  store i8 48, i8* %flags16, align 1
  %exp17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 1
  store i64 0, i64* %exp17, align 8
  %digits18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 2
  store i64 0, i64* %digits18, align 8
  %len19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 3
  store i64 0, i64* %len19, align 8
  %alloc20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 4
  store i64 64, i64* %alloc20, align 8
  %data21 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tmp, i32 0, i32 5
  %arraydecay22 = getelementptr inbounds [64 x i64], [64 x i64]* %tmp_data, i32 0, i32 0
  store i64* %arraydecay22, i64** %data21, align 8
  %0 = bitcast [1 x i64]* %two_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @mpd_qpowmod.two_data to i8*), i64 8, i32 8, i1 false)
  %flags25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 0
  store i8 -112, i8* %flags25, align 1
  %exp26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 1
  store i64 0, i64* %exp26, align 8
  %digits27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 2
  store i64 1, i64* %digits27, align 8
  %len28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 3
  store i64 1, i64* %len28, align 8
  %alloc29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 4
  store i64 1, i64* %alloc29, align 8
  %data30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 5
  %arraydecay31 = getelementptr inbounds [1 x i64], [1 x i64]* %two_data, i32 0, i32 0
  store i64* %arraydecay31, i64** %data30, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call38 = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %lor.lhs.false
  %3 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %call41 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then, label %if.end.46

if.then:                                          ; preds = %lor.lhs.false.40, %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call43 = call i32 @mpd_qcheck_3nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %9)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then.45, label %if.end

if.then.45:                                       ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %10, i32 256, i32* %11)
  br label %return

if.end.46:                                        ; preds = %lor.lhs.false.40
  %12 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call47 = call i32 @_mpd_isint(%struct.mpd_t* %12)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %lor.lhs.false.49, label %if.then.55

lor.lhs.false.49:                                 ; preds = %if.end.46
  %13 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call50 = call i32 @_mpd_isint(%struct.mpd_t* %13)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %lor.lhs.false.52, label %if.then.55

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.49
  %14 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %call53 = call i32 @_mpd_isint(%struct.mpd_t* %14)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.49, %if.end.46
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %15, i32 256, i32* %16)
  br label %return

if.end.56:                                        ; preds = %lor.lhs.false.52
  %17 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %call57 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %17)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.56
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %18, i32 256, i32* %19)
  br label %return

if.end.60:                                        ; preds = %if.end.56
  %20 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %digits61 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 2
  %21 = load i64, i64* %digits61, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %exp62 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  %23 = load i64, i64* %exp62, align 8
  %add = add i64 %21, %23
  %24 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %24, i32 0, i32 0
  %25 = load i64, i64* %prec, align 8
  %cmp = icmp sgt i64 %add, %25
  br i1 %cmp, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %if.end.60
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %26, i32 256, i32* %27)
  br label %return

if.end.64:                                        ; preds = %if.end.60
  %28 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call65 = call i32 @mpd_isnegative(%struct.mpd_t* %28)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.64
  %29 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call67 = call i32 @mpd_isodd(%struct.mpd_t* %29)
  %tobool68 = icmp ne i32 %call67, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.64
  %30 = phi i1 [ false, %if.end.64 ], [ %tobool68, %land.rhs ]
  %land.ext = zext i1 %30 to i32
  %conv = trunc i32 %land.ext to i8
  store i8 %conv, i8* %sign, align 1
  %31 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call69 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %31)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then.71, label %if.end.80

if.then.71:                                       ; preds = %land.end
  %32 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call72 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %32)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.then.71
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %34 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %33, i32 256, i32* %34)
  br label %return

if.end.75:                                        ; preds = %if.then.71
  %35 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %call76 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %35, %struct.mpd_t* @one)
  %cmp77 = icmp eq i32 %call76, 0
  %cond = select i1 %cmp77, i32 0, i32 1
  %conv79 = sext i32 %cond to i64
  store i64 %conv79, i64* %r, align 8
  %36 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %37 = load i8, i8* %sign, align 1
  %38 = load i64, i64* %r, align 8
  call void @_settriple(%struct.mpd_t* %36, i8 zeroext %37, i64 %38, i64 0)
  br label %return

if.end.80:                                        ; preds = %land.end
  %39 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %call81 = call i32 @mpd_isnegative(%struct.mpd_t* %39)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.end.80
  %40 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %41 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %40, i32 256, i32* %41)
  br label %return

if.end.84:                                        ; preds = %if.end.80
  %42 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %call85 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %42)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.end.84
  %43 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %44 = load i8, i8* %sign, align 1
  call void @_settriple(%struct.mpd_t* %43, i8 zeroext %44, i64 0, i64 0)
  br label %return

if.end.88:                                        ; preds = %if.end.84
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %45 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %status89 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @mpd_qrescale(%struct.mpd_t* %tmod, %struct.mpd_t* %45, i64 0, %struct.mpd_context_t* %maxcontext, i32* %status89)
  %status90 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %46 = load i32, i32* %status90, align 4
  %and = and i32 %46, 958
  %tobool91 = icmp ne i32 %and, 0
  br i1 %tobool91, label %if.then.92, label %if.end.95

if.then.92:                                       ; preds = %if.end.88
  %47 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status93 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %48 = load i32, i32* %status93, align 4
  %and94 = and i32 %48, 958
  %49 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %47, i32 %and94, i32* %49)
  br label %out

if.end.95:                                        ; preds = %if.end.88
  %status96 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  store i32 0, i32* %status96, align 4
  call void @mpd_set_positive(%struct.mpd_t* %tmod)
  %50 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %51 = load i32*, i32** %status.addr, align 8
  call void @mpd_qround_to_int(%struct.mpd_t* %tbase, %struct.mpd_t* %50, %struct.mpd_context_t* %maxcontext, i32* %51)
  call void @mpd_set_positive(%struct.mpd_t* %tbase)
  %exp97 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 1
  %52 = load i64, i64* %exp97, align 8
  store i64 %52, i64* %tbase_exp, align 8
  %exp98 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tbase, i32 0, i32 1
  store i64 0, i64* %exp98, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %exp.addr, align 8
  %54 = load i32*, i32** %status.addr, align 8
  call void @mpd_qround_to_int(%struct.mpd_t* %texp, %struct.mpd_t* %53, %struct.mpd_context_t* %maxcontext, i32* %54)
  %exp99 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 1
  %55 = load i64, i64* %exp99, align 8
  store i64 %55, i64* %texp_exp, align 8
  %exp100 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %texp, i32 0, i32 1
  store i64 0, i64* %exp100, align 8
  %56 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_t* %tmod, %struct.mpd_context_t* %maxcontext, i32* %56)
  %57 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %58 = load i64, i64* %tbase_exp, align 8
  %59 = load i32*, i32** %status.addr, align 8
  %call101 = call i32 @mpd_qshiftl(%struct.mpd_t* %57, %struct.mpd_t* @one, i64 %58, i32* %59)
  %60 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %61 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %60, %struct.mpd_t* %61, %struct.mpd_t* %tmod, %struct.mpd_context_t* %maxcontext, i32* %62)
  %63 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %64 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_t* %63, %struct.mpd_context_t* %maxcontext, i32* %64)
  %65 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_t* %tmod, %struct.mpd_context_t* %maxcontext, i32* %65)
  %call102 = call i32 @mpd_isspecial(%struct.mpd_t* %tbase)
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.then.110, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %if.end.95
  %call105 = call i32 @mpd_isspecial(%struct.mpd_t* %texp)
  %tobool106 = icmp ne i32 %call105, 0
  br i1 %tobool106, label %if.then.110, label %lor.lhs.false.107

lor.lhs.false.107:                                ; preds = %lor.lhs.false.104
  %call108 = call i32 @mpd_isspecial(%struct.mpd_t* %tmod)
  %tobool109 = icmp ne i32 %call108, 0
  br i1 %tobool109, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %lor.lhs.false.107, %lor.lhs.false.104, %if.end.95
  br label %mpd_errors

if.end.111:                                       ; preds = %lor.lhs.false.107
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.111
  %66 = load i64, i64* %i, align 8
  %67 = load i64, i64* %texp_exp, align 8
  %cmp112 = icmp slt i64 %66, %67
  br i1 %cmp112, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %68 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qpowmod_uint(%struct.mpd_t* %tmp, %struct.mpd_t* %tbase, i64 10, %struct.mpd_t* %tmod, i32* %68)
  %69 = bitcast %struct.mpd_t* %t to i8*
  %70 = bitcast %struct.mpd_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 48, i32 8, i1 false)
  %71 = bitcast %struct.mpd_t* %tmp to i8*
  %72 = bitcast %struct.mpd_t* %tbase to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 48, i32 8, i1 false)
  %73 = bitcast %struct.mpd_t* %tbase to i8*
  %74 = bitcast %struct.mpd_t* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 48, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %75 = load i64, i64* %i, align 8
  %inc = add i64 %75, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call114 = call i32 @mpd_isspecial(%struct.mpd_t* %tbase)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %for.end
  br label %mpd_errors

if.end.117:                                       ; preds = %for.end
  %76 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %77 = load i32*, i32** %status.addr, align 8
  %call118 = call i32 @mpd_qcopy(%struct.mpd_t* %76, %struct.mpd_t* @one, i32* %77)
  br label %while.cond

while.cond:                                       ; preds = %if.end.129, %if.end.117
  %call119 = call i32 @mpd_isfinite(%struct.mpd_t* %texp)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %land.rhs.121, label %land.end.124

land.rhs.121:                                     ; preds = %while.cond
  %call122 = call i32 @mpd_iszero(%struct.mpd_t* %texp)
  %tobool123 = icmp ne i32 %call122, 0
  %lnot = xor i1 %tobool123, true
  br label %land.end.124

land.end.124:                                     ; preds = %land.rhs.121, %while.cond
  %78 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs.121 ]
  br i1 %78, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.124
  %call126 = call i32 @mpd_isodd(%struct.mpd_t* %texp)
  %tobool127 = icmp ne i32 %call126, 0
  br i1 %tobool127, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %while.body
  %79 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %80 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %81 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %79, %struct.mpd_t* %80, %struct.mpd_t* %tbase, %struct.mpd_context_t* %maxcontext, i32* %81)
  %82 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %83 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %84 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %82, %struct.mpd_t* %83, %struct.mpd_t* %tmod, %struct.mpd_context_t* %maxcontext, i32* %84)
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.128, %while.body
  %85 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_context_t* %maxcontext, i32* %85)
  %86 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %tbase, %struct.mpd_t* %tbase, %struct.mpd_t* %tmod, %struct.mpd_context_t* %maxcontext, i32* %86)
  %87 = load i32*, i32** %status.addr, align 8
  call void @mpd_qdivint(%struct.mpd_t* %texp, %struct.mpd_t* %texp, %struct.mpd_t* %two, %struct.mpd_context_t* %maxcontext, i32* %87)
  br label %while.cond

while.end:                                        ; preds = %land.end.124
  %call130 = call i32 @mpd_isspecial(%struct.mpd_t* %texp)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %if.then.141, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %while.end
  %call133 = call i32 @mpd_isspecial(%struct.mpd_t* %tbase)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.then.141, label %lor.lhs.false.135

lor.lhs.false.135:                                ; preds = %lor.lhs.false.132
  %call136 = call i32 @mpd_isspecial(%struct.mpd_t* %tmod)
  %tobool137 = icmp ne i32 %call136, 0
  br i1 %tobool137, label %if.then.141, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %lor.lhs.false.135
  %88 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call139 = call i32 @mpd_isspecial(%struct.mpd_t* %88)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.then.141, label %if.else

if.then.141:                                      ; preds = %lor.lhs.false.138, %lor.lhs.false.135, %lor.lhs.false.132, %while.end
  br label %mpd_errors

if.else:                                          ; preds = %lor.lhs.false.138
  %89 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %90 = load i8, i8* %sign, align 1
  call void @mpd_set_sign(%struct.mpd_t* %89, i8 zeroext %90)
  br label %if.end.142

if.end.142:                                       ; preds = %if.else
  br label %out

out:                                              ; preds = %mpd_errors, %if.end.142, %if.then.92
  call void @mpd_del(%struct.mpd_t* %tbase)
  call void @mpd_del(%struct.mpd_t* %texp)
  call void @mpd_del(%struct.mpd_t* %tmod)
  call void @mpd_del(%struct.mpd_t* %tmp)
  br label %return

mpd_errors:                                       ; preds = %if.then.141, %if.then.116, %if.then.110
  %91 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %91, i8 zeroext 0, i8 zeroext 4)
  br label %out

return:                                           ; preds = %out, %if.then.87, %if.then.83, %if.end.75, %if.then.74, %if.then.63, %if.then.59, %if.then.55, %if.end, %if.then.45
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mpd_qcheck_3nans(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_t* %c, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %c.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %choice = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %c, %struct.mpd_t** %c.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 0
  %3 = load i8, i8* %flags1, align 1
  %conv2 = zext i8 %3 to i32
  %or = or i32 %conv, %conv2
  %4 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  %flags3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 0
  %5 = load i8, i8* %flags3, align 1
  %conv4 = zext i8 %5 to i32
  %or5 = or i32 %or, %conv4
  %and = and i32 %or5, 12
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.31

if.then:                                          ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  store %struct.mpd_t* %6, %struct.mpd_t** %choice, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_issnan(%struct.mpd_t* %7)
  %tobool6 = icmp ne i32 %call, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %8, %struct.mpd_t** %choice, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %10 = load i32, i32* %9, align 4
  %or8 = or i32 %10, 256
  store i32 %or8, i32* %9, align 4
  br label %if.end.29

if.else:                                          ; preds = %if.then
  %11 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call9 = call i32 @mpd_issnan(%struct.mpd_t* %11)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.else.13

if.then.11:                                       ; preds = %if.else
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %12, %struct.mpd_t** %choice, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %14 = load i32, i32* %13, align 4
  %or12 = or i32 %14, 256
  store i32 %or12, i32* %13, align 4
  br label %if.end.28

if.else.13:                                       ; preds = %if.else
  %15 = load %struct.mpd_t*, %struct.mpd_t** %c.addr, align 8
  %call14 = call i32 @mpd_issnan(%struct.mpd_t* %15)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %if.else.13
  %16 = load i32*, i32** %status.addr, align 8
  %17 = load i32, i32* %16, align 4
  %or17 = or i32 %17, 256
  store i32 %or17, i32* %16, align 4
  br label %if.end.27

if.else.18:                                       ; preds = %if.else.13
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call19 = call i32 @mpd_isqnan(%struct.mpd_t* %18)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %if.else.18
  %19 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %19, %struct.mpd_t** %choice, align 8
  br label %if.end.26

if.else.22:                                       ; preds = %if.else.18
  %20 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call23 = call i32 @mpd_isqnan(%struct.mpd_t* %20)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.else.22
  %21 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_t* %21, %struct.mpd_t** %choice, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.25, %if.else.22
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %if.then.21
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then.16
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.11
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.7
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %choice, align 8
  %24 = load i32*, i32** %status.addr, align 8
  %call30 = call i32 @mpd_qcopy(%struct.mpd_t* %22, %struct.mpd_t* %23, i32* %24)
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_set_qnan(%struct.mpd_t* %25)
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @_mpd_fix_nan(%struct.mpd_t* %26, %struct.mpd_context_t* %27)
  store i32 1, i32* %retval
  br label %return

if.end.31:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.31, %if.end.29
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qrescale(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %exp, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %exp.addr, align 8
  %cmp = icmp sgt i64 %0, 1000000000000000000
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %exp.addr, align 8
  %cmp1 = icmp slt i64 %1, -1999999999999999997
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %2, i32 256, i32* %3)
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load i64, i64* %exp.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qrescale(%struct.mpd_t* %4, %struct.mpd_t* %5, i64 %6, %struct.mpd_context_t* %7, i32* %8)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qround_to_int(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qround_to_integral(i32 1, %struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qrem(%struct.mpd_t* %r, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %r.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %q_data = alloca [64 x i64], align 16
  %q = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %q_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.15

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call6 = call i32 @mpd_isinfinite(%struct.mpd_t* %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %return

if.end.9:                                         ; preds = %if.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call10 = call i32 @mpd_isinfinite(%struct.mpd_t* %10)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.end.9
  %11 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call13 = call i32 @mpd_qcopy(%struct.mpd_t* %11, %struct.mpd_t* %12, i32* %13)
  %14 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %14, %struct.mpd_context_t* %15, i32* %16)
  br label %return

if.end.14:                                        ; preds = %if.end.9
  call void @abort() #8
  unreachable

if.end.15:                                        ; preds = %lor.lhs.false
  %17 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call16 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %17)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.23

if.then.18:                                       ; preds = %if.end.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call19 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %18)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then.18
  %19 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %19, i32 16, i32* %20)
  br label %if.end.22

if.else:                                          ; preds = %if.then.18
  %21 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %22 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %21, i32 256, i32* %22)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.21
  br label %return

if.end.23:                                        ; preds = %if.end.15
  %23 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdivmod(%struct.mpd_t* %q, %struct.mpd_t* %23, %struct.mpd_t* %24, %struct.mpd_t* %25, %struct.mpd_context_t* %26, i32* %27)
  call void @mpd_del(%struct.mpd_t* %q)
  %28 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %29 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %30 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %28, %struct.mpd_context_t* %29, i32* %30)
  br label %return

return:                                           ; preds = %if.end.23, %if.end.22, %if.then.12, %if.then.8, %if.then.5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qmul_exact(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %workstatus)
  %4 = load i32, i32* %workstatus, align 4
  %5 = load i32*, i32** %status.addr, align 8
  %6 = load i32, i32* %5, align 4
  %or = or i32 %6, %4
  store i32 %or, i32* %5, align 4
  %7 = load i32, i32* %workstatus, align 4
  %and = and i32 %7, 4161
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_qpowmod_uint(%struct.mpd_t* %result, %struct.mpd_t* %base, i64 %exp, %struct.mpd_t* %mod, i32* %status) #2 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca i64, align 8
  %mod.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  store %struct.mpd_t* %mod, %struct.mpd_t** %mod.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %0, %struct.mpd_t* @one, i32* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i64, i64* %exp.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i64, i64* %exp.addr, align 8
  %and = and i64 %3, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %maxcontext, i32* %7)
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %8, %struct.mpd_t* %9, %struct.mpd_t* %10, %struct.mpd_context_t* %maxcontext, i32* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %12 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %15 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %12, %struct.mpd_t* %13, %struct.mpd_t* %14, %struct.mpd_context_t* %maxcontext, i32* %15)
  %16 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %mod.addr, align 8
  %19 = load i32*, i32** %status.addr, align 8
  call void @mpd_qrem(%struct.mpd_t* %16, %struct.mpd_t* %17, %struct.mpd_t* %18, %struct.mpd_context_t* %maxcontext, i32* %19)
  %20 = load i64, i64* %exp.addr, align 8
  %shr = lshr i64 %20, 1
  store i64 %shr, i64* %exp.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qquantize(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %b_exp = alloca i64, align 8
  %expdiff = alloca i64, align 8
  %shift = alloca i64, align 8
  %rnd = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 1
  %1 = load i64, i64* %exp, align 8
  store i64 %1, i64* %b_exp, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end.13

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call3 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %4, %struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_context_t* %7, i32* %8)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call6 = call i32 @mpd_isinfinite(%struct.mpd_t* %9)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call8 = call i32 @mpd_isinfinite(%struct.mpd_t* %10)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %land.lhs.true
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call11 = call i32 @mpd_qcopy(%struct.mpd_t* %11, %struct.mpd_t* %12, i32* %13)
  br label %return

if.end.12:                                        ; preds = %land.lhs.true, %if.end
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %14, i32 256, i32* %15)
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false
  %16 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 1
  %17 = load i64, i64* %exp14, align 8
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %18, i32 0, i32 1
  %19 = load i64, i64* %emax, align 8
  %cmp = icmp sgt i64 %17, %19
  br i1 %cmp, label %if.then.19, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %if.end.13
  %20 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 1
  %21 = load i64, i64* %exp16, align 8
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call17 = call i64 @mpd_etiny(%struct.mpd_context_t* %22)
  %cmp18 = icmp slt i64 %21, %call17
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %lor.lhs.false.15, %if.end.13
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %24 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %23, i32 256, i32* %24)
  br label %return

if.end.20:                                        ; preds = %lor.lhs.false.15
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call21 = call i32 @mpd_iszero(%struct.mpd_t* %25)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.20
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call24 = call zeroext i8 @mpd_sign(%struct.mpd_t* %27)
  %28 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 1
  %29 = load i64, i64* %exp25, align 8
  call void @_settriple(%struct.mpd_t* %26, i8 zeroext %call24, i64 0, i64 %29)
  %30 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %31 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %32 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %30, %struct.mpd_context_t* %31, i32* %32)
  br label %return

if.end.26:                                        ; preds = %if.end.20
  %33 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %33, i32 0, i32 1
  %34 = load i64, i64* %exp27, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp28 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 1
  %36 = load i64, i64* %exp28, align 8
  %sub = sub i64 %34, %36
  store i64 %sub, i64* %expdiff, align 8
  %37 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 2
  %38 = load i64, i64* %digits, align 8
  %39 = load i64, i64* %expdiff, align 8
  %add = add i64 %38, %39
  %40 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %40, i32 0, i32 0
  %41 = load i64, i64* %prec, align 8
  %cmp29 = icmp sgt i64 %add, %41
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.26
  %42 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %43 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %42, i32 256, i32* %43)
  br label %return

if.end.31:                                        ; preds = %if.end.26
  %44 = load i64, i64* %expdiff, align 8
  %cmp32 = icmp sge i64 %44, 0
  br i1 %cmp32, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %if.end.31
  %45 = load i64, i64* %expdiff, align 8
  store i64 %45, i64* %shift, align 8
  %46 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %47 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %48 = load i64, i64* %shift, align 8
  %49 = load i32*, i32** %status.addr, align 8
  %call34 = call i32 @mpd_qshiftl(%struct.mpd_t* %46, %struct.mpd_t* %47, i64 %48, i32* %49)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.37, label %if.then.36

if.then.36:                                       ; preds = %if.then.33
  br label %return

if.end.37:                                        ; preds = %if.then.33
  %50 = load i64, i64* %b_exp, align 8
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp38 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %51, i32 0, i32 1
  store i64 %50, i64* %exp38, align 8
  br label %if.end.53

if.else:                                          ; preds = %if.end.31
  %52 = load i64, i64* %expdiff, align 8
  %sub39 = sub i64 0, %52
  store i64 %sub39, i64* %shift, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %54 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %55 = load i64, i64* %shift, align 8
  %56 = load i32*, i32** %status.addr, align 8
  %call40 = call i64 @mpd_qshiftr(%struct.mpd_t* %53, %struct.mpd_t* %54, i64 %55, i32* %56)
  store i64 %call40, i64* %rnd, align 8
  %57 = load i64, i64* %rnd, align 8
  %cmp41 = icmp eq i64 %57, -1
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.else
  br label %return

if.end.43:                                        ; preds = %if.else
  %58 = load i64, i64* %b_exp, align 8
  %59 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp44 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %59, i32 0, i32 1
  store i64 %58, i64* %exp44, align 8
  %60 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %61 = load i64, i64* %rnd, align 8
  %62 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %63 = load i32*, i32** %status.addr, align 8
  %call45 = call i32 @_mpd_apply_round_fit(%struct.mpd_t* %60, i64 %61, %struct.mpd_context_t* %62, i32* %63)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %if.end.43
  br label %return

if.end.48:                                        ; preds = %if.end.43
  %64 = load i32, i32* %workstatus, align 4
  %or = or i32 %64, 4096
  store i32 %or, i32* %workstatus, align 4
  %65 = load i64, i64* %rnd, align 8
  %tobool49 = icmp ne i64 %65, 0
  br i1 %tobool49, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %if.end.48
  %66 = load i32, i32* %workstatus, align 4
  %or51 = or i32 %66, 64
  store i32 %or51, i32* %workstatus, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %if.end.48
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.end.37
  %67 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call54 = call i64 @mpd_adjexp(%struct.mpd_t* %67)
  %68 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax55 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %68, i32 0, i32 1
  %69 = load i64, i64* %emax55, align 8
  %cmp56 = icmp sgt i64 %call54, %69
  br i1 %cmp56, label %if.then.61, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %if.end.53
  %70 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call58 = call i64 @mpd_adjexp(%struct.mpd_t* %70)
  %71 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call59 = call i64 @mpd_etiny(%struct.mpd_context_t* %71)
  %cmp60 = icmp slt i64 %call58, %call59
  br i1 %cmp60, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %lor.lhs.false.57, %if.end.53
  %72 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %73 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %72, i32 256, i32* %73)
  br label %return

if.end.62:                                        ; preds = %lor.lhs.false.57
  %74 = load i32, i32* %workstatus, align 4
  %75 = load i32*, i32** %status.addr, align 8
  %76 = load i32, i32* %75, align 4
  %or63 = or i32 %76, %74
  store i32 %or63, i32* %75, align 4
  %77 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %78 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %79 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %77, %struct.mpd_context_t* %78, i32* %79)
  br label %return

return:                                           ; preds = %if.end.62, %if.then.61, %if.then.47, %if.then.42, %if.then.36, %if.then.30, %if.then.23, %if.then.19, %if.end.12, %if.then.10, %if.then.5
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @_mpd_apply_round_fit(%struct.mpd_t* %dec, i64 %rnd, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %rnd.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %carry = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i64 %rnd, i64* %rnd.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %1 = load i64, i64* %rnd.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call = call i32 @_mpd_rnd_incr(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 5
  %4 = load i64*, i64** %data, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 3
  %6 = load i64, i64* %len, align 8
  %call1 = call i64 @_mpd_baseincr(i64* %4, i64 %6)
  store i64 %call1, i64* %carry, align 8
  %7 = load i64, i64* %carry, align 8
  %tobool2 = icmp ne i64 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end.12

if.then.3:                                        ; preds = %if.then
  %8 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len4, align 8
  %add = add i64 %10, 1
  %11 = load i32*, i32** %status.addr, align 8
  %call5 = call i32 @mpd_qresize(%struct.mpd_t* %8, i64 %add, i32* %11)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %if.then.3
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.3
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 3
  %13 = load i64, i64* %len8, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 5
  %15 = load i64*, i64** %data9, align 8
  %arrayidx = getelementptr i64, i64* %15, i64 %13
  store i64 1, i64* %arrayidx, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  %17 = load i64, i64* %len10, align 8
  %add11 = add i64 %17, 1
  store i64 %add11, i64* %len10, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %18 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %18)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 2
  %20 = load i64, i64* %digits, align 8
  %21 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %21, i32 0, i32 0
  %22 = load i64, i64* %prec, align 8
  %cmp = icmp sgt i64 %20, %22
  br i1 %cmp, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.12
  %23 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %24 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %23, i32 256, i32* %24)
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.12
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then.13, %if.then.7
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qreduce(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %shift = alloca i64, align 8
  %maxexp = alloca i64, align 8
  %maxshift = alloca i64, align 8
  %sign_a = alloca i8, align 1
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %0)
  store i8 %call, i8* %sign_a, align 1
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  %call2 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_context_t* %4, i32* %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  %call5 = call i32 @mpd_qcopy(%struct.mpd_t* %6, %struct.mpd_t* %7, i32* %8)
  br label %return

if.end.6:                                         ; preds = %entry
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %11 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_qcopy(%struct.mpd_t* %9, %struct.mpd_t* %10, i32* %11)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %14 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %12, %struct.mpd_context_t* %13, i32* %14)
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call11 = call i32 @mpd_isspecial(%struct.mpd_t* %15)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.10
  br label %return

if.end.14:                                        ; preds = %if.end.10
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call15 = call i32 @mpd_iszero(%struct.mpd_t* %16)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.14
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %18 = load i8, i8* %sign_a, align 1
  call void @_settriple(%struct.mpd_t* %17, i8 zeroext %18, i64 0, i64 0)
  br label %return

if.end.18:                                        ; preds = %if.end.14
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call19 = call i64 @mpd_trail_zeros(%struct.mpd_t* %19)
  store i64 %call19, i64* %shift, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 7
  %21 = load i32, i32* %clamp, align 4
  %tobool20 = icmp ne i32 %21, 0
  br i1 %tobool20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call21 = call i64 @mpd_etop(%struct.mpd_context_t* %22)
  br label %cond.end

cond.false:                                       ; preds = %if.end.18
  %23 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %23, i32 0, i32 1
  %24 = load i64, i64* %emax, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call21, %cond.true ], [ %24, %cond.false ]
  store i64 %cond, i64* %maxexp, align 8
  %25 = load i64, i64* %maxexp, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp, align 8
  %sub = sub i64 %25, %27
  store i64 %sub, i64* %maxshift, align 8
  %28 = load i64, i64* %shift, align 8
  %29 = load i64, i64* %maxshift, align 8
  %cmp = icmp sgt i64 %28, %29
  br i1 %cmp, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %cond.end
  %30 = load i64, i64* %maxshift, align 8
  br label %cond.end.24

cond.false.23:                                    ; preds = %cond.end
  %31 = load i64, i64* %shift, align 8
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.true.22
  %cond25 = phi i64 [ %30, %cond.true.22 ], [ %31, %cond.false.23 ]
  store i64 %cond25, i64* %shift, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %33 = load i64, i64* %shift, align 8
  %call26 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %32, i64 %33)
  %34 = load i64, i64* %shift, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 1
  %36 = load i64, i64* %exp27, align 8
  %add = add i64 %36, %34
  store i64 %add, i64* %exp27, align 8
  br label %return

return:                                           ; preds = %cond.end.24, %if.then.17, %if.then.13, %if.then.9, %if.end, %if.then.4
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qrem_near(%struct.mpd_t* %r, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %r.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %btmp_data = alloca [64 x i64], align 16
  %btmp = alloca %struct.mpd_t, align 8
  %q_data = alloca [64 x i64], align 16
  %q = alloca %struct.mpd_t, align 8
  %expdiff = alloca i64, align 8
  %qdigits = alloca i64, align 8
  %cmp = alloca i32, align 4
  %isodd = alloca i32, align 4
  %allnine = alloca i32, align 4
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %btmp, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %btmp_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 0
  store i8 48, i8* %flags1, align 1
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 1
  store i64 0, i64* %exp2, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 2
  store i64 0, i64* %digits3, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 3
  store i64 0, i64* %len4, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 4
  store i64 64, i64* %alloc5, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 5
  %arraydecay7 = getelementptr inbounds [64 x i64], [64 x i64]* %q_data, i32 0, i32 0
  store i64* %arraydecay7, i64** %data6, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call8 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then, label %if.end.22

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qcheck_nans(%struct.mpd_t* %2, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %5, i32* %6)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call i32 @mpd_isinfinite(%struct.mpd_t* %7)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %return

if.end.16:                                        ; preds = %if.end
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call17 = call i32 @mpd_isinfinite(%struct.mpd_t* %10)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.16
  %11 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %13 = load i32*, i32** %status.addr, align 8
  %call20 = call i32 @mpd_qcopy(%struct.mpd_t* %11, %struct.mpd_t* %12, i32* %13)
  %14 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %16 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %14, %struct.mpd_context_t* %15, i32* %16)
  br label %return

if.end.21:                                        ; preds = %if.end.16
  call void @abort() #8
  unreachable

if.end.22:                                        ; preds = %lor.lhs.false
  %17 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call23 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %17)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.30

if.then.25:                                       ; preds = %if.end.22
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call26 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %18)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.then.25
  %19 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %19, i32 16, i32* %20)
  br label %if.end.29

if.else:                                          ; preds = %if.then.25
  %21 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %22 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %21, i32 256, i32* %22)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.28
  br label %return

if.end.30:                                        ; preds = %if.end.22
  %23 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp31 = icmp eq %struct.mpd_t* %23, %24
  br i1 %cmp31, label %if.then.32, label %if.end.37

if.then.32:                                       ; preds = %if.end.30
  %25 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  %call33 = call i32 @mpd_qcopy(%struct.mpd_t* %btmp, %struct.mpd_t* %25, i32* %26)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %if.then.32
  %27 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %28 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %27, i32 512, i32* %28)
  br label %return

if.end.36:                                        ; preds = %if.then.32
  store %struct.mpd_t* %btmp, %struct.mpd_t** %b.addr, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end.30
  %29 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %32 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %33 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qdivmod(%struct.mpd_t* %q, %struct.mpd_t* %29, %struct.mpd_t* %30, %struct.mpd_t* %31, %struct.mpd_context_t* %32, i32* %33)
  %call38 = call i32 @mpd_isnan(%struct.mpd_t* %q)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then.43, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %if.end.37
  %34 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call41 = call i32 @mpd_isnan(%struct.mpd_t* %34)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %lor.lhs.false.40, %if.end.37
  br label %finish

if.end.44:                                        ; preds = %lor.lhs.false.40
  %35 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call45 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %35)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  br label %finish

if.end.48:                                        ; preds = %if.end.44
  %36 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call49 = call i64 @mpd_adjexp(%struct.mpd_t* %36)
  %37 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call50 = call i64 @mpd_adjexp(%struct.mpd_t* %37)
  %sub = sub i64 %call49, %call50
  store i64 %sub, i64* %expdiff, align 8
  %38 = load i64, i64* %expdiff, align 8
  %cmp51 = icmp sle i64 -1, %38
  br i1 %cmp51, label %land.lhs.true, label %if.end.90

land.lhs.true:                                    ; preds = %if.end.48
  %39 = load i64, i64* %expdiff, align 8
  %cmp52 = icmp sle i64 %39, 1
  br i1 %cmp52, label %if.then.53, label %if.end.90

if.then.53:                                       ; preds = %land.lhs.true
  %call54 = call i32 @mpd_coeff_isallnine(%struct.mpd_t* %q)
  store i32 %call54, i32* %allnine, align 4
  %digits55 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 2
  %40 = load i64, i64* %digits55, align 8
  store i64 %40, i64* %qdigits, align 8
  %call56 = call i32 @mpd_isodd(%struct.mpd_t* %q)
  store i32 %call56, i32* %isodd, align 4
  call void @mpd_maxcontext(%struct.mpd_context_t* %workctx)
  %41 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call57 = call zeroext i8 @mpd_sign(%struct.mpd_t* %41)
  %conv = zext i8 %call57 to i32
  %42 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call58 = call zeroext i8 @mpd_sign(%struct.mpd_t* %42)
  %conv59 = zext i8 %call58 to i32
  %cmp60 = icmp eq i32 %conv, %conv59
  br i1 %cmp60, label %if.then.62, label %if.else.64

if.then.62:                                       ; preds = %if.then.53
  %43 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %44 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %status63 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qsub(%struct.mpd_t* %q, %struct.mpd_t* %43, %struct.mpd_t* %44, %struct.mpd_context_t* %workctx, i32* %status63)
  br label %if.end.66

if.else.64:                                       ; preds = %if.then.53
  %45 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %46 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %status65 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qadd(%struct.mpd_t* %q, %struct.mpd_t* %45, %struct.mpd_t* %46, %struct.mpd_context_t* %workctx, i32* %status65)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.64, %if.then.62
  %status67 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %47 = load i32, i32* %status67, align 4
  %and = and i32 %47, 958
  %tobool68 = icmp ne i32 %and, 0
  br i1 %tobool68, label %if.then.69, label %if.end.72

if.then.69:                                       ; preds = %if.end.66
  %48 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %status70 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %49 = load i32, i32* %status70, align 4
  %and71 = and i32 %49, 958
  %50 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %48, i32 %and71, i32* %50)
  br label %finish

if.end.72:                                        ; preds = %if.end.66
  %51 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call73 = call i32 @_mpd_cmp_abs(%struct.mpd_t* %q, %struct.mpd_t* %51)
  store i32 %call73, i32* %cmp, align 4
  %52 = load i32, i32* %cmp, align 4
  %cmp74 = icmp slt i32 %52, 0
  br i1 %cmp74, label %if.then.81, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %if.end.72
  %53 = load i32, i32* %cmp, align 4
  %cmp77 = icmp eq i32 %53, 0
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.89

land.lhs.true.79:                                 ; preds = %lor.lhs.false.76
  %54 = load i32, i32* %isodd, align 4
  %tobool80 = icmp ne i32 %54, 0
  br i1 %tobool80, label %if.then.81, label %if.end.89

if.then.81:                                       ; preds = %land.lhs.true.79, %if.end.72
  %55 = load i32, i32* %allnine, align 4
  %tobool82 = icmp ne i32 %55, 0
  br i1 %tobool82, label %land.lhs.true.83, label %if.end.87

land.lhs.true.83:                                 ; preds = %if.then.81
  %56 = load i64, i64* %qdigits, align 8
  %57 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %57, i32 0, i32 0
  %58 = load i64, i64* %prec, align 8
  %cmp84 = icmp eq i64 %56, %58
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %land.lhs.true.83
  %59 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %60 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %59, i32 8, i32* %60)
  br label %finish

if.end.87:                                        ; preds = %land.lhs.true.83, %if.then.81
  %61 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  %call88 = call i32 @mpd_qcopy(%struct.mpd_t* %61, %struct.mpd_t* %q, i32* %62)
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.87, %land.lhs.true.79, %lor.lhs.false.76
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %land.lhs.true, %if.end.48
  br label %finish

finish:                                           ; preds = %if.end.90, %if.then.86, %if.then.69, %if.then.47, %if.then.43
  call void @mpd_del(%struct.mpd_t* %btmp)
  call void @mpd_del(%struct.mpd_t* %q)
  %63 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %64 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %65 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %63, %struct.mpd_context_t* %64, i32* %65)
  br label %return

return:                                           ; preds = %finish, %if.then.35, %if.end.29, %if.then.19, %if.then.15, %if.then.12
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mpd_coeff_isallnine(%struct.mpd_t* %dec) #0 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i64 @mpd_msword(%struct.mpd_t* %0)
  %call1 = call i32 @mpd_word_isallnine(i64 %call)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 5
  %2 = load i64*, i64** %data, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 3
  %4 = load i64, i64* %len, align 8
  %sub = sub i64 %4, 1
  %call2 = call i32 @_mpd_isallnine(i64* %2, i64 %sub)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qsub(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %3)
  %tobool = icmp ne i8 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = trunc i32 %lnot.ext to i8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qaddsub(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, i8 zeroext %conv, %struct.mpd_context_t* %4, i32* %5)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qrescale(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %exp, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %expdiff = alloca i64, align 8
  %shift = alloca i64, align 8
  %rnd = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcopy(%struct.mpd_t* %1, %struct.mpd_t* %2, i32* %3)
  br label %if.end.32

if.end:                                           ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call2 = call i32 @mpd_iszero(%struct.mpd_t* %4)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call5 = call zeroext i8 @mpd_sign(%struct.mpd_t* %6)
  %7 = load i64, i64* %exp.addr, align 8
  call void @_settriple(%struct.mpd_t* %5, i8 zeroext %call5, i64 0, i64 %7)
  br label %if.end.32

if.end.6:                                         ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp7, align 8
  %10 = load i64, i64* %exp.addr, align 8
  %sub = sub i64 %9, %10
  store i64 %sub, i64* %expdiff, align 8
  %11 = load i64, i64* %expdiff, align 8
  %cmp = icmp sge i64 %11, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end.6
  %12 = load i64, i64* %expdiff, align 8
  store i64 %12, i64* %shift, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 2
  %14 = load i64, i64* %digits, align 8
  %15 = load i64, i64* %shift, align 8
  %add = add i64 %14, %15
  %cmp9 = icmp sgt i64 %add, 1000000000000000000
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %16, i32 256, i32* %17)
  br label %if.end.32

if.end.11:                                        ; preds = %if.then.8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %20 = load i64, i64* %shift, align 8
  %21 = load i32*, i32** %status.addr, align 8
  %call12 = call i32 @mpd_qshiftl(%struct.mpd_t* %18, %struct.mpd_t* %19, i64 %20, i32* %21)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.11
  br label %if.end.32

if.end.15:                                        ; preds = %if.end.11
  %22 = load i64, i64* %exp.addr, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 1
  store i64 %22, i64* %exp16, align 8
  br label %if.end.27

if.else:                                          ; preds = %if.end.6
  %24 = load i64, i64* %expdiff, align 8
  %sub17 = sub i64 0, %24
  store i64 %sub17, i64* %shift, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %27 = load i64, i64* %shift, align 8
  %28 = load i32*, i32** %status.addr, align 8
  %call18 = call i64 @mpd_qshiftr(%struct.mpd_t* %25, %struct.mpd_t* %26, i64 %27, i32* %28)
  store i64 %call18, i64* %rnd, align 8
  %29 = load i64, i64* %rnd, align 8
  %cmp19 = icmp eq i64 %29, -1
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.else
  br label %if.end.32

if.end.21:                                        ; preds = %if.else
  %30 = load i64, i64* %exp.addr, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 1
  store i64 %30, i64* %exp22, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %33 = load i64, i64* %rnd, align 8
  %34 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %35 = load i32*, i32** %status.addr, align 8
  call void @_mpd_apply_round_excess(%struct.mpd_t* %32, i64 %33, %struct.mpd_context_t* %34, i32* %35)
  %36 = load i32*, i32** %status.addr, align 8
  %37 = load i32, i32* %36, align 4
  %or = or i32 %37, 4096
  store i32 %or, i32* %36, align 4
  %38 = load i64, i64* %rnd, align 8
  %tobool23 = icmp ne i64 %38, 0
  br i1 %tobool23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %if.end.21
  %39 = load i32*, i32** %status.addr, align 8
  %40 = load i32, i32* %39, align 4
  %or25 = or i32 %40, 64
  store i32 %or25, i32* %39, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.24, %if.end.21
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.15
  %41 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %42 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call28 = call i32 @mpd_issubnormal(%struct.mpd_t* %41, %struct.mpd_context_t* %42)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.27
  %43 = load i32*, i32** %status.addr, align 8
  %44 = load i32, i32* %43, align 4
  %or31 = or i32 %44, 8192
  store i32 %or31, i32* %43, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then, %if.then.4, %if.then.10, %if.then.14, %if.then.20, %if.then.30, %if.end.27
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qrescale_fmt(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %exp, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %exp.addr, align 8
  %cmp = icmp sgt i64 %0, 1000000000000000000
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %exp.addr, align 8
  %cmp1 = icmp slt i64 %1, -2999999999999999996
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %2, i32 256, i32* %3)
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %6 = load i64, i64* %exp.addr, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %8 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qrescale(%struct.mpd_t* %4, %struct.mpd_t* %5, i64 %6, %struct.mpd_context_t* %7, i32* %8)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qround_to_intx(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qround_to_integral(i32 0, %struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qround_to_integral(i32 %action, %struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %action.addr = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %rnd = alloca i64, align 8
  store i32 %action, i32* %action.addr, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %if.end.30

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call4 = call i32 @mpd_qcopy(%struct.mpd_t* %5, %struct.mpd_t* %6, i32* %7)
  br label %if.end.30

if.end.5:                                         ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp, align 8
  %cmp = icmp sge i64 %9, 0
  br i1 %cmp, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end.5
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %12 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_qcopy(%struct.mpd_t* %10, %struct.mpd_t* %11, i32* %12)
  br label %if.end.30

if.end.8:                                         ; preds = %if.end.5
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %13)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %if.end.8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call12 = call zeroext i8 @mpd_sign(%struct.mpd_t* %15)
  call void @_settriple(%struct.mpd_t* %14, i8 zeroext %call12, i64 0, i64 0)
  br label %if.end.30

if.end.13:                                        ; preds = %if.end.8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 1
  %19 = load i64, i64* %exp14, align 8
  %sub = sub i64 0, %19
  %20 = load i32*, i32** %status.addr, align 8
  %call15 = call i64 @mpd_qshiftr(%struct.mpd_t* %16, %struct.mpd_t* %17, i64 %sub, i32* %20)
  store i64 %call15, i64* %rnd, align 8
  %21 = load i64, i64* %rnd, align 8
  %cmp16 = icmp eq i64 %21, -1
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.13
  br label %if.end.30

if.end.18:                                        ; preds = %if.end.13
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  store i64 0, i64* %exp19, align 8
  %23 = load i32, i32* %action.addr, align 4
  %cmp20 = icmp eq i32 %23, 0
  br i1 %cmp20, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.18
  %24 = load i32, i32* %action.addr, align 4
  %cmp21 = icmp eq i32 %24, 1
  br i1 %cmp21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %lor.lhs.false, %if.end.18
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load i64, i64* %rnd, align 8
  %27 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %28 = load i32*, i32** %status.addr, align 8
  call void @_mpd_apply_round_excess(%struct.mpd_t* %25, i64 %26, %struct.mpd_context_t* %27, i32* %28)
  %29 = load i32, i32* %action.addr, align 4
  %cmp23 = icmp eq i32 %29, 0
  br i1 %cmp23, label %if.then.24, label %if.end.29

if.then.24:                                       ; preds = %if.then.22
  %30 = load i32*, i32** %status.addr, align 8
  %31 = load i32, i32* %30, align 4
  %or = or i32 %31, 4096
  store i32 %or, i32* %30, align 4
  %32 = load i64, i64* %rnd, align 8
  %tobool25 = icmp ne i64 %32, 0
  br i1 %tobool25, label %if.then.26, label %if.end.28

if.then.26:                                       ; preds = %if.then.24
  %33 = load i32*, i32** %status.addr, align 8
  %34 = load i32, i32* %33, align 4
  %or27 = or i32 %34, 64
  store i32 %or27, i32* %33, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.26, %if.then.24
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.22
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.3, %if.end, %if.then.6, %if.then.11, %if.then.17, %if.end.29, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qtrunc(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qround_to_integral(i32 2, %struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_context_t* %2, i32* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qfloor(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %1 = bitcast %struct.mpd_context_t* %workctx to i8*
  %2 = bitcast %struct.mpd_context_t* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 3, i32* %round, align 4
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qround_to_integral(i32 1, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %workctx, i32* %5)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qceil(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %1 = bitcast %struct.mpd_context_t* %workctx to i8*
  %2 = bitcast %struct.mpd_context_t* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 2, i32* %round, align 4
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qround_to_integral(i32 1, %struct.mpd_t* %3, %struct.mpd_t* %4, %struct.mpd_context_t* %workctx, i32* %5)
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i32 @mpd_same_quantum(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isspecial(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call3 = call i32 @mpd_isnan(%struct.mpd_t* %2)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %if.then
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call i32 @mpd_isnan(%struct.mpd_t* %3)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %if.then
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call7 = call i32 @mpd_isinfinite(%struct.mpd_t* %4)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call9 = call i32 @mpd_isinfinite(%struct.mpd_t* %5)
  %tobool10 = icmp ne i32 %call9, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %tobool10, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %7 = phi i1 [ true, %land.lhs.true ], [ %6, %land.end ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 1
  %9 = load i64, i64* %exp, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %10, i32 0, i32 1
  %11 = load i64, i64* %exp11, align 8
  %cmp = icmp eq i64 %9, %11
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %lor.end
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qinvroot(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call i32 @mpd_isnegative(%struct.mpd_t* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %6, i32 256, i32* %7)
  br label %return

if.end.7:                                         ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call8 = call i64 @mpd_etiny(%struct.mpd_context_t* %9)
  call void @_settriple(%struct.mpd_t* %8, i8 zeroext 0, i64 0, i64 %call8)
  %10 = load i32*, i32** %status.addr, align 8
  %11 = load i32, i32* %10, align 4
  %or = or i32 %11, 1
  store i32 %or, i32* %10, align 4
  br label %return

if.end.9:                                         ; preds = %entry
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call10 = call i32 @mpd_iszero(%struct.mpd_t* %12)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end.9
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call zeroext i8 @mpd_sign(%struct.mpd_t* %14)
  call void @mpd_setspecial(%struct.mpd_t* %13, i8 zeroext %call13, i8 zeroext 2)
  %15 = load i32*, i32** %status.addr, align 8
  %16 = load i32, i32* %15, align 4
  %or14 = or i32 %16, 4
  store i32 %or14, i32* %15, align 4
  br label %return

if.end.15:                                        ; preds = %if.end.9
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call16 = call i32 @mpd_isnegative(%struct.mpd_t* %17)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %18, i32 256, i32* %19)
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %21 = bitcast %struct.mpd_context_t* %workctx to i8*
  %22 = bitcast %struct.mpd_context_t* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 48, i32 8, i1 false)
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %23 = load i64, i64* %prec, align 8
  %add = add i64 %23, 2
  store i64 %add, i64* %prec, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %24 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %26 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qinvroot(%struct.mpd_t* %24, %struct.mpd_t* %25, %struct.mpd_context_t* %workctx, i32* %26)
  %27 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %27, %struct.mpd_context_t* %28, i32* %29)
  br label %return

return:                                           ; preds = %if.end.19, %if.then.18, %if.then.12, %if.end.7, %if.then.6, %if.then.3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qinvroot(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %varcontext = alloca %struct.mpd_context_t, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %z = alloca %struct.mpd_t*, align 8
  %v = alloca %struct.mpd_t*, align 8
  %vtmp = alloca %struct.mpd_t, align 8
  %s_data = alloca [64 x i64], align 16
  %s = alloca %struct.mpd_t, align 8
  %t_data = alloca [64 x i64], align 16
  %t = alloca %struct.mpd_t, align 8
  %one_half_data = alloca [1 x i64], align 8
  %one_half = alloca %struct.mpd_t, align 8
  %three_data = alloca [1 x i64], align 8
  %three = alloca %struct.mpd_t, align 8
  %klist = alloca [64 x i64], align 16
  %ideal_exp = alloca i64, align 8
  %shift = alloca i64, align 8
  %adj = alloca i64, align 8
  %tz = alloca i64, align 8
  %maxprec = alloca i64, align 8
  %fracdigits = alloca i64, align 8
  %vhat = alloca i64, align 8
  %dummy = alloca i64, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %z, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 0
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 0
  %2 = load i8, i8* %flags1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, -225
  %or = or i32 %and, 16
  %or2 = or i32 %or, 64
  %conv3 = trunc i32 %or2 to i8
  store i8 %conv3, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 1
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp4, align 8
  store i64 %4, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 2
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 2
  %6 = load i64, i64* %digits5, align 8
  store i64 %6, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 3
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 3
  %8 = load i64, i64* %len6, align 8
  store i64 %8, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 4
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 4
  %10 = load i64, i64* %alloc7, align 8
  store i64 %10, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 5
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 5
  %12 = load i64*, i64** %data8, align 8
  store i64* %12, i64** %data, align 8
  %flags9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 0
  store i8 48, i8* %flags9, align 1
  %exp10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 1
  store i64 0, i64* %exp10, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 2
  store i64 0, i64* %digits11, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 3
  store i64 0, i64* %len12, align 8
  %alloc13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 4
  store i64 64, i64* %alloc13, align 8
  %data14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %s_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data14, align 8
  %flags15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 0
  store i8 48, i8* %flags15, align 1
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 1
  store i64 0, i64* %exp16, align 8
  %digits17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 2
  store i64 0, i64* %digits17, align 8
  %len18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 3
  store i64 0, i64* %len18, align 8
  %alloc19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 4
  store i64 64, i64* %alloc19, align 8
  %data20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 5
  %arraydecay21 = getelementptr inbounds [64 x i64], [64 x i64]* %t_data, i32 0, i32 0
  store i64* %arraydecay21, i64** %data20, align 8
  %13 = bitcast [1 x i64]* %one_half_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast ([1 x i64]* @_mpd_qinvroot.one_half_data to i8*), i64 8, i32 8, i1 false)
  %flags22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 0
  store i8 -112, i8* %flags22, align 1
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 1
  store i64 -1, i64* %exp23, align 8
  %digits24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 2
  store i64 1, i64* %digits24, align 8
  %len25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 3
  store i64 1, i64* %len25, align 8
  %alloc26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 4
  store i64 1, i64* %alloc26, align 8
  %data27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %one_half, i32 0, i32 5
  %arraydecay28 = getelementptr inbounds [1 x i64], [1 x i64]* %one_half_data, i32 0, i32 0
  store i64* %arraydecay28, i64** %data27, align 8
  %14 = bitcast [1 x i64]* %three_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* bitcast ([1 x i64]* @_mpd_qinvroot.three_data to i8*), i64 8, i32 8, i1 false)
  %flags29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 0
  store i8 -112, i8* %flags29, align 1
  %exp30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 1
  store i64 0, i64* %exp30, align 8
  %digits31 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 2
  store i64 1, i64* %digits31, align 8
  %len32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 3
  store i64 1, i64* %len32, align 8
  %alloc33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 4
  store i64 1, i64* %alloc33, align 8
  %data34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %three, i32 0, i32 5
  %arraydecay35 = getelementptr inbounds [1 x i64], [1 x i64]* %three_data, i32 0, i32 0
  store i64* %arraydecay35, i64** %data34, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp36 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 1
  %16 = load i64, i64* %exp36, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp37 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 1
  %18 = load i64, i64* %exp37, align 8
  %and38 = and i64 %18, 1
  %sub = sub i64 %16, %and38
  %sub39 = sub i64 0, %sub
  %div = sdiv i64 %sub39, 2
  store i64 %div, i64* %ideal_exp, align 8
  store %struct.mpd_t* %vtmp, %struct.mpd_t** %v, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %19, %20
  br i1 %cmp, label %if.then, label %if.end.44

if.then:                                          ; preds = %entry
  %21 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call %struct.mpd_t* @mpd_qncopy(%struct.mpd_t* %21)
  store %struct.mpd_t* %call, %struct.mpd_t** %v, align 8
  %cmp41 = icmp eq %struct.mpd_t* %call, null
  br i1 %cmp41, label %if.then.43, label %if.end

if.then.43:                                       ; preds = %if.then
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %22, i32 512, i32* %23)
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.44

if.end.44:                                        ; preds = %if.end, %entry
  %24 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 2
  %25 = load i64, i64* %digits45, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp46, align 8
  %add = add i64 %25, %27
  %and47 = and i64 %add, 1
  %tobool = icmp ne i64 %and47, 0
  br i1 %tobool, label %if.then.48, label %if.else

if.then.48:                                       ; preds = %if.end.44
  %28 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits49 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 2
  %29 = load i64, i64* %digits49, align 8
  %sub50 = sub i64 %29, 1
  store i64 %sub50, i64* %fracdigits, align 8
  %30 = load i64, i64* %fracdigits, align 8
  %sub51 = sub i64 0, %30
  %31 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp52 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 1
  store i64 %sub51, i64* %exp52, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 2
  %33 = load i64, i64* %digits53, align 8
  %cmp54 = icmp sgt i64 %33, 7
  br i1 %cmp54, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.48
  br label %cond.end

cond.false:                                       ; preds = %if.then.48
  %34 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %34, i32 0, i32 2
  %35 = load i64, i64* %digits56, align 8
  %conv57 = trunc i64 %35 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 7, %cond.true ], [ %conv57, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %36 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %37 = load i32, i32* %n, align 4
  call void @_mpd_get_msdigits(i64* %dummy, i64* %vhat, %struct.mpd_t* %36, i32 %37)
  %38 = load i32, i32* %n, align 4
  %cmp58 = icmp slt i32 %38, 7
  br i1 %cmp58, label %if.then.60, label %if.end.62

if.then.60:                                       ; preds = %cond.end
  %39 = load i32, i32* %n, align 4
  %sub61 = sub i32 7, %39
  %idxprom = sext i32 %sub61 to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %40 = load i64, i64* %arrayidx, align 8
  %41 = load i64, i64* %vhat, align 8
  %mul = mul i64 %41, %40
  store i64 %mul, i64* %vhat, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.60, %cond.end
  br label %if.end.84

if.else:                                          ; preds = %if.end.44
  %42 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits63 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %42, i32 0, i32 2
  %43 = load i64, i64* %digits63, align 8
  %sub64 = sub i64 %43, 2
  store i64 %sub64, i64* %fracdigits, align 8
  %44 = load i64, i64* %fracdigits, align 8
  %sub65 = sub i64 0, %44
  %45 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp66 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %45, i32 0, i32 1
  store i64 %sub65, i64* %exp66, align 8
  %46 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits67 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %46, i32 0, i32 2
  %47 = load i64, i64* %digits67, align 8
  %cmp68 = icmp sgt i64 %47, 8
  br i1 %cmp68, label %cond.true.70, label %cond.false.71

cond.true.70:                                     ; preds = %if.else
  br label %cond.end.74

cond.false.71:                                    ; preds = %if.else
  %48 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits72 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %48, i32 0, i32 2
  %49 = load i64, i64* %digits72, align 8
  %conv73 = trunc i64 %49 to i32
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.71, %cond.true.70
  %cond75 = phi i32 [ 8, %cond.true.70 ], [ %conv73, %cond.false.71 ]
  store i32 %cond75, i32* %n, align 4
  %50 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %51 = load i32, i32* %n, align 4
  call void @_mpd_get_msdigits(i64* %dummy, i64* %vhat, %struct.mpd_t* %50, i32 %51)
  %52 = load i32, i32* %n, align 4
  %cmp76 = icmp slt i32 %52, 8
  br i1 %cmp76, label %if.then.78, label %if.end.83

if.then.78:                                       ; preds = %cond.end.74
  %53 = load i32, i32* %n, align 4
  %sub79 = sub i32 8, %53
  %idxprom80 = sext i32 %sub79 to i64
  %arrayidx81 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom80
  %54 = load i64, i64* %arrayidx81, align 8
  %55 = load i64, i64* %vhat, align 8
  %mul82 = mul i64 %55, %54
  store i64 %mul82, i64* %vhat, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.78, %cond.end.74
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.end.62
  %56 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp85 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 1
  %57 = load i64, i64* %exp85, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp86 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %58, i32 0, i32 1
  %59 = load i64, i64* %exp86, align 8
  %sub87 = sub i64 %57, %59
  %div88 = sdiv i64 %sub87, 2
  store i64 %div88, i64* %adj, align 8
  %60 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %61 = load i64, i64* %vhat, align 8
  call void @_invroot_init_approx(%struct.mpd_t* %60, i64 %61)
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  call void @mpd_maxcontext(%struct.mpd_context_t* %varcontext)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 6
  store i32 8, i32* %round, align 4
  %62 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %62, i32 0, i32 0
  %63 = load i64, i64* %prec, align 8
  %add89 = add i64 %63, 1
  store i64 %add89, i64* %maxprec, align 8
  %arraydecay90 = getelementptr inbounds [64 x i64], [64 x i64]* %klist, i32 0, i32 0
  %64 = load i64, i64* %maxprec, align 8
  %call91 = call i32 @invroot_schedule_prec(i64* %arraydecay90, i64 %64, i64 3)
  store i32 %call91, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.84
  %65 = load i32, i32* %i, align 4
  %cmp92 = icmp sge i32 %65, 0
  br i1 %cmp92, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %66 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %66 to i64
  %arrayidx95 = getelementptr [64 x i64], [64 x i64]* %klist, i32 0, i64 %idxprom94
  %67 = load i64, i64* %arrayidx95, align 8
  %mul96 = mul i64 2, %67
  %add97 = add i64 %mul96, 2
  %prec98 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  store i64 %add97, i64* %prec98, align 8
  %68 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %69 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_qmul(%struct.mpd_t* %s, %struct.mpd_t* %68, %struct.mpd_t* %69, %struct.mpd_context_t* %maxcontext, i32* %workstatus)
  %70 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits99 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %70, i32 0, i32 2
  %71 = load i64, i64* %digits99, align 8
  %prec100 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %72 = load i64, i64* %prec100, align 8
  %cmp101 = icmp sgt i64 %71, %72
  br i1 %cmp101, label %if.then.103, label %if.else.110

if.then.103:                                      ; preds = %for.body
  %73 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits104 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %73, i32 0, i32 2
  %74 = load i64, i64* %digits104, align 8
  %prec105 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %75 = load i64, i64* %prec105, align 8
  %sub106 = sub i64 %74, %75
  store i64 %sub106, i64* %shift, align 8
  %76 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %77 = load i64, i64* %shift, align 8
  %call107 = call i64 @mpd_qshiftr(%struct.mpd_t* %t, %struct.mpd_t* %76, i64 %77, i32* %workstatus)
  %78 = load i64, i64* %shift, align 8
  %exp108 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 1
  %79 = load i64, i64* %exp108, align 8
  %add109 = add i64 %79, %78
  store i64 %add109, i64* %exp108, align 8
  call void @mpd_qmul(%struct.mpd_t* %t, %struct.mpd_t* %t, %struct.mpd_t* %s, %struct.mpd_context_t* %varcontext, i32* %workstatus)
  br label %if.end.111

if.else.110:                                      ; preds = %for.body
  %80 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  call void @mpd_qmul(%struct.mpd_t* %t, %struct.mpd_t* %80, %struct.mpd_t* %s, %struct.mpd_context_t* %varcontext, i32* %workstatus)
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.110, %if.then.103
  call void @mpd_qsub(%struct.mpd_t* %t, %struct.mpd_t* %three, %struct.mpd_t* %t, %struct.mpd_context_t* %maxcontext, i32* %workstatus)
  %81 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %82 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_qmul(%struct.mpd_t* %81, %struct.mpd_t* %82, %struct.mpd_t* %t, %struct.mpd_context_t* %varcontext, i32* %workstatus)
  %83 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %84 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  call void @mpd_qmul(%struct.mpd_t* %83, %struct.mpd_t* %84, %struct.mpd_t* %one_half, %struct.mpd_context_t* %maxcontext, i32* %workstatus)
  br label %for.inc

for.inc:                                          ; preds = %if.end.111
  %85 = load i32, i32* %i, align 4
  %dec = add i32 %85, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %86 = load i64, i64* %adj, align 8
  %87 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %exp112 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %87, i32 0, i32 1
  %88 = load i64, i64* %exp112, align 8
  %sub113 = sub i64 %88, %86
  store i64 %sub113, i64* %exp112, align 8
  %89 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call114 = call i64 @mpd_trail_zeros(%struct.mpd_t* %89)
  store i64 %call114, i64* %tz, align 8
  %90 = load i64, i64* %ideal_exp, align 8
  %91 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp115 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %91, i32 0, i32 1
  %92 = load i64, i64* %exp115, align 8
  %sub116 = sub i64 %90, %92
  store i64 %sub116, i64* %shift, align 8
  %93 = load i64, i64* %tz, align 8
  %94 = load i64, i64* %shift, align 8
  %cmp117 = icmp sgt i64 %93, %94
  br i1 %cmp117, label %cond.true.119, label %cond.false.120

cond.true.119:                                    ; preds = %for.end
  %95 = load i64, i64* %shift, align 8
  br label %cond.end.121

cond.false.120:                                   ; preds = %for.end
  %96 = load i64, i64* %tz, align 8
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.120, %cond.true.119
  %cond122 = phi i64 [ %95, %cond.true.119 ], [ %96, %cond.false.120 ]
  store i64 %cond122, i64* %shift, align 8
  %97 = load i64, i64* %shift, align 8
  %cmp123 = icmp sgt i64 %97, 0
  br i1 %cmp123, label %if.then.125, label %if.end.129

if.then.125:                                      ; preds = %cond.end.121
  %98 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %99 = load i64, i64* %shift, align 8
  %call126 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %98, i64 %99)
  %100 = load i64, i64* %shift, align 8
  %101 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp127 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %101, i32 0, i32 1
  %102 = load i64, i64* %exp127, align 8
  %add128 = add i64 %102, %100
  store i64 %add128, i64* %exp127, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.125, %cond.end.121
  call void @mpd_del(%struct.mpd_t* %s)
  call void @mpd_del(%struct.mpd_t* %t)
  %103 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %cmp130 = icmp ne %struct.mpd_t* %103, %vtmp
  br i1 %cmp130, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %if.end.129
  %104 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  call void @mpd_del(%struct.mpd_t* %104)
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.132, %if.end.129
  %105 = load i32, i32* %workstatus, align 4
  %and134 = and i32 %105, 958
  %106 = load i32*, i32** %status.addr, align 8
  %107 = load i32, i32* %106, align 4
  %or135 = or i32 %107, %and134
  store i32 %or135, i32* %106, align 4
  %108 = load i32*, i32** %status.addr, align 8
  %109 = load i32, i32* %108, align 4
  %or136 = or i32 %109, 4160
  store i32 %or136, i32* %108, align 4
  br label %return

return:                                           ; preds = %if.end.133, %if.then.43
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qsqrt(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %c_data = alloca [64 x i64], align 16
  %c = alloca %struct.mpd_t, align 8
  %q_data = alloca [64 x i64], align 16
  %q = alloca %struct.mpd_t, align 8
  %r_data = alloca [64 x i64], align 16
  %r = alloca %struct.mpd_t, align 8
  %two_data = alloca [1 x i64], align 8
  %two = alloca %struct.mpd_t, align 8
  %prec = alloca i64, align 8
  %ideal_exp = alloca i64, align 8
  %l = alloca i64, align 8
  %shift = alloca i64, align 8
  %exact = alloca i32, align 4
  %lsd = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %c_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 0
  store i8 48, i8* %flags1, align 1
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 1
  store i64 0, i64* %exp2, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 2
  store i64 0, i64* %digits3, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 3
  store i64 0, i64* %len4, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 4
  store i64 64, i64* %alloc5, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 5
  %arraydecay7 = getelementptr inbounds [64 x i64], [64 x i64]* %q_data, i32 0, i32 0
  store i64* %arraydecay7, i64** %data6, align 8
  %flags8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 0
  store i8 48, i8* %flags8, align 1
  %exp9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 1
  store i64 0, i64* %exp9, align 8
  %digits10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 2
  store i64 0, i64* %digits10, align 8
  %len11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 3
  store i64 0, i64* %len11, align 8
  %alloc12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 4
  store i64 64, i64* %alloc12, align 8
  %data13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %r, i32 0, i32 5
  %arraydecay14 = getelementptr inbounds [64 x i64], [64 x i64]* %r_data, i32 0, i32 0
  store i64* %arraydecay14, i64** %data13, align 8
  %0 = bitcast [1 x i64]* %two_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @mpd_qsqrt.two_data to i8*), i64 8, i32 8, i1 false)
  %flags15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 0
  store i8 -112, i8* %flags15, align 1
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 1
  store i64 0, i64* %exp16, align 8
  %digits17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 2
  store i64 1, i64* %digits17, align 8
  %len18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 3
  store i64 1, i64* %len18, align 8
  %alloc19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 4
  store i64 1, i64* %alloc19, align 8
  %data20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 5
  %arraydecay21 = getelementptr inbounds [1 x i64], [1 x i64]* %two_data, i32 0, i32 0
  store i64* %arraydecay21, i64** %data20, align 8
  store i32 0, i32* %exact, align 4
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 1
  %2 = load i64, i64* %exp22, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp23, align 8
  %and = and i64 %4, 1
  %sub = sub i64 %2, %and
  %div = sdiv i64 %sub, 2
  store i64 %div, i64* %ideal_exp, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.31

if.then:                                          ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  %call24 = call i32 @mpd_qcheck_nan(%struct.mpd_t* %6, %struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %9)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call27 = call i32 @mpd_isnegative(%struct.mpd_t* %10)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %11, i32 256, i32* %12)
  br label %return

if.end.30:                                        ; preds = %if.end
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %13, i8 zeroext 0, i8 zeroext 2)
  br label %return

if.end.31:                                        ; preds = %entry
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call32 = call i32 @mpd_iszero(%struct.mpd_t* %14)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %if.end.31
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call35 = call zeroext i8 @mpd_sign(%struct.mpd_t* %16)
  %17 = load i64, i64* %ideal_exp, align 8
  call void @_settriple(%struct.mpd_t* %15, i8 zeroext %call35, i64 0, i64 %17)
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %20 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %18, %struct.mpd_context_t* %19, i32* %20)
  br label %return

if.end.36:                                        ; preds = %if.end.31
  %21 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call37 = call i32 @mpd_isnegative(%struct.mpd_t* %21)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.36
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %23 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %22, i32 256, i32* %23)
  br label %return

if.end.40:                                        ; preds = %if.end.36
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %24 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec41 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %24, i32 0, i32 0
  %25 = load i64, i64* %prec41, align 8
  %add = add i64 %25, 1
  store i64 %add, i64* %prec, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  %call42 = call i32 @mpd_qcopy(%struct.mpd_t* %c, %struct.mpd_t* %26, i32* %27)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %if.end.40
  br label %malloc_error

if.end.45:                                        ; preds = %if.end.40
  %exp46 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %c, i32 0, i32 1
  store i64 0, i64* %exp46, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp47 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 1
  %29 = load i64, i64* %exp47, align 8
  %and48 = and i64 %29, 1
  %tobool49 = icmp ne i64 %and48, 0
  br i1 %tobool49, label %if.then.50, label %if.else

if.then.50:                                       ; preds = %if.end.45
  %30 = load i32*, i32** %status.addr, align 8
  %call51 = call i32 @mpd_qshiftl(%struct.mpd_t* %c, %struct.mpd_t* %c, i64 1, i32* %30)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.end.54, label %if.then.53

if.then.53:                                       ; preds = %if.then.50
  br label %malloc_error

if.end.54:                                        ; preds = %if.then.50
  %31 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits55 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 2
  %32 = load i64, i64* %digits55, align 8
  %shr = ashr i64 %32, 1
  %add56 = add i64 %shr, 1
  store i64 %add56, i64* %l, align 8
  br label %if.end.60

if.else:                                          ; preds = %if.end.45
  %33 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits57 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %33, i32 0, i32 2
  %34 = load i64, i64* %digits57, align 8
  %add58 = add i64 %34, 1
  %shr59 = ashr i64 %add58, 1
  store i64 %shr59, i64* %l, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.else, %if.end.54
  %35 = load i64, i64* %prec, align 8
  %36 = load i64, i64* %l, align 8
  %sub61 = sub i64 %35, %36
  store i64 %sub61, i64* %shift, align 8
  %37 = load i64, i64* %shift, align 8
  %cmp = icmp sge i64 %37, 0
  br i1 %cmp, label %if.then.62, label %if.else.67

if.then.62:                                       ; preds = %if.end.60
  %38 = load i64, i64* %shift, align 8
  %mul = mul i64 2, %38
  %39 = load i32*, i32** %status.addr, align 8
  %call63 = call i32 @mpd_qshiftl(%struct.mpd_t* %c, %struct.mpd_t* %c, i64 %mul, i32* %39)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %if.then.62
  br label %malloc_error

if.end.66:                                        ; preds = %if.then.62
  store i32 1, i32* %exact, align 4
  br label %if.end.71

if.else.67:                                       ; preds = %if.end.60
  %40 = load i64, i64* %shift, align 8
  %mul68 = mul i64 -2, %40
  %call69 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %c, i64 %mul68)
  %tobool70 = icmp ne i64 %call69, 0
  %lnot = xor i1 %tobool70, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %exact, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.67, %if.end.66
  %41 = load i64, i64* %shift, align 8
  %42 = load i64, i64* %ideal_exp, align 8
  %sub72 = sub i64 %42, %41
  store i64 %sub72, i64* %ideal_exp, align 8
  %43 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %44 = load i64, i64* %prec, align 8
  %45 = load i32*, i32** %status.addr, align 8
  %call73 = call i32 @mpd_qshiftl(%struct.mpd_t* %43, %struct.mpd_t* @one, i64 %44, i32* %45)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %if.end.71
  br label %malloc_error

if.end.76:                                        ; preds = %if.end.71
  br label %while.body

while.body:                                       ; preds = %if.end.76, %if.end.96
  %46 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status77 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @_mpd_qdivmod(%struct.mpd_t* %q, %struct.mpd_t* %r, %struct.mpd_t* %c, %struct.mpd_t* %46, %struct.mpd_context_t* %maxcontext, i32* %status77)
  %47 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call78 = call i32 @mpd_isspecial(%struct.mpd_t* %47)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.82, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %call80 = call i32 @mpd_isspecial(%struct.mpd_t* %q)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.then.82, label %if.end.85

if.then.82:                                       ; preds = %lor.lhs.false, %while.body
  %48 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status83 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %49 = load i32, i32* %status83, align 4
  %and84 = and i32 %49, 958
  %50 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %48, i32 %and84, i32* %50)
  br label %out

if.end.85:                                        ; preds = %lor.lhs.false
  %51 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call86 = call i32 @_mpd_cmp(%struct.mpd_t* %51, %struct.mpd_t* %q)
  %cmp87 = icmp sle i32 %call86, 0
  br i1 %cmp87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.85
  br label %while.end

if.end.89:                                        ; preds = %if.end.85
  %52 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status90 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @_mpd_qadd_exact(%struct.mpd_t* %52, %struct.mpd_t* %53, %struct.mpd_t* %q, %struct.mpd_context_t* %maxcontext, i32* %status90)
  %54 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call91 = call i32 @mpd_isspecial(%struct.mpd_t* %54)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.96

if.then.93:                                       ; preds = %if.end.89
  %55 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status94 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %56 = load i32, i32* %status94, align 4
  %and95 = and i32 %56, 958
  %57 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %55, i32 %and95, i32* %57)
  br label %out

if.end.96:                                        ; preds = %if.end.89
  %58 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %59 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status97 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @_mpd_qdivmod(%struct.mpd_t* %58, %struct.mpd_t* %r, %struct.mpd_t* %59, %struct.mpd_t* %two, %struct.mpd_context_t* %maxcontext, i32* %status97)
  br label %while.body

while.end:                                        ; preds = %if.then.88
  %60 = load i32, i32* %exact, align 4
  %tobool98 = icmp ne i32 %60, 0
  br i1 %tobool98, label %if.then.99, label %if.end.109

if.then.99:                                       ; preds = %while.end
  %61 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %62 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status100 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  call void @_mpd_qmul_exact(%struct.mpd_t* %r, %struct.mpd_t* %61, %struct.mpd_t* %62, %struct.mpd_context_t* %maxcontext, i32* %status100)
  %call101 = call i32 @mpd_isspecial(%struct.mpd_t* %r)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.then.103, label %if.end.106

if.then.103:                                      ; preds = %if.then.99
  %63 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %status104 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 4
  %64 = load i32, i32* %status104, align 4
  %and105 = and i32 %64, 958
  %65 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %63, i32 %and105, i32* %65)
  br label %out

if.end.106:                                       ; preds = %if.then.99
  %call107 = call i32 @_mpd_cmp(%struct.mpd_t* %r, %struct.mpd_t* %c)
  %cmp108 = icmp eq i32 %call107, 0
  %conv = zext i1 %cmp108 to i32
  store i32 %conv, i32* %exact, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.106, %while.end
  %66 = load i32, i32* %exact, align 4
  %tobool110 = icmp ne i32 %66, 0
  br i1 %tobool110, label %if.then.111, label %if.else.124

if.then.111:                                      ; preds = %if.end.109
  %67 = load i64, i64* %shift, align 8
  %cmp112 = icmp sge i64 %67, 0
  br i1 %cmp112, label %if.then.114, label %if.else.116

if.then.114:                                      ; preds = %if.then.111
  %68 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %69 = load i64, i64* %shift, align 8
  %call115 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %68, i64 %69)
  br label %if.end.122

if.else.116:                                      ; preds = %if.then.111
  %70 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %71 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %72 = load i64, i64* %shift, align 8
  %sub117 = sub i64 0, %72
  %73 = load i32*, i32** %status.addr, align 8
  %call118 = call i32 @mpd_qshiftl(%struct.mpd_t* %70, %struct.mpd_t* %71, i64 %sub117, i32* %73)
  %tobool119 = icmp ne i32 %call118, 0
  br i1 %tobool119, label %if.end.121, label %if.then.120

if.then.120:                                      ; preds = %if.else.116
  br label %malloc_error

if.end.121:                                       ; preds = %if.else.116
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.then.114
  %74 = load i64, i64* %shift, align 8
  %75 = load i64, i64* %ideal_exp, align 8
  %add123 = add i64 %75, %74
  store i64 %add123, i64* %ideal_exp, align 8
  br label %if.end.138

if.else.124:                                      ; preds = %if.end.109
  %76 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data125 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %76, i32 0, i32 5
  %77 = load i64*, i64** %data125, align 8
  %arrayidx = getelementptr i64, i64* %77, i64 0
  %78 = load i64, i64* %arrayidx, align 8
  %call126 = call i64 @mpd_lsd(i64 %78)
  %conv127 = trunc i64 %call126 to i32
  store i32 %conv127, i32* %lsd, align 4
  %79 = load i32, i32* %lsd, align 4
  %cmp128 = icmp eq i32 %79, 0
  br i1 %cmp128, label %if.then.133, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %if.else.124
  %80 = load i32, i32* %lsd, align 4
  %cmp131 = icmp eq i32 %80, 5
  br i1 %cmp131, label %if.then.133, label %if.end.137

if.then.133:                                      ; preds = %lor.lhs.false.130, %if.else.124
  %81 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data134 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %81, i32 0, i32 5
  %82 = load i64*, i64** %data134, align 8
  %arrayidx135 = getelementptr i64, i64* %82, i64 0
  %83 = load i64, i64* %arrayidx135, align 8
  %add136 = add i64 %83, 1
  store i64 %add136, i64* %arrayidx135, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.133, %lor.lhs.false.130
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.end.122
  %84 = load i64, i64* %ideal_exp, align 8
  %85 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp139 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %85, i32 0, i32 1
  store i64 %84, i64* %exp139, align 8
  br label %out

out:                                              ; preds = %malloc_error, %if.end.138, %if.then.103, %if.then.93, %if.then.82
  call void @mpd_del(%struct.mpd_t* %c)
  call void @mpd_del(%struct.mpd_t* %q)
  call void @mpd_del(%struct.mpd_t* %r)
  %86 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %87 = bitcast %struct.mpd_context_t* %maxcontext to i8*
  %88 = bitcast %struct.mpd_context_t* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %87, i8* %88, i64 48, i32 8, i1 false)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 6
  store i32 6, i32* %round, align 4
  %89 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %90 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %89, %struct.mpd_context_t* %maxcontext, i32* %90)
  br label %return

malloc_error:                                     ; preds = %if.then.120, %if.then.75, %if.then.65, %if.then.53, %if.then.44
  %91 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %92 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %91, i32 512, i32* %92)
  br label %out

return:                                           ; preds = %out, %if.then.39, %if.then.34, %if.end.30, %if.then.29, %if.then.26
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qadd_exact(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qadd(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %workstatus)
  %4 = load i32, i32* %workstatus, align 4
  %5 = load i32*, i32** %status.addr, align 8
  %6 = load i32, i32* %5, align 4
  %or = or i32 %6, %4
  store i32 %or, i32* %5, align 4
  %7 = load i32, i32* %workstatus, align 4
  %and = and i32 %7, 4161
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_sizeinbase(%struct.mpd_t* %a, i32 %base) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca i32, align 4
  %x = alloca double, align 8
  %digits = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_iszero(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 2
  %2 = load i64, i64* %digits1, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp, align 8
  %add = add i64 %2, %4
  store i64 %add, i64* %digits, align 8
  %5 = load i64, i64* %digits, align 8
  %cmp = icmp ugt i64 %5, 2711437152599294
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i64 -1, i64* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %6 = load i64, i64* %digits, align 8
  %conv = uitofp i64 %6 to double
  %7 = load i32, i32* %base.addr, align 4
  %conv4 = uitofp i32 %7 to double
  %call5 = call double @log10(double %conv4) #4
  %div = fdiv double %conv, %call5
  store double %div, double* %x, align 8
  %8 = load double, double* %x, align 8
  %cmp6 = fcmp ogt double %8, 0x43F0000000000000
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.3
  br label %cond.end

cond.false:                                       ; preds = %if.end.3
  %9 = load double, double* %x, align 8
  %conv8 = fptoui double %9 to i64
  %add9 = add i64 %conv8, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %add9, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.2, %if.then
  %10 = load i64, i64* %retval
  ret i64 %10
}

; Function Attrs: nounwind
declare double @log10(double) #6

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qexport_u16(i16** %rdata, i64 %rlen, i32 %rbase, %struct.mpd_t* %src, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %rdata.addr = alloca i16**, align 8
  %rlen.addr = alloca i64, align 8
  %rbase.addr = alloca i32, align 4
  %src.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %tsrc_data = alloca [64 x i64], align 16
  %tsrc = alloca %struct.mpd_t, align 8
  %alloc1 = alloca i32, align 4
  %n = alloca i64, align 8
  store i16** %rdata, i16*** %rdata.addr, align 8
  store i64 %rlen, i64* %rlen.addr, align 8
  store i32 %rbase, i32* %rbase.addr, align 4
  store %struct.mpd_t* %src, %struct.mpd_t** %src.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tsrc_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  store i32 0, i32* %alloc1, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call2 = call i32 @_mpd_isint(%struct.mpd_t* %1)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %or = or i32 %3, 256
  store i32 %or, i32* %2, align 4
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i16**, i16*** %rdata.addr, align 8
  %5 = load i16*, i16** %4, align 8
  %cmp = icmp eq i16* %5, null
  br i1 %cmp, label %if.then.4, label %if.end.14

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %7 = load i32, i32* %rbase.addr, align 4
  %call5 = call i64 @mpd_sizeinbase(%struct.mpd_t* %6, i32 %7)
  store i64 %call5, i64* %rlen.addr, align 8
  %8 = load i64, i64* %rlen.addr, align 8
  %cmp6 = icmp eq i64 %8, -1
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.then.4
  %9 = load i32*, i32** %status.addr, align 8
  %10 = load i32, i32* %9, align 4
  %or8 = or i32 %10, 256
  store i32 %or8, i32* %9, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.4
  %11 = load i64, i64* %rlen.addr, align 8
  %call10 = call i8* @mpd_alloc(i64 %11, i64 2)
  %12 = bitcast i8* %call10 to i16*
  %13 = load i16**, i16*** %rdata.addr, align 8
  store i16* %12, i16** %13, align 8
  %14 = load i16**, i16*** %rdata.addr, align 8
  %15 = load i16*, i16** %14, align 8
  %cmp11 = icmp eq i16* %15, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %malloc_error

if.end.13:                                        ; preds = %if.end.9
  store i32 1, i32* %alloc1, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call15 = call i32 @mpd_iszero(%struct.mpd_t* %16)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.14
  %17 = load i16**, i16*** %rdata.addr, align 8
  %18 = load i16*, i16** %17, align 8
  store i16 0, i16* %18, align 2
  store i64 1, i64* %retval
  br label %return

if.end.18:                                        ; preds = %if.end.14
  %19 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 1
  %20 = load i64, i64* %exp19, align 8
  %cmp20 = icmp sge i64 %20, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.18
  %21 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  %23 = load i64, i64* %exp22, align 8
  %24 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qshiftl(%struct.mpd_t* %tsrc, %struct.mpd_t* %21, i64 %23, i32* %24)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.then.21
  br label %malloc_error

if.end.26:                                        ; preds = %if.then.21
  br label %if.end.32

if.else:                                          ; preds = %if.end.18
  %25 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp27, align 8
  %sub = sub i64 0, %27
  %28 = load i32*, i32** %status.addr, align 8
  %call28 = call i64 @mpd_qshiftr(%struct.mpd_t* %tsrc, %struct.mpd_t* %25, i64 %sub, i32* %28)
  %cmp29 = icmp eq i64 %call28, -1
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.else
  br label %malloc_error

if.end.31:                                        ; preds = %if.else
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end.26
  %29 = load i16**, i16*** %rdata.addr, align 8
  %30 = load i64, i64* %rlen.addr, align 8
  %31 = load i32, i32* %rbase.addr, align 4
  %conv = zext i32 %31 to i64
  %data33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 5
  %32 = load i64*, i64** %data33, align 8
  %len34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 3
  %33 = load i64, i64* %len34, align 8
  %call35 = call i64 @_baseconv_to_u16(i16** %29, i64 %30, i64 %conv, i64* %32, i64 %33)
  store i64 %call35, i64* %n, align 8
  %34 = load i64, i64* %n, align 8
  %cmp36 = icmp eq i64 %34, -1
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.32
  br label %malloc_error

if.end.39:                                        ; preds = %if.end.32
  br label %out

out:                                              ; preds = %if.end.42, %if.end.39
  call void @mpd_del(%struct.mpd_t* %tsrc)
  %35 = load i64, i64* %n, align 8
  store i64 %35, i64* %retval
  br label %return

malloc_error:                                     ; preds = %if.then.38, %if.then.30, %if.then.25, %if.then.12
  %36 = load i32, i32* %alloc1, align 4
  %tobool40 = icmp ne i32 %36, 0
  br i1 %tobool40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %malloc_error
  %37 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %38 = load i16**, i16*** %rdata.addr, align 8
  %39 = load i16*, i16** %38, align 8
  %40 = bitcast i16* %39 to i8*
  call void %37(i8* %40)
  %41 = load i16**, i16*** %rdata.addr, align 8
  store i16* null, i16** %41, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %malloc_error
  store i64 -1, i64* %n, align 8
  %42 = load i32*, i32** %status.addr, align 8
  %43 = load i32, i32* %42, align 4
  %or43 = or i32 %43, 512
  store i32 %or43, i32* %42, align 4
  br label %out

return:                                           ; preds = %out, %if.then.17, %if.then.7, %if.then
  %44 = load i64, i64* %retval
  ret i64 %44
}

declare hidden i8* @mpd_alloc(i64, i64) #3

; Function Attrs: nounwind uwtable
define internal i64 @_baseconv_to_u16(i16** %w, i64 %wlen, i64 %wbase, i64* %u, i64 %ulen) #0 {
entry:
  %retval = alloca i64, align 8
  %w.addr = alloca i16**, align 8
  %wlen.addr = alloca i64, align 8
  %wbase.addr = alloca i64, align 8
  %u.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store i16** %w, i16*** %w.addr, align 8
  store i64 %wlen, i64* %wlen.addr, align 8
  store i64 %wbase, i64* %wbase.addr, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 0, i64* %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %n, align 8
  %1 = load i64, i64* %wlen.addr, align 8
  %cmp = icmp uge i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %do.body
  %2 = load i16**, i16*** %w.addr, align 8
  %3 = load i64, i64* %n, align 8
  %add = add i64 %3, 1
  %call = call zeroext i8 @mpd_resize_u16(i16** %2, i64 %add)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.end, label %if.then.1

if.then.1:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i64, i64* %n, align 8
  %add2 = add i64 %4, 1
  store i64 %add2, i64* %wlen.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %do.body
  %5 = load i64*, i64** %u.addr, align 8
  %6 = load i64*, i64** %u.addr, align 8
  %7 = load i64, i64* %ulen.addr, align 8
  %8 = load i64, i64* %wbase.addr, align 8
  %call4 = call i64 @_mpd_shortdiv(i64* %5, i64* %6, i64 %7, i64 %8)
  %conv = trunc i64 %call4 to i16
  %9 = load i64, i64* %n, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %n, align 8
  %10 = load i16**, i16*** %w.addr, align 8
  %11 = load i16*, i16** %10, align 8
  %arrayidx = getelementptr i16, i16* %11, i64 %9
  store i16 %conv, i16* %arrayidx, align 2
  %12 = load i64*, i64** %u.addr, align 8
  %13 = load i64, i64* %ulen.addr, align 8
  %call5 = call i64 @_mpd_real_size(i64* %12, i64 %13)
  store i64 %call5, i64* %ulen.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.3
  %14 = load i64, i64* %ulen.addr, align 8
  %sub = sub i64 %14, 1
  %15 = load i64*, i64** %u.addr, align 8
  %arrayidx6 = getelementptr i64, i64* %15, i64 %sub
  %16 = load i64, i64* %arrayidx6, align 8
  %cmp7 = icmp ne i64 %16, 0
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64, i64* %n, align 8
  store i64 %17, i64* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.1
  %18 = load i64, i64* %retval
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define hidden i64 @mpd_qexport_u32(i32** %rdata, i64 %rlen, i32 %rbase, %struct.mpd_t* %src, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %rdata.addr = alloca i32**, align 8
  %rlen.addr = alloca i64, align 8
  %rbase.addr = alloca i32, align 4
  %src.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %tsrc_data = alloca [64 x i64], align 16
  %tsrc = alloca %struct.mpd_t, align 8
  %alloc1 = alloca i32, align 4
  %n = alloca i64, align 8
  store i32** %rdata, i32*** %rdata.addr, align 8
  store i64 %rlen, i64* %rlen.addr, align 8
  store i32 %rbase, i32* %rbase.addr, align 4
  store %struct.mpd_t* %src, %struct.mpd_t** %src.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %tsrc_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  store i32 0, i32* %alloc1, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call2 = call i32 @_mpd_isint(%struct.mpd_t* %1)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32*, i32** %status.addr, align 8
  %3 = load i32, i32* %2, align 4
  %or = or i32 %3, 256
  store i32 %or, i32* %2, align 4
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32**, i32*** %rdata.addr, align 8
  %5 = load i32*, i32** %4, align 8
  %cmp = icmp eq i32* %5, null
  br i1 %cmp, label %if.then.4, label %if.end.14

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %7 = load i32, i32* %rbase.addr, align 4
  %call5 = call i64 @mpd_sizeinbase(%struct.mpd_t* %6, i32 %7)
  store i64 %call5, i64* %rlen.addr, align 8
  %8 = load i64, i64* %rlen.addr, align 8
  %cmp6 = icmp eq i64 %8, -1
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.then.4
  %9 = load i32*, i32** %status.addr, align 8
  %10 = load i32, i32* %9, align 4
  %or8 = or i32 %10, 256
  store i32 %or8, i32* %9, align 4
  store i64 -1, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.4
  %11 = load i64, i64* %rlen.addr, align 8
  %call10 = call i8* @mpd_alloc(i64 %11, i64 4)
  %12 = bitcast i8* %call10 to i32*
  %13 = load i32**, i32*** %rdata.addr, align 8
  store i32* %12, i32** %13, align 8
  %14 = load i32**, i32*** %rdata.addr, align 8
  %15 = load i32*, i32** %14, align 8
  %cmp11 = icmp eq i32* %15, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %malloc_error

if.end.13:                                        ; preds = %if.end.9
  store i32 1, i32* %alloc1, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %16 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %call15 = call i32 @mpd_iszero(%struct.mpd_t* %16)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.14
  %17 = load i32**, i32*** %rdata.addr, align 8
  %18 = load i32*, i32** %17, align 8
  store i32 0, i32* %18, align 4
  store i64 1, i64* %retval
  br label %return

if.end.18:                                        ; preds = %if.end.14
  %19 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 1
  %20 = load i64, i64* %exp19, align 8
  %cmp20 = icmp sge i64 %20, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.18
  %21 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  %23 = load i64, i64* %exp22, align 8
  %24 = load i32*, i32** %status.addr, align 8
  %call23 = call i32 @mpd_qshiftl(%struct.mpd_t* %tsrc, %struct.mpd_t* %21, i64 %23, i32* %24)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.then.21
  br label %malloc_error

if.end.26:                                        ; preds = %if.then.21
  br label %if.end.32

if.else:                                          ; preds = %if.end.18
  %25 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %src.addr, align 8
  %exp27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %26, i32 0, i32 1
  %27 = load i64, i64* %exp27, align 8
  %sub = sub i64 0, %27
  %28 = load i32*, i32** %status.addr, align 8
  %call28 = call i64 @mpd_qshiftr(%struct.mpd_t* %tsrc, %struct.mpd_t* %25, i64 %sub, i32* %28)
  %cmp29 = icmp eq i64 %call28, -1
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.else
  br label %malloc_error

if.end.31:                                        ; preds = %if.else
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end.26
  %29 = load i32**, i32*** %rdata.addr, align 8
  %30 = load i64, i64* %rlen.addr, align 8
  %31 = load i32, i32* %rbase.addr, align 4
  %data33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 5
  %32 = load i64*, i64** %data33, align 8
  %len34 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %tsrc, i32 0, i32 3
  %33 = load i64, i64* %len34, align 8
  %call35 = call i64 @_baseconv_to_smaller(i32** %29, i64 %30, i32 %31, i64* %32, i64 %33, i64 -8446744073709551616)
  store i64 %call35, i64* %n, align 8
  %34 = load i64, i64* %n, align 8
  %cmp36 = icmp eq i64 %34, -1
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.32
  br label %malloc_error

if.end.38:                                        ; preds = %if.end.32
  br label %out

out:                                              ; preds = %if.end.41, %if.end.38
  call void @mpd_del(%struct.mpd_t* %tsrc)
  %35 = load i64, i64* %n, align 8
  store i64 %35, i64* %retval
  br label %return

malloc_error:                                     ; preds = %if.then.37, %if.then.30, %if.then.25, %if.then.12
  %36 = load i32, i32* %alloc1, align 4
  %tobool39 = icmp ne i32 %36, 0
  br i1 %tobool39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %malloc_error
  %37 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %38 = load i32**, i32*** %rdata.addr, align 8
  %39 = load i32*, i32** %38, align 8
  %40 = bitcast i32* %39 to i8*
  call void %37(i8* %40)
  %41 = load i32**, i32*** %rdata.addr, align 8
  store i32* null, i32** %41, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.40, %malloc_error
  store i64 -1, i64* %n, align 8
  %42 = load i32*, i32** %status.addr, align 8
  %43 = load i32, i32* %42, align 4
  %or42 = or i32 %43, 512
  store i32 %or42, i32* %42, align 4
  br label %out

return:                                           ; preds = %out, %if.then.17, %if.then.7, %if.then
  %44 = load i64, i64* %retval
  ret i64 %44
}

; Function Attrs: nounwind uwtable
define internal i64 @_baseconv_to_smaller(i32** %w, i64 %wlen, i32 %wbase, i64* %u, i64 %ulen, i64 %ubase) #0 {
entry:
  %retval = alloca i64, align 8
  %w.addr = alloca i32**, align 8
  %wlen.addr = alloca i64, align 8
  %wbase.addr = alloca i32, align 4
  %u.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %ubase.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store i32** %w, i32*** %w.addr, align 8
  store i64 %wlen, i64* %wlen.addr, align 8
  store i32 %wbase, i32* %wbase.addr, align 4
  store i64* %u, i64** %u.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 %ubase, i64* %ubase.addr, align 8
  store i64 0, i64* %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %n, align 8
  %1 = load i64, i64* %wlen.addr, align 8
  %cmp = icmp uge i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %do.body
  %2 = load i32**, i32*** %w.addr, align 8
  %3 = load i64, i64* %n, align 8
  %add = add i64 %3, 1
  %call = call zeroext i8 @mpd_resize_u32(i32** %2, i64 %add)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.end, label %if.then.1

if.then.1:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i64, i64* %n, align 8
  %add2 = add i64 %4, 1
  store i64 %add2, i64* %wlen.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %do.body
  %5 = load i64*, i64** %u.addr, align 8
  %6 = load i64*, i64** %u.addr, align 8
  %7 = load i64, i64* %ulen.addr, align 8
  %8 = load i32, i32* %wbase.addr, align 4
  %conv = zext i32 %8 to i64
  %9 = load i64, i64* %ubase.addr, align 8
  %call4 = call i64 @_mpd_shortdiv_b(i64* %5, i64* %6, i64 %7, i64 %conv, i64 %9)
  %conv5 = trunc i64 %call4 to i32
  %10 = load i64, i64* %n, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %n, align 8
  %11 = load i32**, i32*** %w.addr, align 8
  %12 = load i32*, i32** %11, align 8
  %arrayidx = getelementptr i32, i32* %12, i64 %10
  store i32 %conv5, i32* %arrayidx, align 4
  %13 = load i64*, i64** %u.addr, align 8
  %14 = load i64, i64* %ulen.addr, align 8
  %call6 = call i64 @_mpd_real_size(i64* %13, i64 %14)
  store i64 %call6, i64* %ulen.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.3
  %15 = load i64, i64* %ulen.addr, align 8
  %sub = sub i64 %15, 1
  %16 = load i64*, i64** %u.addr, align 8
  %arrayidx7 = getelementptr i64, i64* %16, i64 %sub
  %17 = load i64, i64* %arrayidx7, align 8
  %cmp8 = icmp ne i64 %17, 0
  br i1 %cmp8, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %18 = load i64, i64* %n, align 8
  store i64 %18, i64* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.1
  %19 = load i64, i64* %retval
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qimport_u16(%struct.mpd_t* %result, i16* %srcdata, i64 %srclen, i8 zeroext %srcsign, i32 %srcbase, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %srcdata.addr = alloca i16*, align 8
  %srclen.addr = alloca i64, align 8
  %srcsign.addr = alloca i8, align 1
  %srcbase.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %usrc = alloca i64*, align 8
  %rlen = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i16* %srcdata, i16** %srcdata.addr, align 8
  store i64 %srclen, i64* %srclen.addr, align 8
  store i8 %srcsign, i8* %srcsign.addr, align 1
  store i32 %srcbase, i32* %srcbase.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %srclen.addr, align 8
  %1 = load i32, i32* %srcbase.addr, align 4
  %call = call i64 @_mpd_importsize(i64 %0, i32 %1)
  store i64 %call, i64* %rlen, align 8
  %2 = load i64, i64* %rlen, align 8
  %cmp = icmp eq i64 %2, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %3, i32 256, i32* %4)
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %srclen.addr, align 8
  %call1 = call i8* @mpd_alloc(i64 %5, i64 8)
  %6 = bitcast i8* %call1 to i64*
  store i64* %6, i64** %usrc, align 8
  %7 = load i64*, i64** %usrc, align 8
  %cmp2 = icmp eq i64* %7, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 512, i32* %9)
  br label %return

if.end.4:                                         ; preds = %if.end
  store i64 0, i64* %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %10 = load i64, i64* %n, align 8
  %11 = load i64, i64* %srclen.addr, align 8
  %cmp5 = icmp ult i64 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %n, align 8
  %13 = load i16*, i16** %srcdata.addr, align 8
  %arrayidx = getelementptr i16, i16* %13, i64 %12
  %14 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %14 to i64
  %15 = load i64, i64* %n, align 8
  %16 = load i64*, i64** %usrc, align 8
  %arrayidx6 = getelementptr i64, i64* %16, i64 %15
  store i64 %conv, i64* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i64, i64* %n, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %n, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %19 = load i64, i64* %rlen, align 8
  %20 = load i32*, i32** %status.addr, align 8
  %call7 = call i32 @mpd_qresize(%struct.mpd_t* %18, i64 %19, i32* %20)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %for.end
  br label %finish

if.end.9:                                         ; preds = %for.end
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load i64, i64* %rlen, align 8
  %23 = load i64*, i64** %usrc, align 8
  %24 = load i64, i64* %srclen.addr, align 8
  %25 = load i32, i32* %srcbase.addr, align 4
  %26 = load i32*, i32** %status.addr, align 8
  %call10 = call i64 @_coeff_from_u16(%struct.mpd_t* %21, i64 %22, i64* %23, i64 %24, i32 %25, i32* %26)
  store i64 %call10, i64* %n, align 8
  %27 = load i64, i64* %n, align 8
  %cmp11 = icmp eq i64 %27, -1
  br i1 %cmp11, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.9
  br label %finish

if.end.14:                                        ; preds = %if.end.9
  %28 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %29 = load i8, i8* %srcsign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %28, i8 zeroext %29)
  %30 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %30, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %31 = load i64, i64* %n, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 3
  store i64 %31, i64* %len, align 8
  %33 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %33)
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 3
  %36 = load i64, i64* %len15, align 8
  %37 = load i32*, i32** %status.addr, align 8
  %call16 = call i32 @mpd_qresize(%struct.mpd_t* %34, i64 %36, i32* %37)
  %38 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %39 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %40 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %38, %struct.mpd_context_t* %39, i32* %40)
  br label %finish

finish:                                           ; preds = %if.end.14, %if.then.13, %if.then.8
  %41 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %42 = load i64*, i64** %usrc, align 8
  %43 = bitcast i64* %42 to i8*
  call void %41(i8* %43)
  br label %return

return:                                           ; preds = %finish, %if.then.3, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @_mpd_importsize(i64 %srclen, i32 %base) #0 {
entry:
  %retval = alloca i64, align 8
  %srclen.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %x = alloca double, align 8
  store i64 %srclen, i64* %srclen.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  %0 = load i64, i64* %srclen.addr, align 8
  %cmp = icmp ugt i64 %0, 9007199254740992
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %srclen.addr, align 8
  %conv = uitofp i64 %1 to double
  %2 = load i32, i32* %base.addr, align 4
  %conv1 = uitofp i32 %2 to double
  %call = call double @log10(double %conv1) #4
  %div = fdiv double %call, 1.900000e+01
  %mul = fmul double %conv, %div
  store double %mul, double* %x, align 8
  %3 = load double, double* %x, align 8
  %cmp2 = fcmp oge double %3, 0x43775F848CE406BD
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %4 = load double, double* %x, align 8
  %conv4 = fptosi double %4 to i64
  %add = add i64 %conv4, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 9223372036854775807, %cond.true ], [ %add, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define internal i64 @_coeff_from_u16(%struct.mpd_t* %w, i64 %wlen, i64* %u, i64 %ulen, i32 %ubase, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %w.addr = alloca %struct.mpd_t*, align 8
  %wlen.addr = alloca i64, align 8
  %u.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %ubase.addr = alloca i32, align 4
  %status.addr = alloca i32*, align 8
  %n = alloca i64, align 8
  %carry = alloca i64, align 8
  store %struct.mpd_t* %w, %struct.mpd_t** %w.addr, align 8
  store i64 %wlen, i64* %wlen.addr, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i32 %ubase, i32* %ubase.addr, align 4
  store i32* %status, i32** %status.addr, align 8
  store i64 0, i64* %n, align 8
  %0 = load i64, i64* %ulen.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %ulen.addr, align 8
  %1 = load i64*, i64** %u.addr, align 8
  %arrayidx = getelementptr i64, i64* %1, i64 %dec
  %2 = load i64, i64* %arrayidx, align 8
  %3 = load i64, i64* %n, align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* %n, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 5
  %5 = load i64*, i64** %data, align 8
  %arrayidx1 = getelementptr i64, i64* %5, i64 %3
  store i64 %2, i64* %arrayidx1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.35, %entry
  %6 = load i64, i64* %ulen.addr, align 8
  %dec2 = add i64 %6, -1
  store i64 %dec2, i64* %ulen.addr, align 8
  %cmp = icmp ne i64 %dec2, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 5
  %8 = load i64*, i64** %data3, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 5
  %10 = load i64*, i64** %data4, align 8
  %11 = load i64, i64* %n, align 8
  %12 = load i32, i32* %ubase.addr, align 4
  %conv = zext i32 %12 to i64
  %call = call i64 @_mpd_shortmul_c(i64* %8, i64* %10, i64 %11, i64 %conv)
  store i64 %call, i64* %carry, align 8
  %13 = load i64, i64* %carry, align 8
  %tobool = icmp ne i64 %13, 0
  br i1 %tobool, label %if.then, label %if.end.16

if.then:                                          ; preds = %while.body
  %14 = load i64, i64* %n, align 8
  %15 = load i64, i64* %wlen.addr, align 8
  %cmp5 = icmp sge i64 %14, %15
  br i1 %cmp5, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.then
  %16 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %17 = load i64, i64* %n, align 8
  %add = add i64 %17, 1
  %18 = load i32*, i32** %status.addr, align 8
  %call8 = call i32 @mpd_qresize(%struct.mpd_t* %16, i64 %add, i32* %18)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end, label %if.then.10

if.then.10:                                       ; preds = %if.then.7
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.7
  %19 = load i64, i64* %n, align 8
  %add11 = add i64 %19, 1
  store i64 %add11, i64* %wlen.addr, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %20 = load i64, i64* %carry, align 8
  %21 = load i64, i64* %n, align 8
  %inc13 = add i64 %21, 1
  store i64 %inc13, i64* %n, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 5
  %23 = load i64*, i64** %data14, align 8
  %arrayidx15 = getelementptr i64, i64* %23, i64 %21
  store i64 %20, i64* %arrayidx15, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.12, %while.body
  %24 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 5
  %25 = load i64*, i64** %data17, align 8
  %26 = load i64, i64* %n, align 8
  %27 = load i64, i64* %ulen.addr, align 8
  %28 = load i64*, i64** %u.addr, align 8
  %arrayidx18 = getelementptr i64, i64* %28, i64 %27
  %29 = load i64, i64* %arrayidx18, align 8
  %call19 = call i64 @_mpd_shortadd(i64* %25, i64 %26, i64 %29)
  store i64 %call19, i64* %carry, align 8
  %30 = load i64, i64* %carry, align 8
  %tobool20 = icmp ne i64 %30, 0
  br i1 %tobool20, label %if.then.21, label %if.end.35

if.then.21:                                       ; preds = %if.end.16
  %31 = load i64, i64* %n, align 8
  %32 = load i64, i64* %wlen.addr, align 8
  %cmp22 = icmp sge i64 %31, %32
  br i1 %cmp22, label %if.then.24, label %if.end.31

if.then.24:                                       ; preds = %if.then.21
  %33 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %34 = load i64, i64* %n, align 8
  %add25 = add i64 %34, 1
  %35 = load i32*, i32** %status.addr, align 8
  %call26 = call i32 @mpd_qresize(%struct.mpd_t* %33, i64 %add25, i32* %35)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %if.then.24
  store i64 -1, i64* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.24
  %36 = load i64, i64* %n, align 8
  %add30 = add i64 %36, 1
  store i64 %add30, i64* %wlen.addr, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.29, %if.then.21
  %37 = load i64, i64* %carry, align 8
  %38 = load i64, i64* %n, align 8
  %inc32 = add i64 %38, 1
  store i64 %inc32, i64* %n, align 8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data33 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %39, i32 0, i32 5
  %40 = load i64*, i64** %data33, align 8
  %arrayidx34 = getelementptr i64, i64* %40, i64 %38
  store i64 %37, i64* %arrayidx34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.31, %if.end.16
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %41 = load i64, i64* %n, align 8
  store i64 %41, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.28, %if.then.10
  %42 = load i64, i64* %retval
  ret i64 %42
}

; Function Attrs: nounwind uwtable
define hidden void @mpd_qimport_u32(%struct.mpd_t* %result, i32* %srcdata, i64 %srclen, i8 zeroext %srcsign, i32 %srcbase, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %srcdata.addr = alloca i32*, align 8
  %srclen.addr = alloca i64, align 8
  %srcsign.addr = alloca i8, align 1
  %srcbase.addr = alloca i32, align 4
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %rlen = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store i32* %srcdata, i32** %srcdata.addr, align 8
  store i64 %srclen, i64* %srclen.addr, align 8
  store i8 %srcsign, i8* %srcsign.addr, align 1
  store i32 %srcbase, i32* %srcbase.addr, align 4
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load i64, i64* %srclen.addr, align 8
  %1 = load i32, i32* %srcbase.addr, align 4
  %call = call i64 @_mpd_importsize(i64 %0, i32 %1)
  store i64 %call, i64* %rlen, align 8
  %2 = load i64, i64* %rlen, align 8
  %cmp = icmp eq i64 %2, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %3, i32 256, i32* %4)
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load i64, i64* %rlen, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qresize(%struct.mpd_t* %5, i64 %6, i32* %7)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  br label %return

if.end.3:                                         ; preds = %if.end
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i64, i64* %rlen, align 8
  %10 = load i32*, i32** %srcdata.addr, align 8
  %11 = load i64, i64* %srclen.addr, align 8
  %12 = load i32, i32* %srcbase.addr, align 4
  %conv = zext i32 %12 to i64
  %13 = load i32*, i32** %status.addr, align 8
  %call4 = call i64 @_coeff_from_smaller_base(%struct.mpd_t* %8, i64 %9, i64 -8446744073709551616, i32* %10, i64 %11, i64 %conv, i32* %13)
  store i64 %call4, i64* %n, align 8
  %14 = load i64, i64* %n, align 8
  %cmp5 = icmp eq i64 %14, -1
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  br label %return

if.end.8:                                         ; preds = %if.end.3
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load i8, i8* %srcsign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %15, i8 zeroext %16)
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %18 = load i64, i64* %n, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 3
  store i64 %18, i64* %len, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %20)
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 3
  %23 = load i64, i64* %len9, align 8
  %24 = load i32*, i32** %status.addr, align 8
  %call10 = call i32 @mpd_qresize(%struct.mpd_t* %21, i64 %23, i32* %24)
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %27 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %25, %struct.mpd_context_t* %26, i32* %27)
  br label %return

return:                                           ; preds = %if.end.8, %if.then.7, %if.then.2, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @_coeff_from_smaller_base(%struct.mpd_t* %w, i64 %wlen, i64 %wbase, i32* %u, i64 %ulen, i64 %ubase, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %w.addr = alloca %struct.mpd_t*, align 8
  %wlen.addr = alloca i64, align 8
  %wbase.addr = alloca i64, align 8
  %u.addr = alloca i32*, align 8
  %ulen.addr = alloca i64, align 8
  %ubase.addr = alloca i64, align 8
  %status.addr = alloca i32*, align 8
  %n = alloca i64, align 8
  %carry = alloca i64, align 8
  store %struct.mpd_t* %w, %struct.mpd_t** %w.addr, align 8
  store i64 %wlen, i64* %wlen.addr, align 8
  store i64 %wbase, i64* %wbase.addr, align 8
  store i32* %u, i32** %u.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 %ubase, i64* %ubase.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i64 0, i64* %n, align 8
  %0 = load i64, i64* %ulen.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %ulen.addr, align 8
  %1 = load i32*, i32** %u.addr, align 8
  %arrayidx = getelementptr i32, i32* %1, i64 %dec
  %2 = load i32, i32* %arrayidx, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %n, align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* %n, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 5
  %5 = load i64*, i64** %data, align 8
  %arrayidx1 = getelementptr i64, i64* %5, i64 %3
  store i64 %conv, i64* %arrayidx1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.37, %entry
  %6 = load i64, i64* %ulen.addr, align 8
  %dec2 = add i64 %6, -1
  store i64 %dec2, i64* %ulen.addr, align 8
  %cmp = icmp ne i64 %dec2, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 5
  %8 = load i64*, i64** %data4, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 5
  %10 = load i64*, i64** %data5, align 8
  %11 = load i64, i64* %n, align 8
  %12 = load i64, i64* %ubase.addr, align 8
  %13 = load i64, i64* %wbase.addr, align 8
  %call = call i64 @_mpd_shortmul_b(i64* %8, i64* %10, i64 %11, i64 %12, i64 %13)
  store i64 %call, i64* %carry, align 8
  %14 = load i64, i64* %carry, align 8
  %tobool = icmp ne i64 %14, 0
  br i1 %tobool, label %if.then, label %if.end.17

if.then:                                          ; preds = %while.body
  %15 = load i64, i64* %n, align 8
  %16 = load i64, i64* %wlen.addr, align 8
  %cmp6 = icmp sge i64 %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.then
  %17 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %18 = load i64, i64* %n, align 8
  %add = add i64 %18, 1
  %19 = load i32*, i32** %status.addr, align 8
  %call9 = call i32 @mpd_qresize(%struct.mpd_t* %17, i64 %add, i32* %19)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then.11

if.then.11:                                       ; preds = %if.then.8
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.8
  %20 = load i64, i64* %n, align 8
  %add12 = add i64 %20, 1
  store i64 %add12, i64* %wlen.addr, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end, %if.then
  %21 = load i64, i64* %carry, align 8
  %22 = load i64, i64* %n, align 8
  %inc14 = add i64 %22, 1
  store i64 %inc14, i64* %n, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 5
  %24 = load i64*, i64** %data15, align 8
  %arrayidx16 = getelementptr i64, i64* %24, i64 %22
  store i64 %21, i64* %arrayidx16, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.13, %while.body
  %25 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %25, i32 0, i32 5
  %26 = load i64*, i64** %data18, align 8
  %27 = load i64, i64* %n, align 8
  %28 = load i64, i64* %ulen.addr, align 8
  %29 = load i32*, i32** %u.addr, align 8
  %arrayidx19 = getelementptr i32, i32* %29, i64 %28
  %30 = load i32, i32* %arrayidx19, align 4
  %conv20 = zext i32 %30 to i64
  %31 = load i64, i64* %wbase.addr, align 8
  %call21 = call i64 @_mpd_shortadd_b(i64* %26, i64 %27, i64 %conv20, i64 %31)
  store i64 %call21, i64* %carry, align 8
  %32 = load i64, i64* %carry, align 8
  %tobool22 = icmp ne i64 %32, 0
  br i1 %tobool22, label %if.then.23, label %if.end.37

if.then.23:                                       ; preds = %if.end.17
  %33 = load i64, i64* %n, align 8
  %34 = load i64, i64* %wlen.addr, align 8
  %cmp24 = icmp sge i64 %33, %34
  br i1 %cmp24, label %if.then.26, label %if.end.33

if.then.26:                                       ; preds = %if.then.23
  %35 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %36 = load i64, i64* %n, align 8
  %add27 = add i64 %36, 1
  %37 = load i32*, i32** %status.addr, align 8
  %call28 = call i32 @mpd_qresize(%struct.mpd_t* %35, i64 %add27, i32* %37)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.then.26
  store i64 -1, i64* %retval
  br label %return

if.end.31:                                        ; preds = %if.then.26
  %38 = load i64, i64* %n, align 8
  %add32 = add i64 %38, 1
  store i64 %add32, i64* %wlen.addr, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.31, %if.then.23
  %39 = load i64, i64* %carry, align 8
  %40 = load i64, i64* %n, align 8
  %inc34 = add i64 %40, 1
  store i64 %inc34, i64* %n, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %w.addr, align 8
  %data35 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 5
  %42 = load i64*, i64** %data35, align 8
  %arrayidx36 = getelementptr i64, i64* %42, i64 %40
  store i64 %39, i64* %arrayidx36, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.33, %if.end.17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %43 = load i64, i64* %n, align 8
  store i64 %43, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.30, %if.then.11
  %44 = load i64, i64* %retval
  ret i64 %44
}

; Function Attrs: nounwind uwtable
define internal i64 @mpd_qsshiftr(%struct.mpd_t* %result, %struct.mpd_t* %a, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i64, align 8
  %rnd = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_iszerocoeff(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_qcopy_static(%struct.mpd_t* %2, %struct.mpd_t* %3)
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i64, i64* %n.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 2
  %6 = load i64, i64* %digits, align 8
  %cmp1 = icmp sge i64 %4, %6
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 5
  %8 = load i64*, i64** %data, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len, align 8
  %11 = load i64, i64* %n.addr, align 8
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 2
  %13 = load i64, i64* %digits3, align 8
  %cmp4 = icmp eq i64 %11, %13
  %conv = zext i1 %cmp4 to i32
  %call5 = call i64 @_mpd_get_rnd(i64* %8, i64 %10, i32 %conv)
  store i64 %call5, i64* %rnd, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @mpd_zerocoeff(%struct.mpd_t* %14)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 2
  %16 = load i64, i64* %digits6, align 8
  %17 = load i64, i64* %n.addr, align 8
  %sub = sub i64 %16, %17
  %18 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 2
  store i64 %sub, i64* %digits7, align 8
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 2
  %20 = load i64, i64* %digits8, align 8
  %call9 = call i64 @mpd_digits_to_size(i64 %20)
  store i64 %call9, i64* %size, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %21, i32 0, i32 5
  %22 = load i64*, i64** %data10, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %23, i32 0, i32 5
  %24 = load i64*, i64** %data11, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %25, i32 0, i32 3
  %26 = load i64, i64* %len12, align 8
  %27 = load i64, i64* %n.addr, align 8
  %call13 = call i64 @_mpd_baseshiftr(i64* %22, i64* %24, i64 %26, i64 %27)
  store i64 %call13, i64* %rnd, align 8
  %28 = load i64, i64* %size, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 3
  store i64 %28, i64* %len14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.2
  %30 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %30, %struct.mpd_t* %31)
  %32 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %32, i32 0, i32 1
  %33 = load i64, i64* %exp, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %34, i32 0, i32 1
  store i64 %33, i64* %exp16, align 8
  %35 = load i64, i64* %rnd, align 8
  store i64 %35, i64* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then
  %36 = load i64, i64* %retval
  ret i64 %36
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_get_msdigits(i64* %hi, i64* %lo, %struct.mpd_t* %dec, i32 %n) #2 {
entry:
  %hi.addr = alloca i64*, align 8
  %lo.addr = alloca i64*, align 8
  %dec.addr = alloca %struct.mpd_t*, align 8
  %n.addr = alloca i32, align 4
  %r = alloca i64, align 8
  %tmp = alloca i64, align 8
  store i64* %hi, i64** %hi.addr, align 8
  store i64* %lo, i64** %lo.addr, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 2
  %1 = load i64, i64* %digits, align 8
  call void @_mpd_div_word(i64* %tmp, i64* %r, i64 %1, i64 19)
  %2 = load i64, i64* %r, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %r, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 19, %cond.true ], [ %3, %cond.false ]
  store i64 %cond, i64* %r, align 8
  %4 = load i64*, i64** %hi.addr, align 8
  store i64 0, i64* %4, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 3
  %6 = load i64, i64* %len, align 8
  %sub = sub i64 %6, 1
  %7 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 5
  %8 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %8, i64 %sub
  %9 = load i64, i64* %arrayidx, align 8
  %10 = load i64*, i64** %lo.addr, align 8
  store i64 %9, i64* %10, align 8
  %11 = load i32, i32* %n.addr, align 4
  %conv = zext i32 %11 to i64
  %12 = load i64, i64* %r, align 8
  %cmp1 = icmp ule i64 %conv, %12
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load i64, i64* %r, align 8
  %14 = load i32, i32* %n.addr, align 4
  %conv3 = zext i32 %14 to i64
  %sub4 = sub i64 %13, %conv3
  %arrayidx5 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %sub4
  %15 = load i64, i64* %arrayidx5, align 8
  %16 = load i64*, i64** %lo.addr, align 8
  %17 = load i64, i64* %16, align 8
  %div = udiv i64 %17, %15
  store i64 %div, i64* %16, align 8
  br label %if.end.26

if.else:                                          ; preds = %cond.end
  %18 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 3
  %19 = load i64, i64* %len6, align 8
  %cmp7 = icmp sgt i64 %19, 1
  br i1 %cmp7, label %if.then.9, label %if.end.25

if.then.9:                                        ; preds = %if.else
  %20 = load i64*, i64** %hi.addr, align 8
  %21 = load i64*, i64** %lo.addr, align 8
  %22 = load i64*, i64** %lo.addr, align 8
  %23 = load i64, i64* %22, align 8
  %24 = load i32, i32* %n.addr, align 4
  %conv10 = zext i32 %24 to i64
  %25 = load i64, i64* %r, align 8
  %sub11 = sub i64 %conv10, %25
  %arrayidx12 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %sub11
  %26 = load i64, i64* %arrayidx12, align 8
  call void @_mpd_mul_words(i64* %20, i64* %21, i64 %23, i64 %26)
  %27 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %27, i32 0, i32 3
  %28 = load i64, i64* %len13, align 8
  %sub14 = sub i64 %28, 2
  %29 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %29, i32 0, i32 5
  %30 = load i64*, i64** %data15, align 8
  %arrayidx16 = getelementptr i64, i64* %30, i64 %sub14
  %31 = load i64, i64* %arrayidx16, align 8
  %32 = load i32, i32* %n.addr, align 4
  %conv17 = zext i32 %32 to i64
  %33 = load i64, i64* %r, align 8
  %sub18 = sub i64 %conv17, %33
  %sub19 = sub i64 19, %sub18
  %arrayidx20 = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %sub19
  %34 = load i64, i64* %arrayidx20, align 8
  %div21 = udiv i64 %31, %34
  store i64 %div21, i64* %tmp, align 8
  %35 = load i64*, i64** %lo.addr, align 8
  %36 = load i64, i64* %35, align 8
  %37 = load i64, i64* %tmp, align 8
  %add = add i64 %36, %37
  %38 = load i64*, i64** %lo.addr, align 8
  store i64 %add, i64* %38, align 8
  %39 = load i64*, i64** %lo.addr, align 8
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %tmp, align 8
  %cmp22 = icmp ult i64 %40, %41
  br i1 %cmp22, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.then.9
  %42 = load i64*, i64** %hi.addr, align 8
  %43 = load i64, i64* %42, align 8
  %inc = add i64 %43, 1
  store i64 %inc, i64* %42, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.then.9
  br label %if.end.25

if.end.25:                                        ; preds = %if.end, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %a, i64 %b) #2 {
entry:
  %hi.addr = alloca i64*, align 8
  %lo.addr = alloca i64*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %h = alloca i64, align 8
  %l = alloca i64, align 8
  store i64* %hi, i64** %hi.addr, align 8
  store i64* %lo, i64** %lo.addr, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  %2 = call { i64, i64 } asm "mulq $3\0A\09", "={dx},={ax},%{ax},rm,~{cc},~{dirflag},~{fpsr},~{flags}"(i64 %0, i64 %1) #9, !srcloc !2
  %asmresult = extractvalue { i64, i64 } %2, 0
  %asmresult1 = extractvalue { i64, i64 } %2, 1
  store i64 %asmresult, i64* %h, align 8
  store i64 %asmresult1, i64* %l, align 8
  %3 = load i64, i64* %h, align 8
  %4 = load i64*, i64** %hi.addr, align 8
  store i64 %3, i64* %4, align 8
  %5 = load i64, i64* %l, align 8
  %6 = load i64*, i64** %lo.addr, align 8
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mpd_qcopy_static(%struct.mpd_t* %result, %struct.mpd_t* %a) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 5
  %3 = load i64*, i64** %data, align 8
  %4 = bitcast i64* %3 to i8*
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 5
  %6 = load i64*, i64** %data1, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 3
  %9 = load i64, i64* %len, align 8
  %mul = mul i64 %9, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %7, i64 %mul, i32 8, i1 false)
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @mpd_copy_flags(%struct.mpd_t* %10, %struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  %13 = load i64, i64* %exp, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 1
  store i64 %13, i64* %exp2, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 2
  %16 = load i64, i64* %digits, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 2
  store i64 %16, i64* %digits3, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 3
  %19 = load i64, i64* %len4, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %len5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 3
  store i64 %19, i64* %len5, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_apply_round(%struct.mpd_t* %dec, i64 %rnd, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %dec.addr = alloca %struct.mpd_t*, align 8
  %rnd.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %carry = alloca i64, align 8
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i64 %rnd, i64* %rnd.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %1 = load i64, i64* %rnd.addr, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call = call i32 @_mpd_rnd_incr(%struct.mpd_t* %0, i64 %1, %struct.mpd_context_t* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 5
  %4 = load i64*, i64** %data, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 3
  %6 = load i64, i64* %len, align 8
  %call1 = call i64 @_mpd_baseincr(i64* %4, i64 %6)
  store i64 %call1, i64* %carry, align 8
  %7 = load i64, i64* %carry, align 8
  %tobool2 = icmp ne i64 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %8 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 18), align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len4, align 8
  %sub = sub i64 %10, 1
  %11 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 5
  %12 = load i64*, i64** %data5, align 8
  %arrayidx = getelementptr i64, i64* %12, i64 %sub
  store i64 %8, i64* %arrayidx, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 1
  %14 = load i64, i64* %exp, align 8
  %add = add i64 %14, 1
  store i64 %add, i64* %exp, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %16 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %17 = load i32*, i32** %status.addr, align 8
  call void @_mpd_check_exp(%struct.mpd_t* %15, %struct.mpd_context_t* %16, i32* %17)
  br label %if.end.13

if.end:                                           ; preds = %if.then
  %18 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %18)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %19, i32 0, i32 2
  %20 = load i64, i64* %digits, align 8
  %21 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %21, i32 0, i32 0
  %22 = load i64, i64* %prec, align 8
  %cmp = icmp sgt i64 %20, %22
  br i1 %cmp, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end
  %23 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call7 = call i64 @mpd_qshiftr_inplace(%struct.mpd_t* %23, i64 1)
  %24 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %exp8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 1
  %25 = load i64, i64* %exp8, align 8
  %add9 = add i64 %25, 1
  store i64 %add9, i64* %exp8, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec10 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %26, i32 0, i32 0
  %27 = load i64, i64* %prec10, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %28, i32 0, i32 2
  store i64 %27, i64* %digits11, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %30 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %31 = load i32*, i32** %status.addr, align 8
  call void @_mpd_check_exp(%struct.mpd_t* %29, %struct.mpd_context_t* %30, i32* %31)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.6, %if.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.3, %if.end.12, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @_mpd_rnd_incr(%struct.mpd_t* %dec, i64 %rnd, %struct.mpd_context_t* %ctx) #2 {
entry:
  %retval = alloca i32, align 4
  %dec.addr = alloca %struct.mpd_t*, align 8
  %rnd.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %ld = alloca i32, align 4
  store %struct.mpd_t* %dec, %struct.mpd_t** %dec.addr, align 8
  store i64 %rnd, i64* %rnd.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  %0 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %0, i32 0, i32 6
  %1 = load i32, i32* %round, align 4
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 8, label %sw.bb
    i32 4, label %sw.bb.1
    i32 6, label %sw.bb.2
    i32 2, label %sw.bb.7
    i32 3, label %sw.bb.15
    i32 5, label %sw.bb.25
    i32 0, label %sw.bb.28
    i32 7, label %sw.bb.33
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load i64, i64* %rnd.addr, align 8
  %cmp = icmp uge i64 %2, 5
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %3 = load i64, i64* %rnd.addr, align 8
  %cmp3 = icmp ugt i64 %3, 5
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb.2
  %4 = load i64, i64* %rnd.addr, align 8
  %cmp5 = icmp eq i64 %4, 5
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call = call i32 @mpd_isoddcoeff(%struct.mpd_t* %5)
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %tobool, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %sw.bb.2
  %7 = phi i1 [ true, %sw.bb.2 ], [ %6, %land.end ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  %8 = load i64, i64* %rnd.addr, align 8
  %cmp8 = icmp eq i64 %8, 0
  br i1 %cmp8, label %lor.end.13, label %lor.rhs.10

lor.rhs.10:                                       ; preds = %sw.bb.7
  %9 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call11 = call i32 @mpd_isnegative(%struct.mpd_t* %9)
  %tobool12 = icmp ne i32 %call11, 0
  br label %lor.end.13

lor.end.13:                                       ; preds = %lor.rhs.10, %sw.bb.7
  %10 = phi i1 [ true, %sw.bb.7 ], [ %tobool12, %lor.rhs.10 ]
  %lnot = xor i1 %10, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  %11 = load i64, i64* %rnd.addr, align 8
  %cmp16 = icmp eq i64 %11, 0
  br i1 %cmp16, label %lor.end.21, label %lor.rhs.18

lor.rhs.18:                                       ; preds = %sw.bb.15
  %12 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %call19 = call i32 @mpd_ispositive(%struct.mpd_t* %12)
  %tobool20 = icmp ne i32 %call19, 0
  br label %lor.end.21

lor.end.21:                                       ; preds = %lor.rhs.18, %sw.bb.15
  %13 = phi i1 [ true, %sw.bb.15 ], [ %tobool20, %lor.rhs.18 ]
  %lnot23 = xor i1 %13, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  store i32 %lnot.ext24, i32* %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  %14 = load i64, i64* %rnd.addr, align 8
  %cmp26 = icmp ugt i64 %14, 5
  %conv27 = zext i1 %cmp26 to i32
  store i32 %conv27, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %entry
  %15 = load i64, i64* %rnd.addr, align 8
  %cmp29 = icmp eq i64 %15, 0
  %lnot31 = xor i1 %cmp29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  store i32 %lnot.ext32, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %entry
  %16 = load %struct.mpd_t*, %struct.mpd_t** %dec.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 5
  %17 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %17, i64 0
  %18 = load i64, i64* %arrayidx, align 8
  %call34 = call i64 @mpd_lsd(i64 %18)
  %conv35 = trunc i64 %call34 to i32
  store i32 %conv35, i32* %ld, align 4
  %19 = load i64, i64* %rnd.addr, align 8
  %cmp36 = icmp eq i64 %19, 0
  br i1 %cmp36, label %land.end.46, label %land.rhs.38

land.rhs.38:                                      ; preds = %sw.bb.33
  %20 = load i32, i32* %ld, align 4
  %cmp39 = icmp eq i32 %20, 0
  br i1 %cmp39, label %lor.end.44, label %lor.rhs.41

lor.rhs.41:                                       ; preds = %land.rhs.38
  %21 = load i32, i32* %ld, align 4
  %cmp42 = icmp eq i32 %21, 5
  br label %lor.end.44

lor.end.44:                                       ; preds = %lor.rhs.41, %land.rhs.38
  %22 = phi i1 [ true, %land.rhs.38 ], [ %cmp42, %lor.rhs.41 ]
  br label %land.end.46

land.end.46:                                      ; preds = %lor.end.44, %sw.bb.33
  %23 = phi i1 [ false, %sw.bb.33 ], [ %22, %lor.end.44 ]
  %land.ext = zext i1 %23 to i32
  store i32 %land.ext, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %land.end.46, %sw.bb.28, %sw.bb.25, %lor.end.21, %lor.end.13, %lor.end, %sw.bb.1, %sw.bb
  %24 = load i32, i32* %retval
  ret i32 %24
}

declare hidden i64 @_mpd_baseincr(i64*, i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_cmp_same_adjexp(%struct.mpd_t* %a, %struct.mpd_t* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %shift = alloca i64, align 8
  %i = alloca i64, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %0, i32 0, i32 1
  %1 = load i64, i64* %exp, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %2, i32 0, i32 1
  %3 = load i64, i64* %exp1, align 8
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %4, i32 0, i32 1
  %5 = load i64, i64* %exp2, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %exp3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %6, i32 0, i32 1
  %7 = load i64, i64* %exp3, align 8
  %sub = sub i64 %5, %7
  store i64 %sub, i64* %shift, align 8
  %8 = load i64, i64* %shift, align 8
  %cmp4 = icmp sgt i64 %8, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 5
  %10 = load i64*, i64** %data, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 5
  %12 = load i64*, i64** %data6, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 3
  %14 = load i64, i64* %len, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 3
  %16 = load i64, i64* %len7, align 8
  %17 = load i64, i64* %shift, align 8
  %call = call i32 @_mpd_basecmp(i64* %10, i64* %12, i64 %14, i64 %16, i64 %17)
  %mul = mul i32 -1, %call
  store i32 %mul, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %18 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 5
  %19 = load i64*, i64** %data8, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 5
  %21 = load i64*, i64** %data9, align 8
  %22 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 3
  %23 = load i64, i64* %len10, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %len11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 3
  %25 = load i64, i64* %len11, align 8
  %26 = load i64, i64* %shift, align 8
  %sub12 = sub i64 0, %26
  %call13 = call i32 @_mpd_basecmp(i64* %19, i64* %21, i64 %23, i64 %25, i64 %sub12)
  store i32 %call13, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %27 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %27, i32 0, i32 3
  %28 = load i64, i64* %len14, align 8
  %sub15 = sub i64 %28, 1
  store i64 %sub15, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %29 = load i64, i64* %i, align 8
  %cmp16 = icmp sge i64 %29, 0
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i64, i64* %i, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 5
  %32 = load i64*, i64** %data17, align 8
  %arrayidx = getelementptr i64, i64* %32, i64 %30
  %33 = load i64, i64* %arrayidx, align 8
  %34 = load i64, i64* %i, align 8
  %35 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %35, i32 0, i32 5
  %36 = load i64*, i64** %data18, align 8
  %arrayidx19 = getelementptr i64, i64* %36, i64 %34
  %37 = load i64, i64* %arrayidx19, align 8
  %cmp20 = icmp ne i64 %33, %37
  br i1 %cmp20, label %if.then.21, label %if.end.29

if.then.21:                                       ; preds = %for.body
  %38 = load i64, i64* %i, align 8
  %39 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %39, i32 0, i32 5
  %40 = load i64*, i64** %data22, align 8
  %arrayidx23 = getelementptr i64, i64* %40, i64 %38
  %41 = load i64, i64* %arrayidx23, align 8
  %42 = load i64, i64* %i, align 8
  %43 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %data24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %43, i32 0, i32 5
  %44 = load i64*, i64** %data24, align 8
  %arrayidx25 = getelementptr i64, i64* %44, i64 %42
  %45 = load i64, i64* %arrayidx25, align 8
  %cmp26 = icmp ult i64 %41, %45
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.then.21
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.then.21
  store i32 1, i32* %retval
  br label %return

if.end.29:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.29
  %46 = load i64, i64* %i, align 8
  %dec = add i64 %46, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.end.28, %if.then.27, %if.else, %if.then.5
  %47 = load i32, i32* %retval
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_basecmp(i64* %big, i64* %small, i64 %n, i64 %m, i64 %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %big.addr = alloca i64*, align 8
  %small.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %m.addr = alloca i64, align 8
  %shift.addr = alloca i64, align 8
  %l = alloca i64, align 8
  %lprev = alloca i64, align 8
  %h = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %ph = alloca i64, align 8
  %x = alloca i64, align 8
  store i64* %big, i64** %big.addr, align 8
  store i64* %small, i64** %small.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 %m, i64* %m.addr, align 8
  store i64 %shift, i64* %shift.addr, align 8
  %0 = load i64, i64* %shift.addr, align 8
  call void @_mpd_div_word(i64* %q, i64* %r, i64 %0, i64 19)
  %1 = load i64, i64* %r, align 8
  %cmp = icmp ne i64 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %r, align 8
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %2
  %3 = load i64, i64* %arrayidx, align 8
  store i64 %3, i64* %ph, align 8
  %4 = load i64, i64* %m.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %m.addr, align 8
  %5 = load i64, i64* %n.addr, align 8
  %dec1 = add i64 %5, -1
  store i64 %dec1, i64* %n.addr, align 8
  %6 = load i64, i64* %m.addr, align 8
  %dec2 = add i64 %6, -1
  store i64 %dec2, i64* %m.addr, align 8
  %7 = load i64*, i64** %small.addr, align 8
  %arrayidx3 = getelementptr i64, i64* %7, i64 %6
  %8 = load i64, i64* %arrayidx3, align 8
  %9 = load i64, i64* %r, align 8
  %sub = sub i64 19, %9
  call void @_mpd_divmod_pow10(i64* %h, i64* %lprev, i64 %8, i64 %sub)
  %10 = load i64, i64* %h, align 8
  %cmp4 = icmp ne i64 %10, 0
  br i1 %cmp4, label %if.then.5, label %if.end.14

if.then.5:                                        ; preds = %if.then
  %11 = load i64, i64* %n.addr, align 8
  %12 = load i64*, i64** %big.addr, align 8
  %arrayidx6 = getelementptr i64, i64* %12, i64 %11
  %13 = load i64, i64* %arrayidx6, align 8
  %14 = load i64, i64* %h, align 8
  %cmp7 = icmp ne i64 %13, %14
  br i1 %cmp7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %if.then.5
  %15 = load i64, i64* %n.addr, align 8
  %16 = load i64*, i64** %big.addr, align 8
  %arrayidx9 = getelementptr i64, i64* %16, i64 %15
  %17 = load i64, i64* %arrayidx9, align 8
  %18 = load i64, i64* %h, align 8
  %cmp10 = icmp ult i64 %17, %18
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then.8
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.8
  store i32 1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.then.5
  %19 = load i64, i64* %n.addr, align 8
  %dec13 = add i64 %19, -1
  store i64 %dec13, i64* %n.addr, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.12, %if.then
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %20 = load i64, i64* %m.addr, align 8
  %cmp15 = icmp ne i64 %20, -1
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i64, i64* %m.addr, align 8
  %22 = load i64*, i64** %small.addr, align 8
  %arrayidx16 = getelementptr i64, i64* %22, i64 %21
  %23 = load i64, i64* %arrayidx16, align 8
  %24 = load i64, i64* %r, align 8
  %sub17 = sub i64 19, %24
  call void @_mpd_divmod_pow10(i64* %h, i64* %l, i64 %23, i64 %sub17)
  %25 = load i64, i64* %ph, align 8
  %26 = load i64, i64* %lprev, align 8
  %mul = mul i64 %25, %26
  %27 = load i64, i64* %h, align 8
  %add = add i64 %mul, %27
  store i64 %add, i64* %x, align 8
  %28 = load i64, i64* %n.addr, align 8
  %29 = load i64*, i64** %big.addr, align 8
  %arrayidx18 = getelementptr i64, i64* %29, i64 %28
  %30 = load i64, i64* %arrayidx18, align 8
  %31 = load i64, i64* %x, align 8
  %cmp19 = icmp ne i64 %30, %31
  br i1 %cmp19, label %if.then.20, label %if.end.25

if.then.20:                                       ; preds = %for.body
  %32 = load i64, i64* %n.addr, align 8
  %33 = load i64*, i64** %big.addr, align 8
  %arrayidx21 = getelementptr i64, i64* %33, i64 %32
  %34 = load i64, i64* %arrayidx21, align 8
  %35 = load i64, i64* %x, align 8
  %cmp22 = icmp ult i64 %34, %35
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.20
  store i32 -1, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.20
  store i32 1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %for.body
  %36 = load i64, i64* %l, align 8
  store i64 %36, i64* %lprev, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.25
  %37 = load i64, i64* %m.addr, align 8
  %dec26 = add i64 %37, -1
  store i64 %dec26, i64* %m.addr, align 8
  %38 = load i64, i64* %n.addr, align 8
  %dec27 = add i64 %38, -1
  store i64 %dec27, i64* %n.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i64, i64* %ph, align 8
  %40 = load i64, i64* %lprev, align 8
  %mul28 = mul i64 %39, %40
  store i64 %mul28, i64* %x, align 8
  %41 = load i64, i64* %q, align 8
  %42 = load i64*, i64** %big.addr, align 8
  %arrayidx29 = getelementptr i64, i64* %42, i64 %41
  %43 = load i64, i64* %arrayidx29, align 8
  %44 = load i64, i64* %x, align 8
  %cmp30 = icmp ne i64 %43, %44
  br i1 %cmp30, label %if.then.31, label %if.end.36

if.then.31:                                       ; preds = %for.end
  %45 = load i64, i64* %q, align 8
  %46 = load i64*, i64** %big.addr, align 8
  %arrayidx32 = getelementptr i64, i64* %46, i64 %45
  %47 = load i64, i64* %arrayidx32, align 8
  %48 = load i64, i64* %x, align 8
  %cmp33 = icmp ult i64 %47, %48
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.31
  store i32 -1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.31
  store i32 1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %for.end
  br label %if.end.51

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.50, %if.else
  %49 = load i64, i64* %m.addr, align 8
  %dec37 = add i64 %49, -1
  store i64 %dec37, i64* %m.addr, align 8
  %cmp38 = icmp ne i64 %dec37, -1
  br i1 %cmp38, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %50 = load i64, i64* %m.addr, align 8
  %51 = load i64, i64* %q, align 8
  %add39 = add i64 %50, %51
  %52 = load i64*, i64** %big.addr, align 8
  %arrayidx40 = getelementptr i64, i64* %52, i64 %add39
  %53 = load i64, i64* %arrayidx40, align 8
  %54 = load i64, i64* %m.addr, align 8
  %55 = load i64*, i64** %small.addr, align 8
  %arrayidx41 = getelementptr i64, i64* %55, i64 %54
  %56 = load i64, i64* %arrayidx41, align 8
  %cmp42 = icmp ne i64 %53, %56
  br i1 %cmp42, label %if.then.43, label %if.end.50

if.then.43:                                       ; preds = %while.body
  %57 = load i64, i64* %m.addr, align 8
  %58 = load i64, i64* %q, align 8
  %add44 = add i64 %57, %58
  %59 = load i64*, i64** %big.addr, align 8
  %arrayidx45 = getelementptr i64, i64* %59, i64 %add44
  %60 = load i64, i64* %arrayidx45, align 8
  %61 = load i64, i64* %m.addr, align 8
  %62 = load i64*, i64** %small.addr, align 8
  %arrayidx46 = getelementptr i64, i64* %62, i64 %61
  %63 = load i64, i64* %arrayidx46, align 8
  %cmp47 = icmp ult i64 %60, %63
  br i1 %cmp47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.then.43
  store i32 -1, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.then.43
  store i32 1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.51

if.end.51:                                        ; preds = %while.end, %if.end.36
  %64 = load i64*, i64** %big.addr, align 8
  %65 = load i64, i64* %q, align 8
  %call = call i32 @_mpd_isallzero(i64* %64, i64 %65)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

return:                                           ; preds = %if.end.51, %if.end.49, %if.then.48, %if.end.35, %if.then.34, %if.end.24, %if.then.23, %if.end, %if.then.11
  %66 = load i32, i32* %retval
  ret i32 %66
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_divmod_pow10(i64* %q, i64* %r, i64 %v, i64 %exp) #2 {
entry:
  %q.addr = alloca i64*, align 8
  %r.addr = alloca i64*, align 8
  %v.addr = alloca i64, align 8
  %exp.addr = alloca i64, align 8
  store i64* %q, i64** %q.addr, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  %0 = load i64, i64* %exp.addr, align 8
  %cmp = icmp ule i64 %0, 9
  br i1 %cmp, label %if.then, label %if.else.37

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %exp.addr, align 8
  %cmp1 = icmp ule i64 %1, 4
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %2 = load i64, i64* %exp.addr, align 8
  switch i64 %2, label %sw.epilog [
    i64 0, label %sw.bb
    i64 1, label %sw.bb.3
    i64 2, label %sw.bb.4
    i64 3, label %sw.bb.8
    i64 4, label %sw.bb.12
  ]

sw.bb:                                            ; preds = %if.then.2
  %3 = load i64, i64* %v.addr, align 8
  %4 = load i64*, i64** %q.addr, align 8
  store i64 %3, i64* %4, align 8
  %5 = load i64*, i64** %r.addr, align 8
  store i64 0, i64* %5, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.then.2
  %6 = load i64, i64* %v.addr, align 8
  %div = udiv i64 %6, 10
  %7 = load i64*, i64** %q.addr, align 8
  store i64 %div, i64* %7, align 8
  %8 = load i64, i64* %v.addr, align 8
  %9 = load i64*, i64** %q.addr, align 8
  %10 = load i64, i64* %9, align 8
  %mul = mul i64 %10, 10
  %sub = sub i64 %8, %mul
  %11 = load i64*, i64** %r.addr, align 8
  store i64 %sub, i64* %11, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %if.then.2
  %12 = load i64, i64* %v.addr, align 8
  %div5 = udiv i64 %12, 100
  %13 = load i64*, i64** %q.addr, align 8
  store i64 %div5, i64* %13, align 8
  %14 = load i64, i64* %v.addr, align 8
  %15 = load i64*, i64** %q.addr, align 8
  %16 = load i64, i64* %15, align 8
  %mul6 = mul i64 %16, 100
  %sub7 = sub i64 %14, %mul6
  %17 = load i64*, i64** %r.addr, align 8
  store i64 %sub7, i64* %17, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %if.then.2
  %18 = load i64, i64* %v.addr, align 8
  %div9 = udiv i64 %18, 1000
  %19 = load i64*, i64** %q.addr, align 8
  store i64 %div9, i64* %19, align 8
  %20 = load i64, i64* %v.addr, align 8
  %21 = load i64*, i64** %q.addr, align 8
  %22 = load i64, i64* %21, align 8
  %mul10 = mul i64 %22, 1000
  %sub11 = sub i64 %20, %mul10
  %23 = load i64*, i64** %r.addr, align 8
  store i64 %sub11, i64* %23, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %if.then.2
  %24 = load i64, i64* %v.addr, align 8
  %div13 = udiv i64 %24, 10000
  %25 = load i64*, i64** %q.addr, align 8
  store i64 %div13, i64* %25, align 8
  %26 = load i64, i64* %v.addr, align 8
  %27 = load i64*, i64** %q.addr, align 8
  %28 = load i64, i64* %27, align 8
  %mul14 = mul i64 %28, 10000
  %sub15 = sub i64 %26, %mul14
  %29 = load i64*, i64** %r.addr, align 8
  store i64 %sub15, i64* %29, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then.2, %sw.bb.12, %sw.bb.8, %sw.bb.4, %sw.bb.3, %sw.bb
  br label %if.end

if.else:                                          ; preds = %if.then
  %30 = load i64, i64* %exp.addr, align 8
  switch i64 %30, label %sw.epilog.36 [
    i64 5, label %sw.bb.16
    i64 6, label %sw.bb.20
    i64 7, label %sw.bb.24
    i64 8, label %sw.bb.28
    i64 9, label %sw.bb.32
  ]

sw.bb.16:                                         ; preds = %if.else
  %31 = load i64, i64* %v.addr, align 8
  %div17 = udiv i64 %31, 100000
  %32 = load i64*, i64** %q.addr, align 8
  store i64 %div17, i64* %32, align 8
  %33 = load i64, i64* %v.addr, align 8
  %34 = load i64*, i64** %q.addr, align 8
  %35 = load i64, i64* %34, align 8
  %mul18 = mul i64 %35, 100000
  %sub19 = sub i64 %33, %mul18
  %36 = load i64*, i64** %r.addr, align 8
  store i64 %sub19, i64* %36, align 8
  br label %sw.epilog.36

sw.bb.20:                                         ; preds = %if.else
  %37 = load i64, i64* %v.addr, align 8
  %div21 = udiv i64 %37, 1000000
  %38 = load i64*, i64** %q.addr, align 8
  store i64 %div21, i64* %38, align 8
  %39 = load i64, i64* %v.addr, align 8
  %40 = load i64*, i64** %q.addr, align 8
  %41 = load i64, i64* %40, align 8
  %mul22 = mul i64 %41, 1000000
  %sub23 = sub i64 %39, %mul22
  %42 = load i64*, i64** %r.addr, align 8
  store i64 %sub23, i64* %42, align 8
  br label %sw.epilog.36

sw.bb.24:                                         ; preds = %if.else
  %43 = load i64, i64* %v.addr, align 8
  %div25 = udiv i64 %43, 10000000
  %44 = load i64*, i64** %q.addr, align 8
  store i64 %div25, i64* %44, align 8
  %45 = load i64, i64* %v.addr, align 8
  %46 = load i64*, i64** %q.addr, align 8
  %47 = load i64, i64* %46, align 8
  %mul26 = mul i64 %47, 10000000
  %sub27 = sub i64 %45, %mul26
  %48 = load i64*, i64** %r.addr, align 8
  store i64 %sub27, i64* %48, align 8
  br label %sw.epilog.36

sw.bb.28:                                         ; preds = %if.else
  %49 = load i64, i64* %v.addr, align 8
  %div29 = udiv i64 %49, 100000000
  %50 = load i64*, i64** %q.addr, align 8
  store i64 %div29, i64* %50, align 8
  %51 = load i64, i64* %v.addr, align 8
  %52 = load i64*, i64** %q.addr, align 8
  %53 = load i64, i64* %52, align 8
  %mul30 = mul i64 %53, 100000000
  %sub31 = sub i64 %51, %mul30
  %54 = load i64*, i64** %r.addr, align 8
  store i64 %sub31, i64* %54, align 8
  br label %sw.epilog.36

sw.bb.32:                                         ; preds = %if.else
  %55 = load i64, i64* %v.addr, align 8
  %div33 = udiv i64 %55, 1000000000
  %56 = load i64*, i64** %q.addr, align 8
  store i64 %div33, i64* %56, align 8
  %57 = load i64, i64* %v.addr, align 8
  %58 = load i64*, i64** %q.addr, align 8
  %59 = load i64, i64* %58, align 8
  %mul34 = mul i64 %59, 1000000000
  %sub35 = sub i64 %57, %mul34
  %60 = load i64*, i64** %r.addr, align 8
  store i64 %sub35, i64* %60, align 8
  br label %sw.epilog.36

sw.epilog.36:                                     ; preds = %if.else, %sw.bb.32, %sw.bb.28, %sw.bb.24, %sw.bb.20, %sw.bb.16
  br label %if.end

if.end:                                           ; preds = %sw.epilog.36, %sw.epilog
  br label %if.end.84

if.else.37:                                       ; preds = %entry
  %61 = load i64, i64* %exp.addr, align 8
  %cmp38 = icmp ule i64 %61, 14
  br i1 %cmp38, label %if.then.39, label %if.else.61

if.then.39:                                       ; preds = %if.else.37
  %62 = load i64, i64* %exp.addr, align 8
  switch i64 %62, label %sw.epilog.60 [
    i64 10, label %sw.bb.40
    i64 11, label %sw.bb.44
    i64 12, label %sw.bb.48
    i64 13, label %sw.bb.52
    i64 14, label %sw.bb.56
  ]

sw.bb.40:                                         ; preds = %if.then.39
  %63 = load i64, i64* %v.addr, align 8
  %div41 = udiv i64 %63, 10000000000
  %64 = load i64*, i64** %q.addr, align 8
  store i64 %div41, i64* %64, align 8
  %65 = load i64, i64* %v.addr, align 8
  %66 = load i64*, i64** %q.addr, align 8
  %67 = load i64, i64* %66, align 8
  %mul42 = mul i64 %67, 10000000000
  %sub43 = sub i64 %65, %mul42
  %68 = load i64*, i64** %r.addr, align 8
  store i64 %sub43, i64* %68, align 8
  br label %sw.epilog.60

sw.bb.44:                                         ; preds = %if.then.39
  %69 = load i64, i64* %v.addr, align 8
  %div45 = udiv i64 %69, 100000000000
  %70 = load i64*, i64** %q.addr, align 8
  store i64 %div45, i64* %70, align 8
  %71 = load i64, i64* %v.addr, align 8
  %72 = load i64*, i64** %q.addr, align 8
  %73 = load i64, i64* %72, align 8
  %mul46 = mul i64 %73, 100000000000
  %sub47 = sub i64 %71, %mul46
  %74 = load i64*, i64** %r.addr, align 8
  store i64 %sub47, i64* %74, align 8
  br label %sw.epilog.60

sw.bb.48:                                         ; preds = %if.then.39
  %75 = load i64, i64* %v.addr, align 8
  %div49 = udiv i64 %75, 1000000000000
  %76 = load i64*, i64** %q.addr, align 8
  store i64 %div49, i64* %76, align 8
  %77 = load i64, i64* %v.addr, align 8
  %78 = load i64*, i64** %q.addr, align 8
  %79 = load i64, i64* %78, align 8
  %mul50 = mul i64 %79, 1000000000000
  %sub51 = sub i64 %77, %mul50
  %80 = load i64*, i64** %r.addr, align 8
  store i64 %sub51, i64* %80, align 8
  br label %sw.epilog.60

sw.bb.52:                                         ; preds = %if.then.39
  %81 = load i64, i64* %v.addr, align 8
  %div53 = udiv i64 %81, 10000000000000
  %82 = load i64*, i64** %q.addr, align 8
  store i64 %div53, i64* %82, align 8
  %83 = load i64, i64* %v.addr, align 8
  %84 = load i64*, i64** %q.addr, align 8
  %85 = load i64, i64* %84, align 8
  %mul54 = mul i64 %85, 10000000000000
  %sub55 = sub i64 %83, %mul54
  %86 = load i64*, i64** %r.addr, align 8
  store i64 %sub55, i64* %86, align 8
  br label %sw.epilog.60

sw.bb.56:                                         ; preds = %if.then.39
  %87 = load i64, i64* %v.addr, align 8
  %div57 = udiv i64 %87, 100000000000000
  %88 = load i64*, i64** %q.addr, align 8
  store i64 %div57, i64* %88, align 8
  %89 = load i64, i64* %v.addr, align 8
  %90 = load i64*, i64** %q.addr, align 8
  %91 = load i64, i64* %90, align 8
  %mul58 = mul i64 %91, 100000000000000
  %sub59 = sub i64 %89, %mul58
  %92 = load i64*, i64** %r.addr, align 8
  store i64 %sub59, i64* %92, align 8
  br label %sw.epilog.60

sw.epilog.60:                                     ; preds = %if.then.39, %sw.bb.56, %sw.bb.52, %sw.bb.48, %sw.bb.44, %sw.bb.40
  br label %if.end.83

if.else.61:                                       ; preds = %if.else.37
  %93 = load i64, i64* %exp.addr, align 8
  switch i64 %93, label %sw.epilog.82 [
    i64 15, label %sw.bb.62
    i64 16, label %sw.bb.66
    i64 17, label %sw.bb.70
    i64 18, label %sw.bb.74
    i64 19, label %sw.bb.78
  ]

sw.bb.62:                                         ; preds = %if.else.61
  %94 = load i64, i64* %v.addr, align 8
  %div63 = udiv i64 %94, 1000000000000000
  %95 = load i64*, i64** %q.addr, align 8
  store i64 %div63, i64* %95, align 8
  %96 = load i64, i64* %v.addr, align 8
  %97 = load i64*, i64** %q.addr, align 8
  %98 = load i64, i64* %97, align 8
  %mul64 = mul i64 %98, 1000000000000000
  %sub65 = sub i64 %96, %mul64
  %99 = load i64*, i64** %r.addr, align 8
  store i64 %sub65, i64* %99, align 8
  br label %sw.epilog.82

sw.bb.66:                                         ; preds = %if.else.61
  %100 = load i64, i64* %v.addr, align 8
  %div67 = udiv i64 %100, 10000000000000000
  %101 = load i64*, i64** %q.addr, align 8
  store i64 %div67, i64* %101, align 8
  %102 = load i64, i64* %v.addr, align 8
  %103 = load i64*, i64** %q.addr, align 8
  %104 = load i64, i64* %103, align 8
  %mul68 = mul i64 %104, 10000000000000000
  %sub69 = sub i64 %102, %mul68
  %105 = load i64*, i64** %r.addr, align 8
  store i64 %sub69, i64* %105, align 8
  br label %sw.epilog.82

sw.bb.70:                                         ; preds = %if.else.61
  %106 = load i64, i64* %v.addr, align 8
  %div71 = udiv i64 %106, 100000000000000000
  %107 = load i64*, i64** %q.addr, align 8
  store i64 %div71, i64* %107, align 8
  %108 = load i64, i64* %v.addr, align 8
  %109 = load i64*, i64** %q.addr, align 8
  %110 = load i64, i64* %109, align 8
  %mul72 = mul i64 %110, 100000000000000000
  %sub73 = sub i64 %108, %mul72
  %111 = load i64*, i64** %r.addr, align 8
  store i64 %sub73, i64* %111, align 8
  br label %sw.epilog.82

sw.bb.74:                                         ; preds = %if.else.61
  %112 = load i64, i64* %v.addr, align 8
  %div75 = udiv i64 %112, 1000000000000000000
  %113 = load i64*, i64** %q.addr, align 8
  store i64 %div75, i64* %113, align 8
  %114 = load i64, i64* %v.addr, align 8
  %115 = load i64*, i64** %q.addr, align 8
  %116 = load i64, i64* %115, align 8
  %mul76 = mul i64 %116, 1000000000000000000
  %sub77 = sub i64 %114, %mul76
  %117 = load i64*, i64** %r.addr, align 8
  store i64 %sub77, i64* %117, align 8
  br label %sw.epilog.82

sw.bb.78:                                         ; preds = %if.else.61
  %118 = load i64, i64* %v.addr, align 8
  %div79 = udiv i64 %118, -8446744073709551616
  %119 = load i64*, i64** %q.addr, align 8
  store i64 %div79, i64* %119, align 8
  %120 = load i64, i64* %v.addr, align 8
  %121 = load i64*, i64** %q.addr, align 8
  %122 = load i64, i64* %121, align 8
  %mul80 = mul i64 %122, -8446744073709551616
  %sub81 = sub i64 %120, %mul80
  %123 = load i64*, i64** %r.addr, align 8
  store i64 %sub81, i64* %123, align 8
  br label %sw.epilog.82

sw.epilog.82:                                     ; preds = %if.else.61, %sw.bb.78, %sw.bb.74, %sw.bb.70, %sw.bb.66, %sw.bb.62
  br label %if.end.83

if.end.83:                                        ; preds = %sw.epilog.82, %sw.epilog.60
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @_mpd_isallzero(i64* %data, i64 %len) #2 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i64*, align 8
  %len.addr = alloca i64, align 8
  store i64* %data, i64** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %len.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %len.addr, align 8
  %cmp = icmp sge i64 %dec, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %len.addr, align 8
  %2 = load i64*, i64** %data.addr, align 8
  %arrayidx = getelementptr i64, i64* %2, i64 %1
  %3 = load i64, i64* %arrayidx, align 8
  %cmp1 = icmp ne i64 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_ptrswap(%struct.mpd_t** %a, %struct.mpd_t** %b) #2 {
entry:
  %a.addr = alloca %struct.mpd_t**, align 8
  %b.addr = alloca %struct.mpd_t**, align 8
  %t = alloca %struct.mpd_t*, align 8
  store %struct.mpd_t** %a, %struct.mpd_t*** %a.addr, align 8
  store %struct.mpd_t** %b, %struct.mpd_t*** %b.addr, align 8
  %0 = load %struct.mpd_t**, %struct.mpd_t*** %a.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %0, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %t, align 8
  %2 = load %struct.mpd_t**, %struct.mpd_t*** %b.addr, align 8
  %3 = load %struct.mpd_t*, %struct.mpd_t** %2, align 8
  %4 = load %struct.mpd_t**, %struct.mpd_t*** %a.addr, align 8
  store %struct.mpd_t* %3, %struct.mpd_t** %4, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %t, align 8
  %6 = load %struct.mpd_t**, %struct.mpd_t*** %b.addr, align 8
  store %struct.mpd_t* %5, %struct.mpd_t** %6, align 8
  ret void
}

declare hidden i64 @_mpd_baseadd(i64*, i64*, i64*, i64, i64) #3

declare hidden void @_mpd_basesub(i64*, i64*, i64*, i64, i64) #3

; Function Attrs: nounwind uwtable
define internal void @_mpd_qdiv_inf(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_isinfinite(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %2, i32 256, i32* %3)
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call zeroext i8 @mpd_sign(%struct.mpd_t* %5)
  %conv = zext i8 %call4 to i32
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call zeroext i8 @mpd_sign(%struct.mpd_t* %6)
  %conv6 = zext i8 %call5 to i32
  %xor = xor i32 %conv, %conv6
  %conv7 = trunc i32 %xor to i8
  call void @mpd_setspecial(%struct.mpd_t* %4, i8 zeroext %conv7, i8 zeroext 2)
  br label %return

if.end.8:                                         ; preds = %entry
  %7 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call zeroext i8 @mpd_sign(%struct.mpd_t* %8)
  %conv10 = zext i8 %call9 to i32
  %9 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call11 = call zeroext i8 @mpd_sign(%struct.mpd_t* %9)
  %conv12 = zext i8 %call11 to i32
  %xor13 = xor i32 %conv10, %conv12
  %conv14 = trunc i32 %xor13 to i8
  %10 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %call15 = call i64 @mpd_etiny(%struct.mpd_context_t* %10)
  call void @_settriple(%struct.mpd_t* %7, i8 zeroext %conv14, i64 0, i64 %call15)
  %11 = load i32*, i32** %status.addr, align 8
  %12 = load i32, i32* %11, align 4
  %or = or i32 %12, 1
  store i32 %or, i32* %11, align 4
  br label %return

return:                                           ; preds = %if.end.8, %if.end, %if.then.3
  ret void
}

declare hidden i64 @_mpd_shortdiv(i64*, i64*, i64, i64) #3

declare hidden i32 @_mpd_basedivmod(i64*, i64*, i64*, i64*, i64, i64) #3

; Function Attrs: nounwind uwtable
define internal void @_mpd_base_ndivmod(%struct.mpd_t* %q, %struct.mpd_t* %r, %struct.mpd_t* %a, %struct.mpd_t* %b, i32* %status) #0 {
entry:
  %q.addr = alloca %struct.mpd_t*, align 8
  %r.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %qq = alloca %struct.mpd_t*, align 8
  %rr = alloca %struct.mpd_t*, align 8
  %aa = alloca %struct.mpd_t, align 8
  %bb = alloca %struct.mpd_t, align 8
  %k = alloca i32, align 4
  store %struct.mpd_t* %q, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %qq, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  store %struct.mpd_t* %1, %struct.mpd_t** %rr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %aa, %struct.mpd_t* %2)
  %3 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  call void @_mpd_copy_shared(%struct.mpd_t* %bb, %struct.mpd_t* %3)
  call void @mpd_set_positive(%struct.mpd_t* %aa)
  call void @mpd_set_positive(%struct.mpd_t* %bb)
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %exp1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %bb, i32 0, i32 1
  store i64 0, i64* %exp1, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp = icmp eq %struct.mpd_t* %4, %5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp2 = icmp eq %struct.mpd_t* %6, %7
  br i1 %cmp2, label %if.then, label %if.end.5

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call, %struct.mpd_t** %qq, align 8
  %cmp3 = icmp eq %struct.mpd_t* %call, null
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %8 = load i32*, i32** %status.addr, align 8
  %9 = load i32, i32* %8, align 4
  %or = or i32 %9, 512
  store i32 %or, i32* %8, align 4
  br label %nanresult

if.end:                                           ; preds = %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %lor.lhs.false
  %10 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %cmp6 = icmp eq %struct.mpd_t* %10, %11
  br i1 %cmp6, label %if.then.9, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %if.end.5
  %12 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %cmp8 = icmp eq %struct.mpd_t* %12, %13
  br i1 %cmp8, label %if.then.9, label %if.end.15

if.then.9:                                        ; preds = %lor.lhs.false.7, %if.end.5
  %call10 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call10, %struct.mpd_t** %rr, align 8
  %cmp11 = icmp eq %struct.mpd_t* %call10, null
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.then.9
  %14 = load i32*, i32** %status.addr, align 8
  %15 = load i32, i32* %14, align 4
  %or13 = or i32 %15, 512
  store i32 %or13, i32* %14, align 4
  br label %nanresult

if.end.14:                                        ; preds = %if.then.9
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %lor.lhs.false.7
  call void @mpd_maxcontext(%struct.mpd_context_t* %workctx)
  %16 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 2
  %17 = load i64, i64* %digits, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %digits16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 2
  %19 = load i64, i64* %digits16, align 8
  %sub = sub i64 %17, %19
  %add = add i64 %sub, 1
  %add17 = add i64 %add, 3
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %add17, i64* %prec, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 2
  %21 = load i64, i64* %digits18, align 8
  %cmp19 = icmp sgt i64 %21, 999999999999999999
  br i1 %cmp19, label %if.then.23, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %if.end.15
  %prec21 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  %22 = load i64, i64* %prec21, align 8
  %cmp22 = icmp sgt i64 %22, 999999999999999999
  br i1 %cmp22, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %lor.lhs.false.20, %if.end.15
  %23 = load i32*, i32** %status.addr, align 8
  %24 = load i32, i32* %23, align 4
  %or24 = or i32 %24, 8
  store i32 %or24, i32* %23, align 4
  br label %nanresult

if.end.25:                                        ; preds = %lor.lhs.false.20
  %25 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %status26 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qreciprocal(%struct.mpd_t* %25, %struct.mpd_t* %bb, %struct.mpd_context_t* %workctx, i32* %status26)
  %26 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %status27 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qmul(%struct.mpd_t* %26, %struct.mpd_t* %aa, %struct.mpd_t* %27, %struct.mpd_context_t* %workctx, i32* %status27)
  %28 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %29 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %status28 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @mpd_qtrunc(%struct.mpd_t* %28, %struct.mpd_t* %29, %struct.mpd_context_t* %workctx, i32* %status28)
  %digits29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 2
  %30 = load i64, i64* %digits29, align 8
  %add30 = add i64 %30, 3
  %prec31 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 0
  store i64 %add30, i64* %prec31, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 1
  store i64 1000000000000000002, i64* %emax, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 2
  store i64 -1000000000000000002, i64* %emin, align 8
  %31 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %32 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %status32 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qmul(%struct.mpd_t* %31, %struct.mpd_t* %bb, %struct.mpd_t* %32, %struct.mpd_context_t* %workctx, i32* %status32)
  %33 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %34 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %status33 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qsub_exact(%struct.mpd_t* %33, %struct.mpd_t* %aa, %struct.mpd_t* %34, %struct.mpd_context_t* %workctx, i32* %status33)
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.25
  %35 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %call34 = call i32 @mpd_isspecial(%struct.mpd_t* %35)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.then.38, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %for.cond
  %36 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %call36 = call i32 @mpd_isspecial(%struct.mpd_t* %36)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %lor.lhs.false.35, %for.cond
  %status39 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %37 = load i32, i32* %status39, align 4
  %and = and i32 %37, 958
  %38 = load i32*, i32** %status.addr, align 8
  %39 = load i32, i32* %38, align 4
  %or40 = or i32 %39, %and
  store i32 %or40, i32* %38, align 4
  br label %nanresult

if.end.41:                                        ; preds = %lor.lhs.false.35
  %40 = load i32, i32* %k, align 4
  %cmp42 = icmp sgt i32 %40, 2
  br i1 %cmp42, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %if.end.41
  br label %do.body

do.body:                                          ; preds = %if.then.43
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.12, i32 0, i32 0), i32 7429)
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i32 0, i32 0))
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call46 = call i32 @fputc(i32 10, %struct._IO_FILE* %43)
  br label %do.end

do.end:                                           ; preds = %do.body
  %44 = load i32*, i32** %status.addr, align 8
  %45 = load i32, i32* %44, align 4
  %or47 = or i32 %45, 256
  store i32 %or47, i32* %44, align 4
  br label %nanresult

if.else:                                          ; preds = %if.end.41
  %46 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %call48 = call i32 @_mpd_cmp(%struct.mpd_t* @zero, %struct.mpd_t* %46)
  %cmp49 = icmp eq i32 %call48, 1
  br i1 %cmp49, label %if.then.50, label %if.else.53

if.then.50:                                       ; preds = %if.else
  %47 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %48 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %status51 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qadd_exact(%struct.mpd_t* %47, %struct.mpd_t* %48, %struct.mpd_t* %bb, %struct.mpd_context_t* %workctx, i32* %status51)
  %49 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %50 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %status52 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qadd_exact(%struct.mpd_t* %49, %struct.mpd_t* %50, %struct.mpd_t* @minus_one, %struct.mpd_context_t* %workctx, i32* %status52)
  br label %if.end.61

if.else.53:                                       ; preds = %if.else
  %51 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %call54 = call i32 @_mpd_cmp(%struct.mpd_t* %51, %struct.mpd_t* %bb)
  %cmp55 = icmp eq i32 %call54, -1
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %if.else.53
  br label %for.end

if.else.57:                                       ; preds = %if.else.53
  %52 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %53 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %status58 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qsub_exact(%struct.mpd_t* %52, %struct.mpd_t* %53, %struct.mpd_t* %bb, %struct.mpd_context_t* %workctx, i32* %status58)
  %54 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %55 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %status59 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  call void @_mpd_qadd_exact(%struct.mpd_t* %54, %struct.mpd_t* %55, %struct.mpd_t* @one, %struct.mpd_context_t* %workctx, i32* %status59)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.50
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61
  br label %for.inc

for.inc:                                          ; preds = %if.end.62
  %56 = load i32, i32* %k, align 4
  %inc = add i32 %56, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.56
  %57 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %cmp63 = icmp ne %struct.mpd_t* %57, %58
  br i1 %cmp63, label %if.then.64, label %if.end.69

if.then.64:                                       ; preds = %for.end
  %59 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %60 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %61 = load i32*, i32** %status.addr, align 8
  %call65 = call i32 @mpd_qcopy(%struct.mpd_t* %59, %struct.mpd_t* %60, i32* %61)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.then.64
  br label %nanresult

if.end.68:                                        ; preds = %if.then.64
  %62 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  call void @mpd_del(%struct.mpd_t* %62)
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %for.end
  %63 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %64 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %cmp70 = icmp ne %struct.mpd_t* %63, %64
  br i1 %cmp70, label %if.then.71, label %if.end.76

if.then.71:                                       ; preds = %if.end.69
  %65 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %66 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %67 = load i32*, i32** %status.addr, align 8
  %call72 = call i32 @mpd_qcopy(%struct.mpd_t* %65, %struct.mpd_t* %66, i32* %67)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.end.75, label %if.then.74

if.then.74:                                       ; preds = %if.then.71
  br label %nanresult

if.end.75:                                        ; preds = %if.then.71
  %68 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  call void @mpd_del(%struct.mpd_t* %68)
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.69
  %status77 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 4
  %69 = load i32, i32* %status77, align 4
  %and78 = and i32 %69, 958
  %70 = load i32*, i32** %status.addr, align 8
  %71 = load i32, i32* %70, align 4
  %or79 = or i32 %71, %and78
  store i32 %or79, i32* %70, align 4
  br label %return

nanresult:                                        ; preds = %if.then.74, %if.then.67, %do.end, %if.then.38, %if.then.23, %if.then.12, %if.then.4
  %72 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %tobool80 = icmp ne %struct.mpd_t* %72, null
  br i1 %tobool80, label %land.lhs.true, label %if.end.83

land.lhs.true:                                    ; preds = %nanresult
  %73 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  %74 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  %cmp81 = icmp ne %struct.mpd_t* %73, %74
  br i1 %cmp81, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %land.lhs.true
  %75 = load %struct.mpd_t*, %struct.mpd_t** %qq, align 8
  call void @mpd_del(%struct.mpd_t* %75)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %land.lhs.true, %nanresult
  %76 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %tobool84 = icmp ne %struct.mpd_t* %76, null
  br i1 %tobool84, label %land.lhs.true.85, label %if.end.88

land.lhs.true.85:                                 ; preds = %if.end.83
  %77 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  %78 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %cmp86 = icmp ne %struct.mpd_t* %77, %78
  br i1 %cmp86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %land.lhs.true.85
  %79 = load %struct.mpd_t*, %struct.mpd_t** %rr, align 8
  call void @mpd_del(%struct.mpd_t* %79)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %land.lhs.true.85, %if.end.83
  %80 = load %struct.mpd_t*, %struct.mpd_t** %q.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %80, i8 zeroext 0, i8 zeroext 4)
  %81 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  call void @mpd_setspecial(%struct.mpd_t* %81, i8 zeroext 0, i8 zeroext 4)
  br label %return

return:                                           ; preds = %if.end.88, %if.end.76
  ret void
}

declare hidden %struct.mpd_t* @mpd_qnew() #3

; Function Attrs: nounwind uwtable
define internal void @_mpd_qreciprocal(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %varcontext = alloca %struct.mpd_context_t, align 8
  %maxcontext = alloca %struct.mpd_context_t, align 8
  %z = alloca %struct.mpd_t*, align 8
  %v = alloca %struct.mpd_t*, align 8
  %vtmp = alloca %struct.mpd_t, align 8
  %s_data = alloca [64 x i64], align 16
  %s = alloca %struct.mpd_t, align 8
  %t_data = alloca [64 x i64], align 16
  %t = alloca %struct.mpd_t, align 8
  %two_data = alloca [1 x i64], align 8
  %two = alloca %struct.mpd_t, align 8
  %klist = alloca [64 x i64], align 16
  %adj = alloca i64, align 8
  %maxprec = alloca i64, align 8
  %initprec = alloca i64, align 8
  %sign = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %0, %struct.mpd_t** %z, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 0
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %1, i32 0, i32 0
  %2 = load i8, i8* %flags1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, -225
  %or = or i32 %and, 16
  %or2 = or i32 %or, 64
  %conv3 = trunc i32 %or2 to i8
  store i8 %conv3, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 1
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 1
  %4 = load i64, i64* %exp4, align 8
  store i64 %4, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 2
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 2
  %6 = load i64, i64* %digits5, align 8
  store i64 %6, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 3
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 3
  %8 = load i64, i64* %len6, align 8
  store i64 %8, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 4
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %alloc7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 4
  %10 = load i64, i64* %alloc7, align 8
  store i64 %10, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %vtmp, i32 0, i32 5
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 5
  %12 = load i64*, i64** %data8, align 8
  store i64* %12, i64** %data, align 8
  %flags9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 0
  store i8 48, i8* %flags9, align 1
  %exp10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 1
  store i64 0, i64* %exp10, align 8
  %digits11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 2
  store i64 0, i64* %digits11, align 8
  %len12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 3
  store i64 0, i64* %len12, align 8
  %alloc13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 4
  store i64 64, i64* %alloc13, align 8
  %data14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %s, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %s_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data14, align 8
  %flags15 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 0
  store i8 48, i8* %flags15, align 1
  %exp16 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 1
  store i64 0, i64* %exp16, align 8
  %digits17 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 2
  store i64 0, i64* %digits17, align 8
  %len18 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 3
  store i64 0, i64* %len18, align 8
  %alloc19 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 4
  store i64 64, i64* %alloc19, align 8
  %data20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 5
  %arraydecay21 = getelementptr inbounds [64 x i64], [64 x i64]* %t_data, i32 0, i32 0
  store i64* %arraydecay21, i64** %data20, align 8
  %13 = bitcast [1 x i64]* %two_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast ([1 x i64]* @_mpd_qreciprocal.two_data to i8*), i64 8, i32 8, i1 false)
  %flags22 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 0
  store i8 -112, i8* %flags22, align 1
  %exp23 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 1
  store i64 0, i64* %exp23, align 8
  %digits24 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 2
  store i64 1, i64* %digits24, align 8
  %len25 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 3
  store i64 1, i64* %len25, align 8
  %alloc26 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 4
  store i64 1, i64* %alloc26, align 8
  %data27 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 5
  %arraydecay28 = getelementptr inbounds [1 x i64], [1 x i64]* %two_data, i32 0, i32 0
  store i64* %arraydecay28, i64** %data27, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call zeroext i8 @mpd_sign(%struct.mpd_t* %14)
  store i8 %call, i8* %sign, align 1
  store %struct.mpd_t* %vtmp, %struct.mpd_t** %v, align 8
  %15 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %15)
  %16 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits29 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 2
  %17 = load i64, i64* %digits29, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp30 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %18, i32 0, i32 1
  %19 = load i64, i64* %exp30, align 8
  %add = add i64 %17, %19
  store i64 %add, i64* %adj, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits31 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %20, i32 0, i32 2
  %21 = load i64, i64* %digits31, align 8
  %sub = sub i64 0, %21
  %22 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %exp32 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %22, i32 0, i32 1
  store i64 %sub, i64* %exp32, align 8
  %23 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %24 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %25 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qreciprocal_approx(%struct.mpd_t* %23, %struct.mpd_t* %24, i32* %25)
  call void @mpd_maxcontext(%struct.mpd_context_t* %varcontext)
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxcontext)
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 6
  store i32 8, i32* %round, align 4
  %round33 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 6
  store i32 8, i32* %round33, align 4
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 1
  store i64 1000000000000000099, i64* %emax, align 8
  %emax34 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 1
  store i64 1000000000000000099, i64* %emax34, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 2
  store i64 -1000000000000000099, i64* %emin, align 8
  %emin35 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 2
  store i64 -1000000000000000099, i64* %emin35, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxcontext, i32 0, i32 0
  store i64 1000000000000000099, i64* %prec, align 8
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec36 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %26, i32 0, i32 0
  %27 = load i64, i64* %prec36, align 8
  store i64 %27, i64* %maxprec, align 8
  %28 = load i64, i64* %maxprec, align 8
  %add37 = add i64 %28, 2
  store i64 %add37, i64* %maxprec, align 8
  store i64 16, i64* %initprec, align 8
  %arraydecay38 = getelementptr inbounds [64 x i64], [64 x i64]* %klist, i32 0, i32 0
  %29 = load i64, i64* %maxprec, align 8
  %30 = load i64, i64* %initprec, align 8
  %call39 = call i32 @recpr_schedule_prec(i64* %arraydecay38, i64 %29, i64 %30)
  store i32 %call39, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %31 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %31, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %33 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %34 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %s, %struct.mpd_t* %32, %struct.mpd_t* %33, %struct.mpd_context_t* %maxcontext, i32* %34)
  %35 = load i32, i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx = getelementptr [64 x i64], [64 x i64]* %klist, i32 0, i64 %idxprom
  %36 = load i64, i64* %arrayidx, align 8
  %mul = mul i64 2, %36
  %add41 = add i64 %mul, 5
  %prec42 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  store i64 %add41, i64* %prec42, align 8
  %37 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %37, i32 0, i32 2
  %38 = load i64, i64* %digits43, align 8
  %prec44 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %39 = load i64, i64* %prec44, align 8
  %cmp45 = icmp sgt i64 %38, %39
  br i1 %cmp45, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %40 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %41 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %digits47 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %41, i32 0, i32 2
  %42 = load i64, i64* %digits47, align 8
  %prec48 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %43 = load i64, i64* %prec48, align 8
  %sub49 = sub i64 %42, %43
  %44 = load i32*, i32** %status.addr, align 8
  %call50 = call i64 @mpd_qshiftr(%struct.mpd_t* %t, %struct.mpd_t* %40, i64 %sub49, i32* %44)
  %prec51 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %varcontext, i32 0, i32 0
  %45 = load i64, i64* %prec51, align 8
  %sub52 = sub i64 0, %45
  %exp53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %t, i32 0, i32 1
  store i64 %sub52, i64* %exp53, align 8
  %46 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %t, %struct.mpd_t* %t, %struct.mpd_t* %s, %struct.mpd_context_t* %varcontext, i32* %46)
  br label %if.end

if.else:                                          ; preds = %for.body
  %47 = load %struct.mpd_t*, %struct.mpd_t** %v, align 8
  %48 = load i32*, i32** %status.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %t, %struct.mpd_t* %47, %struct.mpd_t* %s, %struct.mpd_context_t* %varcontext, i32* %48)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %49 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %50 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qmul_exact(%struct.mpd_t* %s, %struct.mpd_t* %49, %struct.mpd_t* %two, %struct.mpd_context_t* %maxcontext, i32* %50)
  %51 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %52 = load i32*, i32** %status.addr, align 8
  call void @_mpd_qsub_exact(%struct.mpd_t* %51, %struct.mpd_t* %s, %struct.mpd_t* %t, %struct.mpd_context_t* %maxcontext, i32* %52)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %53 = load i32, i32* %i, align 4
  %dec = add i32 %53, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %call54 = call i32 @mpd_isspecial(%struct.mpd_t* %54)
  %tobool = icmp ne i32 %call54, 0
  br i1 %tobool, label %if.end.58, label %if.then.55

if.then.55:                                       ; preds = %for.end
  %55 = load i64, i64* %adj, align 8
  %56 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %exp56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %56, i32 0, i32 1
  %57 = load i64, i64* %exp56, align 8
  %sub57 = sub i64 %57, %55
  store i64 %sub57, i64* %exp56, align 8
  %58 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %59 = load i8, i8* %sign, align 1
  call void @mpd_set_flags(%struct.mpd_t* %58, i8 zeroext %59)
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %for.end
  call void @mpd_del(%struct.mpd_t* %s)
  call void @mpd_del(%struct.mpd_t* %t)
  %60 = load %struct.mpd_t*, %struct.mpd_t** %z, align 8
  %61 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %62 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %60, %struct.mpd_context_t* %61, i32* %62)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qsub_exact(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %1 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %0, %struct.mpd_t* %1, %struct.mpd_t* %2, %struct.mpd_context_t* %3, i32* %workstatus)
  %4 = load i32, i32* %workstatus, align 4
  %5 = load i32*, i32** %status.addr, align 8
  %6 = load i32, i32* %5, align 4
  %or = or i32 %6, %4
  store i32 %or, i32* %5, align 4
  %7 = load i32, i32* %workstatus, align 4
  %and = and i32 %7, 4161
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare i32 @fputc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind uwtable
define internal void @_mpd_qreciprocal_approx(%struct.mpd_t* %z, %struct.mpd_t* %v, i32* %status) #0 {
entry:
  %z.addr = alloca %struct.mpd_t*, align 8
  %v.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %p10data = alloca [2 x i64], align 16
  %dummy = alloca i64, align 8
  %word = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mpd_t* %z, %struct.mpd_t** %z.addr, align 8
  store %struct.mpd_t* %v, %struct.mpd_t** %v.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %p10data, i64 0, i64 0
  store i64 0, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %0 = load i64, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 17), align 8
  store i64 %0, i64* %arrayinit.element
  %1 = load %struct.mpd_t*, %struct.mpd_t** %v.addr, align 8
  call void @_mpd_get_msdigits(i64* %dummy, i64* %word, %struct.mpd_t* %1, i32 19)
  %2 = load i64, i64* %word, align 8
  %call = call i32 @mpd_word_digits(i64 %2)
  store i32 %call, i32* %n, align 4
  %3 = load i32, i32* %n, align 4
  %sub = sub i32 19, %3
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %4 = load i64, i64* %arrayidx, align 8
  %5 = load i64, i64* %word, align 8
  %mul = mul i64 %5, %4
  store i64 %mul, i64* %word, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %7 = load i32*, i32** %status.addr, align 8
  %call1 = call i32 @mpd_qresize(%struct.mpd_t* %6, i64 2, i32* %7)
  %8 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %8, i32 0, i32 5
  %9 = load i64*, i64** %data, align 8
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %p10data, i32 0, i32 0
  %10 = load i64, i64* %word, align 8
  %call2 = call i64 @_mpd_shortdiv(i64* %9, i64* %arraydecay, i64 2, i64 %10)
  %11 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %12, i32 0, i32 1
  store i64 -17, i64* %exp, align 8
  %13 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %data3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 5
  %14 = load i64*, i64** %data3, align 8
  %arrayidx4 = getelementptr i64, i64* %14, i64 1
  %15 = load i64, i64* %arrayidx4, align 8
  %cmp = icmp eq i64 %15, 0
  %cond = select i1 %cmp, i32 1, i32 2
  %conv = sext i32 %cond to i64
  %16 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  store i64 %conv, i64* %len, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %17)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @recpr_schedule_prec(i64* %klist, i64 %maxprec, i64 %initprec) #2 {
entry:
  %retval = alloca i32, align 4
  %klist.addr = alloca i64*, align 8
  %maxprec.addr = alloca i64, align 8
  %initprec.addr = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i32, align 4
  store i64* %klist, i64** %klist.addr, align 8
  store i64 %maxprec, i64* %maxprec.addr, align 8
  store i64 %initprec, i64* %initprec.addr, align 8
  %0 = load i64, i64* %maxprec.addr, align 8
  %1 = load i64, i64* %initprec.addr, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  %2 = load i64, i64* %maxprec.addr, align 8
  store i64 %2, i64* %k, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %3 = load i64, i64* %k, align 8
  %add = add i64 %3, 1
  %div = sdiv i64 %add, 2
  store i64 %div, i64* %k, align 8
  %4 = load i64, i64* %k, align 8
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i64*, i64** %klist.addr, align 8
  %arrayidx = getelementptr i64, i64* %6, i64 %idxprom
  store i64 %4, i64* %arrayidx, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i64, i64* %k, align 8
  %8 = load i64, i64* %initprec.addr, align 8
  %cmp1 = icmp sgt i64 %7, %8
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %9, 1
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @_mpd_qexp_check_one(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %lim_data = alloca [1 x i64], align 8
  %lim = alloca %struct.mpd_t, align 8
  %aa = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = bitcast [1 x i64]* %lim_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @_mpd_qexp_check_one.lim_data to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 1
  %1 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %1, i32 0, i32 0
  %2 = load i64, i64* %prec, align 8
  %add = add i64 %2, 1
  %sub = sub i64 0, %add
  store i64 %sub, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %lim, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %lim_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 0
  %3 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %flags2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %3, i32 0, i32 0
  %4 = load i8, i8* %flags2, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, -225
  %or = or i32 %and, 16
  %or3 = or i32 %or, 64
  %conv4 = trunc i32 %or3 to i8
  store i8 %conv4, i8* %flags1, align 1
  %exp5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 1
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %exp6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %5, i32 0, i32 1
  %6 = load i64, i64* %exp6, align 8
  store i64 %6, i64* %exp5, align 8
  %digits7 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 2
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %digits8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %7, i32 0, i32 2
  %8 = load i64, i64* %digits8, align 8
  store i64 %8, i64* %digits7, align 8
  %len9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 3
  %9 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %len10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %9, i32 0, i32 3
  %10 = load i64, i64* %len10, align 8
  store i64 %10, i64* %len9, align 8
  %alloc11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 4
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %alloc12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %11, i32 0, i32 4
  %12 = load i64, i64* %alloc12, align 8
  store i64 %12, i64* %alloc11, align 8
  %data13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %aa, i32 0, i32 5
  %13 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %data14 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %13, i32 0, i32 5
  %14 = load i64*, i64** %data14, align 8
  store i64* %14, i64** %data13, align 8
  call void @mpd_set_positive(%struct.mpd_t* %aa)
  %call = call i32 @_mpd_cmp(%struct.mpd_t* %aa, %struct.mpd_t* %lim)
  %cmp = icmp sle i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  call void @_settriple(%struct.mpd_t* %15, i8 zeroext 0, i64 1, i64 0)
  %16 = load i32*, i32** %status.addr, align 8
  %17 = load i32, i32* %16, align 4
  %or16 = or i32 %17, 4160
  store i32 %or16, i32* %16, align 4
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @_mpd_get_exp_iterations(%struct.mpd_t* %r, i64 %p) #2 {
entry:
  %retval = alloca i64, align 8
  %r.addr = alloca %struct.mpd_t*, align 8
  %p.addr = alloca i64, align 8
  %log10pbyr = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct.mpd_t* %r, %struct.mpd_t** %r.addr, align 8
  store i64 %p, i64* %p.addr, align 8
  %0 = load i64, i64* %p.addr, align 8
  %cmp = icmp sgt i64 %0, 4503599627370496
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %p.addr, align 8
  %call = call i32 @mpd_word_digits(i64 %1)
  %sub = sub i32 %call, 1
  %conv = sext i32 %sub to i64
  %2 = load %struct.mpd_t*, %struct.mpd_t** %r.addr, align 8
  %call1 = call i64 @mpd_adjexp(%struct.mpd_t* %2)
  %add = add i64 %call1, 1
  %sub2 = sub i64 %conv, %add
  store i64 %sub2, i64* %log10pbyr, align 8
  %3 = load i64, i64* %p.addr, align 8
  %conv3 = sitofp i64 %3 to double
  %mul = fmul double 1.435030e+00, %conv3
  %sub4 = fsub double %mul, 1.182000e+00
  %4 = load i64, i64* %log10pbyr, align 8
  %conv5 = sitofp i64 %4 to double
  %div = fdiv double %sub4, %conv5
  %call6 = call double @ceil(double %div) #10
  %conv7 = fptosi double %call6 to i64
  store i64 %conv7, i64* %n, align 8
  %5 = load i64, i64* %n, align 8
  %cmp8 = icmp sge i64 %5, 3
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load i64, i64* %n, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ 3, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %7 = load i64, i64* %retval
  ret i64 %7
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_qpow_uint(%struct.mpd_t* %result, %struct.mpd_t* %base, i64 %exp, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %base.addr = alloca %struct.mpd_t*, align 8
  %exp.addr = alloca i64, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %base, %struct.mpd_t** %base.addr, align 8
  store i64 %exp, i64* %exp.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = load i64, i64* %exp.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load i8, i8* %resultsign.addr, align 1
  call void @_settriple(%struct.mpd_t* %1, i8 zeroext %2, i64 1, i64 0)
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %4 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %5 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %3, %struct.mpd_t* %4, i32* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.2, label %if.then.1

if.then.1:                                        ; preds = %if.end
  br label %return

if.end.2:                                         ; preds = %if.end
  %6 = load i64, i64* %exp.addr, align 8
  %call3 = call i32 @mpd_bsr(i64 %6)
  %idxprom = sext i32 %call3 to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_bits, i32 0, i64 %idxprom
  %7 = load i64, i64* %arrayidx, align 8
  store i64 %7, i64* %n, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.15, %if.end.2
  %8 = load i64, i64* %n, align 8
  %shr = lshr i64 %8, 1
  store i64 %shr, i64* %n, align 8
  %tobool4 = icmp ne i64 %shr, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %12 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %9, %struct.mpd_t* %10, %struct.mpd_t* %11, %struct.mpd_context_t* %12, i32* %workstatus)
  %13 = load i64, i64* %exp.addr, align 8
  %14 = load i64, i64* %n, align 8
  %and = and i64 %13, %14
  %tobool5 = icmp ne i64 %and, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %while.body
  %15 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %base.addr, align 8
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %15, %struct.mpd_t* %16, %struct.mpd_t* %17, %struct.mpd_context_t* %18, i32* %workstatus)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %while.body
  %19 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call8 = call i32 @mpd_isspecial(%struct.mpd_t* %19)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %20 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call10 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %20)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load i32, i32* %workstatus, align 4
  %and12 = and i32 %21, 1
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true, %if.end.7
  br label %while.end

if.end.15:                                        ; preds = %land.lhs.true, %lor.lhs.false
  br label %while.cond

while.end:                                        ; preds = %if.then.14, %while.cond
  %22 = load i32, i32* %workstatus, align 4
  %23 = load i32*, i32** %status.addr, align 8
  %24 = load i32, i32* %23, align 4
  %or = or i32 %24, %22
  store i32 %or, i32* %23, align 4
  %25 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %26 = load i8, i8* %resultsign.addr, align 1
  call void @mpd_set_sign(%struct.mpd_t* %25, i8 zeroext %26)
  br label %return

return:                                           ; preds = %while.end, %if.then.1, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare double @ceil(double) #7

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @mpd_bsr(i64 %a) #2 {
entry:
  %a.addr = alloca i64, align 8
  %retval1 = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = call i64 asm "bsrq $1, $0\0A\09", "=r,r,~{cc},~{dirflag},~{fpsr},~{flags}"(i64 %0) #10, !srcloc !3
  store i64 %1, i64* %retval1, align 8
  %2 = load i64, i64* %retval1, align 8
  %conv = trunc i64 %2 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal i32 @mpd_word_ispow10(i64 %word) #0 {
entry:
  %retval = alloca i32, align 4
  %word.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %call = call i32 @mpd_word_digits(i64 %0)
  store i32 %call, i32* %n, align 4
  %1 = load i64, i64* %word.addr, align 8
  %2 = load i32, i32* %n, align 4
  %sub = sub i32 %2, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal void @_mpd_qmul_inf(%struct.mpd_t* %result, %struct.mpd_t* %a, %struct.mpd_t* %b, i32* %status) #0 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %a.addr = alloca %struct.mpd_t*, align 8
  %b.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %a, %struct.mpd_t** %a.addr, align 8
  store %struct.mpd_t* %b, %struct.mpd_t** %b.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call1 = call i32 @mpd_iszero(%struct.mpd_t* %1)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %2 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %3 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %2, i32 256, i32* %3)
  br label %if.end

if.else:                                          ; preds = %if.then
  %4 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %5 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call4 = call zeroext i8 @mpd_sign(%struct.mpd_t* %5)
  %conv = zext i8 %call4 to i32
  %6 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call5 = call zeroext i8 @mpd_sign(%struct.mpd_t* %6)
  %conv6 = zext i8 %call5 to i32
  %xor = xor i32 %conv, %conv6
  %conv7 = trunc i32 %xor to i8
  call void @mpd_setspecial(%struct.mpd_t* %4, i8 zeroext %conv7, i8 zeroext 2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %if.end.19

if.end.8:                                         ; preds = %entry
  %7 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call9 = call i32 @mpd_iszero(%struct.mpd_t* %7)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.end.8
  %8 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %9 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %8, i32 256, i32* %9)
  br label %if.end.19

if.else.12:                                       ; preds = %if.end.8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %11 = load %struct.mpd_t*, %struct.mpd_t** %a.addr, align 8
  %call13 = call zeroext i8 @mpd_sign(%struct.mpd_t* %11)
  %conv14 = zext i8 %call13 to i32
  %12 = load %struct.mpd_t*, %struct.mpd_t** %b.addr, align 8
  %call15 = call zeroext i8 @mpd_sign(%struct.mpd_t* %12)
  %conv16 = zext i8 %call15 to i32
  %xor17 = xor i32 %conv14, %conv16
  %conv18 = trunc i32 %xor17 to i8
  call void @mpd_setspecial(%struct.mpd_t* %10, i8 zeroext %conv18, i8 zeroext 2)
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %if.else.12, %if.then.11
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_singlemul(i64* %w, i64 %u, i64 %v) #2 {
entry:
  %w.addr = alloca i64*, align 8
  %u.addr = alloca i64, align 8
  %v.addr = alloca i64, align 8
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  store i64* %w, i64** %w.addr, align 8
  store i64 %u, i64* %u.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  %0 = load i64, i64* %u.addr, align 8
  %1 = load i64, i64* %v.addr, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %0, i64 %1)
  %2 = load i64*, i64** %w.addr, align 8
  %arrayidx = getelementptr i64, i64* %2, i64 1
  %3 = load i64*, i64** %w.addr, align 8
  %arrayidx1 = getelementptr i64, i64* %3, i64 0
  %4 = load i64, i64* %hi, align 8
  %5 = load i64, i64* %lo, align 8
  call void @_mpd_div_words_r(i64* %arrayidx, i64* %arrayidx1, i64 %4, i64 %5)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_mul_2_le2(i64* %w, i64* %u, i64* %v, i64 %m) #2 {
entry:
  %w.addr = alloca i64*, align 8
  %u.addr = alloca i64*, align 8
  %v.addr = alloca i64*, align 8
  %m.addr = alloca i64, align 8
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  store i64* %w, i64** %w.addr, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64* %v, i64** %v.addr, align 8
  store i64 %m, i64* %m.addr, align 8
  %0 = load i64*, i64** %u.addr, align 8
  %arrayidx = getelementptr i64, i64* %0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  %2 = load i64*, i64** %v.addr, align 8
  %arrayidx1 = getelementptr i64, i64* %2, i64 0
  %3 = load i64, i64* %arrayidx1, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %1, i64 %3)
  %4 = load i64*, i64** %w.addr, align 8
  %arrayidx2 = getelementptr i64, i64* %4, i64 1
  %5 = load i64*, i64** %w.addr, align 8
  %arrayidx3 = getelementptr i64, i64* %5, i64 0
  %6 = load i64, i64* %hi, align 8
  %7 = load i64, i64* %lo, align 8
  call void @_mpd_div_words_r(i64* %arrayidx2, i64* %arrayidx3, i64 %6, i64 %7)
  %8 = load i64*, i64** %u.addr, align 8
  %arrayidx4 = getelementptr i64, i64* %8, i64 1
  %9 = load i64, i64* %arrayidx4, align 8
  %10 = load i64*, i64** %v.addr, align 8
  %arrayidx5 = getelementptr i64, i64* %10, i64 0
  %11 = load i64, i64* %arrayidx5, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %9, i64 %11)
  %12 = load i64*, i64** %w.addr, align 8
  %arrayidx6 = getelementptr i64, i64* %12, i64 1
  %13 = load i64, i64* %arrayidx6, align 8
  %14 = load i64, i64* %lo, align 8
  %add = add i64 %13, %14
  store i64 %add, i64* %lo, align 8
  %15 = load i64, i64* %lo, align 8
  %16 = load i64*, i64** %w.addr, align 8
  %arrayidx7 = getelementptr i64, i64* %16, i64 1
  %17 = load i64, i64* %arrayidx7, align 8
  %cmp = icmp ult i64 %15, %17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load i64, i64* %hi, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %hi, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load i64*, i64** %w.addr, align 8
  %arrayidx8 = getelementptr i64, i64* %19, i64 2
  %20 = load i64*, i64** %w.addr, align 8
  %arrayidx9 = getelementptr i64, i64* %20, i64 1
  %21 = load i64, i64* %hi, align 8
  %22 = load i64, i64* %lo, align 8
  call void @_mpd_div_words_r(i64* %arrayidx8, i64* %arrayidx9, i64 %21, i64 %22)
  %23 = load i64, i64* %m.addr, align 8
  %cmp10 = icmp eq i64 %23, 1
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end
  br label %return

if.end.12:                                        ; preds = %if.end
  %24 = load i64*, i64** %u.addr, align 8
  %arrayidx13 = getelementptr i64, i64* %24, i64 0
  %25 = load i64, i64* %arrayidx13, align 8
  %26 = load i64*, i64** %v.addr, align 8
  %arrayidx14 = getelementptr i64, i64* %26, i64 1
  %27 = load i64, i64* %arrayidx14, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %25, i64 %27)
  %28 = load i64*, i64** %w.addr, align 8
  %arrayidx15 = getelementptr i64, i64* %28, i64 1
  %29 = load i64, i64* %arrayidx15, align 8
  %30 = load i64, i64* %lo, align 8
  %add16 = add i64 %29, %30
  store i64 %add16, i64* %lo, align 8
  %31 = load i64, i64* %lo, align 8
  %32 = load i64*, i64** %w.addr, align 8
  %arrayidx17 = getelementptr i64, i64* %32, i64 1
  %33 = load i64, i64* %arrayidx17, align 8
  %cmp18 = icmp ult i64 %31, %33
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.12
  %34 = load i64, i64* %hi, align 8
  %inc20 = add i64 %34, 1
  store i64 %inc20, i64* %hi, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.12
  %35 = load i64*, i64** %w.addr, align 8
  %arrayidx22 = getelementptr i64, i64* %35, i64 3
  %36 = load i64*, i64** %w.addr, align 8
  %arrayidx23 = getelementptr i64, i64* %36, i64 1
  %37 = load i64, i64* %hi, align 8
  %38 = load i64, i64* %lo, align 8
  call void @_mpd_div_words_r(i64* %arrayidx22, i64* %arrayidx23, i64 %37, i64 %38)
  %39 = load i64*, i64** %u.addr, align 8
  %arrayidx24 = getelementptr i64, i64* %39, i64 1
  %40 = load i64, i64* %arrayidx24, align 8
  %41 = load i64*, i64** %v.addr, align 8
  %arrayidx25 = getelementptr i64, i64* %41, i64 1
  %42 = load i64, i64* %arrayidx25, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %40, i64 %42)
  %43 = load i64*, i64** %w.addr, align 8
  %arrayidx26 = getelementptr i64, i64* %43, i64 2
  %44 = load i64, i64* %arrayidx26, align 8
  %45 = load i64, i64* %lo, align 8
  %add27 = add i64 %44, %45
  store i64 %add27, i64* %lo, align 8
  %46 = load i64, i64* %lo, align 8
  %47 = load i64*, i64** %w.addr, align 8
  %arrayidx28 = getelementptr i64, i64* %47, i64 2
  %48 = load i64, i64* %arrayidx28, align 8
  %cmp29 = icmp ult i64 %46, %48
  br i1 %cmp29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.21
  %49 = load i64, i64* %hi, align 8
  %inc31 = add i64 %49, 1
  store i64 %inc31, i64* %hi, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %if.end.21
  %50 = load i64*, i64** %w.addr, align 8
  %arrayidx33 = getelementptr i64, i64* %50, i64 3
  %51 = load i64, i64* %arrayidx33, align 8
  %52 = load i64, i64* %lo, align 8
  %add34 = add i64 %51, %52
  store i64 %add34, i64* %lo, align 8
  %53 = load i64, i64* %lo, align 8
  %54 = load i64*, i64** %w.addr, align 8
  %arrayidx35 = getelementptr i64, i64* %54, i64 3
  %55 = load i64, i64* %arrayidx35, align 8
  %cmp36 = icmp ult i64 %53, %55
  br i1 %cmp36, label %if.then.37, label %if.end.39

if.then.37:                                       ; preds = %if.end.32
  %56 = load i64, i64* %hi, align 8
  %inc38 = add i64 %56, 1
  store i64 %inc38, i64* %hi, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.37, %if.end.32
  %57 = load i64*, i64** %w.addr, align 8
  %arrayidx40 = getelementptr i64, i64* %57, i64 3
  %58 = load i64*, i64** %w.addr, align 8
  %arrayidx41 = getelementptr i64, i64* %58, i64 2
  %59 = load i64, i64* %hi, align 8
  %60 = load i64, i64* %lo, align 8
  call void @_mpd_div_words_r(i64* %arrayidx40, i64* %arrayidx41, i64 %59, i64 %60)
  br label %return

return:                                           ; preds = %if.end.39, %if.then.11
  ret void
}

declare hidden void @_mpd_shortmul(i64*, i64*, i64, i64) #3

declare hidden void @_mpd_basemul(i64*, i64*, i64*, i64, i64) #3

declare hidden i8* @mpd_calloc(i64, i64) #3

; Function Attrs: nounwind uwtable
define internal i64* @_mpd_kmul(i64* %u, i64* %v, i64 %ulen, i64 %vlen, i64* %rsize) #0 {
entry:
  %retval = alloca i64*, align 8
  %u.addr = alloca i64*, align 8
  %v.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %vlen.addr = alloca i64, align 8
  %rsize.addr = alloca i64*, align 8
  %result = alloca i64*, align 8
  %w = alloca i64*, align 8
  %m = alloca i64, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64* %v, i64** %v.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 %vlen, i64* %vlen.addr, align 8
  store i64* %rsize, i64** %rsize.addr, align 8
  store i64* null, i64** %result, align 8
  store i64* null, i64** %w, align 8
  %0 = load i64, i64* %ulen.addr, align 8
  %1 = load i64, i64* %vlen.addr, align 8
  %call = call i64 @_kmul_resultsize(i64 %0, i64 %1)
  %2 = load i64*, i64** %rsize.addr, align 8
  store i64 %call, i64* %2, align 8
  %3 = load i64*, i64** %rsize.addr, align 8
  %4 = load i64, i64* %3, align 8
  %call1 = call i8* @mpd_calloc(i64 %4, i64 8)
  %5 = bitcast i8* %call1 to i64*
  store i64* %5, i64** %result, align 8
  %cmp = icmp eq i64* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64* null, i64** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %ulen.addr, align 8
  %call2 = call i64 @_kmul_worksize(i64 %6, i64 16)
  store i64 %call2, i64* %m, align 8
  %7 = load i64, i64* %m, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, i64* %m, align 8
  %call3 = call i8* @mpd_calloc(i64 %8, i64 8)
  %9 = bitcast i8* %call3 to i64*
  store i64* %9, i64** %w, align 8
  %cmp4 = icmp eq i64* %9, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %11 = load i64*, i64** %result, align 8
  %12 = bitcast i64* %11 to i8*
  call void %10(i8* %12)
  store i64* null, i64** %retval
  br label %return

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load i64*, i64** %result, align 8
  %14 = load i64*, i64** %u.addr, align 8
  %15 = load i64*, i64** %v.addr, align 8
  %16 = load i64*, i64** %w, align 8
  %17 = load i64, i64* %ulen.addr, align 8
  %18 = load i64, i64* %vlen.addr, align 8
  call void @_karatsuba_rec(i64* %13, i64* %14, i64* %15, i64* %16, i64 %17, i64 %18)
  %19 = load i64*, i64** %w, align 8
  %tobool7 = icmp ne i64* %19, null
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  %20 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %21 = load i64*, i64** %w, align 8
  %22 = bitcast i64* %21 to i8*
  call void %20(i8* %22)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end.6
  %23 = load i64*, i64** %result, align 8
  store i64* %23, i64** %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.5, %if.then
  %24 = load i64*, i64** %retval
  ret i64* %24
}

; Function Attrs: nounwind uwtable
define internal i64* @_mpd_fntmul(i64* %u, i64* %v, i64 %ulen, i64 %vlen, i64* %rsize) #0 {
entry:
  %u.addr = alloca i64*, align 8
  %v.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %vlen.addr = alloca i64, align 8
  %rsize.addr = alloca i64*, align 8
  %c1 = alloca i64*, align 8
  %c2 = alloca i64*, align 8
  %c3 = alloca i64*, align 8
  %vtmp = alloca i64*, align 8
  %n = alloca i64, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64* %v, i64** %v.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 %vlen, i64* %vlen.addr, align 8
  store i64* %rsize, i64** %rsize.addr, align 8
  store i64* null, i64** %c1, align 8
  store i64* null, i64** %c2, align 8
  store i64* null, i64** %c3, align 8
  store i64* null, i64** %vtmp, align 8
  %0 = load i64, i64* %ulen.addr, align 8
  %1 = load i64, i64* %vlen.addr, align 8
  %call = call i64 @add_size_t(i64 %0, i64 %1)
  %2 = load i64*, i64** %rsize.addr, align 8
  store i64 %call, i64* %2, align 8
  %3 = load i64*, i64** %rsize.addr, align 8
  %4 = load i64, i64* %3, align 8
  %call1 = call i64 @_mpd_get_transform_len(i64 %4)
  store i64 %call1, i64* %n, align 8
  %cmp = icmp eq i64 %call1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %malloc_error

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %n, align 8
  %call2 = call i8* @mpd_calloc(i64 %5, i64 8)
  %6 = bitcast i8* %call2 to i64*
  store i64* %6, i64** %c1, align 8
  %cmp3 = icmp eq i64* %6, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  br label %malloc_error

if.end.5:                                         ; preds = %if.end
  %7 = load i64, i64* %n, align 8
  %call6 = call i8* @mpd_calloc(i64 %7, i64 8)
  %8 = bitcast i8* %call6 to i64*
  store i64* %8, i64** %c2, align 8
  %cmp7 = icmp eq i64* %8, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  br label %malloc_error

if.end.9:                                         ; preds = %if.end.5
  %9 = load i64, i64* %n, align 8
  %call10 = call i8* @mpd_calloc(i64 %9, i64 8)
  %10 = bitcast i8* %call10 to i64*
  store i64* %10, i64** %c3, align 8
  %cmp11 = icmp eq i64* %10, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %malloc_error

if.end.13:                                        ; preds = %if.end.9
  %11 = load i64*, i64** %c1, align 8
  %12 = bitcast i64* %11 to i8*
  %13 = load i64*, i64** %u.addr, align 8
  %14 = bitcast i64* %13 to i8*
  %15 = load i64, i64* %ulen.addr, align 8
  %mul = mul i64 %15, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %14, i64 %mul, i32 8, i1 false)
  %16 = load i64*, i64** %c2, align 8
  %17 = bitcast i64* %16 to i8*
  %18 = load i64*, i64** %u.addr, align 8
  %19 = bitcast i64* %18 to i8*
  %20 = load i64, i64* %ulen.addr, align 8
  %mul14 = mul i64 %20, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %19, i64 %mul14, i32 8, i1 false)
  %21 = load i64*, i64** %c3, align 8
  %22 = bitcast i64* %21 to i8*
  %23 = load i64*, i64** %u.addr, align 8
  %24 = bitcast i64* %23 to i8*
  %25 = load i64, i64* %ulen.addr, align 8
  %mul15 = mul i64 %25, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %24, i64 %mul15, i32 8, i1 false)
  %26 = load i64*, i64** %u.addr, align 8
  %27 = load i64*, i64** %v.addr, align 8
  %cmp16 = icmp eq i64* %26, %27
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.13
  %28 = load i64*, i64** %c1, align 8
  %29 = load i64, i64* %n, align 8
  %call18 = call i32 @fnt_autoconvolute(i64* %28, i64 %29, i32 0)
  %tobool = icmp ne i32 %call18, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.24

lor.lhs.false:                                    ; preds = %if.then.17
  %30 = load i64*, i64** %c2, align 8
  %31 = load i64, i64* %n, align 8
  %call19 = call i32 @fnt_autoconvolute(i64* %30, i64 %31, i32 1)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %lor.lhs.false.21, label %if.then.24

lor.lhs.false.21:                                 ; preds = %lor.lhs.false
  %32 = load i64*, i64** %c3, align 8
  %33 = load i64, i64* %n, align 8
  %call22 = call i32 @fnt_autoconvolute(i64* %32, i64 %33, i32 2)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %lor.lhs.false.21, %lor.lhs.false, %if.then.17
  br label %malloc_error

if.end.25:                                        ; preds = %lor.lhs.false.21
  br label %if.end.47

if.else:                                          ; preds = %if.end.13
  %34 = load i64, i64* %n, align 8
  %call26 = call i8* @mpd_calloc(i64 %34, i64 8)
  %35 = bitcast i8* %call26 to i64*
  store i64* %35, i64** %vtmp, align 8
  %cmp27 = icmp eq i64* %35, null
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.else
  br label %malloc_error

if.end.29:                                        ; preds = %if.else
  %36 = load i64*, i64** %vtmp, align 8
  %37 = bitcast i64* %36 to i8*
  %38 = load i64*, i64** %v.addr, align 8
  %39 = bitcast i64* %38 to i8*
  %40 = load i64, i64* %vlen.addr, align 8
  %mul30 = mul i64 %40, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %39, i64 %mul30, i32 8, i1 false)
  %41 = load i64*, i64** %c1, align 8
  %42 = load i64*, i64** %vtmp, align 8
  %43 = load i64, i64* %n, align 8
  %call31 = call i32 @fnt_convolute(i64* %41, i64* %42, i64 %43, i32 0)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.29
  %44 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %45 = load i64*, i64** %vtmp, align 8
  %46 = bitcast i64* %45 to i8*
  call void %44(i8* %46)
  br label %malloc_error

if.end.34:                                        ; preds = %if.end.29
  %47 = load i64*, i64** %vtmp, align 8
  %48 = bitcast i64* %47 to i8*
  %49 = load i64*, i64** %v.addr, align 8
  %50 = bitcast i64* %49 to i8*
  %51 = load i64, i64* %vlen.addr, align 8
  %mul35 = mul i64 %51, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %50, i64 %mul35, i32 8, i1 false)
  %52 = load i64*, i64** %vtmp, align 8
  %53 = load i64, i64* %vlen.addr, align 8
  %add.ptr = getelementptr i64, i64* %52, i64 %53
  %54 = load i64, i64* %n, align 8
  %55 = load i64, i64* %vlen.addr, align 8
  %sub = sub i64 %54, %55
  call void @mpd_uint_zero(i64* %add.ptr, i64 %sub)
  %56 = load i64*, i64** %c2, align 8
  %57 = load i64*, i64** %vtmp, align 8
  %58 = load i64, i64* %n, align 8
  %call36 = call i32 @fnt_convolute(i64* %56, i64* %57, i64 %58, i32 1)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end.39, label %if.then.38

if.then.38:                                       ; preds = %if.end.34
  %59 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %60 = load i64*, i64** %vtmp, align 8
  %61 = bitcast i64* %60 to i8*
  call void %59(i8* %61)
  br label %malloc_error

if.end.39:                                        ; preds = %if.end.34
  %62 = load i64*, i64** %vtmp, align 8
  %63 = bitcast i64* %62 to i8*
  %64 = load i64*, i64** %v.addr, align 8
  %65 = bitcast i64* %64 to i8*
  %66 = load i64, i64* %vlen.addr, align 8
  %mul40 = mul i64 %66, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %65, i64 %mul40, i32 8, i1 false)
  %67 = load i64*, i64** %vtmp, align 8
  %68 = load i64, i64* %vlen.addr, align 8
  %add.ptr41 = getelementptr i64, i64* %67, i64 %68
  %69 = load i64, i64* %n, align 8
  %70 = load i64, i64* %vlen.addr, align 8
  %sub42 = sub i64 %69, %70
  call void @mpd_uint_zero(i64* %add.ptr41, i64 %sub42)
  %71 = load i64*, i64** %c3, align 8
  %72 = load i64*, i64** %vtmp, align 8
  %73 = load i64, i64* %n, align 8
  %call43 = call i32 @fnt_convolute(i64* %71, i64* %72, i64 %73, i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end.46, label %if.then.45

if.then.45:                                       ; preds = %if.end.39
  %74 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %75 = load i64*, i64** %vtmp, align 8
  %76 = bitcast i64* %75 to i8*
  call void %74(i8* %76)
  br label %malloc_error

if.end.46:                                        ; preds = %if.end.39
  %77 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %78 = load i64*, i64** %vtmp, align 8
  %79 = bitcast i64* %78 to i8*
  call void %77(i8* %79)
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.end.25
  %80 = load i64*, i64** %c1, align 8
  %81 = load i64*, i64** %c2, align 8
  %82 = load i64*, i64** %c3, align 8
  %83 = load i64*, i64** %rsize.addr, align 8
  %84 = load i64, i64* %83, align 8
  call void @crt3(i64* %80, i64* %81, i64* %82, i64 %84)
  br label %out

out:                                              ; preds = %if.end.56, %if.end.47
  %85 = load i64*, i64** %c2, align 8
  %tobool48 = icmp ne i64* %85, null
  br i1 %tobool48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %out
  %86 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %87 = load i64*, i64** %c2, align 8
  %88 = bitcast i64* %87 to i8*
  call void %86(i8* %88)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %out
  %89 = load i64*, i64** %c3, align 8
  %tobool51 = icmp ne i64* %89, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.50
  %90 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %91 = load i64*, i64** %c3, align 8
  %92 = bitcast i64* %91 to i8*
  call void %90(i8* %92)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.50
  %93 = load i64*, i64** %c1, align 8
  ret i64* %93

malloc_error:                                     ; preds = %if.then.45, %if.then.38, %if.then.33, %if.then.28, %if.then.24, %if.then.12, %if.then.8, %if.then.4, %if.then
  %94 = load i64*, i64** %c1, align 8
  %tobool54 = icmp ne i64* %94, null
  br i1 %tobool54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %malloc_error
  %95 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %96 = load i64*, i64** %c1, align 8
  %97 = bitcast i64* %96 to i8*
  call void %95(i8* %97)
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %malloc_error
  store i64* null, i64** %c1, align 8
  br label %out
}

; Function Attrs: nounwind uwtable
define internal i64* @_mpd_kmul_fnt(i64* %u, i64* %v, i64 %ulen, i64 %vlen, i64* %rsize) #0 {
entry:
  %retval = alloca i64*, align 8
  %u.addr = alloca i64*, align 8
  %v.addr = alloca i64*, align 8
  %ulen.addr = alloca i64, align 8
  %vlen.addr = alloca i64, align 8
  %rsize.addr = alloca i64*, align 8
  %result = alloca i64*, align 8
  %w = alloca i64*, align 8
  %m = alloca i64, align 8
  store i64* %u, i64** %u.addr, align 8
  store i64* %v, i64** %v.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  store i64 %vlen, i64* %vlen.addr, align 8
  store i64* %rsize, i64** %rsize.addr, align 8
  store i64* null, i64** %result, align 8
  store i64* null, i64** %w, align 8
  %0 = load i64, i64* %ulen.addr, align 8
  %1 = load i64, i64* %vlen.addr, align 8
  %call = call i64 @_kmul_resultsize(i64 %0, i64 %1)
  %2 = load i64*, i64** %rsize.addr, align 8
  store i64 %call, i64* %2, align 8
  %3 = load i64*, i64** %rsize.addr, align 8
  %4 = load i64, i64* %3, align 8
  %call1 = call i8* @mpd_calloc(i64 %4, i64 8)
  %5 = bitcast i8* %call1 to i64*
  store i64* %5, i64** %result, align 8
  %cmp = icmp eq i64* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64* null, i64** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %ulen.addr, align 8
  %call2 = call i64 @_kmul_worksize(i64 %6, i64 6442450944)
  store i64 %call2, i64* %m, align 8
  %7 = load i64, i64* %m, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, i64* %m, align 8
  %call3 = call i8* @mpd_calloc(i64 %8, i64 8)
  %9 = bitcast i8* %call3 to i64*
  store i64* %9, i64** %w, align 8
  %cmp4 = icmp eq i64* %9, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %11 = load i64*, i64** %result, align 8
  %12 = bitcast i64* %11 to i8*
  call void %10(i8* %12)
  store i64* null, i64** %retval
  br label %return

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load i64*, i64** %result, align 8
  %14 = load i64*, i64** %u.addr, align 8
  %15 = load i64*, i64** %v.addr, align 8
  %16 = load i64*, i64** %w, align 8
  %17 = load i64, i64* %ulen.addr, align 8
  %18 = load i64, i64* %vlen.addr, align 8
  %call7 = call i32 @_karatsuba_rec_fnt(i64* %13, i64* %14, i64* %15, i64* %16, i64 %17, i64 %18)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  %19 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %20 = load i64*, i64** %result, align 8
  %21 = bitcast i64* %20 to i8*
  call void %19(i8* %21)
  store i64* null, i64** %result, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.6
  %22 = load i64*, i64** %w, align 8
  %tobool11 = icmp ne i64* %22, null
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  %23 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %24 = load i64*, i64** %w, align 8
  %25 = bitcast i64* %24 to i8*
  call void %23(i8* %25)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %26 = load i64*, i64** %result, align 8
  store i64* %26, i64** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.5, %if.then
  %27 = load i64*, i64** %retval
  ret i64* %27
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_div_words_r(i64* %q, i64* %r, i64 %hi, i64 %lo) #2 {
entry:
  %q.addr = alloca i64*, align 8
  %r.addr = alloca i64*, align 8
  %hi.addr = alloca i64, align 8
  %lo.addr = alloca i64, align 8
  %n_adj = alloca i64, align 8
  %h = alloca i64, align 8
  %l = alloca i64, align 8
  %t = alloca i64, align 8
  %n1_neg = alloca i64, align 8
  store i64* %q, i64** %q.addr, align 8
  store i64* %r, i64** %r.addr, align 8
  store i64 %hi, i64* %hi.addr, align 8
  store i64 %lo, i64* %lo.addr, align 8
  %0 = load i64, i64* %lo.addr, align 8
  %and = and i64 %0, -9223372036854775808
  %tobool = icmp ne i64 %and, 0
  %cond = select i1 %tobool, i64 -1, i64 0
  store i64 %cond, i64* %n1_neg, align 8
  %1 = load i64, i64* %lo.addr, align 8
  %2 = load i64, i64* %n1_neg, align 8
  %and1 = and i64 %2, -8446744073709551616
  %add = add i64 %1, %and1
  store i64 %add, i64* %n_adj, align 8
  %3 = load i64, i64* @mprime_rdx, align 8
  %4 = load i64, i64* %hi.addr, align 8
  %5 = load i64, i64* %n1_neg, align 8
  %sub = sub i64 %4, %5
  call void @_mpd_mul_words(i64* %h, i64* %l, i64 %3, i64 %sub)
  %6 = load i64, i64* %l, align 8
  %7 = load i64, i64* %n_adj, align 8
  %add2 = add i64 %6, %7
  store i64 %add2, i64* %l, align 8
  %8 = load i64, i64* %l, align 8
  %9 = load i64, i64* %n_adj, align 8
  %cmp = icmp ult i64 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %h, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %h, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i64, i64* %h, align 8
  %12 = load i64, i64* %hi.addr, align 8
  %add3 = add i64 %11, %12
  store i64 %add3, i64* %t, align 8
  %13 = load i64, i64* %t, align 8
  %sub4 = sub i64 -1, %13
  store i64 %sub4, i64* %t, align 8
  %14 = load i64, i64* %t, align 8
  call void @_mpd_mul_words(i64* %h, i64* %l, i64 %14, i64 -8446744073709551616)
  %15 = load i64, i64* %l, align 8
  %16 = load i64, i64* %lo.addr, align 8
  %add5 = add i64 %15, %16
  store i64 %add5, i64* %l, align 8
  %17 = load i64, i64* %l, align 8
  %18 = load i64, i64* %lo.addr, align 8
  %cmp6 = icmp ult i64 %17, %18
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.end
  %19 = load i64, i64* %h, align 8
  %inc8 = add i64 %19, 1
  store i64 %inc8, i64* %h, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %if.end
  %20 = load i64, i64* %hi.addr, align 8
  %21 = load i64, i64* %h, align 8
  %add10 = add i64 %21, %20
  store i64 %add10, i64* %h, align 8
  %22 = load i64, i64* %h, align 8
  %sub11 = sub i64 %22, -8446744073709551616
  store i64 %sub11, i64* %h, align 8
  %23 = load i64, i64* %h, align 8
  %24 = load i64, i64* %t, align 8
  %sub12 = sub i64 %23, %24
  %25 = load i64*, i64** %q.addr, align 8
  store i64 %sub12, i64* %25, align 8
  %26 = load i64, i64* %l, align 8
  %27 = load i64, i64* %h, align 8
  %and13 = and i64 -8446744073709551616, %27
  %add14 = add i64 %26, %and13
  %28 = load i64*, i64** %r.addr, align 8
  store i64 %add14, i64* %28, align 8
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @_kmul_resultsize(i64 %la, i64 %lb) #2 {
entry:
  %la.addr = alloca i64, align 8
  %lb.addr = alloca i64, align 8
  %n = alloca i64, align 8
  %m = alloca i64, align 8
  store i64 %la, i64* %la.addr, align 8
  store i64 %lb, i64* %lb.addr, align 8
  %0 = load i64, i64* %la.addr, align 8
  %1 = load i64, i64* %lb.addr, align 8
  %call = call i64 @add_size_t(i64 %0, i64 %1)
  store i64 %call, i64* %n, align 8
  %2 = load i64, i64* %n, align 8
  %call1 = call i64 @add_size_t(i64 %2, i64 1)
  store i64 %call1, i64* %n, align 8
  %3 = load i64, i64* %la.addr, align 8
  %add = add i64 %3, 1
  %div = udiv i64 %add, 2
  %add2 = add i64 %div, 1
  store i64 %add2, i64* %m, align 8
  %4 = load i64, i64* %m, align 8
  %call3 = call i64 @mul_size_t(i64 %4, i64 3)
  store i64 %call3, i64* %m, align 8
  %5 = load i64, i64* %m, align 8
  %6 = load i64, i64* %n, align 8
  %cmp = icmp ugt i64 %5, %6
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load i64, i64* %m, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i64, i64* %n, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @_kmul_worksize(i64 %n, i64 %lim) #2 {
entry:
  %retval = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  %m = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %0 = load i64, i64* %n.addr, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %cmp = icmp ule i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8
  %add = add i64 %2, 1
  %div = udiv i64 %add, 2
  %add1 = add i64 %div, 1
  store i64 %add1, i64* %m, align 8
  %3 = load i64, i64* %m, align 8
  %call = call i64 @mul_size_t(i64 %3, i64 2)
  %4 = load i64, i64* %m, align 8
  %5 = load i64, i64* %lim.addr, align 8
  %call2 = call i64 @_kmul_worksize(i64 %4, i64 %5)
  %call3 = call i64 @add_size_t(i64 %call, i64 %call2)
  store i64 %call3, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define internal void @_karatsuba_rec(i64* %c, i64* %a, i64* %b, i64* %w, i64 %la, i64 %lb) #0 {
entry:
  %c.addr = alloca i64*, align 8
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  %w.addr = alloca i64*, align 8
  %la.addr = alloca i64, align 8
  %lb.addr = alloca i64, align 8
  %m = alloca i64, align 8
  %lt = alloca i64, align 8
  store i64* %c, i64** %c.addr, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  store i64* %w, i64** %w.addr, align 8
  store i64 %la, i64* %la.addr, align 8
  store i64 %lb, i64* %lb.addr, align 8
  %0 = load i64, i64* %la.addr, align 8
  %cmp = icmp ule i64 %0, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %c.addr, align 8
  %2 = load i64*, i64** %a.addr, align 8
  %3 = load i64*, i64** %b.addr, align 8
  %4 = load i64, i64* %la.addr, align 8
  %5 = load i64, i64* %lb.addr, align 8
  call void @_mpd_basemul(i64* %1, i64* %2, i64* %3, i64 %4, i64 %5)
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %la.addr, align 8
  %add = add i64 %6, 1
  %div = udiv i64 %add, 2
  store i64 %div, i64* %m, align 8
  %7 = load i64, i64* %lb.addr, align 8
  %8 = load i64, i64* %m, align 8
  %cmp1 = icmp ule i64 %7, %8
  br i1 %cmp1, label %if.then.2, label %if.end.24

if.then.2:                                        ; preds = %if.end
  %9 = load i64, i64* %lb.addr, align 8
  %10 = load i64, i64* %la.addr, align 8
  %11 = load i64, i64* %m, align 8
  %sub = sub i64 %10, %11
  %cmp3 = icmp ugt i64 %9, %sub
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then.2
  %12 = load i64, i64* %lb.addr, align 8
  %13 = load i64, i64* %lb.addr, align 8
  %add5 = add i64 %12, %13
  %add6 = add i64 %add5, 1
  store i64 %add6, i64* %lt, align 8
  %14 = load i64*, i64** %w.addr, align 8
  %15 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %14, i64 %15)
  %16 = load i64*, i64** %w.addr, align 8
  %17 = load i64*, i64** %b.addr, align 8
  %18 = load i64*, i64** %a.addr, align 8
  %19 = load i64, i64* %m, align 8
  %add.ptr = getelementptr i64, i64* %18, i64 %19
  %20 = load i64*, i64** %w.addr, align 8
  %21 = load i64, i64* %lt, align 8
  %add.ptr7 = getelementptr i64, i64* %20, i64 %21
  %22 = load i64, i64* %lb.addr, align 8
  %23 = load i64, i64* %la.addr, align 8
  %24 = load i64, i64* %m, align 8
  %sub8 = sub i64 %23, %24
  call void @_karatsuba_rec(i64* %16, i64* %17, i64* %add.ptr, i64* %add.ptr7, i64 %22, i64 %sub8)
  br label %if.end.16

if.else:                                          ; preds = %if.then.2
  %25 = load i64, i64* %la.addr, align 8
  %26 = load i64, i64* %m, align 8
  %sub9 = sub i64 %25, %26
  %27 = load i64, i64* %la.addr, align 8
  %28 = load i64, i64* %m, align 8
  %sub10 = sub i64 %27, %28
  %add11 = add i64 %sub9, %sub10
  %add12 = add i64 %add11, 1
  store i64 %add12, i64* %lt, align 8
  %29 = load i64*, i64** %w.addr, align 8
  %30 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %29, i64 %30)
  %31 = load i64*, i64** %w.addr, align 8
  %32 = load i64*, i64** %a.addr, align 8
  %33 = load i64, i64* %m, align 8
  %add.ptr13 = getelementptr i64, i64* %32, i64 %33
  %34 = load i64*, i64** %b.addr, align 8
  %35 = load i64*, i64** %w.addr, align 8
  %36 = load i64, i64* %lt, align 8
  %add.ptr14 = getelementptr i64, i64* %35, i64 %36
  %37 = load i64, i64* %la.addr, align 8
  %38 = load i64, i64* %m, align 8
  %sub15 = sub i64 %37, %38
  %39 = load i64, i64* %lb.addr, align 8
  call void @_karatsuba_rec(i64* %31, i64* %add.ptr13, i64* %34, i64* %add.ptr14, i64 %sub15, i64 %39)
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.4
  %40 = load i64*, i64** %c.addr, align 8
  %41 = load i64, i64* %m, align 8
  %add.ptr17 = getelementptr i64, i64* %40, i64 %41
  %42 = load i64*, i64** %w.addr, align 8
  %43 = load i64, i64* %la.addr, align 8
  %44 = load i64, i64* %m, align 8
  %sub18 = sub i64 %43, %44
  %45 = load i64, i64* %lb.addr, align 8
  %add19 = add i64 %sub18, %45
  call void @_mpd_baseaddto(i64* %add.ptr17, i64* %42, i64 %add19)
  %46 = load i64, i64* %m, align 8
  %47 = load i64, i64* %m, align 8
  %add20 = add i64 %46, %47
  %add21 = add i64 %add20, 1
  store i64 %add21, i64* %lt, align 8
  %48 = load i64*, i64** %w.addr, align 8
  %49 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %48, i64 %49)
  %50 = load i64*, i64** %w.addr, align 8
  %51 = load i64*, i64** %a.addr, align 8
  %52 = load i64*, i64** %b.addr, align 8
  %53 = load i64*, i64** %w.addr, align 8
  %54 = load i64, i64* %lt, align 8
  %add.ptr22 = getelementptr i64, i64* %53, i64 %54
  %55 = load i64, i64* %m, align 8
  %56 = load i64, i64* %lb.addr, align 8
  call void @_karatsuba_rec(i64* %50, i64* %51, i64* %52, i64* %add.ptr22, i64 %55, i64 %56)
  %57 = load i64*, i64** %c.addr, align 8
  %58 = load i64*, i64** %w.addr, align 8
  %59 = load i64, i64* %m, align 8
  %60 = load i64, i64* %lb.addr, align 8
  %add23 = add i64 %59, %60
  call void @_mpd_baseaddto(i64* %57, i64* %58, i64 %add23)
  br label %return

if.end.24:                                        ; preds = %if.end
  %61 = load i64*, i64** %w.addr, align 8
  %62 = bitcast i64* %61 to i8*
  %63 = load i64*, i64** %a.addr, align 8
  %64 = bitcast i64* %63 to i8*
  %65 = load i64, i64* %m, align 8
  %mul = mul i64 %65, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %64, i64 %mul, i32 8, i1 false)
  %66 = load i64, i64* %m, align 8
  %67 = load i64*, i64** %w.addr, align 8
  %arrayidx = getelementptr i64, i64* %67, i64 %66
  store i64 0, i64* %arrayidx, align 8
  %68 = load i64*, i64** %w.addr, align 8
  %69 = load i64*, i64** %a.addr, align 8
  %70 = load i64, i64* %m, align 8
  %add.ptr25 = getelementptr i64, i64* %69, i64 %70
  %71 = load i64, i64* %la.addr, align 8
  %72 = load i64, i64* %m, align 8
  %sub26 = sub i64 %71, %72
  call void @_mpd_baseaddto(i64* %68, i64* %add.ptr25, i64 %sub26)
  %73 = load i64*, i64** %w.addr, align 8
  %74 = load i64, i64* %m, align 8
  %add27 = add i64 %74, 1
  %add.ptr28 = getelementptr i64, i64* %73, i64 %add27
  %75 = bitcast i64* %add.ptr28 to i8*
  %76 = load i64*, i64** %b.addr, align 8
  %77 = bitcast i64* %76 to i8*
  %78 = load i64, i64* %m, align 8
  %mul29 = mul i64 %78, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %75, i8* %77, i64 %mul29, i32 8, i1 false)
  %79 = load i64, i64* %m, align 8
  %add30 = add i64 %79, 1
  %80 = load i64, i64* %m, align 8
  %add31 = add i64 %add30, %80
  %81 = load i64*, i64** %w.addr, align 8
  %arrayidx32 = getelementptr i64, i64* %81, i64 %add31
  store i64 0, i64* %arrayidx32, align 8
  %82 = load i64*, i64** %w.addr, align 8
  %83 = load i64, i64* %m, align 8
  %add33 = add i64 %83, 1
  %add.ptr34 = getelementptr i64, i64* %82, i64 %add33
  %84 = load i64*, i64** %b.addr, align 8
  %85 = load i64, i64* %m, align 8
  %add.ptr35 = getelementptr i64, i64* %84, i64 %85
  %86 = load i64, i64* %lb.addr, align 8
  %87 = load i64, i64* %m, align 8
  %sub36 = sub i64 %86, %87
  call void @_mpd_baseaddto(i64* %add.ptr34, i64* %add.ptr35, i64 %sub36)
  %88 = load i64*, i64** %c.addr, align 8
  %89 = load i64, i64* %m, align 8
  %add.ptr37 = getelementptr i64, i64* %88, i64 %89
  %90 = load i64*, i64** %w.addr, align 8
  %91 = load i64*, i64** %w.addr, align 8
  %92 = load i64, i64* %m, align 8
  %add38 = add i64 %92, 1
  %add.ptr39 = getelementptr i64, i64* %91, i64 %add38
  %93 = load i64*, i64** %w.addr, align 8
  %94 = load i64, i64* %m, align 8
  %add40 = add i64 %94, 1
  %mul41 = mul i64 2, %add40
  %add.ptr42 = getelementptr i64, i64* %93, i64 %mul41
  %95 = load i64, i64* %m, align 8
  %add43 = add i64 %95, 1
  %96 = load i64, i64* %m, align 8
  %add44 = add i64 %96, 1
  call void @_karatsuba_rec(i64* %add.ptr37, i64* %90, i64* %add.ptr39, i64* %add.ptr42, i64 %add43, i64 %add44)
  %97 = load i64, i64* %la.addr, align 8
  %98 = load i64, i64* %m, align 8
  %sub45 = sub i64 %97, %98
  %99 = load i64, i64* %la.addr, align 8
  %100 = load i64, i64* %m, align 8
  %sub46 = sub i64 %99, %100
  %add47 = add i64 %sub45, %sub46
  %add48 = add i64 %add47, 1
  store i64 %add48, i64* %lt, align 8
  %101 = load i64*, i64** %w.addr, align 8
  %102 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %101, i64 %102)
  %103 = load i64*, i64** %w.addr, align 8
  %104 = load i64*, i64** %a.addr, align 8
  %105 = load i64, i64* %m, align 8
  %add.ptr49 = getelementptr i64, i64* %104, i64 %105
  %106 = load i64*, i64** %b.addr, align 8
  %107 = load i64, i64* %m, align 8
  %add.ptr50 = getelementptr i64, i64* %106, i64 %107
  %108 = load i64*, i64** %w.addr, align 8
  %109 = load i64, i64* %lt, align 8
  %add.ptr51 = getelementptr i64, i64* %108, i64 %109
  %110 = load i64, i64* %la.addr, align 8
  %111 = load i64, i64* %m, align 8
  %sub52 = sub i64 %110, %111
  %112 = load i64, i64* %lb.addr, align 8
  %113 = load i64, i64* %m, align 8
  %sub53 = sub i64 %112, %113
  call void @_karatsuba_rec(i64* %103, i64* %add.ptr49, i64* %add.ptr50, i64* %add.ptr51, i64 %sub52, i64 %sub53)
  %114 = load i64*, i64** %c.addr, align 8
  %115 = load i64, i64* %m, align 8
  %mul54 = mul i64 2, %115
  %add.ptr55 = getelementptr i64, i64* %114, i64 %mul54
  %116 = load i64*, i64** %w.addr, align 8
  %117 = load i64, i64* %la.addr, align 8
  %118 = load i64, i64* %m, align 8
  %sub56 = sub i64 %117, %118
  %119 = load i64, i64* %lb.addr, align 8
  %120 = load i64, i64* %m, align 8
  %sub57 = sub i64 %119, %120
  %add58 = add i64 %sub56, %sub57
  call void @_mpd_baseaddto(i64* %add.ptr55, i64* %116, i64 %add58)
  %121 = load i64*, i64** %c.addr, align 8
  %122 = load i64, i64* %m, align 8
  %add.ptr59 = getelementptr i64, i64* %121, i64 %122
  %123 = load i64*, i64** %w.addr, align 8
  %124 = load i64, i64* %la.addr, align 8
  %125 = load i64, i64* %m, align 8
  %sub60 = sub i64 %124, %125
  %126 = load i64, i64* %lb.addr, align 8
  %127 = load i64, i64* %m, align 8
  %sub61 = sub i64 %126, %127
  %add62 = add i64 %sub60, %sub61
  call void @_mpd_basesubfrom(i64* %add.ptr59, i64* %123, i64 %add62)
  %128 = load i64, i64* %m, align 8
  %129 = load i64, i64* %m, align 8
  %add63 = add i64 %128, %129
  %add64 = add i64 %add63, 1
  store i64 %add64, i64* %lt, align 8
  %130 = load i64*, i64** %w.addr, align 8
  %131 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %130, i64 %131)
  %132 = load i64*, i64** %w.addr, align 8
  %133 = load i64*, i64** %a.addr, align 8
  %134 = load i64*, i64** %b.addr, align 8
  %135 = load i64*, i64** %w.addr, align 8
  %136 = load i64, i64* %lt, align 8
  %add.ptr65 = getelementptr i64, i64* %135, i64 %136
  %137 = load i64, i64* %m, align 8
  %138 = load i64, i64* %m, align 8
  call void @_karatsuba_rec(i64* %132, i64* %133, i64* %134, i64* %add.ptr65, i64 %137, i64 %138)
  %139 = load i64*, i64** %c.addr, align 8
  %140 = load i64*, i64** %w.addr, align 8
  %141 = load i64, i64* %m, align 8
  %142 = load i64, i64* %m, align 8
  %add66 = add i64 %141, %142
  call void @_mpd_baseaddto(i64* %139, i64* %140, i64 %add66)
  %143 = load i64*, i64** %c.addr, align 8
  %144 = load i64, i64* %m, align 8
  %add.ptr67 = getelementptr i64, i64* %143, i64 %144
  %145 = load i64*, i64** %w.addr, align 8
  %146 = load i64, i64* %m, align 8
  %147 = load i64, i64* %m, align 8
  %add68 = add i64 %146, %147
  call void @_mpd_basesubfrom(i64* %add.ptr67, i64* %145, i64 %add68)
  br label %return

return:                                           ; preds = %if.end.24, %if.end.16, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @add_size_t(i64 %a, i64 %b) #2 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  %sub = sub i64 -1, %1
  %cmp = icmp ugt i64 %0, %sub
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.15, i32 0, i32 0), i32 595)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.16, i32 0, i32 0))
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 @fputc(i32 10, %struct._IO_FILE* %4)
  call void @abort() #8
  unreachable

do.end:                                           ; No predecessors!
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %5 = load i64, i64* %a.addr, align 8
  %6 = load i64, i64* %b.addr, align 8
  %add = add i64 %5, %6
  ret i64 %add
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @mul_size_t(i64 %a, i64 %b) #2 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  call void @_mpd_mul_words(i64* %hi, i64* %lo, i64 %0, i64 %1)
  %2 = load i64, i64* %hi, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.15, i32 0, i32 0), i32 620)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i32 0, i32 0))
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 @fputc(i32 10, %struct._IO_FILE* %5)
  call void @abort() #8
  unreachable

do.end:                                           ; No predecessors!
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %6 = load i64, i64* %lo, align 8
  ret i64 %6
}

declare hidden void @_mpd_baseaddto(i64*, i64*, i64) #3

declare hidden void @_mpd_basesubfrom(i64*, i64*, i64) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @_mpd_get_transform_len(i64 %rsize) #2 {
entry:
  %retval = alloca i64, align 8
  %rsize.addr = alloca i64, align 8
  %log2rsize = alloca i64, align 8
  %x = alloca i64, align 8
  %step = alloca i64, align 8
  store i64 %rsize, i64* %rsize.addr, align 8
  %0 = load i64, i64* %rsize.addr, align 8
  %call = call i32 @mpd_bsr(i64 %0)
  %conv = sext i32 %call to i64
  store i64 %conv, i64* %log2rsize, align 8
  %1 = load i64, i64* %rsize.addr, align 8
  %cmp = icmp ule i64 %1, 1024
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %log2rsize, align 8
  %shl = shl i64 1, %2
  store i64 %shl, i64* %x, align 8
  %3 = load i64, i64* %rsize.addr, align 8
  %4 = load i64, i64* %x, align 8
  %cmp2 = icmp eq i64 %3, %4
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %5 = load i64, i64* %x, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %6 = load i64, i64* %x, align 8
  %shl4 = shl i64 %6, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %shl4, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %7 = load i64, i64* %rsize.addr, align 8
  %cmp5 = icmp ule i64 %7, 4294967296
  br i1 %cmp5, label %if.then.7, label %if.else.19

if.then.7:                                        ; preds = %if.else
  %8 = load i64, i64* %log2rsize, align 8
  %shl8 = shl i64 1, %8
  store i64 %shl8, i64* %x, align 8
  %9 = load i64, i64* %rsize.addr, align 8
  %10 = load i64, i64* %x, align 8
  %cmp9 = icmp eq i64 %9, %10
  br i1 %cmp9, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then.7
  %11 = load i64, i64* %x, align 8
  store i64 %11, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.7
  %12 = load i64, i64* %x, align 8
  %shr = lshr i64 %12, 1
  store i64 %shr, i64* %step, align 8
  %13 = load i64, i64* %step, align 8
  %14 = load i64, i64* %x, align 8
  %add = add i64 %14, %13
  store i64 %add, i64* %x, align 8
  %15 = load i64, i64* %rsize.addr, align 8
  %16 = load i64, i64* %x, align 8
  %cmp12 = icmp ule i64 %15, %16
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %if.end
  %17 = load i64, i64* %x, align 8
  br label %cond.end.17

cond.false.15:                                    ; preds = %if.end
  %18 = load i64, i64* %x, align 8
  %19 = load i64, i64* %step, align 8
  %add16 = add i64 %18, %19
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.15, %cond.true.14
  %cond18 = phi i64 [ %17, %cond.true.14 ], [ %add16, %cond.false.15 ]
  store i64 %cond18, i64* %retval
  br label %return

if.else.19:                                       ; preds = %if.else
  %20 = load i64, i64* %rsize.addr, align 8
  %cmp20 = icmp ule i64 %20, 6442450944
  br i1 %cmp20, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %if.else.19
  store i64 6442450944, i64* %retval
  br label %return

if.else.23:                                       ; preds = %if.else.19
  %21 = load i64, i64* %rsize.addr, align 8
  %cmp24 = icmp ule i64 %21, 12884901888
  br i1 %cmp24, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %if.else.23
  store i64 12884901888, i64* %retval
  br label %return

if.else.27:                                       ; preds = %if.else.23
  store i64 -1, i64* %retval
  br label %return

return:                                           ; preds = %if.else.27, %if.then.26, %if.then.22, %cond.end.17, %if.then.11, %cond.end
  %22 = load i64, i64* %retval
  ret i64 %22
}

declare hidden i32 @fnt_autoconvolute(i64*, i64, i32) #3

declare hidden i32 @fnt_convolute(i64*, i64*, i64, i32) #3

declare hidden void @crt3(i64*, i64*, i64*, i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @_karatsuba_rec_fnt(i64* %c, i64* %a, i64* %b, i64* %w, i64 %la, i64 %lb) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i64*, align 8
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  %w.addr = alloca i64*, align 8
  %la.addr = alloca i64, align 8
  %lb.addr = alloca i64, align 8
  %m = alloca i64, align 8
  %lt = alloca i64, align 8
  %result = alloca i64*, align 8
  %dummy = alloca i64, align 8
  store i64* %c, i64** %c.addr, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  store i64* %w, i64** %w.addr, align 8
  store i64 %la, i64* %la.addr, align 8
  store i64 %lb, i64* %lb.addr, align 8
  %0 = load i64, i64* %la.addr, align 8
  %cmp = icmp ule i64 %0, 6442450944
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %lb.addr, align 8
  %cmp1 = icmp ule i64 %1, 192
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %2 = load i64*, i64** %c.addr, align 8
  %3 = load i64*, i64** %b.addr, align 8
  %4 = load i64*, i64** %a.addr, align 8
  %5 = load i64, i64* %lb.addr, align 8
  %6 = load i64, i64* %la.addr, align 8
  call void @_mpd_basemul(i64* %2, i64* %3, i64* %4, i64 %5, i64 %6)
  br label %if.end.5

if.else:                                          ; preds = %if.then
  %7 = load i64*, i64** %a.addr, align 8
  %8 = load i64*, i64** %b.addr, align 8
  %9 = load i64, i64* %la.addr, align 8
  %10 = load i64, i64* %lb.addr, align 8
  %call = call i64* @_mpd_fntmul(i64* %7, i64* %8, i64 %9, i64 %10, i64* %dummy)
  store i64* %call, i64** %result, align 8
  %cmp3 = icmp eq i64* %call, null
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  %11 = load i64*, i64** %c.addr, align 8
  %12 = bitcast i64* %11 to i8*
  %13 = load i64*, i64** %result, align 8
  %14 = bitcast i64* %13 to i8*
  %15 = load i64, i64* %la.addr, align 8
  %16 = load i64, i64* %lb.addr, align 8
  %add = add i64 %15, %16
  %mul = mul i64 %add, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %14, i64 %mul, i32 8, i1 false)
  %17 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %18 = load i64*, i64** %result, align 8
  %19 = bitcast i64* %18 to i8*
  call void %17(i8* %19)
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %if.then.2
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %entry
  %20 = load i64, i64* %la.addr, align 8
  %add7 = add i64 %20, 1
  %div = udiv i64 %add7, 2
  store i64 %div, i64* %m, align 8
  %21 = load i64, i64* %lb.addr, align 8
  %22 = load i64, i64* %m, align 8
  %cmp8 = icmp ule i64 %21, %22
  br i1 %cmp8, label %if.then.9, label %if.end.43

if.then.9:                                        ; preds = %if.end.6
  %23 = load i64, i64* %lb.addr, align 8
  %24 = load i64, i64* %la.addr, align 8
  %25 = load i64, i64* %m, align 8
  %sub = sub i64 %24, %25
  %cmp10 = icmp ugt i64 %23, %sub
  br i1 %cmp10, label %if.then.11, label %if.else.19

if.then.11:                                       ; preds = %if.then.9
  %26 = load i64, i64* %lb.addr, align 8
  %27 = load i64, i64* %lb.addr, align 8
  %add12 = add i64 %26, %27
  %add13 = add i64 %add12, 1
  store i64 %add13, i64* %lt, align 8
  %28 = load i64*, i64** %w.addr, align 8
  %29 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %28, i64 %29)
  %30 = load i64*, i64** %w.addr, align 8
  %31 = load i64*, i64** %b.addr, align 8
  %32 = load i64*, i64** %a.addr, align 8
  %33 = load i64, i64* %m, align 8
  %add.ptr = getelementptr i64, i64* %32, i64 %33
  %34 = load i64*, i64** %w.addr, align 8
  %35 = load i64, i64* %lt, align 8
  %add.ptr14 = getelementptr i64, i64* %34, i64 %35
  %36 = load i64, i64* %lb.addr, align 8
  %37 = load i64, i64* %la.addr, align 8
  %38 = load i64, i64* %m, align 8
  %sub15 = sub i64 %37, %38
  %call16 = call i32 @_karatsuba_rec_fnt(i64* %30, i64* %31, i64* %add.ptr, i64* %add.ptr14, i64 %36, i64 %sub15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %if.then.11
  store i32 0, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.then.11
  br label %if.end.31

if.else.19:                                       ; preds = %if.then.9
  %39 = load i64, i64* %la.addr, align 8
  %40 = load i64, i64* %m, align 8
  %sub20 = sub i64 %39, %40
  %41 = load i64, i64* %la.addr, align 8
  %42 = load i64, i64* %m, align 8
  %sub21 = sub i64 %41, %42
  %add22 = add i64 %sub20, %sub21
  %add23 = add i64 %add22, 1
  store i64 %add23, i64* %lt, align 8
  %43 = load i64*, i64** %w.addr, align 8
  %44 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %43, i64 %44)
  %45 = load i64*, i64** %w.addr, align 8
  %46 = load i64*, i64** %a.addr, align 8
  %47 = load i64, i64* %m, align 8
  %add.ptr24 = getelementptr i64, i64* %46, i64 %47
  %48 = load i64*, i64** %b.addr, align 8
  %49 = load i64*, i64** %w.addr, align 8
  %50 = load i64, i64* %lt, align 8
  %add.ptr25 = getelementptr i64, i64* %49, i64 %50
  %51 = load i64, i64* %la.addr, align 8
  %52 = load i64, i64* %m, align 8
  %sub26 = sub i64 %51, %52
  %53 = load i64, i64* %lb.addr, align 8
  %call27 = call i32 @_karatsuba_rec_fnt(i64* %45, i64* %add.ptr24, i64* %48, i64* %add.ptr25, i64 %sub26, i64 %53)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %if.else.19
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.else.19
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.18
  %54 = load i64*, i64** %c.addr, align 8
  %55 = load i64, i64* %m, align 8
  %add.ptr32 = getelementptr i64, i64* %54, i64 %55
  %56 = load i64*, i64** %w.addr, align 8
  %57 = load i64, i64* %la.addr, align 8
  %58 = load i64, i64* %m, align 8
  %sub33 = sub i64 %57, %58
  %59 = load i64, i64* %lb.addr, align 8
  %add34 = add i64 %sub33, %59
  call void @_mpd_baseaddto(i64* %add.ptr32, i64* %56, i64 %add34)
  %60 = load i64, i64* %m, align 8
  %61 = load i64, i64* %m, align 8
  %add35 = add i64 %60, %61
  %add36 = add i64 %add35, 1
  store i64 %add36, i64* %lt, align 8
  %62 = load i64*, i64** %w.addr, align 8
  %63 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %62, i64 %63)
  %64 = load i64*, i64** %w.addr, align 8
  %65 = load i64*, i64** %a.addr, align 8
  %66 = load i64*, i64** %b.addr, align 8
  %67 = load i64*, i64** %w.addr, align 8
  %68 = load i64, i64* %lt, align 8
  %add.ptr37 = getelementptr i64, i64* %67, i64 %68
  %69 = load i64, i64* %m, align 8
  %70 = load i64, i64* %lb.addr, align 8
  %call38 = call i32 @_karatsuba_rec_fnt(i64* %64, i64* %65, i64* %66, i64* %add.ptr37, i64 %69, i64 %70)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.41, label %if.then.40

if.then.40:                                       ; preds = %if.end.31
  store i32 0, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.31
  %71 = load i64*, i64** %c.addr, align 8
  %72 = load i64*, i64** %w.addr, align 8
  %73 = load i64, i64* %m, align 8
  %74 = load i64, i64* %lb.addr, align 8
  %add42 = add i64 %73, %74
  call void @_mpd_baseaddto(i64* %71, i64* %72, i64 %add42)
  store i32 1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.6
  %75 = load i64*, i64** %w.addr, align 8
  %76 = bitcast i64* %75 to i8*
  %77 = load i64*, i64** %a.addr, align 8
  %78 = bitcast i64* %77 to i8*
  %79 = load i64, i64* %m, align 8
  %mul44 = mul i64 %79, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %78, i64 %mul44, i32 8, i1 false)
  %80 = load i64, i64* %m, align 8
  %81 = load i64*, i64** %w.addr, align 8
  %arrayidx = getelementptr i64, i64* %81, i64 %80
  store i64 0, i64* %arrayidx, align 8
  %82 = load i64*, i64** %w.addr, align 8
  %83 = load i64*, i64** %a.addr, align 8
  %84 = load i64, i64* %m, align 8
  %add.ptr45 = getelementptr i64, i64* %83, i64 %84
  %85 = load i64, i64* %la.addr, align 8
  %86 = load i64, i64* %m, align 8
  %sub46 = sub i64 %85, %86
  call void @_mpd_baseaddto(i64* %82, i64* %add.ptr45, i64 %sub46)
  %87 = load i64*, i64** %w.addr, align 8
  %88 = load i64, i64* %m, align 8
  %add47 = add i64 %88, 1
  %add.ptr48 = getelementptr i64, i64* %87, i64 %add47
  %89 = bitcast i64* %add.ptr48 to i8*
  %90 = load i64*, i64** %b.addr, align 8
  %91 = bitcast i64* %90 to i8*
  %92 = load i64, i64* %m, align 8
  %mul49 = mul i64 %92, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %91, i64 %mul49, i32 8, i1 false)
  %93 = load i64, i64* %m, align 8
  %add50 = add i64 %93, 1
  %94 = load i64, i64* %m, align 8
  %add51 = add i64 %add50, %94
  %95 = load i64*, i64** %w.addr, align 8
  %arrayidx52 = getelementptr i64, i64* %95, i64 %add51
  store i64 0, i64* %arrayidx52, align 8
  %96 = load i64*, i64** %w.addr, align 8
  %97 = load i64, i64* %m, align 8
  %add53 = add i64 %97, 1
  %add.ptr54 = getelementptr i64, i64* %96, i64 %add53
  %98 = load i64*, i64** %b.addr, align 8
  %99 = load i64, i64* %m, align 8
  %add.ptr55 = getelementptr i64, i64* %98, i64 %99
  %100 = load i64, i64* %lb.addr, align 8
  %101 = load i64, i64* %m, align 8
  %sub56 = sub i64 %100, %101
  call void @_mpd_baseaddto(i64* %add.ptr54, i64* %add.ptr55, i64 %sub56)
  %102 = load i64*, i64** %c.addr, align 8
  %103 = load i64, i64* %m, align 8
  %add.ptr57 = getelementptr i64, i64* %102, i64 %103
  %104 = load i64*, i64** %w.addr, align 8
  %105 = load i64*, i64** %w.addr, align 8
  %106 = load i64, i64* %m, align 8
  %add58 = add i64 %106, 1
  %add.ptr59 = getelementptr i64, i64* %105, i64 %add58
  %107 = load i64*, i64** %w.addr, align 8
  %108 = load i64, i64* %m, align 8
  %add60 = add i64 %108, 1
  %mul61 = mul i64 2, %add60
  %add.ptr62 = getelementptr i64, i64* %107, i64 %mul61
  %109 = load i64, i64* %m, align 8
  %add63 = add i64 %109, 1
  %110 = load i64, i64* %m, align 8
  %add64 = add i64 %110, 1
  %call65 = call i32 @_karatsuba_rec_fnt(i64* %add.ptr57, i64* %104, i64* %add.ptr59, i64* %add.ptr62, i64 %add63, i64 %add64)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.end.43
  store i32 0, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.end.43
  %111 = load i64, i64* %la.addr, align 8
  %112 = load i64, i64* %m, align 8
  %sub69 = sub i64 %111, %112
  %113 = load i64, i64* %la.addr, align 8
  %114 = load i64, i64* %m, align 8
  %sub70 = sub i64 %113, %114
  %add71 = add i64 %sub69, %sub70
  %add72 = add i64 %add71, 1
  store i64 %add72, i64* %lt, align 8
  %115 = load i64*, i64** %w.addr, align 8
  %116 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %115, i64 %116)
  %117 = load i64*, i64** %w.addr, align 8
  %118 = load i64*, i64** %a.addr, align 8
  %119 = load i64, i64* %m, align 8
  %add.ptr73 = getelementptr i64, i64* %118, i64 %119
  %120 = load i64*, i64** %b.addr, align 8
  %121 = load i64, i64* %m, align 8
  %add.ptr74 = getelementptr i64, i64* %120, i64 %121
  %122 = load i64*, i64** %w.addr, align 8
  %123 = load i64, i64* %lt, align 8
  %add.ptr75 = getelementptr i64, i64* %122, i64 %123
  %124 = load i64, i64* %la.addr, align 8
  %125 = load i64, i64* %m, align 8
  %sub76 = sub i64 %124, %125
  %126 = load i64, i64* %lb.addr, align 8
  %127 = load i64, i64* %m, align 8
  %sub77 = sub i64 %126, %127
  %call78 = call i32 @_karatsuba_rec_fnt(i64* %117, i64* %add.ptr73, i64* %add.ptr74, i64* %add.ptr75, i64 %sub76, i64 %sub77)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.end.81, label %if.then.80

if.then.80:                                       ; preds = %if.end.68
  store i32 0, i32* %retval
  br label %return

if.end.81:                                        ; preds = %if.end.68
  %128 = load i64*, i64** %c.addr, align 8
  %129 = load i64, i64* %m, align 8
  %mul82 = mul i64 2, %129
  %add.ptr83 = getelementptr i64, i64* %128, i64 %mul82
  %130 = load i64*, i64** %w.addr, align 8
  %131 = load i64, i64* %la.addr, align 8
  %132 = load i64, i64* %m, align 8
  %sub84 = sub i64 %131, %132
  %133 = load i64, i64* %lb.addr, align 8
  %134 = load i64, i64* %m, align 8
  %sub85 = sub i64 %133, %134
  %add86 = add i64 %sub84, %sub85
  call void @_mpd_baseaddto(i64* %add.ptr83, i64* %130, i64 %add86)
  %135 = load i64*, i64** %c.addr, align 8
  %136 = load i64, i64* %m, align 8
  %add.ptr87 = getelementptr i64, i64* %135, i64 %136
  %137 = load i64*, i64** %w.addr, align 8
  %138 = load i64, i64* %la.addr, align 8
  %139 = load i64, i64* %m, align 8
  %sub88 = sub i64 %138, %139
  %140 = load i64, i64* %lb.addr, align 8
  %141 = load i64, i64* %m, align 8
  %sub89 = sub i64 %140, %141
  %add90 = add i64 %sub88, %sub89
  call void @_mpd_basesubfrom(i64* %add.ptr87, i64* %137, i64 %add90)
  %142 = load i64, i64* %m, align 8
  %143 = load i64, i64* %m, align 8
  %add91 = add i64 %142, %143
  %add92 = add i64 %add91, 1
  store i64 %add92, i64* %lt, align 8
  %144 = load i64*, i64** %w.addr, align 8
  %145 = load i64, i64* %lt, align 8
  call void @mpd_uint_zero(i64* %144, i64 %145)
  %146 = load i64*, i64** %w.addr, align 8
  %147 = load i64*, i64** %a.addr, align 8
  %148 = load i64*, i64** %b.addr, align 8
  %149 = load i64*, i64** %w.addr, align 8
  %150 = load i64, i64* %lt, align 8
  %add.ptr93 = getelementptr i64, i64* %149, i64 %150
  %151 = load i64, i64* %m, align 8
  %152 = load i64, i64* %m, align 8
  %call94 = call i32 @_karatsuba_rec_fnt(i64* %146, i64* %147, i64* %148, i64* %add.ptr93, i64 %151, i64 %152)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %if.end.81
  store i32 0, i32* %retval
  br label %return

if.end.97:                                        ; preds = %if.end.81
  %153 = load i64*, i64** %c.addr, align 8
  %154 = load i64*, i64** %w.addr, align 8
  %155 = load i64, i64* %m, align 8
  %156 = load i64, i64* %m, align 8
  %add98 = add i64 %155, %156
  call void @_mpd_baseaddto(i64* %153, i64* %154, i64 %add98)
  %157 = load i64*, i64** %c.addr, align 8
  %158 = load i64, i64* %m, align 8
  %add.ptr99 = getelementptr i64, i64* %157, i64 %158
  %159 = load i64*, i64** %w.addr, align 8
  %160 = load i64, i64* %m, align 8
  %161 = load i64, i64* %m, align 8
  %add100 = add i64 %160, %161
  call void @_mpd_basesubfrom(i64* %add.ptr99, i64* %159, i64 %add100)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.97, %if.then.96, %if.then.80, %if.then.67, %if.end.41, %if.then.40, %if.then.29, %if.then.17, %if.end.5, %if.then.4
  %162 = load i32, i32* %retval
  ret i32 %162
}

; Function Attrs: nounwind uwtable
define internal i64 @_lower_bound_zeta(%struct.mpd_t* %x, i32* %status) #0 {
entry:
  %retval = alloca i64, align 8
  %x.addr = alloca %struct.mpd_t*, align 8
  %status.addr = alloca i32*, align 8
  %maxctx = alloca %struct.mpd_context_t, align 8
  %scratch_data = alloca [64 x i64], align 16
  %scratch = alloca %struct.mpd_t, align 8
  %t = alloca i64, align 8
  %u = alloca i64, align 8
  store %struct.mpd_t* %x, %struct.mpd_t** %x.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 4
  store i64 64, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %scratch, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i64], [64 x i64]* %scratch_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %0 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %call = call i64 @mpd_adjexp(%struct.mpd_t* %0)
  store i64 %call, i64* %t, align 8
  %1 = load i64, i64* %t, align 8
  %cmp = icmp sgt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %t, align 8
  %call1 = call i32 @mpd_exp_digits(i64 %2)
  %sub = sub i32 %call1, 1
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %t, align 8
  %cmp2 = icmp slt i64 %3, -1
  br i1 %cmp2, label %if.then.4, label %if.else.8

if.then.4:                                        ; preds = %if.else
  %4 = load i64, i64* %t, align 8
  %add = add i64 %4, 1
  %call5 = call i32 @mpd_exp_digits(i64 %add)
  %sub6 = sub i32 %call5, 1
  %conv7 = sext i32 %sub6 to i64
  store i64 %conv7, i64* %retval
  br label %return

if.else.8:                                        ; preds = %if.else
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %5 = load %struct.mpd_t*, %struct.mpd_t** %x.addr, align 8
  %6 = load i32*, i32** %status.addr, align 8
  call void @mpd_qsub(%struct.mpd_t* %scratch, %struct.mpd_t* %5, %struct.mpd_t* @one, %struct.mpd_context_t* %maxctx, i32* %6)
  %call9 = call i32 @mpd_isspecial(%struct.mpd_t* %scratch)
  %tobool = icmp ne i32 %call9, 0
  br i1 %tobool, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.else.8
  call void @mpd_del(%struct.mpd_t* %scratch)
  store i64 9223372036854775807, i64* %retval
  br label %return

if.end:                                           ; preds = %if.else.8
  %call11 = call i64 @mpd_adjexp(%struct.mpd_t* %scratch)
  store i64 %call11, i64* %u, align 8
  call void @mpd_del(%struct.mpd_t* %scratch)
  %7 = load i64, i64* %t, align 8
  %cmp12 = icmp eq i64 %7, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load i64, i64* %u, align 8
  %sub14 = sub i64 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i64, i64* %u, align 8
  %sub15 = sub i64 %9, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub14, %cond.true ], [ %sub15, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.10, %if.then.4, %if.then
  %10 = load i64, i64* %retval
  ret i64 %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_mpd_qpow_mpd(%struct.mpd_t* %result, %struct.mpd_t* %tbase, %struct.mpd_t* %texp, i8 zeroext %resultsign, %struct.mpd_context_t* %ctx, i32* %status) #2 {
entry:
  %result.addr = alloca %struct.mpd_t*, align 8
  %tbase.addr = alloca %struct.mpd_t*, align 8
  %texp.addr = alloca %struct.mpd_t*, align 8
  %resultsign.addr = alloca i8, align 1
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %workstatus = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %two_data = alloca [1 x i64], align 8
  %two = alloca %struct.mpd_t, align 8
  store %struct.mpd_t* %result, %struct.mpd_t** %result.addr, align 8
  store %struct.mpd_t* %tbase, %struct.mpd_t** %tbase.addr, align 8
  store %struct.mpd_t* %texp, %struct.mpd_t** %texp.addr, align 8
  store i8 %resultsign, i8* %resultsign.addr, align 1
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  store i32 0, i32* %workstatus, align 4
  %0 = bitcast [1 x i64]* %two_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @_mpd_qpow_mpd.two_data to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %two, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %two_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %1 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %2 = load i32*, i32** %status.addr, align 8
  %call = call i32 @mpd_qcopy(%struct.mpd_t* %1, %struct.mpd_t* @one, i32* %2)
  br label %while.cond

while.cond:                                       ; preds = %if.end.18, %entry
  %3 = load %struct.mpd_t*, %struct.mpd_t** %texp.addr, align 8
  %call1 = call i32 @mpd_iszero(%struct.mpd_t* %3)
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.mpd_t*, %struct.mpd_t** %texp.addr, align 8
  %call2 = call i32 @mpd_isodd(%struct.mpd_t* %4)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then, label %if.end.10

if.then:                                          ; preds = %while.body
  %5 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %7 = load %struct.mpd_t*, %struct.mpd_t** %tbase.addr, align 8
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %5, %struct.mpd_t* %6, %struct.mpd_t* %7, %struct.mpd_context_t* %8, i32* %workstatus)
  %9 = load i32, i32* %workstatus, align 4
  %10 = load i32*, i32** %status.addr, align 8
  %11 = load i32, i32* %10, align 4
  %or = or i32 %11, %9
  store i32 %or, i32* %10, align 4
  %12 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call4 = call i32 @mpd_isspecial(%struct.mpd_t* %12)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %call6 = call i32 @mpd_iszerocoeff(%struct.mpd_t* %13)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load i32, i32* %workstatus, align 4
  %and = and i32 %14, 1
  %tobool8 = icmp ne i32 %and, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %while.body
  %15 = load %struct.mpd_t*, %struct.mpd_t** %tbase.addr, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %tbase.addr, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %tbase.addr, align 8
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  call void @mpd_qmul(%struct.mpd_t* %15, %struct.mpd_t* %16, %struct.mpd_t* %17, %struct.mpd_context_t* %18, i32* %workstatus)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %texp.addr, align 8
  %20 = load %struct.mpd_t*, %struct.mpd_t** %texp.addr, align 8
  call void @mpd_qdivint(%struct.mpd_t* %19, %struct.mpd_t* %20, %struct.mpd_t* %two, %struct.mpd_context_t* %maxctx, i32* %workstatus)
  %21 = load %struct.mpd_t*, %struct.mpd_t** %tbase.addr, align 8
  %call11 = call i32 @mpd_isnan(%struct.mpd_t* %21)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.16, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %if.end.10
  %22 = load %struct.mpd_t*, %struct.mpd_t** %texp.addr, align 8
  %call14 = call i32 @mpd_isnan(%struct.mpd_t* %22)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %lor.lhs.false.13, %if.end.10
  %23 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %24 = load i32, i32* %workstatus, align 4
  %and17 = and i32 %24, 958
  %25 = load i32*, i32** %status.addr, align 8
  call void @mpd_seterror(%struct.mpd_t* %23, i32 %and17, i32* %25)
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false.13
  br label %while.cond

while.end:                                        ; preds = %if.then.9, %while.cond
  %26 = load %struct.mpd_t*, %struct.mpd_t** %result.addr, align 8
  %27 = load i8, i8* %resultsign.addr, align 1
  call void @mpd_set_sign(%struct.mpd_t* %26, i8 zeroext %27)
  br label %return

return:                                           ; preds = %while.end, %if.then.16
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mpd_word_isallnine(i64 %word) #0 {
entry:
  %retval = alloca i32, align 4
  %word.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store i64 %word, i64* %word.addr, align 8
  %0 = load i64, i64* %word.addr, align 8
  %call = call i32 @mpd_word_digits(i64 %0)
  store i32 %call, i32* %n, align 4
  %1 = load i64, i64* %word.addr, align 8
  %2 = load i32, i32* %n, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr [0 x i64], [0 x i64]* @mpd_pow10, i32 0, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %sub = sub i64 %3, 1
  %cmp = icmp eq i64 %1, %sub
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @_mpd_isallnine(i64* %data, i64 %len) #2 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i64*, align 8
  %len.addr = alloca i64, align 8
  store i64* %data, i64** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %len.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %len.addr, align 8
  %cmp = icmp sge i64 %dec, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %len.addr, align 8
  %2 = load i64*, i64** %data.addr, align 8
  %arrayidx = getelementptr i64, i64* %2, i64 %1
  %3 = load i64, i64* %arrayidx, align 8
  %cmp1 = icmp ne i64 %3, -8446744073709551617
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_invroot_init_approx(%struct.mpd_t* %z, i64 %vhat) #2 {
entry:
  %z.addr = alloca %struct.mpd_t*, align 8
  %vhat.addr = alloca i64, align 8
  %lo = alloca i64, align 8
  %hi = alloca i64, align 8
  %a = alloca i64, align 8
  %sq = alloca i64, align 8
  store %struct.mpd_t* %z, %struct.mpd_t** %z.addr, align 8
  store i64 %vhat, i64* %vhat.addr, align 8
  store i64 1000, i64* %lo, align 8
  store i64 10000, i64* %hi, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.7, %entry
  %0 = load i64, i64* %lo, align 8
  %1 = load i64, i64* %hi, align 8
  %add = add i64 %0, %1
  %div = udiv i64 %add, 2
  store i64 %div, i64* %a, align 8
  %2 = load i64, i64* %a, align 8
  %3 = load i64, i64* %a, align 8
  %mul = mul i64 %2, %3
  store i64 %mul, i64* %sq, align 8
  %4 = load i64, i64* %vhat.addr, align 8
  %5 = load i64, i64* %sq, align 8
  %cmp = icmp uge i64 %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.cond
  %6 = load i64, i64* %vhat.addr, align 8
  %7 = load i64, i64* %sq, align 8
  %8 = load i64, i64* %a, align 8
  %mul1 = mul i64 2, %8
  %add2 = add i64 %7, %mul1
  %add3 = add i64 %add2, 1
  %cmp4 = icmp ult i64 %6, %add3
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %for.end

if.end:                                           ; preds = %if.then
  %9 = load i64, i64* %a, align 8
  %add6 = add i64 %9, 1
  store i64 %add6, i64* %lo, align 8
  br label %if.end.7

if.else:                                          ; preds = %for.cond
  %10 = load i64, i64* %a, align 8
  %sub = sub i64 %10, 1
  store i64 %sub, i64* %hi, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.end
  br label %for.cond

for.end:                                          ; preds = %if.then.5
  %11 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  call void @mpd_minalloc(%struct.mpd_t* %11)
  %12 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %12)
  %13 = load i64, i64* %a, align 8
  %div8 = udiv i64 1000000000, %13
  %14 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %14, i32 0, i32 5
  %15 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %15, i64 0
  store i64 %div8, i64* %arrayidx, align 8
  %16 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %16, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 1
  store i64 -6, i64* %exp, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %z.addr, align 8
  call void @mpd_setdigits(%struct.mpd_t* %18)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @invroot_schedule_prec(i64* %klist, i64 %maxprec, i64 %initprec) #2 {
entry:
  %retval = alloca i32, align 4
  %klist.addr = alloca i64*, align 8
  %maxprec.addr = alloca i64, align 8
  %initprec.addr = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i32, align 4
  store i64* %klist, i64** %klist.addr, align 8
  store i64 %maxprec, i64* %maxprec.addr, align 8
  store i64 %initprec, i64* %initprec.addr, align 8
  %0 = load i64, i64* %maxprec.addr, align 8
  %1 = load i64, i64* %initprec.addr, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  %2 = load i64, i64* %maxprec.addr, align 8
  store i64 %2, i64* %k, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %3 = load i64, i64* %k, align 8
  %add = add i64 %3, 3
  %div = sdiv i64 %add, 2
  store i64 %div, i64* %k, align 8
  %4 = load i64, i64* %k, align 8
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i64*, i64** %klist.addr, align 8
  %arrayidx = getelementptr i64, i64* %6, i64 %idxprom
  store i64 %4, i64* %arrayidx, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i64, i64* %k, align 8
  %8 = load i64, i64* %initprec.addr, align 8
  %cmp1 = icmp sgt i64 %7, %8
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %9, 1
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @mpd_resize_u16(i16** %w, i64 %nmemb) #0 {
entry:
  %w.addr = alloca i16**, align 8
  %nmemb.addr = alloca i64, align 8
  %err = alloca i8, align 1
  store i16** %w, i16*** %w.addr, align 8
  store i64 %nmemb, i64* %nmemb.addr, align 8
  store i8 0, i8* %err, align 1
  %0 = load i16**, i16*** %w.addr, align 8
  %1 = load i16*, i16** %0, align 8
  %2 = bitcast i16* %1 to i8*
  %3 = load i64, i64* %nmemb.addr, align 8
  %call = call i8* @mpd_realloc(i8* %2, i64 %3, i64 2, i8* %err)
  %4 = bitcast i8* %call to i16*
  %5 = load i16**, i16*** %w.addr, align 8
  store i16* %4, i16** %5, align 8
  %6 = load i8, i8* %err, align 1
  %tobool = icmp ne i8 %6, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = trunc i32 %lnot.ext to i8
  ret i8 %conv
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @mpd_resize_u32(i32** %w, i64 %nmemb) #0 {
entry:
  %w.addr = alloca i32**, align 8
  %nmemb.addr = alloca i64, align 8
  %err = alloca i8, align 1
  store i32** %w, i32*** %w.addr, align 8
  store i64 %nmemb, i64* %nmemb.addr, align 8
  store i8 0, i8* %err, align 1
  %0 = load i32**, i32*** %w.addr, align 8
  %1 = load i32*, i32** %0, align 8
  %2 = bitcast i32* %1 to i8*
  %3 = load i64, i64* %nmemb.addr, align 8
  %call = call i8* @mpd_realloc(i8* %2, i64 %3, i64 4, i8* %err)
  %4 = bitcast i8* %call to i32*
  %5 = load i32**, i32*** %w.addr, align 8
  store i32* %4, i32** %5, align 8
  %6 = load i8, i8* %err, align 1
  %tobool = icmp ne i8 %6, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = trunc i32 %lnot.ext to i8
  ret i8 %conv
}

declare hidden i64 @_mpd_shortdiv_b(i64*, i64*, i64, i64, i64) #3

declare hidden i64 @_mpd_shortmul_c(i64*, i64*, i64, i64) #3

declare hidden i64 @_mpd_shortadd(i64*, i64, i64) #3

declare hidden i64 @_mpd_shortmul_b(i64*, i64*, i64, i64, i64) #3

declare hidden i64 @_mpd_shortadd_b(i64*, i64, i64, i64) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { alwaysinline inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!2 = !{i32 126882, i32 126892}
!3 = !{i32 136428, i32 136442}
