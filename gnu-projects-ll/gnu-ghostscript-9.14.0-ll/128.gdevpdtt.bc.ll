; ModuleID = './gdevpdtt.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gs_memory_struct_type_s = type { i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }
%struct.struct_shared_procs_s = type opaque
%struct.gs_memory_s = type { %struct.gs_memory_s*, %struct.gs_memory_procs_s, %struct.gs_lib_ctx_s*, %struct.gs_memory_s*, %struct.gs_memory_s* }
%struct.gs_memory_procs_s = type { i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)*, void (%struct.gs_memory_s*, %struct.gs_memory_status_s*)*, void (%struct.gs_memory_s*, i32, i8*)*, void (%struct.gs_memory_s*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i32 (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)*, i32 (%struct.gs_memory_s*, %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, i8*)*, void (%struct.gs_memory_s*, i32)* }
%struct.gs_memory_status_s = type { i64, i64, i32 }
%struct.gs_gc_root_s = type { %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i32 }
%struct.gs_ptr_procs_s = type { void (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i32 (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)* }
%struct.enum_ptr_s = type { i8*, i32 }
%struct.gc_state_s = type opaque
%struct.gs_lib_ctx_s = type { %struct.gs_memory_s*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i64, i8*, %struct.name_table_s*, i32, %struct.gx_io_device_s**, i32, i32, [2 x i64], %struct.gs_font_dir_s*, i32, i8*, i32, i8*, %struct.gs_fapi_server_s** }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.name_table_s = type opaque
%struct.gx_io_device_s = type { i8*, i8*, %struct.gx_io_device_procs_s, i8* }
%struct.gx_io_device_procs_s = type { i32 (%struct.gx_io_device_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i32, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i8*, %struct._IO_FILE**, i8*, i32)*, i32 (%struct.gx_io_device_s*, %struct._IO_FILE*)*, i32 (%struct.gx_io_device_s*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stat*)*, %struct.file_enum_s* (%struct.gx_io_device_s*, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.file_enum_s*, i8*, i32)*, void (%struct.file_enum_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)* }
%struct.stream_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8], %union.stream_cursor_s, i8*, i32, i32, i16, i8, i8, %struct.gs_string_s, i64, %struct.stream_procs, %struct.stream_s*, i32, i32, %struct.stream_state_s*, i16, i16, %struct.stream_s*, %struct.stream_s*, i32, i32, i32 (%struct.stream_s*)*, %struct._IO_FILE*, %struct.gs_const_string_s, i32, i64, i64 }
%struct.stream_template_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32, i32, void (%struct.stream_state_s*)*, void (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*)* }
%struct.stream_cursor_read_s = type { i8*, i8*, i8* }
%struct.stream_cursor_write_s = type { i8*, i8*, i8* }
%union.stream_cursor_s = type { %struct.stream_cursor_read_s }
%struct.gs_string_s = type { i8*, i32 }
%struct.stream_procs = type { i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64)*, void (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32 (%struct.stream_s*, i32)* }
%struct.stream_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8] }
%struct.gs_const_string_s = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.file_enum_s = type opaque
%struct.gs_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32 }
%struct.gs_param_list_procs_s = type { i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_typed_value_s*)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*, i32)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*)*, i32 (%struct.gs_param_list_s*, %union.gs_param_enumerator_s*, %struct.gs_param_string_s*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*)* }
%struct.gs_param_typed_value_s = type { %union.gs_param_value_s, i32 }
%union.gs_param_value_s = type { %struct.gs_param_string_s }
%struct.gs_param_string_s = type { i8*, i32, i32 }
%struct.gs_param_collection_s = type { %struct.gs_param_list_s*, i32 }
%union.gs_param_enumerator_s = type { i64 }
%struct.gs_font_dir_s = type { %struct.gs_font_s*, %struct.gs_font_s*, i32, i32, %struct.fm_pair_cache_s, %struct.char_cache_s, i32, i32, i32, i32, i8*, %struct.gs_memory_s*, %struct.ttfInterpreter_s*, %struct.gx_ttfMemory_s*, i32, %struct.gx_device_spot_analyzer_s*, i32 (%struct.gs_memory_s*, %struct.gs_const_string_s*, i64*)*, i64 }
%struct.gs_font_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s }
%struct.gs_notify_list_s = type { %struct.gs_memory_s*, %struct.gs_notify_registration_s* }
%struct.gs_notify_registration_s = type { i32 (i8*, i8*)*, i8*, %struct.gs_notify_registration_s* }
%struct.gs_matrix_s = type { float, float, float, float, float, float }
%struct.gs_font_procs_s = type { i32 (%struct.gs_font_dir_s*, %struct.gs_font_s*)*, i32 (%struct.gs_font_dir_s*, %struct.gs_font_s*, %struct.gs_matrix_s*, %struct.gs_font_s**)*, i32 (%struct.gs_font_s*, %struct.gs_point_s*, i32, %struct.gs_font_info_s*)*, i32 (%struct.gs_font_s*, %struct.gs_font_s*, i32)*, i64 (%struct.gs_font_s*, i64, i32)*, i64 (%struct.gs_font_s*, i64, i32)*, i32 (%struct.gs_font_s*, i32*, i32, i64*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)*, i32 (%struct.gs_font_s*, i32, i64, %struct.gs_matrix_s*, %struct.gx_path_s*, double*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_const_string_s*)*, i32 (%struct.gs_text_enum_s*, %struct.gs_font_s*)*, i32 (%struct.gs_text_enum_s*, i64*, i64*)*, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i64, i64)* }
%struct.gs_point_s = type { double, double }
%struct.gs_font_info_s = type { i32, i32, i32, %struct.gs_int_rect_s, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gs_const_string_s, %struct.gs_const_string_s, %struct.gs_const_string_s, %struct.gs_const_string_s, i32 }
%struct.gs_int_rect_s = type { %struct.gs_int_point_s, %struct.gs_int_point_s }
%struct.gs_int_point_s = type { i32, i32 }
%struct.gs_glyph_info_s = type { i32, [2 x %struct.gs_point_s], %struct.gs_point_s, %struct.gs_rect_s, i32, i64* }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.gx_path_s = type { %struct.gx_path_segments_s, %struct.gs_memory_s*, i32, %struct.gx_path_segments_s*, %struct.segment_s*, %struct.gs_fixed_rect_s, %struct.segment_s*, i8, i8, i8, i8, i8, i32, i32, %struct.gs_fixed_point_s, %struct.gx_path_procs_s* }
%struct.gx_path_segments_s = type { %struct.rc_header_s, %struct.psc_ }
%struct.rc_header_s = type { i64, %struct.gs_memory_s*, void (%struct.gs_memory_s*, i8*, i8*)* }
%struct.psc_ = type { %struct.subpath_s*, %struct.subpath_s* }
%struct.subpath_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.segment_s*, i32, %struct.line_close_segment, i8 }
%struct.line_close_segment = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.subpath_s* }
%struct.gs_fixed_rect_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.segment_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s }
%struct.gs_fixed_point_s = type { i32, i32 }
%struct.gx_path_procs_s = type { i32 (%struct.gx_path_s*, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32)*, i8 (%struct.gx_path_s*, i8)* }
%struct.gs_text_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s }
%struct.gs_text_params_s = type { i32, %union.sd_, i32, %struct.gs_point_s, %struct.gs_point_s, %union.s_, float*, float*, i32 }
%union.sd_ = type { i8* }
%union.s_ = type { i64 }
%struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s }
%struct.gx_device_color_info_s = type { i32, i32, i32, i16, i8, i32, i32, i32, i32, %struct.gx_device_anti_alias_info_s, i32, [64 x i8], [64 x i8], [64 x i64], i8*, i32, i64, i32 }
%struct.gx_device_anti_alias_info_s = type { i32, i32 }
%struct.gx_device_cached_colors_s = type { i64, i64 }
%struct.gx_stroked_gradient_recognizer_s = type { i32, [4 x %struct.gs_fixed_point_s], [4 x %struct.gs_fixed_point_s] }
%struct.gdev_space_params_s = type { i64, i64, %struct.gx_band_params_s, i32, i32 }
%struct.gx_band_params_s = type { i32, i32, i64 }
%struct.cmm_dev_profile_s = type { [4 x %struct.cmm_profile_s*], %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, [4 x %struct.gsicc_rendering_param_s], i32, i32, i32, i32, i32, i32, %struct.gsicc_namelist_s*, i32, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.cmm_profile_s = type { i8, i8, i32, i32, i32, i32, %struct.gs_range_icc_s, i64, i32, [15 x i32], i32, i32, i32, %struct.gsicc_rendering_param_s, i8*, %struct.gx_device_s*, %struct.gsicc_namelist_s*, i8*, %struct.rc_header_s, i32, i8*, %struct.gs_memory_s*, %struct.gx_monitor_s* }
%struct.gs_range_icc_s = type { [15 x %struct.gs_range_s] }
%struct.gs_range_s = type { float, float }
%struct.gsicc_rendering_param_s = type { i32, i32, i32, i32, i32, i32 }
%struct.gx_monitor_s = type { %struct.gs_memory_s*, %union.gp_monitor }
%union.gp_monitor = type { i8* }
%struct.gsicc_namelist_s = type { i32, %struct.gsicc_colorname_s*, i8*, %struct.gs_devicen_color_map_s*, i32 }
%struct.gsicc_colorname_s = type { i8*, i32, %struct.gsicc_colorname_s* }
%struct.gs_devicen_color_map_s = type { i32, i32, i32, i32, i64, [64 x i32] }
%struct.gx_page_device_procs_s = type { i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* }
%struct.gs_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s, %struct.gs_state_s*, %struct.gs_matrix_s, i32, %struct.gs_matrix_s, i32, %struct.gx_path_s*, %struct.gx_clip_path_s*, %struct.gx_clip_stack_s*, %struct.gx_clip_path_s*, i64, i64, %struct.gx_clip_path_s*, i32, [2 x %struct.anon], %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_matrix_fixed_s, i32, i32, i32, %struct.gs_state_s*, i32, %struct.gx_device_s*, %struct.gs_device_filter_stack_s*, %struct.gs_state_client_procs_s }
%struct.gx_line_params_s = type { float, i32, i32, i32, i32, i32, float, float, float, i32, %struct.gs_matrix_s, %struct.gx_dash_params_s }
%struct.gx_dash_params_s = type { float*, i32, float, i32, float, i32, i32, float }
%struct.gs_transparency_source_s = type { float }
%struct.gs_xstate_trans_flags = type { i32, i32 }
%struct.gsicc_manager_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gsicc_devicen_s*, %struct.gsicc_smask_s*, i32, %struct.cmm_srcgtag_profile_s*, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.gsicc_devicen_s = type { %struct.gsicc_devicen_entry_s*, %struct.gsicc_devicen_entry_s*, i32 }
%struct.gsicc_devicen_entry_s = type { %struct.cmm_profile_s*, %struct.gsicc_devicen_entry_s* }
%struct.gsicc_smask_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gs_memory_s*, i32 }
%struct.cmm_srcgtag_profile_s = type { [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], %struct.cmm_profile_s*, %struct.gs_memory_s*, i32, i8*, %struct.rc_header_s }
%struct.gsicc_link_cache_s = type { %struct.gsicc_link_s*, i32, %struct.rc_header_s, %struct.gs_memory_s*, %struct.gx_monitor_s*, %struct.gx_semaphore_s*, i32 }
%struct.gsicc_link_s = type { i8*, %struct.gscms_procs_s, %struct.gsicc_hashlink_s, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_s*, %struct.gx_semaphore_s*, i32, i32, i32, i32, i32, i32, %struct.gscms_procs_s, i32, i32, i32 }
%struct.gsicc_hashlink_s = type { i64, i64, i64, i64 }
%struct.gscms_procs_s = type { void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)*, void (%struct.gx_device_s*, %struct.gsicc_link_s*, i8*, i8*, i32)*, void (%struct.gsicc_link_s*)*, i32 (i8*, i32)* }
%struct.gsicc_bufferdesc_s = type { i8, i8, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.gx_semaphore_s = type { %struct.gs_memory_s*, %union.gp_semaphore }
%union.gp_semaphore = type { i8* }
%struct.gsicc_profile_cache_s = type { %struct.gsicc_profile_entry_s*, i32, %struct.rc_header_s, %struct.gs_memory_s* }
%struct.gsicc_profile_entry_s = type { %struct.gs_color_space_s*, %struct.gsicc_profile_entry_s*, i64 }
%struct.gs_halftone_s = type opaque
%struct.gx_device_halftone_s = type opaque
%struct.gs_cie_render_s = type opaque
%struct.gx_transfer_map_s = type { %struct.rc_header_s, float (double, %struct.gx_transfer_map_s*)*, %struct.gs_mapping_closure_s, i64, [256 x i16] }
%struct.gs_mapping_closure_s = type { float (double, %struct.gx_transfer_map_s*, i8*)*, i8* }
%struct.gx_transfer_s = type { i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s* }
%struct.gx_color_map_procs_s = type { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* }
%struct.gx_pattern_cache_s = type opaque
%struct.gs_color_space_s = type { %struct.gs_color_space_type_s*, %struct.rc_header_s, i64, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.client_color_space_data_s*, %struct.cmm_profile_s*, %union.anon }
%struct.gs_color_space_type_s = type { i32, i32, i32, %struct.gs_memory_struct_type_s*, i32 (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, %struct.gs_color_space_s* (%struct.gs_color_space_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i16*, %struct.gs_imager_state_s*, %struct.gx_device_s*)*, i32 (i16*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, void (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.stream_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, float, %struct.gsicc_link_s*)*, i32 (%struct.gs_color_space_s*)* }
%struct.gs_client_color_s = type { %struct.gs_pattern_instance_s*, %struct.gs_paint_color_s }
%struct.gs_pattern_instance_s = type opaque
%struct.gs_paint_color_s = type { [64 x float] }
%struct.client_color_space_data_s = type { void (%struct.gs_color_space_s*, i32)* }
%union.anon = type { %struct.gs_device_n_params_s }
%struct.gs_device_n_params_s = type { i64*, i32, %struct.gs_device_n_map_s*, %struct.gs_device_n_attributes_s*, i32, i32 (%struct.gs_memory_s*, i64, i8**, i32*)* }
%struct.gs_device_n_map_s = type opaque
%struct.gs_device_n_attributes_s = type opaque
%struct.gx_cie_joint_caches_s = type opaque
%struct.gx_clip_stack_s = type opaque
%struct.anon = type { %struct.gs_color_space_s*, %struct.gs_client_color_s*, %struct.gx_device_color_s* }
%struct.gs_matrix_fixed_s = type { float, float, float, float, float, float, i32, i32, i32 }
%struct.gs_device_filter_stack_s = type { %struct.gs_device_filter_stack_s*, %struct.gs_device_filter_s*, %struct.gx_device_s*, %struct.rc_header_s }
%struct.gs_device_filter_s = type opaque
%struct.gs_state_client_procs_s = type { i8* (%struct.gs_memory_s*)*, i32 (i8*, i8*)*, void (i8*, %struct.gs_memory_s*)*, i32 (i8*, i8*, i32)* }
%struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i64 (%struct.gx_device_s*, i16*)*, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)*, i32 (%struct.gx_device_s*, i32, i32*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)*, i32 (%struct.gx_device_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, %struct.gs_devn_params_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, void (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* }
%struct.gx_tile_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16 }
%struct.gx_xfont_procs_s = type opaque
%struct.gx_fill_params_s = type opaque
%struct.gx_stroke_params_s = type opaque
%struct.gs_fixed_edge_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gs_image1_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s, i32, i32, i32, [130 x float], i32, i32, i32, %struct.gs_color_space_s*, i32, i32, i32, i32 }
%struct.gx_image_type_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gs_imager_state_s*, %struct.gs_image_common_s*, %struct.gs_int_point_s*)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s**)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s*)*, void (%struct.gs_image_common_s*, %struct.gs_memory_s*)*, i32 }
%struct.gs_image_common_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s }
%struct.gx_image_enum_common_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32] }
%struct.gx_image_enum_procs_s = type { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*)*, i32 (%struct.gx_image_enum_common_s*, i8*)* }
%struct.gx_image_plane_s = type { i8*, i32, i32 }
%struct.gx_strip_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16, i16, i16, i32 }
%struct.gs_get_bits_params_s = type opaque
%struct.gs_composite_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s* }
%struct.gs_composite_type_s = type { i8, %struct.gs_composite_type_procs_s }
%struct.gs_composite_type_procs_s = type { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)*, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)*, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)*, i32 (%struct.gs_composite_s*, i8, i8)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* }
%struct.gx_device_clist_writer_s = type opaque
%struct.gs_transparency_group_params_s = type { %struct.gs_color_space_s*, i32, i32, i32, i32, i32, i32, i32, i64, %struct.cmm_profile_s* }
%struct.gx_transparency_mask_params_s = type { i32, i32, i32, i32, [64 x float], float, i32, i32, i32, i32, [256 x i8], i64, %struct.cmm_profile_s* }
%struct.gx_cm_color_map_procs_s = type { void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)* }
%struct.gs_pattern1_instance_s = type opaque
%struct.gs_fill_attributes_s = type { %struct.gs_fixed_rect_s*, i32, %struct.gx_device_halftone_s*, i32, i32, i32, %struct.patch_fill_state_s* }
%struct.patch_fill_state_s = type opaque
%struct.gs_devn_params_s = type opaque
%struct.gx_process_page_options_s = type { i32 (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i32, i32, i8**)*, void (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_int_rect_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, i8*)*, i8*, i32 }
%struct.gs_imager_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s }
%struct.gx_device_color_s = type { %struct.gx_device_color_type_s*, %union._c, %struct.gs_int_point_s, i32, %struct.gs_client_color_s, %struct._mask }
%struct.gx_device_color_type_s = type { %struct.gs_memory_struct_type_s*, void (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*)*, %struct.gx_device_halftone_s* (%struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_int_point_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gx_device_color_s*, i32, i32, i32, i32, %struct.gx_device_s*, i32, %struct.gx_rop_source_s*)*, i32 (%struct.gx_device_color_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*, %struct.gx_device_s*, i64, i8*, i32*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_device_s*, i64, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_s*, i64*)* }
%struct.gx_device_color_saved_s = type { %struct.gx_device_color_type_s*, %union._svc, %struct.gs_int_point_s }
%union._svc = type { %struct._svbin, [304 x i8] }
%struct._svbin = type { [2 x i64], i32, i32 }
%struct.gx_rop_source_s = type { i8*, i32, i32, i64, [2 x i64], i32, i32 }
%union._c = type { %struct._col }
%struct._col = type { %struct.gx_device_halftone_s*, i16, [64 x i8], [64 x i32], i16, i64 }
%struct._mask = type { %struct.mp_, i64, %struct.gx_color_tile_s* }
%struct.mp_ = type { i32, i32 }
%struct.gx_color_tile_s = type opaque
%struct.gx_clip_path_s = type opaque
%struct.gs_text_enum_procs_s = type { i32 (%struct.gs_text_enum_s*, %struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*, %struct.gs_point_s*)*, i32 (%struct.gs_text_enum_s*, double*, i32)*, i32 (%struct.gs_text_enum_s*)*, void (%struct.gs_text_enum_s*, i8*)* }
%struct.cached_fm_pair_s = type { %struct.gs_font_s*, %struct.gs_uid_s, i32, i32, float, float, float, float, i32, i32, %struct.gx_xfont_s*, %struct.gs_memory_s*, i32, %struct.ttfFont_s*, %struct.gx_ttfReader_s*, i32, i32, i32 }
%struct.gs_uid_s = type { i64, i64* }
%struct.gx_xfont_s = type opaque
%struct.ttfFont_s = type opaque
%struct.gx_ttfReader_s = type opaque
%struct.gx_font_stack_s = type { i32, [6 x %struct.gx_font_stack_item_s] }
%struct.gx_font_stack_item_s = type { %struct.gs_font_s*, i32 }
%struct.gs_log2_scale_point_s = type { i32, i32 }
%struct.gs_text_returned_s = type { i64, i64, %struct.gs_point_s }
%struct.gs_show_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s, i32, %struct.gs_state_s*, i32, i32, %struct.gs_state_s*, i32, %struct.gs_int_rect_s, %struct.gs_int_rect_s, i32, i32, i64 (%struct.gs_font_s*, i64, i32)*, %struct.gx_device_memory_s*, %struct.gx_device_memory_s*, %struct.gx_device_null_s*, %struct.gs_fixed_point_s, %struct.gs_point_s, i32, %struct.gs_fixed_point_s, %struct.cached_char_s*, i32, i32 (%struct.gs_show_enum_s*)* }
%struct.gx_device_memory_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, i32, i8*, %struct.gs_memory_s*, i32, %struct.gs_memory_s*, i32, [64 x %struct.gx_render_plane_s], %struct.gs_matrix_s, i8**, %struct.gs_const_string_s, %struct._c24, %struct._c40, %struct._c48, %struct._c56, %struct._c64, %struct.gs_log2_scale_point_s, i32, i32, i32, i32, i32, i64, %struct.gx_device_color_s*, i32, i32 }
%struct.gx_render_plane_s = type { i32, i32, i32 }
%struct._c24 = type { i64, i32, i32, i32 }
%struct._c40 = type { i64, i32, i32, i32, i32, i32 }
%struct._c48 = type { i64, i32, i32, i32 }
%struct._c56 = type { i64, i32, i32, i32, i32, i32, i32, i32 }
%struct._c64 = type { i64, i32, i32 }
%struct.gx_device_null_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }
%struct.cached_char_s = type { %struct.gx_cached_bits_head_s, i16, i16, i16, i16, i64, %struct.cached_fm_pair_s*, i32, i64, i8, %struct.gx_bits_cache_chunk_s*, i32, i32, %struct.gs_fixed_point_s, i64, %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gx_cached_bits_head_s = type { i32, i32 }
%struct.gx_bits_cache_chunk_s = type { %struct.gx_bits_cache_chunk_s*, i8*, i32, i32 }
%struct.gs_font_name_s = type { [48 x i8], i32 }
%struct.fm_pair_cache_s = type { i32, i32, %struct.cached_fm_pair_s*, i32, i32, i32 }
%struct.char_cache_s = type { %struct.gx_bits_cache_chunk_s*, i32, i32, i32, %struct.gs_memory_s*, %struct.gs_memory_s*, %struct.cached_char_s**, i32, i32, i32, i32, i32, i32, i32 (%struct.gs_memory_s*, i64, i8*)*, i8* }
%struct.ttfInterpreter_s = type opaque
%struct.gx_ttfMemory_s = type opaque
%struct.gx_device_spot_analyzer_s = type opaque
%struct.gs_fapi_server_s = type opaque
%struct.gc_struct_data_s = type { i16, i16, %struct.gs_memory_struct_type_s*, %struct.gc_ptr_element_s* }
%struct.gc_ptr_element_s = type { i16, i16 }
%struct.psdf_set_color_commands_s = type { i8*, i8*, i8*, i8*, i8*, i8* }
%struct.pdf_text_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s, %struct.gs_text_enum_s*, %struct.gs_fixed_point_s, i32, i32, [10 x double], %struct.pdf_char_glyph_pairs_s*, i64 }
%struct.pdf_char_glyph_pairs_s = type { i32, i32, i32, [1 x %struct.pdf_char_glyph_pair_s] }
%struct.pdf_char_glyph_pair_s = type { i64, i64 }
%struct.gx_device_pdf_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64, i32, i32, i32, i32, i32, double, %struct.psdf_distiller_params_s, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gs_param_float_array_s, %struct.gs_param_float_array_s, i32, i32, i32, i64, i32, i32, %struct.gs_param_string_s, %struct.gs_param_string_s, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.gs_param_int_array_s, %struct.gs_param_string_s, %struct.gs_param_string_s, i32, i32, i32, %struct.gs_param_string_s, i32, i32, [32 x i8], [32 x i8], [16 x i8], i32, i32, i32, %struct.gs_rect_s, %struct.pdf_page_dsc_info_s, %struct.pdf_page_dsc_info_s, i32, i32, i32, i32, i32, i64, [4 x i64], i32, i64, i64, i32, i32, %struct.pdf_temp_file_s, %struct.pdf_temp_file_s, %struct.pdf_temp_file_s, %struct.pdf_temp_file_s, i64, %struct.cos_dict_s*, %struct.cos_dict_s*, %struct.cos_dict_s*, i64, i32, i32, i64, i32, i64, i64, i32, %struct.pdf_text_data_s*, %struct.pdf_text_rotation_s, %struct.pdf_page_s*, i32, i64, [15 x %struct.pdf_resource_list_s], [5 x %struct.pdf_resource_s*], [2 x %struct.pdf_resource_s*], %struct.pdf_resource_s*, %struct.pdf_resource_s*, i64, %struct.pdf_outline_level_s*, i32, i32, i32, i32, %struct.pdf_article_s*, %struct.cos_dict_s*, %struct.cos_dict_s*, [16 x i8], [2 x i64], %struct.cos_dict_s*, %struct.cos_dict_s*, %struct.cos_array_s*, %struct.cos_array_s*, %struct.pdf_font_cache_elem_s*, %struct.gs_point_s, %struct.gx_path_s*, %struct.cos_array_s*, i32, %struct.cos_dict_s*, %struct.gs_text_enum_s*, %struct.pdf_viewer_state_s*, i32, i32, i32, %struct.pdf_viewer_state_s, i32, i32, i32, %struct.pdf_substream_save_s*, i32, i32, i32, %struct.gs_matrix_s, %struct.cos_dict_s*, i32, i32, i32, %struct.pdf_resource_s*, %struct.pdf_resource_s*, %struct.gs_matrix_fixed_s, i32, %struct.gs_rect_s, i32, i32, i32, %struct.pdf_char_glyph_pairs_s*, i32, i32, i64, i32, i32, i32, %struct.gs_matrix_s, double, %struct.pdf_resource_s*, %struct.gs_const_string_s, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.linearisation_record_s*, i32, i32 }
%struct.gx_device_vector_procs_s = type { i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, float*, i32, double)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32, i32)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gx_path_s*, i32, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, i32)* }
%struct.gx_device_vector_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64 }
%struct.gx_hl_saved_color_s = type { i64, i64, i32, %struct.gs_client_color_s, %struct.gx_device_color_saved_s }
%struct.gx_device_bbox_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, i32, i32, %struct.gx_device_bbox_procs_s, i8*, i32, %struct.gs_fixed_rect_s, i64, i64, i64 }
%struct.gx_device_bbox_procs_s = type { i32 (i8*)*, void (i8*, %struct.gs_fixed_rect_s*)*, void (i8*, i32, i32, i32, i32)*, i32 (i8*, %struct.gs_fixed_rect_s*)* }
%struct.psdf_distiller_params_s = type { i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, %struct.gs_const_string_s, %struct.gs_const_string_s, %struct.gs_const_string_s, %struct.gs_const_string_s, i32, i32, i32, i32, i32, %struct.psdf_image_params_s, i32, i32, %struct.psdf_image_params_s, %struct.psdf_image_params_s, %struct.gs_param_string_array_s, %struct.gs_param_string_array_s, i32, i32, i32, i32, %struct.gs_param_string_s, %struct.gs_param_string_array_s }
%struct.psdf_image_params_s = type { %struct.gs_c_param_list_s*, i32, i32, i32, %struct.gs_c_param_list_s*, i32, float, i32, i32, i8*, i32, i8*, %struct.stream_template_s* }
%struct.gs_c_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32, %struct.gs_c_param_s*, %struct.gs_param_list_s*, i32, i32, i32 }
%struct.gs_c_param_s = type opaque
%struct.gs_param_string_array_s = type { %struct.gs_param_string_s*, i32, i32 }
%struct.gs_param_float_array_s = type { float*, i32, i32 }
%struct.gs_param_int_array_s = type { i32*, i32, i32 }
%struct.pdf_page_dsc_info_s = type { i32, i32, %struct.gs_rect_s }
%struct.pdf_temp_file_s = type { [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, %struct.stream_s* }
%struct.pdf_text_data_s = type { %struct.pdf_outline_fonts_s*, %struct.pdf_bitmap_fonts_s*, %struct.pdf_text_state_s* }
%struct.pdf_outline_fonts_s = type { %struct.pdf_standard_font_s* }
%struct.pdf_standard_font_s = type { %struct.pdf_font_resource_s*, %struct.gs_matrix_s }
%struct.pdf_font_resource_s = type { %struct.pdf_font_resource_s*, %struct.pdf_resource_s*, i64, i32, i32, [24 x i8], i64, %struct.cos_object_s*, i32, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s*)*, %struct.gs_string_s, %struct.pdf_font_descriptor_s*, %struct.pdf_base_font_s*, i32, double*, i8*, %struct.pdf_resource_s*, %struct.gs_cmap_s*, i32 (%struct.gs_memory_s*, i64, i8*)*, i8*, %union.anon.1 }
%struct.cos_object_s = type { %struct.cos_object_procs_s*, i64, %struct.cos_element_s*, %struct.cos_stream_piece_s*, %struct.gx_device_pdf_s*, %struct.pdf_resource_s*, i8, i8, i8, i64, %struct.stream_s*, %struct.gs_md5_state_s, i32, [16 x i8], i32, [16 x i8] }
%struct.cos_object_procs_s = type { void (%struct.cos_object_s*, i8*)*, i32 (%struct.cos_object_s*, %struct.gx_device_pdf_s*, i64)*, i32 (%struct.cos_object_s*, %struct.cos_object_s*, %struct.gx_device_pdf_s*)*, i32 (%struct.cos_object_s*, %struct.gs_md5_state_s*, i8*, %struct.gx_device_pdf_s*)* }
%struct.cos_element_s = type opaque
%struct.cos_stream_piece_s = type opaque
%struct.gs_md5_state_s = type { [2 x i32], [4 x i32], [64 x i8] }
%struct.pdf_font_descriptor_s = type opaque
%struct.pdf_base_font_s = type { %struct.gs_font_base_s*, %struct.gs_font_base_s*, i32, i32, i32, i8*, i32, %struct.gs_string_s, i32, %struct.cos_dict_s* }
%struct.gs_font_base_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s, %struct.gs_rect_s, %struct.gs_uid_s, %struct.gs_fapi_server_s*, i8*, i32, i32 }
%struct.gs_cmap_s = type { i32, i64, %struct.gs_const_string_s, %struct.gs_cid_system_info_s*, i32, float, %struct.gs_uid_s, i64, i32, i32, i32, i32 (%struct.gs_memory_s*, i64, %struct.gs_const_string_s*, i8*)*, i8*, %struct.gs_cmap_procs_s* }
%struct.gs_cid_system_info_s = type { %struct.gs_const_string_s, %struct.gs_const_string_s, i32 }
%struct.gs_cmap_procs_s = type { i32 (%struct.gs_cmap_s*, %struct.gs_const_string_s*, i32*, i32*, i64*, i64*)*, void (%struct.gs_cmap_s*, %struct.gs_cmap_ranges_enum_s*)*, void (%struct.gs_cmap_s*, i32, %struct.gs_cmap_lookups_enum_s*)*, i32 (%struct.gs_cmap_s*, i32)* }
%struct.gs_cmap_ranges_enum_s = type { %struct.gx_code_space_range_s, %struct.gs_cmap_s*, %struct.gs_cmap_ranges_enum_procs_s*, i32 }
%struct.gx_code_space_range_s = type { [4 x i8], [4 x i8], i32 }
%struct.gs_cmap_ranges_enum_procs_s = type { i32 (%struct.gs_cmap_ranges_enum_s*)* }
%struct.gs_cmap_lookups_enum_s = type { %struct.gx_cmap_lookup_entry_s, %struct.gs_cmap_s*, %struct.gs_cmap_lookups_enum_procs_s*, [2 x i32], [8 x i8] }
%struct.gx_cmap_lookup_entry_s = type { [2 x [4 x i8]], i32, i32, i32, %struct.gs_const_string_s, i32 }
%struct.gs_cmap_lookups_enum_procs_s = type { i32 (%struct.gs_cmap_lookups_enum_s*)*, i32 (%struct.gs_cmap_lookups_enum_s*)* }
%union.anon.1 = type { %struct.anon.4 }
%struct.anon.4 = type { i32, i32, i32, i32, %struct.pdf_encoding_element_s*, %struct.gs_point_s*, i32, %union.anon.5 }
%struct.pdf_encoding_element_s = type { i64, %struct.gs_const_string_s, i32 }
%union.anon.5 = type { %struct.anon.8 }
%struct.anon.8 = type { %struct.gs_rect_s, %struct.gs_matrix_s, %struct.pdf_char_proc_ownership_s*, i32, i32, %struct.cos_dict_s*, i8* }
%struct.pdf_char_proc_ownership_s = type opaque
%struct.pdf_bitmap_fonts_s = type { %struct.pdf_font_resource_s*, i32, i64, i32 }
%struct.pdf_text_state_s = type opaque
%struct.pdf_text_rotation_s = type { [5 x i64], i32 }
%struct.pdf_page_s = type { %struct.cos_dict_s*, %struct.gs_point_s, i32, i64, [7 x i64], i64, %struct.cos_array_s*, %struct.pdf_text_rotation_s, %struct.pdf_page_dsc_info_s, i32, i32 }
%struct.pdf_resource_list_s = type { [16 x %struct.pdf_resource_s*] }
%struct.pdf_outline_level_s = type { %struct.pdf_outline_node_s, %struct.pdf_outline_node_s, i32 }
%struct.pdf_outline_node_s = type { i64, i64, i64, i64, i64, i32, %struct.cos_dict_s* }
%struct.pdf_article_s = type { %struct.pdf_article_s*, %struct.cos_dict_s*, %struct.pdf_bead_s, %struct.pdf_bead_s }
%struct.pdf_bead_s = type { i64, i64, i64, i64, i64, %struct.gs_rect_s }
%struct.pdf_font_cache_elem_s = type { %struct.pdf_font_cache_elem_s*, i64, i32, i32, %struct.pdf_font_resource_s*, i8*, double*, %struct.gx_device_pdf_s* }
%struct.cos_array_s = type { %struct.cos_object_procs_s*, i64, %struct.cos_array_element_s*, %struct.cos_stream_piece_s*, %struct.gx_device_pdf_s*, %struct.pdf_resource_s*, i8, i8, i8, i64, %struct.stream_s*, %struct.gs_md5_state_s, i32, [16 x i8], i32, [16 x i8] }
%struct.cos_array_element_s = type opaque
%struct.pdf_viewer_state_s = type { i32, [4 x i64], float, float, i32, i64, i64, i64, i32, float, float, i32, i32, i32, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, %struct.gx_line_params_s, float*, i32, i64 }
%struct.pdf_substream_save_s = type { i32, %struct.pdf_text_state_s*, %struct.gx_path_s*, i64, i32, %struct.stream_s*, %struct.cos_dict_s*, i32, i32, %struct.pdf_resource_s*, %struct.pdf_resource_s*, i32, i32, %struct.pdf_resource_s*, %struct.gs_const_string_s, i32 }
%struct.cos_dict_s = type { %struct.cos_object_procs_s*, i64, %struct.cos_dict_element_s*, %struct.cos_stream_piece_s*, %struct.gx_device_pdf_s*, %struct.pdf_resource_s*, i8, i8, i8, i64, %struct.stream_s*, %struct.gs_md5_state_s, i32, [16 x i8], i32, [16 x i8] }
%struct.cos_dict_element_s = type opaque
%struct.pdf_resource_s = type { %struct.pdf_resource_s*, %struct.pdf_resource_s*, i64, i32, i32, [24 x i8], i64, %struct.cos_object_s* }
%struct.linearisation_record_s = type { i32, i32, i32*, i32, i64, i64, i64 }
%struct.gs_font_type0_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s, %struct.gs_type0_data_s }
%struct.gs_type0_data_s = type { i32, i8, i8, i8, %struct.gs_const_string_s, i32, i32, i32*, i32, %struct.gs_font_s**, i32, %struct.gs_cmap_s* }
%struct.gs_font_cid0_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s, %struct.gs_rect_s, %struct.gs_uid_s, %struct.gs_fapi_server_s*, i8*, i32, i32, %struct.gs_font_cid0_data_s }
%struct.gs_font_cid0_data_s = type { %struct.gs_font_cid_data_s, i64, %struct.gs_font_type1_s**, i32, i32, i32 (%struct.gs_font_base_s*, i64, %struct.gs_glyph_data_s*, i32*)*, i8* }
%struct.gs_font_cid_data_s = type { %struct.gs_cid_system_info_s, i32, i32, i32 }
%struct.gs_font_type1_s = type opaque
%struct.gs_glyph_data_s = type { %struct.gs_const_bytestring_s, %struct.gs_glyph_data_procs_s*, i8*, %struct.gs_memory_s* }
%struct.gs_const_bytestring_s = type { i8*, i32, i8* }
%struct.gs_glyph_data_procs_s = type { void (%struct.gs_glyph_data_s*, i8*)*, i32 (%struct.gs_glyph_data_s*, i32, i32)* }
%struct.gs_font_cid2_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s, %struct.gs_rect_s, %struct.gs_uid_s, %struct.gs_fapi_server_s*, i8*, i32, i32, %struct.gs_type42_data_s, %struct.gs_font_cid2_data_s, %struct.gs_subst_CID_on_WMode_s* }
%struct.gs_type42_data_s = type { i32 (%struct.gs_font_type42_s*, i64, i32, i8**)*, i8*, i32 (%struct.gs_font_type42_s*, i64)*, i32 (%struct.gs_font_type42_s*, i32, %struct.gs_glyph_data_s*)*, i32 (%struct.gs_font_type42_s*, i32, i32, float*)*, i32 (%struct.gs_font_type42_s*, i32, i32, i64)*, i64, i64, i32, i32, [2 x %struct.gs_type42_mtx_s], i64, i64, i64, i32, i32, i32, i32, i32, i32, i32*, %struct.gs_glyph_cache_s*, i32, i32, i8*, i64 }
%struct.gs_font_type42_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, i32, %struct.gs_notify_list_s, i64, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, i32, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s, %struct.gs_rect_s, %struct.gs_uid_s, %struct.gs_fapi_server_s*, i8*, i32, i32, %struct.gs_type42_data_s }
%struct.gs_type42_mtx_s = type { i32, i64, i32 }
%struct.gs_glyph_cache_s = type opaque
%struct.gs_font_cid2_data_s = type { %struct.gs_font_cid_data_s, i32, i32 (%struct.gs_font_cid2_s*, i64)*, %struct.o_ }
%struct.o_ = type { i32 (%struct.gs_font_type42_s*, i32, %struct.gs_glyph_data_s*)*, i32 (%struct.gs_font_type42_s*, i32, i32, float*)* }
%struct.gs_subst_CID_on_WMode_s = type { %struct.rc_header_s, [2 x i32*], [2 x i32] }
%struct.anon.2 = type { %struct.pdf_font_resource_s*, [27 x i8], %struct.gs_const_string_s, i32, i32, i32 }
%struct.pdf_glyph_widths_s = type { %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s, i32, i32, %struct.gs_rect_s }
%struct.pdf_glyph_width_s = type { double, %struct.gs_point_s, %struct.gs_point_s }
%struct.anon.3 = type { i64, i16*, i32, i64, double*, double*, i8*, %struct.pdf_font_resource_s* }
%struct.pdf_text_process_state_s = type { %struct.pdf_text_state_values_s, %struct.gs_font_s* }
%struct.pdf_text_state_values_s = type { float, %struct.pdf_font_resource_s*, double, %struct.gs_matrix_s, i32, float }
%union.bu_ = type { [12 x i64], [8 x i8] }

@.str = private unnamed_addr constant [17 x i8] c"pdf_text_release\00", align 1
@st_pdf_text_enum = internal constant %struct.gs_memory_struct_type_s { i32 568, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf_text_enum_reloc_ptrs to i8*) }, align 8
@.str.1 = private unnamed_addr constant [20 x i8] c"gdev_pdf_text_begin\00", align 1
@pdf_text_procs = internal constant %struct.gs_text_enum_procs_s { i32 (%struct.gs_text_enum_s*, %struct.gs_text_enum_s*)* @pdf_text_resync, i32 (%struct.gs_text_enum_s*)* @pdf_text_process, i32 (%struct.gs_text_enum_s*)* @pdf_text_is_width_only, i32 (%struct.gs_text_enum_s*, %struct.gs_point_s*)* @pdf_text_current_width, i32 (%struct.gs_text_enum_s*, double*, i32)* @pdf_text_set_cache, i32 (%struct.gs_text_enum_s*)* @pdf_text_retry, void (%struct.gs_text_enum_s*, i8*)* @pdf_text_release }, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"pdf_text_process\00", align 1
@st_pdf_font_cache_elem = internal constant %struct.gs_memory_struct_type_s { i32 56, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf_font_cache_elem_reloc to i8*) }, align 8
@.str.3 = private unnamed_addr constant [25 x i8] c"pdf_attach_font_resource\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"pdf_make_font3_resource\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"pdf_text_enum_t\00", align 1
@pdf_text_enum_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 2, i16 0, %struct.gs_memory_struct_type_s* @st_gs_text_enum, %struct.gc_ptr_element_s* getelementptr inbounds ([2 x %struct.gc_ptr_element_s], [2 x %struct.gc_ptr_element_s]* @pdf_text_enum_enum_ptrs, i32 0, i32 0) }, align 8
@st_gs_text_enum = external constant %struct.gs_memory_struct_type_s, align 8
@pdf_text_enum_enum_ptrs = internal constant [2 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s { i16 0, i16 448 }, %struct.gc_ptr_element_s { i16 0, i16 552 }], align 2
@st_device_memory = external constant %struct.gs_memory_struct_type_s, align 8
@.str.6 = private unnamed_addr constant [28 x i8] c"show_cache_setup(dev_cache)\00", align 1
@gx_dc_type_data_none = external constant %struct.gx_device_color_type_s, align 8
@psdf_set_stroke_color_commands = external constant %struct.psdf_set_color_commands_s, align 8
@psdf_set_fill_color_commands = external constant %struct.psdf_set_color_commands_s, align 8
@.str.7 = private unnamed_addr constant [74 x i8] c"ERROR: Page %d used undefined glyph '%s' from type 3 font '%s', key '%s'\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"0 0 0 0 0 0 d1\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"pdf_text_set_cache\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"g%04x\00", align 1
@st_gs_show_enum = external constant %struct.gs_memory_struct_type_s, align 8
@.str.11 = private unnamed_addr constant [27 x i8] c"pdf_remove_font_cache_elem\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"alloc_font_cache_elem_arrays\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"pdf_font_cache_elem_t\00", align 1
@pdf_font_cache_elem_reloc = internal constant %struct.gc_struct_data_s { i16 5, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([5 x %struct.gc_ptr_element_s], [5 x %struct.gc_ptr_element_s]* @pdf_font_cache_elem_enum, i32 0, i32 0) }, align 8
@pdf_font_cache_elem_enum = internal constant [5 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s zeroinitializer, %struct.gc_ptr_element_s { i16 0, i16 24 }, %struct.gc_ptr_element_s { i16 0, i16 32 }, %struct.gc_ptr_element_s { i16 0, i16 40 }, %struct.gc_ptr_element_s { i16 0, i16 48 }], align 16
@.str.14 = private unnamed_addr constant [28 x i8] c"pdf_alloc_text_glyphs_table\00", align 1
@gs_c_known_encodings = external constant [0 x i16*], align 8
@standard_glyph_code_for_notdef = internal global i64 2147483647, align 8
@.str.15 = private unnamed_addr constant [8 x i8] c".notdef\00", align 1
@gs_c_min_std_encoding_glyph = external constant i64, align 8

; Function Attrs: nounwind uwtable
define void @pdf_text_release_cgp(%struct.pdf_text_enum_s* %penum) #0 {
entry:
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %0 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %0, i32 0, i32 34
  %1 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !5
  %tobool = icmp ne %struct.pdf_char_glyph_pairs_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %2, i32 0, i32 8
  %3 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !17
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %3, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %4 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %memory1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 8
  %6 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory1, align 8, !tbaa !17
  %7 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp2 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %7, i32 0, i32 34
  %8 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp2, align 8, !tbaa !5
  %9 = bitcast %struct.pdf_char_glyph_pairs_s* %8 to i8*
  call void %4(%struct.gs_memory_s* %6, i8* %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0)) #7
  %10 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp3 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %10, i32 0, i32 34
  store %struct.pdf_char_glyph_pairs_s* null, %struct.pdf_char_glyph_pairs_s** %cgp3, align 8, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @gdev_pdf_text_begin(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_text_params_s* %text, %struct.gs_font_s* %font, %struct.gx_path_s* %path0, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gs_text_enum_s** %ppte) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %text.addr = alloca %struct.gs_text_params_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %path0.addr = alloca %struct.gx_path_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %ppte.addr = alloca %struct.gs_text_enum_s**, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %path = alloca %struct.gx_path_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %code = alloca i32, align 4
  %user_defined = alloca i32, align 4
  %tmat = alloca %struct.gs_matrix_s, align 4
  %p = alloca %struct.gs_point_s, align 8
  %i = alloca i32, align 4
  %font_code = alloca i32, align 4
  %chr = alloca i64, align 8
  %glyph = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_text_params_s* %text, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %path0, %struct.gx_path_s** %path0.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s** %ppte, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %2, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_path_s** %path to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load %struct.gx_path_s*, %struct.gx_path_s** %path0.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %4, %struct.gx_path_s** %path, align 8, !tbaa !1
  %5 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  %7 = bitcast i32* %user_defined to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  store i32 0, i32* %user_defined, align 4, !tbaa !21
  %8 = bitcast %struct.gs_matrix_s* %tmat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %8) #1
  %9 = bitcast %struct.gs_point_s* %p to i8*
  call void @llvm.lifetime.start(i64 16, i8* %9) #1
  %10 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %11, i32 0, i32 9
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %12, i32 0, i32 5
  %13 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %call = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %FontMatrix, %struct.gs_matrix_s* %13, %struct.gs_matrix_s* %tmat) #7
  %call1 = call i32 @gs_distance_transform(double 1.000000e+00, double 0.000000e+00, %struct.gs_matrix_s* %tmat, %struct.gs_point_s* %p) #7
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %14 = load double, double* %x, align 8, !tbaa !22
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 1
  %15 = load double, double* %y, align 8, !tbaa !23
  %call2 = call double @fabs(double %15) #8
  %cmp = fcmp ogt double %14, %call2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %if.end.24

if.else:                                          ; preds = %entry
  %x3 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %16 = load double, double* %x3, align 8, !tbaa !22
  %y4 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 1
  %17 = load double, double* %y4, align 8, !tbaa !23
  %call5 = call double @fabs(double %17) #8
  %sub = fsub double -0.000000e+00, %call5
  %cmp6 = fcmp olt double %16, %sub
  br i1 %cmp6, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %if.else
  store i32 2, i32* %i, align 4, !tbaa !21
  br label %if.end.23

if.else.8:                                        ; preds = %if.else
  %y9 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 1
  %18 = load double, double* %y9, align 8, !tbaa !23
  %x10 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %19 = load double, double* %x10, align 8, !tbaa !22
  %call11 = call double @fabs(double %19) #8
  %cmp12 = fcmp ogt double %18, %call11
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else.8
  store i32 1, i32* %i, align 4, !tbaa !21
  br label %if.end.22

if.else.14:                                       ; preds = %if.else.8
  %y15 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 1
  %20 = load double, double* %y15, align 8, !tbaa !23
  %x16 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %21 = load double, double* %x16, align 8, !tbaa !22
  %call17 = call double @fabs(double %21) #8
  %sub18 = fsub double -0.000000e+00, %call17
  %cmp19 = fcmp olt double %20, %sub18
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %if.else.14
  store i32 3, i32* %i, align 4, !tbaa !21
  br label %if.end

if.else.21:                                       ; preds = %if.else.14
  store i32 4, i32* %i, align 4, !tbaa !21
  br label %if.end

if.end:                                           ; preds = %if.else.21, %if.then.20
  br label %if.end.22

if.end.22:                                        ; preds = %if.end, %if.then.13
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then.7
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then
  %22 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %22, i32 0, i32 2
  %23 = load i32, i32* %size, align 4, !tbaa !24
  %conv = zext i32 %23 to i64
  %24 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %24 to i64
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %call25 = call %struct.pdf_page_s* @pdf_current_page(%struct.gx_device_pdf_s* %25) #7
  %text_rotation = getelementptr inbounds %struct.pdf_page_s, %struct.pdf_page_s* %call25, i32 0, i32 7
  %counts = getelementptr inbounds %struct.pdf_text_rotation_s, %struct.pdf_text_rotation_s* %text_rotation, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %counts, i32 0, i64 %idxprom
  %26 = load i64, i64* %arrayidx, align 8, !tbaa !25
  %add = add nsw i64 %26, %conv
  store i64 %add, i64* %arrayidx, align 8, !tbaa !25
  %27 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #1
  %28 = bitcast %struct.gs_point_s* %p to i8*
  call void @llvm.lifetime.end(i64 16, i8* %28) #1
  %29 = bitcast %struct.gs_matrix_s* %tmat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %29) #1
  %30 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %last_charpath_op = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %30, i32 0, i32 230
  store i32 0, i32* %last_charpath_op, align 4, !tbaa !26
  %31 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %31, i32 0, i32 0
  %32 = load i32, i32* %operation, align 4, !tbaa !64
  %and = and i32 %32, 63488
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %if.end.24
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %path0.addr, align 8, !tbaa !1
  %segments = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %33, i32 0, i32 3
  %34 = load %struct.gx_path_segments_s*, %struct.gx_path_segments_s** %segments, align 8, !tbaa !65
  %contents = getelementptr inbounds %struct.gx_path_segments_s, %struct.gx_path_segments_s* %34, i32 0, i32 1
  %subpath_first = getelementptr inbounds %struct.psc_, %struct.psc_* %contents, i32 0, i32 0
  %35 = load %struct.subpath_s*, %struct.subpath_s** %subpath_first, align 8, !tbaa !70
  %tobool26 = icmp ne %struct.subpath_s* %35, null
  br i1 %tobool26, label %if.end.36, label %if.then.27

if.then.27:                                       ; preds = %land.lhs.true
  %36 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %text28 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %36, i32 0, i32 160
  %37 = load %struct.pdf_text_data_s*, %struct.pdf_text_data_s** %text28, align 8, !tbaa !71
  %text_state = getelementptr inbounds %struct.pdf_text_data_s, %struct.pdf_text_data_s* %37, i32 0, i32 2
  %38 = load %struct.pdf_text_state_s*, %struct.pdf_text_state_s** %text_state, align 8, !tbaa !72
  %39 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %40 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %41 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %42 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %call29 = call i32 @pdf_compare_text_state_for_charpath(%struct.pdf_text_state_s* %38, %struct.gx_device_pdf_s* %39, %struct.gs_imager_state_s* %40, %struct.gs_font_s* %41, %struct.gs_text_params_s* %42) #7
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.35

if.then.31:                                       ; preds = %if.then.27
  %43 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation32 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %43, i32 0, i32 0
  %44 = load i32, i32* %operation32, align 4, !tbaa !64
  %and33 = and i32 %44, 63488
  %45 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %last_charpath_op34 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %45, i32 0, i32 230
  store i32 %and33, i32* %last_charpath_op34, align 4, !tbaa !26
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.31, %if.then.27
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %land.lhs.true, %if.end.24
  %46 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %46, i32 0, i32 11
  %47 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp37 = icmp eq i32 %47, 3
  br i1 %cmp37, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.36
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType39 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %48, i32 0, i32 11
  %49 = load i32, i32* %FontType39, align 4, !tbaa !74
  %cmp40 = icmp eq i32 %49, 53
  br i1 %cmp40, label %if.then.54, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false
  %50 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType43 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %50, i32 0, i32 11
  %51 = load i32, i32* %FontType43, align 4, !tbaa !74
  %cmp44 = icmp eq i32 %51, 51
  br i1 %cmp44, label %if.then.54, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %lor.lhs.false.42
  %52 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType47 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %52, i32 0, i32 11
  %53 = load i32, i32* %FontType47, align 4, !tbaa !74
  %cmp48 = icmp eq i32 %53, 52
  br i1 %cmp48, label %if.then.54, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %lor.lhs.false.46
  %54 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType51 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %54, i32 0, i32 11
  %55 = load i32, i32* %FontType51, align 4, !tbaa !74
  %cmp52 = icmp eq i32 %55, 54
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %lor.lhs.false.50, %lor.lhs.false.46, %lor.lhs.false.42, %lor.lhs.false, %if.end.36
  store i32 1, i32* %user_defined, align 4, !tbaa !21
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.54, %lor.lhs.false.50
  %56 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType56 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %56, i32 0, i32 11
  %57 = load i32, i32* %FontType56, align 4, !tbaa !74
  %cmp57 = icmp eq i32 %57, 0
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.113

land.lhs.true.59:                                 ; preds = %if.end.55
  %58 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %59 = bitcast %struct.gs_font_s* %58 to %struct.gs_font_type0_s*
  %data = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %59, i32 0, i32 23
  %FMapType = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data, i32 0, i32 0
  %60 = load i32, i32* %FMapType, align 4, !tbaa !79
  %cmp60 = icmp ne i32 %60, 9
  br i1 %cmp60, label %if.then.62, label %if.end.113

if.then.62:                                       ; preds = %land.lhs.true.59
  %61 = bitcast i32* %font_code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %61) #1
  %62 = bitcast i64* %chr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %62) #1
  %63 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %63) #1
  br label %do.body

do.body:                                          ; preds = %if.then.62
  %64 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %64, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %65 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !82
  %66 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call63 = call i8* %65(%struct.gs_memory_s* %66, %struct.gs_memory_struct_type_s* @st_pdf_text_enum, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0)) #7
  %67 = bitcast i8* %call63 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %67, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cmp64 = icmp eq %struct.pdf_text_enum_s* %67, null
  br i1 %cmp64, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else.67:                                       ; preds = %do.body
  br label %do.body.68

do.body.68:                                       ; preds = %if.else.67
  %68 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %68, i32 0, i32 10
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  store i64 1, i64* %ref_count, align 8, !tbaa !83
  %69 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %70 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc69 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %70, i32 0, i32 10
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc69, i32 0, i32 1
  store %struct.gs_memory_s* %69, %struct.gs_memory_s** %memory, align 8, !tbaa !84
  %71 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc70 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %71, i32 0, i32 10
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc70, i32 0, i32 2
  store void (%struct.gs_memory_s*, i8*, i8*)* @rc_free_struct_only, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !85
  br label %do.body.71

do.body.71:                                       ; preds = %do.body.68
  br label %do.cond

do.cond:                                          ; preds = %do.body.71
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.cond.72

do.cond.72:                                       ; preds = %do.end
  br label %do.end.73

do.end.73:                                        ; preds = %do.cond.72
  br label %if.end.74

if.end.74:                                        ; preds = %do.end.73
  br label %do.cond.75

do.cond.75:                                       ; preds = %if.end.74
  br label %do.end.76

do.end.76:                                        ; preds = %do.cond.75
  %72 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc77 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %72, i32 0, i32 10
  %free78 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc77, i32 0, i32 2
  store void (%struct.gs_memory_s*, i8*, i8*)* @rc_free_text_enum, void (%struct.gs_memory_s*, i8*, i8*)** %free78, align 8, !tbaa !85
  %73 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %73, i32 0, i32 29
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %74 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %74, i32 0, i32 31
  store i32 0, i32* %charproc_accum, align 4, !tbaa !87
  %75 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %accumulating_charproc = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %75, i32 0, i32 212
  store i32 0, i32* %accumulating_charproc, align 4, !tbaa !88
  %76 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cdevproc_callout = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %76, i32 0, i32 32
  store i32 0, i32* %cdevproc_callout, align 4, !tbaa !89
  %77 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %77, i32 0, i32 28
  %total_width = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 2
  %y79 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %total_width, i32 0, i32 1
  store double 0.000000e+00, double* %y79, align 8, !tbaa !90
  %78 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned80 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %78, i32 0, i32 28
  %total_width81 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned80, i32 0, i32 2
  %x82 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %total_width81, i32 0, i32 0
  store double 0.000000e+00, double* %x82, align 8, !tbaa !91
  %79 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cgp = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %79, i32 0, i32 34
  store %struct.pdf_char_glyph_pairs_s* null, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !5
  %80 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %80, i32 0, i32 35
  store i64 -1, i64* %output_char_code, align 8, !tbaa !92
  %81 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %82 = bitcast %struct.pdf_text_enum_s* %81 to %struct.gs_text_enum_s*
  %83 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %84 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %85 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %86 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %87 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %88 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %89 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %90 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call83 = call i32 @gs_text_enum_init(%struct.gs_text_enum_s* %82, %struct.gs_text_enum_procs_s* @pdf_text_procs, %struct.gx_device_s* %83, %struct.gs_imager_state_s* %84, %struct.gs_text_params_s* %85, %struct.gs_font_s* %86, %struct.gx_path_s* %87, %struct.gx_device_color_s* %88, %struct.gx_clip_path_s* %89, %struct.gs_memory_s* %90) #7
  store i32 %call83, i32* %code, align 4, !tbaa !21
  %91 = load i32, i32* %code, align 4, !tbaa !21
  %cmp84 = icmp slt i32 %91, 0
  br i1 %cmp84, label %if.then.86, label %if.end.88

if.then.86:                                       ; preds = %do.end.76
  %92 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs87 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %92, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs87, i32 0, i32 2
  %93 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %94 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %95 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %96 = bitcast %struct.pdf_text_enum_s* %95 to i8*
  call void %93(%struct.gs_memory_s* %94, i8* %96, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0)) #7
  %97 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %97, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.88:                                        ; preds = %do.end.76
  br label %do.body.89

do.body.89:                                       ; preds = %land.end, %if.end.88
  %98 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %orig_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %98, i32 0, i32 4
  %99 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font, align 8, !tbaa !93
  %procs90 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %99, i32 0, i32 20
  %next_char_glyph = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs90, i32 0, i32 11
  %100 = load i32 (%struct.gs_text_enum_s*, i64*, i64*)*, i32 (%struct.gs_text_enum_s*, i64*, i64*)** %next_char_glyph, align 8, !tbaa !94
  %101 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %102 = bitcast %struct.pdf_text_enum_s* %101 to %struct.gs_text_enum_s*
  %call91 = call i32 %100(%struct.gs_text_enum_s* %102, i64* %chr, i64* %glyph) #7
  store i32 %call91, i32* %font_code, align 4, !tbaa !21
  %103 = load i32, i32* %font_code, align 4, !tbaa !21
  %cmp92 = icmp eq i32 %103, 1
  br i1 %cmp92, label %if.then.94, label %if.end.104

if.then.94:                                       ; preds = %do.body.89
  %104 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %fstack = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %104, i32 0, i32 19
  %depth = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack, i32 0, i32 0
  %105 = load i32, i32* %depth, align 4, !tbaa !95
  %idxprom95 = sext i32 %105 to i64
  %106 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %fstack96 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %106, i32 0, i32 19
  %items = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack96, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [6 x %struct.gx_font_stack_item_s], [6 x %struct.gx_font_stack_item_s]* %items, i32 0, i64 %idxprom95
  %font98 = getelementptr inbounds %struct.gx_font_stack_item_s, %struct.gx_font_stack_item_s* %arrayidx97, i32 0, i32 0
  %107 = load %struct.gs_font_s*, %struct.gs_font_s** %font98, align 8, !tbaa !96
  %FontType99 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %107, i32 0, i32 11
  %108 = load i32, i32* %FontType99, align 4, !tbaa !74
  %cmp100 = icmp eq i32 %108, 3
  br i1 %cmp100, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.then.94
  store i32 1, i32* %user_defined, align 4, !tbaa !21
  br label %do.end.110

if.end.103:                                       ; preds = %if.then.94
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %do.body.89
  br label %do.cond.105

do.cond.105:                                      ; preds = %if.end.104
  %109 = load i32, i32* %font_code, align 4, !tbaa !21
  %cmp106 = icmp ne i32 %109, 2
  br i1 %cmp106, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond.105
  %110 = load i32, i32* %font_code, align 4, !tbaa !21
  %cmp108 = icmp sge i32 %110, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond.105
  %111 = phi i1 [ false, %do.cond.105 ], [ %cmp108, %land.rhs ]
  br i1 %111, label %do.body.89, label %do.end.110

do.end.110:                                       ; preds = %land.end, %if.then.102
  %112 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %113 = bitcast %struct.pdf_text_enum_s* %112 to %struct.gs_text_enum_s*
  call void @gs_text_release(%struct.gs_text_enum_s* %113, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)) #7
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.110, %if.then.86, %if.then.66
  %114 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #1
  %115 = bitcast i64* %chr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #1
  %116 = bitcast i32* %font_code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %116) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.224 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.113

if.end.113:                                       ; preds = %cleanup.cont, %land.lhs.true.59, %if.end.55
  %117 = load i32, i32* %user_defined, align 4, !tbaa !21
  %tobool114 = icmp ne i32 %117, 0
  br i1 %tobool114, label %lor.lhs.false.115, label %if.then.119

lor.lhs.false.115:                                ; preds = %if.end.113
  %118 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation116 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %118, i32 0, i32 0
  %119 = load i32, i32* %operation116, align 4, !tbaa !64
  %and117 = and i32 %119, 63488
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %if.end.167, label %if.then.119

if.then.119:                                      ; preds = %lor.lhs.false.115, %if.end.113
  %120 = load i32, i32* %user_defined, align 4, !tbaa !21
  %tobool120 = icmp ne i32 %120, 0
  br i1 %tobool120, label %land.lhs.true.121, label %if.else.138

land.lhs.true.121:                                ; preds = %if.then.119
  %121 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation122 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %121, i32 0, i32 0
  %122 = load i32, i32* %operation122, align 4, !tbaa !64
  %and123 = and i32 %122, 512
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %land.lhs.true.125, label %if.else.138

land.lhs.true.125:                                ; preds = %land.lhs.true.121
  %123 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation126 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %123, i32 0, i32 0
  %124 = load i32, i32* %operation126, align 4, !tbaa !64
  %and127 = and i32 %124, 131072
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %land.lhs.true.129, label %if.else.138

land.lhs.true.129:                                ; preds = %land.lhs.true.125
  %125 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %125, i32 0, i32 18
  %126 = load i32, i32* %text_rendering_mode, align 4, !tbaa !98
  %cmp130 = icmp ne i32 %126, 3
  br i1 %cmp130, label %if.then.132, label %if.else.138

if.then.132:                                      ; preds = %land.lhs.true.129
  %127 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call133 = call i32 @gx_hld_stringwidth_begin(%struct.gs_imager_state_s* %127, %struct.gx_path_s** %path) #7
  store i32 %call133, i32* %code, align 4, !tbaa !21
  %128 = load i32, i32* %code, align 4, !tbaa !21
  %cmp134 = icmp slt i32 %128, 0
  br i1 %cmp134, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %if.then.132
  %129 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %129, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.end.137:                                       ; preds = %if.then.132
  br label %if.end.166

if.else.138:                                      ; preds = %land.lhs.true.129, %land.lhs.true.125, %land.lhs.true.121, %if.then.119
  %130 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation139 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %130, i32 0, i32 0
  %131 = load i32, i32* %operation139, align 4, !tbaa !64
  %and140 = and i32 %131, 1024
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %lor.lhs.false.146, label %land.lhs.true.142

land.lhs.true.142:                                ; preds = %if.else.138
  %132 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode143 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %132, i32 0, i32 18
  %133 = load i32, i32* %text_rendering_mode143, align 4, !tbaa !98
  %cmp144 = icmp ne i32 %133, 3
  br i1 %cmp144, label %if.then.156, label %lor.lhs.false.146

lor.lhs.false.146:                                ; preds = %land.lhs.true.142, %if.else.138
  %134 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %cmp147 = icmp eq %struct.gx_path_s* %134, null
  br i1 %cmp147, label %if.then.156, label %lor.lhs.false.149

lor.lhs.false.149:                                ; preds = %lor.lhs.false.146
  %135 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %state_flags = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %135, i32 0, i32 8
  %136 = load i8, i8* %state_flags, align 1, !tbaa !99
  %conv150 = zext i8 %136 to i32
  %and151 = and i32 %conv150, 1
  %cmp152 = icmp ne i32 %and151, 0
  br i1 %cmp152, label %lor.lhs.false.154, label %if.then.156

lor.lhs.false.154:                                ; preds = %lor.lhs.false.149
  %137 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %137, i32 0, i32 231
  %138 = load i32, i32* %type3charpath, align 4, !tbaa !100
  %tobool155 = icmp ne i32 %138, 0
  br i1 %tobool155, label %if.then.156, label %if.else.158

if.then.156:                                      ; preds = %lor.lhs.false.154, %lor.lhs.false.149, %lor.lhs.false.146, %land.lhs.true.142
  %139 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %140 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %141 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %142 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %143 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %144 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %145 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %146 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %147 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  %call157 = call i32 @gx_default_text_begin(%struct.gx_device_s* %139, %struct.gs_imager_state_s* %140, %struct.gs_text_params_s* %141, %struct.gs_font_s* %142, %struct.gx_path_s* %143, %struct.gx_device_color_s* %144, %struct.gx_clip_path_s* %145, %struct.gs_memory_s* %146, %struct.gs_text_enum_s** %147) #7
  store i32 %call157, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.else.158:                                      ; preds = %lor.lhs.false.154
  %148 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation159 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %148, i32 0, i32 0
  %149 = load i32, i32* %operation159, align 4, !tbaa !64
  %and160 = and i32 %149, 63488
  %tobool161 = icmp ne i32 %and160, 0
  br i1 %tobool161, label %if.then.162, label %if.end.164

if.then.162:                                      ; preds = %if.else.158
  %150 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %151 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %152 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %153 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %154 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %155 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %156 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %157 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %158 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  %call163 = call i32 @gx_default_text_begin(%struct.gx_device_s* %150, %struct.gs_imager_state_s* %151, %struct.gs_text_params_s* %152, %struct.gs_font_s* %153, %struct.gx_path_s* %154, %struct.gx_device_color_s* %155, %struct.gx_clip_path_s* %156, %struct.gs_memory_s* %157, %struct.gs_text_enum_s** %158) #7
  store i32 %call163, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.end.164:                                       ; preds = %if.else.158
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165, %if.end.137
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %lor.lhs.false.115
  %159 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %ForOPDFRead = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %159, i32 0, i32 99
  %160 = load i32, i32* %ForOPDFRead, align 4, !tbaa !101
  %tobool168 = icmp ne i32 %160, 0
  br i1 %tobool168, label %if.end.175, label %if.then.169

if.then.169:                                      ; preds = %if.end.167
  %161 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %162 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %163 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %164 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call170 = call i32 @pdf_prepare_text_color(%struct.gx_device_pdf_s* %161, %struct.gs_imager_state_s* %162, %struct.gs_text_params_s* %163, %struct.gs_font_s* %164) #7
  store i32 %call170, i32* %code, align 4, !tbaa !21
  %165 = load i32, i32* %code, align 4, !tbaa !21
  %cmp171 = icmp ne i32 %165, 0
  br i1 %cmp171, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %if.then.169
  %166 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %166, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.end.174:                                       ; preds = %if.then.169
  br label %if.end.175

if.end.175:                                       ; preds = %if.end.174, %if.end.167
  br label %do.body.176

do.body.176:                                      ; preds = %if.end.175
  %167 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs177 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %167, i32 0, i32 1
  %alloc_struct178 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs177, i32 0, i32 8
  %168 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct178, align 8, !tbaa !82
  %169 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call179 = call i8* %168(%struct.gs_memory_s* %169, %struct.gs_memory_struct_type_s* @st_pdf_text_enum, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0)) #7
  %170 = bitcast i8* %call179 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %170, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cmp180 = icmp eq %struct.pdf_text_enum_s* %170, null
  br i1 %cmp180, label %if.then.182, label %if.else.183

if.then.182:                                      ; preds = %do.body.176
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.else.183:                                      ; preds = %do.body.176
  br label %do.body.184

do.body.184:                                      ; preds = %if.else.183
  %171 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc185 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %171, i32 0, i32 10
  %ref_count186 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc185, i32 0, i32 0
  store i64 1, i64* %ref_count186, align 8, !tbaa !83
  %172 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %173 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc187 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %173, i32 0, i32 10
  %memory188 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc187, i32 0, i32 1
  store %struct.gs_memory_s* %172, %struct.gs_memory_s** %memory188, align 8, !tbaa !84
  %174 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc189 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %174, i32 0, i32 10
  %free190 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc189, i32 0, i32 2
  store void (%struct.gs_memory_s*, i8*, i8*)* @rc_free_struct_only, void (%struct.gs_memory_s*, i8*, i8*)** %free190, align 8, !tbaa !85
  br label %do.body.191

do.body.191:                                      ; preds = %do.body.184
  br label %do.cond.192

do.cond.192:                                      ; preds = %do.body.191
  br label %do.end.193

do.end.193:                                       ; preds = %do.cond.192
  br label %do.cond.194

do.cond.194:                                      ; preds = %do.end.193
  br label %do.end.195

do.end.195:                                       ; preds = %do.cond.194
  br label %if.end.196

if.end.196:                                       ; preds = %do.end.195
  br label %do.cond.197

do.cond.197:                                      ; preds = %if.end.196
  br label %do.end.198

do.end.198:                                       ; preds = %do.cond.197
  %175 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %rc199 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %175, i32 0, i32 10
  %free200 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc199, i32 0, i32 2
  store void (%struct.gs_memory_s*, i8*, i8*)* @rc_free_text_enum, void (%struct.gs_memory_s*, i8*, i8*)** %free200, align 8, !tbaa !85
  %176 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default201 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %176, i32 0, i32 29
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte_default201, align 8, !tbaa !86
  %177 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %charproc_accum202 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %177, i32 0, i32 31
  store i32 0, i32* %charproc_accum202, align 4, !tbaa !87
  %178 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %accumulating_charproc203 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %178, i32 0, i32 212
  store i32 0, i32* %accumulating_charproc203, align 4, !tbaa !88
  %179 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cdevproc_callout204 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %179, i32 0, i32 32
  store i32 0, i32* %cdevproc_callout204, align 4, !tbaa !89
  %180 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned205 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %180, i32 0, i32 28
  %total_width206 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned205, i32 0, i32 2
  %y207 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %total_width206, i32 0, i32 1
  store double 0.000000e+00, double* %y207, align 8, !tbaa !90
  %181 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned208 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %181, i32 0, i32 28
  %total_width209 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned208, i32 0, i32 2
  %x210 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %total_width209, i32 0, i32 0
  store double 0.000000e+00, double* %x210, align 8, !tbaa !91
  %182 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cgp211 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %182, i32 0, i32 34
  store %struct.pdf_char_glyph_pairs_s* null, %struct.pdf_char_glyph_pairs_s** %cgp211, align 8, !tbaa !5
  %183 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %output_char_code212 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %183, i32 0, i32 35
  store i64 -1, i64* %output_char_code212, align 8, !tbaa !92
  %184 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %185 = bitcast %struct.pdf_text_enum_s* %184 to %struct.gs_text_enum_s*
  %186 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %187 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %188 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %189 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %190 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !1
  %191 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %192 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %193 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call213 = call i32 @gs_text_enum_init(%struct.gs_text_enum_s* %185, %struct.gs_text_enum_procs_s* @pdf_text_procs, %struct.gx_device_s* %186, %struct.gs_imager_state_s* %187, %struct.gs_text_params_s* %188, %struct.gs_font_s* %189, %struct.gx_path_s* %190, %struct.gx_device_color_s* %191, %struct.gx_clip_path_s* %192, %struct.gs_memory_s* %193) #7
  store i32 %call213, i32* %code, align 4, !tbaa !21
  %194 = load i32, i32* %code, align 4, !tbaa !21
  %cmp214 = icmp slt i32 %194, 0
  br i1 %cmp214, label %if.then.216, label %if.end.219

if.then.216:                                      ; preds = %do.end.198
  %195 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs217 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %195, i32 0, i32 1
  %free_object218 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs217, i32 0, i32 2
  %196 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object218, align 8, !tbaa !18
  %197 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %198 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %199 = bitcast %struct.pdf_text_enum_s* %198 to i8*
  call void %196(%struct.gs_memory_s* %197, i8* %199, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0)) #7
  %200 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %200, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

if.end.219:                                       ; preds = %do.end.198
  %201 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %font3 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %201, i32 0, i32 209
  %202 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %font3, align 8, !tbaa !102
  %cmp220 = icmp ne %struct.pdf_resource_s* %202, null
  br i1 %cmp220, label %if.then.222, label %if.end.223

if.then.222:                                      ; preds = %if.end.219
  %203 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %device_disabled_grid_fitting = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %203, i32 0, i32 25
  store i32 1, i32* %device_disabled_grid_fitting, align 4, !tbaa !103
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.222, %if.end.219
  %204 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %205 = bitcast %struct.pdf_text_enum_s* %204 to %struct.gs_text_enum_s*
  %206 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %205, %struct.gs_text_enum_s** %206, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.224

cleanup.224:                                      ; preds = %if.end.223, %if.then.216, %if.then.182, %if.then.173, %if.then.162, %if.then.156, %if.then.136, %cleanup
  %207 = bitcast i32* %user_defined to i8*
  call void @llvm.lifetime.end(i64 4, i8* %207) #1
  %208 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %208) #1
  %209 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %209) #1
  %210 = bitcast %struct.gx_path_s** %path to i8*
  call void @llvm.lifetime.end(i64 8, i8* %210) #1
  %211 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %211) #1
  %212 = load i32, i32* %retval
  ret i32 %212
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

declare i32 @gs_matrix_multiply(%struct.gs_matrix_s*, %struct.gs_matrix_s*, %struct.gs_matrix_s*) #2

declare i32 @gs_distance_transform(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2

; Function Attrs: nounwind readnone
declare double @fabs(double) #3

declare %struct.pdf_page_s* @pdf_current_page(%struct.gx_device_pdf_s*) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

declare i32 @pdf_compare_text_state_for_charpath(%struct.pdf_text_state_s*, %struct.gx_device_pdf_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gs_text_params_s*) #2

declare void @rc_free_struct_only(%struct.gs_memory_s*, i8*, i8*) #2

declare void @rc_free_text_enum(%struct.gs_memory_s*, i8*, i8*) #2

declare i32 @gs_text_enum_init(%struct.gs_text_enum_s*, %struct.gs_text_enum_procs_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*) #2

declare void @gs_text_release(%struct.gs_text_enum_s*, i8*) #2

declare i32 @gx_hld_stringwidth_begin(%struct.gs_imager_state_s*, %struct.gx_path_s**) #2

declare i32 @gx_default_text_begin(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_prepare_text_color(%struct.gx_device_pdf_s* %pdev, %struct.gs_imager_state_s* %pis, %struct.gs_text_params_s* %text, %struct.gs_font_s* %font) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %text.addr = alloca %struct.gs_text_params_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %code = alloca i32, align 4
  %pgs = alloca %struct.gs_state_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_text_params_s* %text, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %code, align 4, !tbaa !21
  %1 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %1, i32 0, i32 0
  %2 = load i32, i32* %operation, align 4, !tbaa !64
  %and = and i32 %2, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.106

if.then:                                          ; preds = %entry
  %3 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_imager_state_s* %4 to %struct.gs_state_s*
  store %struct.gs_state_s* %5, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %6 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %6, i32 0, i32 99
  %7 = load i32, i32* %ForOPDFRead, align 4, !tbaa !101
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %if.end.105, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 18
  %9 = load i32, i32* %text_rendering_mode, align 4, !tbaa !98
  %cmp = icmp ne i32 %9, 3
  br i1 %cmp, label %land.lhs.true, label %if.end.104

land.lhs.true:                                    ; preds = %if.then.2
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode3 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %10, i32 0, i32 18
  %11 = load i32, i32* %text_rendering_mode3, align 4, !tbaa !98
  %cmp4 = icmp ne i32 %11, 7
  br i1 %cmp4, label %if.then.5, label %if.end.104

if.then.5:                                        ; preds = %land.lhs.true
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %PaintType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %12, i32 0, i32 17
  %13 = load i32, i32* %PaintType, align 4, !tbaa !104
  %cmp6 = icmp eq i32 %13, 2
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 69
  %arrayidx = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color, i32 0, i64 0
  %dev_color = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 2
  %15 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color, align 8, !tbaa !105
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %15, i32 0, i32 0
  %16 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !107
  %cmp8 = icmp ne %struct.gx_device_color_type_s* %16, @gx_dc_type_data_none
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.7
  br label %cond.end

cond.false:                                       ; preds = %if.then.7
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call = call i32 @gx_remap_color(%struct.gs_state_s* %17) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %code, align 4, !tbaa !21
  %18 = load i32, i32* %code, align 4, !tbaa !21
  %cmp9 = icmp ne i32 %18, 0
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %cond.end
  %19 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %19, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %21 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %22, i32 0, i32 69
  %arrayidx12 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color11, i32 0, i64 0
  %dev_color13 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx12, i32 0, i32 2
  %23 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color13, align 8, !tbaa !105
  %24 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_stroke_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %24, i32 0, i32 57
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %stroke_used_process_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %25, i32 0, i32 55
  %call14 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %20, %struct.gs_imager_state_s* %21, %struct.gx_device_color_s* %23, %struct.gx_hl_saved_color_s* %saved_stroke_color, i32* %stroke_used_process_color, %struct.psdf_set_color_commands_s* @psdf_set_stroke_color_commands) #7
  store i32 %call14, i32* %code, align 4, !tbaa !21
  %26 = load i32, i32* %code, align 4, !tbaa !21
  %cmp15 = icmp slt i32 %26, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end
  %27 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.17:                                        ; preds = %if.end
  br label %if.end.103

if.else:                                          ; preds = %if.then.5
  %28 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %28, i32 0, i32 18
  %29 = load i32, i32* %text_rendering_mode18, align 4, !tbaa !98
  %cmp19 = icmp eq i32 %29, 0
  br i1 %cmp19, label %land.lhs.true.28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %30 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %30, i32 0, i32 18
  %31 = load i32, i32* %text_rendering_mode20, align 4, !tbaa !98
  %cmp21 = icmp eq i32 %31, 2
  br i1 %cmp21, label %land.lhs.true.28, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false
  %32 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode23 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %32, i32 0, i32 18
  %33 = load i32, i32* %text_rendering_mode23, align 4, !tbaa !98
  %cmp24 = icmp eq i32 %33, 4
  br i1 %cmp24, label %land.lhs.true.28, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.22
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode26 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %34, i32 0, i32 18
  %35 = load i32, i32* %text_rendering_mode26, align 4, !tbaa !98
  %cmp27 = icmp eq i32 %35, 6
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.44

land.lhs.true.28:                                 ; preds = %lor.lhs.false.25, %lor.lhs.false.22, %lor.lhs.false, %if.else
  %36 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_stroke_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %36, i32 0, i32 135
  %37 = load i32, i32* %remap_stroke_color, align 4, !tbaa !111
  %tobool29 = icmp ne i32 %37, 0
  br i1 %tobool29, label %if.end.44, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.28
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 69
  %arrayidx32 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color31, i32 0, i64 0
  %dev_color33 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx32, i32 0, i32 2
  %39 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color33, align 8, !tbaa !105
  %type34 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %39, i32 0, i32 0
  %40 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type34, align 8, !tbaa !107
  %cmp35 = icmp ne %struct.gx_device_color_type_s* %40, @gx_dc_type_data_none
  br i1 %cmp35, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %if.then.30
  br label %cond.end.39

cond.false.37:                                    ; preds = %if.then.30
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call38 = call i32 @gx_remap_color(%struct.gs_state_s* %41) #7
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.37, %cond.true.36
  %cond40 = phi i32 [ 0, %cond.true.36 ], [ %call38, %cond.false.37 ]
  store i32 %cond40, i32* %code, align 4, !tbaa !21
  %42 = load i32, i32* %code, align 4, !tbaa !21
  %cmp41 = icmp ne i32 %42, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %cond.end.39
  %43 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %43, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.43:                                        ; preds = %cond.end.39
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true.28, %lor.lhs.false.25
  %44 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode45 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %44, i32 0, i32 18
  %45 = load i32, i32* %text_rendering_mode45, align 4, !tbaa !98
  %cmp46 = icmp eq i32 %45, 1
  br i1 %cmp46, label %if.then.56, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %if.end.44
  %46 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode48 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %46, i32 0, i32 18
  %47 = load i32, i32* %text_rendering_mode48, align 4, !tbaa !98
  %cmp49 = icmp eq i32 %47, 2
  br i1 %cmp49, label %if.then.56, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %lor.lhs.false.47
  %48 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode51 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %48, i32 0, i32 18
  %49 = load i32, i32* %text_rendering_mode51, align 4, !tbaa !98
  %cmp52 = icmp eq i32 %49, 5
  br i1 %cmp52, label %if.then.56, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.50
  %50 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_rendering_mode54 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %50, i32 0, i32 18
  %51 = load i32, i32* %text_rendering_mode54, align 4, !tbaa !98
  %cmp55 = icmp eq i32 %51, 6
  br i1 %cmp55, label %if.then.56, label %if.end.102

if.then.56:                                       ; preds = %lor.lhs.false.53, %lor.lhs.false.50, %lor.lhs.false.47, %if.end.44
  %52 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_fill_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %52, i32 0, i32 134
  %53 = load i32, i32* %remap_fill_color, align 4, !tbaa !112
  %tobool57 = icmp ne i32 %53, 0
  br i1 %tobool57, label %if.else.82, label %if.then.58

if.then.58:                                       ; preds = %if.then.56
  %54 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_stroke_color59 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %54, i32 0, i32 135
  %55 = load i32, i32* %remap_stroke_color59, align 4, !tbaa !111
  %tobool60 = icmp ne i32 %55, 0
  br i1 %tobool60, label %if.then.61, label %if.else.63

if.then.61:                                       ; preds = %if.then.58
  %56 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_stroke_color62 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %56, i32 0, i32 135
  store i32 0, i32* %remap_stroke_color62, align 4, !tbaa !111
  br label %if.end.81

if.else.63:                                       ; preds = %if.then.58
  %57 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  call void @gs_swapcolors_quick(%struct.gs_state_s* %57) #7
  %58 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color64 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %58, i32 0, i32 69
  %arrayidx65 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color64, i32 0, i64 0
  %dev_color66 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx65, i32 0, i32 2
  %59 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color66, align 8, !tbaa !105
  %type67 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %59, i32 0, i32 0
  %60 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type67, align 8, !tbaa !107
  %cmp68 = icmp ne %struct.gx_device_color_type_s* %60, @gx_dc_type_data_none
  br i1 %cmp68, label %cond.true.69, label %cond.false.70

cond.true.69:                                     ; preds = %if.else.63
  br label %cond.end.72

cond.false.70:                                    ; preds = %if.else.63
  %61 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call71 = call i32 @gx_remap_color(%struct.gs_state_s* %61) #7
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.70, %cond.true.69
  %cond73 = phi i32 [ 0, %cond.true.69 ], [ %call71, %cond.false.70 ]
  store i32 %cond73, i32* %code, align 4, !tbaa !21
  %62 = load i32, i32* %code, align 4, !tbaa !21
  %cmp74 = icmp eq i32 %62, -103
  br i1 %cmp74, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %cond.end.72
  %63 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_stroke_color76 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %63, i32 0, i32 135
  store i32 1, i32* %remap_stroke_color76, align 4, !tbaa !111
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.75, %cond.end.72
  %64 = load i32, i32* %code, align 4, !tbaa !21
  %cmp78 = icmp ne i32 %64, 0
  br i1 %cmp78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.77
  %65 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %65, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.80:                                        ; preds = %if.end.77
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.then.61
  br label %if.end.84

if.else.82:                                       ; preds = %if.then.56
  %66 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_fill_color83 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %66, i32 0, i32 134
  store i32 0, i32* %remap_fill_color83, align 4, !tbaa !112
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.82, %if.end.81
  %67 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  call void @gs_swapcolors_quick(%struct.gs_state_s* %67) #7
  %68 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color85 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %68, i32 0, i32 69
  %arrayidx86 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color85, i32 0, i64 0
  %dev_color87 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx86, i32 0, i32 2
  %69 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color87, align 8, !tbaa !105
  %type88 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %69, i32 0, i32 0
  %70 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type88, align 8, !tbaa !107
  %cmp89 = icmp ne %struct.gx_device_color_type_s* %70, @gx_dc_type_data_none
  br i1 %cmp89, label %cond.true.90, label %cond.false.91

cond.true.90:                                     ; preds = %if.end.84
  br label %cond.end.93

cond.false.91:                                    ; preds = %if.end.84
  %71 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call92 = call i32 @gx_remap_color(%struct.gs_state_s* %71) #7
  br label %cond.end.93

cond.end.93:                                      ; preds = %cond.false.91, %cond.true.90
  %cond94 = phi i32 [ 0, %cond.true.90 ], [ %call92, %cond.false.91 ]
  store i32 %cond94, i32* %code, align 4, !tbaa !21
  %72 = load i32, i32* %code, align 4, !tbaa !21
  %cmp95 = icmp eq i32 %72, -103
  br i1 %cmp95, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %cond.end.93
  %73 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %remap_fill_color97 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %73, i32 0, i32 134
  store i32 1, i32* %remap_fill_color97, align 4, !tbaa !112
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.96, %cond.end.93
  %74 = load i32, i32* %code, align 4, !tbaa !21
  %cmp99 = icmp ne i32 %74, 0
  br i1 %cmp99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %if.end.98
  %75 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %75, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.101:                                       ; preds = %if.end.98
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %lor.lhs.false.53
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.17
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true, %if.then.2
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.then
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.105, %if.then.100, %if.then.79, %if.then.42, %if.then.16, %if.then.10
  %76 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %76) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.107 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.106

if.end.106:                                       ; preds = %cleanup.cont, %entry
  %77 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %77, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.107

cleanup.107:                                      ; preds = %if.end.106, %cleanup
  %78 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %78) #1
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define %struct.pdf_font_cache_elem_s** @pdf_locate_font_cache_elem(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font) #0 {
entry:
  %retval = alloca %struct.pdf_font_cache_elem_s**, align 8
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %e = alloca %struct.pdf_font_cache_elem_s**, align 8
  %id = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font_cache = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %1, i32 0, i32 185
  store %struct.pdf_font_cache_elem_s** %font_cache, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %2 = bitcast i64* %id to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  %3 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call = call i64 @pdf_font_cache_elem_id(%struct.gs_font_s* %3) #7
  store i64 %call, i64* %id, align 8, !tbaa !25
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %5 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %4, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf_font_cache_elem_s* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %7 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %6, align 8, !tbaa !1
  %font_id = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %7, i32 0, i32 1
  %8 = load i64, i64* %font_id, align 8, !tbaa !113
  %9 = load i64, i64* %id, align 8, !tbaa !25
  %cmp1 = icmp eq i64 %8, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %10 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  store %struct.pdf_font_cache_elem_s** %10, %struct.pdf_font_cache_elem_s*** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %12 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %11, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %12, i32 0, i32 0
  store %struct.pdf_font_cache_elem_s** %next, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.pdf_font_cache_elem_s** null, %struct.pdf_font_cache_elem_s*** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %13 = bitcast i64* %id to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #1
  %14 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #1
  %15 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %retval
  ret %struct.pdf_font_cache_elem_s** %15
}

; Function Attrs: nounwind uwtable
define internal i64 @pdf_font_cache_elem_id(%struct.gs_font_s* %font) #0 {
entry:
  %font.addr = alloca %struct.gs_font_s*, align 8
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %id = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %0, i32 0, i32 6
  %1 = load i64, i64* %id, align 8, !tbaa !115
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i32 @pdf_free_font_cache(%struct.gx_device_pdf_s* %pdev) #0 {
entry:
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %e = alloca %struct.pdf_font_cache_elem_s*, align 8
  %next = alloca %struct.pdf_font_cache_elem_s*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_font_cache_elem_s** %e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font_cache = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %1, i32 0, i32 185
  %2 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %font_cache, align 8, !tbaa !116
  store %struct.pdf_font_cache_elem_s* %2, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %3 = bitcast %struct.pdf_font_cache_elem_s** %next to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf_font_cache_elem_s* %4, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %next1 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %5, i32 0, i32 0
  %6 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %next1, align 8, !tbaa !117
  store %struct.pdf_font_cache_elem_s* %6, %struct.pdf_font_cache_elem_s** %next, align 8, !tbaa !1
  %7 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  call void @pdf_remove_font_cache_elem(%struct.pdf_font_cache_elem_s* %7) #7
  %8 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %next, align 8, !tbaa !1
  store %struct.pdf_font_cache_elem_s* %8, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font_cache2 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 185
  store %struct.pdf_font_cache_elem_s* null, %struct.pdf_font_cache_elem_s** %font_cache2, align 8, !tbaa !116
  %10 = bitcast %struct.pdf_font_cache_elem_s** %next to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #1
  %11 = bitcast %struct.pdf_font_cache_elem_s** %e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @pdf_remove_font_cache_elem(%struct.pdf_font_cache_elem_s* %e0) #0 {
entry:
  %e0.addr = alloca %struct.pdf_font_cache_elem_s*, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %e = alloca %struct.pdf_font_cache_elem_s**, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_font_cache_elem_s* %e0, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %pdev1 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %1, i32 0, i32 7
  %2 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev1, align 8, !tbaa !118
  store %struct.gx_device_pdf_s* %2, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %font_cache = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %4, i32 0, i32 185
  store %struct.pdf_font_cache_elem_s** %font_cache, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %6 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %5, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf_font_cache_elem_s* %6, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %8 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %7, align 8, !tbaa !1
  %9 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %cmp2 = icmp eq %struct.pdf_font_cache_elem_s* %8, %9
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %10 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %10, i32 0, i32 0
  %11 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %next, align 8, !tbaa !117
  %12 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  store %struct.pdf_font_cache_elem_s* %11, %struct.pdf_font_cache_elem_s** %12, align 8, !tbaa !1
  %13 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %13, i32 0, i32 43
  %14 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory, align 8, !tbaa !119
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %14, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %15 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %16 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory3 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %16, i32 0, i32 43
  %17 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory3, align 8, !tbaa !119
  %18 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %glyph_usage = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %18, i32 0, i32 5
  %19 = load i8*, i8** %glyph_usage, align 8, !tbaa !120
  call void %15(%struct.gs_memory_s* %17, i8* %19, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0)) #7
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory4 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %20, i32 0, i32 43
  %21 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory4, align 8, !tbaa !119
  %procs5 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %21, i32 0, i32 1
  %free_object6 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs5, i32 0, i32 2
  %22 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object6, align 8, !tbaa !18
  %23 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory7 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %23, i32 0, i32 43
  %24 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory7, align 8, !tbaa !119
  %25 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %real_widths = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %25, i32 0, i32 6
  %26 = load double*, double** %real_widths, align 8, !tbaa !121
  %27 = bitcast double* %26 to i8*
  call void %22(%struct.gs_memory_s* %24, i8* %27, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0)) #7
  %28 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %next8 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %28, i32 0, i32 0
  store %struct.pdf_font_cache_elem_s* null, %struct.pdf_font_cache_elem_s** %next8, align 8, !tbaa !117
  %29 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %glyph_usage9 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %29, i32 0, i32 5
  store i8* null, i8** %glyph_usage9, align 8, !tbaa !120
  %30 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %real_widths10 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %30, i32 0, i32 6
  store double* null, double** %real_widths10, align 8, !tbaa !121
  %31 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %pdev11 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %31, i32 0, i32 7
  store %struct.gx_device_pdf_s* null, %struct.gx_device_pdf_s** %pdev11, align 8, !tbaa !118
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory12 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %32, i32 0, i32 43
  %33 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory12, align 8, !tbaa !119
  %procs13 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %33, i32 0, i32 1
  %free_object14 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs13, i32 0, i32 2
  %34 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object14, align 8, !tbaa !18
  %35 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %v_memory15 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %35, i32 0, i32 43
  %36 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory15, align 8, !tbaa !119
  %37 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e0.addr, align 8, !tbaa !1
  %38 = bitcast %struct.pdf_font_cache_elem_s* %37 to i8*
  call void %34(%struct.gs_memory_s* %36, i8* %38, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0)) #7
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %39 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %40 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %39, align 8, !tbaa !1
  %next16 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %40, i32 0, i32 0
  store %struct.pdf_font_cache_elem_s** %next16, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %41 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #1
  %42 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, %struct.pdf_font_resource_s** %pdfont, i8** %glyph_usage, double** %real_widths, i32* %num_chars, i32* %num_widths) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %glyph_usage.addr = alloca i8**, align 8
  %real_widths.addr = alloca double**, align 8
  %num_chars.addr = alloca i32*, align 8
  %num_widths.addr = alloca i32*, align 8
  %e = alloca %struct.pdf_font_cache_elem_s**, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %pdfont, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  store i8** %glyph_usage, i8*** %glyph_usage.addr, align 8, !tbaa !1
  store double** %real_widths, double*** %real_widths.addr, align 8, !tbaa !1
  store i32* %num_chars, i32** %num_chars.addr, align 8, !tbaa !1
  store i32* %num_widths, i32** %num_widths.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %2 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call = call %struct.pdf_font_cache_elem_s** @pdf_locate_font_cache_elem(%struct.gx_device_pdf_s* %1, %struct.gs_font_s* %2) #7
  store %struct.pdf_font_cache_elem_s** %call, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %3 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf_font_cache_elem_s** %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %5 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %4, align 8, !tbaa !1
  %glyph_usage1 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %5, i32 0, i32 5
  %6 = load i8*, i8** %glyph_usage1, align 8, !tbaa !120
  %cmp2 = icmp eq i8* %6, null
  br i1 %cmp2, label %land.lhs.true.3, label %lor.lhs.false

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %7 = load i8**, i8*** %glyph_usage.addr, align 8, !tbaa !1
  %cmp4 = icmp ne i8** %7, null
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.3, %land.lhs.true
  %8 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %9 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %8, align 8, !tbaa !1
  %real_widths5 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %9, i32 0, i32 6
  %10 = load double*, double** %real_widths5, align 8, !tbaa !121
  %cmp6 = icmp eq double* %10, null
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.12

land.lhs.true.7:                                  ; preds = %lor.lhs.false
  %11 = load double**, double*** %real_widths.addr, align 8, !tbaa !1
  %cmp8 = icmp ne double** %11, null
  br i1 %cmp8, label %if.then, label %if.end.12

if.then:                                          ; preds = %land.lhs.true.7, %land.lhs.true.3
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %13 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %14 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %15 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %14, align 8, !tbaa !1
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call9 = call i32 @alloc_font_cache_elem_arrays(%struct.gx_device_pdf_s* %13, %struct.pdf_font_cache_elem_s* %15, %struct.gs_font_s* %16) #7
  store i32 %call9, i32* %code, align 4, !tbaa !21
  %17 = load i32, i32* %code, align 4, !tbaa !21
  %cmp10 = icmp slt i32 %17, 0
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %18 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %18, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.11
  %19 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.51 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.12

if.end.12:                                        ; preds = %cleanup.cont, %land.lhs.true.7, %lor.lhs.false, %entry
  %20 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp13 = icmp eq %struct.pdf_font_cache_elem_s** %20, null
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.12
  br label %cond.end

cond.false:                                       ; preds = %if.end.12
  %21 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %22 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %21, align 8, !tbaa !1
  %pdfont14 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %22, i32 0, i32 4
  %23 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont14, align 8, !tbaa !122
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.pdf_font_resource_s* [ null, %cond.true ], [ %23, %cond.false ]
  %24 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %cond, %struct.pdf_font_resource_s** %24, align 8, !tbaa !1
  %25 = load i8**, i8*** %glyph_usage.addr, align 8, !tbaa !1
  %cmp15 = icmp ne i8** %25, null
  br i1 %cmp15, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %cond.end
  %26 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp17 = icmp eq %struct.pdf_font_cache_elem_s** %26, null
  br i1 %cmp17, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %if.then.16
  br label %cond.end.21

cond.false.19:                                    ; preds = %if.then.16
  %27 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %28 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %27, align 8, !tbaa !1
  %glyph_usage20 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %28, i32 0, i32 5
  %29 = load i8*, i8** %glyph_usage20, align 8, !tbaa !120
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.19, %cond.true.18
  %cond22 = phi i8* [ null, %cond.true.18 ], [ %29, %cond.false.19 ]
  %30 = load i8**, i8*** %glyph_usage.addr, align 8, !tbaa !1
  store i8* %cond22, i8** %30, align 8, !tbaa !1
  br label %if.end.23

if.end.23:                                        ; preds = %cond.end.21, %cond.end
  %31 = load double**, double*** %real_widths.addr, align 8, !tbaa !1
  %cmp24 = icmp ne double** %31, null
  br i1 %cmp24, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %if.end.23
  %32 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp26 = icmp eq %struct.pdf_font_cache_elem_s** %32, null
  br i1 %cmp26, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %if.then.25
  br label %cond.end.30

cond.false.28:                                    ; preds = %if.then.25
  %33 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %34 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %33, align 8, !tbaa !1
  %real_widths29 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %34, i32 0, i32 6
  %35 = load double*, double** %real_widths29, align 8, !tbaa !121
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.28, %cond.true.27
  %cond31 = phi double* [ null, %cond.true.27 ], [ %35, %cond.false.28 ]
  %36 = load double**, double*** %real_widths.addr, align 8, !tbaa !1
  store double* %cond31, double** %36, align 8, !tbaa !1
  br label %if.end.32

if.end.32:                                        ; preds = %cond.end.30, %if.end.23
  %37 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  %cmp33 = icmp ne i32* %37, null
  br i1 %cmp33, label %if.then.34, label %if.end.41

if.then.34:                                       ; preds = %if.end.32
  %38 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp35 = icmp eq %struct.pdf_font_cache_elem_s** %38, null
  br i1 %cmp35, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %if.then.34
  br label %cond.end.39

cond.false.37:                                    ; preds = %if.then.34
  %39 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %40 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %39, align 8, !tbaa !1
  %num_chars38 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %40, i32 0, i32 2
  %41 = load i32, i32* %num_chars38, align 4, !tbaa !123
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.37, %cond.true.36
  %cond40 = phi i32 [ 0, %cond.true.36 ], [ %41, %cond.false.37 ]
  %42 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 %cond40, i32* %42, align 4, !tbaa !21
  br label %if.end.41

if.end.41:                                        ; preds = %cond.end.39, %if.end.32
  %43 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  %cmp42 = icmp ne i32* %43, null
  br i1 %cmp42, label %if.then.43, label %if.end.50

if.then.43:                                       ; preds = %if.end.41
  %44 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %cmp44 = icmp eq %struct.pdf_font_cache_elem_s** %44, null
  br i1 %cmp44, label %cond.true.45, label %cond.false.46

cond.true.45:                                     ; preds = %if.then.43
  br label %cond.end.48

cond.false.46:                                    ; preds = %if.then.43
  %45 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %e, align 8, !tbaa !1
  %46 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %45, align 8, !tbaa !1
  %num_widths47 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %46, i32 0, i32 3
  %47 = load i32, i32* %num_widths47, align 4, !tbaa !124
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.46, %cond.true.45
  %cond49 = phi i32 [ 0, %cond.true.45 ], [ %47, %cond.false.46 ]
  %48 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 %cond49, i32* %48, align 4, !tbaa !21
  br label %if.end.50

if.end.50:                                        ; preds = %cond.end.48, %if.end.41
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.51

cleanup.51:                                       ; preds = %if.end.50, %cleanup
  %49 = bitcast %struct.pdf_font_cache_elem_s*** %e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #1
  %50 = load i32, i32* %retval
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal i32 @alloc_font_cache_elem_arrays(%struct.gx_device_pdf_s* %pdev, %struct.pdf_font_cache_elem_s* %e, %struct.gs_font_s* %font) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %e.addr = alloca %struct.pdf_font_cache_elem_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %num_widths = alloca i32, align 4
  %num_chars = alloca i32, align 4
  %len = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_font_cache_elem_s* %e, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = bitcast i32* %num_widths to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %num_chars to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  %3 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %4 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  call void @font_cache_elem_array_sizes(%struct.gx_device_pdf_s* %3, %struct.gs_font_s* %4, i32* %num_widths, i32* %num_chars) #7
  %5 = load i32, i32* %num_chars, align 4, !tbaa !21
  %add = add nsw i32 %5, 7
  %div = sdiv i32 %add, 8
  store i32 %div, i32* %len, align 4, !tbaa !21
  %6 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %6, i32 0, i32 43
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory, align 8, !tbaa !119
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %7, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %8 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !125
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory1 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 43
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory1, align 8, !tbaa !119
  %11 = load i32, i32* %len, align 4, !tbaa !21
  %call = call i8* %8(%struct.gs_memory_s* %10, i32 %11, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0)) #7
  %12 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %glyph_usage = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %12, i32 0, i32 5
  store i8* %call, i8** %glyph_usage, align 8, !tbaa !120
  %13 = load i32, i32* %num_widths, align 4, !tbaa !21
  %cmp = icmp sgt i32 %13, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory2 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %14, i32 0, i32 43
  %15 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory2, align 8, !tbaa !119
  %procs3 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %15, i32 0, i32 1
  %alloc_bytes4 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs3, i32 0, i32 7
  %16 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes4, align 8, !tbaa !125
  %17 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory5 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %17, i32 0, i32 43
  %18 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory5, align 8, !tbaa !119
  %19 = load i32, i32* %num_widths, align 4, !tbaa !21
  %conv = sext i32 %19 to i64
  %mul = mul i64 %conv, 8
  %20 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %20, i32 0, i32 11
  %21 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp6 = icmp eq i32 %21, 3
  br i1 %cmp6, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true
  %22 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType8 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %22, i32 0, i32 11
  %23 = load i32, i32* %FontType8, align 4, !tbaa !74
  %cmp9 = icmp eq i32 %23, 52
  br i1 %cmp9, label %lor.end, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType12 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %24, i32 0, i32 11
  %25 = load i32, i32* %FontType12, align 4, !tbaa !74
  %cmp13 = icmp eq i32 %25, 53
  br i1 %cmp13, label %lor.end, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.11
  %26 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType16 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %26, i32 0, i32 11
  %27 = load i32, i32* %FontType16, align 4, !tbaa !74
  %cmp17 = icmp eq i32 %27, 51
  br i1 %cmp17, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.15
  %28 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType19 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %28, i32 0, i32 11
  %29 = load i32, i32* %FontType19, align 4, !tbaa !74
  %cmp20 = icmp eq i32 %29, 54
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.15, %lor.lhs.false.11, %lor.lhs.false, %cond.true
  %30 = phi i1 [ true, %lor.lhs.false.15 ], [ true, %lor.lhs.false.11 ], [ true, %lor.lhs.false ], [ true, %cond.true ], [ %cmp20, %lor.rhs ]
  %cond = select i1 %30, i32 2, i32 1
  %conv22 = sext i32 %cond to i64
  %mul23 = mul i64 %mul, %conv22
  %conv24 = trunc i64 %mul23 to i32
  %call25 = call i8* %16(%struct.gs_memory_s* %18, i32 %conv24, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0)) #7
  %31 = bitcast i8* %call25 to double*
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %lor.end
  %cond26 = phi double* [ %31, %lor.end ], [ null, %cond.false ]
  %32 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %real_widths = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %32, i32 0, i32 6
  store double* %cond26, double** %real_widths, align 8, !tbaa !121
  %33 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %glyph_usage27 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %33, i32 0, i32 5
  %34 = load i8*, i8** %glyph_usage27, align 8, !tbaa !120
  %cmp28 = icmp eq i8* %34, null
  br i1 %cmp28, label %if.then, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %cond.end
  %35 = load i32, i32* %num_widths, align 4, !tbaa !21
  %cmp31 = icmp ne i32 %35, 0
  br i1 %cmp31, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false.30
  %36 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %real_widths33 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %36, i32 0, i32 6
  %37 = load double*, double** %real_widths33, align 8, !tbaa !121
  %cmp34 = icmp eq double* %37, null
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %38 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory36 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %38, i32 0, i32 43
  %39 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory36, align 8, !tbaa !119
  %procs37 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %39, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs37, i32 0, i32 2
  %40 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %41 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory38 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %41, i32 0, i32 43
  %42 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory38, align 8, !tbaa !119
  %43 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %glyph_usage39 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %43, i32 0, i32 5
  %44 = load i8*, i8** %glyph_usage39, align 8, !tbaa !120
  call void %40(%struct.gs_memory_s* %42, i8* %44, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i32 0, i32 0)) #7
  %45 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory40 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %45, i32 0, i32 43
  %46 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory40, align 8, !tbaa !119
  %procs41 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %46, i32 0, i32 1
  %free_object42 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs41, i32 0, i32 2
  %47 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object42, align 8, !tbaa !18
  %48 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory43 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %48, i32 0, i32 43
  %49 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory43, align 8, !tbaa !119
  %50 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %real_widths44 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %50, i32 0, i32 6
  %51 = load double*, double** %real_widths44, align 8, !tbaa !121
  %52 = bitcast double* %51 to i8*
  call void %47(%struct.gs_memory_s* %49, i8* %52, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0)) #7
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false.30
  %53 = load i32, i32* %num_chars, align 4, !tbaa !21
  %54 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %num_chars45 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %54, i32 0, i32 2
  store i32 %53, i32* %num_chars45, align 4, !tbaa !123
  %55 = load i32, i32* %num_widths, align 4, !tbaa !21
  %56 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %num_widths46 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %56, i32 0, i32 3
  store i32 %55, i32* %num_widths46, align 4, !tbaa !124
  %57 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %glyph_usage47 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %57, i32 0, i32 5
  %58 = load i8*, i8** %glyph_usage47, align 8, !tbaa !120
  %59 = load i32, i32* %len, align 4, !tbaa !21
  %conv48 = sext i32 %59 to i64
  %call49 = call i8* @memset(i8* %58, i32 0, i64 %conv48) #9
  %60 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %real_widths50 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %60, i32 0, i32 6
  %61 = load double*, double** %real_widths50, align 8, !tbaa !121
  %cmp51 = icmp ne double* %61, null
  br i1 %cmp51, label %if.then.53, label %if.end.58

if.then.53:                                       ; preds = %if.end
  %62 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e.addr, align 8, !tbaa !1
  %real_widths54 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %62, i32 0, i32 6
  %63 = load double*, double** %real_widths54, align 8, !tbaa !121
  %64 = bitcast double* %63 to i8*
  %65 = load i32, i32* %num_widths, align 4, !tbaa !21
  %conv55 = sext i32 %65 to i64
  %mul56 = mul i64 %conv55, 8
  %call57 = call i8* @memset(i8* %64, i32 0, i64 %mul56) #9
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.53, %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.58, %if.then
  %66 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end(i64 4, i8* %66) #1
  %67 = bitcast i32* %num_chars to i8*
  call void @llvm.lifetime.end(i64 4, i8* %67) #1
  %68 = bitcast i32* %num_widths to i8*
  call void @llvm.lifetime.end(i64 4, i8* %68) #1
  %69 = load i32, i32* %retval
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define i32 @pdf_attach_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, %struct.pdf_font_resource_s* %pdfont) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %num_chars = alloca i32, align 4
  %num_widths = alloca i32, align 4
  %len = alloca i32, align 4
  %e = alloca %struct.pdf_font_cache_elem_s*, align 8
  %pe = alloca %struct.pdf_font_cache_elem_s**, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %0 = bitcast i32* %num_chars to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %num_widths to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  %3 = bitcast %struct.pdf_font_cache_elem_s** %e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast %struct.pdf_font_cache_elem_s*** %pe to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call = call %struct.pdf_font_cache_elem_s** @pdf_locate_font_cache_elem(%struct.gx_device_pdf_s* %5, %struct.gs_font_s* %6) #7
  store %struct.pdf_font_cache_elem_s** %call, %struct.pdf_font_cache_elem_s*** %pe, align 8, !tbaa !1
  %7 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %7, i32 0, i32 8
  %8 = load i32, i32* %FontType, align 4, !tbaa !126
  %9 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType1 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %9, i32 0, i32 11
  %10 = load i32, i32* %FontType1, align 4, !tbaa !74
  %cmp = icmp ne i32 %8, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType2 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %11, i32 0, i32 8
  %12 = load i32, i32* %FontType2, align 4, !tbaa !126
  %cmp3 = icmp ne i32 %12, 3
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType4 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType4, align 4, !tbaa !74
  %cmp5 = icmp ne i32 %14, 53
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType7 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %15, i32 0, i32 11
  %16 = load i32, i32* %FontType7, align 4, !tbaa !74
  %cmp8 = icmp ne i32 %16, 51
  br i1 %cmp8, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %land.lhs.true.6
  %17 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType10 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %17, i32 0, i32 11
  %18 = load i32, i32* %FontType10, align 4, !tbaa !74
  %cmp11 = icmp ne i32 %18, 52
  br i1 %cmp11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %land.lhs.true.9
  %19 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType13 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %19, i32 0, i32 11
  %20 = load i32, i32* %FontType13, align 4, !tbaa !74
  %cmp14 = icmp ne i32 %20, 54
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.12, %land.lhs.true
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true.12, %land.lhs.true.9, %land.lhs.true.6, %lor.lhs.false, %entry
  %21 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %22 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  call void @font_cache_elem_array_sizes(%struct.gx_device_pdf_s* %21, %struct.gs_font_s* %22, i32* %num_widths, i32* %num_chars) #7
  %23 = load i32, i32* %num_chars, align 4, !tbaa !21
  %add = add nsw i32 %23, 7
  %div = sdiv i32 %add, 8
  store i32 %div, i32* %len, align 4, !tbaa !21
  %24 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %pe, align 8, !tbaa !1
  %cmp15 = icmp ne %struct.pdf_font_cache_elem_s** %24, null
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %if.end
  %25 = load %struct.pdf_font_cache_elem_s**, %struct.pdf_font_cache_elem_s*** %pe, align 8, !tbaa !1
  %26 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %25, align 8, !tbaa !1
  store %struct.pdf_font_cache_elem_s* %26, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %27 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %pdfont17 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %27, i32 0, i32 4
  %28 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont17, align 8, !tbaa !122
  %29 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %cmp18 = icmp eq %struct.pdf_font_resource_s* %28, %29
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.16
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.20:                                        ; preds = %if.then.16
  %30 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %31 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %pdfont21 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %31, i32 0, i32 4
  store %struct.pdf_font_resource_s* %30, %struct.pdf_font_resource_s** %pdfont21, align 8, !tbaa !122
  %32 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %glyph_usage = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %32, i32 0, i32 5
  %33 = load i8*, i8** %glyph_usage, align 8, !tbaa !120
  %34 = load i32, i32* %len, align 4, !tbaa !21
  %conv = sext i32 %34 to i64
  %call22 = call i8* @memset(i8* %33, i32 0, i64 %conv) #9
  %35 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %real_widths = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %35, i32 0, i32 6
  %36 = load double*, double** %real_widths, align 8, !tbaa !121
  %37 = bitcast double* %36 to i8*
  %38 = load i32, i32* %num_widths, align 4, !tbaa !21
  %conv23 = sext i32 %38 to i64
  %mul = mul i64 %conv23, 8
  %call24 = call i8* @memset(i8* %37, i32 0, i64 %mul) #9
  br label %if.end.38

if.else:                                          ; preds = %if.end
  %39 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %39, i32 0, i32 43
  %40 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory, align 8, !tbaa !119
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %40, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %41 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !82
  %42 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory25 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %42, i32 0, i32 43
  %43 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory25, align 8, !tbaa !119
  %call26 = call i8* %41(%struct.gs_memory_s* %43, %struct.gs_memory_struct_type_s* @st_pdf_font_cache_elem, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i32 0, i32 0)) #7
  %44 = bitcast i8* %call26 to %struct.pdf_font_cache_elem_s*
  store %struct.pdf_font_cache_elem_s* %44, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %45 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %cmp27 = icmp eq %struct.pdf_font_cache_elem_s* %45, null
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.else
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.30:                                        ; preds = %if.else
  %46 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %47 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %pdfont31 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %47, i32 0, i32 4
  store %struct.pdf_font_resource_s* %46, %struct.pdf_font_resource_s** %pdfont31, align 8, !tbaa !122
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call32 = call i64 @pdf_font_cache_elem_id(%struct.gs_font_s* %48) #7
  %49 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %font_id = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %49, i32 0, i32 1
  store i64 %call32, i64* %font_id, align 8, !tbaa !113
  %50 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %num_chars33 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %50, i32 0, i32 2
  store i32 0, i32* %num_chars33, align 4, !tbaa !123
  %51 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %glyph_usage34 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %51, i32 0, i32 5
  store i8* null, i8** %glyph_usage34, align 8, !tbaa !120
  %52 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %real_widths35 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %52, i32 0, i32 6
  store double* null, double** %real_widths35, align 8, !tbaa !121
  %53 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %54 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %pdev36 = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %54, i32 0, i32 7
  store %struct.gx_device_pdf_s* %53, %struct.gx_device_pdf_s** %pdev36, align 8, !tbaa !118
  %55 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font_cache = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %55, i32 0, i32 185
  %56 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %font_cache, align 8, !tbaa !116
  %57 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.pdf_font_cache_elem_s, %struct.pdf_font_cache_elem_s* %57, i32 0, i32 0
  store %struct.pdf_font_cache_elem_s* %56, %struct.pdf_font_cache_elem_s** %next, align 8, !tbaa !117
  %58 = load %struct.pdf_font_cache_elem_s*, %struct.pdf_font_cache_elem_s** %e, align 8, !tbaa !1
  %59 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font_cache37 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %59, i32 0, i32 185
  store %struct.pdf_font_cache_elem_s* %58, %struct.pdf_font_cache_elem_s** %font_cache37, align 8, !tbaa !116
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.38:                                        ; preds = %if.end.20
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.38, %if.end.30, %if.then.29, %if.then.19, %if.then
  %60 = bitcast %struct.pdf_font_cache_elem_s*** %pe to i8*
  call void @llvm.lifetime.end(i64 8, i8* %60) #1
  %61 = bitcast %struct.pdf_font_cache_elem_s** %e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #1
  %62 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #1
  %63 = bitcast i32* %num_widths to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #1
  %64 = bitcast i32* %num_chars to i8*
  call void @llvm.lifetime.end(i64 4, i8* %64) #1
  %65 = load i32, i32* %retval
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal void @font_cache_elem_array_sizes(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, i32* %num_widths, i32* %num_chars) #0 {
entry:
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %num_widths.addr = alloca i32*, align 8
  %num_chars.addr = alloca i32*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store i32* %num_widths, i32** %num_widths.addr, align 8, !tbaa !1
  store i32* %num_chars, i32** %num_chars.addr, align 8, !tbaa !1
  %0 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %0, i32 0, i32 11
  %1 = load i32, i32* %FontType, align 4, !tbaa !74
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 52, label %sw.bb.1
    i32 53, label %sw.bb.1
    i32 51, label %sw.bb.1
    i32 54, label %sw.bb.1
    i32 4, label %sw.bb.1
    i32 14, label %sw.bb.1
    i32 42, label %sw.bb.1
    i32 9, label %sw.bb.2
    i32 11, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 0, i32* %2, align 4, !tbaa !21
  %3 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 65536, i32* %3, align 4, !tbaa !21
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %4 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 256, i32* %4, align 4, !tbaa !21
  %5 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 256, i32* %5, align 4, !tbaa !21
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %7 = bitcast %struct.gs_font_s* %6 to %struct.gs_font_cid0_s*
  %cidata = getelementptr inbounds %struct.gs_font_cid0_s, %struct.gs_font_cid0_s* %7, i32 0, i32 29
  %common = getelementptr inbounds %struct.gs_font_cid0_data_s, %struct.gs_font_cid0_data_s* %cidata, i32 0, i32 0
  %MaxCID = getelementptr inbounds %struct.gs_font_cid_data_s, %struct.gs_font_cid_data_s* %common, i32 0, i32 2
  %8 = load i32, i32* %MaxCID, align 4, !tbaa !129
  %add = add nsw i32 %8, 1
  %9 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 %add, i32* %9, align 4, !tbaa !21
  %10 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 %add, i32* %10, align 4, !tbaa !21
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %12 = bitcast %struct.gs_font_s* %11 to %struct.gs_font_cid2_s*
  %cidata4 = getelementptr inbounds %struct.gs_font_cid2_s, %struct.gs_font_cid2_s* %12, i32 0, i32 30
  %common5 = getelementptr inbounds %struct.gs_font_cid2_data_s, %struct.gs_font_cid2_data_s* %cidata4, i32 0, i32 0
  %CIDCount = getelementptr inbounds %struct.gs_font_cid_data_s, %struct.gs_font_cid_data_s* %common5, i32 0, i32 1
  %13 = load i32, i32* %CIDCount, align 4, !tbaa !135
  %14 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 %13, i32* %14, align 4, !tbaa !21
  %15 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 %13, i32* %15, align 4, !tbaa !21
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %16 = load i32*, i32** %num_chars.addr, align 8, !tbaa !1
  store i32 65536, i32* %16, align 4, !tbaa !21
  %17 = load i32*, i32** %num_widths.addr, align 8, !tbaa !1
  store i32 65536, i32* %17, align 4, !tbaa !21
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  ret void
}

; Function Attrs: nounwind
declare i8* @memset(i8*, i32, i64) #4

; Function Attrs: nounwind uwtable
define i32 @pdf_font_orig_matrix(%struct.gs_font_s* %font, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %retval = alloca i32, align 4
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %base_font = alloca %struct.gs_font_s*, align 8
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %0, i32 0, i32 11
  %1 = load i32, i32* %FontType, align 4, !tbaa !74
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 42, label %sw.bb
    i32 11, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.1
    i32 9, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 53, label %sw.bb.1
    i32 51, label %sw.bb.1
    i32 52, label %sw.bb.1
    i32 54, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  %2 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  call void @gs_make_identity(%struct.gs_matrix_s* %2) #7
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %3 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %4, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb.1
  %5 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %base = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %5, i32 0, i32 7
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %base, align 8, !tbaa !140
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %cmp = icmp ne %struct.gs_font_s* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %base2 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %8, i32 0, i32 7
  %9 = load %struct.gs_font_s*, %struct.gs_font_s** %base2, align 8, !tbaa !140
  store %struct.gs_font_s* %9, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType3 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %10, i32 0, i32 11
  %11 = load i32, i32* %FontType3, align 4, !tbaa !74
  %cmp4 = icmp eq i32 %11, 3
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType5 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %12, i32 0, i32 11
  %13 = load i32, i32* %FontType5, align 4, !tbaa !74
  %cmp6 = icmp eq i32 %13, 53
  br i1 %cmp6, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %14 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType8 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %14, i32 0, i32 11
  %15 = load i32, i32* %FontType8, align 4, !tbaa !74
  %cmp9 = icmp eq i32 %15, 51
  br i1 %cmp9, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.7
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType11 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %16, i32 0, i32 11
  %17 = load i32, i32* %FontType11, align 4, !tbaa !74
  %cmp12 = icmp eq i32 %17, 52
  br i1 %cmp12, label %if.then, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.10
  %18 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType14 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %18, i32 0, i32 11
  %19 = load i32, i32* %FontType14, align 4, !tbaa !74
  %cmp15 = icmp eq i32 %19, 54
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.13, %lor.lhs.false.10, %lor.lhs.false.7, %lor.lhs.false, %while.end
  %20 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %21 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %21, i32 0, i32 9
  %22 = bitcast %struct.gs_matrix_s* %20 to i8*
  %23 = bitcast %struct.gs_matrix_s* %FontMatrix to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end.58

if.else:                                          ; preds = %lor.lhs.false.13
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %orig_FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %24, i32 0, i32 10
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix, i32 0, i32 0
  %25 = load float, float* %xx, align 4, !tbaa !143
  %cmp16 = fcmp une float %25, 0.000000e+00
  br i1 %cmp16, label %if.then.26, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %if.else
  %26 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %orig_FontMatrix18 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %26, i32 0, i32 10
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix18, i32 0, i32 1
  %27 = load float, float* %xy, align 4, !tbaa !144
  %cmp19 = fcmp une float %27, 0.000000e+00
  br i1 %cmp19, label %if.then.26, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.17
  %28 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %orig_FontMatrix21 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %28, i32 0, i32 10
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix21, i32 0, i32 2
  %29 = load float, float* %yx, align 4, !tbaa !145
  %cmp22 = fcmp une float %29, 0.000000e+00
  br i1 %cmp22, label %if.then.26, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.20
  %30 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %orig_FontMatrix24 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %30, i32 0, i32 10
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix24, i32 0, i32 3
  %31 = load float, float* %yy, align 4, !tbaa !146
  %cmp25 = fcmp une float %31, 0.000000e+00
  br i1 %cmp25, label %if.then.26, label %if.else.28

if.then.26:                                       ; preds = %lor.lhs.false.23, %lor.lhs.false.20, %lor.lhs.false.17, %if.else
  %32 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %33 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %orig_FontMatrix27 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %33, i32 0, i32 10
  %34 = bitcast %struct.gs_matrix_s* %32 to i8*
  %35 = bitcast %struct.gs_matrix_s* %orig_FontMatrix27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end.57

if.else.28:                                       ; preds = %lor.lhs.false.23
  %36 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix29 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %36, i32 0, i32 9
  %xx30 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix29, i32 0, i32 0
  %37 = load float, float* %xx30, align 4, !tbaa !147
  %conv = fpext float %37 to double
  %cmp31 = fcmp oeq double %conv, 0x3F40000000000000
  br i1 %cmp31, label %land.lhs.true, label %if.else.56

land.lhs.true:                                    ; preds = %if.else.28
  %38 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix33 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %38, i32 0, i32 9
  %xy34 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix33, i32 0, i32 1
  %39 = load float, float* %xy34, align 4, !tbaa !148
  %cmp35 = fcmp oeq float %39, 0.000000e+00
  br i1 %cmp35, label %land.lhs.true.37, label %if.else.56

land.lhs.true.37:                                 ; preds = %land.lhs.true
  %40 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix38 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %40, i32 0, i32 9
  %yx39 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix38, i32 0, i32 2
  %41 = load float, float* %yx39, align 4, !tbaa !149
  %cmp40 = fcmp oeq float %41, 0.000000e+00
  br i1 %cmp40, label %land.lhs.true.42, label %if.else.56

land.lhs.true.42:                                 ; preds = %land.lhs.true.37
  %42 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix43 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %42, i32 0, i32 9
  %yy44 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix43, i32 0, i32 3
  %43 = load float, float* %yy44, align 4, !tbaa !150
  %cmp45 = fcmp olt float %43, 0.000000e+00
  br i1 %cmp45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.42
  %44 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix47 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %44, i32 0, i32 9
  %yy48 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix47, i32 0, i32 3
  %45 = load float, float* %yy48, align 4, !tbaa !150
  %sub = fsub float -0.000000e+00, %45
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.42
  %46 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix49 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %46, i32 0, i32 9
  %yy50 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix49, i32 0, i32 3
  %47 = load float, float* %yy50, align 4, !tbaa !150
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub, %cond.true ], [ %47, %cond.false ]
  %conv51 = fpext float %cond to double
  %cmp52 = fcmp oeq double %conv51, 0x3F40000000000000
  br i1 %cmp52, label %if.then.54, label %if.else.56

if.then.54:                                       ; preds = %cond.end
  %48 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %49 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %FontMatrix55 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %49, i32 0, i32 9
  %50 = bitcast %struct.gs_matrix_s* %48 to i8*
  %51 = bitcast %struct.gs_matrix_s* %FontMatrix55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end

if.else.56:                                       ; preds = %cond.end, %land.lhs.true.37, %land.lhs.true, %if.else.28
  %52 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call = call i32 @gs_make_scaling(double 1.000000e-03, double 1.000000e-03, %struct.gs_matrix_s* %52) #7
  br label %if.end

if.end:                                           ; preds = %if.else.56, %if.then.54
  br label %if.end.57

if.end.57:                                        ; preds = %if.end, %if.then.26
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then
  %53 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #1
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 -15, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %if.end.58, %sw.bb
  %54 = load i32, i32* %retval
  ret i32 %54
}

declare void @gs_make_identity(%struct.gs_matrix_s*) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

declare i32 @gs_make_scaling(double, double, %struct.gs_matrix_s*) #2

; Function Attrs: nounwind uwtable
define i32 @pdf_check_encoding_compatibility(%struct.pdf_font_resource_s* %pdfont, %struct.pdf_char_glyph_pair_s* %pairs, i32 %num_chars) #0 {
entry:
  %retval = alloca i32, align 4
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %pairs.addr = alloca %struct.pdf_char_glyph_pair_s*, align 8
  %num_chars.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ch = alloca i64, align 8
  %pet = alloca %struct.pdf_encoding_element_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pair_s* %pairs, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  store i32 %num_chars, i32* %num_chars.addr, align 4, !tbaa !21
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !21
  %2 = load i32, i32* %num_chars.addr, align 4, !tbaa !21
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.pdf_char_glyph_pair_s*, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %5, i64 %idxprom
  %chr = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 0
  %6 = load i64, i64* %chr, align 8, !tbaa !151
  store i64 %6, i64* %ch, align 8, !tbaa !25
  %7 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  %8 = load i64, i64* %ch, align 8, !tbaa !25
  %9 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %9, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %Encoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 4
  %10 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding, align 8, !tbaa !153
  %arrayidx1 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %10, i64 %8
  store %struct.pdf_encoding_element_s* %arrayidx1, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %11 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom2 = sext i32 %11 to i64
  %12 = load %struct.pdf_char_glyph_pair_s*, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  %arrayidx3 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %12, i64 %idxprom2
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx3, i32 0, i32 1
  %13 = load i64, i64* %glyph, align 8, !tbaa !155
  %14 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph4 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %14, i32 0, i32 0
  %15 = load i64, i64* %glyph4, align 8, !tbaa !156
  %cmp5 = icmp eq i64 %13, %15
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body
  %16 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph6 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %16, i32 0, i32 0
  %17 = load i64, i64* %glyph6, align 8, !tbaa !156
  %cmp7 = icmp ne i64 %17, 2147483647
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.9:                                         ; preds = %if.end
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.9, %if.then.8, %if.then
  %18 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #1
  %19 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.11 [
    i32 0, label %cleanup.cont
    i32 4, label %for.inc
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont, %cleanup
  %20 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.11

cleanup.11:                                       ; preds = %for.end, %cleanup
  %21 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %21) #1
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define i32 @pdf_obtain_cidfont_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %subfont, %struct.pdf_font_resource_s** %ppdsubf, %struct.pdf_char_glyph_pairs_s* %cgp) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %subfont.addr = alloca %struct.gs_font_s*, align 8
  %ppdsubf.addr = alloca %struct.pdf_font_resource_s**, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %cfont = alloca %struct.gs_font_base_s*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %subfont, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdsubf, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %code, align 4, !tbaa !21
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %2 = load %struct.gs_font_s*, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  %3 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %call = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %1, %struct.gs_font_s* %2, %struct.pdf_font_resource_s** %3, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %4 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %5, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

if.end:                                           ; preds = %entry
  %6 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %7 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %6, align 8, !tbaa !1
  %cmp1 = icmp ne %struct.pdf_font_resource_s* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end.11

if.then.2:                                        ; preds = %if.end
  %8 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %10 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %9, align 8, !tbaa !1
  %call3 = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %10, i32 0) #7
  store %struct.gs_font_base_s* %call3, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %11 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %12 = bitcast %struct.gs_font_base_s* %11 to %struct.gs_font_s*
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  %14 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %14, i32 0, i32 2
  %15 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %16, i32 0, i32 3
  %arrayidx = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 1
  %17 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %17, i32 0, i32 1
  %18 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %call4 = call i32 @gs_copied_can_copy_glyphs(%struct.gs_font_s* %12, %struct.gs_font_s* %13, i64* %glyph, i32 %18, i32 16, i32 1) #7
  store i32 %call4, i32* %code, align 4, !tbaa !21
  %19 = load i32, i32* %code, align 4, !tbaa !21
  %cmp5 = icmp sgt i32 %19, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.2
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.7:                                         ; preds = %if.then.2
  %20 = load i32, i32* %code, align 4, !tbaa !21
  %cmp8 = icmp slt i32 %20, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.7
  %21 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.10:                                        ; preds = %if.end.7
  %22 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %22, align 8, !tbaa !1
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.10, %if.then.9, %if.then.6
  %23 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.11

if.end.11:                                        ; preds = %cleanup.cont, %if.end
  %24 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %25 = load %struct.gs_font_s*, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  %26 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %27 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %call12 = call i32 @pdf_find_font_resource(%struct.gx_device_pdf_s* %24, %struct.gs_font_s* %25, i32 8, %struct.pdf_font_resource_s** %26, %struct.pdf_char_glyph_pairs_s* %27, i32 1) #7
  store i32 %call12, i32* %code, align 4, !tbaa !21
  %28 = load i32, i32* %code, align 4, !tbaa !21
  %cmp13 = icmp slt i32 %28, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  %29 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %29, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

if.end.15:                                        ; preds = %if.end.11
  %30 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %31 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %30, align 8, !tbaa !1
  %cmp16 = icmp eq %struct.pdf_font_resource_s* %31, null
  br i1 %cmp16, label %if.then.17, label %if.end.22

if.then.17:                                       ; preds = %if.end.15
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %33 = load %struct.gs_font_s*, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  %34 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %35 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %call18 = call i32 @pdf_make_font_resource(%struct.gx_device_pdf_s* %32, %struct.gs_font_s* %33, %struct.pdf_font_resource_s** %34, %struct.pdf_char_glyph_pairs_s* %35) #7
  store i32 %call18, i32* %code, align 4, !tbaa !21
  %36 = load i32, i32* %code, align 4, !tbaa !21
  %cmp19 = icmp slt i32 %36, 0
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.17
  %37 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %37, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

if.end.21:                                        ; preds = %if.then.17
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.15
  %38 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %39 = load %struct.gs_font_s*, %struct.gs_font_s** %subfont.addr, align 8, !tbaa !1
  %40 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdsubf.addr, align 8, !tbaa !1
  %41 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %40, align 8, !tbaa !1
  %call23 = call i32 @pdf_attach_font_resource(%struct.gx_device_pdf_s* %38, %struct.gs_font_s* %39, %struct.pdf_font_resource_s* %41) #7
  store i32 %call23, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

cleanup.24:                                       ; preds = %if.end.22, %if.then.20, %if.then.14, %cleanup, %if.then
  %42 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %42) #1
  %43 = load i32, i32* %retval
  ret i32 %43
}

declare %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s*, i32) #2

declare i32 @gs_copied_can_copy_glyphs(%struct.gs_font_s*, %struct.gs_font_s*, i64*, i32, i32, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_find_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, i32 %type, %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_char_glyph_pairs_s* %cgp, i32 %compatible_encoding) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %type.addr = alloca i32, align 4
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %compatible_encoding.addr = alloca i32, align 4
  %pchain = alloca %struct.pdf_resource_s**, align 8
  %pres = alloca %struct.pdf_resource_s*, align 8
  %i = alloca i32, align 4
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %cfont = alloca %struct.gs_font_base_s*, align 8
  %ofont = alloca %struct.gs_font_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %font0 = alloca %struct.gs_font_type0_s*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !161
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  store i32 %compatible_encoding, i32* %compatible_encoding.addr, align 4, !tbaa !21
  %0 = bitcast %struct.pdf_resource_s*** %pchain to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load i32, i32* %type.addr, align 4, !tbaa !161
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %resources = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %2, i32 0, i32 165
  %arrayidx = getelementptr inbounds [15 x %struct.pdf_resource_list_s], [15 x %struct.pdf_resource_list_s]* %resources, i32 0, i64 %idxprom
  %chains = getelementptr inbounds %struct.pdf_resource_list_s, %struct.pdf_resource_list_s* %arrayidx, i32 0, i32 0
  %arraydecay = getelementptr inbounds [16 x %struct.pdf_resource_s*], [16 x %struct.pdf_resource_s*]* %chains, i32 0, i32 0
  store %struct.pdf_resource_s** %arraydecay, %struct.pdf_resource_s*** %pchain, align 8, !tbaa !1
  %3 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc.52, %entry
  %5 = load i32, i32* %i, align 4, !tbaa !21
  %cmp = icmp slt i32 %5, 16
  br i1 %cmp, label %for.body, label %for.end.53

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom1 = sext i32 %6 to i64
  %7 = load %struct.pdf_resource_s**, %struct.pdf_resource_s*** %pchain, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.pdf_resource_s*, %struct.pdf_resource_s** %7, i64 %idxprom1
  %8 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %arrayidx2, align 8, !tbaa !1
  store %struct.pdf_resource_s* %8, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %for.body
  %9 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %cmp4 = icmp ne %struct.pdf_resource_s* %9, null
  br i1 %cmp4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.3
  %10 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #1
  %11 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %12 = bitcast %struct.pdf_resource_s* %11 to %struct.pdf_font_resource_s*
  store %struct.pdf_font_resource_s* %12, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %13 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #1
  %14 = bitcast %struct.gs_font_s** %ofont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %15, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %16 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #1
  %17 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %17, i32 0, i32 11
  %18 = load i32, i32* %FontType, align 4, !tbaa !74
  %19 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %FontType6 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %19, i32 0, i32 8
  %20 = load i32, i32* %FontType6, align 4, !tbaa !126
  %cmp7 = icmp ne i32 %18, %20
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end:                                           ; preds = %for.body.5
  %21 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %FontType8 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %21, i32 0, i32 8
  %22 = load i32, i32* %FontType8, align 4, !tbaa !126
  %cmp9 = icmp eq i32 %22, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %23 = bitcast %struct.gs_font_type0_s** %font0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #1
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %25 = bitcast %struct.gs_font_s* %24 to %struct.gs_font_type0_s*
  store %struct.gs_font_type0_s* %25, %struct.gs_font_type0_s** %font0, align 8, !tbaa !1
  %26 = load %struct.gs_font_type0_s*, %struct.gs_font_type0_s** %font0, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %26, i32 0, i32 23
  %FDepVector = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data, i32 0, i32 9
  %27 = load %struct.gs_font_s**, %struct.gs_font_s*** %FDepVector, align 8, !tbaa !162
  %arrayidx11 = getelementptr inbounds %struct.gs_font_s*, %struct.gs_font_s** %27, i64 0
  %28 = load %struct.gs_font_s*, %struct.gs_font_s** %arrayidx11, align 8, !tbaa !1
  store %struct.gs_font_s* %28, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %29 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %29, i32 0, i32 20
  %type0 = bitcast %union.anon.1* %u to %struct.anon.2*
  %DescendantFont = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type0, i32 0, i32 0
  %30 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %DescendantFont, align 8, !tbaa !163
  %call = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %30, i32 0) #7
  store %struct.gs_font_base_s* %call, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %31 = load %struct.gs_font_type0_s*, %struct.gs_font_type0_s** %font0, align 8, !tbaa !1
  %data12 = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %31, i32 0, i32 23
  %CMap = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data12, i32 0, i32 11
  %32 = load %struct.gs_cmap_s*, %struct.gs_cmap_s** %CMap, align 8, !tbaa !165
  %WMode = getelementptr inbounds %struct.gs_cmap_s, %struct.gs_cmap_s* %32, i32 0, i32 8
  %33 = load i32, i32* %WMode, align 4, !tbaa !166
  %34 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u13 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %34, i32 0, i32 20
  %type014 = bitcast %union.anon.1* %u13 to %struct.anon.2*
  %WMode15 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type014, i32 0, i32 5
  %35 = load i32, i32* %WMode15, align 4, !tbaa !168
  %cmp16 = icmp ne i32 %33, %35
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.10
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end.18:                                        ; preds = %if.then.10
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.18, %if.then.17
  %36 = bitcast %struct.gs_font_type0_s** %font0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.46 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.20

if.else:                                          ; preds = %if.end
  %37 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %call19 = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %37, i32 0) #7
  store %struct.gs_font_base_s* %call19, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %cleanup.cont
  %38 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %call21 = call i32 @pdf_is_CID_font(%struct.gs_font_s* %38) #7
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.end.32, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.20
  %39 = load i32, i32* %compatible_encoding.addr, align 4, !tbaa !21
  %tobool22 = icmp ne i32 %39, 0
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %40 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %41 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %42 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %43 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %43, i32 0, i32 3
  %arraydecay23 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i32 0
  %44 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %44, i32 0, i32 0
  %45 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %call24 = call i32 @pdf_is_compatible_encoding(%struct.gx_device_pdf_s* %40, %struct.pdf_font_resource_s* %41, %struct.gs_font_s* %42, %struct.pdf_char_glyph_pair_s* %arraydecay23, i32 %45) #7
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end.32, label %if.then.31

cond.false:                                       ; preds = %land.lhs.true
  %46 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %47 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %49 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s26 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %49, i32 0, i32 3
  %arraydecay27 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s26, i32 0, i32 0
  %50 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars28 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %50, i32 0, i32 0
  %51 = load i32, i32* %num_all_chars28, align 4, !tbaa !169
  %call29 = call i32 @pdf_font_has_glyphs(%struct.gx_device_pdf_s* %46, %struct.pdf_font_resource_s* %47, %struct.gs_font_s* %48, %struct.pdf_char_glyph_pair_s* %arraydecay27, i32 %51) #7
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %cond.false, %cond.true
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.32:                                        ; preds = %cond.false, %cond.true, %if.end.20
  %52 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %cmp33 = icmp eq %struct.gs_font_base_s* %52, null
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.32
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.35:                                        ; preds = %if.end.32
  %53 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %54 = bitcast %struct.gs_font_base_s* %53 to %struct.gs_font_s*
  %55 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %56 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %56, i32 0, i32 2
  %57 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %idxprom36 = sext i32 %57 to i64
  %58 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s37 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %58, i32 0, i32 3
  %arrayidx38 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s37, i32 0, i64 %idxprom36
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx38, i32 0, i32 1
  %59 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %59, i32 0, i32 1
  %60 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %call39 = call i32 @gs_copied_can_copy_glyphs(%struct.gs_font_s* %54, %struct.gs_font_s* %55, i64* %glyph, i32 %60, i32 16, i32 1) #7
  store i32 %call39, i32* %code, align 4, !tbaa !21
  %61 = load i32, i32* %code, align 4, !tbaa !21
  %cmp40 = icmp eq i32 %61, -28
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.35
  %62 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %62, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.42:                                        ; preds = %if.end.35
  %63 = load i32, i32* %code, align 4, !tbaa !21
  %cmp43 = icmp sgt i32 %63, 0
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.42
  %64 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %65 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %64, %struct.pdf_font_resource_s** %65, align 8, !tbaa !1
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.45:                                        ; preds = %if.end.42
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.46

cleanup.46:                                       ; preds = %if.end.45, %if.then.44, %if.then.41, %if.then.34, %if.then.31, %cleanup, %if.then
  %66 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %66) #1
  %67 = bitcast %struct.gs_font_s** %ofont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #1
  %68 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #1
  %69 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %69) #1
  %cleanup.dest.50 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.50, label %cleanup.54 [
    i32 0, label %cleanup.cont.51
    i32 7, label %for.inc
  ]

cleanup.cont.51:                                  ; preds = %cleanup.46
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont.51, %cleanup.46
  %70 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.pdf_resource_s, %struct.pdf_resource_s* %70, i32 0, i32 0
  %71 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %next, align 8, !tbaa !170
  store %struct.pdf_resource_s* %71, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.52

for.inc.52:                                       ; preds = %for.end
  %72 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %72, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end.53:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.54

cleanup.54:                                       ; preds = %for.end.53, %cleanup.46
  %73 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #1
  %74 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.end(i64 8, i8* %74) #1
  %75 = bitcast %struct.pdf_resource_s*** %pchain to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #1
  %76 = load i32, i32* %retval
  ret i32 %76
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_make_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_char_glyph_pairs_s* %cgp) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %index = alloca i32, align 4
  %BaseEncoding = alloca i32, align 4
  %embed = alloca i32, align 4
  %pfd = alloca %struct.pdf_font_descriptor_s*, align 8
  %font_alloc = alloca i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)*, align 8
  %base_font = alloca %struct.gs_font_s*, align 8
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %psfa = alloca %struct.pdf_standard_font_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %psf = alloca %struct.pdf_standard_font_s*, align 8
  %i = alloca i32, align 4
  %glyph = alloca i64, align 8
  %cfont = alloca %struct.gs_font_base_s*, align 8
  %notdef_glyph = alloca i64, align 8
  %widths = alloca %struct.pdf_glyph_widths_s, align 8
  %cdevproc_result = alloca [10 x double], align 16
  %w = alloca double*, align 8
  %v = alloca double*, align 8
  %w0 = alloca double*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %0 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 -1, i32* %index, align 4, !tbaa !21
  %1 = bitcast i32* %BaseEncoding to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 -1, i32* %BaseEncoding, align 4, !tbaa !21
  %2 = bitcast i32* %embed to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  %3 = bitcast %struct.pdf_font_descriptor_s** %pfd to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store %struct.pdf_font_descriptor_s* null, %struct.pdf_font_descriptor_s** %pfd, align 8, !tbaa !1
  %4 = bitcast i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)** %font_alloc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %6, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %7 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  %8 = bitcast %struct.pdf_standard_font_s** %psfa to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 160
  %10 = load %struct.pdf_text_data_s*, %struct.pdf_text_data_s** %text, align 8, !tbaa !71
  %outline_fonts = getelementptr inbounds %struct.pdf_text_data_s, %struct.pdf_text_data_s* %10, i32 0, i32 0
  %11 = load %struct.pdf_outline_fonts_s*, %struct.pdf_outline_fonts_s** %outline_fonts, align 8, !tbaa !172
  %standard_fonts = getelementptr inbounds %struct.pdf_outline_fonts_s, %struct.pdf_outline_fonts_s* %11, i32 0, i32 0
  %12 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %standard_fonts, align 8, !tbaa !173
  store %struct.pdf_standard_font_s* %12, %struct.pdf_standard_font_s** %psfa, align 8, !tbaa !1
  %13 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  store i32 0, i32* %code, align 4, !tbaa !21
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %version = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %14, i32 0, i32 67
  %15 = load i32, i32* %version, align 4, !tbaa !175
  %cmp = icmp ult i32 %15, 2010
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %16, i32 0, i32 11
  %17 = load i32, i32* %FontType, align 4, !tbaa !74
  switch i32 %17, label %sw.default [
    i32 42, label %sw.bb
    i32 11, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then
  store i32 -21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %entry
  %18 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %18, i32 0, i32 99
  %19 = load i32, i32* %ForOPDFRead, align 4, !tbaa !101
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %HaveCIDSystem = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %20, i32 0, i32 71
  %21 = load i32, i32* %HaveCIDSystem, align 4, !tbaa !176
  %tobool1 = icmp ne i32 %21, 0
  br i1 %tobool1, label %if.end.7, label %if.then.2

if.then.2:                                        ; preds = %land.lhs.true
  %22 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType3 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %22, i32 0, i32 11
  %23 = load i32, i32* %FontType3, align 4, !tbaa !74
  switch i32 %23, label %sw.default.5 [
    i32 9, label %sw.bb.4
    i32 11, label %sw.bb.4
  ]

sw.bb.4:                                          ; preds = %if.then.2, %if.then.2
  store i32 -21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

sw.default.5:                                     ; preds = %if.then.2
  br label %sw.epilog.6

sw.epilog.6:                                      ; preds = %sw.default.5
  br label %if.end.7

if.end.7:                                         ; preds = %sw.epilog.6, %land.lhs.true, %if.end
  %24 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %HaveCFF = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %24, i32 0, i32 69
  %25 = load i32, i32* %HaveCFF, align 4, !tbaa !177
  %tobool8 = icmp ne i32 %25, 0
  br i1 %tobool8, label %if.end.14, label %if.then.9

if.then.9:                                        ; preds = %if.end.7
  %26 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType10 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %26, i32 0, i32 11
  %27 = load i32, i32* %FontType10, align 4, !tbaa !74
  %cmp11 = icmp eq i32 %27, 2
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.9
  store i32 -21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

if.end.13:                                        ; preds = %if.then.9
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end.7
  %28 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %29 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %30 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %30, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i32 0
  %31 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %31, i32 0, i32 0
  %32 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %call = call i32 @pdf_font_embed_status(%struct.gx_device_pdf_s* %28, %struct.gs_font_s* %29, i32* %index, %struct.pdf_char_glyph_pair_s* %arraydecay, i32 %32) #7
  store i32 %call, i32* %embed, align 4, !tbaa !161
  %33 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %CompatibilityLevel = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %33, i32 0, i32 75
  %34 = load double, double* %CompatibilityLevel, align 8, !tbaa !178
  %cmp15 = fcmp olt double %34, 1.300000e+00
  br i1 %cmp15, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %if.end.14
  %35 = load i32, i32* %embed, align 4, !tbaa !161
  %cmp17 = icmp ne i32 %35, 1
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.22

land.lhs.true.18:                                 ; preds = %if.then.16
  %36 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType19 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %36, i32 0, i32 11
  %37 = load i32, i32* %FontType19, align 4, !tbaa !74
  %cmp20 = icmp eq i32 %37, 11
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %land.lhs.true.18
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

if.end.22:                                        ; preds = %land.lhs.true.18, %if.then.16
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end.14
  %38 = load i32, i32* %embed, align 4, !tbaa !161
  %cmp24 = icmp eq i32 %38, 0
  br i1 %cmp24, label %if.then.25, label %if.end.52

if.then.25:                                       ; preds = %if.end.23
  %39 = bitcast %struct.pdf_standard_font_s** %psf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %39) #1
  %40 = load i32, i32* %index, align 4, !tbaa !21
  %idxprom = sext i32 %40 to i64
  %41 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psfa, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %41, i64 %idxprom
  store %struct.pdf_standard_font_s* %arrayidx, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %42 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont26 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %42, i32 0, i32 0
  %43 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont26, align 8, !tbaa !179
  %cmp27 = icmp eq %struct.pdf_font_resource_s* %43, null
  br i1 %cmp27, label %if.then.34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.25
  %44 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %45 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont28 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %45, i32 0, i32 0
  %46 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont28, align 8, !tbaa !179
  %47 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %48 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s29 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %48, i32 0, i32 3
  %arraydecay30 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s29, i32 0, i32 0
  %49 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars31 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %49, i32 0, i32 0
  %50 = load i32, i32* %num_all_chars31, align 4, !tbaa !169
  %call32 = call i32 @pdf_is_compatible_encoding(%struct.gx_device_pdf_s* %44, %struct.pdf_font_resource_s* %46, %struct.gs_font_s* %47, %struct.pdf_char_glyph_pair_s* %arraydecay30, i32 %50) #7
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.else, label %if.then.34

if.then.34:                                       ; preds = %lor.lhs.false, %if.then.25
  %51 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %52 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %53 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont35 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %53, i32 0, i32 0
  %54 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont35, align 8, !tbaa !179
  %cmp36 = icmp eq %struct.pdf_font_resource_s* %54, null
  %conv = zext i1 %cmp36 to i32
  %55 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %id = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %55, i32 0, i32 6
  %56 = load i64, i64* %id, align 8, !tbaa !115
  %57 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %58 = bitcast %struct.gs_font_s* %57 to %struct.gs_font_base_s*
  %59 = load i32, i32* %index, align 4, !tbaa !21
  %call37 = call i32 @pdf_font_std_alloc(%struct.gx_device_pdf_s* %51, %struct.pdf_font_resource_s** %52, i32 %conv, i64 %56, %struct.gs_font_base_s* %58, i32 %59) #7
  store i32 %call37, i32* %code, align 4, !tbaa !21
  %60 = load i32, i32* %code, align 4, !tbaa !21
  %cmp38 = icmp slt i32 %60, 0
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.then.34
  %61 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %61, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.41:                                        ; preds = %if.then.34
  %62 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont42 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %62, i32 0, i32 0
  %63 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont42, align 8, !tbaa !179
  %cmp43 = icmp eq %struct.pdf_font_resource_s* %63, null
  br i1 %cmp43, label %if.then.45, label %if.end.47

if.then.45:                                       ; preds = %if.end.41
  %64 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %65 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %64, align 8, !tbaa !1
  %66 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont46 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %66, i32 0, i32 0
  store %struct.pdf_font_resource_s* %65, %struct.pdf_font_resource_s** %pdfont46, align 8, !tbaa !179
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %if.end.41
  %67 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %68 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %69 = bitcast %struct.gs_font_s* %68 to %struct.gs_font_base_s*
  %nearest_encoding_index = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %69, i32 0, i32 28
  %70 = load i32, i32* %nearest_encoding_index, align 4, !tbaa !181
  %call48 = call i32 @pdf_refine_encoding_index(%struct.gx_device_pdf_s* %67, i32 %70, i32 1) #7
  %71 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %72 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %71, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %72, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %BaseEncoding49 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 2
  store i32 %call48, i32* %BaseEncoding49, align 4, !tbaa !183
  store i32 1, i32* %code, align 4, !tbaa !21
  br label %if.end.51

if.else:                                          ; preds = %lor.lhs.false
  %73 = load %struct.pdf_standard_font_s*, %struct.pdf_standard_font_s** %psf, align 8, !tbaa !1
  %pdfont50 = getelementptr inbounds %struct.pdf_standard_font_s, %struct.pdf_standard_font_s* %73, i32 0, i32 0
  %74 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont50, align 8, !tbaa !179
  %75 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %74, %struct.pdf_font_resource_s** %75, align 8, !tbaa !1
  br label %if.end.51

if.end.51:                                        ; preds = %if.else, %if.end.47
  %76 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %76, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.51, %if.then.40
  %77 = bitcast %struct.pdf_standard_font_s** %psf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #1
  br label %cleanup.177

if.end.52:                                        ; preds = %if.end.23
  %78 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType53 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %78, i32 0, i32 11
  %79 = load i32, i32* %FontType53, align 4, !tbaa !74
  switch i32 %79, label %sw.default.62 [
    i32 9, label %sw.bb.54
    i32 11, label %sw.bb.54
    i32 1, label %sw.bb.55
    i32 2, label %sw.bb.55
    i32 42, label %sw.bb.55
    i32 3, label %sw.bb.56
    i32 53, label %sw.bb.56
    i32 51, label %sw.bb.56
    i32 52, label %sw.bb.56
    i32 54, label %sw.bb.56
  ]

sw.bb.54:                                         ; preds = %if.end.52, %if.end.52
  store i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)* @pdf_font_cidfont_alloc, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)** %font_alloc, align 8, !tbaa !1
  br label %sw.epilog.63

sw.bb.55:                                         ; preds = %if.end.52, %if.end.52, %if.end.52
  store i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)* @pdf_font_simple_alloc, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)** %font_alloc, align 8, !tbaa !1
  br label %sw.epilog.63

sw.bb.56:                                         ; preds = %if.end.52, %if.end.52, %if.end.52, %if.end.52, %if.end.52
  %80 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %81 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %82 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call57 = call i32 @pdf_make_font3_resource(%struct.gx_device_pdf_s* %80, %struct.gs_font_s* %81, %struct.pdf_font_resource_s** %82) #7
  store i32 %call57, i32* %code, align 4, !tbaa !21
  %83 = load i32, i32* %code, align 4, !tbaa !21
  %cmp58 = icmp slt i32 %83, 0
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %sw.bb.56
  %84 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %84, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

if.end.61:                                        ; preds = %sw.bb.56
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

sw.default.62:                                    ; preds = %if.end.52
  store i32 -10, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

sw.epilog.63:                                     ; preds = %sw.bb.55, %sw.bb.54
  %85 = load i32, i32* %embed, align 4, !tbaa !161
  %cmp64 = icmp eq i32 %85, 2
  br i1 %cmp64, label %if.then.66, label %if.end.96

if.then.66:                                       ; preds = %sw.epilog.63
  %86 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType67 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %86, i32 0, i32 11
  %87 = load i32, i32* %FontType67, align 4, !tbaa !74
  %cmp68 = icmp eq i32 %87, 42
  br i1 %cmp68, label %land.lhs.true.70, label %if.end.95

land.lhs.true.70:                                 ; preds = %if.then.66
  %88 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %CompatibilityLevel71 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %88, i32 0, i32 75
  %89 = load double, double* %CompatibilityLevel71, align 8, !tbaa !178
  %cmp72 = fcmp ole double %89, 1.200000e+00
  br i1 %cmp72, label %land.lhs.true.74, label %if.end.95

land.lhs.true.74:                                 ; preds = %land.lhs.true.70
  %90 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead75 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %90, i32 0, i32 99
  %91 = load i32, i32* %ForOPDFRead75, align 4, !tbaa !101
  %tobool76 = icmp ne i32 %91, 0
  br i1 %tobool76, label %if.end.95, label %if.then.77

if.then.77:                                       ; preds = %land.lhs.true.74
  %92 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %92) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.77
  %93 = load i32, i32* %i, align 4, !tbaa !21
  %cmp78 = icmp sle i32 %93, 255
  br i1 %cmp78, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %94 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %94) #1
  %95 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %95, i32 0, i32 20
  %encode_char = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 4
  %96 = load i64 (%struct.gs_font_s*, i64, i32)*, i64 (%struct.gs_font_s*, i64, i32)** %encode_char, align 8, !tbaa !184
  %97 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %98 = load i32, i32* %i, align 4, !tbaa !21
  %conv80 = sext i32 %98 to i64
  %call81 = call i64 %96(%struct.gs_font_s* %97, i64 %conv80, i32 1) #7
  store i64 %call81, i64* %glyph, align 8, !tbaa !25
  %99 = load i64, i64* %glyph, align 8, !tbaa !25
  %cmp82 = icmp eq i64 %99, 2147483647
  br i1 %cmp82, label %if.then.90, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %for.body
  %100 = load i64, i64* %glyph, align 8, !tbaa !25
  %cmp85 = icmp uge i64 %100, 3221225472
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.91

land.lhs.true.87:                                 ; preds = %lor.lhs.false.84
  %101 = load i64, i64* %glyph, align 8, !tbaa !25
  %cmp88 = icmp ule i64 %101, 3221225727
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %land.lhs.true.87, %for.body
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.92

if.end.91:                                        ; preds = %land.lhs.true.87, %lor.lhs.false.84
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.92

cleanup.92:                                       ; preds = %if.end.91, %if.then.90
  %102 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %102) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.93 [
    i32 7, label %for.inc
  ]

for.inc:                                          ; preds = %cleanup.92
  %103 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %103, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.93

cleanup.93:                                       ; preds = %for.end, %cleanup.92
  %104 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %104) #1
  %cleanup.dest.94 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.94, label %cleanup.177 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup.93
  br label %if.end.95

if.end.95:                                        ; preds = %cleanup.cont, %land.lhs.true.74, %land.lhs.true.70, %if.then.66
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %sw.epilog.63
  %105 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType97 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %105, i32 0, i32 11
  %106 = load i32, i32* %FontType97, align 4, !tbaa !74
  %cmp98 = icmp eq i32 %106, 1
  br i1 %cmp98, label %if.then.111, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %if.end.96
  %107 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType101 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %107, i32 0, i32 11
  %108 = load i32, i32* %FontType101, align 4, !tbaa !74
  %cmp102 = icmp eq i32 %108, 2
  br i1 %cmp102, label %if.then.111, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %lor.lhs.false.100
  %109 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType105 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %109, i32 0, i32 11
  %110 = load i32, i32* %FontType105, align 4, !tbaa !74
  %cmp106 = icmp eq i32 %110, 42
  br i1 %cmp106, label %land.lhs.true.108, label %if.end.114

land.lhs.true.108:                                ; preds = %lor.lhs.false.104
  %111 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead109 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %111, i32 0, i32 99
  %112 = load i32, i32* %ForOPDFRead109, align 4, !tbaa !101
  %tobool110 = icmp ne i32 %112, 0
  br i1 %tobool110, label %if.then.111, label %if.end.114

if.then.111:                                      ; preds = %land.lhs.true.108, %lor.lhs.false.100, %if.end.96
  %113 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %114 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %115 = bitcast %struct.gs_font_s* %114 to %struct.gs_font_base_s*
  %nearest_encoding_index112 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %115, i32 0, i32 28
  %116 = load i32, i32* %nearest_encoding_index112, align 4, !tbaa !181
  %call113 = call i32 @pdf_refine_encoding_index(%struct.gx_device_pdf_s* %113, i32 %116, i32 0) #7
  store i32 %call113, i32* %BaseEncoding, align 4, !tbaa !21
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.111, %land.lhs.true.108, %lor.lhs.false.104
  %117 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %118 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %119 = bitcast %struct.gs_font_s* %118 to %struct.gs_font_base_s*
  %120 = load i32, i32* %embed, align 4, !tbaa !161
  %cmp115 = icmp eq i32 %120, 2
  %conv116 = zext i1 %cmp115 to i32
  %call117 = call i32 @pdf_font_descriptor_alloc(%struct.gx_device_pdf_s* %117, %struct.pdf_font_descriptor_s** %pfd, %struct.gs_font_base_s* %119, i32 %conv116) #7
  store i32 %call117, i32* %code, align 4, !tbaa !21
  %cmp118 = icmp slt i32 %call117, 0
  br i1 %cmp118, label %if.then.125, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %if.end.114
  %121 = load i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)*, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)** %font_alloc, align 8, !tbaa !1
  %122 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %123 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %id121 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %123, i32 0, i32 6
  %124 = load i64, i64* %id121, align 8, !tbaa !115
  %125 = load %struct.pdf_font_descriptor_s*, %struct.pdf_font_descriptor_s** %pfd, align 8, !tbaa !1
  %call122 = call i32 %121(%struct.gx_device_pdf_s* %122, %struct.pdf_font_resource_s** %pdfont, i64 %124, %struct.pdf_font_descriptor_s* %125) #7
  store i32 %call122, i32* %code, align 4, !tbaa !21
  %cmp123 = icmp slt i32 %call122, 0
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %lor.lhs.false.120, %if.end.114
  %126 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %126, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

if.end.126:                                       ; preds = %lor.lhs.false.120
  %127 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call127 = call i32 @pdf_is_CID_font(%struct.gs_font_s* %127) #7
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end.134, label %if.then.129

if.then.129:                                      ; preds = %if.end.126
  %128 = load i32, i32* %BaseEncoding, align 4, !tbaa !21
  %129 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u130 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %129, i32 0, i32 20
  %simple131 = bitcast %union.anon.1* %u130 to %struct.anon.4*
  %BaseEncoding132 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple131, i32 0, i32 2
  store i32 %128, i32* %BaseEncoding132, align 4, !tbaa !183
  %130 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %dir = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %130, i32 0, i32 3
  %131 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %dir, align 8, !tbaa !185
  %ccache = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %131, i32 0, i32 5
  %mark_glyph = getelementptr inbounds %struct.char_cache_s, %struct.char_cache_s* %ccache, i32 0, i32 13
  %132 = load i32 (%struct.gs_memory_s*, i64, i8*)*, i32 (%struct.gs_memory_s*, i64, i8*)** %mark_glyph, align 8, !tbaa !186
  %133 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %mark_glyph133 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %133, i32 0, i32 18
  store i32 (%struct.gs_memory_s*, i64, i8*)* %132, i32 (%struct.gs_memory_s*, i64, i8*)** %mark_glyph133, align 8, !tbaa !190
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.129, %if.end.126
  %134 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %PDFA = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %134, i32 0, i32 109
  %135 = load i32, i32* %PDFA, align 4, !tbaa !191
  %cmp135 = icmp ne i32 %135, 0
  br i1 %cmp135, label %land.lhs.true.137, label %if.end.176

land.lhs.true.137:                                ; preds = %if.end.134
  %136 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType138 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %136, i32 0, i32 11
  %137 = load i32, i32* %FontType138, align 4, !tbaa !74
  %cmp139 = icmp eq i32 %137, 42
  br i1 %cmp139, label %if.then.141, label %if.end.176

if.then.141:                                      ; preds = %land.lhs.true.137
  %138 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %138) #1
  %139 = load %struct.pdf_font_descriptor_s*, %struct.pdf_font_descriptor_s** %pfd, align 8, !tbaa !1
  %call142 = call %struct.gs_font_base_s* @pdf_font_descriptor_font(%struct.pdf_font_descriptor_s* %139, i32 0) #7
  store %struct.gs_font_base_s* %call142, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %140 = bitcast i64* %notdef_glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %140) #1
  %141 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %142 = bitcast %struct.gs_font_base_s* %141 to %struct.gs_font_s*
  %call143 = call i64 @copied_get_notdef(%struct.gs_font_s* %142) #7
  store i64 %call143, i64* %notdef_glyph, align 8, !tbaa !25
  %143 = bitcast %struct.pdf_glyph_widths_s* %widths to i8*
  call void @llvm.lifetime.start(i64 120, i8* %143) #1
  %144 = bitcast [10 x double]* %cdevproc_result to i8*
  call void @llvm.lifetime.start(i64 80, i8* %144) #1
  %145 = bitcast [10 x double]* %cdevproc_result to i8*
  call void @llvm.memset.p0i8.i64(i8* %145, i8 0, i64 80, i32 16, i1 false)
  %146 = bitcast double** %w to i8*
  call void @llvm.lifetime.start(i64 8, i8* %146) #1
  %147 = bitcast double** %v to i8*
  call void @llvm.lifetime.start(i64 8, i8* %147) #1
  %148 = bitcast double** %w0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %148) #1
  %149 = load i64, i64* %notdef_glyph, align 8, !tbaa !25
  %cmp144 = icmp ne i64 %149, 2147483647
  br i1 %cmp144, label %if.then.146, label %if.end.166

if.then.146:                                      ; preds = %if.then.141
  %150 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %151 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %152 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %WMode = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %152, i32 0, i32 16
  %153 = load i32, i32* %WMode, align 4, !tbaa !192
  %call147 = call i32 @pdf_obtain_cidfont_widths_arrays(%struct.gx_device_pdf_s* %150, %struct.pdf_font_resource_s* %151, i32 %153, double** %w, double** %w0, double** %v) #7
  store i32 %call147, i32* %code, align 4, !tbaa !21
  %154 = load i32, i32* %code, align 4, !tbaa !21
  %cmp148 = icmp slt i32 %154, 0
  br i1 %cmp148, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %if.then.146
  %155 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %155, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.167

if.end.151:                                       ; preds = %if.then.146
  %Width = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %widths, i32 0, i32 0
  %w152 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width, i32 0, i32 0
  store double 0.000000e+00, double* %w152, align 8, !tbaa !193
  %156 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %157 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %WMode153 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %157, i32 0, i32 16
  %158 = load i32, i32* %WMode153, align 4, !tbaa !192
  %159 = load i64, i64* %notdef_glyph, align 8, !tbaa !25
  %160 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %arraydecay154 = getelementptr inbounds [10 x double], [10 x double]* %cdevproc_result, i32 0, i32 0
  %call155 = call i32 @pdf_glyph_widths(%struct.pdf_font_resource_s* %156, i32 %158, i64 %159, %struct.gs_font_s* %160, %struct.pdf_glyph_widths_s* %widths, double* %arraydecay154) #7
  store i32 %call155, i32* %code, align 4, !tbaa !21
  %161 = load i32, i32* %code, align 4, !tbaa !21
  %cmp156 = icmp slt i32 %161, 0
  br i1 %cmp156, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %if.end.151
  %162 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %162, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.167

if.end.159:                                       ; preds = %if.end.151
  %Width160 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %widths, i32 0, i32 0
  %w161 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width160, i32 0, i32 0
  %163 = load double, double* %w161, align 8, !tbaa !193
  %164 = load double*, double** %w, align 8, !tbaa !1
  %arrayidx162 = getelementptr inbounds double, double* %164, i64 0
  store double %163, double* %arrayidx162, align 8, !tbaa !196
  %165 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %used = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %165, i32 0, i32 15
  %166 = load i8*, i8** %used, align 8, !tbaa !197
  %arrayidx163 = getelementptr inbounds i8, i8* %166, i64 0
  %167 = load i8, i8* %arrayidx163, align 1, !tbaa !161
  %conv164 = zext i8 %167 to i32
  %or = or i32 %conv164, 128
  %conv165 = trunc i32 %or to i8
  store i8 %conv165, i8* %arrayidx163, align 1, !tbaa !161
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.159, %if.then.141
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.167

cleanup.167:                                      ; preds = %if.end.166, %if.then.158, %if.then.150
  %168 = bitcast double** %w0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %168) #1
  %169 = bitcast double** %v to i8*
  call void @llvm.lifetime.end(i64 8, i8* %169) #1
  %170 = bitcast double** %w to i8*
  call void @llvm.lifetime.end(i64 8, i8* %170) #1
  %171 = bitcast [10 x double]* %cdevproc_result to i8*
  call void @llvm.lifetime.end(i64 80, i8* %171) #1
  %172 = bitcast %struct.pdf_glyph_widths_s* %widths to i8*
  call void @llvm.lifetime.end(i64 120, i8* %172) #1
  %173 = bitcast i64* %notdef_glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %173) #1
  %174 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %174) #1
  %cleanup.dest.174 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.174, label %cleanup.177 [
    i32 0, label %cleanup.cont.175
  ]

cleanup.cont.175:                                 ; preds = %cleanup.167
  br label %if.end.176

if.end.176:                                       ; preds = %cleanup.cont.175, %land.lhs.true.137, %if.end.134
  %175 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %176 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %175, %struct.pdf_font_resource_s** %176, align 8, !tbaa !1
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.177

cleanup.177:                                      ; preds = %if.end.176, %cleanup.167, %if.then.125, %cleanup.93, %sw.default.62, %if.end.61, %if.then.60, %cleanup, %if.then.21, %if.then.12, %sw.bb.4, %sw.bb
  %177 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %177) #1
  %178 = bitcast %struct.pdf_standard_font_s** %psfa to i8*
  call void @llvm.lifetime.end(i64 8, i8* %178) #1
  %179 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %179) #1
  %180 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %180) #1
  %181 = bitcast i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*)** %font_alloc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %181) #1
  %182 = bitcast %struct.pdf_font_descriptor_s** %pfd to i8*
  call void @llvm.lifetime.end(i64 8, i8* %182) #1
  %183 = bitcast i32* %embed to i8*
  call void @llvm.lifetime.end(i64 4, i8* %183) #1
  %184 = bitcast i32* %BaseEncoding to i8*
  call void @llvm.lifetime.end(i64 4, i8* %184) #1
  %185 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %185) #1
  %186 = load i32, i32* %retval
  ret i32 %186
}

; Function Attrs: nounwind uwtable
define i32 @pdf_make_font3_resource(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, %struct.pdf_font_resource_s** %ppdfont) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %bfont = alloca %struct.gs_font_base_s*, align 8
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %cached = alloca i8*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_font_base_s** %bfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_font_s* %1 to %struct.gs_font_base_s*
  store %struct.gs_font_base_s* %2, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %3 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast i8** %cached to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  %6 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %6, i32 0, i32 43
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory, align 8, !tbaa !119
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %7, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %8 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !125
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory1 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 43
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory1, align 8, !tbaa !119
  %call = call i8* %8(%struct.gs_memory_s* %10, i32 32, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0)) #7
  store i8* %call, i8** %cached, align 8, !tbaa !1
  %11 = load i8*, i8** %cached, align 8, !tbaa !1
  %cmp = icmp eq i8* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %13 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %id = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %13, i32 0, i32 6
  %14 = load i64, i64* %id, align 8, !tbaa !198
  %call2 = call i32 @font_resource_encoded_alloc(%struct.gx_device_pdf_s* %12, %struct.pdf_font_resource_s** %pdfont, i64 %14, i32 3, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s*)* @pdf_write_contents_bitmap) #7
  store i32 %call2, i32* %code, align 4, !tbaa !21
  %15 = load i32, i32* %code, align 4, !tbaa !21
  %cmp3 = icmp slt i32 %15, 0
  br i1 %cmp3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %16 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory5 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %16, i32 0, i32 43
  %17 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory5, align 8, !tbaa !119
  %procs6 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %17, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs6, i32 0, i32 2
  %18 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %19 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory7 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %19, i32 0, i32 43
  %20 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory7, align 8, !tbaa !119
  %21 = load i8*, i8** %cached, align 8, !tbaa !1
  call void %18(%struct.gs_memory_s* %20, i8* %21, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0)) #7
  %22 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %22, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end
  %23 = load i8*, i8** %cached, align 8, !tbaa !1
  %call9 = call i8* @memset(i8* %23, i32 0, i64 32) #9
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %dir = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %24, i32 0, i32 3
  %25 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %dir, align 8, !tbaa !185
  %ccache = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %25, i32 0, i32 5
  %mark_glyph = getelementptr inbounds %struct.char_cache_s, %struct.char_cache_s* %ccache, i32 0, i32 13
  %26 = load i32 (%struct.gs_memory_s*, i64, i8*)*, i32 (%struct.gs_memory_s*, i64, i8*)** %mark_glyph, align 8, !tbaa !186
  %27 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %mark_glyph10 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %27, i32 0, i32 18
  store i32 (%struct.gs_memory_s*, i64, i8*)* %26, i32 (%struct.gs_memory_s*, i64, i8*)** %mark_glyph10, align 8, !tbaa !190
  %28 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %28, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %s = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 7
  %type3 = bitcast %union.anon.5* %s to %struct.anon.8*
  %bitmap_font = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3, i32 0, i32 4
  store i32 0, i32* %bitmap_font, align 4, !tbaa !199
  %29 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %30 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %nearest_encoding_index = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %30, i32 0, i32 28
  %31 = load i32, i32* %nearest_encoding_index, align 4, !tbaa !181
  %call11 = call i32 @pdf_refine_encoding_index(%struct.gx_device_pdf_s* %29, i32 %31, i32 1) #7
  %32 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u12 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %32, i32 0, i32 20
  %simple13 = bitcast %union.anon.1* %u12 to %struct.anon.4*
  %BaseEncoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple13, i32 0, i32 2
  store i32 %call11, i32* %BaseEncoding, align 4, !tbaa !183
  %33 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u14 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %33, i32 0, i32 20
  %simple15 = bitcast %union.anon.1* %u14 to %struct.anon.4*
  %s16 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple15, i32 0, i32 7
  %type317 = bitcast %union.anon.5* %s16 to %struct.anon.8*
  %char_procs = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type317, i32 0, i32 2
  store %struct.pdf_char_proc_ownership_s* null, %struct.pdf_char_proc_ownership_s** %char_procs, align 8, !tbaa !201
  %34 = load i8*, i8** %cached, align 8, !tbaa !1
  %35 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u18 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %35, i32 0, i32 20
  %simple19 = bitcast %union.anon.1* %u18 to %struct.anon.4*
  %s20 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple19, i32 0, i32 7
  %type321 = bitcast %union.anon.5* %s20 to %struct.anon.8*
  %cached22 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type321, i32 0, i32 6
  store i8* %34, i8** %cached22, align 8, !tbaa !202
  %36 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %36, i32 0, i32 8
  %37 = load i32, i32* %FontType, align 4, !tbaa !126
  %cmp23 = icmp eq i32 %37, 3
  br i1 %cmp23, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.8
  %38 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %38, i32 0, i32 23
  %p = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %39 = load double, double* %x, align 8, !tbaa !203
  %cmp24 = fcmp oeq double %39, 0.000000e+00
  br i1 %cmp24, label %land.lhs.true.25, label %if.else

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %40 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox26 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %40, i32 0, i32 23
  %p27 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox26, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p27, i32 0, i32 1
  %41 = load double, double* %y, align 8, !tbaa !204
  %cmp28 = fcmp oeq double %41, 0.000000e+00
  br i1 %cmp28, label %land.lhs.true.29, label %if.else

land.lhs.true.29:                                 ; preds = %land.lhs.true.25
  %42 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox30 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %42, i32 0, i32 23
  %q = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox30, i32 0, i32 1
  %x31 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q, i32 0, i32 0
  %43 = load double, double* %x31, align 8, !tbaa !205
  %cmp32 = fcmp oeq double %43, 0.000000e+00
  br i1 %cmp32, label %land.lhs.true.33, label %if.else

land.lhs.true.33:                                 ; preds = %land.lhs.true.29
  %44 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox34 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %44, i32 0, i32 23
  %q35 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox34, i32 0, i32 1
  %y36 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q35, i32 0, i32 1
  %45 = load double, double* %y36, align 8, !tbaa !206
  %cmp37 = fcmp oeq double %45, 0.000000e+00
  br i1 %cmp37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %land.lhs.true.33
  %46 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u39 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %46, i32 0, i32 20
  %simple40 = bitcast %union.anon.1* %u39 to %struct.anon.4*
  %s41 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple40, i32 0, i32 7
  %type342 = bitcast %union.anon.5* %s41 to %struct.anon.8*
  %FontBBox43 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type342, i32 0, i32 0
  %p44 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox43, i32 0, i32 0
  %x45 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p44, i32 0, i32 0
  store double 0.000000e+00, double* %x45, align 8, !tbaa !207
  %47 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u46 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %47, i32 0, i32 20
  %simple47 = bitcast %union.anon.1* %u46 to %struct.anon.4*
  %s48 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple47, i32 0, i32 7
  %type349 = bitcast %union.anon.5* %s48 to %struct.anon.8*
  %FontBBox50 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type349, i32 0, i32 0
  %p51 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox50, i32 0, i32 0
  %y52 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p51, i32 0, i32 1
  store double 0.000000e+00, double* %y52, align 8, !tbaa !208
  %48 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u53 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %48, i32 0, i32 20
  %simple54 = bitcast %union.anon.1* %u53 to %struct.anon.4*
  %s55 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple54, i32 0, i32 7
  %type356 = bitcast %union.anon.5* %s55 to %struct.anon.8*
  %FontBBox57 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type356, i32 0, i32 0
  %q58 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox57, i32 0, i32 1
  %x59 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q58, i32 0, i32 0
  store double 1.000000e+00, double* %x59, align 8, !tbaa !209
  %49 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u60 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %49, i32 0, i32 20
  %simple61 = bitcast %union.anon.1* %u60 to %struct.anon.4*
  %s62 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple61, i32 0, i32 7
  %type363 = bitcast %union.anon.5* %s62 to %struct.anon.8*
  %FontBBox64 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type363, i32 0, i32 0
  %q65 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox64, i32 0, i32 1
  %y66 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q65, i32 0, i32 1
  store double -1.000000e+00, double* %y66, align 8, !tbaa !210
  br label %if.end.107

if.else:                                          ; preds = %land.lhs.true.33, %land.lhs.true.29, %land.lhs.true.25, %land.lhs.true, %if.end.8
  %50 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox67 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %50, i32 0, i32 23
  %p68 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox67, i32 0, i32 0
  %x69 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p68, i32 0, i32 0
  %51 = load double, double* %x69, align 8, !tbaa !203
  %52 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u70 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %52, i32 0, i32 20
  %simple71 = bitcast %union.anon.1* %u70 to %struct.anon.4*
  %s72 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple71, i32 0, i32 7
  %type373 = bitcast %union.anon.5* %s72 to %struct.anon.8*
  %FontBBox74 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type373, i32 0, i32 0
  %p75 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox74, i32 0, i32 0
  %x76 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p75, i32 0, i32 0
  store double %51, double* %x76, align 8, !tbaa !207
  %53 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox77 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %53, i32 0, i32 23
  %p78 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox77, i32 0, i32 0
  %y79 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p78, i32 0, i32 1
  %54 = load double, double* %y79, align 8, !tbaa !204
  %55 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u80 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %55, i32 0, i32 20
  %simple81 = bitcast %union.anon.1* %u80 to %struct.anon.4*
  %s82 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple81, i32 0, i32 7
  %type383 = bitcast %union.anon.5* %s82 to %struct.anon.8*
  %FontBBox84 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type383, i32 0, i32 0
  %p85 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox84, i32 0, i32 0
  %y86 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p85, i32 0, i32 1
  store double %54, double* %y86, align 8, !tbaa !208
  %56 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox87 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %56, i32 0, i32 23
  %q88 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox87, i32 0, i32 1
  %x89 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q88, i32 0, i32 0
  %57 = load double, double* %x89, align 8, !tbaa !205
  %58 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u90 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %58, i32 0, i32 20
  %simple91 = bitcast %union.anon.1* %u90 to %struct.anon.4*
  %s92 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple91, i32 0, i32 7
  %type393 = bitcast %union.anon.5* %s92 to %struct.anon.8*
  %FontBBox94 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type393, i32 0, i32 0
  %q95 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox94, i32 0, i32 1
  %x96 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q95, i32 0, i32 0
  store double %57, double* %x96, align 8, !tbaa !209
  %59 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontBBox97 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %59, i32 0, i32 23
  %q98 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox97, i32 0, i32 1
  %y99 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q98, i32 0, i32 1
  %60 = load double, double* %y99, align 8, !tbaa !206
  %61 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u100 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %61, i32 0, i32 20
  %simple101 = bitcast %union.anon.1* %u100 to %struct.anon.4*
  %s102 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple101, i32 0, i32 7
  %type3103 = bitcast %union.anon.5* %s102 to %struct.anon.8*
  %FontBBox104 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3103, i32 0, i32 0
  %q105 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %FontBBox104, i32 0, i32 1
  %y106 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q105, i32 0, i32 1
  store double %60, double* %y106, align 8, !tbaa !210
  br label %if.end.107

if.end.107:                                       ; preds = %if.else, %if.then.38
  %62 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u108 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %62, i32 0, i32 20
  %simple109 = bitcast %union.anon.1* %u108 to %struct.anon.4*
  %s110 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple109, i32 0, i32 7
  %type3111 = bitcast %union.anon.5* %s110 to %struct.anon.8*
  %FontMatrix = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3111, i32 0, i32 1
  %63 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %FontMatrix112 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %63, i32 0, i32 9
  %64 = bitcast %struct.gs_matrix_s* %FontMatrix to i8*
  %65 = bitcast %struct.gs_matrix_s* %FontMatrix112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 24, i32 4, i1 false), !tbaa.struct !141
  %66 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call113 = call %struct.cos_dict_s* @cos_dict_alloc(%struct.gx_device_pdf_s* %66, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0)) #7
  %67 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u114 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %67, i32 0, i32 20
  %simple115 = bitcast %union.anon.1* %u114 to %struct.anon.4*
  %s116 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple115, i32 0, i32 7
  %type3117 = bitcast %union.anon.5* %s116 to %struct.anon.8*
  %Resources = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3117, i32 0, i32 5
  store %struct.cos_dict_s* %call113, %struct.cos_dict_s** %Resources, align 8, !tbaa !211
  %68 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u118 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %68, i32 0, i32 20
  %simple119 = bitcast %union.anon.1* %u118 to %struct.anon.4*
  %s120 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple119, i32 0, i32 7
  %type3121 = bitcast %union.anon.5* %s120 to %struct.anon.8*
  %Resources122 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3121, i32 0, i32 5
  %69 = load %struct.cos_dict_s*, %struct.cos_dict_s** %Resources122, align 8, !tbaa !211
  %cmp123 = icmp eq %struct.cos_dict_s* %69, null
  br i1 %cmp123, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.end.107
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.125:                                       ; preds = %if.end.107
  %70 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u126 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %70, i32 0, i32 20
  %simple127 = bitcast %union.anon.1* %u126 to %struct.anon.4*
  %s128 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple127, i32 0, i32 7
  %type3129 = bitcast %union.anon.5* %s128 to %struct.anon.8*
  %FontMatrix130 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3129, i32 0, i32 1
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix130, i32 0, i32 0
  %71 = load float, float* %xx, align 4, !tbaa !212
  %conv = fpext float %71 to double
  %cmp131 = fcmp une double %conv, 0.000000e+00
  br i1 %cmp131, label %if.then.159, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.125
  %72 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u133 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %72, i32 0, i32 20
  %simple134 = bitcast %union.anon.1* %u133 to %struct.anon.4*
  %s135 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple134, i32 0, i32 7
  %type3136 = bitcast %union.anon.5* %s135 to %struct.anon.8*
  %FontMatrix137 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3136, i32 0, i32 1
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix137, i32 0, i32 1
  %73 = load float, float* %xy, align 4, !tbaa !213
  %conv138 = fpext float %73 to double
  %cmp139 = fcmp une double %conv138, 0.000000e+00
  br i1 %cmp139, label %if.then.159, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %lor.lhs.false
  %74 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u142 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %74, i32 0, i32 20
  %simple143 = bitcast %union.anon.1* %u142 to %struct.anon.4*
  %s144 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple143, i32 0, i32 7
  %type3145 = bitcast %union.anon.5* %s144 to %struct.anon.8*
  %FontMatrix146 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3145, i32 0, i32 1
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix146, i32 0, i32 2
  %75 = load float, float* %yx, align 4, !tbaa !214
  %conv147 = fpext float %75 to double
  %cmp148 = fcmp une double %conv147, 0.000000e+00
  br i1 %cmp148, label %if.then.159, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %lor.lhs.false.141
  %76 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u151 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %76, i32 0, i32 20
  %simple152 = bitcast %union.anon.1* %u151 to %struct.anon.4*
  %s153 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple152, i32 0, i32 7
  %type3154 = bitcast %union.anon.5* %s153 to %struct.anon.8*
  %FontMatrix155 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3154, i32 0, i32 1
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix155, i32 0, i32 3
  %77 = load float, float* %yy, align 4, !tbaa !215
  %conv156 = fpext float %77 to double
  %cmp157 = fcmp une double %conv156, 0.000000e+00
  br i1 %cmp157, label %if.then.159, label %if.end.296

if.then.159:                                      ; preds = %lor.lhs.false.150, %lor.lhs.false.141, %lor.lhs.false, %if.end.125
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.159
  %78 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u160 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %78, i32 0, i32 20
  %simple161 = bitcast %union.anon.1* %u160 to %struct.anon.4*
  %s162 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple161, i32 0, i32 7
  %type3163 = bitcast %union.anon.5* %s162 to %struct.anon.8*
  %FontMatrix164 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3163, i32 0, i32 1
  %xx165 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix164, i32 0, i32 0
  %79 = load float, float* %xx165, align 4, !tbaa !212
  %cmp166 = fcmp olt float %79, 0.000000e+00
  br i1 %cmp166, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.cond
  %80 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u168 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %80, i32 0, i32 20
  %simple169 = bitcast %union.anon.1* %u168 to %struct.anon.4*
  %s170 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple169, i32 0, i32 7
  %type3171 = bitcast %union.anon.5* %s170 to %struct.anon.8*
  %FontMatrix172 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3171, i32 0, i32 1
  %xx173 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix172, i32 0, i32 0
  %81 = load float, float* %xx173, align 4, !tbaa !212
  %sub = fsub float -0.000000e+00, %81
  br label %cond.end

cond.false:                                       ; preds = %while.cond
  %82 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u174 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %82, i32 0, i32 20
  %simple175 = bitcast %union.anon.1* %u174 to %struct.anon.4*
  %s176 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple175, i32 0, i32 7
  %type3177 = bitcast %union.anon.5* %s176 to %struct.anon.8*
  %FontMatrix178 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3177, i32 0, i32 1
  %xx179 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix178, i32 0, i32 0
  %83 = load float, float* %xx179, align 4, !tbaa !212
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub, %cond.true ], [ %83, %cond.false ]
  %conv180 = fpext float %cond to double
  %cmp181 = fcmp olt double %conv180, 1.000000e-03
  br i1 %cmp181, label %land.lhs.true.183, label %land.end

land.lhs.true.183:                                ; preds = %cond.end
  %84 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u184 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %84, i32 0, i32 20
  %simple185 = bitcast %union.anon.1* %u184 to %struct.anon.4*
  %s186 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple185, i32 0, i32 7
  %type3187 = bitcast %union.anon.5* %s186 to %struct.anon.8*
  %FontMatrix188 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3187, i32 0, i32 1
  %xy189 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix188, i32 0, i32 1
  %85 = load float, float* %xy189, align 4, !tbaa !213
  %cmp190 = fcmp olt float %85, 0.000000e+00
  br i1 %cmp190, label %cond.true.192, label %cond.false.200

cond.true.192:                                    ; preds = %land.lhs.true.183
  %86 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u193 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %86, i32 0, i32 20
  %simple194 = bitcast %union.anon.1* %u193 to %struct.anon.4*
  %s195 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple194, i32 0, i32 7
  %type3196 = bitcast %union.anon.5* %s195 to %struct.anon.8*
  %FontMatrix197 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3196, i32 0, i32 1
  %xy198 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix197, i32 0, i32 1
  %87 = load float, float* %xy198, align 4, !tbaa !213
  %sub199 = fsub float -0.000000e+00, %87
  br label %cond.end.207

cond.false.200:                                   ; preds = %land.lhs.true.183
  %88 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u201 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %88, i32 0, i32 20
  %simple202 = bitcast %union.anon.1* %u201 to %struct.anon.4*
  %s203 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple202, i32 0, i32 7
  %type3204 = bitcast %union.anon.5* %s203 to %struct.anon.8*
  %FontMatrix205 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3204, i32 0, i32 1
  %xy206 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix205, i32 0, i32 1
  %89 = load float, float* %xy206, align 4, !tbaa !213
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.200, %cond.true.192
  %cond208 = phi float [ %sub199, %cond.true.192 ], [ %89, %cond.false.200 ]
  %conv209 = fpext float %cond208 to double
  %cmp210 = fcmp olt double %conv209, 1.000000e-03
  br i1 %cmp210, label %land.lhs.true.212, label %land.end

land.lhs.true.212:                                ; preds = %cond.end.207
  %90 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u213 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %90, i32 0, i32 20
  %simple214 = bitcast %union.anon.1* %u213 to %struct.anon.4*
  %s215 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple214, i32 0, i32 7
  %type3216 = bitcast %union.anon.5* %s215 to %struct.anon.8*
  %FontMatrix217 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3216, i32 0, i32 1
  %yx218 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix217, i32 0, i32 2
  %91 = load float, float* %yx218, align 4, !tbaa !214
  %cmp219 = fcmp olt float %91, 0.000000e+00
  br i1 %cmp219, label %cond.true.221, label %cond.false.229

cond.true.221:                                    ; preds = %land.lhs.true.212
  %92 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u222 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %92, i32 0, i32 20
  %simple223 = bitcast %union.anon.1* %u222 to %struct.anon.4*
  %s224 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple223, i32 0, i32 7
  %type3225 = bitcast %union.anon.5* %s224 to %struct.anon.8*
  %FontMatrix226 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3225, i32 0, i32 1
  %yx227 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix226, i32 0, i32 2
  %93 = load float, float* %yx227, align 4, !tbaa !214
  %sub228 = fsub float -0.000000e+00, %93
  br label %cond.end.236

cond.false.229:                                   ; preds = %land.lhs.true.212
  %94 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u230 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %94, i32 0, i32 20
  %simple231 = bitcast %union.anon.1* %u230 to %struct.anon.4*
  %s232 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple231, i32 0, i32 7
  %type3233 = bitcast %union.anon.5* %s232 to %struct.anon.8*
  %FontMatrix234 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3233, i32 0, i32 1
  %yx235 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix234, i32 0, i32 2
  %95 = load float, float* %yx235, align 4, !tbaa !214
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.false.229, %cond.true.221
  %cond237 = phi float [ %sub228, %cond.true.221 ], [ %95, %cond.false.229 ]
  %conv238 = fpext float %cond237 to double
  %cmp239 = fcmp olt double %conv238, 1.000000e-03
  br i1 %cmp239, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end.236
  %96 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u241 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %96, i32 0, i32 20
  %simple242 = bitcast %union.anon.1* %u241 to %struct.anon.4*
  %s243 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple242, i32 0, i32 7
  %type3244 = bitcast %union.anon.5* %s243 to %struct.anon.8*
  %FontMatrix245 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3244, i32 0, i32 1
  %yy246 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix245, i32 0, i32 3
  %97 = load float, float* %yy246, align 4, !tbaa !215
  %cmp247 = fcmp olt float %97, 0.000000e+00
  br i1 %cmp247, label %cond.true.249, label %cond.false.257

cond.true.249:                                    ; preds = %land.rhs
  %98 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u250 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %98, i32 0, i32 20
  %simple251 = bitcast %union.anon.1* %u250 to %struct.anon.4*
  %s252 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple251, i32 0, i32 7
  %type3253 = bitcast %union.anon.5* %s252 to %struct.anon.8*
  %FontMatrix254 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3253, i32 0, i32 1
  %yy255 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix254, i32 0, i32 3
  %99 = load float, float* %yy255, align 4, !tbaa !215
  %sub256 = fsub float -0.000000e+00, %99
  br label %cond.end.264

cond.false.257:                                   ; preds = %land.rhs
  %100 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u258 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %100, i32 0, i32 20
  %simple259 = bitcast %union.anon.1* %u258 to %struct.anon.4*
  %s260 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple259, i32 0, i32 7
  %type3261 = bitcast %union.anon.5* %s260 to %struct.anon.8*
  %FontMatrix262 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3261, i32 0, i32 1
  %yy263 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix262, i32 0, i32 3
  %101 = load float, float* %yy263, align 4, !tbaa !215
  br label %cond.end.264

cond.end.264:                                     ; preds = %cond.false.257, %cond.true.249
  %cond265 = phi float [ %sub256, %cond.true.249 ], [ %101, %cond.false.257 ]
  %conv266 = fpext float %cond265 to double
  %cmp267 = fcmp olt double %conv266, 1.000000e-03
  br label %land.end

land.end:                                         ; preds = %cond.end.264, %cond.end.236, %cond.end.207, %cond.end
  %102 = phi i1 [ false, %cond.end.236 ], [ false, %cond.end.207 ], [ false, %cond.end ], [ %cmp267, %cond.end.264 ]
  br i1 %102, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %103 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u269 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %103, i32 0, i32 20
  %simple270 = bitcast %union.anon.1* %u269 to %struct.anon.4*
  %s271 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple270, i32 0, i32 7
  %type3272 = bitcast %union.anon.5* %s271 to %struct.anon.8*
  %FontMatrix273 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3272, i32 0, i32 1
  %xx274 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix273, i32 0, i32 0
  %104 = load float, float* %xx274, align 4, !tbaa !212
  %mul = fmul float %104, 1.000000e+01
  store float %mul, float* %xx274, align 4, !tbaa !212
  %105 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u275 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %105, i32 0, i32 20
  %simple276 = bitcast %union.anon.1* %u275 to %struct.anon.4*
  %s277 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple276, i32 0, i32 7
  %type3278 = bitcast %union.anon.5* %s277 to %struct.anon.8*
  %FontMatrix279 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3278, i32 0, i32 1
  %xy280 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix279, i32 0, i32 1
  %106 = load float, float* %xy280, align 4, !tbaa !213
  %mul281 = fmul float %106, 1.000000e+01
  store float %mul281, float* %xy280, align 4, !tbaa !213
  %107 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u282 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %107, i32 0, i32 20
  %simple283 = bitcast %union.anon.1* %u282 to %struct.anon.4*
  %s284 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple283, i32 0, i32 7
  %type3285 = bitcast %union.anon.5* %s284 to %struct.anon.8*
  %FontMatrix286 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3285, i32 0, i32 1
  %yx287 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix286, i32 0, i32 2
  %108 = load float, float* %yx287, align 4, !tbaa !214
  %mul288 = fmul float %108, 1.000000e+01
  store float %mul288, float* %yx287, align 4, !tbaa !214
  %109 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u289 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %109, i32 0, i32 20
  %simple290 = bitcast %union.anon.1* %u289 to %struct.anon.4*
  %s291 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple290, i32 0, i32 7
  %type3292 = bitcast %union.anon.5* %s291 to %struct.anon.8*
  %FontMatrix293 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3292, i32 0, i32 1
  %yy294 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix293, i32 0, i32 3
  %110 = load float, float* %yy294, align 4, !tbaa !215
  %mul295 = fmul float %110, 1.000000e+01
  store float %mul295, float* %yy294, align 4, !tbaa !215
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end.296

if.end.296:                                       ; preds = %while.end, %lor.lhs.false.150
  %111 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %112 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %111, %struct.pdf_font_resource_s** %112, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.296, %if.then.124, %if.then.4, %if.then
  %113 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #1
  %114 = bitcast i8** %cached to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #1
  %115 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #1
  %116 = bitcast %struct.gs_font_base_s** %bfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %116) #1
  %117 = load i32, i32* %retval
  ret i32 %117
}

declare i32 @font_resource_encoded_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, i32, i32 (%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s*)*) #2

declare i32 @pdf_write_contents_bitmap(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_refine_encoding_index(%struct.gx_device_pdf_s* %pdev, i32 %index, i32 %is_standard) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %index.addr = alloca i32, align 4
  %is_standard.addr = alloca i32, align 4
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store i32 %index, i32* %index.addr, align 4, !tbaa !21
  store i32 %is_standard, i32* %is_standard.addr, align 4, !tbaa !21
  %0 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %0, i32 0, i32 99
  %1 = load i32, i32* %ForOPDFRead, align 4, !tbaa !101
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %index.addr, align 4, !tbaa !21
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.then
  %3 = load i32, i32* %index.addr, align 4, !tbaa !21
  store i32 %3, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.then
  %4 = load i32, i32* %index.addr, align 4, !tbaa !21
  store i32 %4, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %index.addr, align 4, !tbaa !21
  switch i32 %5, label %sw.default.7 [
    i32 4, label %sw.bb.2
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.2
    i32 0, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %if.end, %if.end, %if.end
  %6 = load i32, i32* %index.addr, align 4, !tbaa !21
  store i32 %6, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %if.end
  %7 = load i32, i32* %is_standard.addr, align 4, !tbaa !21
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.3
  %8 = load i32, i32* %index.addr, align 4, !tbaa !21
  store i32 %8, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.3
  br label %sw.default.7

sw.default.7:                                     ; preds = %if.end, %if.end.6
  store i32 4, i32* %retval
  br label %return

return:                                           ; preds = %sw.default.7, %if.then.5, %sw.bb.2, %sw.default, %sw.bb.1, %sw.bb
  %9 = load i32, i32* %retval
  ret i32 %9
}

declare %struct.cos_dict_s* @cos_dict_alloc(%struct.gx_device_pdf_s*, i8*) #2

; Function Attrs: nounwind uwtable
define i32 @pdf_is_simple_font(%struct.gs_font_s* %font) #0 {
entry:
  %font.addr = alloca %struct.gs_font_s*, align 8
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %0, i32 0, i32 11
  %1 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType1 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %2, i32 0, i32 11
  %3 = load i32, i32* %FontType1, align 4, !tbaa !74
  %cmp2 = icmp eq i32 %3, 2
  br i1 %cmp2, label %lor.end, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType4 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %4, i32 0, i32 11
  %5 = load i32, i32* %FontType4, align 4, !tbaa !74
  %cmp5 = icmp eq i32 %5, 42
  br i1 %cmp5, label %lor.end, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType7 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %6, i32 0, i32 11
  %7 = load i32, i32* %FontType7, align 4, !tbaa !74
  %cmp8 = icmp eq i32 %7, 3
  br i1 %cmp8, label %lor.end, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %8 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType10 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %8, i32 0, i32 11
  %9 = load i32, i32* %FontType10, align 4, !tbaa !74
  %cmp11 = icmp eq i32 %9, 53
  br i1 %cmp11, label %lor.end, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.9
  %10 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType13 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %10, i32 0, i32 11
  %11 = load i32, i32* %FontType13, align 4, !tbaa !74
  %cmp14 = icmp eq i32 %11, 51
  br i1 %cmp14, label %lor.end, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.12
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType16 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %12, i32 0, i32 11
  %13 = load i32, i32* %FontType16, align 4, !tbaa !74
  %cmp17 = icmp eq i32 %13, 52
  br i1 %cmp17, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.15
  %14 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType18 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %14, i32 0, i32 11
  %15 = load i32, i32* %FontType18, align 4, !tbaa !74
  %cmp19 = icmp eq i32 %15, 54
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.15, %lor.lhs.false.12, %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false.3, %lor.lhs.false, %entry
  %16 = phi i1 [ true, %lor.lhs.false.15 ], [ true, %lor.lhs.false.12 ], [ true, %lor.lhs.false.9 ], [ true, %lor.lhs.false.6 ], [ true, %lor.lhs.false.3 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp19, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @pdf_is_CID_font(%struct.gs_font_s* %font) #0 {
entry:
  %font.addr = alloca %struct.gs_font_s*, align 8
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %0 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %0, i32 0, i32 11
  %1 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %1, 9
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType1 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %2, i32 0, i32 11
  %3 = load i32, i32* %FontType1, align 4, !tbaa !74
  %cmp2 = icmp eq i32 %3, 11
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @pdf_obtain_font_resource(%struct.pdf_text_enum_s* %penum, %struct.gs_string_s* %pstr, %struct.pdf_font_resource_s** %ppdfont) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %glyph_usage = alloca i8*, align 8
  %real_widths = alloca double*, align 8
  %char_cache_size = alloca i32, align 4
  %width_cache_size = alloca i32, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %1, i32 0, i32 1
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !216
  %3 = bitcast %struct.gx_device_s* %2 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %3, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 12
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  store %struct.gs_font_s* %6, %struct.gs_font_s** %font, align 8, !tbaa !1
  %7 = bitcast i8** %glyph_usage to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  store i8* null, i8** %glyph_usage, align 8, !tbaa !1
  %8 = bitcast double** %real_widths to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = bitcast i32* %char_cache_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %10 = bitcast i32* %width_cache_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %11 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %12, i32 0, i32 11
  %13 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %13, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %16 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %14, %struct.gs_font_s* %15, %struct.pdf_font_resource_s** %16, i8** %glyph_usage, double** %real_widths, i32* %char_cache_size, i32* %width_cache_size) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %17 = load i32, i32* %code, align 4, !tbaa !21
  %cmp1 = icmp slt i32 %17, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %18 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %18, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %19 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %19, i32 0, i32 34
  %20 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !5
  %cmp4 = icmp eq %struct.pdf_char_glyph_pairs_s* %20, null
  br i1 %cmp4, label %if.then.5, label %if.end.14

if.then.5:                                        ; preds = %if.end.3
  %21 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %22 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %23 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %call6 = call i32 @pdf_alloc_text_glyphs_table(%struct.gx_device_pdf_s* %21, %struct.pdf_text_enum_s* %22, %struct.gs_string_s* %23) #7
  store i32 %call6, i32* %code, align 4, !tbaa !21
  %24 = load i32, i32* %code, align 4, !tbaa !21
  %cmp7 = icmp slt i32 %24, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.5
  %25 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.9:                                         ; preds = %if.then.5
  %26 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %27 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %28 = load i8*, i8** %glyph_usage, align 8, !tbaa !1
  %29 = load i32, i32* %char_cache_size, align 4, !tbaa !21
  %call10 = call i32 @pdf_make_text_glyphs_table(%struct.pdf_text_enum_s* %26, %struct.gs_string_s* %27, i8* %28, i32 %29) #7
  store i32 %call10, i32* %code, align 4, !tbaa !21
  %30 = load i32, i32* %code, align 4, !tbaa !21
  %cmp11 = icmp slt i32 %30, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  %31 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.13:                                        ; preds = %if.end.9
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end.3
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %33 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %34 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %35 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp15 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %35, i32 0, i32 34
  %36 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp15, align 8, !tbaa !5
  %call16 = call i32 @pdf_obtain_font_resource_encoded(%struct.gx_device_pdf_s* %32, %struct.gs_font_s* %33, %struct.pdf_font_resource_s** %34, %struct.pdf_char_glyph_pairs_s* %36) #7
  store i32 %call16, i32* %code, align 4, !tbaa !21
  %37 = load i32, i32* %code, align 4, !tbaa !21
  %cmp17 = icmp slt i32 %37, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.14
  %38 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %38, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.19:                                        ; preds = %if.end.14
  %39 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %40 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %41 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call20 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %39, %struct.gs_font_s* %40, %struct.pdf_font_resource_s** %41, i8** %glyph_usage, double** %real_widths, i32* %char_cache_size, i32* %width_cache_size) #7
  store i32 %call20, i32* %code, align 4, !tbaa !21
  %42 = load i32, i32* %code, align 4, !tbaa !21
  %cmp21 = icmp slt i32 %42, 0
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  %43 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %43, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.23:                                        ; preds = %if.end.19
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %45 = bitcast %struct.pdf_text_enum_s* %44 to %struct.gs_text_enum_s*
  %46 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %47 = load i8*, i8** %glyph_usage, align 8, !tbaa !1
  %48 = load i32, i32* %char_cache_size, align 4, !tbaa !21
  %call24 = call i32 @pdf_mark_text_glyphs(%struct.gs_text_enum_s* %45, %struct.gs_string_s* %46, i8* %47, i32 %48) #7
  store i32 %call24, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.23, %if.then.22, %if.then.18, %if.then.12, %if.then.8, %if.then.2, %if.then
  %49 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %49) #1
  %50 = bitcast i32* %width_cache_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %50) #1
  %51 = bitcast i32* %char_cache_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #1
  %52 = bitcast double** %real_widths to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #1
  %53 = bitcast i8** %glyph_usage to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #1
  %54 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #1
  %55 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #1
  %56 = load i32, i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_alloc_text_glyphs_table(%struct.gx_device_pdf_s* %pdev, %struct.pdf_text_enum_s* %penum, %struct.gs_string_s* %pstr) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %go = alloca i32, align 4
  %struct_size = alloca i32, align 4
  %cgp = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %0 = bitcast i32* %go to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gs_string_s* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4, !tbaa !218
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %4, i32 0, i32 0
  %size1 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 2
  %5 = load i32, i32* %size1, align 4, !tbaa !219
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %5, %cond.false ]
  store i32 %cond, i32* %go, align 4, !tbaa !21
  %6 = bitcast i32* %struct_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  %7 = load i32, i32* %go, align 4, !tbaa !21
  %mul = mul nsw i32 2, %7
  %sub = sub nsw i32 %mul, 1
  %conv = sext i32 %sub to i64
  %mul2 = mul i64 16, %conv
  %add = add i64 32, %mul2
  %conv3 = trunc i64 %add to i32
  store i32 %conv3, i32* %struct_size, align 4, !tbaa !21
  %8 = bitcast %struct.pdf_char_glyph_pairs_s** %cgp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %9, i32 0, i32 8
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !17
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %10, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %11 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !125
  %12 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %memory4 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %12, i32 0, i32 8
  %13 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory4, align 8, !tbaa !17
  %14 = load i32, i32* %struct_size, align 4, !tbaa !21
  %call = call i8* %11(%struct.gs_memory_s* %13, i32 %14, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i32 0, i32 0)) #7
  %15 = bitcast i8* %call to %struct.pdf_char_glyph_pairs_s*
  store %struct.pdf_char_glyph_pairs_s* %15, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %16 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %cmp5 = icmp eq %struct.pdf_char_glyph_pairs_s* %16, null
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %17 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %18 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp7 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %18, i32 0, i32 34
  store %struct.pdf_char_glyph_pairs_s* %17, %struct.pdf_char_glyph_pairs_s** %cgp7, align 8, !tbaa !5
  %19 = load i32, i32* %go, align 4, !tbaa !21
  %20 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %20, i32 0, i32 2
  store i32 %19, i32* %unused_offset, align 4, !tbaa !158
  %21 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %21, i32 0, i32 0
  store i32 0, i32* %num_all_chars, align 4, !tbaa !169
  %22 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %22, i32 0, i32 1
  store i32 0, i32* %num_unused_chars, align 4, !tbaa !160
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %23 = bitcast %struct.pdf_char_glyph_pairs_s** %cgp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #1
  %24 = bitcast i32* %struct_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #1
  %25 = bitcast i32* %go to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #1
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_make_text_glyphs_table(%struct.pdf_text_enum_s* %penum, %struct.gs_string_s* %pstr, i8* %glyph_usage, i32 %char_cache_size) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %glyph_usage.addr = alloca i8*, align 8
  %char_cache_size.addr = alloca i32, align 4
  %scan = alloca %struct.gs_text_enum_s, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %font_is_simple = alloca i32, align 4
  %cgp = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %char_code = alloca i64, align 8
  %cid = alloca i64, align 8
  %glyph = alloca i64, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store i8* %glyph_usage, i8** %glyph_usage.addr, align 8, !tbaa !1
  store i32 %char_cache_size, i32* %char_cache_size.addr, align 4, !tbaa !21
  %0 = bitcast %struct.gs_text_enum_s* %scan to i8*
  call void @llvm.lifetime.start(i64 448, i8* %0) #1
  %1 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %2 = bitcast %struct.pdf_text_enum_s* %1 to %struct.gs_text_enum_s*
  %3 = bitcast %struct.gs_text_enum_s* %scan to i8*
  %4 = bitcast %struct.gs_text_enum_s* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 448, i32 8, i1 false), !tbaa.struct !220
  %5 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  %6 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %6, i32 0, i32 12
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  store %struct.gs_font_s* %7, %struct.gs_font_s** %font, align 8, !tbaa !1
  %8 = bitcast i32* %font_is_simple to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #1
  %9 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %call = call i32 @pdf_is_simple_font(%struct.gs_font_s* %9) #7
  store i32 %call, i32* %font_is_simple, align 4, !tbaa !21
  %10 = bitcast %struct.pdf_char_glyph_pairs_s** %cgp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #1
  %11 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %11, i32 0, i32 34
  %12 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp1, align 8, !tbaa !5
  store %struct.pdf_char_glyph_pairs_s* %12, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %13 = bitcast i64* %char_code to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #1
  %14 = bitcast i64* %cid to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %15 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %16 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #1
  %17 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %17, i32 0, i32 1
  store i32 0, i32* %num_unused_chars, align 4, !tbaa !160
  %18 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %18, i32 0, i32 0
  store i32 0, i32* %num_all_chars, align 4, !tbaa !169
  %19 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gs_string_s* %19, null
  br i1 %cmp, label %if.then, label %if.end.12

if.then:                                          ; preds = %entry
  %20 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %20, i32 0, i32 0
  %21 = load i8*, i8** %data, align 8, !tbaa !221
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %data2 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 1
  %bytes = bitcast %union.sd_* %data2 to i8**
  store i8* %21, i8** %bytes, align 8, !tbaa !1
  %22 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %22, i32 0, i32 1
  %23 = load i32, i32* %size, align 4, !tbaa !218
  %text3 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %size4 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text3, i32 0, i32 2
  store i32 %23, i32* %size4, align 4, !tbaa !222
  %index = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 17
  store i32 0, i32* %index, align 4, !tbaa !224
  %text5 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text5, i32 0, i32 0
  %24 = load i32, i32* %operation, align 4, !tbaa !225
  %and = and i32 %24, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then
  %text7 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation8 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text7, i32 0, i32 0
  %25 = load i32, i32* %operation8, align 4, !tbaa !225
  %and9 = and i32 %25, -5
  %or = or i32 %and9, 1
  %text10 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation11 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text10, i32 0, i32 0
  store i32 %or, i32* %operation11, align 4, !tbaa !225
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end.31, %if.then.30, %if.then.18, %if.end.12
  %26 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %27 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %28 = load i32, i32* %font_is_simple, align 4, !tbaa !21
  %call13 = call i32 @pdf_next_char_glyph(%struct.gs_text_enum_s* %scan, %struct.gs_string_s* %26, %struct.gs_font_s* %27, i32 %28, i64* %char_code, i64* %cid, i64* %glyph) #7
  store i32 %call13, i32* %code, align 4, !tbaa !21
  %29 = load i32, i32* %code, align 4, !tbaa !21
  %cmp14 = icmp eq i32 %29, 2
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.cond
  br label %for.end

if.end.16:                                        ; preds = %for.cond
  %30 = load i32, i32* %code, align 4, !tbaa !21
  %cmp17 = icmp eq i32 %30, 3
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.16
  br label %for.cond

if.end.19:                                        ; preds = %if.end.16
  %31 = load i32, i32* %code, align 4, !tbaa !21
  %cmp20 = icmp slt i32 %31, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.19
  %32 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %32, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.22:                                        ; preds = %if.end.19
  %33 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %num_all_chars23 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %33, i32 0, i32 0
  %34 = load i32, i32* %num_all_chars23, align 4, !tbaa !169
  %35 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %35, i32 0, i32 2
  %36 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %cmp24 = icmp sgt i32 %34, %36
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.26:                                        ; preds = %if.end.22
  %37 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %cmp27 = icmp ne i8* %37, null
  br i1 %cmp27, label %land.lhs.true, label %if.end.31

land.lhs.true:                                    ; preds = %if.end.26
  %38 = load i64, i64* %cid, align 8, !tbaa !25
  %39 = load i32, i32* %char_cache_size.addr, align 4, !tbaa !21
  %conv = sext i32 %39 to i64
  %cmp28 = icmp ugt i64 %38, %conv
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %land.lhs.true
  br label %for.cond

if.end.31:                                        ; preds = %land.lhs.true, %if.end.26
  %40 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !1
  %41 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %42 = load i32, i32* %char_cache_size.addr, align 4, !tbaa !21
  %43 = load i64, i64* %char_code, align 8, !tbaa !25
  %44 = load i64, i64* %cid, align 8, !tbaa !25
  %45 = load i64, i64* %glyph, align 8, !tbaa !25
  call void @store_glyphs(%struct.pdf_char_glyph_pairs_s* %40, i8* %41, i32 %42, i64 %43, i64 %44, i64 %45) #7
  br label %for.cond

for.end:                                          ; preds = %if.then.15
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then.25, %if.then.21
  %46 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %46) #1
  %47 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #1
  %48 = bitcast i64* %cid to i8*
  call void @llvm.lifetime.end(i64 8, i8* %48) #1
  %49 = bitcast i64* %char_code to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #1
  %50 = bitcast %struct.pdf_char_glyph_pairs_s** %cgp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %50) #1
  %51 = bitcast i32* %font_is_simple to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #1
  %52 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #1
  %53 = bitcast %struct.gs_text_enum_s* %scan to i8*
  call void @llvm.lifetime.end(i64 448, i8* %53) #1
  %54 = load i32, i32* %retval
  ret i32 %54
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_obtain_font_resource_encoded(%struct.gx_device_pdf_s* %pdev, %struct.gs_font_s* %font, %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_char_glyph_pairs_s* %cgp) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %code = alloca i32, align 4
  %pdfont_not_allowed = alloca %struct.pdf_font_resource_s*, align 8
  %cfont = alloca %struct.gs_font_base_s*, align 8
  %cleanup.dest.slot = alloca i32
  %base_font = alloca %struct.gs_font_s*, align 8
  %below = alloca %struct.gs_font_s*, align 8
  %same_encoding = alloca i32, align 4
  %type = alloca i32, align 4
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast %struct.pdf_font_resource_s** %pdfont_not_allowed to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %pdfont_not_allowed, align 8, !tbaa !1
  %2 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %3 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %2, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf_font_resource_s* %3, null
  br i1 %cmp, label %if.then, label %if.end.26

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %6 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %5, align 8, !tbaa !1
  %call = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %6, i32 0) #7
  store %struct.gs_font_base_s* %call, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %7, i32 0, i32 11
  %8 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp1 = icmp ne i32 %8, 3
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %9 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType2 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %9, i32 0, i32 11
  %10 = load i32, i32* %FontType2, align 4, !tbaa !74
  %cmp3 = icmp ne i32 %10, 53
  br i1 %cmp3, label %land.lhs.true.4, label %if.else

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType5 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %11, i32 0, i32 11
  %12 = load i32, i32* %FontType5, align 4, !tbaa !74
  %cmp6 = icmp ne i32 %12, 51
  br i1 %cmp6, label %land.lhs.true.7, label %if.else

land.lhs.true.7:                                  ; preds = %land.lhs.true.4
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType8 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType8, align 4, !tbaa !74
  %cmp9 = icmp ne i32 %14, 52
  br i1 %cmp9, label %land.lhs.true.10, label %if.else

land.lhs.true.10:                                 ; preds = %land.lhs.true.7
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType11 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %15, i32 0, i32 11
  %16 = load i32, i32* %FontType11, align 4, !tbaa !74
  %cmp12 = icmp ne i32 %16, 54
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %land.lhs.true.10
  %17 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %18 = bitcast %struct.gs_font_base_s* %17 to %struct.gs_font_s*
  %19 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %20 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %20, i32 0, i32 2
  %21 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %idxprom = sext i32 %21 to i64
  %22 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %22, i32 0, i32 3
  %arrayidx = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 1
  %23 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %23, i32 0, i32 1
  %24 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %call14 = call i32 @gs_copied_can_copy_glyphs(%struct.gs_font_s* %18, %struct.gs_font_s* %19, i64* %glyph, i32 %24, i32 16, i32 1) #7
  store i32 %call14, i32* %code, align 4, !tbaa !21
  %25 = load i32, i32* %code, align 4, !tbaa !21
  %cmp15 = icmp slt i32 %25, 0
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %if.then.13
  %26 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %26, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then.13
  br label %if.end.17

if.else:                                          ; preds = %land.lhs.true.10, %land.lhs.true.7, %land.lhs.true.4, %land.lhs.true, %if.then
  store i32 1, i32* %code, align 4, !tbaa !21
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.end
  %27 = load i32, i32* %code, align 4, !tbaa !21
  %cmp18 = icmp eq i32 %27, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %if.end.17
  %28 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %29 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %28, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %29, %struct.pdf_font_resource_s** %pdfont_not_allowed, align 8, !tbaa !1
  %30 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %30, align 8, !tbaa !1
  br label %if.end.25

if.else.20:                                       ; preds = %if.end.17
  %31 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %32 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %33 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %32, align 8, !tbaa !1
  %34 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %35 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s21 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %35, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s21, i32 0, i32 0
  %36 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %36, i32 0, i32 0
  %37 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %call22 = call i32 @pdf_is_compatible_encoding(%struct.gx_device_pdf_s* %31, %struct.pdf_font_resource_s* %33, %struct.gs_font_s* %34, %struct.pdf_char_glyph_pair_s* %arraydecay, i32 %37) #7
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %if.else.20
  %38 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %39 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %38, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %39, %struct.pdf_font_resource_s** %pdfont_not_allowed, align 8, !tbaa !1
  %40 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %40, align 8, !tbaa !1
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.else.20
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.then.19
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.25, %if.then.16
  %41 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.109 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.26

if.end.26:                                        ; preds = %cleanup.cont, %entry
  %42 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %43 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %42, align 8, !tbaa !1
  %cmp27 = icmp eq %struct.pdf_font_resource_s* %43, null
  br i1 %cmp27, label %if.then.28, label %if.end.108

if.then.28:                                       ; preds = %if.end.26
  %44 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %44) #1
  %45 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %45, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %46 = bitcast %struct.gs_font_s** %below to i8*
  call void @llvm.lifetime.start(i64 8, i8* %46) #1
  %47 = bitcast i32* %same_encoding to i8*
  call void @llvm.lifetime.start(i64 4, i8* %47) #1
  store i32 1, i32* %same_encoding, align 4, !tbaa !21
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.28
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %base = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %48, i32 0, i32 7
  %49 = load %struct.gs_font_s*, %struct.gs_font_s** %base, align 8, !tbaa !140
  store %struct.gs_font_s* %49, %struct.gs_font_s** %below, align 8, !tbaa !1
  %50 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %cmp29 = icmp ne %struct.gs_font_s* %49, %50
  br i1 %cmp29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %51 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %51, i32 0, i32 20
  %same_font = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 3
  %52 = load i32 (%struct.gs_font_s*, %struct.gs_font_s*, i32)*, i32 (%struct.gs_font_s*, %struct.gs_font_s*, i32)** %same_font, align 8, !tbaa !226
  %53 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %54 = load %struct.gs_font_s*, %struct.gs_font_s** %below, align 8, !tbaa !1
  %call30 = call i32 %52(%struct.gs_font_s* %53, %struct.gs_font_s* %54, i32 1) #7
  %tobool31 = icmp ne i32 %call30, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %55 = phi i1 [ false, %while.cond ], [ %tobool31, %land.rhs ]
  br i1 %55, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %56 = load %struct.gs_font_s*, %struct.gs_font_s** %below, align 8, !tbaa !1
  store %struct.gs_font_s* %56, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %land.end
  %57 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %58 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %cmp32 = icmp ne %struct.gs_font_s* %57, %58
  br i1 %cmp32, label %if.then.33, label %if.end.38

if.then.33:                                       ; preds = %while.end
  %59 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %procs34 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %59, i32 0, i32 20
  %same_font35 = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs34, i32 0, i32 3
  %60 = load i32 (%struct.gs_font_s*, %struct.gs_font_s*, i32)*, i32 (%struct.gs_font_s*, %struct.gs_font_s*, i32)** %same_font35, align 8, !tbaa !226
  %61 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %62 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call36 = call i32 %60(%struct.gs_font_s* %61, %struct.gs_font_s* %62, i32 4) #7
  %and = and i32 %call36, 4
  %cmp37 = icmp ne i32 %and, 0
  %conv = zext i1 %cmp37 to i32
  store i32 %conv, i32* %same_encoding, align 4, !tbaa !21
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.33, %while.end
  %63 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %64 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %65 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call39 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %63, %struct.gs_font_s* %64, %struct.pdf_font_resource_s** %65, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call39, i32* %code, align 4, !tbaa !21
  %66 = load i32, i32* %code, align 4, !tbaa !21
  %cmp40 = icmp slt i32 %66, 0
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.38
  %67 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %67, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.103

if.end.43:                                        ; preds = %if.end.38
  %68 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %69 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %cmp44 = icmp ne %struct.gs_font_s* %68, %69
  br i1 %cmp44, label %if.then.46, label %if.end.51

if.then.46:                                       ; preds = %if.end.43
  %70 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont_not_allowed, align 8, !tbaa !1
  %71 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %72 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %71, align 8, !tbaa !1
  %cmp47 = icmp eq %struct.pdf_font_resource_s* %70, %72
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.46
  %73 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %73, align 8, !tbaa !1
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %if.then.46
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.end.43
  %74 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %75 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %74, align 8, !tbaa !1
  %cmp52 = icmp ne %struct.pdf_font_resource_s* %75, null
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.61

land.lhs.true.54:                                 ; preds = %if.end.51
  %76 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %77 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %78 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %77, align 8, !tbaa !1
  %79 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %80 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s55 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %80, i32 0, i32 3
  %arraydecay56 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s55, i32 0, i32 0
  %81 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars57 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %81, i32 0, i32 0
  %82 = load i32, i32* %num_all_chars57, align 4, !tbaa !169
  %call58 = call i32 @pdf_is_compatible_encoding(%struct.gx_device_pdf_s* %76, %struct.pdf_font_resource_s* %78, %struct.gs_font_s* %79, %struct.pdf_char_glyph_pair_s* %arraydecay56, i32 %82) #7
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %land.lhs.true.54
  %83 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %83, align 8, !tbaa !1
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %land.lhs.true.54, %if.end.51
  %84 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %85 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %84, align 8, !tbaa !1
  %cmp62 = icmp eq %struct.pdf_font_resource_s* %85, null
  br i1 %cmp62, label %if.then.66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.61
  %86 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %87 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %86, align 8, !tbaa !1
  %88 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont_not_allowed, align 8, !tbaa !1
  %cmp64 = icmp eq %struct.pdf_font_resource_s* %87, %88
  br i1 %cmp64, label %if.then.66, label %if.end.97

if.then.66:                                       ; preds = %lor.lhs.false, %if.end.61
  %89 = bitcast i32* %type to i8*
  call void @llvm.lifetime.start(i64 4, i8* %89) #1
  %90 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %call67 = call i32 @pdf_is_CID_font(%struct.gs_font_s* %90) #7
  %tobool68 = icmp ne i32 %call67, 0
  %cond = select i1 %tobool68, i32 8, i32 6
  store i32 %cond, i32* %type, align 4, !tbaa !161
  %91 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* null, %struct.pdf_font_resource_s** %91, align 8, !tbaa !1
  %92 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %93 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %94 = load i32, i32* %type, align 4, !tbaa !161
  %95 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %96 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %call69 = call i32 @pdf_find_font_resource(%struct.gx_device_pdf_s* %92, %struct.gs_font_s* %93, i32 %94, %struct.pdf_font_resource_s** %95, %struct.pdf_char_glyph_pairs_s* %96, i32 1) #7
  store i32 %call69, i32* %code, align 4, !tbaa !21
  %97 = load i32, i32* %code, align 4, !tbaa !21
  %cmp70 = icmp slt i32 %97, 0
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.then.66
  %98 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %98, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.94

if.end.73:                                        ; preds = %if.then.66
  %99 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %100 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %99, align 8, !tbaa !1
  %cmp74 = icmp eq %struct.pdf_font_resource_s* %100, null
  br i1 %cmp74, label %if.then.76, label %if.end.82

if.then.76:                                       ; preds = %if.end.73
  %101 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %102 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %103 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %104 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %call77 = call i32 @pdf_make_font_resource(%struct.gx_device_pdf_s* %101, %struct.gs_font_s* %102, %struct.pdf_font_resource_s** %103, %struct.pdf_char_glyph_pairs_s* %104) #7
  store i32 %call77, i32* %code, align 4, !tbaa !21
  %105 = load i32, i32* %code, align 4, !tbaa !21
  %cmp78 = icmp slt i32 %105, 0
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.then.76
  %106 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %106, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.94

if.end.81:                                        ; preds = %if.then.76
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.end.73
  %107 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %108 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %cmp83 = icmp ne %struct.gs_font_s* %107, %108
  br i1 %cmp83, label %land.lhs.true.85, label %if.end.93

land.lhs.true.85:                                 ; preds = %if.end.82
  %109 = load i32, i32* %same_encoding, align 4, !tbaa !21
  %tobool86 = icmp ne i32 %109, 0
  br i1 %tobool86, label %if.then.87, label %if.end.93

if.then.87:                                       ; preds = %land.lhs.true.85
  %110 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %111 = load %struct.gs_font_s*, %struct.gs_font_s** %base_font, align 8, !tbaa !1
  %112 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %113 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %112, align 8, !tbaa !1
  %call88 = call i32 @pdf_attach_font_resource(%struct.gx_device_pdf_s* %110, %struct.gs_font_s* %111, %struct.pdf_font_resource_s* %113) #7
  store i32 %call88, i32* %code, align 4, !tbaa !21
  %114 = load i32, i32* %code, align 4, !tbaa !21
  %cmp89 = icmp slt i32 %114, 0
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.then.87
  %115 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %115, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.94

if.end.92:                                        ; preds = %if.then.87
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %land.lhs.true.85, %if.end.82
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.94

cleanup.94:                                       ; preds = %if.end.93, %if.then.91, %if.then.80, %if.then.72
  %116 = bitcast i32* %type to i8*
  call void @llvm.lifetime.end(i64 4, i8* %116) #1
  %cleanup.dest.95 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.95, label %cleanup.103 [
    i32 0, label %cleanup.cont.96
  ]

cleanup.cont.96:                                  ; preds = %cleanup.94
  br label %if.end.97

if.end.97:                                        ; preds = %cleanup.cont.96, %lor.lhs.false
  %117 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %118 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %119 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %120 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %119, align 8, !tbaa !1
  %call98 = call i32 @pdf_attach_font_resource(%struct.gx_device_pdf_s* %117, %struct.gs_font_s* %118, %struct.pdf_font_resource_s* %120) #7
  store i32 %call98, i32* %code, align 4, !tbaa !21
  %121 = load i32, i32* %code, align 4, !tbaa !21
  %cmp99 = icmp slt i32 %121, 0
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.end.97
  %122 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %122, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.103

if.end.102:                                       ; preds = %if.end.97
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.103

cleanup.103:                                      ; preds = %if.end.102, %if.then.101, %cleanup.94, %if.then.42
  %123 = bitcast i32* %same_encoding to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #1
  %124 = bitcast %struct.gs_font_s** %below to i8*
  call void @llvm.lifetime.end(i64 8, i8* %124) #1
  %125 = bitcast %struct.gs_font_s** %base_font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %125) #1
  %cleanup.dest.106 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.106, label %cleanup.109 [
    i32 0, label %cleanup.cont.107
  ]

cleanup.cont.107:                                 ; preds = %cleanup.103
  br label %if.end.108

if.end.108:                                       ; preds = %cleanup.cont.107, %if.end.26
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.109

cleanup.109:                                      ; preds = %if.end.108, %cleanup.103, %cleanup
  %126 = bitcast %struct.pdf_font_resource_s** %pdfont_not_allowed to i8*
  call void @llvm.lifetime.end(i64 8, i8* %126) #1
  %127 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %127) #1
  %128 = load i32, i32* %retval
  ret i32 %128
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_mark_text_glyphs(%struct.gs_text_enum_s* %penum, %struct.gs_string_s* %pstr, i8* %glyph_usage, i32 %char_cache_size) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.gs_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %glyph_usage.addr = alloca i8*, align 8
  %char_cache_size.addr = alloca i32, align 4
  %scan = alloca %struct.gs_text_enum_s, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %font_is_simple = alloca i32, align 4
  %char_code = alloca i64, align 8
  %cid = alloca i64, align 8
  %glyph = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %code = alloca i32, align 4
  store %struct.gs_text_enum_s* %penum, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store i8* %glyph_usage, i8** %glyph_usage.addr, align 8, !tbaa !1
  store i32 %char_cache_size, i32* %char_cache_size.addr, align 4, !tbaa !21
  %0 = bitcast %struct.gs_text_enum_s* %scan to i8*
  call void @llvm.lifetime.start(i64 448, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %scan to i8*
  %3 = bitcast %struct.gs_text_enum_s* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 448, i32 8, i1 false), !tbaa.struct !220
  %4 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %5, i32 0, i32 12
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !227
  store %struct.gs_font_s* %6, %struct.gs_font_s** %font, align 8, !tbaa !1
  %7 = bitcast i32* %font_is_simple to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  %8 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %call = call i32 @pdf_is_simple_font(%struct.gs_font_s* %8) #7
  store i32 %call, i32* %font_is_simple, align 4, !tbaa !21
  %9 = bitcast i64* %char_code to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = bitcast i64* %cid to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #1
  %11 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #1
  %12 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.33

if.end:                                           ; preds = %entry
  %13 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %cmp1 = icmp ne %struct.gs_string_s* %13, null
  br i1 %cmp1, label %if.then.2, label %if.end.14

if.then.2:                                        ; preds = %if.end
  %14 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %14, i32 0, i32 0
  %15 = load i8*, i8** %data, align 8, !tbaa !221
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %data3 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 1
  %bytes = bitcast %union.sd_* %data3 to i8**
  store i8* %15, i8** %bytes, align 8, !tbaa !1
  %16 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %16, i32 0, i32 1
  %17 = load i32, i32* %size, align 4, !tbaa !218
  %text4 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %size5 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text4, i32 0, i32 2
  store i32 %17, i32* %size5, align 4, !tbaa !222
  %index = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 17
  store i32 0, i32* %index, align 4, !tbaa !224
  %text6 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text6, i32 0, i32 0
  %18 = load i32, i32* %operation, align 4, !tbaa !225
  %and = and i32 %18, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %if.then.2
  %text8 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation9 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text8, i32 0, i32 0
  %19 = load i32, i32* %operation9, align 4, !tbaa !225
  %and10 = and i32 %19, -5
  %or = or i32 %and10, 1
  %text11 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %scan, i32 0, i32 0
  %operation12 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text11, i32 0, i32 0
  store i32 %or, i32* %operation12, align 4, !tbaa !225
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.7, %if.then.2
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %cleanup, %if.end.14
  %20 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #1
  %21 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %22 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %23 = load i32, i32* %font_is_simple, align 4, !tbaa !21
  %call15 = call i32 @pdf_next_char_glyph(%struct.gs_text_enum_s* %scan, %struct.gs_string_s* %21, %struct.gs_font_s* %22, i32 %23, i64* %char_code, i64* %cid, i64* %glyph) #7
  store i32 %call15, i32* %code, align 4, !tbaa !21
  %24 = load i32, i32* %code, align 4, !tbaa !21
  %cmp16 = icmp eq i32 %24, 2
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup

if.end.18:                                        ; preds = %for.cond
  %25 = load i32, i32* %code, align 4, !tbaa !21
  %cmp19 = icmp eq i32 %25, 3
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.18
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup

if.end.21:                                        ; preds = %if.end.18
  %26 = load i32, i32* %code, align 4, !tbaa !21
  %cmp22 = icmp slt i32 %26, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.21
  %27 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.24:                                        ; preds = %if.end.21
  %28 = load i64, i64* %cid, align 8, !tbaa !25
  %29 = load i32, i32* %char_cache_size.addr, align 4, !tbaa !21
  %conv = sext i32 %29 to i64
  %cmp25 = icmp uge i64 %28, %conv
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup

if.end.28:                                        ; preds = %if.end.24
  %30 = load i64, i64* %cid, align 8, !tbaa !25
  %and29 = and i64 %30, 7
  %sh_prom = trunc i64 %and29 to i32
  %shr = ashr i32 128, %sh_prom
  %31 = load i64, i64* %cid, align 8, !tbaa !25
  %div = udiv i64 %31, 8
  %32 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %32, i64 %div
  %33 = load i8, i8* %arrayidx, align 1, !tbaa !161
  %conv30 = zext i8 %33 to i32
  %or31 = or i32 %conv30, %shr
  %conv32 = trunc i32 %or31 to i8
  store i8 %conv32, i8* %arrayidx, align 1, !tbaa !161
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.28, %if.then.27, %if.then.23, %if.then.20, %if.then.17
  %34 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %34) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.33 [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
    i32 3, label %for.cond
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.33

cleanup.33:                                       ; preds = %for.end, %cleanup, %if.then
  %35 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #1
  %36 = bitcast i64* %cid to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #1
  %37 = bitcast i64* %char_code to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #1
  %38 = bitcast i32* %font_is_simple to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #1
  %39 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #1
  %40 = bitcast %struct.gs_text_enum_s* %scan to i8*
  call void @llvm.lifetime.end(i64 448, i8* %40) #1
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define i32 @pdf_obtain_font_resource_unencoded(%struct.pdf_text_enum_s* %penum, %struct.gs_string_s* %pstr, %struct.pdf_font_resource_s** %ppdfont, i64* %gdata) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %gdata.addr = alloca i64*, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %glyph_usage = alloca i8*, align 8
  %real_widths = alloca double*, align 8
  %char_cache_size = alloca i32, align 4
  %width_cache_size = alloca i32, align 4
  %code = alloca i32, align 4
  %ps_encoding_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store i64* %gdata, i64** %gdata.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %1, i32 0, i32 1
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !216
  %3 = bitcast %struct.gx_device_s* %2 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %3, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 12
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  store %struct.gs_font_s* %6, %struct.gs_font_s** %font, align 8, !tbaa !1
  %7 = bitcast i8** %glyph_usage to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  store i8* null, i8** %glyph_usage, align 8, !tbaa !1
  %8 = bitcast double** %real_widths to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  store double* null, double** %real_widths, align 8, !tbaa !1
  %9 = bitcast i32* %char_cache_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  store i32 0, i32* %char_cache_size, align 4, !tbaa !21
  %10 = bitcast i32* %width_cache_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  store i32 0, i32* %width_cache_size, align 4, !tbaa !21
  %11 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %12 = bitcast i32* %ps_encoding_index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  store i32 -1, i32* %ps_encoding_index, align 4, !tbaa !21
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %14, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %15 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %17 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %15, %struct.gs_font_s* %16, %struct.pdf_font_resource_s** %17, i8** %glyph_usage, double** %real_widths, i32* %char_cache_size, i32* %width_cache_size) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %18 = load i32, i32* %code, align 4, !tbaa !21
  %cmp1 = icmp slt i32 %18, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %19 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %19, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %20 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %21 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %20, align 8, !tbaa !1
  %cmp4 = icmp ne %struct.pdf_font_resource_s* %21, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end.3
  %22 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %23 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %22, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %23, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %preferred_encoding_index = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 3
  %24 = load i32, i32* %preferred_encoding_index, align 4, !tbaa !228
  store i32 %24, i32* %ps_encoding_index, align 4, !tbaa !21
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end.3
  %25 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %25, i32 0, i32 34
  %26 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !5
  %cmp7 = icmp eq %struct.pdf_char_glyph_pairs_s* %26, null
  br i1 %cmp7, label %if.then.8, label %if.end.18

if.then.8:                                        ; preds = %if.end.6
  %27 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %28 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %29 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %call9 = call i32 @pdf_alloc_text_glyphs_table(%struct.gx_device_pdf_s* %27, %struct.pdf_text_enum_s* %28, %struct.gs_string_s* %29) #7
  store i32 %call9, i32* %code, align 4, !tbaa !21
  %30 = load i32, i32* %code, align 4, !tbaa !21
  %cmp10 = icmp slt i32 %30, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.8
  %31 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.12:                                        ; preds = %if.then.8
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %33 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp13 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %33, i32 0, i32 34
  %34 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp13, align 8, !tbaa !5
  %35 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %36 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %37 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %call14 = call i32 @pdf_make_text_glyphs_table_unencoded(%struct.gx_device_pdf_s* %32, %struct.pdf_char_glyph_pairs_s* %34, %struct.gs_font_s* %35, %struct.gs_string_s* %36, i64* %37, i32* %ps_encoding_index) #7
  store i32 %call14, i32* %code, align 4, !tbaa !21
  %38 = load i32, i32* %code, align 4, !tbaa !21
  %cmp15 = icmp slt i32 %38, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.12
  %39 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %39, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.17:                                        ; preds = %if.end.12
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.6
  %40 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %41 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %42 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %43 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp19 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %43, i32 0, i32 34
  %44 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp19, align 8, !tbaa !5
  %call20 = call i32 @pdf_obtain_font_resource_encoded(%struct.gx_device_pdf_s* %40, %struct.gs_font_s* %41, %struct.pdf_font_resource_s** %42, %struct.pdf_char_glyph_pairs_s* %44) #7
  store i32 %call20, i32* %code, align 4, !tbaa !21
  %45 = load i32, i32* %code, align 4, !tbaa !21
  %cmp21 = icmp slt i32 %45, 0
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.18
  %46 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %46, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.23:                                        ; preds = %if.end.18
  %47 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %49 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %call24 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %47, %struct.gs_font_s* %48, %struct.pdf_font_resource_s** %49, i8** %glyph_usage, double** %real_widths, i32* %char_cache_size, i32* %width_cache_size) #7
  store i32 %call24, i32* %code, align 4, !tbaa !21
  %50 = load i32, i32* %code, align 4, !tbaa !21
  %cmp25 = icmp slt i32 %50, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.23
  %51 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %51, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.27:                                        ; preds = %if.end.23
  %52 = load i32, i32* %ps_encoding_index, align 4, !tbaa !21
  %53 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %54 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %53, align 8, !tbaa !1
  %u28 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %54, i32 0, i32 20
  %simple29 = bitcast %union.anon.1* %u28 to %struct.anon.4*
  %preferred_encoding_index30 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple29, i32 0, i32 3
  store i32 %52, i32* %preferred_encoding_index30, align 4, !tbaa !228
  %55 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %56 = bitcast %struct.pdf_text_enum_s* %55 to %struct.gs_text_enum_s*
  %57 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %58 = load i8*, i8** %glyph_usage, align 8, !tbaa !1
  %59 = load i32, i32* %char_cache_size, align 4, !tbaa !21
  %call31 = call i32 @pdf_mark_text_glyphs_unencoded(%struct.gs_text_enum_s* %56, %struct.gs_string_s* %57, i8* %58, i32 %59) #7
  store i32 %call31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.27, %if.then.26, %if.then.22, %if.then.16, %if.then.11, %if.then.2, %if.then
  %60 = bitcast i32* %ps_encoding_index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #1
  %61 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #1
  %62 = bitcast i32* %width_cache_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #1
  %63 = bitcast i32* %char_cache_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #1
  %64 = bitcast double** %real_widths to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #1
  %65 = bitcast i8** %glyph_usage to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #1
  %66 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #1
  %67 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #1
  %68 = load i32, i32* %retval
  ret i32 %68
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_make_text_glyphs_table_unencoded(%struct.gx_device_pdf_s* %pdev, %struct.pdf_char_glyph_pairs_s* %cgp, %struct.gs_font_s* %font, %struct.gs_string_s* %pstr, i64* %gdata, i32* %ps_encoding_index) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %gdata.addr = alloca i64*, align 8
  %ps_encoding_index.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %ch = alloca i64, align 8
  %gname = alloca %struct.gs_const_string_s, align 8
  %gid = alloca i64*, align 8
  %bfont = alloca %struct.gs_font_base_s*, align 8
  %unknown = alloca i32, align 4
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %ei = alloca i32, align 4
  %start_ei = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %code2 = alloca i32, align 4
  %last_reserved_char = alloca i32, align 4
  %j111 = alloca i32, align 4
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store i64* %gdata, i64** %gdata.addr, align 8, !tbaa !1
  store i32* %ps_encoding_index, i32** %ps_encoding_index.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  %3 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast %struct.gs_const_string_s* %gname to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #1
  %5 = bitcast i64** %gid to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  %6 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8, !tbaa !221
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %gid, align 8, !tbaa !1
  %9 = bitcast %struct.gs_font_base_s** %bfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = bitcast i32* %unknown to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  store i32 0, i32* %unknown, align 4, !tbaa !21
  %11 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #1
  %12 = bitcast i32* %ei to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %13 = bitcast i32* %start_ei to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  store i32 -1, i32* %start_ei, align 4, !tbaa !21
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %14, %struct.gs_font_s* %15, %struct.pdf_font_resource_s** %pdfont, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %16 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %16, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %17, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.219

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load i32, i32* %i, align 4, !tbaa !21
  %19 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %19, i32 0, i32 1
  %20 = load i32, i32* %size, align 4, !tbaa !218
  %cmp1 = icmp ult i32 %18, %20
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = bitcast i32* %code2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #1
  %22 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %22, i32 0, i32 20
  %glyph_name = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 9
  %23 = load i32 (%struct.gs_font_s*, i64, %struct.gs_const_string_s*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_const_string_s*)** %glyph_name, align 8, !tbaa !229
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %25 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %25 to i64
  %26 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i64, i64* %26, i64 %idxprom
  %27 = load i64, i64* %arrayidx, align 8, !tbaa !25
  %call3 = call i32 %23(%struct.gs_font_s* %24, i64 %27, %struct.gs_const_string_s* %gname) #7
  store i32 %call3, i32* %code2, align 4, !tbaa !21
  %28 = load i32, i32* %code2, align 4, !tbaa !21
  %cmp4 = icmp slt i32 %28, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.body
  %29 = load i32, i32* %code2, align 4, !tbaa !21
  store i32 %29, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %for.body
  %data7 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %gname, i32 0, i32 0
  %30 = load i8*, i8** %data7, align 8, !tbaa !230
  %size8 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %gname, i32 0, i32 1
  %31 = load i32, i32* %size8, align 4, !tbaa !231
  %call9 = call i64 @gs_c_name_glyph(i8* %30, i32 %31) #7
  %32 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom10 = sext i32 %32 to i64
  %33 = load i64*, i64** %gid, align 8, !tbaa !1
  %arrayidx11 = getelementptr inbounds i64, i64* %33, i64 %idxprom10
  store i64 %call9, i64* %arrayidx11, align 8, !tbaa !25
  %34 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom12 = sext i32 %34 to i64
  %35 = load i64*, i64** %gid, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds i64, i64* %35, i64 %idxprom12
  %36 = load i64, i64* %arrayidx13, align 8, !tbaa !25
  %cmp14 = icmp eq i64 %36, 2147483647
  br i1 %cmp14, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.end.6
  %37 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom16 = sext i32 %37 to i64
  %38 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx17 = getelementptr inbounds i64, i64* %38, i64 %idxprom16
  %39 = load i64, i64* %arrayidx17, align 8, !tbaa !25
  %40 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom18 = sext i32 %40 to i64
  %41 = load i64*, i64** %gid, align 8, !tbaa !1
  %arrayidx19 = getelementptr inbounds i64, i64* %41, i64 %idxprom18
  store i64 %39, i64* %arrayidx19, align 8, !tbaa !25
  store i32 1, i32* %unknown, align 4, !tbaa !21
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.15, %if.end.6
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.20, %if.then.5
  %42 = bitcast i32* %code2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %42) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.219 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %43 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do_unknown

do_unknown:                                       ; preds = %for.end.218, %for.end
  %44 = load i32, i32* %unknown, align 4, !tbaa !21
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %if.then.21, label %if.end.149

if.then.21:                                       ; preds = %do_unknown
  %45 = bitcast i32* %last_reserved_char to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #1
  store i32 -1, i32* %last_reserved_char, align 4, !tbaa !21
  %46 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %46, i32 0, i32 1
  store i32 0, i32* %num_unused_chars, align 4, !tbaa !160
  %47 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %47, i32 0, i32 0
  store i32 0, i32* %num_all_chars, align 4, !tbaa !169
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc.32, %if.then.21
  %48 = load i32, i32* %i, align 4, !tbaa !21
  %49 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size23 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %49, i32 0, i32 1
  %50 = load i32, i32* %size23, align 4, !tbaa !218
  %cmp24 = icmp ult i32 %48, %50
  br i1 %cmp24, label %for.body.25, label %for.end.34

for.body.25:                                      ; preds = %for.cond.22
  %51 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %52 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom26 = sext i32 %52 to i64
  %53 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx27 = getelementptr inbounds i64, i64* %53, i64 %idxprom26
  %54 = load i64, i64* %arrayidx27, align 8, !tbaa !25
  %55 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom28 = sext i32 %55 to i64
  %56 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx29 = getelementptr inbounds i64, i64* %56, i64 %idxprom28
  %57 = load i64, i64* %arrayidx29, align 8, !tbaa !25
  %58 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom30 = sext i32 %58 to i64
  %59 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx31 = getelementptr inbounds i64, i64* %59, i64 %idxprom30
  %60 = load i64, i64* %arrayidx31, align 8, !tbaa !25
  call void @store_glyphs(%struct.pdf_char_glyph_pairs_s* %51, i8* null, i32 0, i64 %54, i64 %57, i64 %60) #7
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.25
  %61 = load i32, i32* %i, align 4, !tbaa !21
  %inc33 = add nsw i32 %61, 1
  store i32 %inc33, i32* %i, align 4, !tbaa !21
  br label %for.cond.22

for.end.34:                                       ; preds = %for.cond.22
  %62 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %63 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %64 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %call35 = call i32 @pdf_find_font_resource(%struct.gx_device_pdf_s* %62, %struct.gs_font_s* %63, i32 6, %struct.pdf_font_resource_s** %pdfont, %struct.pdf_char_glyph_pairs_s* %64, i32 0) #7
  store i32 %call35, i32* %code, align 4, !tbaa !21
  %65 = load i32, i32* %code, align 4, !tbaa !21
  %cmp36 = icmp slt i32 %65, 0
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %for.end.34
  %66 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %66, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148

if.end.38:                                        ; preds = %for.end.34
  %67 = load i32, i32* %code, align 4, !tbaa !21
  %tobool39 = icmp ne i32 %67, 0
  br i1 %tobool39, label %if.then.40, label %if.end.45

if.then.40:                                       ; preds = %if.end.38
  %68 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %69 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %70 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %call41 = call i32 @pdf_attach_font_resource(%struct.gx_device_pdf_s* %68, %struct.gs_font_s* %69, %struct.pdf_font_resource_s* %70) #7
  store i32 %call41, i32* %code, align 4, !tbaa !21
  %71 = load i32, i32* %code, align 4, !tbaa !21
  %cmp42 = icmp slt i32 %71, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.40
  %72 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %72, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148

if.end.44:                                        ; preds = %if.then.40
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.end.38
  %73 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars46 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %73, i32 0, i32 1
  store i32 0, i32* %num_unused_chars46, align 4, !tbaa !160
  %74 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars47 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %74, i32 0, i32 0
  store i32 0, i32* %num_all_chars47, align 4, !tbaa !169
  %75 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %cmp48 = icmp ne %struct.pdf_font_resource_s* %75, null
  br i1 %cmp48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %if.end.45
  %76 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %76, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %last_reserved_char50 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 6
  %77 = load i32, i32* %last_reserved_char50, align 4, !tbaa !232
  store i32 %77, i32* %last_reserved_char, align 4, !tbaa !21
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %if.end.45
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.86, %if.end.51
  %78 = load i32, i32* %i, align 4, !tbaa !21
  %79 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size53 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %79, i32 0, i32 1
  %80 = load i32, i32* %size53, align 4, !tbaa !218
  %cmp54 = icmp ult i32 %78, %80
  br i1 %cmp54, label %for.body.55, label %for.end.88

for.body.55:                                      ; preds = %for.cond.52
  %81 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %cmp56 = icmp eq %struct.pdf_font_resource_s* %81, null
  br i1 %cmp56, label %if.then.57, label %if.else

if.then.57:                                       ; preds = %for.body.55
  store i64 256, i64* %ch, align 8, !tbaa !25
  br label %if.end.61

if.else:                                          ; preds = %for.body.55
  %82 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %83 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %84 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom58 = sext i32 %84 to i64
  %85 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx59 = getelementptr inbounds i64, i64* %85, i64 %idxprom58
  %86 = load i64, i64* %arrayidx59, align 8, !tbaa !25
  %call60 = call i64 @pdf_reserve_char_code_in_pdfont(%struct.pdf_font_resource_s* %82, %struct.pdf_char_glyph_pairs_s* %83, i64 %86, i32* %last_reserved_char) #7
  store i64 %call60, i64* %ch, align 8, !tbaa !25
  br label %if.end.61

if.end.61:                                        ; preds = %if.else, %if.then.57
  %87 = load i64, i64* %ch, align 8, !tbaa !25
  %cmp62 = icmp ugt i64 %87, 255
  br i1 %cmp62, label %if.then.63, label %if.end.85

if.then.63:                                       ; preds = %if.end.61
  %88 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %cmp64 = icmp ne %struct.pdf_font_resource_s* %88, null
  br i1 %cmp64, label %if.then.65, label %if.end.69

if.then.65:                                       ; preds = %if.then.63
  %89 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u66 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %89, i32 0, i32 20
  %simple67 = bitcast %union.anon.1* %u66 to %struct.anon.4*
  %last_reserved_char68 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple67, i32 0, i32 6
  %90 = load i32, i32* %last_reserved_char68, align 4, !tbaa !232
  store i32 %90, i32* %last_reserved_char, align 4, !tbaa !21
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.65, %if.then.63
  store i32 -1, i32* %last_reserved_char, align 4, !tbaa !21
  %91 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars70 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %91, i32 0, i32 1
  store i32 0, i32* %num_unused_chars70, align 4, !tbaa !160
  %92 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars71 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %92, i32 0, i32 0
  store i32 0, i32* %num_all_chars71, align 4, !tbaa !169
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.72

for.cond.72:                                      ; preds = %for.inc.82, %if.end.69
  %93 = load i32, i32* %i, align 4, !tbaa !21
  %94 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size73 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %94, i32 0, i32 1
  %95 = load i32, i32* %size73, align 4, !tbaa !218
  %cmp74 = icmp ult i32 %93, %95
  br i1 %cmp74, label %for.body.75, label %for.end.84

for.body.75:                                      ; preds = %for.cond.72
  %96 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %97 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom76 = sext i32 %97 to i64
  %98 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx77 = getelementptr inbounds i64, i64* %98, i64 %idxprom76
  %99 = load i64, i64* %arrayidx77, align 8, !tbaa !25
  %call78 = call i64 @pdf_new_char_code_in_pdfont(%struct.pdf_char_glyph_pairs_s* %96, i64 %99, i32* %last_reserved_char) #7
  store i64 %call78, i64* %ch, align 8, !tbaa !25
  %100 = load i64, i64* %ch, align 8, !tbaa !25
  %cmp79 = icmp ugt i64 %100, 255
  br i1 %cmp79, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %for.body.75
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148

if.end.81:                                        ; preds = %for.body.75
  br label %for.inc.82

for.inc.82:                                       ; preds = %if.end.81
  %101 = load i32, i32* %i, align 4, !tbaa !21
  %inc83 = add nsw i32 %101, 1
  store i32 %inc83, i32* %i, align 4, !tbaa !21
  br label %for.cond.72

for.end.84:                                       ; preds = %for.cond.72
  br label %if.end.85

if.end.85:                                        ; preds = %for.end.84, %if.end.61
  br label %for.inc.86

for.inc.86:                                       ; preds = %if.end.85
  %102 = load i32, i32* %i, align 4, !tbaa !21
  %inc87 = add nsw i32 %102, 1
  store i32 %inc87, i32* %i, align 4, !tbaa !21
  br label %for.cond.52

for.end.88:                                       ; preds = %for.cond.52
  %103 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %cmp89 = icmp ne %struct.pdf_font_resource_s* %103, null
  br i1 %cmp89, label %if.then.90, label %if.end.94

if.then.90:                                       ; preds = %for.end.88
  %104 = load i32, i32* %last_reserved_char, align 4, !tbaa !21
  %105 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u91 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %105, i32 0, i32 20
  %simple92 = bitcast %union.anon.1* %u91 to %struct.anon.4*
  %last_reserved_char93 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple92, i32 0, i32 6
  store i32 %104, i32* %last_reserved_char93, align 4, !tbaa !232
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.90, %for.end.88
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.145, %if.end.94
  %106 = load i32, i32* %i, align 4, !tbaa !21
  %107 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size96 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %107, i32 0, i32 1
  %108 = load i32, i32* %size96, align 4, !tbaa !218
  %cmp97 = icmp ult i32 %106, %108
  br i1 %cmp97, label %for.body.98, label %for.end.147

for.body.98:                                      ; preds = %for.cond.95
  %109 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %cmp99 = icmp ne %struct.pdf_font_resource_s* %109, null
  br i1 %cmp99, label %if.then.100, label %if.else.110

if.then.100:                                      ; preds = %for.body.98
  %110 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %111 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %112 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom101 = sext i32 %112 to i64
  %113 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx102 = getelementptr inbounds i64, i64* %113, i64 %idxprom101
  %114 = load i64, i64* %arrayidx102, align 8, !tbaa !25
  %115 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u103 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %115, i32 0, i32 20
  %simple104 = bitcast %union.anon.1* %u103 to %struct.anon.4*
  %last_reserved_char105 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple104, i32 0, i32 6
  %call106 = call i64 @pdf_reserve_char_code_in_pdfont(%struct.pdf_font_resource_s* %110, %struct.pdf_char_glyph_pairs_s* %111, i64 %114, i32* %last_reserved_char105) #7
  store i64 %call106, i64* %ch, align 8, !tbaa !25
  %116 = load i64, i64* %ch, align 8, !tbaa !25
  %conv = trunc i64 %116 to i8
  %117 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom107 = sext i32 %117 to i64
  %118 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data108 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %118, i32 0, i32 0
  %119 = load i8*, i8** %data108, align 8, !tbaa !221
  %arrayidx109 = getelementptr inbounds i8, i8* %119, i64 %idxprom107
  store i8 %conv, i8* %arrayidx109, align 1, !tbaa !161
  br label %if.end.144

if.else.110:                                      ; preds = %for.body.98
  %120 = bitcast i32* %j111 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %120) #1
  store i32 0, i32* %j111, align 4, !tbaa !21
  br label %for.cond.112

for.cond.112:                                     ; preds = %for.inc.125, %if.else.110
  %121 = load i32, i32* %j111, align 4, !tbaa !21
  %122 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars113 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %122, i32 0, i32 0
  %123 = load i32, i32* %num_all_chars113, align 4, !tbaa !169
  %cmp114 = icmp slt i32 %121, %123
  br i1 %cmp114, label %for.body.116, label %for.end.127

for.body.116:                                     ; preds = %for.cond.112
  %124 = load i32, i32* %j111, align 4, !tbaa !21
  %idxprom117 = sext i32 %124 to i64
  %125 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %125, i32 0, i32 3
  %arrayidx118 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom117
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx118, i32 0, i32 1
  %126 = load i64, i64* %glyph, align 8, !tbaa !155
  %127 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom119 = sext i32 %127 to i64
  %128 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx120 = getelementptr inbounds i64, i64* %128, i64 %idxprom119
  %129 = load i64, i64* %arrayidx120, align 8, !tbaa !25
  %cmp121 = icmp eq i64 %126, %129
  br i1 %cmp121, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %for.body.116
  br label %for.end.127

if.end.124:                                       ; preds = %for.body.116
  br label %for.inc.125

for.inc.125:                                      ; preds = %if.end.124
  %130 = load i32, i32* %j111, align 4, !tbaa !21
  %inc126 = add nsw i32 %130, 1
  store i32 %inc126, i32* %j111, align 4, !tbaa !21
  br label %for.cond.112

for.end.127:                                      ; preds = %if.then.123, %for.cond.112
  %131 = load i32, i32* %j111, align 4, !tbaa !21
  %132 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars128 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %132, i32 0, i32 0
  %133 = load i32, i32* %num_all_chars128, align 4, !tbaa !169
  %cmp129 = icmp slt i32 %131, %133
  br i1 %cmp129, label %if.then.131, label %if.else.139

if.then.131:                                      ; preds = %for.end.127
  %134 = load i32, i32* %j111, align 4, !tbaa !21
  %idxprom132 = sext i32 %134 to i64
  %135 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s133 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %135, i32 0, i32 3
  %arrayidx134 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s133, i32 0, i64 %idxprom132
  %chr = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx134, i32 0, i32 0
  %136 = load i64, i64* %chr, align 8, !tbaa !151
  %conv135 = trunc i64 %136 to i8
  %137 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom136 = sext i32 %137 to i64
  %138 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data137 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %138, i32 0, i32 0
  %139 = load i8*, i8** %data137, align 8, !tbaa !221
  %arrayidx138 = getelementptr inbounds i8, i8* %139, i64 %idxprom136
  store i8 %conv135, i8* %arrayidx138, align 1, !tbaa !161
  br label %if.end.140

if.else.139:                                      ; preds = %for.end.127
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.141

if.end.140:                                       ; preds = %if.then.131
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.141

cleanup.141:                                      ; preds = %if.end.140, %if.else.139
  %140 = bitcast i32* %j111 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %140) #1
  %cleanup.dest.142 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.142, label %cleanup.148 [
    i32 0, label %cleanup.cont.143
  ]

cleanup.cont.143:                                 ; preds = %cleanup.141
  br label %if.end.144

if.end.144:                                       ; preds = %cleanup.cont.143, %if.then.100
  br label %for.inc.145

for.inc.145:                                      ; preds = %if.end.144
  %141 = load i32, i32* %i, align 4, !tbaa !21
  %inc146 = add nsw i32 %141, 1
  store i32 %inc146, i32* %i, align 4, !tbaa !21
  br label %for.cond.95

for.end.147:                                      ; preds = %for.cond.95
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148

cleanup.148:                                      ; preds = %for.end.147, %cleanup.141, %if.then.80, %if.then.43, %if.then.37
  %142 = bitcast i32* %last_reserved_char to i8*
  call void @llvm.lifetime.end(i64 4, i8* %142) #1
  br label %cleanup.219

if.end.149:                                       ; preds = %do_unknown
  %143 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %144 = bitcast %struct.gs_font_s* %143 to %struct.gs_font_base_s*
  store %struct.gs_font_base_s* %144, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %145 = load i32, i32* %start_ei, align 4, !tbaa !21
  %cmp150 = icmp slt i32 %145, 0
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %if.end.149
  %146 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %bfont, align 8, !tbaa !1
  %nearest_encoding_index = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %146, i32 0, i32 28
  %147 = load i32, i32* %nearest_encoding_index, align 4, !tbaa !181
  store i32 %147, i32* %start_ei, align 4, !tbaa !21
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.152, %if.end.149
  %148 = load i32, i32* %start_ei, align 4, !tbaa !21
  %cmp154 = icmp slt i32 %148, 0
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %if.end.153
  store i32 0, i32* %start_ei, align 4, !tbaa !21
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.156, %if.end.153
  store i32 0, i32* %j, align 4, !tbaa !21
  %149 = load i32, i32* %start_ei, align 4, !tbaa !21
  store i32 %149, i32* %ei, align 4, !tbaa !21
  br label %for.cond.158

for.cond.158:                                     ; preds = %for.inc.215, %if.end.157
  %150 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom159 = sext i32 %150 to i64
  %arrayidx160 = getelementptr inbounds [0 x i16*], [0 x i16*]* @gs_c_known_encodings, i32 0, i64 %idxprom159
  %151 = load i16*, i16** %arrayidx160, align 8, !tbaa !1
  %tobool161 = icmp ne i16* %151, null
  br i1 %tobool161, label %for.body.162, label %for.end.218

for.body.162:                                     ; preds = %for.cond.158
  %152 = load i32, i32* %ei, align 4, !tbaa !21
  %idxprom163 = sext i32 %152 to i64
  %arrayidx164 = getelementptr inbounds [0 x i16*], [0 x i16*]* @gs_c_known_encodings, i32 0, i64 %idxprom163
  %153 = load i16*, i16** %arrayidx164, align 8, !tbaa !1
  %tobool165 = icmp ne i16* %153, null
  br i1 %tobool165, label %if.end.167, label %if.then.166

if.then.166:                                      ; preds = %for.body.162
  store i32 0, i32* %ei, align 4, !tbaa !21
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.166, %for.body.162
  %154 = load i32, i32* %ei, align 4, !tbaa !21
  %cmp168 = icmp sgt i32 %154, 5
  br i1 %cmp168, label %if.then.170, label %if.end.171

if.then.170:                                      ; preds = %if.end.167
  br label %for.inc.215

if.end.171:                                       ; preds = %if.end.167
  %155 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars172 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %155, i32 0, i32 1
  store i32 0, i32* %num_unused_chars172, align 4, !tbaa !160
  %156 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars173 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %156, i32 0, i32 0
  store i32 0, i32* %num_all_chars173, align 4, !tbaa !169
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.192, %if.end.171
  %157 = load i32, i32* %i, align 4, !tbaa !21
  %158 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size175 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %158, i32 0, i32 1
  %159 = load i32, i32* %size175, align 4, !tbaa !218
  %cmp176 = icmp ult i32 %157, %159
  br i1 %cmp176, label %for.body.178, label %for.end.194

for.body.178:                                     ; preds = %for.cond.174
  %160 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom179 = sext i32 %160 to i64
  %161 = load i64*, i64** %gid, align 8, !tbaa !1
  %arrayidx180 = getelementptr inbounds i64, i64* %161, i64 %idxprom179
  %162 = load i64, i64* %arrayidx180, align 8, !tbaa !25
  %163 = load i32, i32* %ei, align 4, !tbaa !21
  %call181 = call i64 @gs_c_decode(i64 %162, i32 %163) #7
  store i64 %call181, i64* %ch, align 8, !tbaa !25
  %164 = load i64, i64* %ch, align 8, !tbaa !25
  %cmp182 = icmp eq i64 %164, -1
  br i1 %cmp182, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %for.body.178
  br label %for.end.194

if.end.185:                                       ; preds = %for.body.178
  %165 = load i64, i64* %ch, align 8, !tbaa !25
  %cmp186 = icmp ugt i64 %165, 255
  br i1 %cmp186, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %if.end.185
  br label %for.end.194

if.end.189:                                       ; preds = %if.end.185
  %166 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %167 = load i64, i64* %ch, align 8, !tbaa !25
  %168 = load i64, i64* %ch, align 8, !tbaa !25
  %169 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom190 = sext i32 %169 to i64
  %170 = load i64*, i64** %gdata.addr, align 8, !tbaa !1
  %arrayidx191 = getelementptr inbounds i64, i64* %170, i64 %idxprom190
  %171 = load i64, i64* %arrayidx191, align 8, !tbaa !25
  call void @store_glyphs(%struct.pdf_char_glyph_pairs_s* %166, i8* null, i32 0, i64 %167, i64 %168, i64 %171) #7
  br label %for.inc.192

for.inc.192:                                      ; preds = %if.end.189
  %172 = load i32, i32* %i, align 4, !tbaa !21
  %inc193 = add nsw i32 %172, 1
  store i32 %inc193, i32* %i, align 4, !tbaa !21
  br label %for.cond.174

for.end.194:                                      ; preds = %if.then.188, %if.then.184, %for.cond.174
  %173 = load i32, i32* %ei, align 4, !tbaa !21
  %174 = load i32*, i32** %ps_encoding_index.addr, align 8, !tbaa !1
  store i32 %173, i32* %174, align 4, !tbaa !21
  %175 = load i32, i32* %i, align 4, !tbaa !21
  %176 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size195 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %176, i32 0, i32 1
  %177 = load i32, i32* %size195, align 4, !tbaa !218
  %cmp196 = icmp eq i32 %175, %177
  br i1 %cmp196, label %if.then.198, label %if.end.214

if.then.198:                                      ; preds = %for.end.194
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.211, %if.then.198
  %178 = load i32, i32* %i, align 4, !tbaa !21
  %179 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size200 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %179, i32 0, i32 1
  %180 = load i32, i32* %size200, align 4, !tbaa !218
  %cmp201 = icmp ult i32 %178, %180
  br i1 %cmp201, label %for.body.203, label %for.end.213

for.body.203:                                     ; preds = %for.cond.199
  %181 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom204 = sext i32 %181 to i64
  %182 = load i64*, i64** %gid, align 8, !tbaa !1
  %arrayidx205 = getelementptr inbounds i64, i64* %182, i64 %idxprom204
  %183 = load i64, i64* %arrayidx205, align 8, !tbaa !25
  %184 = load i32, i32* %ei, align 4, !tbaa !21
  %call206 = call i64 @gs_c_decode(i64 %183, i32 %184) #7
  %conv207 = trunc i64 %call206 to i8
  %185 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom208 = sext i32 %185 to i64
  %186 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data209 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %186, i32 0, i32 0
  %187 = load i8*, i8** %data209, align 8, !tbaa !221
  %arrayidx210 = getelementptr inbounds i8, i8* %187, i64 %idxprom208
  store i8 %conv207, i8* %arrayidx210, align 1, !tbaa !161
  br label %for.inc.211

for.inc.211:                                      ; preds = %for.body.203
  %188 = load i32, i32* %i, align 4, !tbaa !21
  %inc212 = add nsw i32 %188, 1
  store i32 %inc212, i32* %i, align 4, !tbaa !21
  br label %for.cond.199

for.end.213:                                      ; preds = %for.cond.199
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.219

if.end.214:                                       ; preds = %for.end.194
  br label %for.inc.215

for.inc.215:                                      ; preds = %if.end.214, %if.then.170
  %189 = load i32, i32* %j, align 4, !tbaa !21
  %inc216 = add nsw i32 %189, 1
  store i32 %inc216, i32* %j, align 4, !tbaa !21
  %190 = load i32, i32* %ei, align 4, !tbaa !21
  %inc217 = add nsw i32 %190, 1
  store i32 %inc217, i32* %ei, align 4, !tbaa !21
  br label %for.cond.158

for.end.218:                                      ; preds = %for.cond.158
  store i32 1, i32* %unknown, align 4, !tbaa !21
  br label %do_unknown

cleanup.219:                                      ; preds = %for.end.213, %cleanup.148, %cleanup, %if.then
  %191 = bitcast i32* %start_ei to i8*
  call void @llvm.lifetime.end(i64 4, i8* %191) #1
  %192 = bitcast i32* %ei to i8*
  call void @llvm.lifetime.end(i64 4, i8* %192) #1
  %193 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %193) #1
  %194 = bitcast i32* %unknown to i8*
  call void @llvm.lifetime.end(i64 4, i8* %194) #1
  %195 = bitcast %struct.gs_font_base_s** %bfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %195) #1
  %196 = bitcast i64** %gid to i8*
  call void @llvm.lifetime.end(i64 8, i8* %196) #1
  %197 = bitcast %struct.gs_const_string_s* %gname to i8*
  call void @llvm.lifetime.end(i64 16, i8* %197) #1
  %198 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.end(i64 8, i8* %198) #1
  %199 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %199) #1
  %200 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %200) #1
  %201 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %201) #1
  %202 = load i32, i32* %retval
  ret i32 %202
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_mark_text_glyphs_unencoded(%struct.gs_text_enum_s* %penum, %struct.gs_string_s* %pstr, i8* %glyph_usage, i32 %char_cache_size) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.gs_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %glyph_usage.addr = alloca i8*, align 8
  %char_cache_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ch = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct.gs_text_enum_s* %penum, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store i8* %glyph_usage, i8** %glyph_usage.addr, align 8, !tbaa !1
  store i32 %char_cache_size, i32* %char_cache_size.addr, align 4, !tbaa !21
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !21
  %2 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4, !tbaa !218
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start(i64 1, i8* %ch) #1
  %4 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.gs_string_s*, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %5, i32 0, i32 0
  %6 = load i8*, i8** %data, align 8, !tbaa !221
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !161
  store i8 %7, i8* %ch, align 1, !tbaa !161
  %8 = load i8, i8* %ch, align 1, !tbaa !161
  %conv = zext i8 %8 to i32
  %9 = load i32, i32* %char_cache_size.addr, align 4, !tbaa !21
  %cmp1 = icmp sge i32 %conv, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body
  %10 = load i8, i8* %ch, align 1, !tbaa !161
  %conv3 = zext i8 %10 to i32
  %and = and i32 %conv3, 7
  %shr = ashr i32 128, %and
  %11 = load i8, i8* %ch, align 1, !tbaa !161
  %conv4 = zext i8 %11 to i32
  %div = sdiv i32 %conv4, 8
  %idxprom5 = sext i32 %div to i64
  %12 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i64 %idxprom5
  %13 = load i8, i8* %arrayidx6, align 1, !tbaa !161
  %conv7 = zext i8 %13 to i32
  %or = or i32 %conv7, %shr
  %conv8 = trunc i32 %or to i8
  store i8 %conv8, i8* %arrayidx6, align 1, !tbaa !161
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %ch) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.9 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %14 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.9

cleanup.9:                                        ; preds = %for.end, %cleanup
  %15 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #1
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define i32 @pdf_obtain_parent_type0_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.pdf_font_resource_s* %pdsubf, i32 %font_index, %struct.gs_const_string_s* %CMapName, %struct.pdf_font_resource_s** %pdfont) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pdsubf.addr = alloca %struct.pdf_font_resource_s*, align 8
  %font_index.addr = alloca i32, align 4
  %CMapName.addr = alloca %struct.gs_const_string_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdsubf, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  store i32 %font_index, i32* %font_index.addr, align 4, !tbaa !21
  store %struct.gs_const_string_s* %CMapName, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s** %pdfont, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  %0 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %0, i32 0, i32 20
  %cidfont = bitcast %union.anon.1* %u to %struct.anon.3*
  %parent = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont, i32 0, i32 7
  %1 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %parent, align 8, !tbaa !233
  %cmp = icmp ne %struct.pdf_font_resource_s* %1, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %font_index.addr, align 4, !tbaa !21
  %3 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u1 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %3, i32 0, i32 20
  %cidfont2 = bitcast %union.anon.1* %u1 to %struct.anon.3*
  %parent3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont2, i32 0, i32 7
  %4 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %parent3, align 8, !tbaa !233
  %u4 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %4, i32 0, i32 20
  %type0 = bitcast %union.anon.1* %u4 to %struct.anon.2*
  %font_index5 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type0, i32 0, i32 3
  %5 = load i32, i32* %font_index5, align 4, !tbaa !235
  %cmp6 = icmp eq i32 %2, %5
  br i1 %cmp6, label %land.lhs.true.7, label %if.else

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %6 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %7 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u8 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %7, i32 0, i32 20
  %cidfont9 = bitcast %union.anon.1* %u8 to %struct.anon.3*
  %parent10 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont9, i32 0, i32 7
  %8 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %parent10, align 8, !tbaa !233
  %u11 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %8, i32 0, i32 20
  %type012 = bitcast %union.anon.1* %u11 to %struct.anon.2*
  %CMapName13 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type012, i32 0, i32 2
  %call = call i32 @strings_equal(%struct.gs_const_string_s* %6, %struct.gs_const_string_s* %CMapName13) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.7
  %9 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u14 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %9, i32 0, i32 20
  %cidfont15 = bitcast %union.anon.1* %u14 to %struct.anon.3*
  %parent16 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont15, i32 0, i32 7
  %10 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %parent16, align 8, !tbaa !233
  %11 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %10, %struct.pdf_font_resource_s** %11, align 8, !tbaa !1
  br label %if.end.34

if.else:                                          ; preds = %land.lhs.true.7, %land.lhs.true, %entry
  %12 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u17 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %12, i32 0, i32 20
  %cidfont18 = bitcast %union.anon.1* %u17 to %struct.anon.3*
  %parent19 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont18, i32 0, i32 7
  %13 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %parent19, align 8, !tbaa !233
  %cmp20 = icmp eq %struct.pdf_font_resource_s* %13, null
  br i1 %cmp20, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %15 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %16 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %17 = load i32, i32* %font_index.addr, align 4, !tbaa !21
  %18 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  %call21 = call i32 @pdf_find_type0_font_resource(%struct.gx_device_pdf_s* %14, %struct.pdf_font_resource_s* %15, %struct.gs_const_string_s* %16, i32 %17, %struct.pdf_font_resource_s** %18) #7
  %cmp22 = icmp sle i32 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.30

if.then.23:                                       ; preds = %lor.lhs.false, %if.else
  %19 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #1
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %21 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  %22 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %23 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %call24 = call i32 @pdf_font_type0_alloc(%struct.gx_device_pdf_s* %20, %struct.pdf_font_resource_s** %21, i64 0, %struct.pdf_font_resource_s* %22, %struct.gs_const_string_s* %23) #7
  store i32 %call24, i32* %code, align 4, !tbaa !21
  %24 = load i32, i32* %code, align 4, !tbaa !21
  %cmp25 = icmp slt i32 %24, 0
  br i1 %cmp25, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.then.23
  %25 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then.23
  %26 = load i32, i32* %font_index.addr, align 4, !tbaa !21
  %27 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  %28 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %27, align 8, !tbaa !1
  %u27 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %28, i32 0, i32 20
  %type028 = bitcast %union.anon.1* %u27 to %struct.anon.2*
  %font_index29 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type028, i32 0, i32 3
  store i32 %26, i32* %font_index29, align 4, !tbaa !235
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.26
  %29 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.30

if.end.30:                                        ; preds = %cleanup.cont, %lor.lhs.false
  %30 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %pdfont.addr, align 8, !tbaa !1
  %31 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %30, align 8, !tbaa !1
  %32 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %u31 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %32, i32 0, i32 20
  %cidfont32 = bitcast %union.anon.1* %u31 to %struct.anon.3*
  %parent33 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %cidfont32, i32 0, i32 7
  store %struct.pdf_font_resource_s* %31, %struct.pdf_font_resource_s** %parent33, align 8, !tbaa !233
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.30, %if.then
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.34, %cleanup
  %33 = load i32, i32* %retval
  ret i32 %33

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @strings_equal(%struct.gs_const_string_s* %s1, %struct.gs_const_string_s* %s2) #5 {
entry:
  %s1.addr = alloca %struct.gs_const_string_s*, align 8
  %s2.addr = alloca %struct.gs_const_string_s*, align 8
  store %struct.gs_const_string_s* %s1, %struct.gs_const_string_s** %s1.addr, align 8, !tbaa !1
  store %struct.gs_const_string_s* %s2, %struct.gs_const_string_s** %s2.addr, align 8, !tbaa !1
  %0 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s1.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %0, i32 0, i32 1
  %1 = load i32, i32* %size, align 4, !tbaa !231
  %2 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s2.addr, align 8, !tbaa !1
  %size1 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %2, i32 0, i32 1
  %3 = load i32, i32* %size1, align 4, !tbaa !231
  %cmp = icmp eq i32 %1, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %4 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s1.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8, !tbaa !230
  %6 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s2.addr, align 8, !tbaa !1
  %data2 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %6, i32 0, i32 0
  %7 = load i8*, i8** %data2, align 8, !tbaa !230
  %8 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s1.addr, align 8, !tbaa !1
  %size3 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %8, i32 0, i32 1
  %9 = load i32, i32* %size3, align 4, !tbaa !231
  %conv = zext i32 %9 to i64
  %call = call i32 @memcmp(i8* %5, i8* %7, i64 %conv) #10
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %10 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %10 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_find_type0_font_resource(%struct.gx_device_pdf_s* %pdev, %struct.pdf_font_resource_s* %pdsubf, %struct.gs_const_string_s* %CMapName, i32 %font_index, %struct.pdf_font_resource_s** %ppdfont) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pdsubf.addr = alloca %struct.pdf_font_resource_s*, align 8
  %CMapName.addr = alloca %struct.gs_const_string_s*, align 8
  %font_index.addr = alloca i32, align 4
  %ppdfont.addr = alloca %struct.pdf_font_resource_s**, align 8
  %pchain = alloca %struct.pdf_resource_s**, align 8
  %pres = alloca %struct.pdf_resource_s*, align 8
  %i = alloca i32, align 4
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdsubf, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  store %struct.gs_const_string_s* %CMapName, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  store i32 %font_index, i32* %font_index.addr, align 4, !tbaa !21
  store %struct.pdf_font_resource_s** %ppdfont, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_resource_s*** %pchain to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %resources = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %1, i32 0, i32 165
  %arrayidx = getelementptr inbounds [15 x %struct.pdf_resource_list_s], [15 x %struct.pdf_resource_list_s]* %resources, i32 0, i64 6
  %chains = getelementptr inbounds %struct.pdf_resource_list_s, %struct.pdf_resource_list_s* %arrayidx, i32 0, i32 0
  %arraydecay = getelementptr inbounds [16 x %struct.pdf_resource_s*], [16 x %struct.pdf_resource_s*]* %chains, i32 0, i32 0
  store %struct.pdf_resource_s** %arraydecay, %struct.pdf_resource_s*** %pchain, align 8, !tbaa !1
  %2 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc.30, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !21
  %cmp = icmp slt i32 %4, 16
  br i1 %cmp, label %for.body, label %for.end.31

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.pdf_resource_s**, %struct.pdf_resource_s*** %pchain, align 8, !tbaa !1
  %arrayidx1 = getelementptr inbounds %struct.pdf_resource_s*, %struct.pdf_resource_s** %6, i64 %idxprom
  %7 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %arrayidx1, align 8, !tbaa !1
  store %struct.pdf_resource_s* %7, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %8 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %cmp3 = icmp ne %struct.pdf_resource_s* %8, null
  br i1 %cmp3, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.2
  %9 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %11 = bitcast %struct.pdf_resource_s* %10 to %struct.pdf_font_resource_s*
  store %struct.pdf_font_resource_s* %11, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %12 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %12, i32 0, i32 8
  %13 = load i32, i32* %FontType, align 4, !tbaa !126
  %cmp5 = icmp ne i32 %13, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.4
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body.4
  %14 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %14, i32 0, i32 20
  %type0 = bitcast %union.anon.1* %u to %struct.anon.2*
  %DescendantFont = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type0, i32 0, i32 0
  %15 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %DescendantFont, align 8, !tbaa !163
  %16 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %cmp6 = icmp ne %struct.pdf_font_resource_s* %15, %16
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end
  %17 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u9 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %17, i32 0, i32 20
  %type010 = bitcast %union.anon.1* %u9 to %struct.anon.2*
  %font_index11 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type010, i32 0, i32 3
  %18 = load i32, i32* %font_index11, align 4, !tbaa !235
  %19 = load i32, i32* %font_index.addr, align 4, !tbaa !21
  %cmp12 = icmp ne i32 %18, %19
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.8
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end.14:                                        ; preds = %if.end.8
  %20 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %BaseFont = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %20, i32 0, i32 10
  %size = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %BaseFont, i32 0, i32 1
  %21 = load i32, i32* %size, align 4, !tbaa !236
  %22 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %BaseFont15 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %22, i32 0, i32 10
  %size16 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %BaseFont15, i32 0, i32 1
  %23 = load i32, i32* %size16, align 4, !tbaa !236
  %24 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %size17 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %24, i32 0, i32 1
  %25 = load i32, i32* %size17, align 4, !tbaa !231
  %add = add i32 %23, %25
  %add18 = add i32 %add, 1
  %cmp19 = icmp ne i32 %21, %add18
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.14
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end.21:                                        ; preds = %if.end.14
  %26 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %BaseFont22 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %26, i32 0, i32 10
  %data = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %BaseFont22, i32 0, i32 0
  %27 = load i8*, i8** %data, align 8, !tbaa !237
  %28 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdsubf.addr, align 8, !tbaa !1
  %BaseFont23 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %28, i32 0, i32 10
  %size24 = getelementptr inbounds %struct.gs_string_s, %struct.gs_string_s* %BaseFont23, i32 0, i32 1
  %29 = load i32, i32* %size24, align 4, !tbaa !236
  %idx.ext = zext i32 %29 to i64
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %idx.ext
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %30 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %data26 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %30, i32 0, i32 0
  %31 = load i8*, i8** %data26, align 8, !tbaa !230
  %32 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %CMapName.addr, align 8, !tbaa !1
  %size27 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %32, i32 0, i32 1
  %33 = load i32, i32* %size27, align 4, !tbaa !231
  %conv = zext i32 %33 to i64
  %call = call i32 @memcmp(i8* %add.ptr25, i8* %31, i64 %conv) #10
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.21
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup

if.end.29:                                        ; preds = %if.end.21
  %34 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %35 = load %struct.pdf_font_resource_s**, %struct.pdf_font_resource_s*** %ppdfont.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %34, %struct.pdf_font_resource_s** %35, align 8, !tbaa !1
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.29, %if.then.28, %if.then.20, %if.then.13, %if.then.7, %if.then
  %36 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.32 [
    i32 7, label %for.inc
  ]

for.inc:                                          ; preds = %cleanup
  %37 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.pdf_resource_s, %struct.pdf_resource_s* %37, i32 0, i32 0
  %38 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %next, align 8, !tbaa !170
  store %struct.pdf_resource_s* %38, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.30

for.inc.30:                                       ; preds = %for.end
  %39 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end.31:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.32

cleanup.32:                                       ; preds = %for.end.31, %cleanup
  %40 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #1
  %41 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #1
  %42 = bitcast %struct.pdf_resource_s*** %pchain to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #1
  %43 = load i32, i32* %retval
  ret i32 %43
}

declare i32 @pdf_font_type0_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_resource_s*, %struct.gs_const_string_s*) #2

; Function Attrs: nounwind uwtable
define i64 @pdf_find_glyph(%struct.pdf_font_resource_s* %pdfont, i64 %glyph) #0 {
entry:
  %retval = alloca i64, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %glyph.addr = alloca i64, align 8
  %pet = alloca %struct.pdf_encoding_element_s*, align 8
  %i = alloca i32, align 4
  %i0 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  %0 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %0, i32 0, i32 8
  %1 = load i32, i32* %FontType, align 4, !tbaa !126
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType1 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %2, i32 0, i32 8
  %3 = load i32, i32* %FontType1, align 4, !tbaa !126
  %cmp2 = icmp ne i32 %3, 53
  br i1 %cmp2, label %land.lhs.true.3, label %if.else

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %4 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType4 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %4, i32 0, i32 8
  %5 = load i32, i32* %FontType4, align 4, !tbaa !126
  %cmp5 = icmp ne i32 %5, 51
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true.3
  %6 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType7 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %6, i32 0, i32 8
  %7 = load i32, i32* %FontType7, align 4, !tbaa !126
  %cmp8 = icmp ne i32 %7, 52
  br i1 %cmp8, label %land.lhs.true.9, label %if.else

land.lhs.true.9:                                  ; preds = %land.lhs.true.6
  %8 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType10 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %8, i32 0, i32 8
  %9 = load i32, i32* %FontType10, align 4, !tbaa !126
  %cmp11 = icmp ne i32 %9, 54
  br i1 %cmp11, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.9
  store i64 -1, i64* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.9, %land.lhs.true.6, %land.lhs.true.3, %land.lhs.true, %entry
  %10 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #1
  %11 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %11, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %Encoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 4
  %12 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding, align 8, !tbaa !153
  store %struct.pdf_encoding_element_s* %12, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %13 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %14 = bitcast i32* %i0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  store i32 -1, i32* %i0, align 4, !tbaa !21
  %15 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u12 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %15, i32 0, i32 20
  %simple13 = bitcast %union.anon.1* %u12 to %struct.anon.4*
  %FirstChar = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple13, i32 0, i32 0
  %16 = load i32, i32* %FirstChar, align 4, !tbaa !238
  %17 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u14 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %17, i32 0, i32 20
  %simple15 = bitcast %union.anon.1* %u14 to %struct.anon.4*
  %LastChar = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple15, i32 0, i32 1
  %18 = load i32, i32* %LastChar, align 4, !tbaa !239
  %cmp16 = icmp sgt i32 %16, %18
  br i1 %cmp16, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.else
  store i64 0, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.else
  %19 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u18 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %19, i32 0, i32 20
  %simple19 = bitcast %union.anon.1* %u18 to %struct.anon.4*
  %FirstChar20 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple19, i32 0, i32 0
  %20 = load i32, i32* %FirstChar20, align 4, !tbaa !238
  store i32 %20, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %21 = load i32, i32* %i, align 4, !tbaa !21
  %22 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u21 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %22, i32 0, i32 20
  %simple22 = bitcast %union.anon.1* %u21 to %struct.anon.4*
  %LastChar23 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple22, i32 0, i32 1
  %23 = load i32, i32* %LastChar23, align 4, !tbaa !239
  %cmp24 = icmp sle i32 %21, %23
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph25 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %24, i32 0, i32 0
  %25 = load i64, i64* %glyph25, align 8, !tbaa !156
  %26 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %cmp26 = icmp eq i64 %25, %26
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !tbaa !21
  %conv = sext i32 %27 to i64
  store i64 %conv, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.28:                                        ; preds = %for.body
  %28 = load i32, i32* %i0, align 4, !tbaa !21
  %cmp29 = icmp eq i32 %28, -1
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.36

land.lhs.true.31:                                 ; preds = %if.end.28
  %29 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph32 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %29, i32 0, i32 0
  %30 = load i64, i64* %glyph32, align 8, !tbaa !156
  %cmp33 = icmp eq i64 %30, 2147483647
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %land.lhs.true.31
  %31 = load i32, i32* %i, align 4, !tbaa !21
  store i32 %31, i32* %i0, align 4, !tbaa !21
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %land.lhs.true.31, %if.end.28
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %32 = load i32, i32* %i, align 4, !tbaa !21
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4, !tbaa !21
  %33 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %33, i32 1
  store %struct.pdf_encoding_element_s* %incdec.ptr, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load i32, i32* %i0, align 4, !tbaa !21
  %cmp37 = icmp ne i32 %34, -1
  br i1 %cmp37, label %if.then.39, label %if.end.41

if.then.39:                                       ; preds = %for.end
  %35 = load i32, i32* %i0, align 4, !tbaa !21
  %conv40 = sext i32 %35 to i64
  store i64 %conv40, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.41:                                        ; preds = %for.end
  %36 = load i32, i32* %i, align 4, !tbaa !21
  %cmp42 = icmp slt i32 %36, 256
  br i1 %cmp42, label %if.then.44, label %if.end.46

if.then.44:                                       ; preds = %if.end.41
  %37 = load i32, i32* %i, align 4, !tbaa !21
  %conv45 = sext i32 %37 to i64
  store i64 %conv45, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.46:                                        ; preds = %if.end.41
  store i64 -1, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.46, %if.then.44, %if.then.39, %if.then.27, %if.then.17
  %38 = bitcast i32* %i0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #1
  %39 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #1
  %40 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #1
  br label %return

return:                                           ; preds = %cleanup, %if.then
  %41 = load i64, i64* %retval
  ret i64 %41
}

; Function Attrs: nounwind uwtable
define float @pdf_calculate_text_size(%struct.gs_imager_state_s* %pis, %struct.pdf_font_resource_s* %pdfont, %struct.gs_matrix_s* %pfmat, %struct.gs_matrix_s* %smat, %struct.gs_matrix_s* %tmat, %struct.gs_font_s* %font, %struct.gx_device_pdf_s* %pdev) #0 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %pfmat.addr = alloca %struct.gs_matrix_s*, align 8
  %smat.addr = alloca %struct.gs_matrix_s*, align 8
  %tmat.addr = alloca %struct.gs_matrix_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %orig_matrix = alloca %struct.gs_matrix_s, align 4
  %sx = alloca double, align 8
  %sy = alloca double, align 8
  %size = alloca float, align 4
  %cfont = alloca %struct.gs_font_base_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pfmat, %struct.gs_matrix_s** %pfmat.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %smat, %struct.gs_matrix_s** %smat.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %tmat, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_matrix_s* %orig_matrix to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #1
  %1 = bitcast double* %sx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #1
  %2 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %2, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %3 = load float, float* %arrayidx, align 4, !tbaa !142
  %conv = fpext float %3 to double
  %div = fdiv double %conv, 7.200000e+01
  store double %div, double* %sx, align 8, !tbaa !196
  %4 = bitcast double* %sy to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %HWResolution1 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %5, i32 0, i32 22
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution1, i32 0, i64 1
  %6 = load float, float* %arrayidx2, align 4, !tbaa !142
  %conv3 = fpext float %6 to double
  %div4 = fdiv double %conv3, 7.200000e+01
  store double %div4, double* %sy, align 8, !tbaa !196
  %7 = bitcast float* %size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  %8 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %call = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %9, i32 0) #7
  store %struct.gs_font_base_s* %call, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %10 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %10, i32 0, i32 8
  %11 = load i32, i32* %FontType, align 4, !tbaa !126
  %cmp = icmp eq i32 %11, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType6 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %12, i32 0, i32 8
  %13 = load i32, i32* %FontType6, align 4, !tbaa !126
  %cmp7 = icmp eq i32 %13, 53
  br i1 %cmp7, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %14 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType10 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %14, i32 0, i32 8
  %15 = load i32, i32* %FontType10, align 4, !tbaa !126
  %cmp11 = icmp eq i32 %15, 51
  br i1 %cmp11, label %if.then, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %16 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType14 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %16, i32 0, i32 8
  %17 = load i32, i32* %FontType14, align 4, !tbaa !126
  %cmp15 = icmp eq i32 %17, 52
  br i1 %cmp15, label %if.then, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.13
  %18 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType18 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %18, i32 0, i32 8
  %19 = load i32, i32* %FontType18, align 4, !tbaa !126
  %cmp19 = icmp eq i32 %19, 54
  br i1 %cmp19, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.17, %lor.lhs.false.13, %lor.lhs.false.9, %lor.lhs.false, %entry
  %20 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %20, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %s = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 7
  %type3 = bitcast %union.anon.5* %s to %struct.anon.8*
  %FontMatrix = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3, i32 0, i32 1
  %21 = bitcast %struct.gs_matrix_s* %orig_matrix to i8*
  %22 = bitcast %struct.gs_matrix_s* %FontMatrix to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end.27

if.else:                                          ; preds = %lor.lhs.false.17
  %23 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %cmp21 = icmp ne %struct.gs_font_base_s* %23, null
  br i1 %cmp21, label %if.then.23, label %if.else.25

if.then.23:                                       ; preds = %if.else
  %24 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %FontMatrix24 = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %24, i32 0, i32 9
  %25 = bitcast %struct.gs_matrix_s* %orig_matrix to i8*
  %26 = bitcast %struct.gs_matrix_s* %FontMatrix24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end

if.else.25:                                       ; preds = %if.else
  %27 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call26 = call i32 @pdf_font_orig_matrix(%struct.gs_font_s* %27, %struct.gs_matrix_s* %orig_matrix) #7
  br label %if.end

if.end:                                           ; preds = %if.else.25, %if.then.23
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %if.then
  %28 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #1
  %29 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %smat.addr, align 8, !tbaa !1
  %call28 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %orig_matrix, %struct.gs_matrix_s* %29) #7
  %30 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %smat.addr, align 8, !tbaa !1
  %31 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pfmat.addr, align 8, !tbaa !1
  %32 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %smat.addr, align 8, !tbaa !1
  %call29 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %30, %struct.gs_matrix_s* %31, %struct.gs_matrix_s* %32) #7
  %33 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %34, i32 0, i32 5
  %35 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %36 = bitcast %struct.gs_matrix_s* %33 to i8*
  %37 = bitcast %struct.gs_matrix_s* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 24, i32 4, i1 false), !tbaa.struct !141
  %38 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %38, i32 0, i32 5
  store float 0.000000e+00, float* %ty, align 4, !tbaa !240
  %39 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %39, i32 0, i32 4
  store float 0.000000e+00, float* %tx, align 4, !tbaa !241
  %40 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %smat.addr, align 8, !tbaa !1
  %41 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %42 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %call30 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %40, %struct.gs_matrix_s* %41, %struct.gs_matrix_s* %42) #7
  %43 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %43, i32 0, i32 2
  %44 = load float, float* %yx, align 4, !tbaa !242
  %conv31 = fpext float %44 to double
  %45 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %yx32 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %45, i32 0, i32 2
  %46 = load float, float* %yx32, align 4, !tbaa !242
  %conv33 = fpext float %46 to double
  %mul = fmul double %conv31, %conv33
  %47 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %47, i32 0, i32 3
  %48 = load float, float* %yy, align 4, !tbaa !243
  %conv34 = fpext float %48 to double
  %49 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %yy35 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %49, i32 0, i32 3
  %50 = load float, float* %yy35, align 4, !tbaa !243
  %conv36 = fpext float %50 to double
  %mul37 = fmul double %conv34, %conv36
  %add = fadd double %mul, %mul37
  %call38 = call double @sqrt(double %add) #9
  %51 = load double, double* %sy, align 8, !tbaa !196
  %div39 = fdiv double %call38, %51
  %conv40 = fptrunc double %div39 to float
  store float %conv40, float* %size, align 4, !tbaa !142
  %52 = load float, float* %size, align 4, !tbaa !142
  %conv41 = fpext float %52 to double
  %cmp42 = fcmp olt double %conv41, 1.000000e-02
  br i1 %cmp42, label %if.then.44, label %if.end.57

if.then.44:                                       ; preds = %if.end.27
  %53 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %53, i32 0, i32 0
  %54 = load float, float* %xx, align 4, !tbaa !244
  %conv45 = fpext float %54 to double
  %55 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %xx46 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %55, i32 0, i32 0
  %56 = load float, float* %xx46, align 4, !tbaa !244
  %conv47 = fpext float %56 to double
  %mul48 = fmul double %conv45, %conv47
  %57 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %57, i32 0, i32 1
  %58 = load float, float* %xy, align 4, !tbaa !245
  %conv49 = fpext float %58 to double
  %59 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %tmat.addr, align 8, !tbaa !1
  %xy50 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %59, i32 0, i32 1
  %60 = load float, float* %xy50, align 4, !tbaa !245
  %conv51 = fpext float %60 to double
  %mul52 = fmul double %conv49, %conv51
  %add53 = fadd double %mul48, %mul52
  %call54 = call double @sqrt(double %add53) #9
  %61 = load double, double* %sx, align 8, !tbaa !196
  %div55 = fdiv double %call54, %61
  %conv56 = fptrunc double %div55 to float
  store float %conv56, float* %size, align 4, !tbaa !142
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.44, %if.end.27
  %62 = load float, float* %size, align 4, !tbaa !142
  %conv58 = fpext float %62 to double
  %cmp59 = fcmp olt double %conv58, 1.000000e-02
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.57
  store float 1.000000e+00, float* %size, align 4, !tbaa !142
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.61, %if.end.57
  %63 = load float, float* %size, align 4, !tbaa !142
  %64 = bitcast float* %size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %64) #1
  %65 = bitcast double* %sy to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #1
  %66 = bitcast double* %sx to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #1
  %67 = bitcast %struct.gs_matrix_s* %orig_matrix to i8*
  call void @llvm.lifetime.end(i64 24, i8* %67) #1
  ret float %63
}

declare i32 @gs_matrix_invert(%struct.gs_matrix_s*, %struct.gs_matrix_s*) #2

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind uwtable
define i32 @pdf_update_text_state(%struct.pdf_text_process_state_s* %ppts, %struct.pdf_text_enum_s* %penum, %struct.pdf_font_resource_s* %pdfont, %struct.gs_matrix_s* %pfmat) #0 {
entry:
  %retval = alloca i32, align 4
  %ppts.addr = alloca %struct.pdf_text_process_state_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %pfmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %cpt = alloca %struct.gs_fixed_point_s, align 4
  %smat = alloca %struct.gs_matrix_s, align 4
  %tmat = alloca %struct.gs_matrix_s, align 4
  %size = alloca float, align 4
  %c_s = alloca float, align 4
  %w_s = alloca float, align 4
  %mask = alloca i32, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pt = alloca %struct.gs_point_s, align 8
  %pt23 = alloca %struct.gs_point_s, align 8
  %pis77 = alloca %struct.gs_imager_state_s*, align 8
  %font79 = alloca %struct.gs_font_s*, align 8
  %scaled_width = alloca double, align 8
  %saved_width = alloca double, align 8
  %scale = alloca double, align 8
  store %struct.pdf_text_process_state_s* %ppts, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pfmat, %struct.gs_matrix_s** %pfmat.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %1, i32 0, i32 1
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !216
  %3 = bitcast %struct.gx_device_s* %2 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %3, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 12
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  store %struct.gs_font_s* %6, %struct.gs_font_s** %font, align 8, !tbaa !1
  %7 = bitcast %struct.gs_fixed_point_s* %cpt to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  %8 = bitcast %struct.gs_matrix_s* %smat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %8) #1
  %9 = bitcast %struct.gs_matrix_s* %tmat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %9) #1
  %10 = bitcast float* %size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %11 = bitcast float* %c_s to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  store float 0.000000e+00, float* %c_s, align 4, !tbaa !142
  %12 = bitcast float* %w_s to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  store float 0.000000e+00, float* %w_s, align 4, !tbaa !142
  %13 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  store i32 0, i32* %mask, align 4, !tbaa !21
  %14 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %15 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %path = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %15, i32 0, i32 5
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !246
  %call = call i32 @gx_path_current_point(%struct.gx_path_s* %16, %struct.gs_fixed_point_s* %cpt) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %17 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %18, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.154

if.end:                                           ; preds = %entry
  %19 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %19, i32 0, i32 3
  %20 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !247
  %21 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %22 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pfmat.addr, align 8, !tbaa !1
  %23 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %23, i32 0, i32 12
  %24 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font1, align 8, !tbaa !217
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %call2 = call float @pdf_calculate_text_size(%struct.gs_imager_state_s* %20, %struct.pdf_font_resource_s* %21, %struct.gs_matrix_s* %22, %struct.gs_matrix_s* %smat, %struct.gs_matrix_s* %tmat, %struct.gs_font_s* %24, %struct.gx_device_pdf_s* %25) #7
  store float %call2, float* %size, align 4, !tbaa !142
  %26 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %26, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %27 = load i32, i32* %operation, align 4, !tbaa !248
  %and = and i32 %27, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.3, label %if.end.17

if.then.3:                                        ; preds = %if.end
  %28 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font4 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %28, i32 0, i32 12
  %29 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font4, align 8, !tbaa !217
  %WMode = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %29, i32 0, i32 16
  %30 = load i32, i32* %WMode, align 4, !tbaa !192
  %cmp5 = icmp eq i32 %30, 0
  br i1 %cmp5, label %if.then.6, label %if.else.14

if.then.6:                                        ; preds = %if.then.3
  %31 = bitcast %struct.gs_point_s* %pt to i8*
  call void @llvm.lifetime.start(i64 16, i8* %31) #1
  %32 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text7 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %32, i32 0, i32 0
  %delta_all = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text7, i32 0, i32 3
  %call8 = call i32 @transform_delta_inverse(%struct.gs_point_s* %delta_all, %struct.gs_matrix_s* %smat, %struct.gs_point_s* %pt) #7
  store i32 %call8, i32* %code, align 4, !tbaa !21
  %33 = load i32, i32* %code, align 4, !tbaa !21
  %cmp9 = icmp sge i32 %33, 0
  br i1 %cmp9, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.6
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %pt, i32 0, i32 1
  %34 = load double, double* %y, align 8, !tbaa !23
  %cmp10 = fcmp oeq double %34, 0.000000e+00
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %land.lhs.true
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %pt, i32 0, i32 0
  %35 = load double, double* %x, align 8, !tbaa !22
  %36 = load float, float* %size, align 4, !tbaa !142
  %conv = fpext float %36 to double
  %mul = fmul double %35, %conv
  %conv12 = fptrunc double %mul to float
  store float %conv12, float* %c_s, align 4, !tbaa !142
  br label %if.end.13

if.else:                                          ; preds = %land.lhs.true, %if.then.6
  %37 = load i32, i32* %mask, align 4, !tbaa !21
  %or = or i32 %37, 64
  store i32 %or, i32* %mask, align 4, !tbaa !21
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.11
  %38 = bitcast %struct.gs_point_s* %pt to i8*
  call void @llvm.lifetime.end(i64 16, i8* %38) #1
  br label %if.end.16

if.else.14:                                       ; preds = %if.then.3
  %39 = load i32, i32* %mask, align 4, !tbaa !21
  %or15 = or i32 %39, 64
  store i32 %or15, i32* %mask, align 4, !tbaa !21
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.14, %if.end.13
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %40 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text18 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %40, i32 0, i32 0
  %operation19 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text18, i32 0, i32 0
  %41 = load i32, i32* %operation19, align 4, !tbaa !248
  %and20 = and i32 %41, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.44

if.then.22:                                       ; preds = %if.end.17
  %42 = bitcast %struct.gs_point_s* %pt23 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %42) #1
  %43 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text24 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %43, i32 0, i32 0
  %delta_space = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text24, i32 0, i32 4
  %call25 = call i32 @transform_delta_inverse(%struct.gs_point_s* %delta_space, %struct.gs_matrix_s* %smat, %struct.gs_point_s* %pt23) #7
  store i32 %call25, i32* %code, align 4, !tbaa !21
  %44 = load i32, i32* %code, align 4, !tbaa !21
  %cmp26 = icmp sge i32 %44, 0
  br i1 %cmp26, label %land.lhs.true.28, label %if.else.41

land.lhs.true.28:                                 ; preds = %if.then.22
  %y29 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %pt23, i32 0, i32 1
  %45 = load double, double* %y29, align 8, !tbaa !23
  %cmp30 = fcmp oeq double %45, 0.000000e+00
  br i1 %cmp30, label %land.lhs.true.32, label %if.else.41

land.lhs.true.32:                                 ; preds = %land.lhs.true.28
  %46 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text33 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %46, i32 0, i32 0
  %space = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text33, i32 0, i32 5
  %s_char = bitcast %union.s_* %space to i64*
  %47 = load i64, i64* %s_char, align 8, !tbaa !25
  %cmp34 = icmp eq i64 %47, 32
  br i1 %cmp34, label %if.then.36, label %if.else.41

if.then.36:                                       ; preds = %land.lhs.true.32
  %x37 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %pt23, i32 0, i32 0
  %48 = load double, double* %x37, align 8, !tbaa !22
  %49 = load float, float* %size, align 4, !tbaa !142
  %conv38 = fpext float %49 to double
  %mul39 = fmul double %48, %conv38
  %conv40 = fptrunc double %mul39 to float
  store float %conv40, float* %w_s, align 4, !tbaa !142
  br label %if.end.43

if.else.41:                                       ; preds = %land.lhs.true.32, %land.lhs.true.28, %if.then.22
  %50 = load i32, i32* %mask, align 4, !tbaa !21
  %or42 = or i32 %50, 128
  store i32 %or42, i32* %mask, align 4, !tbaa !21
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.41, %if.then.36
  %51 = bitcast %struct.gs_point_s* %pt23 to i8*
  call void @llvm.lifetime.end(i64 16, i8* %51) #1
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.17
  %52 = load float, float* %size, align 4, !tbaa !142
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 0
  %53 = load float, float* %xx, align 4, !tbaa !244
  %div = fdiv float %53, %52
  store float %div, float* %xx, align 4, !tbaa !244
  %54 = load float, float* %size, align 4, !tbaa !142
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 1
  %55 = load float, float* %xy, align 4, !tbaa !245
  %div45 = fdiv float %55, %54
  store float %div45, float* %xy, align 4, !tbaa !245
  %56 = load float, float* %size, align 4, !tbaa !142
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 2
  %57 = load float, float* %yx, align 4, !tbaa !242
  %div46 = fdiv float %57, %56
  store float %div46, float* %yx, align 4, !tbaa !242
  %58 = load float, float* %size, align 4, !tbaa !142
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 3
  %59 = load float, float* %yy, align 4, !tbaa !243
  %div47 = fdiv float %59, %58
  store float %div47, float* %yy, align 4, !tbaa !243
  %x48 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %cpt, i32 0, i32 0
  %60 = load i32, i32* %x48, align 4, !tbaa !249
  %conv49 = sitofp i32 %60 to double
  %mul50 = fmul double %conv49, 3.906250e-03
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 4
  %61 = load float, float* %tx, align 4, !tbaa !241
  %conv51 = fpext float %61 to double
  %add = fadd double %conv51, %mul50
  %conv52 = fptrunc double %add to float
  store float %conv52, float* %tx, align 4, !tbaa !241
  %y53 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %cpt, i32 0, i32 1
  %62 = load i32, i32* %y53, align 4, !tbaa !250
  %conv54 = sitofp i32 %62 to double
  %mul55 = fmul double %conv54, 3.906250e-03
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 5
  %63 = load float, float* %ty, align 4, !tbaa !240
  %conv56 = fpext float %63 to double
  %add57 = fadd double %conv56, %mul55
  %conv58 = fptrunc double %add57 to float
  store float %conv58, float* %ty, align 4, !tbaa !240
  %64 = load float, float* %c_s, align 4, !tbaa !142
  %65 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %65, i32 0, i32 0
  %character_spacing = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values, i32 0, i32 0
  store float %64, float* %character_spacing, align 4, !tbaa !251
  %66 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %67 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values59 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %67, i32 0, i32 0
  %pdfont60 = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values59, i32 0, i32 1
  store %struct.pdf_font_resource_s* %66, %struct.pdf_font_resource_s** %pdfont60, align 8, !tbaa !254
  %68 = load float, float* %size, align 4, !tbaa !142
  %conv61 = fpext float %68 to double
  %69 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values62 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %69, i32 0, i32 0
  %size63 = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values62, i32 0, i32 2
  store double %conv61, double* %size63, align 8, !tbaa !255
  %70 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values64 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %70, i32 0, i32 0
  %matrix = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values64, i32 0, i32 3
  %71 = bitcast %struct.gs_matrix_s* %matrix to i8*
  %72 = bitcast %struct.gs_matrix_s* %tmat to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 24, i32 4, i1 false), !tbaa.struct !141
  %73 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis65 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %73, i32 0, i32 3
  %74 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis65, align 8, !tbaa !247
  %text_rendering_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %74, i32 0, i32 18
  %75 = load i32, i32* %text_rendering_mode, align 4, !tbaa !98
  %76 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values66 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %76, i32 0, i32 0
  %render_mode = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values66, i32 0, i32 4
  store i32 %75, i32* %render_mode, align 4, !tbaa !256
  %77 = load float, float* %w_s, align 4, !tbaa !142
  %78 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values67 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %78, i32 0, i32 0
  %word_spacing = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values67, i32 0, i32 5
  store float %77, float* %word_spacing, align 4, !tbaa !257
  %79 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %80 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %font68 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %80, i32 0, i32 1
  store %struct.gs_font_s* %79, %struct.gs_font_s** %font68, align 8, !tbaa !258
  %81 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %PaintType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %81, i32 0, i32 17
  %82 = load i32, i32* %PaintType, align 4, !tbaa !104
  %cmp69 = icmp eq i32 %82, 2
  br i1 %cmp69, label %land.lhs.true.71, label %if.else.145

land.lhs.true.71:                                 ; preds = %if.end.44
  %83 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis72 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %83, i32 0, i32 3
  %84 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis72, align 8, !tbaa !247
  %text_rendering_mode73 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %84, i32 0, i32 18
  %85 = load i32, i32* %text_rendering_mode73, align 4, !tbaa !98
  %cmp74 = icmp eq i32 %85, 0
  br i1 %cmp74, label %if.then.76, label %if.else.145

if.then.76:                                       ; preds = %land.lhs.true.71
  %86 = bitcast %struct.gs_imager_state_s** %pis77 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %86) #1
  %87 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis78 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %87, i32 0, i32 3
  %88 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis78, align 8, !tbaa !247
  store %struct.gs_imager_state_s* %88, %struct.gs_imager_state_s** %pis77, align 8, !tbaa !1
  %89 = bitcast %struct.gs_font_s** %font79 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %89) #1
  %90 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font80 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %90, i32 0, i32 12
  %91 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font80, align 8, !tbaa !217
  store %struct.gs_font_s* %91, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %92 = bitcast double* %scaled_width to i8*
  call void @llvm.lifetime.start(i64 8, i8* %92) #1
  %93 = load %struct.gs_font_s*, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %StrokeWidth = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %93, i32 0, i32 18
  %94 = load float, float* %StrokeWidth, align 4, !tbaa !259
  %cmp81 = fcmp une float %94, 0.000000e+00
  br i1 %cmp81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.76
  %95 = load %struct.gs_font_s*, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %StrokeWidth83 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %95, i32 0, i32 18
  %96 = load float, float* %StrokeWidth83, align 4, !tbaa !259
  %conv84 = fpext float %96 to double
  br label %cond.end

cond.false:                                       ; preds = %if.then.76
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv84, %cond.true ], [ 1.000000e-03, %cond.false ]
  store double %cond, double* %scaled_width, align 8, !tbaa !196
  %97 = bitcast double* %saved_width to i8*
  call void @llvm.lifetime.start(i64 8, i8* %97) #1
  %98 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis77, align 8, !tbaa !1
  %line_params = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %98, i32 0, i32 3
  %half_width = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params, i32 0, i32 0
  %99 = load float, float* %half_width, align 4, !tbaa !260
  %conv85 = fpext float %99 to double
  store double %conv85, double* %saved_width, align 8, !tbaa !196
  %100 = bitcast double* %scale to i8*
  call void @llvm.lifetime.start(i64 8, i8* %100) #1
  %101 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %101, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 1
  %102 = load float, float* %arrayidx, align 4, !tbaa !142
  %conv86 = fpext float %102 to double
  %div87 = fdiv double 7.200000e+01, %conv86
  store double %div87, double* %scale, align 8, !tbaa !196
  %103 = load %struct.gs_font_s*, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %103, i32 0, i32 9
  %yy88 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %FontMatrix, i32 0, i32 3
  %104 = load float, float* %yy88, align 4, !tbaa !150
  %cmp89 = fcmp une float %104, 0.000000e+00
  br i1 %cmp89, label %if.then.91, label %if.else.99

if.then.91:                                       ; preds = %cond.end
  %105 = load %struct.gs_font_s*, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %orig_FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %105, i32 0, i32 10
  %yy92 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix, i32 0, i32 3
  %106 = load float, float* %yy92, align 4, !tbaa !146
  %conv93 = fpext float %106 to double
  %call94 = call double @fabs(double %conv93) #8
  %107 = load float, float* %size, align 4, !tbaa !142
  %conv95 = fpext float %107 to double
  %mul96 = fmul double %call94, %conv95
  %108 = load double, double* %scale, align 8, !tbaa !196
  %mul97 = fmul double %mul96, %108
  %109 = load double, double* %scaled_width, align 8, !tbaa !196
  %mul98 = fmul double %109, %mul97
  store double %mul98, double* %scaled_width, align 8, !tbaa !196
  br label %if.end.108

if.else.99:                                       ; preds = %cond.end
  %110 = load %struct.gs_font_s*, %struct.gs_font_s** %font79, align 8, !tbaa !1
  %orig_FontMatrix100 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %110, i32 0, i32 10
  %xy101 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %orig_FontMatrix100, i32 0, i32 1
  %111 = load float, float* %xy101, align 4, !tbaa !144
  %conv102 = fpext float %111 to double
  %call103 = call double @fabs(double %conv102) #8
  %112 = load float, float* %size, align 4, !tbaa !142
  %conv104 = fpext float %112 to double
  %mul105 = fmul double %call103, %conv104
  %113 = load double, double* %scale, align 8, !tbaa !196
  %mul106 = fmul double %mul105, %113
  %114 = load double, double* %scaled_width, align 8, !tbaa !196
  %mul107 = fmul double %114, %mul106
  store double %mul107, double* %scaled_width, align 8, !tbaa !196
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.99, %if.then.91
  %yy109 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 3
  %115 = load float, float* %yy109, align 4, !tbaa !243
  %cmp110 = fcmp une float %115, 0.000000e+00
  br i1 %cmp110, label %if.then.112, label %if.else.116

if.then.112:                                      ; preds = %if.end.108
  %yy113 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 3
  %116 = load float, float* %yy113, align 4, !tbaa !243
  %conv114 = fpext float %116 to double
  %117 = load double, double* %scaled_width, align 8, !tbaa !196
  %mul115 = fmul double %117, %conv114
  store double %mul115, double* %scaled_width, align 8, !tbaa !196
  br label %if.end.120

if.else.116:                                      ; preds = %if.end.108
  %xy117 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %tmat, i32 0, i32 1
  %118 = load float, float* %xy117, align 4, !tbaa !245
  %conv118 = fpext float %118 to double
  %119 = load double, double* %scaled_width, align 8, !tbaa !196
  %mul119 = fmul double %119, %conv118
  store double %mul119, double* %scaled_width, align 8, !tbaa !196
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.116, %if.then.112
  %120 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values121 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %120, i32 0, i32 0
  %render_mode122 = getelementptr inbounds %struct.pdf_text_state_values_s, %struct.pdf_text_state_values_s* %values121, i32 0, i32 4
  store i32 1, i32* %render_mode122, align 4, !tbaa !256
  %121 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %122 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis77, align 8, !tbaa !1
  %123 = load float, float* %size, align 4, !tbaa !142
  %124 = load double, double* %scaled_width, align 8, !tbaa !196
  %125 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values123 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %125, i32 0, i32 0
  %call124 = call i32 @pdf_set_PaintType0_params(%struct.gx_device_pdf_s* %121, %struct.gs_imager_state_s* %122, float %123, double %124, %struct.pdf_text_state_values_s* %values123) #7
  store i32 %call124, i32* %code, align 4, !tbaa !21
  %126 = load i32, i32* %code, align 4, !tbaa !21
  %cmp125 = icmp slt i32 %126, 0
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.end.120
  %127 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %127, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.128:                                       ; preds = %if.end.120
  %128 = load double, double* %scaled_width, align 8, !tbaa !196
  %div129 = fdiv double %128, 2.000000e+00
  %conv130 = fptrunc double %div129 to float
  %129 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis77, align 8, !tbaa !1
  %line_params131 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %129, i32 0, i32 3
  %half_width132 = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params131, i32 0, i32 0
  store float %conv130, float* %half_width132, align 4, !tbaa !260
  %130 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %131 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %132 = bitcast %struct.pdf_text_enum_s* %131 to %struct.gs_text_enum_s*
  %133 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %call133 = call i32 @pdf_set_text_process_state(%struct.gx_device_pdf_s* %130, %struct.gs_text_enum_s* %132, %struct.pdf_text_process_state_s* %133) #7
  store i32 %call133, i32* %code, align 4, !tbaa !21
  %134 = load i32, i32* %code, align 4, !tbaa !21
  %cmp134 = icmp slt i32 %134, 0
  br i1 %cmp134, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %if.end.128
  %135 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %135, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.137:                                       ; preds = %if.end.128
  %136 = load double, double* %saved_width, align 8, !tbaa !196
  %conv138 = fptrunc double %136 to float
  %137 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis77, align 8, !tbaa !1
  %line_params139 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %137, i32 0, i32 3
  %half_width140 = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params139, i32 0, i32 0
  store float %conv138, float* %half_width140, align 4, !tbaa !260
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.137, %if.then.136, %if.then.127
  %138 = bitcast double* %scale to i8*
  call void @llvm.lifetime.end(i64 8, i8* %138) #1
  %139 = bitcast double* %saved_width to i8*
  call void @llvm.lifetime.end(i64 8, i8* %139) #1
  %140 = bitcast double* %scaled_width to i8*
  call void @llvm.lifetime.end(i64 8, i8* %140) #1
  %141 = bitcast %struct.gs_font_s** %font79 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %141) #1
  %142 = bitcast %struct.gs_imager_state_s** %pis77 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %142) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.154 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.147

if.else.145:                                      ; preds = %land.lhs.true.71, %if.end.44
  %143 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %144 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %145 = bitcast %struct.pdf_text_enum_s* %144 to %struct.gs_text_enum_s*
  %146 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %call146 = call i32 @pdf_set_text_process_state(%struct.gx_device_pdf_s* %143, %struct.gs_text_enum_s* %145, %struct.pdf_text_process_state_s* %146) #7
  store i32 %call146, i32* %code, align 4, !tbaa !21
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.145, %cleanup.cont
  %147 = load i32, i32* %code, align 4, !tbaa !21
  %cmp148 = icmp slt i32 %147, 0
  br i1 %cmp148, label %cond.true.150, label %cond.false.151

cond.true.150:                                    ; preds = %if.end.147
  %148 = load i32, i32* %code, align 4, !tbaa !21
  br label %cond.end.152

cond.false.151:                                   ; preds = %if.end.147
  %149 = load i32, i32* %mask, align 4, !tbaa !21
  br label %cond.end.152

cond.end.152:                                     ; preds = %cond.false.151, %cond.true.150
  %cond153 = phi i32 [ %148, %cond.true.150 ], [ %149, %cond.false.151 ]
  store i32 %cond153, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.154

cleanup.154:                                      ; preds = %cond.end.152, %cleanup, %if.then
  %150 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %150) #1
  %151 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.end(i64 4, i8* %151) #1
  %152 = bitcast float* %w_s to i8*
  call void @llvm.lifetime.end(i64 4, i8* %152) #1
  %153 = bitcast float* %c_s to i8*
  call void @llvm.lifetime.end(i64 4, i8* %153) #1
  %154 = bitcast float* %size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %154) #1
  %155 = bitcast %struct.gs_matrix_s* %tmat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %155) #1
  %156 = bitcast %struct.gs_matrix_s* %smat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %156) #1
  %157 = bitcast %struct.gs_fixed_point_s* %cpt to i8*
  call void @llvm.lifetime.end(i64 8, i8* %157) #1
  %158 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %158) #1
  %159 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %159) #1
  %160 = load i32, i32* %retval
  ret i32 %160
}

declare i32 @gx_path_current_point(%struct.gx_path_s*, %struct.gs_fixed_point_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @transform_delta_inverse(%struct.gs_point_s* %pdelta, %struct.gs_matrix_s* %pmat, %struct.gs_point_s* %ppt) #0 {
entry:
  %retval = alloca i32, align 4
  %pdelta.addr = alloca %struct.gs_point_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %ppt.addr = alloca %struct.gs_point_s*, align 8
  %code = alloca i32, align 4
  %delta = alloca %struct.gs_point_s, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_point_s* %pdelta, %struct.gs_point_s** %pdelta.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  store %struct.gs_point_s* %ppt, %struct.gs_point_s** %ppt.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gs_point_s*, %struct.gs_point_s** %pdelta.addr, align 8, !tbaa !1
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1, i32 0, i32 0
  %2 = load double, double* %x, align 8, !tbaa !22
  %3 = load %struct.gs_point_s*, %struct.gs_point_s** %pdelta.addr, align 8, !tbaa !1
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %3, i32 0, i32 1
  %4 = load double, double* %y, align 8, !tbaa !23
  %5 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %6 = load %struct.gs_point_s*, %struct.gs_point_s** %ppt.addr, align 8, !tbaa !1
  %call = call i32 @gs_distance_transform_inverse(double %2, double %4, %struct.gs_matrix_s* %5, %struct.gs_point_s* %6) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %7 = bitcast %struct.gs_point_s* %delta to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #1
  %8 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %9, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %10 = load %struct.gs_point_s*, %struct.gs_point_s** %ppt.addr, align 8, !tbaa !1
  %y1 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 1
  %11 = load double, double* %y1, align 8, !tbaa !23
  %cmp2 = fcmp oeq double %11, 0.000000e+00
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %12 = load %struct.gs_point_s*, %struct.gs_point_s** %ppt.addr, align 8, !tbaa !1
  %x5 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %12, i32 0, i32 0
  %13 = load double, double* %x5, align 8, !tbaa !22
  %14 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call6 = call i32 @gs_distance_transform(double %13, double 0.000000e+00, %struct.gs_matrix_s* %14, %struct.gs_point_s* %delta) #7
  store i32 %call6, i32* %code, align 4, !tbaa !21
  %15 = load i32, i32* %code, align 4, !tbaa !21
  %cmp7 = icmp slt i32 %15, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.4
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.9:                                         ; preds = %if.end.4
  %x10 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %delta, i32 0, i32 0
  %16 = load double, double* %x10, align 8, !tbaa !22
  %17 = load %struct.gs_point_s*, %struct.gs_point_s** %pdelta.addr, align 8, !tbaa !1
  %x11 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %17, i32 0, i32 0
  %18 = load double, double* %x11, align 8, !tbaa !22
  %sub = fsub double %16, %18
  %call12 = call double @fabs(double %sub) #8
  %cmp13 = fcmp olt double %call12, 1.000000e-02
  br i1 %cmp13, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %if.end.9
  %y14 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %delta, i32 0, i32 1
  %19 = load double, double* %y14, align 8, !tbaa !23
  %20 = load %struct.gs_point_s*, %struct.gs_point_s** %pdelta.addr, align 8, !tbaa !1
  %y15 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %20, i32 0, i32 1
  %21 = load double, double* %y15, align 8, !tbaa !23
  %sub16 = fsub double %19, %21
  %call17 = call double @fabs(double %sub16) #8
  %cmp18 = fcmp olt double %call17, 1.000000e-02
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %land.lhs.true
  %22 = load %struct.gs_point_s*, %struct.gs_point_s** %ppt.addr, align 8, !tbaa !1
  %y20 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %22, i32 0, i32 1
  store double 0.000000e+00, double* %y20, align 8, !tbaa !23
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %land.lhs.true, %if.end.9
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.21, %if.then.8, %if.then.3, %if.then
  %23 = bitcast %struct.gs_point_s* %delta to i8*
  call void @llvm.lifetime.end(i64 16, i8* %23) #1
  %24 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #1
  %25 = load i32, i32* %retval
  ret i32 %25
}

declare i32 @pdf_set_PaintType0_params(%struct.gx_device_pdf_s*, %struct.gs_imager_state_s*, float, double, %struct.pdf_text_state_values_s*) #2

; Function Attrs: nounwind uwtable
define i32 @pdf_set_text_process_state(%struct.gx_device_pdf_s* %pdev, %struct.gs_text_enum_s* %pte, %struct.pdf_text_process_state_s* %ppts) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %ppts.addr = alloca %struct.pdf_text_process_state_s*, align 8
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %save_width = alloca float, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.pdf_text_process_state_s* %ppts, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %0 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %1 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %1, i32 0, i32 0
  %call = call i32 @pdf_render_mode_uses_stroke(%struct.gx_device_pdf_s* %0, %struct.pdf_text_state_values_s* %values) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.30

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  %3 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis1 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %3, i32 0, i32 3
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis1, align 8, !tbaa !261
  store %struct.gs_imager_state_s* %4, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %5 = bitcast float* %save_width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %line_params = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 3
  %half_width = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params, i32 0, i32 0
  %7 = load float, float* %half_width, align 4, !tbaa !260
  store float %7, float* %save_width, align 4, !tbaa !142
  %8 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #1
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %context = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 156
  %10 = load i32, i32* %context, align 4, !tbaa !262
  %cmp = icmp eq i32 %10, 3
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.then
  %11 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call3 = call i32 @sync_text_state(%struct.gx_device_pdf_s* %11) #7
  store i32 %call3, i32* %code, align 4, !tbaa !21
  %12 = load i32, i32* %code, align 4, !tbaa !21
  %cmp4 = icmp slt i32 %12, 0
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.2
  %13 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then.2
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %14 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call7 = call i32 @pdf_open_contents(%struct.gx_device_pdf_s* %14, i32 1) #7
  store i32 %call7, i32* %code, align 4, !tbaa !21
  %15 = load i32, i32* %code, align 4, !tbaa !21
  %cmp8 = icmp slt i32 %15, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  %16 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.10:                                        ; preds = %if.end.6
  %17 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %call11 = call i32 @pdf_prepare_stroke(%struct.gx_device_pdf_s* %17, %struct.gs_imager_state_s* %18) #7
  store i32 %call11, i32* %code, align 4, !tbaa !21
  %19 = load i32, i32* %code, align 4, !tbaa !21
  %cmp12 = icmp sge i32 %19, 0
  br i1 %cmp12, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %if.end.10
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %21 = bitcast %struct.gx_device_pdf_s* %20 to %struct.gx_device_vector_s*
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %call14 = call i32 @gdev_vector_prepare_stroke(%struct.gx_device_vector_s* %21, %struct.gs_imager_state_s* %22, %struct.gx_stroke_params_s* null, %struct.gx_device_color_s* null, double 1.000000e+00) #7
  store i32 %call14, i32* %code, align 4, !tbaa !21
  %23 = load i32, i32* %code, align 4, !tbaa !21
  %cmp15 = icmp slt i32 %23, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.13
  %24 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %24, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.17:                                        ; preds = %if.then.13
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.10
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call19 = call i32 @pdf_open_contents(%struct.gx_device_pdf_s* %25, i32 3) #7
  store i32 %call19, i32* %code, align 4, !tbaa !21
  %26 = load i32, i32* %code, align 4, !tbaa !21
  %cmp20 = icmp slt i32 %26, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.18
  %27 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.22:                                        ; preds = %if.end.18
  %28 = load float, float* %save_width, align 4, !tbaa !142
  %29 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %line_params23 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %29, i32 0, i32 3
  %half_width24 = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params23, i32 0, i32 0
  store float %28, float* %half_width24, align 4, !tbaa !260
  %30 = load i32, i32* %code, align 4, !tbaa !21
  %cmp25 = icmp slt i32 %30, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.22
  %31 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.27:                                        ; preds = %if.end.22
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.27, %if.then.26, %if.then.21, %if.then.16, %if.then.9, %if.then.5
  %32 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %32) #1
  %33 = bitcast float* %save_width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %33) #1
  %34 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.30

if.end.30:                                        ; preds = %cleanup.cont, %entry
  %35 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %36 = load %struct.pdf_text_process_state_s*, %struct.pdf_text_process_state_s** %ppts.addr, align 8, !tbaa !1
  %values31 = getelementptr inbounds %struct.pdf_text_process_state_s, %struct.pdf_text_process_state_s* %36, i32 0, i32 0
  %call32 = call i32 @pdf_set_text_state_values(%struct.gx_device_pdf_s* %35, %struct.pdf_text_state_values_s* %values31) #7
  store i32 %call32, i32* %retval
  br label %return

return:                                           ; preds = %if.end.30, %cleanup
  %37 = load i32, i32* %retval
  ret i32 %37

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i32 @pdf_render_mode_uses_stroke(%struct.gx_device_pdf_s*, %struct.pdf_text_state_values_s*) #2

declare i32 @sync_text_state(%struct.gx_device_pdf_s*) #2

declare i32 @pdf_open_contents(%struct.gx_device_pdf_s*, i32) #2

declare i32 @pdf_prepare_stroke(%struct.gx_device_pdf_s*, %struct.gs_imager_state_s*) #2

declare i32 @gdev_vector_prepare_stroke(%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, double) #2

declare i32 @pdf_set_text_state_values(%struct.gx_device_pdf_s*, %struct.pdf_text_state_values_s*) #2

; Function Attrs: nounwind uwtable
define i32 @pdf_glyph_widths(%struct.pdf_font_resource_s* %pdfont, i32 %wmode, i64 %glyph, %struct.gs_font_s* %orig_font, %struct.pdf_glyph_widths_s* %pwidths, double* %cdevproc_result) #0 {
entry:
  %retval = alloca i32, align 4
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %wmode.addr = alloca i32, align 4
  %glyph.addr = alloca i64, align 8
  %orig_font.addr = alloca %struct.gs_font_s*, align 8
  %pwidths.addr = alloca %struct.pdf_glyph_widths_s*, align 8
  %cdevproc_result.addr = alloca double*, align 8
  %cfont = alloca %struct.gs_font_base_s*, align 8
  %ofont = alloca %struct.gs_font_s*, align 8
  %info = alloca %struct.gs_glyph_info_s, align 8
  %scale_c = alloca %struct.gs_matrix_s, align 4
  %scale_o = alloca %struct.gs_matrix_s, align 4
  %code = alloca i32, align 4
  %rcode = alloca i32, align 4
  %v = alloca %struct.gs_point_s, align 8
  %allow_cdevproc_callout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %index = alloca i32, align 4
  %notdef_glyph = alloca i64, align 8
  %widths1 = alloca %struct.pdf_glyph_widths_s, align 8
  %xy145 = alloca %struct.gs_point_s, align 8
  %widths1155 = alloca %struct.pdf_glyph_widths_s, align 8
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store i32 %wmode, i32* %wmode.addr, align 4, !tbaa !21
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  store %struct.gs_font_s* %orig_font, %struct.gs_font_s** %orig_font.addr, align 8, !tbaa !1
  store %struct.pdf_glyph_widths_s* %pwidths, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  store double* %cdevproc_result, double** %cdevproc_result.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %call = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %1, i32 0) #7
  store %struct.gs_font_base_s* %call, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %2 = bitcast %struct.gs_font_s** %ofont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  %3 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %3, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %4 = bitcast %struct.gs_glyph_info_s* %info to i8*
  call void @llvm.lifetime.start(i64 104, i8* %4) #1
  %5 = bitcast %struct.gs_matrix_s* %scale_c to i8*
  call void @llvm.lifetime.start(i64 24, i8* %5) #1
  %6 = bitcast %struct.gs_matrix_s* %scale_o to i8*
  call void @llvm.lifetime.start(i64 24, i8* %6) #1
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  %8 = bitcast i32* %rcode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #1
  store i32 0, i32* %rcode, align 4, !tbaa !21
  %9 = bitcast %struct.gs_point_s* %v to i8*
  call void @llvm.lifetime.start(i64 16, i8* %9) #1
  %10 = bitcast i32* %allow_cdevproc_callout to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %11, i32 0, i32 11
  %12 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %12, 11
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font.addr, align 8, !tbaa !1
  %FontType1 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType1, align 4, !tbaa !74
  %cmp2 = icmp eq i32 %14, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %15 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %cond = select i1 %15, i32 256, i32 0
  store i32 %cond, i32* %allow_cdevproc_callout, align 4, !tbaa !21
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %FontType3 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %16, i32 0, i32 11
  %17 = load i32, i32* %FontType3, align 4, !tbaa !74
  %cmp4 = icmp eq i32 %17, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end:                                           ; preds = %lor.end
  %18 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %19 = bitcast %struct.gs_font_base_s* %18 to %struct.gs_font_s*
  %20 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %call5 = call i32 @glyph_orig_matrix(%struct.gs_font_s* %19, i64 %20, %struct.gs_matrix_s* %scale_c) #7
  store i32 %call5, i32* %code, align 4, !tbaa !21
  %21 = load i32, i32* %code, align 4, !tbaa !21
  %cmp6 = icmp slt i32 %21, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %22 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %22, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.8:                                         ; preds = %if.end
  %23 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %24 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %call9 = call i32 @glyph_orig_matrix(%struct.gs_font_s* %23, i64 %24, %struct.gs_matrix_s* %scale_o) #7
  store i32 %call9, i32* %code, align 4, !tbaa !21
  %25 = load i32, i32* %code, align 4, !tbaa !21
  %cmp10 = icmp slt i32 %25, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %26 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %26, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.12:                                        ; preds = %if.end.8
  %call13 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %scale_c, double 1.000000e+03, double 1.000000e+03, %struct.gs_matrix_s* %scale_c) #7
  %call14 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %scale_o, double 1.000000e+03, double 1.000000e+03, %struct.gs_matrix_s* %scale_o) #7
  %27 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %27, i32 0, i32 0
  %v15 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width, i32 0, i32 2
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v15, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8, !tbaa !263
  %28 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width16 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %28, i32 0, i32 0
  %v17 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width16, i32 0, i32 2
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v17, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !264
  %29 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %29, i32 0, i32 1
  %v18 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width, i32 0, i32 2
  %y19 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v18, i32 0, i32 1
  store double 0.000000e+00, double* %y19, align 8, !tbaa !265
  %30 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width20 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %30, i32 0, i32 1
  %v21 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width20, i32 0, i32 2
  %x22 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v21, i32 0, i32 0
  store double 0.000000e+00, double* %x22, align 8, !tbaa !266
  %31 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width23 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %31, i32 0, i32 1
  %xy = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width23, i32 0, i32 1
  %y24 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy, i32 0, i32 1
  store double 0.000000e+00, double* %y24, align 8, !tbaa !267
  %32 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width25 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %32, i32 0, i32 1
  %xy26 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width25, i32 0, i32 1
  %x27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy26, i32 0, i32 0
  store double 0.000000e+00, double* %x27, align 8, !tbaa !268
  %33 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width28 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %33, i32 0, i32 1
  %w = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width28, i32 0, i32 0
  store double 0.000000e+00, double* %w, align 8, !tbaa !269
  %34 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %replaced_v = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %34, i32 0, i32 2
  store i32 0, i32* %replaced_v, align 4, !tbaa !270
  %35 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %ignore_wmode = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %35, i32 0, i32 3
  store i32 0, i32* %ignore_wmode, align 4, !tbaa !271
  %36 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %cmp29 = icmp eq i64 %36, 2147483647
  br i1 %cmp29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.12
  %37 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %38 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %39 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %call31 = call i32 @get_missing_width(%struct.gs_font_base_s* %37, i32 %38, %struct.gs_matrix_s* %scale_c, %struct.pdf_glyph_widths_s* %39) #7
  store i32 %call31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.32:                                        ; preds = %if.end.12
  %40 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %40, i32 0, i32 20
  %glyph_info = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 7
  %41 = load i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)** %glyph_info, align 8, !tbaa !272
  %42 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %43 = bitcast %struct.gs_font_base_s* %42 to %struct.gs_font_s*
  %44 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %45 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl = shl i32 1, %45
  %or = or i32 1, %shl
  %or33 = or i32 %or, 32
  %46 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl34 = shl i32 64, %46
  %or35 = or i32 %or33, %shl34
  %call36 = call i32 %41(%struct.gs_font_s* %43, i64 %44, %struct.gs_matrix_s* null, i32 %or35, %struct.gs_glyph_info_s* %info) #7
  store i32 %call36, i32* %code, align 4, !tbaa !21
  %47 = load i32, i32* %code, align 4, !tbaa !21
  %cmp37 = icmp eq i32 %47, -21
  br i1 %cmp37, label %if.then.39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.32
  %members = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %48 = load i32, i32* %members, align 4, !tbaa !273
  %49 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl38 = shl i32 1, %49
  %and = and i32 %48, %shl38
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else.111, label %if.then.39

if.then.39:                                       ; preds = %lor.lhs.false, %if.end.32
  %50 = load i32, i32* %code, align 4, !tbaa !21
  %cmp40 = icmp eq i32 %50, -21
  br i1 %cmp40, label %land.lhs.true, label %if.else.82

land.lhs.true:                                    ; preds = %if.then.39
  %51 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %FontType41 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %51, i32 0, i32 11
  %52 = load i32, i32* %FontType41, align 4, !tbaa !74
  %cmp42 = icmp eq i32 %52, 1
  br i1 %cmp42, label %if.then.46, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %land.lhs.true
  %53 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %FontType44 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %53, i32 0, i32 11
  %54 = load i32, i32* %FontType44, align 4, !tbaa !74
  %cmp45 = icmp eq i32 %54, 2
  br i1 %cmp45, label %if.then.46, label %if.else.82

if.then.46:                                       ; preds = %lor.lhs.false.43, %land.lhs.true
  %55 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %55) #1
  %56 = bitcast i64* %notdef_glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %56) #1
  store i32 0, i32* %index, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %if.end.80, %if.then.46
  %57 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %procs47 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %57, i32 0, i32 20
  %enumerate_glyph = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs47, i32 0, i32 6
  %58 = load i32 (%struct.gs_font_s*, i32*, i32, i64*)*, i32 (%struct.gs_font_s*, i32*, i32, i64*)** %enumerate_glyph, align 8, !tbaa !275
  %59 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %call48 = call i32 %58(%struct.gs_font_s* %59, i32* %index, i32 0, i64* %notdef_glyph) #7
  %cmp49 = icmp sge i32 %call48, 0
  br i1 %cmp49, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %60 = load i32, i32* %index, align 4, !tbaa !21
  %cmp50 = icmp ne i32 %60, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %61 = phi i1 [ false, %for.cond ], [ %cmp50, %land.rhs ]
  br i1 %61, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %62 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %63 = bitcast %struct.gs_font_s* %62 to %struct.gs_font_base_s*
  %64 = load i64, i64* %notdef_glyph, align 8, !tbaa !25
  %call51 = call i32 @gs_font_glyph_is_notdef(%struct.gs_font_base_s* %63, i64 %64) #7
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.then.53, label %if.end.80

if.then.53:                                       ; preds = %for.body
  %65 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %procs54 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %65, i32 0, i32 20
  %glyph_info55 = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs54, i32 0, i32 7
  %66 = load i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)** %glyph_info55, align 8, !tbaa !276
  %67 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %68 = load i64, i64* %notdef_glyph, align 8, !tbaa !25
  %69 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl56 = shl i32 1, %69
  %call57 = call i32 %66(%struct.gs_font_s* %67, i64 %68, %struct.gs_matrix_s* null, i32 %shl56, %struct.gs_glyph_info_s* %info) #7
  store i32 %call57, i32* %code, align 4, !tbaa !21
  %70 = load i32, i32* %code, align 4, !tbaa !21
  %cmp58 = icmp slt i32 %70, 0
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.53
  %71 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %71, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.60:                                        ; preds = %if.then.53
  %72 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width61 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %72, i32 0, i32 0
  %73 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %call62 = call i32 @store_glyph_width(%struct.pdf_glyph_width_s* %Width61, i32 %73, %struct.gs_matrix_s* %scale_c, %struct.gs_glyph_info_s* %info) #7
  store i32 %call62, i32* %code, align 4, !tbaa !21
  %74 = load i32, i32* %code, align 4, !tbaa !21
  %cmp63 = icmp slt i32 %74, 0
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.60
  %75 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %75, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.65:                                        ; preds = %if.end.60
  %76 = load i32, i32* %code, align 4, !tbaa !21
  %77 = load i32, i32* %rcode, align 4, !tbaa !21
  %or66 = or i32 %77, %76
  store i32 %or66, i32* %rcode, align 4, !tbaa !21
  %members67 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %78 = load i32, i32* %members67, align 4, !tbaa !273
  %79 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl68 = shl i32 64, %79
  %and69 = and i32 %78, %shl68
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.then.71, label %if.else

if.then.71:                                       ; preds = %if.end.65
  %v72 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %x73 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v72, i32 0, i32 0
  %80 = load double, double* %x73, align 8, !tbaa !277
  %v74 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %y75 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v74, i32 0, i32 1
  %81 = load double, double* %y75, align 8, !tbaa !278
  %call76 = call i32 @gs_distance_transform(double %80, double %81, %struct.gs_matrix_s* %scale_c, %struct.gs_point_s* %v) #7
  br label %if.end.79

if.else:                                          ; preds = %if.end.65
  %y77 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 1
  store double 0.000000e+00, double* %y77, align 8, !tbaa !23
  %x78 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double 0.000000e+00, double* %x78, align 8, !tbaa !22
  br label %if.end.79

if.end.79:                                        ; preds = %if.else, %if.then.71
  br label %for.end

if.end.80:                                        ; preds = %for.body
  br label %for.cond

for.end:                                          ; preds = %if.end.79, %land.end
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then.64, %if.then.59
  %82 = bitcast i64* %notdef_glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %82) #1
  %83 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.287 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.110

if.else.82:                                       ; preds = %lor.lhs.false.43, %if.then.39
  %84 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %85 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %86 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %call83 = call i32 @get_missing_width(%struct.gs_font_base_s* %84, i32 %85, %struct.gs_matrix_s* %scale_c, %struct.pdf_glyph_widths_s* %86) #7
  store i32 %call83, i32* %code, align 4, !tbaa !21
  %87 = load i32, i32* %code, align 4, !tbaa !21
  %cmp84 = icmp slt i32 %87, 0
  br i1 %cmp84, label %if.then.85, label %if.else.87

if.then.85:                                       ; preds = %if.else.82
  %y86 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 1
  store double 0.000000e+00, double* %y86, align 8, !tbaa !23
  br label %if.end.92

if.else.87:                                       ; preds = %if.else.82
  %88 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width88 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %88, i32 0, i32 0
  %v89 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width88, i32 0, i32 2
  %y90 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v89, i32 0, i32 1
  %89 = load double, double* %y90, align 8, !tbaa !263
  %y91 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 1
  store double %89, double* %y91, align 8, !tbaa !23
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.87, %if.then.85
  %90 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool93 = icmp ne i32 %90, 0
  br i1 %tobool93, label %if.then.94, label %if.else.104

if.then.94:                                       ; preds = %if.end.92
  %91 = bitcast %struct.pdf_glyph_widths_s* %widths1 to i8*
  call void @llvm.lifetime.start(i64 120, i8* %91) #1
  %92 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %call95 = call i32 @get_missing_width(%struct.gs_font_base_s* %92, i32 0, %struct.gs_matrix_s* %scale_c, %struct.pdf_glyph_widths_s* %widths1) #7
  %cmp96 = icmp slt i32 %call95, 0
  br i1 %cmp96, label %if.then.97, label %if.else.99

if.then.97:                                       ; preds = %if.then.94
  %x98 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double 0.000000e+00, double* %x98, align 8, !tbaa !22
  br label %if.end.103

if.else.99:                                       ; preds = %if.then.94
  %Width100 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %widths1, i32 0, i32 0
  %w101 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width100, i32 0, i32 0
  %93 = load double, double* %w101, align 8, !tbaa !193
  %div = fdiv double %93, 2.000000e+00
  %x102 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double %div, double* %x102, align 8, !tbaa !22
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.99, %if.then.97
  %94 = bitcast %struct.pdf_glyph_widths_s* %widths1 to i8*
  call void @llvm.lifetime.end(i64 120, i8* %94) #1
  br label %if.end.109

if.else.104:                                      ; preds = %if.end.92
  %95 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width105 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %95, i32 0, i32 0
  %v106 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width105, i32 0, i32 2
  %x107 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v106, i32 0, i32 0
  %96 = load double, double* %x107, align 8, !tbaa !264
  %x108 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double %96, double* %x108, align 8, !tbaa !22
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.104, %if.end.103
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %cleanup.cont
  br label %if.end.169

if.else.111:                                      ; preds = %lor.lhs.false
  %97 = load i32, i32* %code, align 4, !tbaa !21
  %cmp112 = icmp slt i32 %97, 0
  br i1 %cmp112, label %if.then.113, label %if.else.114

if.then.113:                                      ; preds = %if.else.111
  %98 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %98, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.else.114:                                      ; preds = %if.else.111
  %99 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width115 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %99, i32 0, i32 0
  %100 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %call116 = call i32 @store_glyph_width(%struct.pdf_glyph_width_s* %Width115, i32 %100, %struct.gs_matrix_s* %scale_c, %struct.gs_glyph_info_s* %info) #7
  store i32 %call116, i32* %code, align 4, !tbaa !21
  %101 = load i32, i32* %code, align 4, !tbaa !21
  %cmp117 = icmp slt i32 %101, 0
  br i1 %cmp117, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.else.114
  %102 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %102, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.119:                                       ; preds = %if.else.114
  %103 = load i32, i32* %code, align 4, !tbaa !21
  %104 = load i32, i32* %rcode, align 4, !tbaa !21
  %or120 = or i32 %104, %103
  store i32 %or120, i32* %rcode, align 4, !tbaa !21
  %members121 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %105 = load i32, i32* %members121, align 4, !tbaa !273
  %106 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl122 = shl i32 64, %106
  %and123 = and i32 %105, %shl122
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then.125, label %if.else.131

if.then.125:                                      ; preds = %if.end.119
  %v126 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %x127 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v126, i32 0, i32 0
  %107 = load double, double* %x127, align 8, !tbaa !277
  %v128 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %y129 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v128, i32 0, i32 1
  %108 = load double, double* %y129, align 8, !tbaa !278
  %call130 = call i32 @gs_distance_transform(double %107, double %108, %struct.gs_matrix_s* %scale_c, %struct.gs_point_s* %v) #7
  br label %if.end.134

if.else.131:                                      ; preds = %if.end.119
  %y132 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 1
  store double 0.000000e+00, double* %y132, align 8, !tbaa !23
  %x133 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double 0.000000e+00, double* %x133, align 8, !tbaa !22
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.131, %if.then.125
  %109 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool135 = icmp ne i32 %109, 0
  br i1 %tobool135, label %land.lhs.true.136, label %if.end.167

land.lhs.true.136:                                ; preds = %if.end.134
  %110 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %call137 = call i32 @pdf_is_CID_font(%struct.gs_font_s* %110) #7
  %tobool138 = icmp ne i32 %call137, 0
  br i1 %tobool138, label %if.then.139, label %if.end.167

if.then.139:                                      ; preds = %land.lhs.true.136
  %members140 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %111 = load i32, i32* %members140, align 4, !tbaa !273
  %112 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl141 = shl i32 1, %112
  %and142 = and i32 %111, %shl141
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %if.then.144, label %if.else.154

if.then.144:                                      ; preds = %if.then.139
  %113 = bitcast %struct.gs_point_s* %xy145 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %113) #1
  %width = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width, i32 0, i64 0
  %x146 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx, i32 0, i32 0
  %114 = load double, double* %x146, align 8, !tbaa !22
  %width147 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width147, i32 0, i64 0
  %y149 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx148, i32 0, i32 1
  %115 = load double, double* %y149, align 8, !tbaa !23
  %call150 = call i32 @gs_distance_transform(double %114, double %115, %struct.gs_matrix_s* %scale_c, %struct.gs_point_s* %xy145) #7
  %x151 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy145, i32 0, i32 0
  %116 = load double, double* %x151, align 8, !tbaa !22
  %div152 = fdiv double %116, 2.000000e+00
  %x153 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double %div152, double* %x153, align 8, !tbaa !22
  %117 = bitcast %struct.gs_point_s* %xy145 to i8*
  call void @llvm.lifetime.end(i64 16, i8* %117) #1
  br label %if.end.166

if.else.154:                                      ; preds = %if.then.139
  %118 = bitcast %struct.pdf_glyph_widths_s* %widths1155 to i8*
  call void @llvm.lifetime.start(i64 120, i8* %118) #1
  %119 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont, align 8, !tbaa !1
  %call156 = call i32 @get_missing_width(%struct.gs_font_base_s* %119, i32 0, %struct.gs_matrix_s* %scale_c, %struct.pdf_glyph_widths_s* %widths1155) #7
  %cmp157 = icmp slt i32 %call156, 0
  br i1 %cmp157, label %if.then.158, label %if.else.160

if.then.158:                                      ; preds = %if.else.154
  %x159 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double 0.000000e+00, double* %x159, align 8, !tbaa !22
  br label %if.end.165

if.else.160:                                      ; preds = %if.else.154
  %Width161 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %widths1155, i32 0, i32 0
  %w162 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width161, i32 0, i32 0
  %120 = load double, double* %w162, align 8, !tbaa !193
  %div163 = fdiv double %120, 2.000000e+00
  %x164 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double %div163, double* %x164, align 8, !tbaa !22
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.160, %if.then.158
  %121 = bitcast %struct.pdf_glyph_widths_s* %widths1155 to i8*
  call void @llvm.lifetime.end(i64 120, i8* %121) #1
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165, %if.then.144
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %land.lhs.true.136, %if.end.134
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.end.110
  %122 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width170 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %122, i32 0, i32 0
  %v171 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width170, i32 0, i32 2
  %123 = bitcast %struct.gs_point_s* %v171 to i8*
  %124 = bitcast %struct.gs_point_s* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 16, i32 8, i1 false), !tbaa.struct !279
  %125 = load i32, i32* %code, align 4, !tbaa !21
  %cmp172 = icmp sgt i32 %125, 0
  br i1 %cmp172, label %land.lhs.true.173, label %if.end.185

land.lhs.true.173:                                ; preds = %if.end.169
  %126 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %call174 = call i32 @pdf_is_CID_font(%struct.gs_font_s* %126) #7
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end.185, label %if.then.176

if.then.176:                                      ; preds = %land.lhs.true.173
  %127 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width177 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %127, i32 0, i32 0
  %w178 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width177, i32 0, i32 0
  store double 0.000000e+00, double* %w178, align 8, !tbaa !193
  %128 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width179 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %128, i32 0, i32 0
  %xy180 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width179, i32 0, i32 1
  %y181 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy180, i32 0, i32 1
  store double 0.000000e+00, double* %y181, align 8, !tbaa !280
  %129 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width182 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %129, i32 0, i32 0
  %xy183 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width182, i32 0, i32 1
  %x184 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy183, i32 0, i32 0
  store double 0.000000e+00, double* %x184, align 8, !tbaa !281
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.176, %land.lhs.true.173, %if.end.169
  %130 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %cmp186 = icmp eq double* %130, null
  br i1 %cmp186, label %if.then.187, label %if.else.204

if.then.187:                                      ; preds = %if.end.185
  %members188 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  store i32 0, i32* %members188, align 4, !tbaa !273
  %131 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %procs189 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %131, i32 0, i32 20
  %glyph_info190 = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs189, i32 0, i32 7
  %132 = load i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_matrix_s*, i32, %struct.gs_glyph_info_s*)** %glyph_info190, align 8, !tbaa !276
  %133 = load %struct.gs_font_s*, %struct.gs_font_s** %ofont, align 8, !tbaa !1
  %134 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %135 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl191 = shl i32 1, %135
  %136 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl192 = shl i32 64, %136
  %or193 = or i32 %shl191, %shl192
  %137 = load i32, i32* %allow_cdevproc_callout, align 4, !tbaa !21
  %or194 = or i32 %or193, %137
  %call195 = call i32 %132(%struct.gs_font_s* %133, i64 %134, %struct.gs_matrix_s* null, i32 %or194, %struct.gs_glyph_info_s* %info) #7
  store i32 %call195, i32* %code, align 4, !tbaa !21
  %members196 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %138 = load i32, i32* %members196, align 4, !tbaa !273
  %and197 = and i32 %138, 256
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then.199, label %if.end.203

if.then.199:                                      ; preds = %if.then.187
  %139 = load i32, i32* %allow_cdevproc_callout, align 4, !tbaa !21
  %tobool200 = icmp ne i32 %139, 0
  br i1 %tobool200, label %if.then.201, label %if.else.202

if.then.201:                                      ; preds = %if.then.199
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.else.202:                                      ; preds = %if.then.199
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.203:                                       ; preds = %if.then.187
  br label %if.end.239

if.else.204:                                      ; preds = %if.end.185
  %140 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx205 = getelementptr inbounds double, double* %140, i64 0
  %141 = load double, double* %arrayidx205, align 8, !tbaa !196
  %width206 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx207 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width206, i32 0, i64 0
  %x208 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx207, i32 0, i32 0
  store double %141, double* %x208, align 8, !tbaa !22
  %142 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx209 = getelementptr inbounds double, double* %142, i64 1
  %143 = load double, double* %arrayidx209, align 8, !tbaa !196
  %width210 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx211 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width210, i32 0, i64 0
  %y212 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx211, i32 0, i32 1
  store double %143, double* %y212, align 8, !tbaa !23
  %144 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx213 = getelementptr inbounds double, double* %144, i64 6
  %145 = load double, double* %arrayidx213, align 8, !tbaa !196
  %width214 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx215 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width214, i32 0, i64 1
  %x216 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx215, i32 0, i32 0
  store double %145, double* %x216, align 8, !tbaa !22
  %146 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx217 = getelementptr inbounds double, double* %146, i64 7
  %147 = load double, double* %arrayidx217, align 8, !tbaa !196
  %width218 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 1
  %arrayidx219 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width218, i32 0, i64 1
  %y220 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx219, i32 0, i32 1
  store double %147, double* %y220, align 8, !tbaa !23
  %148 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool221 = icmp ne i32 %148, 0
  br i1 %tobool221, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.204
  %149 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx222 = getelementptr inbounds double, double* %149, i64 8
  %150 = load double, double* %arrayidx222, align 8, !tbaa !196
  br label %cond.end

cond.false:                                       ; preds = %if.else.204
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond223 = phi double [ %150, %cond.true ], [ 0.000000e+00, %cond.false ]
  %v224 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %x225 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v224, i32 0, i32 0
  store double %cond223, double* %x225, align 8, !tbaa !277
  %151 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool226 = icmp ne i32 %151, 0
  br i1 %tobool226, label %cond.true.227, label %cond.false.229

cond.true.227:                                    ; preds = %cond.end
  %152 = load double*, double** %cdevproc_result.addr, align 8, !tbaa !1
  %arrayidx228 = getelementptr inbounds double, double* %152, i64 9
  %153 = load double, double* %arrayidx228, align 8, !tbaa !196
  br label %cond.end.230

cond.false.229:                                   ; preds = %cond.end
  br label %cond.end.230

cond.end.230:                                     ; preds = %cond.false.229, %cond.true.227
  %cond231 = phi double [ %153, %cond.true.227 ], [ 0.000000e+00, %cond.false.229 ]
  %v232 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %y233 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v232, i32 0, i32 1
  store double %cond231, double* %y233, align 8, !tbaa !278
  %154 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl234 = shl i32 1, %154
  %155 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool235 = icmp ne i32 %155, 0
  %cond236 = select i1 %tobool235, i32 128, i32 0
  %or237 = or i32 %shl234, %cond236
  %members238 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  store i32 %or237, i32* %members238, align 4, !tbaa !273
  store i32 0, i32* %code, align 4, !tbaa !21
  br label %if.end.239

if.end.239:                                       ; preds = %cond.end.230, %if.end.203
  %156 = load i32, i32* %code, align 4, !tbaa !21
  %cmp240 = icmp eq i32 %156, -21
  br i1 %cmp240, label %if.then.246, label %lor.lhs.false.241

lor.lhs.false.241:                                ; preds = %if.end.239
  %members242 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %157 = load i32, i32* %members242, align 4, !tbaa !273
  %158 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %shl243 = shl i32 1, %158
  %and244 = and i32 %157, %shl243
  %tobool245 = icmp ne i32 %and244, 0
  br i1 %tobool245, label %if.else.249, label %if.then.246

if.then.246:                                      ; preds = %lor.lhs.false.241, %if.end.239
  %159 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width247 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %159, i32 0, i32 1
  %160 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width248 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %160, i32 0, i32 0
  %161 = bitcast %struct.pdf_glyph_width_s* %real_width247 to i8*
  %162 = bitcast %struct.pdf_glyph_width_s* %Width248 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %161, i8* %162, i64 40, i32 8, i1 false), !tbaa.struct !282
  br label %if.end.286

if.else.249:                                      ; preds = %lor.lhs.false.241
  %163 = load i32, i32* %code, align 4, !tbaa !21
  %cmp250 = icmp slt i32 %163, 0
  br i1 %cmp250, label %if.then.251, label %if.else.252

if.then.251:                                      ; preds = %if.else.249
  %164 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %164, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.else.252:                                      ; preds = %if.else.249
  %members253 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %165 = load i32, i32* %members253, align 4, !tbaa !273
  %and254 = and i32 %165, 192
  %cmp255 = icmp ne i32 %and254, 0
  br i1 %cmp255, label %if.then.256, label %if.else.266

if.then.256:                                      ; preds = %if.else.252
  %166 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %replaced_v257 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %166, i32 0, i32 2
  store i32 1, i32* %replaced_v257, align 4, !tbaa !270
  %members258 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 0
  %167 = load i32, i32* %members258, align 4, !tbaa !273
  %and259 = and i32 %167, 128
  %cmp260 = icmp eq i32 %and259, 0
  br i1 %cmp260, label %land.lhs.true.261, label %if.end.265

land.lhs.true.261:                                ; preds = %if.then.256
  %168 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %cmp262 = icmp eq i32 %168, 1
  br i1 %cmp262, label %if.then.263, label %if.end.265

if.then.263:                                      ; preds = %land.lhs.true.261
  %169 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %ignore_wmode264 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %169, i32 0, i32 3
  store i32 1, i32* %ignore_wmode264, align 4, !tbaa !271
  br label %if.end.265

if.end.265:                                       ; preds = %if.then.263, %land.lhs.true.261, %if.then.256
  br label %if.end.271

if.else.266:                                      ; preds = %if.else.252
  %v267 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %y268 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v267, i32 0, i32 1
  store double 0.000000e+00, double* %y268, align 8, !tbaa !278
  %v269 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %x270 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v269, i32 0, i32 0
  store double 0.000000e+00, double* %x270, align 8, !tbaa !277
  br label %if.end.271

if.end.271:                                       ; preds = %if.else.266, %if.end.265
  %170 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width272 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %170, i32 0, i32 1
  %171 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %call273 = call i32 @store_glyph_width(%struct.pdf_glyph_width_s* %real_width272, i32 %171, %struct.gs_matrix_s* %scale_o, %struct.gs_glyph_info_s* %info) #7
  store i32 %call273, i32* %code, align 4, !tbaa !21
  %172 = load i32, i32* %code, align 4, !tbaa !21
  %cmp274 = icmp slt i32 %172, 0
  br i1 %cmp274, label %if.then.275, label %if.end.276

if.then.275:                                      ; preds = %if.end.271
  %173 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %173, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

if.end.276:                                       ; preds = %if.end.271
  %174 = load i32, i32* %code, align 4, !tbaa !21
  %175 = load i32, i32* %rcode, align 4, !tbaa !21
  %or277 = or i32 %175, %174
  store i32 %or277, i32* %rcode, align 4, !tbaa !21
  %v278 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %x279 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v278, i32 0, i32 0
  %176 = load double, double* %x279, align 8, !tbaa !277
  %v280 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %info, i32 0, i32 2
  %y281 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v280, i32 0, i32 1
  %177 = load double, double* %y281, align 8, !tbaa !278
  %178 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width282 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %178, i32 0, i32 1
  %v283 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width282, i32 0, i32 2
  %call284 = call i32 @gs_distance_transform(double %176, double %177, %struct.gs_matrix_s* %scale_o, %struct.gs_point_s* %v283) #7
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.276
  br label %if.end.286

if.end.286:                                       ; preds = %if.end.285, %if.then.246
  %179 = load i32, i32* %rcode, align 4, !tbaa !21
  store i32 %179, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.287

cleanup.287:                                      ; preds = %if.end.286, %if.then.275, %if.then.251, %if.else.202, %if.then.201, %if.then.118, %if.then.113, %cleanup, %if.then.30, %if.then.11, %if.then.7, %if.then
  %180 = bitcast i32* %allow_cdevproc_callout to i8*
  call void @llvm.lifetime.end(i64 4, i8* %180) #1
  %181 = bitcast %struct.gs_point_s* %v to i8*
  call void @llvm.lifetime.end(i64 16, i8* %181) #1
  %182 = bitcast i32* %rcode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %182) #1
  %183 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %183) #1
  %184 = bitcast %struct.gs_matrix_s* %scale_o to i8*
  call void @llvm.lifetime.end(i64 24, i8* %184) #1
  %185 = bitcast %struct.gs_matrix_s* %scale_c to i8*
  call void @llvm.lifetime.end(i64 24, i8* %185) #1
  %186 = bitcast %struct.gs_glyph_info_s* %info to i8*
  call void @llvm.lifetime.end(i64 104, i8* %186) #1
  %187 = bitcast %struct.gs_font_s** %ofont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %187) #1
  %188 = bitcast %struct.gs_font_base_s** %cfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %188) #1
  %189 = load i32, i32* %retval
  ret i32 %189
}

; Function Attrs: nounwind uwtable
define internal i32 @glyph_orig_matrix(%struct.gs_font_s* %font, i64 %cid, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %font.addr = alloca %struct.gs_font_s*, align 8
  %cid.addr = alloca i64, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %code = alloca i32, align 4
  %fidx = alloca i32, align 4
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store i64 %cid, i64* %cid.addr, align 8, !tbaa !25
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %2 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call = call i32 @pdf_font_orig_matrix(%struct.gs_font_s* %1, %struct.gs_matrix_s* %2) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %3 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %entry
  %4 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %4, i32 0, i32 11
  %5 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp1 = icmp eq i32 %5, 9
  br i1 %cmp1, label %if.then.2, label %if.end.17

if.then.2:                                        ; preds = %if.then
  %6 = bitcast i32* %fidx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  %7 = load i64, i64* %cid.addr, align 8, !tbaa !25
  %cmp3 = icmp ult i64 %7, 2147483648
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  store i64 2147483648, i64* %cid.addr, align 8, !tbaa !25
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then.2
  %8 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %9 = bitcast %struct.gs_font_s* %8 to %struct.gs_font_cid0_s*
  %cidata = getelementptr inbounds %struct.gs_font_cid0_s, %struct.gs_font_cid0_s* %9, i32 0, i32 29
  %glyph_data = getelementptr inbounds %struct.gs_font_cid0_data_s, %struct.gs_font_cid0_data_s* %cidata, i32 0, i32 5
  %10 = load i32 (%struct.gs_font_base_s*, i64, %struct.gs_glyph_data_s*, i32*)*, i32 (%struct.gs_font_base_s*, i64, %struct.gs_glyph_data_s*, i32*)** %glyph_data, align 8, !tbaa !283
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %12 = bitcast %struct.gs_font_s* %11 to %struct.gs_font_base_s*
  %13 = load i64, i64* %cid.addr, align 8, !tbaa !25
  %call5 = call i32 %10(%struct.gs_font_base_s* %12, i64 %13, %struct.gs_glyph_data_s* null, i32* %fidx) #7
  store i32 %call5, i32* %code, align 4, !tbaa !21
  %14 = load i32, i32* %code, align 4, !tbaa !21
  %cmp6 = icmp slt i32 %14, 0
  br i1 %cmp6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %if.end
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %16 = bitcast %struct.gs_font_s* %15 to %struct.gs_font_cid0_s*
  %cidata8 = getelementptr inbounds %struct.gs_font_cid0_s, %struct.gs_font_cid0_s* %16, i32 0, i32 29
  %glyph_data9 = getelementptr inbounds %struct.gs_font_cid0_data_s, %struct.gs_font_cid0_data_s* %cidata8, i32 0, i32 5
  %17 = load i32 (%struct.gs_font_base_s*, i64, %struct.gs_glyph_data_s*, i32*)*, i32 (%struct.gs_font_base_s*, i64, %struct.gs_glyph_data_s*, i32*)** %glyph_data9, align 8, !tbaa !283
  %18 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %19 = bitcast %struct.gs_font_s* %18 to %struct.gs_font_base_s*
  %call10 = call i32 %17(%struct.gs_font_base_s* %19, i64 2147483648, %struct.gs_glyph_data_s* null, i32* %fidx) #7
  store i32 %call10, i32* %code, align 4, !tbaa !21
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.7, %if.end
  %20 = load i32, i32* %code, align 4, !tbaa !21
  %cmp12 = icmp sge i32 %20, 0
  br i1 %cmp12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %if.end.11
  %21 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %22 = load i32, i32* %fidx, align 4, !tbaa !21
  %call14 = call %struct.gs_font_s* @gs_cid0_indexed_font(%struct.gs_font_s* %21, i32 %22) #7
  %FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %call14, i32 0, i32 9
  %23 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call15 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %FontMatrix, %struct.gs_matrix_s* %23, %struct.gs_matrix_s* %24) #7
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.13, %if.end.11
  %25 = bitcast i32* %fidx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #1
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %entry
  %26 = load i32, i32* %code, align 4, !tbaa !21
  %27 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #1
  ret i32 %26
}

declare i32 @gs_matrix_scale(%struct.gs_matrix_s*, double, double, %struct.gs_matrix_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @get_missing_width(%struct.gs_font_base_s* %cfont, i32 %wmode, %struct.gs_matrix_s* %scale_c, %struct.pdf_glyph_widths_s* %pwidths) #0 {
entry:
  %retval = alloca i32, align 4
  %cfont.addr = alloca %struct.gs_font_base_s*, align 8
  %wmode.addr = alloca i32, align 4
  %scale_c.addr = alloca %struct.gs_matrix_s*, align 8
  %pwidths.addr = alloca %struct.pdf_glyph_widths_s*, align 8
  %finfo = alloca %struct.gs_font_info_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_font_base_s* %cfont, %struct.gs_font_base_s** %cfont.addr, align 8, !tbaa !1
  store i32 %wmode, i32* %wmode.addr, align 4, !tbaa !21
  store %struct.gs_matrix_s* %scale_c, %struct.gs_matrix_s** %scale_c.addr, align 8, !tbaa !1
  store %struct.pdf_glyph_widths_s* %pwidths, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_font_info_s* %finfo to i8*
  call void @llvm.lifetime.start(i64 160, i8* %0) #1
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_base_s, %struct.gs_font_base_s* %2, i32 0, i32 20
  %font_info = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 2
  %3 = load i32 (%struct.gs_font_s*, %struct.gs_point_s*, i32, %struct.gs_font_info_s*)*, i32 (%struct.gs_font_s*, %struct.gs_point_s*, i32, %struct.gs_font_info_s*)** %font_info, align 8, !tbaa !284
  %4 = load %struct.gs_font_base_s*, %struct.gs_font_base_s** %cfont.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_font_base_s* %4 to %struct.gs_font_s*
  %call = call i32 %3(%struct.gs_font_s* %5, %struct.gs_point_s* null, i32 2048, %struct.gs_font_info_s* %finfo) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %6 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %7, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %MissingWidth = getelementptr inbounds %struct.gs_font_info_s, %struct.gs_font_info_s* %finfo, i32 0, i32 12
  %9 = load i32, i32* %MissingWidth, align 4, !tbaa !285
  %sub = sub nsw i32 0, %9
  %conv = sitofp i32 %sub to double
  %10 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %scale_c.addr, align 8, !tbaa !1
  %11 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %11, i32 0, i32 1
  %xy = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width, i32 0, i32 1
  %call2 = call i32 @gs_distance_transform(double 0.000000e+00, double %conv, %struct.gs_matrix_s* %10, %struct.gs_point_s* %xy) #7
  %12 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %12, i32 0, i32 0
  %xy3 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width, i32 0, i32 1
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy3, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !281
  %13 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width4 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %13, i32 0, i32 1
  %xy5 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width4, i32 0, i32 1
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy5, i32 0, i32 1
  %14 = load double, double* %y, align 8, !tbaa !267
  %15 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width6 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %15, i32 0, i32 0
  %xy7 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width6, i32 0, i32 1
  %y8 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy7, i32 0, i32 1
  store double %14, double* %y8, align 8, !tbaa !280
  %16 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width9 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %16, i32 0, i32 0
  %xy10 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width9, i32 0, i32 1
  %y11 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy10, i32 0, i32 1
  %17 = load double, double* %y11, align 8, !tbaa !280
  %18 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width12 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %18, i32 0, i32 1
  %w = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width12, i32 0, i32 0
  store double %17, double* %w, align 8, !tbaa !269
  %19 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width13 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %19, i32 0, i32 0
  %w14 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width13, i32 0, i32 0
  store double %17, double* %w14, align 8, !tbaa !193
  %20 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width15 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %20, i32 0, i32 0
  %xy16 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width15, i32 0, i32 1
  %y17 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy16, i32 0, i32 1
  %21 = load double, double* %y17, align 8, !tbaa !280
  %sub18 = fsub double -0.000000e+00, %21
  %div = fdiv double %sub18, 2.000000e+00
  %22 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width19 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %22, i32 0, i32 0
  %v = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width19, i32 0, i32 2
  %x20 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v, i32 0, i32 0
  store double %div, double* %x20, align 8, !tbaa !264
  %23 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width21 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %23, i32 0, i32 0
  %xy22 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width21, i32 0, i32 1
  %y23 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy22, i32 0, i32 1
  %24 = load double, double* %y23, align 8, !tbaa !280
  %sub24 = fsub double -0.000000e+00, %24
  %25 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width25 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %25, i32 0, i32 0
  %v26 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width25, i32 0, i32 2
  %y27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v26, i32 0, i32 1
  store double %sub24, double* %y27, align 8, !tbaa !263
  br label %if.end.55

if.else:                                          ; preds = %if.end
  %MissingWidth28 = getelementptr inbounds %struct.gs_font_info_s, %struct.gs_font_info_s* %finfo, i32 0, i32 12
  %26 = load i32, i32* %MissingWidth28, align 4, !tbaa !285
  %conv29 = sitofp i32 %26 to double
  %27 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %scale_c.addr, align 8, !tbaa !1
  %28 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width30 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %28, i32 0, i32 1
  %xy31 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width30, i32 0, i32 1
  %call32 = call i32 @gs_distance_transform(double %conv29, double 0.000000e+00, %struct.gs_matrix_s* %27, %struct.gs_point_s* %xy31) #7
  %29 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width33 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %29, i32 0, i32 1
  %xy34 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width33, i32 0, i32 1
  %x35 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy34, i32 0, i32 0
  %30 = load double, double* %x35, align 8, !tbaa !268
  %31 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width36 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %31, i32 0, i32 0
  %xy37 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width36, i32 0, i32 1
  %x38 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy37, i32 0, i32 0
  store double %30, double* %x38, align 8, !tbaa !281
  %32 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width39 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %32, i32 0, i32 0
  %xy40 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width39, i32 0, i32 1
  %y41 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy40, i32 0, i32 1
  store double 0.000000e+00, double* %y41, align 8, !tbaa !280
  %33 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width42 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %33, i32 0, i32 0
  %xy43 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width42, i32 0, i32 1
  %x44 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy43, i32 0, i32 0
  %34 = load double, double* %x44, align 8, !tbaa !281
  %35 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %real_width45 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %35, i32 0, i32 1
  %w46 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %real_width45, i32 0, i32 0
  store double %34, double* %w46, align 8, !tbaa !269
  %36 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width47 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %36, i32 0, i32 0
  %w48 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width47, i32 0, i32 0
  store double %34, double* %w48, align 8, !tbaa !193
  %37 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width49 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %37, i32 0, i32 0
  %v50 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width49, i32 0, i32 2
  %y51 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v50, i32 0, i32 1
  store double 0.000000e+00, double* %y51, align 8, !tbaa !263
  %38 = load %struct.pdf_glyph_widths_s*, %struct.pdf_glyph_widths_s** %pwidths.addr, align 8, !tbaa !1
  %Width52 = getelementptr inbounds %struct.pdf_glyph_widths_s, %struct.pdf_glyph_widths_s* %38, i32 0, i32 0
  %v53 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %Width52, i32 0, i32 2
  %x54 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v53, i32 0, i32 0
  store double 0.000000e+00, double* %x54, align 8, !tbaa !264
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %if.then.1
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.55, %if.then
  %39 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #1
  %40 = bitcast %struct.gs_font_info_s* %finfo to i8*
  call void @llvm.lifetime.end(i64 160, i8* %40) #1
  %41 = load i32, i32* %retval
  ret i32 %41
}

declare i32 @gs_font_glyph_is_notdef(%struct.gs_font_base_s*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @store_glyph_width(%struct.pdf_glyph_width_s* %pwidth, i32 %wmode, %struct.gs_matrix_s* %scale, %struct.gs_glyph_info_s* %pinfo) #0 {
entry:
  %retval = alloca i32, align 4
  %pwidth.addr = alloca %struct.pdf_glyph_width_s*, align 8
  %wmode.addr = alloca i32, align 4
  %scale.addr = alloca %struct.gs_matrix_s*, align 8
  %pinfo.addr = alloca %struct.gs_glyph_info_s*, align 8
  %w = alloca double, align 8
  %v = alloca double, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_glyph_width_s* %pwidth, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  store i32 %wmode, i32* %wmode.addr, align 4, !tbaa !21
  store %struct.gs_matrix_s* %scale, %struct.gs_matrix_s** %scale.addr, align 8, !tbaa !1
  store %struct.gs_glyph_info_s* %pinfo, %struct.gs_glyph_info_s** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast double* %w to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = bitcast double* %v to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #1
  %2 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.gs_glyph_info_s*, %struct.gs_glyph_info_s** %pinfo.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width, i32 0, i64 %idxprom
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx, i32 0, i32 0
  %4 = load double, double* %x, align 8, !tbaa !22
  %5 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %idxprom1 = sext i32 %5 to i64
  %6 = load %struct.gs_glyph_info_s*, %struct.gs_glyph_info_s** %pinfo.addr, align 8, !tbaa !1
  %width2 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %6, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [2 x %struct.gs_point_s], [2 x %struct.gs_point_s]* %width2, i32 0, i64 %idxprom1
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %arrayidx3, i32 0, i32 1
  %7 = load double, double* %y, align 8, !tbaa !23
  %8 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %scale.addr, align 8, !tbaa !1
  %9 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %xy = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %9, i32 0, i32 1
  %call = call i32 @gs_distance_transform(double %4, double %7, %struct.gs_matrix_s* %8, %struct.gs_point_s* %xy) #7
  %10 = load i32, i32* %wmode.addr, align 4, !tbaa !21
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %11 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %xy4 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %11, i32 0, i32 1
  %y5 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy4, i32 0, i32 1
  %12 = load double, double* %y5, align 8, !tbaa !288
  store double %12, double* %w, align 8, !tbaa !196
  %13 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %xy6 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %13, i32 0, i32 1
  %x7 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy6, i32 0, i32 0
  %14 = load double, double* %x7, align 8, !tbaa !289
  store double %14, double* %v, align 8, !tbaa !196
  br label %if.end

if.else:                                          ; preds = %entry
  %15 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %xy8 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %15, i32 0, i32 1
  %x9 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy8, i32 0, i32 0
  %16 = load double, double* %x9, align 8, !tbaa !289
  store double %16, double* %w, align 8, !tbaa !196
  %17 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %xy10 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %17, i32 0, i32 1
  %y11 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %xy10, i32 0, i32 1
  %18 = load double, double* %y11, align 8, !tbaa !288
  store double %18, double* %v, align 8, !tbaa !196
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load double, double* %w, align 8, !tbaa !196
  %20 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %w12 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %20, i32 0, i32 0
  store double %19, double* %w12, align 8, !tbaa !290
  %21 = load double, double* %v, align 8, !tbaa !196
  %cmp = fcmp une double %21, 0.000000e+00
  br i1 %cmp, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.14:                                        ; preds = %if.end
  %22 = load %struct.gs_glyph_info_s*, %struct.gs_glyph_info_s** %pinfo.addr, align 8, !tbaa !1
  %v15 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %22, i32 0, i32 2
  %x16 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v15, i32 0, i32 0
  %23 = load double, double* %x16, align 8, !tbaa !277
  %24 = load %struct.gs_glyph_info_s*, %struct.gs_glyph_info_s** %pinfo.addr, align 8, !tbaa !1
  %v17 = getelementptr inbounds %struct.gs_glyph_info_s, %struct.gs_glyph_info_s* %24, i32 0, i32 2
  %y18 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %v17, i32 0, i32 1
  %25 = load double, double* %y18, align 8, !tbaa !278
  %26 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %scale.addr, align 8, !tbaa !1
  %27 = load %struct.pdf_glyph_width_s*, %struct.pdf_glyph_width_s** %pwidth.addr, align 8, !tbaa !1
  %v19 = getelementptr inbounds %struct.pdf_glyph_width_s, %struct.pdf_glyph_width_s* %27, i32 0, i32 2
  %call20 = call i32 @gs_distance_transform(double %23, double %25, %struct.gs_matrix_s* %26, %struct.gs_point_s* %v19) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.14, %if.then.13
  %28 = bitcast double* %v to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #1
  %29 = bitcast double* %w to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #1
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define i32 @pdf_default_text_begin(%struct.gs_text_enum_s* %pte, %struct.gs_text_params_s* %text, %struct.gs_text_enum_s** %ppte) #0 {
entry:
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %text.addr = alloca %struct.gs_text_params_s*, align 8
  %ppte.addr = alloca %struct.gs_text_enum_s**, align 8
  %text1 = alloca %struct.gs_text_params_s, align 8
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_text_params_s* %text, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s** %ppte, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_text_params_s* %text1 to i8*
  call void @llvm.lifetime.start(i64 88, i8* %0) #1
  %1 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_params_s* %text1 to i8*
  %3 = bitcast %struct.gs_text_params_s* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 88, i32 8, i1 false), !tbaa.struct !291
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %4, i32 0, i32 12
  %5 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !227
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %5, i32 0, i32 11
  %6 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %6, 3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text1, i32 0, i32 0
  %7 = load i32, i32* %operation, align 4, !tbaa !64
  %and = and i32 %7, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %operation1 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text1, i32 0, i32 0
  %8 = load i32, i32* %operation1, align 4, !tbaa !64
  %and2 = and i32 %8, -513
  store i32 %and2, i32* %operation1, align 4, !tbaa !64
  %operation3 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text1, i32 0, i32 0
  %9 = load i32, i32* %operation3, align 4, !tbaa !64
  %or = or i32 %9, 1024
  store i32 %or, i32* %operation3, align 4, !tbaa !64
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %10, i32 0, i32 1
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !292
  %12 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %12, i32 0, i32 3
  %13 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !261
  %14 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font4 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %14, i32 0, i32 12
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font4, align 8, !tbaa !227
  %16 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %path = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %16, i32 0, i32 5
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %path, align 8, !tbaa !293
  %18 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pdcolor = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %18, i32 0, i32 6
  %19 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !294
  %20 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pcpath = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %20, i32 0, i32 7
  %21 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath, align 8, !tbaa !295
  %22 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %22, i32 0, i32 8
  %23 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !296
  %24 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppte.addr, align 8, !tbaa !1
  %call = call i32 @gx_default_text_begin(%struct.gx_device_s* %11, %struct.gs_imager_state_s* %13, %struct.gs_text_params_s* %text1, %struct.gs_font_s* %15, %struct.gx_path_s* %17, %struct.gx_device_color_s* %19, %struct.gx_clip_path_s* %21, %struct.gs_memory_s* %23, %struct.gs_text_enum_s** %24) #7
  %25 = bitcast %struct.gs_text_params_s* %text1 to i8*
  call void @llvm.lifetime.end(i64 88, i8* %25) #1
  ret i32 %call
}

declare %struct.gs_ptr_procs_s* @basic_enum_ptrs(%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*) #2

declare void @basic_reloc_ptrs(i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_resync(%struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s* %pfrom) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pfrom.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %cleanup.dest.slot = alloca i32
  %code = alloca i32, align 4
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pfrom, %struct.gs_text_enum_s** %pfrom.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %3, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %4 = load i32, i32* %operation, align 4, !tbaa !225
  %5 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pfrom.addr, align 8, !tbaa !1
  %text1 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %5, i32 0, i32 0
  %operation2 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text1, i32 0, i32 0
  %6 = load i32, i32* %operation2, align 4, !tbaa !225
  %xor = xor i32 %4, %6
  %and = and i32 %xor, -64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.11

if.end:                                           ; preds = %entry
  %7 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %7, i32 0, i32 29
  %8 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %tobool3 = icmp ne %struct.gs_text_enum_s* %8, null
  br i1 %tobool3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %10 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default5 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %10, i32 0, i32 29
  %11 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default5, align 8, !tbaa !86
  %12 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pfrom.addr, align 8, !tbaa !1
  %call = call i32 @gs_text_resync(%struct.gs_text_enum_s* %11, %struct.gs_text_enum_s* %12) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %13 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %13, 0
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.4
  %14 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %14, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.7:                                         ; preds = %if.then.4
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.7, %if.then.6
  %15 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.11 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.8

if.end.8:                                         ; preds = %cleanup.cont, %if.end
  %16 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text9 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %16, i32 0, i32 0
  %17 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pfrom.addr, align 8, !tbaa !1
  %text10 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %17, i32 0, i32 0
  %18 = bitcast %struct.gs_text_params_s* %text9 to i8*
  %19 = bitcast %struct.gs_text_params_s* %text10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 88, i32 8, i1 false), !tbaa.struct !291
  %20 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %21 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pfrom.addr, align 8, !tbaa !1
  call void @gs_text_enum_copy_dynamic(%struct.gs_text_enum_s* %20, %struct.gs_text_enum_s* %21, i32 0) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.11

cleanup.11:                                       ; preds = %if.end.8, %cleanup, %if.then
  %22 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %22) #1
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_process(%struct.gs_text_enum_s* %pte) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %operation = alloca i32, align 4
  %size = alloca i32, align 4
  %pte_default = alloca %struct.gs_text_enum_s*, align 8
  %process = alloca i32 (%struct.gs_text_enum_s*, i8*, i32)*, align 8
  %code = alloca i32, align 4
  %early_accumulator = alloca i32, align 4
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %buf = alloca %union.bu_, align 8
  %cleanup.dest.slot = alloca i32
  %cdata = alloca i64*, align 8
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %x0y1 = alloca float, align 4
  %x1y0 = alloca float, align 4
  %psenum = alloca %struct.gs_show_enum_s, align 8
  %pgs = alloca %struct.gs_state_s*, align 8
  %save_procs = alloca %struct.gs_text_enum_procs_s*, align 8
  %special_procs = alloca %struct.gs_text_enum_procs_s, align 8
  %save_proc = alloca void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, align 8
  %m = alloca %struct.gs_matrix_s, align 4
  %savem = alloca %struct.gs_matrix_s, align 4
  %rfont = alloca %struct.gs_font_s*, align 8
  %pfont = alloca %struct.gs_font_s*, align 8
  %wmode = alloca i32, align 4
  %log2_scale = alloca %struct.gs_log2_scale_point_s, align 4
  %subpix_origin = alloca %struct.gs_fixed_point_s, align 4
  %pair = alloca %struct.cached_fm_pair_s*, align 8
  %cc = alloca %struct.cached_char_s*, align 8
  %cc265 = alloca %struct.cached_char_s*, align 8
  %pair266 = alloca %struct.cached_fm_pair_s*, align 8
  %log2_scale267 = alloca %struct.gs_log2_scale_point_s, align 4
  %rfont268 = alloca %struct.gs_font_s*, align 8
  %wmode282 = alloca i32, align 4
  %pdfont284 = alloca %struct.pdf_font_resource_s*, align 8
  %mem = alloca %struct.gs_memory_s*, align 8
  %dev285 = alloca %struct.gx_device_memory_s*, align 8
  %penum392 = alloca %struct.gs_show_enum_s*, align 8
  %save_can_cache = alloca i32, align 4
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %pcc = alloca %struct.gs_client_color_s*, align 8
  %pis393 = alloca %struct.gs_imager_state_s*, align 8
  %pgs395 = alloca %struct.gs_state_s*, align 8
  %code1 = alloca i32, align 4
  %font435 = alloca %struct.gs_font_s*, align 8
  %buf515 = alloca i8*, align 8
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = bitcast i32* %operation to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %4, i32 0, i32 0
  %operation1 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %5 = load i32, i32* %operation1, align 4, !tbaa !225
  store i32 %5, i32* %operation, align 4, !tbaa !21
  %6 = bitcast i32* %size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  %7 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text2 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %7, i32 0, i32 0
  %size3 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text2, i32 0, i32 2
  %8 = load i32, i32* %size3, align 4, !tbaa !222
  %9 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %9, i32 0, i32 17
  %10 = load i32, i32* %index, align 4, !tbaa !224
  %sub = sub i32 %8, %10
  store i32 %sub, i32* %size, align 4, !tbaa !21
  %11 = bitcast %struct.gs_text_enum_s** %pte_default to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #1
  %12 = bitcast i32 (%struct.gs_text_enum_s*, i8*, i32)** %process to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #1
  %13 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %14 = bitcast i32* %early_accumulator to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  store i32 0, i32* %early_accumulator, align 4, !tbaa !21
  %15 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %16 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %16, i32 0, i32 1
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !216
  %18 = bitcast %struct.gx_device_s* %17 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %18, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %19 = bitcast %union.bu_* %buf to i8*
  call void @llvm.lifetime.start(i64 104, i8* %19) #1
  %20 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default4 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %20, i32 0, i32 29
  %21 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default4, align 8, !tbaa !86
  %tobool = icmp ne %struct.gs_text_enum_s* %21, null
  br i1 %tobool, label %if.end.9, label %if.then

if.then:                                          ; preds = %entry
  %22 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %23 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %call = call i32 @pdf_prepare_text_drawing(%struct.gx_device_pdf_s* %22, %struct.gs_text_enum_s* %23) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %24 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp eq i32 %24, -15
  br i1 %cmp, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  br label %default_impl

if.end:                                           ; preds = %if.then
  %25 = load i32, i32* %code, align 4, !tbaa !21
  %cmp6 = icmp slt i32 %25, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %26 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %26, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

if.end.8:                                         ; preds = %if.end
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %entry
  %27 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default10 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %27, i32 0, i32 29
  %28 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default10, align 8, !tbaa !86
  %tobool11 = icmp ne %struct.gs_text_enum_s* %28, null
  br i1 %tobool11, label %if.end.16, label %if.then.12

if.then.12:                                       ; preds = %if.end.9
  %29 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_just_accumulated = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %29, i32 0, i32 214
  store i32 0, i32* %charproc_just_accumulated, align 4, !tbaa !297
  %30 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cdevproc_callout = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %30, i32 0, i32 32
  %31 = load i32, i32* %cdevproc_callout, align 4, !tbaa !89
  %tobool13 = icmp ne i32 %31, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.12
  %32 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %orig_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %32, i32 0, i32 4
  %33 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font, align 8, !tbaa !93
  %34 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %34, i32 0, i32 12
  store %struct.gs_font_s* %33, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.then.12
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.end.9
  %35 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font17 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %35, i32 0, i32 12
  %36 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font17, align 8, !tbaa !217
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %36, i32 0, i32 11
  %37 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp18 = icmp eq i32 %37, 3
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.16
  %38 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font19 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %38, i32 0, i32 12
  %39 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font19, align 8, !tbaa !217
  %FontType20 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %39, i32 0, i32 11
  %40 = load i32, i32* %FontType20, align 4, !tbaa !74
  %cmp21 = icmp eq i32 %40, 53
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false
  %41 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font23 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %41, i32 0, i32 12
  %42 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font23, align 8, !tbaa !217
  %FontType24 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %42, i32 0, i32 11
  %43 = load i32, i32* %FontType24, align 4, !tbaa !74
  %cmp25 = icmp eq i32 %43, 51
  br i1 %cmp25, label %land.lhs.true, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.22
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font27 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %44, i32 0, i32 12
  %45 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font27, align 8, !tbaa !217
  %FontType28 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %45, i32 0, i32 11
  %46 = load i32, i32* %FontType28, align 4, !tbaa !74
  %cmp29 = icmp eq i32 %46, 52
  br i1 %cmp29, label %land.lhs.true, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %lor.lhs.false.26
  %47 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font31 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %47, i32 0, i32 12
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font31, align 8, !tbaa !217
  %FontType32 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %48, i32 0, i32 11
  %49 = load i32, i32* %FontType32, align 4, !tbaa !74
  %cmp33 = icmp eq i32 %49, 54
  br i1 %cmp33, label %land.lhs.true, label %if.end.44

land.lhs.true:                                    ; preds = %lor.lhs.false.30, %lor.lhs.false.26, %lor.lhs.false.22, %lor.lhs.false, %if.end.16
  %50 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %text34 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %50, i32 0, i32 0
  %operation35 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text34, i32 0, i32 0
  %51 = load i32, i32* %operation35, align 4, !tbaa !248
  %and = and i32 %51, 63488
  %tobool36 = icmp ne i32 %and, 0
  br i1 %tobool36, label %land.lhs.true.37, label %if.end.44

land.lhs.true.37:                                 ; preds = %land.lhs.true
  %52 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %52, i32 0, i32 231
  %53 = load i32, i32* %type3charpath, align 4, !tbaa !100
  %tobool38 = icmp ne i32 %53, 0
  br i1 %tobool38, label %if.end.44, label %if.then.39

if.then.39:                                       ; preds = %land.lhs.true.37
  %54 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath40 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %54, i32 0, i32 231
  store i32 1, i32* %type3charpath40, align 4, !tbaa !100
  %55 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %55, i32 0, i32 31
  %56 = load i32, i32* %charproc_accum, align 4, !tbaa !87
  %tobool41 = icmp ne i32 %56, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %if.then.39
  br label %default_impl

if.end.43:                                        ; preds = %if.then.39
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true.37, %land.lhs.true, %lor.lhs.false.30
  store i32 -1, i32* %code, align 4, !tbaa !21
  br label %top

top:                                              ; preds = %if.then.598, %cleanup.432, %if.end.44
  %57 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default45 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %57, i32 0, i32 29
  %58 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default45, align 8, !tbaa !86
  store %struct.gs_text_enum_s* %58, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %59 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %tobool46 = icmp ne %struct.gs_text_enum_s* %59, null
  br i1 %tobool46, label %if.then.47, label %if.end.434

if.then.47:                                       ; preds = %top
  %60 = bitcast i64** %cdata to i8*
  call void @llvm.lifetime.start(i64 8, i8* %60) #1
  %61 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text48 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %61, i32 0, i32 0
  %data = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text48, i32 0, i32 1
  %chars = bitcast %union.sd_* %data to i64**
  %62 = load i64*, i64** %chars, align 8, !tbaa !1
  store i64* %62, i64** %cdata, align 8, !tbaa !1
  %63 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %charproc_accum49 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %63, i32 0, i32 31
  %64 = load i32, i32* %charproc_accum49, align 4, !tbaa !87
  %tobool50 = icmp ne i32 %64, 0
  br i1 %tobool50, label %if.then.51, label %if.end.59

if.then.51:                                       ; preds = %if.then.47
  %65 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %66 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %67 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %68 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %call52 = call i32 @complete_charproc(%struct.gx_device_pdf_s* %65, %struct.gs_text_enum_s* %66, %struct.gs_text_enum_s* %67, %struct.pdf_text_enum_s* %68, i32 1) #7
  store i32 %call52, i32* %code, align 4, !tbaa !21
  %69 = load i32, i32* %code, align 4, !tbaa !21
  %cmp53 = icmp slt i32 %69, 0
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.then.51
  %70 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %70, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.432

if.end.55:                                        ; preds = %if.then.51
  %71 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath56 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %71, i32 0, i32 231
  %72 = load i32, i32* %type3charpath56, align 4, !tbaa !100
  %tobool57 = icmp ne i32 %72, 0
  br i1 %tobool57, label %if.else, label %if.then.58

if.then.58:                                       ; preds = %if.end.55
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.432

if.else:                                          ; preds = %if.end.55
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.432

if.end.59:                                        ; preds = %if.then.47
  %73 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font60 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %73, i32 0, i32 12
  %74 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font60, align 8, !tbaa !217
  %FontType61 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %74, i32 0, i32 11
  %75 = load i32, i32* %FontType61, align 4, !tbaa !74
  %cmp62 = icmp eq i32 %75, 53
  br i1 %cmp62, label %land.lhs.true.63, label %if.end.92

land.lhs.true.63:                                 ; preds = %if.end.59
  %76 = load i32, i32* %operation, align 4, !tbaa !21
  %and64 = and i32 %76, 4
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %land.lhs.true.66, label %if.end.92

land.lhs.true.66:                                 ; preds = %land.lhs.true.63
  %77 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath67 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %77, i32 0, i32 231
  %78 = load i32, i32* %type3charpath67, align 4, !tbaa !100
  %tobool68 = icmp ne i32 %78, 0
  br i1 %tobool68, label %if.end.92, label %land.lhs.true.69

land.lhs.true.69:                                 ; preds = %land.lhs.true.66
  %79 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index70 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %79, i32 0, i32 17
  %80 = load i32, i32* %index70, align 4, !tbaa !224
  %idxprom = zext i32 %80 to i64
  %81 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i64, i64* %81, i64 %idxprom
  %82 = load i64, i64* %arrayidx, align 8, !tbaa !25
  %cmp71 = icmp ule i64 %82, 255
  br i1 %cmp71, label %if.then.72, label %if.end.92

if.then.72:                                       ; preds = %land.lhs.true.69
  %83 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %83) #1
  %84 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %85 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font73 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %85, i32 0, i32 12
  %86 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font73, align 8, !tbaa !217
  %call74 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %84, %struct.gs_font_s* %86, %struct.pdf_font_resource_s** %pdfont, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call74, i32* %code, align 4, !tbaa !21
  %87 = load i32, i32* %code, align 4, !tbaa !21
  %cmp75 = icmp slt i32 %87, 0
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.then.72
  %88 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %88, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.77:                                        ; preds = %if.then.72
  %89 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index78 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %89, i32 0, i32 17
  %90 = load i32, i32* %index78, align 4, !tbaa !224
  %idxprom79 = zext i32 %90 to i64
  %91 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx80 = getelementptr inbounds i64, i64* %91, i64 %idxprom79
  %92 = load i64, i64* %arrayidx80, align 8, !tbaa !25
  %shr = lshr i64 %92, 3
  %93 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %93, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %s = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 7
  %type3 = bitcast %union.anon.5* %s to %struct.anon.8*
  %cached = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3, i32 0, i32 6
  %94 = load i8*, i8** %cached, align 8, !tbaa !202
  %arrayidx81 = getelementptr inbounds i8, i8* %94, i64 %shr
  %95 = load i8, i8* %arrayidx81, align 1, !tbaa !161
  %conv = zext i8 %95 to i32
  %96 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index82 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %96, i32 0, i32 17
  %97 = load i32, i32* %index82, align 4, !tbaa !224
  %idxprom83 = zext i32 %97 to i64
  %98 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx84 = getelementptr inbounds i64, i64* %98, i64 %idxprom83
  %99 = load i64, i64* %arrayidx84, align 8, !tbaa !25
  %and85 = and i64 %99, 7
  %sh_prom = trunc i64 %and85 to i32
  %shr86 = ashr i32 128, %sh_prom
  %and87 = and i32 %conv, %shr86
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %if.end.77
  store i32 0, i32* %early_accumulator, align 4, !tbaa !21
  br label %if.end.91

if.else.90:                                       ; preds = %if.end.77
  store i32 1, i32* %early_accumulator, align 4, !tbaa !21
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.90, %if.then.89
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.91, %if.then.76
  %100 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %100) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.432 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.92

if.end.92:                                        ; preds = %cleanup.cont, %land.lhs.true.69, %land.lhs.true.66, %land.lhs.true.63, %if.end.59
  %101 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font93 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %101, i32 0, i32 12
  %102 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font93, align 8, !tbaa !217
  %FontType94 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %102, i32 0, i32 11
  %103 = load i32, i32* %FontType94, align 4, !tbaa !74
  %cmp95 = icmp eq i32 %103, 52
  br i1 %cmp95, label %land.lhs.true.107, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %if.end.92
  %104 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font98 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %104, i32 0, i32 12
  %105 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font98, align 8, !tbaa !217
  %FontType99 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %105, i32 0, i32 11
  %106 = load i32, i32* %FontType99, align 4, !tbaa !74
  %cmp100 = icmp eq i32 %106, 54
  br i1 %cmp100, label %land.lhs.true.107, label %lor.lhs.false.102

lor.lhs.false.102:                                ; preds = %lor.lhs.false.97
  %107 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font103 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %107, i32 0, i32 12
  %108 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font103, align 8, !tbaa !217
  %FontType104 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %108, i32 0, i32 11
  %109 = load i32, i32* %FontType104, align 4, !tbaa !74
  %cmp105 = icmp eq i32 %109, 51
  br i1 %cmp105, label %land.lhs.true.107, label %if.end.140

land.lhs.true.107:                                ; preds = %lor.lhs.false.102, %lor.lhs.false.97, %if.end.92
  %110 = load i32, i32* %operation, align 4, !tbaa !21
  %and108 = and i32 %110, 4
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %land.lhs.true.110, label %if.end.140

land.lhs.true.110:                                ; preds = %land.lhs.true.107
  %111 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath111 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %111, i32 0, i32 231
  %112 = load i32, i32* %type3charpath111, align 4, !tbaa !100
  %tobool112 = icmp ne i32 %112, 0
  br i1 %tobool112, label %if.end.140, label %if.then.113

if.then.113:                                      ; preds = %land.lhs.true.110
  %113 = bitcast float* %x0y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %113) #1
  %114 = bitcast float* %x1y0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %114) #1
  %115 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %115, i32 0, i32 3
  %116 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !247
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %116, i32 0, i32 5
  %yx = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm, i32 0, i32 2
  %117 = load float, float* %yx, align 4, !tbaa !298
  %118 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis114 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %118, i32 0, i32 3
  %119 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis114, align 8, !tbaa !247
  %ctm115 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %119, i32 0, i32 5
  %yx116 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm115, i32 0, i32 2
  %120 = load float, float* %yx116, align 4, !tbaa !298
  %mul = fmul float %117, %120
  %121 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis117 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %121, i32 0, i32 3
  %122 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis117, align 8, !tbaa !247
  %ctm118 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %122, i32 0, i32 5
  %yy = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm118, i32 0, i32 3
  %123 = load float, float* %yy, align 4, !tbaa !299
  %124 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis119 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %124, i32 0, i32 3
  %125 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis119, align 8, !tbaa !247
  %ctm120 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %125, i32 0, i32 5
  %yy121 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm120, i32 0, i32 3
  %126 = load float, float* %yy121, align 4, !tbaa !299
  %mul122 = fmul float %123, %126
  %add = fadd float %mul, %mul122
  store float %add, float* %x0y1, align 4, !tbaa !142
  %127 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis123 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %127, i32 0, i32 3
  %128 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis123, align 8, !tbaa !247
  %ctm124 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %128, i32 0, i32 5
  %xx = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm124, i32 0, i32 0
  %129 = load float, float* %xx, align 4, !tbaa !300
  %130 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis125 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %130, i32 0, i32 3
  %131 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis125, align 8, !tbaa !247
  %ctm126 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %131, i32 0, i32 5
  %xx127 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm126, i32 0, i32 0
  %132 = load float, float* %xx127, align 4, !tbaa !300
  %mul128 = fmul float %129, %132
  %133 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis129 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %133, i32 0, i32 3
  %134 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis129, align 8, !tbaa !247
  %ctm130 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %134, i32 0, i32 5
  %xy = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm130, i32 0, i32 1
  %135 = load float, float* %xy, align 4, !tbaa !301
  %136 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis131 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %136, i32 0, i32 3
  %137 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis131, align 8, !tbaa !247
  %ctm132 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %137, i32 0, i32 5
  %xy133 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %ctm132, i32 0, i32 1
  %138 = load float, float* %xy133, align 4, !tbaa !301
  %mul134 = fmul float %135, %138
  %add135 = fadd float %mul128, %mul134
  store float %add135, float* %x1y0, align 4, !tbaa !142
  %139 = load float, float* %x0y1, align 4, !tbaa !142
  %140 = load float, float* %x1y0, align 4, !tbaa !142
  %cmp136 = fcmp oeq float %139, %140
  br i1 %cmp136, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %if.then.113
  store i32 1, i32* %early_accumulator, align 4, !tbaa !21
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.138, %if.then.113
  %141 = bitcast float* %x1y0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %141) #1
  %142 = bitcast float* %x0y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %142) #1
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %land.lhs.true.110, %land.lhs.true.107, %lor.lhs.false.102
  %143 = load i32, i32* %early_accumulator, align 4, !tbaa !21
  %tobool141 = icmp ne i32 %143, 0
  br i1 %tobool141, label %if.then.142, label %if.end.391

if.then.142:                                      ; preds = %if.end.140
  %144 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index143 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %144, i32 0, i32 17
  %145 = load i32, i32* %index143, align 4, !tbaa !224
  %idxprom144 = zext i32 %145 to i64
  %146 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx145 = getelementptr inbounds i64, i64* %146, i64 %idxprom144
  %147 = load i64, i64* %arrayidx145, align 8, !tbaa !25
  %cmp146 = icmp ule i64 %147, 255
  br i1 %cmp146, label %if.then.148, label %if.end.390

if.then.148:                                      ; preds = %if.then.142
  %148 = bitcast %struct.gs_show_enum_s* %psenum to i8*
  call void @llvm.lifetime.start(i64 624, i8* %148) #1
  %149 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %150 = bitcast %struct.gs_text_enum_s* %149 to %struct.gs_show_enum_s*
  %151 = bitcast %struct.gs_show_enum_s* %psenum to i8*
  %152 = bitcast %struct.gs_show_enum_s* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 624, i32 8, i1 false), !tbaa.struct !302
  %153 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %153) #1
  %154 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis149 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %154, i32 0, i32 3
  %155 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis149, align 8, !tbaa !247
  %156 = bitcast %struct.gs_imager_state_s* %155 to %struct.gs_state_s*
  store %struct.gs_state_s* %156, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %157 = bitcast %struct.gs_text_enum_procs_s** %save_procs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %157) #1
  %158 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %158, i32 0, i32 9
  %159 = load %struct.gs_text_enum_procs_s*, %struct.gs_text_enum_procs_s** %procs, align 8, !tbaa !303
  store %struct.gs_text_enum_procs_s* %159, %struct.gs_text_enum_procs_s** %save_procs, align 8, !tbaa !1
  %160 = bitcast %struct.gs_text_enum_procs_s* %special_procs to i8*
  call void @llvm.lifetime.start(i64 56, i8* %160) #1
  %161 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %procs150 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %161, i32 0, i32 9
  %162 = load %struct.gs_text_enum_procs_s*, %struct.gs_text_enum_procs_s** %procs150, align 8, !tbaa !303
  %163 = bitcast %struct.gs_text_enum_procs_s* %special_procs to i8*
  %164 = bitcast %struct.gs_text_enum_procs_s* %162 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %163, i8* %164, i64 56, i32 8, i1 false), !tbaa.struct !304
  %165 = bitcast void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %save_proc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %165) #1
  %166 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %procs151 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %166, i32 0, i32 42
  %get_initial_matrix = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs151, i32 0, i32 1
  %167 = load void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %get_initial_matrix, align 8, !tbaa !305
  store void (%struct.gx_device_s*, %struct.gs_matrix_s*)* %167, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %save_proc, align 8, !tbaa !1
  %168 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.start(i64 24, i8* %168) #1
  %169 = bitcast %struct.gs_matrix_s* %savem to i8*
  call void @llvm.lifetime.start(i64 24, i8* %169) #1
  %set_cache = getelementptr inbounds %struct.gs_text_enum_procs_s, %struct.gs_text_enum_procs_s* %special_procs, i32 0, i32 4
  store i32 (%struct.gs_text_enum_s*, double*, i32)* @pdf_text_set_cache, i32 (%struct.gs_text_enum_s*, double*, i32)** %set_cache, align 8, !tbaa !306
  %170 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %procs152 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %170, i32 0, i32 9
  store %struct.gs_text_enum_procs_s* %special_procs, %struct.gs_text_enum_procs_s** %procs152, align 8, !tbaa !303
  %171 = bitcast %struct.gs_font_s** %rfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %171) #1
  %172 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %172, i32 0, i32 19
  %depth = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack, i32 0, i32 0
  %173 = load i32, i32* %depth, align 4, !tbaa !308
  %cmp153 = icmp slt i32 %173, 0
  br i1 %cmp153, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.148
  %174 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font155 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %174, i32 0, i32 12
  %175 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font155, align 8, !tbaa !227
  br label %cond.end

cond.false:                                       ; preds = %if.then.148
  %176 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack156 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %176, i32 0, i32 19
  %items = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack156, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [6 x %struct.gx_font_stack_item_s], [6 x %struct.gx_font_stack_item_s]* %items, i32 0, i64 0
  %font = getelementptr inbounds %struct.gx_font_stack_item_s, %struct.gx_font_stack_item_s* %arrayidx157, i32 0, i32 0
  %177 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !96
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gs_font_s* [ %175, %cond.true ], [ %177, %cond.false ]
  store %struct.gs_font_s* %cond, %struct.gs_font_s** %rfont, align 8, !tbaa !1
  %178 = bitcast %struct.gs_font_s** %pfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %178) #1
  %179 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack158 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %179, i32 0, i32 19
  %depth159 = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack158, i32 0, i32 0
  %180 = load i32, i32* %depth159, align 4, !tbaa !308
  %cmp160 = icmp slt i32 %180, 0
  br i1 %cmp160, label %cond.true.162, label %cond.false.164

cond.true.162:                                    ; preds = %cond.end
  %181 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font163 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %181, i32 0, i32 12
  %182 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font163, align 8, !tbaa !227
  br label %cond.end.172

cond.false.164:                                   ; preds = %cond.end
  %183 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack165 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %183, i32 0, i32 19
  %depth166 = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack165, i32 0, i32 0
  %184 = load i32, i32* %depth166, align 4, !tbaa !308
  %idxprom167 = sext i32 %184 to i64
  %185 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack168 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %185, i32 0, i32 19
  %items169 = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack168, i32 0, i32 1
  %arrayidx170 = getelementptr inbounds [6 x %struct.gx_font_stack_item_s], [6 x %struct.gx_font_stack_item_s]* %items169, i32 0, i64 %idxprom167
  %font171 = getelementptr inbounds %struct.gx_font_stack_item_s, %struct.gx_font_stack_item_s* %arrayidx170, i32 0, i32 0
  %186 = load %struct.gs_font_s*, %struct.gs_font_s** %font171, align 8, !tbaa !96
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.164, %cond.true.162
  %cond173 = phi %struct.gs_font_s* [ %182, %cond.true.162 ], [ %186, %cond.false.164 ]
  store %struct.gs_font_s* %cond173, %struct.gs_font_s** %pfont, align 8, !tbaa !1
  %187 = bitcast i32* %wmode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %187) #1
  %188 = load %struct.gs_font_s*, %struct.gs_font_s** %rfont, align 8, !tbaa !1
  %WMode = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %188, i32 0, i32 16
  %189 = load i32, i32* %WMode, align 4, !tbaa !192
  store i32 %189, i32* %wmode, align 4, !tbaa !21
  %190 = bitcast %struct.gs_log2_scale_point_s* %log2_scale to i8*
  call void @llvm.lifetime.start(i64 8, i8* %190) #1
  %191 = bitcast %struct.gs_log2_scale_point_s* %log2_scale to i8*
  call void @llvm.memset.p0i8.i64(i8* %191, i8 0, i64 8, i32 4, i1 false)
  %192 = bitcast %struct.gs_fixed_point_s* %subpix_origin to i8*
  call void @llvm.lifetime.start(i64 8, i8* %192) #1
  %193 = bitcast %struct.gs_fixed_point_s* %subpix_origin to i8*
  call void @llvm.memset.p0i8.i64(i8* %193, i8 0, i64 8, i32 4, i1 false)
  %194 = bitcast %struct.cached_fm_pair_s** %pair to i8*
  call void @llvm.lifetime.start(i64 8, i8* %194) #1
  %195 = bitcast %struct.cached_char_s** %cc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %195) #1
  %196 = load %struct.gs_font_s*, %struct.gs_font_s** %pfont, align 8, !tbaa !1
  %197 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis174 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %197, i32 0, i32 3
  %198 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis174, align 8, !tbaa !261
  %ctm175 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %198, i32 0, i32 5
  %199 = bitcast %struct.gs_matrix_fixed_s* %ctm175 to %struct.gs_matrix_s*
  %call176 = call i32 @gx_lookup_fm_pair(%struct.gs_font_s* %196, %struct.gs_matrix_s* %199, %struct.gs_log2_scale_point_s* %log2_scale, i32 0, %struct.cached_fm_pair_s** %pair) #7
  store i32 %call176, i32* %code, align 4, !tbaa !21
  %200 = load i32, i32* %code, align 4, !tbaa !21
  %cmp177 = icmp slt i32 %200, 0
  br i1 %cmp177, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %cond.end.172
  %201 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %201, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.192

if.end.180:                                       ; preds = %cond.end.172
  %202 = load %struct.gs_font_s*, %struct.gs_font_s** %pfont, align 8, !tbaa !1
  %203 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %pair, align 8, !tbaa !1
  %204 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %index181 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %204, i32 0, i32 17
  %205 = load i32, i32* %index181, align 4, !tbaa !224
  %idxprom182 = zext i32 %205 to i64
  %206 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %text183 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %206, i32 0, i32 0
  %data184 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text183, i32 0, i32 1
  %chars185 = bitcast %union.sd_* %data184 to i64**
  %207 = load i64*, i64** %chars185, align 8, !tbaa !1
  %arrayidx186 = getelementptr inbounds i64, i64* %207, i64 %idxprom182
  %208 = load i64, i64* %arrayidx186, align 8, !tbaa !25
  %209 = load i32, i32* %wmode, align 4, !tbaa !21
  %call187 = call %struct.cached_char_s* @gx_lookup_cached_char(%struct.gs_font_s* %202, %struct.cached_fm_pair_s* %203, i64 %208, i32 %209, i32 1, %struct.gs_fixed_point_s* %subpix_origin) #7
  store %struct.cached_char_s* %call187, %struct.cached_char_s** %cc, align 8, !tbaa !1
  %210 = load %struct.cached_char_s*, %struct.cached_char_s** %cc, align 8, !tbaa !1
  %cmp188 = icmp ne %struct.cached_char_s* %210, null
  br i1 %cmp188, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.end.180
  %211 = load %struct.gs_font_s*, %struct.gs_font_s** %pfont, align 8, !tbaa !1
  %dir = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %211, i32 0, i32 3
  %212 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %dir, align 8, !tbaa !185
  %213 = load %struct.cached_char_s*, %struct.cached_char_s** %cc, align 8, !tbaa !1
  %214 = bitcast %struct.cached_char_s* %213 to i8*
  call void @gx_purge_selected_cached_chars(%struct.gs_font_dir_s* %212, i32 (%struct.gs_memory_s*, %struct.cached_char_s*, i8*)* @pdf_query_purge_cached_char, i8* %214) #7
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.190, %if.end.180
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.192

cleanup.192:                                      ; preds = %if.end.191, %if.then.179
  %215 = bitcast %struct.cached_char_s** %cc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %215) #1
  %216 = bitcast %struct.cached_fm_pair_s** %pair to i8*
  call void @llvm.lifetime.end(i64 8, i8* %216) #1
  %217 = bitcast %struct.gs_fixed_point_s* %subpix_origin to i8*
  call void @llvm.lifetime.end(i64 8, i8* %217) #1
  %218 = bitcast %struct.gs_log2_scale_point_s* %log2_scale to i8*
  call void @llvm.lifetime.end(i64 8, i8* %218) #1
  %219 = bitcast i32* %wmode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %219) #1
  %220 = bitcast %struct.gs_font_s** %pfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %220) #1
  %221 = bitcast %struct.gs_font_s** %rfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %221) #1
  %cleanup.dest.199 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.199, label %cleanup.383 [
    i32 0, label %cleanup.cont.200
  ]

cleanup.cont.200:                                 ; preds = %cleanup.192
  %222 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call201 = call i32 @gs_gsave(%struct.gs_state_s* %222) #7
  %pis202 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %psenum, i32 0, i32 3
  %223 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis202, align 8, !tbaa !309
  %224 = bitcast %struct.gs_imager_state_s* %223 to %struct.gs_state_s*
  %pgs203 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %psenum, i32 0, i32 30
  store %struct.gs_state_s* %224, %struct.gs_state_s** %pgs203, align 8, !tbaa !311
  %225 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %font204 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %225, i32 0, i32 70
  %226 = load %struct.gs_font_s*, %struct.gs_font_s** %font204, align 8, !tbaa !312
  %FontMatrix = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %226, i32 0, i32 9
  %227 = bitcast %struct.gs_matrix_s* %savem to i8*
  %228 = bitcast %struct.gs_matrix_s* %FontMatrix to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %227, i8* %228, i64 24, i32 4, i1 false), !tbaa.struct !141
  call void @gs_make_identity(%struct.gs_matrix_s* %m) #7
  %229 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %font205 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %229, i32 0, i32 70
  %230 = load %struct.gs_font_s*, %struct.gs_font_s** %font205, align 8, !tbaa !312
  %FontMatrix206 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %230, i32 0, i32 9
  %231 = bitcast %struct.gs_matrix_s* %FontMatrix206 to i8*
  %232 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %231, i8* %232, i64 24, i32 4, i1 false), !tbaa.struct !141
  %233 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %char_tm_valid = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %233, i32 0, i32 73
  store i32 0, i32* %char_tm_valid, align 4, !tbaa !315
  %234 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %char_tm = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %234, i32 0, i32 72
  %txy_fixed_valid = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %char_tm, i32 0, i32 8
  store i32 0, i32* %txy_fixed_valid, align 4, !tbaa !316
  %235 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %current_point = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %235, i32 0, i32 7
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %current_point, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8, !tbaa !317
  %236 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %current_point207 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %236, i32 0, i32 7
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %current_point207, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !318
  %237 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %char_tm208 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %237, i32 0, i32 72
  %txy_fixed_valid209 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %char_tm208, i32 0, i32 8
  store i32 0, i32* %txy_fixed_valid209, align 4, !tbaa !316
  %238 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index210 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %238, i32 0, i32 17
  %239 = load i32, i32* %index210, align 4, !tbaa !224
  %idxprom211 = zext i32 %239 to i64
  %240 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text212 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %240, i32 0, i32 0
  %data213 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text212, i32 0, i32 1
  %chars214 = bitcast %union.sd_* %data213 to i64**
  %241 = load i64*, i64** %chars214, align 8, !tbaa !1
  %arrayidx215 = getelementptr inbounds i64, i64* %241, i64 %idxprom211
  %242 = load i64, i64* %arrayidx215, align 8, !tbaa !25
  %243 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %243, i32 0, i32 28
  %current_char = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 0
  store i64 %242, i64* %current_char, align 8, !tbaa !319
  %244 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %returned216 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %244, i32 0, i32 28
  %current_char217 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned216, i32 0, i32 0
  store i64 %242, i64* %current_char217, align 8, !tbaa !320
  %245 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %246 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %247 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %248 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %call218 = call i32 @install_charproc_accumulator(%struct.gx_device_pdf_s* %245, %struct.gs_text_enum_s* %246, %struct.gs_text_enum_s* %247, %struct.pdf_text_enum_s* %248) #7
  store i32 %call218, i32* %code, align 4, !tbaa !21
  %249 = load i32, i32* %code, align 4, !tbaa !21
  %cmp219 = icmp slt i32 %249, 0
  br i1 %cmp219, label %if.then.221, label %if.end.222

if.then.221:                                      ; preds = %cleanup.cont.200
  %250 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %250, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.383

if.end.222:                                       ; preds = %cleanup.cont.200
  %251 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text223 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %251, i32 0, i32 0
  %size224 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text223, i32 0, i32 2
  %252 = load i32, i32* %size224, align 4, !tbaa !222
  %cmp225 = icmp ne i32 %252, 1
  br i1 %cmp225, label %if.then.227, label %if.end.232

if.then.227:                                      ; preds = %if.end.222
  %253 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index228 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %253, i32 0, i32 17
  %254 = load i32, i32* %index228, align 4, !tbaa !224
  %add229 = add i32 %254, 1
  %255 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %text230 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %255, i32 0, i32 0
  %size231 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text230, i32 0, i32 2
  store i32 %add229, i32* %size231, align 4, !tbaa !222
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.227, %if.end.222
  %256 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %procs233 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %256, i32 0, i32 42
  %get_initial_matrix234 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs233, i32 0, i32 1
  store void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @pdf_type3_get_initial_matrix, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %get_initial_matrix234, align 8, !tbaa !305
  %257 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %258 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %pte235 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %258, i32 0, i32 191
  store %struct.gs_text_enum_s* %257, %struct.gs_text_enum_s** %pte235, align 8, !tbaa !321
  %259 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %call236 = call i32 @gs_text_process(%struct.gs_text_enum_s* %259) #7
  store i32 %call236, i32* %code, align 4, !tbaa !21
  %260 = load i32, i32* %code, align 4, !tbaa !21
  %cmp237 = icmp slt i32 %260, 0
  br i1 %cmp237, label %if.then.239, label %if.end.240

if.then.239:                                      ; preds = %if.end.232
  %261 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %261, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.383

if.end.240:                                       ; preds = %if.end.232
  %262 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %pte241 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %262, i32 0, i32 191
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte241, align 8, !tbaa !321
  %263 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_just_accumulated242 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %263, i32 0, i32 214
  store i32 0, i32* %charproc_just_accumulated242, align 4, !tbaa !297
  %264 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %font243 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %264, i32 0, i32 70
  %265 = load %struct.gs_font_s*, %struct.gs_font_s** %font243, align 8, !tbaa !312
  %FontMatrix244 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %265, i32 0, i32 9
  %266 = bitcast %struct.gs_matrix_s* %FontMatrix244 to i8*
  %267 = bitcast %struct.gs_matrix_s* %savem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %266, i8* %267, i64 24, i32 4, i1 false), !tbaa.struct !141
  %268 = load void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %save_proc, align 8, !tbaa !1
  %269 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %procs245 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %269, i32 0, i32 42
  %get_initial_matrix246 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs245, i32 0, i32 1
  store void (%struct.gx_device_s*, %struct.gs_matrix_s*)* %268, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %get_initial_matrix246, align 8, !tbaa !305
  %270 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %returned247 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %270, i32 0, i32 28
  %current_char248 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned247, i32 0, i32 0
  %271 = load i64, i64* %current_char248, align 8, !tbaa !320
  %272 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned249 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %272, i32 0, i32 28
  %current_char250 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned249, i32 0, i32 0
  store i64 %271, i64* %current_char250, align 8, !tbaa !319
  %273 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %returned251 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %273, i32 0, i32 28
  %current_glyph = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned251, i32 0, i32 1
  %274 = load i64, i64* %current_glyph, align 8, !tbaa !322
  %275 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned252 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %275, i32 0, i32 28
  %current_glyph253 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned252, i32 0, i32 1
  store i64 %274, i64* %current_glyph253, align 8, !tbaa !323
  %276 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %277 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %278 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %278, i32 0, i32 35
  %call254 = call i32 @pdf_choose_output_char_code(%struct.gx_device_pdf_s* %276, %struct.pdf_text_enum_s* %277, i64* %output_char_code) #7
  store i32 %call254, i32* %code, align 4, !tbaa !21
  %279 = load i32, i32* %code, align 4, !tbaa !21
  %cmp255 = icmp slt i32 %279, 0
  br i1 %cmp255, label %if.then.257, label %if.end.258

if.then.257:                                      ; preds = %if.end.240
  %280 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %280, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.383

if.end.258:                                       ; preds = %if.end.240
  %281 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %282 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %283 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %284 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %call259 = call i32 @complete_charproc(%struct.gx_device_pdf_s* %281, %struct.gs_text_enum_s* %282, %struct.gs_text_enum_s* %283, %struct.pdf_text_enum_s* %284, i32 0) #7
  store i32 %call259, i32* %code, align 4, !tbaa !21
  %285 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font260 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %285, i32 0, i32 12
  %286 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font260, align 8, !tbaa !217
  %FontType261 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %286, i32 0, i32 11
  %287 = load i32, i32* %FontType261, align 4, !tbaa !74
  %cmp262 = icmp eq i32 %287, 53
  br i1 %cmp262, label %if.then.264, label %if.end.369

if.then.264:                                      ; preds = %if.end.258
  %288 = bitcast %struct.cached_char_s** %cc265 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %288) #1
  %289 = bitcast %struct.cached_fm_pair_s** %pair266 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %289) #1
  %290 = bitcast %struct.gs_log2_scale_point_s* %log2_scale267 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %290) #1
  %291 = bitcast %struct.gs_log2_scale_point_s* %log2_scale267 to i8*
  call void @llvm.memset.p0i8.i64(i8* %291, i8 0, i64 8, i32 4, i1 false)
  %292 = bitcast %struct.gs_font_s** %rfont268 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %292) #1
  %293 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack269 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %293, i32 0, i32 19
  %depth270 = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack269, i32 0, i32 0
  %294 = load i32, i32* %depth270, align 4, !tbaa !308
  %cmp271 = icmp slt i32 %294, 0
  br i1 %cmp271, label %cond.true.273, label %cond.false.275

cond.true.273:                                    ; preds = %if.then.264
  %295 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font274 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %295, i32 0, i32 12
  %296 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font274, align 8, !tbaa !227
  br label %cond.end.280

cond.false.275:                                   ; preds = %if.then.264
  %297 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %fstack276 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %297, i32 0, i32 19
  %items277 = getelementptr inbounds %struct.gx_font_stack_s, %struct.gx_font_stack_s* %fstack276, i32 0, i32 1
  %arrayidx278 = getelementptr inbounds [6 x %struct.gx_font_stack_item_s], [6 x %struct.gx_font_stack_item_s]* %items277, i32 0, i64 0
  %font279 = getelementptr inbounds %struct.gx_font_stack_item_s, %struct.gx_font_stack_item_s* %arrayidx278, i32 0, i32 0
  %298 = load %struct.gs_font_s*, %struct.gs_font_s** %font279, align 8, !tbaa !96
  br label %cond.end.280

cond.end.280:                                     ; preds = %cond.false.275, %cond.true.273
  %cond281 = phi %struct.gs_font_s* [ %296, %cond.true.273 ], [ %298, %cond.false.275 ]
  store %struct.gs_font_s* %cond281, %struct.gs_font_s** %rfont268, align 8, !tbaa !1
  %299 = bitcast i32* %wmode282 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %299) #1
  %300 = load %struct.gs_font_s*, %struct.gs_font_s** %rfont268, align 8, !tbaa !1
  %WMode283 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %300, i32 0, i32 16
  %301 = load i32, i32* %WMode283, align 4, !tbaa !192
  store i32 %301, i32* %wmode282, align 4, !tbaa !21
  %302 = bitcast %struct.pdf_font_resource_s** %pdfont284 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %302) #1
  %303 = bitcast %struct.gs_memory_s** %mem to i8*
  call void @llvm.lifetime.start(i64 8, i8* %303) #1
  %304 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %304, i32 0, i32 8
  %305 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !17
  store %struct.gs_memory_s* %305, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %306 = bitcast %struct.gx_device_memory_s** %dev285 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %306) #1
  %307 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %procs286 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %307, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs286, i32 0, i32 8
  %308 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !82
  %309 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %call287 = call i8* %308(%struct.gs_memory_s* %309, %struct.gs_memory_struct_type_s* @st_device_memory, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i32 0, i32 0)) #7
  %310 = bitcast i8* %call287 to %struct.gx_device_memory_s*
  store %struct.gx_device_memory_s* %310, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %311 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %cmp288 = icmp eq %struct.gx_device_memory_s* %311, null
  br i1 %cmp288, label %if.then.290, label %if.end.292

if.then.290:                                      ; preds = %cond.end.280
  %312 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %procs291 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %312, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs291, i32 0, i32 2
  %313 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !18
  %314 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %315 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %316 = bitcast %struct.gx_device_memory_s* %315 to i8*
  call void %313(%struct.gs_memory_s* %314, i8* %316, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i32 0, i32 0)) #7
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.359

if.end.292:                                       ; preds = %cond.end.280
  %317 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %318 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem, align 8, !tbaa !1
  %319 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %dev293 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %319, i32 0, i32 1
  %320 = load %struct.gx_device_s*, %struct.gx_device_s** %dev293, align 8, !tbaa !216
  call void @gs_make_mem_mono_device(%struct.gx_device_memory_s* %317, %struct.gs_memory_s* %318, %struct.gx_device_s* %320) #7
  %321 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %device = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %321, i32 0, i32 78
  %322 = load %struct.gx_device_s*, %struct.gx_device_s** %device, align 8, !tbaa !324
  %HWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %322, i32 0, i32 22
  %arrayidx294 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %323 = load float, float* %arrayidx294, align 4, !tbaa !142
  %324 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %HWResolution295 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %324, i32 0, i32 22
  %arrayidx296 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution295, i32 0, i64 0
  store float %323, float* %arrayidx296, align 4, !tbaa !142
  %325 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %device297 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %325, i32 0, i32 78
  %326 = load %struct.gx_device_s*, %struct.gx_device_s** %device297, align 8, !tbaa !324
  %HWResolution298 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %326, i32 0, i32 22
  %arrayidx299 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution298, i32 0, i64 1
  %327 = load float, float* %arrayidx299, align 4, !tbaa !142
  %328 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %HWResolution300 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %328, i32 0, i32 22
  %arrayidx301 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution300, i32 0, i64 1
  store float %327, float* %arrayidx301, align 4, !tbaa !142
  %329 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %330 = bitcast %struct.gx_device_memory_s* %329 to %struct.gx_device_s*
  call void @gx_device_retain(%struct.gx_device_s* %330, i32 1) #7
  %331 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font302 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %331, i32 0, i32 12
  %332 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font302, align 8, !tbaa !227
  %dir303 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %332, i32 0, i32 3
  %333 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %dir303, align 8, !tbaa !185
  %334 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %call304 = call i32 @gx_alloc_char_bits(%struct.gs_font_dir_s* %333, %struct.gx_device_memory_s* %334, %struct.gx_device_memory_s* null, i16 zeroext 0, i16 zeroext 0, %struct.gs_log2_scale_point_s* %log2_scale267, i32 1, %struct.cached_char_s** %cc265) #7
  store i32 %call304, i32* %code, align 4, !tbaa !21
  %335 = load i32, i32* %code, align 4, !tbaa !21
  %cmp305 = icmp slt i32 %335, 0
  br i1 %cmp305, label %if.then.307, label %if.end.308

if.then.307:                                      ; preds = %if.end.292
  %336 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %336, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.359

if.end.308:                                       ; preds = %if.end.292
  %337 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font309 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %337, i32 0, i32 12
  %338 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font309, align 8, !tbaa !227
  %339 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis310 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %339, i32 0, i32 3
  %340 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis310, align 8, !tbaa !261
  %ctm311 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %340, i32 0, i32 5
  %341 = bitcast %struct.gs_matrix_fixed_s* %ctm311 to %struct.gs_matrix_s*
  %call312 = call i32 @gx_lookup_fm_pair(%struct.gs_font_s* %338, %struct.gs_matrix_s* %341, %struct.gs_log2_scale_point_s* %log2_scale267, i32 0, %struct.cached_fm_pair_s** %pair266) #7
  store i32 %call312, i32* %code, align 4, !tbaa !21
  %342 = load i32, i32* %code, align 4, !tbaa !21
  %cmp313 = icmp slt i32 %342, 0
  br i1 %cmp313, label %if.then.315, label %if.end.316

if.then.315:                                      ; preds = %if.end.308
  %343 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %343, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.359

if.end.316:                                       ; preds = %if.end.308
  %344 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned317 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %344, i32 0, i32 28
  %current_char318 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned317, i32 0, i32 0
  %345 = load i64, i64* %current_char318, align 8, !tbaa !319
  %346 = load %struct.cached_char_s*, %struct.cached_char_s** %cc265, align 8, !tbaa !1
  %code319 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %346, i32 0, i32 8
  store i64 %345, i64* %code319, align 8, !tbaa !325
  %347 = load i32, i32* %wmode282, align 4, !tbaa !21
  %conv320 = trunc i32 %347 to i8
  %348 = load %struct.cached_char_s*, %struct.cached_char_s** %cc265, align 8, !tbaa !1
  %wmode321 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %348, i32 0, i32 9
  store i8 %conv320, i8* %wmode321, align 1, !tbaa !328
  %349 = load %struct.cached_char_s*, %struct.cached_char_s** %cc265, align 8, !tbaa !1
  %subpix_origin322 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %349, i32 0, i32 13
  %y323 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin322, i32 0, i32 1
  store i32 0, i32* %y323, align 4, !tbaa !329
  %350 = load %struct.cached_char_s*, %struct.cached_char_s** %cc265, align 8, !tbaa !1
  %subpix_origin324 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %350, i32 0, i32 13
  %x325 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin324, i32 0, i32 0
  store i32 0, i32* %x325, align 4, !tbaa !330
  %y326 = getelementptr inbounds %struct.gs_log2_scale_point_s, %struct.gs_log2_scale_point_s* %log2_scale267, i32 0, i32 1
  store i32 0, i32* %y326, align 4, !tbaa !331
  %x327 = getelementptr inbounds %struct.gs_log2_scale_point_s, %struct.gs_log2_scale_point_s* %log2_scale267, i32 0, i32 0
  store i32 0, i32* %x327, align 4, !tbaa !332
  %351 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font328 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %351, i32 0, i32 12
  %352 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font328, align 8, !tbaa !227
  %dir329 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %352, i32 0, i32 3
  %353 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %dir329, align 8, !tbaa !185
  %354 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %355 = load %struct.cached_char_s*, %struct.cached_char_s** %cc265, align 8, !tbaa !1
  %356 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %pair266, align 8, !tbaa !1
  %call330 = call i32 @gx_add_cached_char(%struct.gs_font_dir_s* %353, %struct.gx_device_memory_s* %354, %struct.cached_char_s* %355, %struct.cached_fm_pair_s* %356, %struct.gs_log2_scale_point_s* %log2_scale267) #7
  store i32 %call330, i32* %code, align 4, !tbaa !21
  %357 = load i32, i32* %code, align 4, !tbaa !21
  %cmp331 = icmp slt i32 %357, 0
  br i1 %cmp331, label %if.then.333, label %if.end.334

if.then.333:                                      ; preds = %if.end.316
  %358 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %358, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.359

if.end.334:                                       ; preds = %if.end.316
  %359 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %dev285, align 8, !tbaa !1
  %360 = bitcast %struct.gx_device_memory_s* %359 to %struct.gx_device_s*
  call void @gx_device_retain(%struct.gx_device_s* %360, i32 0) #7
  %361 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %362 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font335 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %362, i32 0, i32 12
  %363 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font335, align 8, !tbaa !217
  %call336 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %361, %struct.gs_font_s* %363, %struct.pdf_font_resource_s** %pdfont284, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call336, i32* %code, align 4, !tbaa !21
  %364 = load i32, i32* %code, align 4, !tbaa !21
  %cmp337 = icmp slt i32 %364, 0
  br i1 %cmp337, label %if.then.339, label %if.end.340

if.then.339:                                      ; preds = %if.end.334
  %365 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %365, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.359

if.end.340:                                       ; preds = %if.end.334
  %366 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index341 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %366, i32 0, i32 17
  %367 = load i32, i32* %index341, align 4, !tbaa !224
  %idxprom342 = zext i32 %367 to i64
  %368 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx343 = getelementptr inbounds i64, i64* %368, i64 %idxprom342
  %369 = load i64, i64* %arrayidx343, align 8, !tbaa !25
  %and344 = and i64 %369, 7
  %sh_prom345 = trunc i64 %and344 to i32
  %shr346 = ashr i32 128, %sh_prom345
  %370 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index347 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %370, i32 0, i32 17
  %371 = load i32, i32* %index347, align 4, !tbaa !224
  %idxprom348 = zext i32 %371 to i64
  %372 = load i64*, i64** %cdata, align 8, !tbaa !1
  %arrayidx349 = getelementptr inbounds i64, i64* %372, i64 %idxprom348
  %373 = load i64, i64* %arrayidx349, align 8, !tbaa !25
  %shr350 = lshr i64 %373, 3
  %374 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont284, align 8, !tbaa !1
  %u351 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %374, i32 0, i32 20
  %simple352 = bitcast %union.anon.1* %u351 to %struct.anon.4*
  %s353 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple352, i32 0, i32 7
  %type3354 = bitcast %union.anon.5* %s353 to %struct.anon.8*
  %cached355 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3354, i32 0, i32 6
  %375 = load i8*, i8** %cached355, align 8, !tbaa !202
  %arrayidx356 = getelementptr inbounds i8, i8* %375, i64 %shr350
  %376 = load i8, i8* %arrayidx356, align 1, !tbaa !161
  %conv357 = zext i8 %376 to i32
  %or = or i32 %conv357, %shr346
  %conv358 = trunc i32 %or to i8
  store i8 %conv358, i8* %arrayidx356, align 1, !tbaa !161
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.359

cleanup.359:                                      ; preds = %if.end.340, %if.then.339, %if.then.333, %if.then.315, %if.then.307, %if.then.290
  %377 = bitcast %struct.gx_device_memory_s** %dev285 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %377) #1
  %378 = bitcast %struct.gs_memory_s** %mem to i8*
  call void @llvm.lifetime.end(i64 8, i8* %378) #1
  %379 = bitcast %struct.pdf_font_resource_s** %pdfont284 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %379) #1
  %380 = bitcast i32* %wmode282 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %380) #1
  %381 = bitcast %struct.gs_font_s** %rfont268 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %381) #1
  %382 = bitcast %struct.gs_log2_scale_point_s* %log2_scale267 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %382) #1
  %383 = bitcast %struct.cached_fm_pair_s** %pair266 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %383) #1
  %384 = bitcast %struct.cached_char_s** %cc265 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %384) #1
  %cleanup.dest.367 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.367, label %cleanup.383 [
    i32 0, label %cleanup.cont.368
  ]

cleanup.cont.368:                                 ; preds = %cleanup.359
  br label %if.end.369

if.end.369:                                       ; preds = %cleanup.cont.368, %if.end.258
  %385 = load %struct.gs_text_enum_procs_s*, %struct.gs_text_enum_procs_s** %save_procs, align 8, !tbaa !1
  %386 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %procs370 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %386, i32 0, i32 9
  store %struct.gs_text_enum_procs_s* %385, %struct.gs_text_enum_procs_s** %procs370, align 8, !tbaa !303
  %387 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text371 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %387, i32 0, i32 0
  %size372 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text371, i32 0, i32 2
  %388 = load i32, i32* %size372, align 4, !tbaa !222
  %389 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index373 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %389, i32 0, i32 17
  %390 = load i32, i32* %index373, align 4, !tbaa !224
  %sub374 = sub i32 %388, %390
  store i32 %sub374, i32* %size, align 4, !tbaa !21
  %391 = load i32, i32* %code, align 4, !tbaa !21
  %cmp375 = icmp slt i32 %391, 0
  br i1 %cmp375, label %if.then.377, label %if.end.378

if.then.377:                                      ; preds = %if.end.369
  %392 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %392, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.383

if.end.378:                                       ; preds = %if.end.369
  %393 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath379 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %393, i32 0, i32 231
  %394 = load i32, i32* %type3charpath379, align 4, !tbaa !100
  %tobool380 = icmp ne i32 %394, 0
  br i1 %tobool380, label %if.else.382, label %if.then.381

if.then.381:                                      ; preds = %if.end.378
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.383

if.else.382:                                      ; preds = %if.end.378
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.383

cleanup.383:                                      ; preds = %if.else.382, %if.then.381, %if.then.377, %cleanup.359, %if.then.257, %if.then.239, %if.then.221, %cleanup.192
  %395 = bitcast %struct.gs_matrix_s* %savem to i8*
  call void @llvm.lifetime.end(i64 24, i8* %395) #1
  %396 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.end(i64 24, i8* %396) #1
  %397 = bitcast void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %save_proc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %397) #1
  %398 = bitcast %struct.gs_text_enum_procs_s* %special_procs to i8*
  call void @llvm.lifetime.end(i64 56, i8* %398) #1
  %399 = bitcast %struct.gs_text_enum_procs_s** %save_procs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %399) #1
  %400 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %400) #1
  %401 = bitcast %struct.gs_show_enum_s* %psenum to i8*
  call void @llvm.lifetime.end(i64 624, i8* %401) #1
  br label %cleanup.432

if.end.390:                                       ; preds = %if.then.142
  br label %if.end.391

if.end.391:                                       ; preds = %if.end.390, %if.end.140
  %402 = bitcast %struct.gs_show_enum_s** %penum392 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %402) #1
  %403 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %404 = bitcast %struct.gs_text_enum_s* %403 to %struct.gs_show_enum_s*
  store %struct.gs_show_enum_s* %404, %struct.gs_show_enum_s** %penum392, align 8, !tbaa !1
  %405 = bitcast i32* %save_can_cache to i8*
  call void @llvm.lifetime.start(i64 4, i8* %405) #1
  %406 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum392, align 8, !tbaa !1
  %can_cache = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %406, i32 0, i32 34
  %407 = load i32, i32* %can_cache, align 4, !tbaa !333
  store i32 %407, i32* %save_can_cache, align 4, !tbaa !21
  %408 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %408) #1
  %409 = bitcast %struct.gs_client_color_s** %pcc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %409) #1
  %410 = bitcast %struct.gs_imager_state_s** %pis393 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %410) #1
  %411 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis394 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %411, i32 0, i32 3
  %412 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis394, align 8, !tbaa !261
  store %struct.gs_imager_state_s* %412, %struct.gs_imager_state_s** %pis393, align 8, !tbaa !1
  %413 = bitcast %struct.gs_state_s** %pgs395 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %413) #1
  %414 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis393, align 8, !tbaa !1
  %415 = bitcast %struct.gs_imager_state_s* %414 to %struct.gs_state_s*
  store %struct.gs_state_s* %415, %struct.gs_state_s** %pgs395, align 8, !tbaa !1
  %416 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis393, align 8, !tbaa !1
  %417 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs395, align 8, !tbaa !1
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %417, i32 0, i32 69
  %arrayidx396 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color, i32 0, i64 0
  %dev_color = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx396, i32 0, i32 2
  %418 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color, align 8, !tbaa !105
  %call397 = call i32 @gx_hld_get_color_space_and_ccolor(%struct.gs_imager_state_s* %416, %struct.gx_device_color_s* %418, %struct.gs_color_space_s** %pcs, %struct.gs_client_color_s** %pcc) #7
  %cmp398 = icmp eq i32 %call397, 1
  br i1 %cmp398, label %if.then.400, label %if.end.402

if.then.400:                                      ; preds = %if.end.391
  %419 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum392, align 8, !tbaa !1
  %can_cache401 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %419, i32 0, i32 34
  store i32 -1, i32* %can_cache401, align 4, !tbaa !333
  br label %if.end.402

if.end.402:                                       ; preds = %if.then.400, %if.end.391
  %420 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %421 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %pte403 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %421, i32 0, i32 191
  store %struct.gs_text_enum_s* %420, %struct.gs_text_enum_s** %pte403, align 8, !tbaa !321
  %422 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %call404 = call i32 @gs_text_process(%struct.gs_text_enum_s* %422) #7
  store i32 %call404, i32* %code, align 4, !tbaa !21
  %423 = load i32, i32* %save_can_cache, align 4, !tbaa !21
  %424 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum392, align 8, !tbaa !1
  %can_cache405 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %424, i32 0, i32 34
  store i32 %423, i32* %can_cache405, align 4, !tbaa !333
  %425 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %pte406 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %425, i32 0, i32 191
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte406, align 8, !tbaa !321
  %426 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_just_accumulated407 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %426, i32 0, i32 214
  store i32 0, i32* %charproc_just_accumulated407, align 4, !tbaa !297
  %427 = bitcast %struct.gs_state_s** %pgs395 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %427) #1
  %428 = bitcast %struct.gs_imager_state_s** %pis393 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %428) #1
  %429 = bitcast %struct.gs_client_color_s** %pcc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %429) #1
  %430 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %430) #1
  %431 = bitcast i32* %save_can_cache to i8*
  call void @llvm.lifetime.end(i64 4, i8* %431) #1
  %432 = bitcast %struct.gs_show_enum_s** %penum392 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %432) #1
  %433 = load i32, i32* %code, align 4, !tbaa !21
  %cmp408 = icmp eq i32 %433, 1
  br i1 %cmp408, label %land.lhs.true.410, label %if.end.422

land.lhs.true.410:                                ; preds = %if.end.402
  %434 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath411 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %434, i32 0, i32 231
  %435 = load i32, i32* %type3charpath411, align 4, !tbaa !100
  %tobool412 = icmp ne i32 %435, 0
  br i1 %tobool412, label %if.end.422, label %if.then.413

if.then.413:                                      ; preds = %land.lhs.true.410
  %436 = bitcast i32* %code1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %436) #1
  %437 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %438 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %439 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %440 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %call414 = call i32 @install_PS_charproc_accumulator(%struct.gx_device_pdf_s* %437, %struct.gs_text_enum_s* %438, %struct.gs_text_enum_s* %439, %struct.pdf_text_enum_s* %440) #7
  store i32 %call414, i32* %code1, align 4, !tbaa !21
  %441 = load i32, i32* %code1, align 4, !tbaa !21
  %cmp415 = icmp ne i32 %441, 0
  br i1 %cmp415, label %if.then.417, label %if.end.418

if.then.417:                                      ; preds = %if.then.413
  %442 = load i32, i32* %code1, align 4, !tbaa !21
  store i32 %442, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.419

if.end.418:                                       ; preds = %if.then.413
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.419

cleanup.419:                                      ; preds = %if.end.418, %if.then.417
  %443 = bitcast i32* %code1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %443) #1
  %cleanup.dest.420 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.420, label %cleanup.432 [
    i32 0, label %cleanup.cont.421
  ]

cleanup.cont.421:                                 ; preds = %cleanup.419
  br label %if.end.422

if.end.422:                                       ; preds = %cleanup.cont.421, %land.lhs.true.410, %if.end.402
  %444 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %445 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  call void @gs_text_enum_copy_dynamic(%struct.gs_text_enum_s* %444, %struct.gs_text_enum_s* %445, i32 1) #7
  %446 = load i32, i32* %code, align 4, !tbaa !21
  %tobool423 = icmp ne i32 %446, 0
  br i1 %tobool423, label %if.then.424, label %if.end.425

if.then.424:                                      ; preds = %if.end.422
  %447 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %447, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.432

if.end.425:                                       ; preds = %if.end.422
  %448 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  call void @gs_text_release(%struct.gs_text_enum_s* %448, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)) #7
  %449 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default426 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %449, i32 0, i32 29
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte_default426, align 8, !tbaa !86
  %450 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath427 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %450, i32 0, i32 231
  %451 = load i32, i32* %type3charpath427, align 4, !tbaa !100
  %tobool428 = icmp ne i32 %451, 0
  br i1 %tobool428, label %if.then.429, label %if.end.431

if.then.429:                                      ; preds = %if.end.425
  %452 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath430 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %452, i32 0, i32 231
  store i32 0, i32* %type3charpath430, align 4, !tbaa !100
  br label %if.end.431

if.end.431:                                       ; preds = %if.then.429, %if.end.425
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.432

cleanup.432:                                      ; preds = %if.else, %if.end.431, %if.then.424, %cleanup.419, %cleanup.383, %cleanup, %if.then.58, %if.then.54
  %453 = bitcast i64** %cdata to i8*
  call void @llvm.lifetime.end(i64 8, i8* %453) #1
  %cleanup.dest.433 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.433, label %cleanup.600 [
    i32 3, label %top
    i32 2, label %default_impl
  ]

if.end.434:                                       ; preds = %top
  %454 = bitcast %struct.gs_font_s** %font435 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %454) #1
  %455 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %orig_font436 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %455, i32 0, i32 4
  %456 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font436, align 8, !tbaa !334
  store %struct.gs_font_s* %456, %struct.gs_font_s** %font435, align 8, !tbaa !1
  %457 = load %struct.gs_font_s*, %struct.gs_font_s** %font435, align 8, !tbaa !1
  %FontType437 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %457, i32 0, i32 11
  %458 = load i32, i32* %FontType437, align 4, !tbaa !74
  switch i32 %458, label %sw.default [
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 1, label %sw.bb.438
    i32 2, label %sw.bb.438
    i32 42, label %sw.bb.438
    i32 3, label %sw.bb.438
    i32 53, label %sw.bb.438
    i32 51, label %sw.bb.438
    i32 52, label %sw.bb.438
    i32 54, label %sw.bb.438
    i32 0, label %sw.bb.439
  ]

sw.bb:                                            ; preds = %if.end.434, %if.end.434
  store i32 (%struct.gs_text_enum_s*, i8*, i32)* @process_cid_text, i32 (%struct.gs_text_enum_s*, i8*, i32)** %process, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.438:                                        ; preds = %if.end.434, %if.end.434, %if.end.434, %if.end.434, %if.end.434, %if.end.434, %if.end.434, %if.end.434
  store i32 (%struct.gs_text_enum_s*, i8*, i32)* @process_plain_text, i32 (%struct.gs_text_enum_s*, i8*, i32)** %process, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.439:                                        ; preds = %if.end.434
  %459 = load %struct.gs_font_s*, %struct.gs_font_s** %font435, align 8, !tbaa !1
  %460 = bitcast %struct.gs_font_s* %459 to %struct.gs_font_type0_s*
  %data440 = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %460, i32 0, i32 23
  %FMapType = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data440, i32 0, i32 0
  %461 = load i32, i32* %FMapType, align 4, !tbaa !79
  %cmp441 = icmp eq i32 %461, 9
  %cond443 = select i1 %cmp441, i32 (%struct.gs_text_enum_s*, i8*, i32)* @process_cmap_text, i32 (%struct.gs_text_enum_s*, i8*, i32)* @process_composite_text
  store i32 (%struct.gs_text_enum_s*, i8*, i32)* %cond443, i32 (%struct.gs_text_enum_s*, i8*, i32)** %process, align 8, !tbaa !1
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.434
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup.444

sw.epilog:                                        ; preds = %sw.bb.439, %sw.bb.438, %sw.bb
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.444

cleanup.444:                                      ; preds = %sw.default, %sw.epilog
  %462 = bitcast %struct.gs_font_s** %font435 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %462) #1
  %cleanup.dest.445 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.445, label %cleanup.600 [
    i32 0, label %cleanup.cont.446
    i32 5, label %skip
  ]

cleanup.cont.446:                                 ; preds = %cleanup.444
  %463 = load i32, i32* %operation, align 4, !tbaa !21
  %and447 = and i32 %463, 3
  %tobool448 = icmp ne i32 %and447, 0
  br i1 %tobool448, label %if.then.449, label %if.else.455

if.then.449:                                      ; preds = %cleanup.cont.446
  %464 = load i32, i32* %size, align 4, !tbaa !21
  %conv450 = zext i32 %464 to i64
  %cmp451 = icmp ult i64 %conv450, 8
  br i1 %cmp451, label %if.then.453, label %if.end.454

if.then.453:                                      ; preds = %if.then.449
  store i32 8, i32* %size, align 4, !tbaa !21
  br label %if.end.454

if.end.454:                                       ; preds = %if.then.453, %if.then.449
  br label %if.end.482

if.else.455:                                      ; preds = %cleanup.cont.446
  %465 = load i32, i32* %operation, align 4, !tbaa !21
  %and456 = and i32 %465, 4
  %tobool457 = icmp ne i32 %and456, 0
  br i1 %tobool457, label %if.then.458, label %if.else.462

if.then.458:                                      ; preds = %if.else.455
  %466 = load i32, i32* %size, align 4, !tbaa !21
  %conv459 = zext i32 %466 to i64
  %mul460 = mul i64 %conv459, 8
  %conv461 = trunc i64 %mul460 to i32
  store i32 %conv461, i32* %size, align 4, !tbaa !21
  br label %if.end.481

if.else.462:                                      ; preds = %if.else.455
  %467 = load i32, i32* %operation, align 4, !tbaa !21
  %and463 = and i32 %467, 16
  %tobool464 = icmp ne i32 %and463, 0
  br i1 %tobool464, label %if.then.465, label %if.else.466

if.then.465:                                      ; preds = %if.else.462
  store i32 8, i32* %size, align 4, !tbaa !21
  br label %if.end.480

if.else.466:                                      ; preds = %if.else.462
  %468 = load i32, i32* %operation, align 4, !tbaa !21
  %and467 = and i32 %468, 8
  %tobool468 = icmp ne i32 %and467, 0
  br i1 %tobool468, label %if.then.469, label %if.else.473

if.then.469:                                      ; preds = %if.else.466
  %469 = load i32, i32* %size, align 4, !tbaa !21
  %conv470 = zext i32 %469 to i64
  %mul471 = mul i64 %conv470, 8
  %conv472 = trunc i64 %mul471 to i32
  store i32 %conv472, i32* %size, align 4, !tbaa !21
  br label %if.end.479

if.else.473:                                      ; preds = %if.else.466
  %470 = load i32, i32* %operation, align 4, !tbaa !21
  %and474 = and i32 %470, 32
  %tobool475 = icmp ne i32 %and474, 0
  br i1 %tobool475, label %if.then.476, label %if.else.477

if.then.476:                                      ; preds = %if.else.473
  store i32 8, i32* %size, align 4, !tbaa !21
  br label %if.end.478

if.else.477:                                      ; preds = %if.else.473
  br label %skip

if.end.478:                                       ; preds = %if.then.476
  br label %if.end.479

if.end.479:                                       ; preds = %if.end.478, %if.then.469
  br label %if.end.480

if.end.480:                                       ; preds = %if.end.479, %if.then.465
  br label %if.end.481

if.end.481:                                       ; preds = %if.end.480, %if.then.458
  br label %if.end.482

if.end.482:                                       ; preds = %if.end.481, %if.end.454
  %471 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %orig_font483 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %471, i32 0, i32 4
  %472 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font483, align 8, !tbaa !334
  %FontType484 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %472, i32 0, i32 11
  %473 = load i32, i32* %FontType484, align 4, !tbaa !74
  %cmp485 = icmp eq i32 %473, 0
  br i1 %cmp485, label %if.then.487, label %if.end.508

if.then.487:                                      ; preds = %if.end.482
  %474 = load i32, i32* %size, align 4, !tbaa !21
  %conv488 = zext i32 %474 to i64
  %475 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text489 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %475, i32 0, i32 0
  %size490 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text489, i32 0, i32 2
  %476 = load i32, i32* %size490, align 4, !tbaa !222
  %477 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index491 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %477, i32 0, i32 17
  %478 = load i32, i32* %index491, align 4, !tbaa !224
  %sub492 = sub i32 %476, %478
  %conv493 = zext i32 %sub492 to i64
  %mul494 = mul i64 %conv493, 8
  %mul495 = mul i64 %mul494, 2
  %cmp496 = icmp ult i64 %conv488, %mul495
  br i1 %cmp496, label %if.then.498, label %if.end.507

if.then.498:                                      ; preds = %if.then.487
  %479 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text499 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %479, i32 0, i32 0
  %size500 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text499, i32 0, i32 2
  %480 = load i32, i32* %size500, align 4, !tbaa !222
  %481 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %index501 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %481, i32 0, i32 17
  %482 = load i32, i32* %index501, align 4, !tbaa !224
  %sub502 = sub i32 %480, %482
  %conv503 = zext i32 %sub502 to i64
  %mul504 = mul i64 %conv503, 8
  %mul505 = mul i64 %mul504, 2
  %conv506 = trunc i64 %mul505 to i32
  store i32 %conv506, i32* %size, align 4, !tbaa !21
  br label %if.end.507

if.end.507:                                       ; preds = %if.then.498, %if.then.487
  br label %if.end.508

if.end.508:                                       ; preds = %if.end.507, %if.end.482
  %483 = load i32, i32* %size, align 4, !tbaa !21
  %conv509 = zext i32 %483 to i64
  %cmp510 = icmp ule i64 %conv509, 104
  br i1 %cmp510, label %if.then.512, label %if.else.514

if.then.512:                                      ; preds = %if.end.508
  %484 = load i32 (%struct.gs_text_enum_s*, i8*, i32)*, i32 (%struct.gs_text_enum_s*, i8*, i32)** %process, align 8, !tbaa !1
  %485 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %bytes = bitcast %union.bu_* %buf to [100 x i8]*
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bytes, i32 0, i32 0
  %486 = load i32, i32* %size, align 4, !tbaa !21
  %call513 = call i32 %484(%struct.gs_text_enum_s* %485, i8* %arraydecay, i32 %486) #7
  store i32 %call513, i32* %code, align 4, !tbaa !21
  br label %if.end.531

if.else.514:                                      ; preds = %if.end.508
  %487 = bitcast i8** %buf515 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %487) #1
  %488 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %memory516 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %488, i32 0, i32 8
  %489 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory516, align 8, !tbaa !296
  %procs517 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %489, i32 0, i32 1
  %alloc_string = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs517, i32 0, i32 16
  %490 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_string, align 8, !tbaa !335
  %491 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %memory518 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %491, i32 0, i32 8
  %492 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory518, align 8, !tbaa !296
  %493 = load i32, i32* %size, align 4, !tbaa !21
  %call519 = call i8* %490(%struct.gs_memory_s* %492, i32 %493, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)) #7
  store i8* %call519, i8** %buf515, align 8, !tbaa !1
  %494 = load i8*, i8** %buf515, align 8, !tbaa !1
  %cmp520 = icmp eq i8* %494, null
  br i1 %cmp520, label %if.then.522, label %if.end.523

if.then.522:                                      ; preds = %if.else.514
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.528

if.end.523:                                       ; preds = %if.else.514
  %495 = load i32 (%struct.gs_text_enum_s*, i8*, i32)*, i32 (%struct.gs_text_enum_s*, i8*, i32)** %process, align 8, !tbaa !1
  %496 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %497 = load i8*, i8** %buf515, align 8, !tbaa !1
  %498 = load i32, i32* %size, align 4, !tbaa !21
  %call524 = call i32 %495(%struct.gs_text_enum_s* %496, i8* %497, i32 %498) #7
  store i32 %call524, i32* %code, align 4, !tbaa !21
  %499 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %memory525 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %499, i32 0, i32 8
  %500 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory525, align 8, !tbaa !296
  %procs526 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %500, i32 0, i32 1
  %free_string = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs526, i32 0, i32 19
  %501 = load void (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)** %free_string, align 8, !tbaa !336
  %502 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %memory527 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %502, i32 0, i32 8
  %503 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory527, align 8, !tbaa !296
  %504 = load i8*, i8** %buf515, align 8, !tbaa !1
  %505 = load i32, i32* %size, align 4, !tbaa !21
  call void %501(%struct.gs_memory_s* %503, i8* %504, i32 %505, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)) #7
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.528

cleanup.528:                                      ; preds = %if.end.523, %if.then.522
  %506 = bitcast i8** %buf515 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %506) #1
  %cleanup.dest.529 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.529, label %cleanup.600 [
    i32 0, label %cleanup.cont.530
  ]

cleanup.cont.530:                                 ; preds = %cleanup.528
  br label %if.end.531

if.end.531:                                       ; preds = %cleanup.cont.530, %if.then.512
  br label %skip

skip:                                             ; preds = %if.end.531, %cleanup.444, %if.else.477
  %507 = load i32, i32* %code, align 4, !tbaa !21
  %cmp532 = icmp slt i32 %507, 0
  br i1 %cmp532, label %if.then.573, label %lor.lhs.false.534

lor.lhs.false.534:                                ; preds = %skip
  %508 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font535 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %508, i32 0, i32 12
  %509 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font535, align 8, !tbaa !227
  %FontType536 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %509, i32 0, i32 11
  %510 = load i32, i32* %FontType536, align 4, !tbaa !74
  %cmp537 = icmp eq i32 %510, 3
  br i1 %cmp537, label %land.lhs.true.564, label %lor.lhs.false.539

lor.lhs.false.539:                                ; preds = %lor.lhs.false.534
  %511 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font540 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %511, i32 0, i32 12
  %512 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font540, align 8, !tbaa !227
  %FontType541 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %512, i32 0, i32 11
  %513 = load i32, i32* %FontType541, align 4, !tbaa !74
  %cmp542 = icmp eq i32 %513, 53
  br i1 %cmp542, label %land.lhs.true.564, label %lor.lhs.false.544

lor.lhs.false.544:                                ; preds = %lor.lhs.false.539
  %514 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font545 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %514, i32 0, i32 12
  %515 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font545, align 8, !tbaa !227
  %FontType546 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %515, i32 0, i32 11
  %516 = load i32, i32* %FontType546, align 4, !tbaa !74
  %cmp547 = icmp eq i32 %516, 51
  br i1 %cmp547, label %land.lhs.true.564, label %lor.lhs.false.549

lor.lhs.false.549:                                ; preds = %lor.lhs.false.544
  %517 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font550 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %517, i32 0, i32 12
  %518 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font550, align 8, !tbaa !227
  %FontType551 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %518, i32 0, i32 11
  %519 = load i32, i32* %FontType551, align 4, !tbaa !74
  %cmp552 = icmp eq i32 %519, 52
  br i1 %cmp552, label %land.lhs.true.564, label %lor.lhs.false.554

lor.lhs.false.554:                                ; preds = %lor.lhs.false.549
  %520 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font555 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %520, i32 0, i32 12
  %521 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font555, align 8, !tbaa !227
  %FontType556 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %521, i32 0, i32 11
  %522 = load i32, i32* %FontType556, align 4, !tbaa !74
  %cmp557 = icmp eq i32 %522, 54
  br i1 %cmp557, label %land.lhs.true.564, label %lor.lhs.false.559

lor.lhs.false.559:                                ; preds = %lor.lhs.false.554
  %523 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font560 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %523, i32 0, i32 12
  %524 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font560, align 8, !tbaa !227
  %FontType561 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %524, i32 0, i32 11
  %525 = load i32, i32* %FontType561, align 4, !tbaa !74
  %cmp562 = icmp eq i32 %525, 42
  br i1 %cmp562, label %land.lhs.true.564, label %if.end.593

land.lhs.true.564:                                ; preds = %lor.lhs.false.559, %lor.lhs.false.554, %lor.lhs.false.549, %lor.lhs.false.544, %lor.lhs.false.539, %lor.lhs.false.534
  %526 = load i32, i32* %code, align 4, !tbaa !21
  %cmp565 = icmp ne i32 %526, 2
  br i1 %cmp565, label %land.lhs.true.567, label %if.end.593

land.lhs.true.567:                                ; preds = %land.lhs.true.564
  %527 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %index568 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %527, i32 0, i32 17
  %528 = load i32, i32* %index568, align 4, !tbaa !337
  %529 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %text569 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %529, i32 0, i32 0
  %size570 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text569, i32 0, i32 2
  %530 = load i32, i32* %size570, align 4, !tbaa !219
  %cmp571 = icmp ult i32 %528, %530
  br i1 %cmp571, label %if.then.573, label %if.end.593

if.then.573:                                      ; preds = %land.lhs.true.567, %skip
  %531 = load i32, i32* %code, align 4, !tbaa !21
  %cmp574 = icmp eq i32 %531, -28
  br i1 %cmp574, label %if.then.576, label %if.end.577

if.then.576:                                      ; preds = %if.then.573
  %532 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %532, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

if.end.577:                                       ; preds = %if.then.573
  %533 = load i32, i32* %code, align 4, !tbaa !21
  %cmp578 = icmp eq i32 %533, -25
  br i1 %cmp578, label %if.then.580, label %if.end.581

if.then.580:                                      ; preds = %if.end.577
  %534 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %534, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

if.end.581:                                       ; preds = %if.end.577
  %535 = load i32, i32* %code, align 4, !tbaa !21
  %cmp582 = icmp eq i32 %535, -10
  br i1 %cmp582, label %if.then.584, label %if.end.585

if.then.584:                                      ; preds = %if.end.581
  %536 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %536, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

if.end.585:                                       ; preds = %if.end.581
  br label %default_impl

default_impl:                                     ; preds = %if.end.585, %cleanup.432, %if.then.42, %if.then.5
  %537 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %538 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text586 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %538, i32 0, i32 0
  %call587 = call i32 @pdf_default_text_begin(%struct.gs_text_enum_s* %537, %struct.gs_text_params_s* %text586, %struct.gs_text_enum_s** %pte_default) #7
  store i32 %call587, i32* %code, align 4, !tbaa !21
  %539 = load i32, i32* %code, align 4, !tbaa !21
  %cmp588 = icmp slt i32 %539, 0
  br i1 %cmp588, label %if.then.590, label %if.end.591

if.then.590:                                      ; preds = %default_impl
  %540 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %540, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

if.end.591:                                       ; preds = %default_impl
  %541 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %542 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default592 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %542, i32 0, i32 29
  store %struct.gs_text_enum_s* %541, %struct.gs_text_enum_s** %pte_default592, align 8, !tbaa !86
  %543 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !1
  %544 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  call void @gs_text_enum_copy_dynamic(%struct.gs_text_enum_s* %543, %struct.gs_text_enum_s* %544, i32 0) #7
  br label %if.end.593

if.end.593:                                       ; preds = %if.end.591, %land.lhs.true.567, %land.lhs.true.564, %lor.lhs.false.559
  %545 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default594 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %545, i32 0, i32 29
  %546 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default594, align 8, !tbaa !86
  %tobool595 = icmp ne %struct.gs_text_enum_s* %546, null
  br i1 %tobool595, label %land.lhs.true.596, label %if.end.599

land.lhs.true.596:                                ; preds = %if.end.593
  %547 = load i32, i32* %code, align 4, !tbaa !21
  %tobool597 = icmp ne i32 %547, 0
  br i1 %tobool597, label %if.end.599, label %if.then.598

if.then.598:                                      ; preds = %land.lhs.true.596
  br label %top

if.end.599:                                       ; preds = %land.lhs.true.596, %if.end.593
  %548 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %548, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.600

cleanup.600:                                      ; preds = %if.end.599, %if.then.590, %if.then.584, %if.then.580, %if.then.576, %cleanup.528, %cleanup.444, %cleanup.432, %if.then.7
  %549 = bitcast %union.bu_* %buf to i8*
  call void @llvm.lifetime.end(i64 104, i8* %549) #1
  %550 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %550) #1
  %551 = bitcast i32* %early_accumulator to i8*
  call void @llvm.lifetime.end(i64 4, i8* %551) #1
  %552 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %552) #1
  %553 = bitcast i32 (%struct.gs_text_enum_s*, i8*, i32)** %process to i8*
  call void @llvm.lifetime.end(i64 8, i8* %553) #1
  %554 = bitcast %struct.gs_text_enum_s** %pte_default to i8*
  call void @llvm.lifetime.end(i64 8, i8* %554) #1
  %555 = bitcast i32* %size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %555) #1
  %556 = bitcast i32* %operation to i8*
  call void @llvm.lifetime.end(i64 4, i8* %556) #1
  %557 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %557) #1
  %558 = load i32, i32* %retval
  ret i32 %558
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_is_width_only(%struct.gs_text_enum_s* %pte) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 29
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %tobool = icmp ne %struct.gs_text_enum_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 29
  %6 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default1, align 8, !tbaa !86
  %call = call i32 @gs_text_is_width_only(%struct.gs_text_enum_s* %6) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #1
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_current_width(%struct.gs_text_enum_s* %pte, %struct.gs_point_s* %pwidth) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pwidth.addr = alloca %struct.gs_point_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_point_s* %pwidth, %struct.gs_point_s** %pwidth.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 29
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %tobool = icmp ne %struct.gs_text_enum_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 29
  %6 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default1, align 8, !tbaa !86
  %7 = load %struct.gs_point_s*, %struct.gs_point_s** %pwidth.addr, align 8, !tbaa !1
  %call = call i32 @gs_text_current_width(%struct.gs_text_enum_s* %6, %struct.gs_point_s* %7) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %8) #1
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_set_cache(%struct.gs_text_enum_s* %pte, double* %pw, i32 %control) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pw.addr = alloca double*, align 8
  %control.addr = alloca i32, align 4
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %pgste = alloca %struct.gs_text_enum_s*, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  %m = alloca %struct.gs_matrix_s, align 4
  %cleanup.dest.slot = alloca i32
  %code = alloca i32, align 4
  %glyph = alloca i64, align 8
  %penum_s = alloca %struct.gs_show_enum_s*, align 8
  %clip_box = alloca %struct.gs_fixed_rect_s, align 4
  %pw1 = alloca [10 x double], align 16
  %narg = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.gs_point_s, align 8
  %p137 = alloca %struct.gs_point_s, align 8
  %m178 = alloca %struct.gs_matrix_s, align 4
  %pres = alloca %struct.pdf_resource_s*, align 8
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store double* %pw, double** %pw.addr, align 8, !tbaa !1
  store i32 %control, i32* %control.addr, align 4, !tbaa !161
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = bitcast %struct.gs_text_enum_s** %pgste to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  %5 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %5, i32 0, i32 1
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !292
  %7 = bitcast %struct.gx_device_s* %6 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %7, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %8 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.start(i64 24, i8* %8) #1
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %type3charpath = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 231
  %10 = load i32, i32* %type3charpath, align 4, !tbaa !100
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %11, i32 0, i32 29
  %12 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %13 = load double*, double** %pw.addr, align 8, !tbaa !1
  %14 = load i32, i32* %control.addr, align 4, !tbaa !161
  %call = call i32 @gs_text_set_cache(%struct.gs_text_enum_s* %12, double* %13, i32 %14) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

if.end:                                           ; preds = %entry
  %15 = load i32, i32* %control.addr, align 4, !tbaa !161
  switch i32 %15, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %16 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %16, i32 0, i32 215
  %17 = load i32, i32* %PS_accumulator, align 4, !tbaa !338
  %tobool1 = icmp ne i32 %17, 0
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %sw.bb
  %18 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %18, i32 0, i32 3
  %19 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !261
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %19, i32 0, i32 5
  %20 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %call3 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %20, double 1.000000e-02, double 1.000000e-02, %struct.gs_matrix_s* %m) #7
  %21 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds double, double* %21, i64 0
  %22 = load double, double* %arrayidx, align 8, !tbaa !196
  %23 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx4 = getelementptr inbounds double, double* %23, i64 1
  %24 = load double, double* %arrayidx4, align 8, !tbaa !196
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %25, i32 0, i32 186
  %call5 = call i32 @gs_distance_transform(double %22, double %24, %struct.gs_matrix_s* %m, %struct.gs_point_s* %char_width) #7
  br label %if.end.10

if.else:                                          ; preds = %sw.bb
  %26 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds double, double* %26, i64 0
  %27 = load double, double* %arrayidx6, align 8, !tbaa !196
  %28 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width7 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %28, i32 0, i32 186
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %char_width7, i32 0, i32 0
  store double %27, double* %x, align 8, !tbaa !339
  %29 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx8 = getelementptr inbounds double, double* %29, i64 1
  %30 = load double, double* %arrayidx8, align 8, !tbaa !196
  %31 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width9 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %31, i32 0, i32 186
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %char_width9, i32 0, i32 1
  store double %30, double* %y, align 8, !tbaa !340
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.2
  br label %sw.epilog

sw.bb.11:                                         ; preds = %if.end
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator12 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %32, i32 0, i32 215
  %33 = load i32, i32* %PS_accumulator12, align 4, !tbaa !338
  %tobool13 = icmp ne i32 %33, 0
  br i1 %tobool13, label %if.then.14, label %if.else.22

if.then.14:                                       ; preds = %sw.bb.11
  %34 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis15 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %34, i32 0, i32 3
  %35 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis15, align 8, !tbaa !261
  %ctm16 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %35, i32 0, i32 5
  %36 = bitcast %struct.gs_matrix_fixed_s* %ctm16 to %struct.gs_matrix_s*
  %call17 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %36, double 1.000000e-02, double 1.000000e-02, %struct.gs_matrix_s* %m) #7
  %37 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx18 = getelementptr inbounds double, double* %37, i64 0
  %38 = load double, double* %arrayidx18, align 8, !tbaa !196
  %39 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx19 = getelementptr inbounds double, double* %39, i64 1
  %40 = load double, double* %arrayidx19, align 8, !tbaa !196
  %41 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width20 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %41, i32 0, i32 186
  %call21 = call i32 @gs_distance_transform(double %38, double %40, %struct.gs_matrix_s* %m, %struct.gs_point_s* %char_width20) #7
  br label %if.end.29

if.else.22:                                       ; preds = %sw.bb.11
  %42 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx23 = getelementptr inbounds double, double* %42, i64 0
  %43 = load double, double* %arrayidx23, align 8, !tbaa !196
  %44 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width24 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %44, i32 0, i32 186
  %x25 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %char_width24, i32 0, i32 0
  store double %43, double* %x25, align 8, !tbaa !339
  %45 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx26 = getelementptr inbounds double, double* %45, i64 1
  %46 = load double, double* %arrayidx26, align 8, !tbaa !196
  %47 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %char_width27 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %47, i32 0, i32 186
  %y28 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %char_width27, i32 0, i32 1
  store double %46, double* %y28, align 8, !tbaa !340
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.22, %if.then.14
  %48 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cdevproc_callout = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %48, i32 0, i32 32
  %49 = load i32, i32* %cdevproc_callout, align 4, !tbaa !89
  %tobool30 = icmp ne i32 %49, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.end.29
  %50 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %cdevproc_result = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %50, i32 0, i32 33
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %cdevproc_result, i32 0, i32 0
  %51 = bitcast double* %arraydecay to i8*
  %52 = load double*, double** %pw.addr, align 8, !tbaa !1
  %53 = bitcast double* %52 to i8*
  %call32 = call i8* @memcpy(i8* %51, i8* %53, i64 80) #9
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

if.end.33:                                        ; preds = %if.end.29
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

sw.epilog:                                        ; preds = %if.end.33, %if.end.10
  %54 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator34 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %54, i32 0, i32 215
  %55 = load i32, i32* %PS_accumulator34, align 4, !tbaa !338
  %tobool35 = icmp ne i32 %55, 0
  br i1 %tobool35, label %if.else.37, label %if.then.36

if.then.36:                                       ; preds = %sw.epilog
  %56 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %57 = bitcast %struct.pdf_text_enum_s* %56 to %struct.gs_text_enum_s*
  store %struct.gs_text_enum_s* %57, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  br label %if.end.39

if.else.37:                                       ; preds = %sw.epilog
  %58 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default38 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %58, i32 0, i32 29
  %59 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default38, align 8, !tbaa !86
  store %struct.gs_text_enum_s* %59, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.then.36
  %60 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %60, i32 0, i32 12
  %61 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %61, i32 0, i32 11
  %62 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %62, 3
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.39
  %63 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font40 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %63, i32 0, i32 12
  %64 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font40, align 8, !tbaa !217
  %FontType41 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %64, i32 0, i32 11
  %65 = load i32, i32* %FontType41, align 4, !tbaa !74
  %cmp42 = icmp eq i32 %65, 53
  br i1 %cmp42, label %land.lhs.true, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false
  %66 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font44 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %66, i32 0, i32 12
  %67 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font44, align 8, !tbaa !217
  %FontType45 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %67, i32 0, i32 11
  %68 = load i32, i32* %FontType45, align 4, !tbaa !74
  %cmp46 = icmp eq i32 %68, 51
  br i1 %cmp46, label %land.lhs.true, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %lor.lhs.false.43
  %69 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font48 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %69, i32 0, i32 12
  %70 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font48, align 8, !tbaa !217
  %FontType49 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %70, i32 0, i32 11
  %71 = load i32, i32* %FontType49, align 4, !tbaa !74
  %cmp50 = icmp eq i32 %71, 52
  br i1 %cmp50, label %land.lhs.true, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %lor.lhs.false.47
  %72 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %current_font52 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %72, i32 0, i32 12
  %73 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font52, align 8, !tbaa !217
  %FontType53 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %73, i32 0, i32 11
  %74 = load i32, i32* %FontType53, align 4, !tbaa !74
  %cmp54 = icmp eq i32 %74, 54
  br i1 %cmp54, label %land.lhs.true, label %if.end.208

land.lhs.true:                                    ; preds = %lor.lhs.false.51, %lor.lhs.false.47, %lor.lhs.false.43, %lor.lhs.false, %if.end.39
  %75 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %outer_CID = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %75, i32 0, i32 13
  %76 = load i64, i64* %outer_CID, align 8, !tbaa !341
  %cmp55 = icmp eq i64 %76, 2147483647
  br i1 %cmp55, label %land.lhs.true.56, label %if.end.208

land.lhs.true.56:                                 ; preds = %land.lhs.true
  %77 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %77, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %78 = load i32, i32* %operation, align 4, !tbaa !225
  %and = and i32 %78, 2048
  %tobool57 = icmp ne i32 %and, 0
  br i1 %tobool57, label %if.end.208, label %if.then.58

if.then.58:                                       ; preds = %land.lhs.true.56
  %79 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %79) #1
  %80 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %80) #1
  %81 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %81, i32 0, i32 28
  %current_glyph = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 1
  %82 = load i64, i64* %current_glyph, align 8, !tbaa !323
  store i64 %82, i64* %glyph, align 8, !tbaa !25
  %83 = load i64, i64* %glyph, align 8, !tbaa !25
  %cmp59 = icmp ne i64 %83, 2147483647
  br i1 %cmp59, label %land.lhs.true.60, label %lor.lhs.false.62

land.lhs.true.60:                                 ; preds = %if.then.58
  %84 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %84, i32 0, i32 35
  %85 = load i64, i64* %output_char_code, align 8, !tbaa !92
  %cmp61 = icmp ne i64 %85, -1
  br i1 %cmp61, label %if.then.65, label %lor.lhs.false.62

lor.lhs.false.62:                                 ; preds = %land.lhs.true.60, %if.then.58
  %86 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator63 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %86, i32 0, i32 215
  %87 = load i32, i32* %PS_accumulator63, align 4, !tbaa !338
  %tobool64 = icmp ne i32 %87, 0
  br i1 %tobool64, label %if.else.177, label %if.then.65

if.then.65:                                       ; preds = %lor.lhs.false.62, %land.lhs.true.60
  %88 = bitcast %struct.gs_show_enum_s** %penum_s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %88) #1
  %89 = bitcast %struct.gs_fixed_rect_s* %clip_box to i8*
  call void @llvm.lifetime.start(i64 16, i8* %89) #1
  %90 = bitcast [10 x double]* %pw1 to i8*
  call void @llvm.lifetime.start(i64 80, i8* %90) #1
  %91 = bitcast i32* %narg to i8*
  call void @llvm.lifetime.start(i64 4, i8* %91) #1
  %92 = load i32, i32* %control.addr, align 4, !tbaa !161
  %cmp66 = icmp eq i32 %92, 0
  br i1 %cmp66, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.65
  br label %cond.end

cond.false:                                       ; preds = %if.then.65
  %93 = load i32, i32* %control.addr, align 4, !tbaa !161
  %cmp67 = icmp eq i32 %93, 1
  %cond = select i1 %cmp67, i32 6, i32 10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond68 = phi i32 [ 2, %cond.true ], [ %cond, %cond.false ]
  store i32 %cond68, i32* %narg, align 4, !tbaa !21
  %94 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %94) #1
  %95 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %95, i32 0, i32 8
  %96 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !296
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %96, i32 0, i32 1
  %object_type = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 15
  %97 = load %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)** %object_type, align 8, !tbaa !342
  %98 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  %memory69 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %98, i32 0, i32 8
  %99 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory69, align 8, !tbaa !296
  %100 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  %101 = bitcast %struct.gs_text_enum_s* %100 to i8*
  %call70 = call %struct.gs_memory_struct_type_s* %97(%struct.gs_memory_s* %99, i8* %101) #7
  %cmp71 = icmp ne %struct.gs_memory_struct_type_s* %call70, @st_gs_show_enum
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %cond.end
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.73:                                        ; preds = %cond.end
  %102 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pgste, align 8, !tbaa !1
  %103 = bitcast %struct.gs_text_enum_s* %102 to %struct.gs_show_enum_s*
  store %struct.gs_show_enum_s* %103, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.73
  %104 = load i32, i32* %i, align 4, !tbaa !21
  %105 = load i32, i32* %narg, align 4, !tbaa !21
  %cmp74 = icmp slt i32 %104, %105
  br i1 %cmp74, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %106 = bitcast %struct.gs_point_s* %p to i8*
  call void @llvm.lifetime.start(i64 16, i8* %106) #1
  %107 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom = sext i32 %107 to i64
  %108 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx75 = getelementptr inbounds double, double* %108, i64 %idxprom
  %109 = load double, double* %arrayidx75, align 8, !tbaa !196
  %110 = load i32, i32* %i, align 4, !tbaa !21
  %add = add nsw i32 %110, 1
  %idxprom76 = sext i32 %add to i64
  %111 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx77 = getelementptr inbounds double, double* %111, i64 %idxprom76
  %112 = load double, double* %arrayidx77, align 8, !tbaa !196
  %113 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  %pgs = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %113, i32 0, i32 30
  %114 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !311
  %ctm78 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %114, i32 0, i32 5
  %115 = bitcast %struct.gs_matrix_fixed_s* %ctm78 to %struct.gs_matrix_s*
  %call79 = call i32 @gs_point_transform(double %109, double %112, %struct.gs_matrix_s* %115, %struct.gs_point_s* %p) #7
  %x80 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %116 = load double, double* %x80, align 8, !tbaa !22
  %117 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom81 = sext i32 %117 to i64
  %arrayidx82 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 %idxprom81
  store double %116, double* %arrayidx82, align 8, !tbaa !196
  %y83 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 1
  %118 = load double, double* %y83, align 8, !tbaa !23
  %119 = load i32, i32* %i, align 4, !tbaa !21
  %add84 = add nsw i32 %119, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 %idxprom85
  store double %118, double* %arrayidx86, align 8, !tbaa !196
  %120 = bitcast %struct.gs_point_s* %p to i8*
  call void @llvm.lifetime.end(i64 16, i8* %120) #1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %121 = load i32, i32* %i, align 4, !tbaa !21
  %add87 = add nsw i32 %121, 2
  store i32 %add87, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %122 = load i32, i32* %control.addr, align 4, !tbaa !161
  %cmp88 = icmp ne i32 %122, 0
  br i1 %cmp88, label %if.then.89, label %if.else.107

if.then.89:                                       ; preds = %for.end
  %arrayidx90 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 2
  %123 = load double, double* %arrayidx90, align 8, !tbaa !196
  %mul = fmul double %123, 2.560000e+02
  %conv = fptosi double %mul to i32
  %p91 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 0
  %x92 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p91, i32 0, i32 0
  store i32 %conv, i32* %x92, align 4, !tbaa !343
  %arrayidx93 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 3
  %124 = load double, double* %arrayidx93, align 8, !tbaa !196
  %mul94 = fmul double %124, 2.560000e+02
  %conv95 = fptosi double %mul94 to i32
  %p96 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 0
  %y97 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p96, i32 0, i32 1
  store i32 %conv95, i32* %y97, align 4, !tbaa !344
  %arrayidx98 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 4
  %125 = load double, double* %arrayidx98, align 8, !tbaa !196
  %mul99 = fmul double %125, 2.560000e+02
  %conv100 = fptosi double %mul99 to i32
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 1
  %x101 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  store i32 %conv100, i32* %x101, align 4, !tbaa !345
  %arrayidx102 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 5
  %126 = load double, double* %arrayidx102, align 8, !tbaa !196
  %mul103 = fmul double %126, 2.560000e+02
  %conv104 = fptosi double %mul103 to i32
  %q105 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 1
  %y106 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q105, i32 0, i32 1
  store i32 %conv104, i32* %y106, align 4, !tbaa !346
  br label %if.end.116

if.else.107:                                      ; preds = %for.end
  %p108 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 0
  %y109 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p108, i32 0, i32 1
  store i32 -1073741824, i32* %y109, align 4, !tbaa !344
  %p110 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 0
  %x111 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p110, i32 0, i32 0
  store i32 -1073741824, i32* %x111, align 4, !tbaa !343
  %q112 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 1
  %y113 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q112, i32 0, i32 1
  store i32 1073741823, i32* %y113, align 4, !tbaa !346
  %q114 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %clip_box, i32 0, i32 1
  %x115 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q114, i32 0, i32 0
  store i32 1073741823, i32* %x115, align 4, !tbaa !345
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.107, %if.then.89
  %127 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  %pgs117 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %127, i32 0, i32 30
  %128 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs117, align 8, !tbaa !311
  %call118 = call i32 @gx_clip_to_rectangle(%struct.gs_state_s* %128, %struct.gs_fixed_rect_s* %clip_box) #7
  store i32 %call118, i32* %code, align 4, !tbaa !21
  %129 = load i32, i32* %code, align 4, !tbaa !21
  %cmp119 = icmp slt i32 %129, 0
  br i1 %cmp119, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %if.end.116
  %130 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %130, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.122:                                       ; preds = %if.end.116
  %131 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator123 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %131, i32 0, i32 215
  %132 = load i32, i32* %PS_accumulator123, align 4, !tbaa !338
  %tobool124 = icmp ne i32 %132, 0
  br i1 %tobool124, label %if.then.125, label %if.else.129

if.then.125:                                      ; preds = %if.end.122
  %133 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  %pgs126 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %133, i32 0, i32 30
  %134 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs126, align 8, !tbaa !311
  %ctm127 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %134, i32 0, i32 5
  %135 = bitcast %struct.gs_matrix_fixed_s* %ctm127 to %struct.gs_matrix_s*
  %call128 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %135, double 1.000000e-02, double 1.000000e-02, %struct.gs_matrix_s* %m) #7
  br label %if.end.132

if.else.129:                                      ; preds = %if.end.122
  %136 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  %pgs130 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %136, i32 0, i32 30
  %137 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs130, align 8, !tbaa !311
  %ctm131 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %137, i32 0, i32 5
  %138 = bitcast %struct.gs_matrix_fixed_s* %ctm131 to %struct.gs_matrix_s*
  %139 = bitcast %struct.gs_matrix_s* %m to i8*
  %140 = bitcast %struct.gs_matrix_s* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 24, i32 4, i1 false), !tbaa.struct !141
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.125
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.inc.151, %if.end.132
  %141 = load i32, i32* %i, align 4, !tbaa !21
  %142 = load i32, i32* %narg, align 4, !tbaa !21
  %cmp134 = icmp slt i32 %141, %142
  br i1 %cmp134, label %for.body.136, label %for.end.153

for.body.136:                                     ; preds = %for.cond.133
  %143 = bitcast %struct.gs_point_s* %p137 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %143) #1
  %144 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom138 = sext i32 %144 to i64
  %145 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx139 = getelementptr inbounds double, double* %145, i64 %idxprom138
  %146 = load double, double* %arrayidx139, align 8, !tbaa !196
  %147 = load i32, i32* %i, align 4, !tbaa !21
  %add140 = add nsw i32 %147, 1
  %idxprom141 = sext i32 %add140 to i64
  %148 = load double*, double** %pw.addr, align 8, !tbaa !1
  %arrayidx142 = getelementptr inbounds double, double* %148, i64 %idxprom141
  %149 = load double, double* %arrayidx142, align 8, !tbaa !196
  %call143 = call i32 @gs_point_transform(double %146, double %149, %struct.gs_matrix_s* %m, %struct.gs_point_s* %p137) #7
  %x144 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p137, i32 0, i32 0
  %150 = load double, double* %x144, align 8, !tbaa !22
  %151 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom145 = sext i32 %151 to i64
  %arrayidx146 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 %idxprom145
  store double %150, double* %arrayidx146, align 8, !tbaa !196
  %y147 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p137, i32 0, i32 1
  %152 = load double, double* %y147, align 8, !tbaa !23
  %153 = load i32, i32* %i, align 4, !tbaa !21
  %add148 = add nsw i32 %153, 1
  %idxprom149 = sext i32 %add148 to i64
  %arrayidx150 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i64 %idxprom149
  store double %152, double* %arrayidx150, align 8, !tbaa !196
  %154 = bitcast %struct.gs_point_s* %p137 to i8*
  call void @llvm.lifetime.end(i64 16, i8* %154) #1
  br label %for.inc.151

for.inc.151:                                      ; preds = %for.body.136
  %155 = load i32, i32* %i, align 4, !tbaa !21
  %add152 = add nsw i32 %155, 2
  store i32 %add152, i32* %i, align 4, !tbaa !21
  br label %for.cond.133

for.end.153:                                      ; preds = %for.cond.133
  %156 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator154 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %156, i32 0, i32 215
  %157 = load i32, i32* %PS_accumulator154, align 4, !tbaa !338
  %tobool155 = icmp ne i32 %157, 0
  br i1 %tobool155, label %if.else.161, label %if.then.156

if.then.156:                                      ; preds = %for.end.153
  %158 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %159 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font157 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %159, i32 0, i32 12
  %160 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font157, align 8, !tbaa !227
  %arraydecay158 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i32 0
  %161 = load i32, i32* %narg, align 4, !tbaa !21
  %162 = load i32, i32* %control.addr, align 4, !tbaa !161
  %163 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %returned159 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %163, i32 0, i32 28
  %current_char = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned159, i32 0, i32 0
  %164 = load i64, i64* %current_char, align 8, !tbaa !319
  %call160 = call i32 @pdf_set_charproc_attrs(%struct.gx_device_pdf_s* %158, %struct.gs_font_s* %160, double* %arraydecay158, i32 %161, i32 %162, i64 %164, i32 0) #7
  store i32 %call160, i32* %code, align 4, !tbaa !21
  br label %if.end.166

if.else.161:                                      ; preds = %for.end.153
  %165 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %166 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font162 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %166, i32 0, i32 12
  %167 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font162, align 8, !tbaa !227
  %arraydecay163 = getelementptr inbounds [10 x double], [10 x double]* %pw1, i32 0, i32 0
  %168 = load i32, i32* %narg, align 4, !tbaa !21
  %169 = load i32, i32* %control.addr, align 4, !tbaa !161
  %170 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %output_char_code164 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %170, i32 0, i32 35
  %171 = load i64, i64* %output_char_code164, align 8, !tbaa !92
  %call165 = call i32 @pdf_set_charproc_attrs(%struct.gx_device_pdf_s* %165, %struct.gs_font_s* %167, double* %arraydecay163, i32 %168, i32 %169, i64 %171, i32 1) #7
  store i32 %call165, i32* %code, align 4, !tbaa !21
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.161, %if.then.156
  %172 = load i32, i32* %code, align 4, !tbaa !21
  %cmp167 = icmp slt i32 %172, 0
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %if.end.166
  %173 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %173, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.170:                                       ; preds = %if.end.166
  %174 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %penum_s, align 8, !tbaa !1
  %pgs171 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %174, i32 0, i32 30
  %175 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs171, align 8, !tbaa !311
  %call172 = call i64 @gx_get_clip_path_id(%struct.gs_state_s* %175) #7
  %176 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %clip_path_id = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %176, i32 0, i32 59
  store i64 %call172, i64* %clip_path_id, align 8, !tbaa !347
  %177 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %177, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.170, %if.then.169, %if.then.121, %if.then.72
  %178 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %178) #1
  %179 = bitcast i32* %narg to i8*
  call void @llvm.lifetime.end(i64 4, i8* %179) #1
  %180 = bitcast [10 x double]* %pw1 to i8*
  call void @llvm.lifetime.end(i64 80, i8* %180) #1
  %181 = bitcast %struct.gs_fixed_rect_s* %clip_box to i8*
  call void @llvm.lifetime.end(i64 16, i8* %181) #1
  %182 = bitcast %struct.gs_show_enum_s** %penum_s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %182) #1
  br label %cleanup.204

if.else.177:                                      ; preds = %lor.lhs.false.62
  %183 = bitcast %struct.gs_matrix_s* %m178 to i8*
  call void @llvm.lifetime.start(i64 24, i8* %183) #1
  %184 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.start(i64 8, i8* %184) #1
  %185 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %accumulating_substream_resource = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %185, i32 0, i32 210
  %186 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %accumulating_substream_resource, align 8, !tbaa !348
  store %struct.pdf_resource_s* %186, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %187 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %call179 = call i32 @pdf_exit_substream(%struct.gx_device_pdf_s* %187) #7
  store i32 %call179, i32* %code, align 4, !tbaa !21
  %188 = load i32, i32* %code, align 4, !tbaa !21
  %cmp180 = icmp slt i32 %188, 0
  br i1 %cmp180, label %if.then.182, label %if.end.183

if.then.182:                                      ; preds = %if.else.177
  %189 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %189, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.201

if.end.183:                                       ; preds = %if.else.177
  %190 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %191 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  %call184 = call i32 @pdf_cancel_resource(%struct.gx_device_pdf_s* %190, %struct.pdf_resource_s* %191, i32 7) #7
  store i32 %call184, i32* %code, align 4, !tbaa !21
  %192 = load i32, i32* %code, align 4, !tbaa !21
  %cmp185 = icmp slt i32 %192, 0
  br i1 %cmp185, label %if.then.187, label %if.end.188

if.then.187:                                      ; preds = %if.end.183
  %193 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %193, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.201

if.end.188:                                       ; preds = %if.end.183
  %194 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %195 = load %struct.pdf_resource_s*, %struct.pdf_resource_s** %pres, align 8, !tbaa !1
  call void @pdf_forget_resource(%struct.gx_device_pdf_s* %194, %struct.pdf_resource_s* %195, i32 7) #7
  %196 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis189 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %196, i32 0, i32 3
  %197 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis189, align 8, !tbaa !247
  %ctm190 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %197, i32 0, i32 5
  %198 = bitcast %struct.gs_matrix_fixed_s* %ctm190 to %struct.gs_matrix_s*
  %199 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis191 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %199, i32 0, i32 3
  %200 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis191, align 8, !tbaa !247
  %ctm192 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %200, i32 0, i32 5
  %201 = bitcast %struct.gs_matrix_fixed_s* %ctm192 to %struct.gs_matrix_s*
  %call193 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %198, double 1.000000e-02, double 1.000000e-02, %struct.gs_matrix_s* %201) #7
  %202 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %202, i32 0, i32 13
  %203 = load i32, i32* %width, align 4, !tbaa !349
  %div = sdiv i32 %203, 100
  store i32 %div, i32* %width, align 4, !tbaa !349
  %204 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %204, i32 0, i32 14
  %205 = load i32, i32* %height, align 4, !tbaa !350
  %div194 = sdiv i32 %205, 100
  store i32 %div194, i32* %height, align 4, !tbaa !350
  %206 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_ctm = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %206, i32 0, i32 211
  %207 = bitcast %struct.gs_matrix_fixed_s* %charproc_ctm to %struct.gs_matrix_s*
  %208 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis195 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %208, i32 0, i32 3
  %209 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis195, align 8, !tbaa !247
  %ctm196 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %209, i32 0, i32 5
  %210 = bitcast %struct.gs_matrix_fixed_s* %ctm196 to %struct.gs_matrix_s*
  %call197 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %207, %struct.gs_matrix_s* %210, %struct.gs_matrix_s* %m178) #7
  %211 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pis198 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %211, i32 0, i32 3
  %212 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis198, align 8, !tbaa !247
  %ctm199 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %212, i32 0, i32 5
  %call200 = call i32 @gs_matrix_fixed_from_matrix(%struct.gs_matrix_fixed_s* %ctm199, %struct.gs_matrix_s* %m178) #7
  %213 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %213, i32 0, i32 31
  store i32 0, i32* %charproc_accum, align 4, !tbaa !87
  %214 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %accumulating_charproc = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %214, i32 0, i32 212
  store i32 0, i32* %accumulating_charproc, align 4, !tbaa !88
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.201

cleanup.201:                                      ; preds = %if.end.188, %if.then.187, %if.then.182
  %215 = bitcast %struct.pdf_resource_s** %pres to i8*
  call void @llvm.lifetime.end(i64 8, i8* %215) #1
  %216 = bitcast %struct.gs_matrix_s* %m178 to i8*
  call void @llvm.lifetime.end(i64 24, i8* %216) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.204 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup.201
  br label %if.end.203

if.end.203:                                       ; preds = %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.204

cleanup.204:                                      ; preds = %if.end.203, %cleanup.201, %cleanup
  %217 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %217) #1
  %218 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %218) #1
  %cleanup.dest.206 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.206, label %cleanup.227 [
    i32 0, label %cleanup.cont.207
  ]

cleanup.cont.207:                                 ; preds = %cleanup.204
  br label %if.end.208

if.end.208:                                       ; preds = %cleanup.cont.207, %land.lhs.true.56, %land.lhs.true, %lor.lhs.false.51
  %219 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %PS_accumulator209 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %219, i32 0, i32 215
  %220 = load i32, i32* %PS_accumulator209, align 4, !tbaa !338
  %tobool210 = icmp ne i32 %220, 0
  br i1 %tobool210, label %land.lhs.true.211, label %if.end.226

land.lhs.true.211:                                ; preds = %if.end.208
  %221 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default212 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %221, i32 0, i32 29
  %222 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default212, align 8, !tbaa !86
  %tobool213 = icmp ne %struct.gs_text_enum_s* %222, null
  br i1 %tobool213, label %if.then.214, label %if.end.226

if.then.214:                                      ; preds = %land.lhs.true.211
  %223 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default215 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %223, i32 0, i32 29
  %224 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default215, align 8, !tbaa !86
  %text216 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %224, i32 0, i32 0
  %operation217 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text216, i32 0, i32 0
  %225 = load i32, i32* %operation217, align 4, !tbaa !225
  %and218 = and i32 %225, 2048
  %tobool219 = icmp ne i32 %and218, 0
  br i1 %tobool219, label %if.then.220, label %if.else.223

if.then.220:                                      ; preds = %if.then.214
  %226 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default221 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %226, i32 0, i32 29
  %227 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default221, align 8, !tbaa !86
  %228 = load double*, double** %pw.addr, align 8, !tbaa !1
  %call222 = call i32 @gs_text_set_cache(%struct.gs_text_enum_s* %227, double* %228, i32 0) #7
  store i32 %call222, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

if.else.223:                                      ; preds = %if.then.214
  %229 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default224 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %229, i32 0, i32 29
  %230 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default224, align 8, !tbaa !86
  %231 = load double*, double** %pw.addr, align 8, !tbaa !1
  %232 = load i32, i32* %control.addr, align 4, !tbaa !161
  %call225 = call i32 @gs_text_set_cache(%struct.gs_text_enum_s* %230, double* %231, i32 %232) #7
  store i32 %call225, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

if.end.226:                                       ; preds = %land.lhs.true.211, %if.end.208
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.227

cleanup.227:                                      ; preds = %if.end.226, %if.else.223, %if.then.220, %cleanup.204, %sw.default, %if.then.31, %if.then
  %233 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.end(i64 24, i8* %233) #1
  %234 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %234) #1
  %235 = bitcast %struct.gs_text_enum_s** %pgste to i8*
  call void @llvm.lifetime.end(i64 8, i8* %235) #1
  %236 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %236) #1
  %237 = load i32, i32* %retval
  ret i32 %237
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_text_retry(%struct.gs_text_enum_s* %pte) #0 {
entry:
  %retval = alloca i32, align 4
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 29
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %tobool = icmp ne %struct.gs_text_enum_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 29
  %6 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default1, align 8, !tbaa !86
  %call = call i32 @gs_text_retry(%struct.gs_text_enum_s* %6) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #1
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal void @pdf_text_release(%struct.gs_text_enum_s* %pte, i8* %cname) #0 {
entry:
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %cname.addr = alloca i8*, align 8
  %penum = alloca %struct.pdf_text_enum_s*, align 8
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store i8* %cname, i8** %cname.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_text_enum_s* %1 to %struct.pdf_text_enum_s*
  store %struct.pdf_text_enum_s* %2, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 29
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default, align 8, !tbaa !86
  %tobool = icmp ne %struct.gs_text_enum_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %5, i32 0, i32 29
  %6 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default1, align 8, !tbaa !86
  %7 = load i8*, i8** %cname.addr, align 8, !tbaa !1
  call void @gs_text_release(%struct.gs_text_enum_s* %6, i8* %7) #7
  %8 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  %pte_default2 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %8, i32 0, i32 29
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte_default2, align 8, !tbaa !86
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum, align 8, !tbaa !1
  call void @pdf_text_release_cgp(%struct.pdf_text_enum_s* %9) #7
  %10 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %11 = load i8*, i8** %cname.addr, align 8, !tbaa !1
  call void @gx_default_text_release(%struct.gs_text_enum_s* %10, i8* %11) #7
  %12 = bitcast %struct.pdf_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #1
  ret void
}

declare i32 @gs_text_resync(%struct.gs_text_enum_s*, %struct.gs_text_enum_s*) #2

declare void @gs_text_enum_copy_dynamic(%struct.gs_text_enum_s*, %struct.gs_text_enum_s*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_prepare_text_drawing(%struct.gx_device_pdf_s* %pdev, %struct.gs_text_enum_s* %pte) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %pgs = alloca %struct.gs_state_s*, align 8
  %pcpath = alloca %struct.gx_clip_path_s*, align 8
  %text = alloca %struct.gs_text_params_s*, align 8
  %new_clip = alloca i32, align 4
  %code = alloca i32, align 4
  %font = alloca %struct.gs_font_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis1 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %1, i32 0, i32 3
  %2 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis1, align 8, !tbaa !261
  store %struct.gs_imager_state_s* %2, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %3 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %5 = bitcast %struct.gs_imager_state_s* %4 to %struct.gs_state_s*
  store %struct.gs_state_s* %5, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %6 = bitcast %struct.gx_clip_path_s** %pcpath to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  %7 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pcpath2 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %7, i32 0, i32 7
  %8 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath2, align 8, !tbaa !295
  store %struct.gx_clip_path_s* %8, %struct.gx_clip_path_s** %pcpath, align 8, !tbaa !1
  %9 = bitcast %struct.gs_text_params_s** %text to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %text3 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %10, i32 0, i32 0
  store %struct.gs_text_params_s* %text3, %struct.gs_text_params_s** %text, align 8, !tbaa !1
  %11 = bitcast i32* %new_clip to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  store i32 0, i32* %new_clip, align 4, !tbaa !21
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %13 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #1
  %14 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %14, i32 0, i32 12
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !227
  store %struct.gs_font_s* %15, %struct.gs_font_s** %font, align 8, !tbaa !1
  %16 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text, align 8, !tbaa !1
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %16, i32 0, i32 0
  %17 = load i32, i32* %operation, align 4, !tbaa !64
  %and = and i32 %17, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %18, i32 0, i32 18
  %19 = load i32, i32* %text_rendering_mode, align 4, !tbaa !98
  %cmp = icmp eq i32 %19, 3
  br i1 %cmp, label %if.then, label %if.end.19

if.then:                                          ; preds = %lor.lhs.false, %entry
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %21 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath, align 8, !tbaa !1
  %call = call i32 @pdf_must_put_clip_path(%struct.gx_device_pdf_s* %20, %struct.gx_clip_path_s* %21) #7
  store i32 %call, i32* %new_clip, align 4, !tbaa !21
  %22 = load i32, i32* %new_clip, align 4, !tbaa !21
  %tobool4 = icmp ne i32 %22, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %23 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call6 = call i32 @pdf_unclip(%struct.gx_device_pdf_s* %23) #7
  store i32 %call6, i32* %code, align 4, !tbaa !21
  br label %if.end.11

if.else:                                          ; preds = %if.then
  %24 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %context = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %24, i32 0, i32 156
  %25 = load i32, i32* %context, align 4, !tbaa !262
  %cmp7 = icmp eq i32 %25, 0
  br i1 %cmp7, label %if.then.8, label %if.else.10

if.then.8:                                        ; preds = %if.else
  %26 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call9 = call i32 @pdf_open_page(%struct.gx_device_pdf_s* %26, i32 1) #7
  store i32 %call9, i32* %code, align 4, !tbaa !21
  br label %if.end

if.else.10:                                       ; preds = %if.else
  store i32 0, i32* %code, align 4, !tbaa !21
  br label %if.end

if.end:                                           ; preds = %if.else.10, %if.then.8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %if.then.5
  %27 = load i32, i32* %code, align 4, !tbaa !21
  %cmp12 = icmp slt i32 %27, 0
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.11
  %28 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.14:                                        ; preds = %if.end.11
  %29 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %30 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %call15 = call i32 @pdf_prepare_fill(%struct.gx_device_pdf_s* %29, %struct.gs_imager_state_s* %30) #7
  store i32 %call15, i32* %code, align 4, !tbaa !21
  %31 = load i32, i32* %code, align 4, !tbaa !21
  %cmp16 = icmp slt i32 %31, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.14
  %32 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %32, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.18:                                        ; preds = %if.end.14
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %lor.lhs.false
  %33 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text, align 8, !tbaa !1
  %operation20 = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %33, i32 0, i32 0
  %34 = load i32, i32* %operation20, align 4, !tbaa !64
  %and21 = and i32 %34, 1024
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.155

if.then.23:                                       ; preds = %if.end.19
  %35 = load i32, i32* %new_clip, align 4, !tbaa !21
  %tobool24 = icmp ne i32 %35, 0
  br i1 %tobool24, label %if.then.25, label %if.end.30

if.then.25:                                       ; preds = %if.then.23
  %36 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %37 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath, align 8, !tbaa !1
  %call26 = call i32 @pdf_put_clip_path(%struct.gx_device_pdf_s* %36, %struct.gx_clip_path_s* %37) #7
  store i32 %call26, i32* %code, align 4, !tbaa !21
  %38 = load i32, i32* %code, align 4, !tbaa !21
  %cmp27 = icmp slt i32 %38, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.25
  %39 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %39, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.29:                                        ; preds = %if.then.25
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.23
  %40 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %ForOPDFRead = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %40, i32 0, i32 99
  %41 = load i32, i32* %ForOPDFRead, align 4, !tbaa !101
  %tobool31 = icmp ne i32 %41, 0
  br i1 %tobool31, label %if.else.123, label %if.then.32

if.then.32:                                       ; preds = %if.end.30
  %42 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode33 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %42, i32 0, i32 18
  %43 = load i32, i32* %text_rendering_mode33, align 4, !tbaa !98
  %cmp34 = icmp ne i32 %43, 3
  br i1 %cmp34, label %land.lhs.true, label %if.end.122

land.lhs.true:                                    ; preds = %if.then.32
  %44 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode35 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %44, i32 0, i32 18
  %45 = load i32, i32* %text_rendering_mode35, align 4, !tbaa !98
  %cmp36 = icmp ne i32 %45, 7
  br i1 %cmp36, label %if.then.37, label %if.end.122

if.then.37:                                       ; preds = %land.lhs.true
  %46 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %PaintType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %46, i32 0, i32 17
  %47 = load i32, i32* %PaintType, align 4, !tbaa !104
  %cmp38 = icmp eq i32 %47, 2
  br i1 %cmp38, label %if.then.39, label %if.else.52

if.then.39:                                       ; preds = %if.then.37
  %48 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %48, i32 0, i32 69
  %arrayidx = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color, i32 0, i64 0
  %dev_color = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 2
  %49 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color, align 8, !tbaa !105
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %49, i32 0, i32 0
  %50 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !107
  %cmp40 = icmp ne %struct.gx_device_color_type_s* %50, @gx_dc_type_data_none
  br i1 %cmp40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.39
  br label %cond.end

cond.false:                                       ; preds = %if.then.39
  %51 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call41 = call i32 @gx_remap_color(%struct.gs_state_s* %51) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call41, %cond.false ]
  store i32 %cond, i32* %code, align 4, !tbaa !21
  %52 = load i32, i32* %code, align 4, !tbaa !21
  %cmp42 = icmp ne i32 %52, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %cond.end
  %53 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %53, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.44:                                        ; preds = %cond.end
  %54 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %55 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %56 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %56, i32 0, i32 69
  %arrayidx46 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color45, i32 0, i64 0
  %dev_color47 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx46, i32 0, i32 2
  %57 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color47, align 8, !tbaa !105
  %58 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_stroke_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %58, i32 0, i32 57
  %59 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %stroke_used_process_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %59, i32 0, i32 55
  %call48 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %54, %struct.gs_imager_state_s* %55, %struct.gx_device_color_s* %57, %struct.gx_hl_saved_color_s* %saved_stroke_color, i32* %stroke_used_process_color, %struct.psdf_set_color_commands_s* @psdf_set_stroke_color_commands) #7
  store i32 %call48, i32* %code, align 4, !tbaa !21
  %60 = load i32, i32* %code, align 4, !tbaa !21
  %cmp49 = icmp slt i32 %60, 0
  br i1 %cmp49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.end.44
  %61 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %61, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.51:                                        ; preds = %if.end.44
  br label %if.end.121

if.else.52:                                       ; preds = %if.then.37
  %62 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode53 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %62, i32 0, i32 18
  %63 = load i32, i32* %text_rendering_mode53, align 4, !tbaa !98
  %cmp54 = icmp eq i32 %63, 0
  br i1 %cmp54, label %if.then.64, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.else.52
  %64 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode56 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %64, i32 0, i32 18
  %65 = load i32, i32* %text_rendering_mode56, align 4, !tbaa !98
  %cmp57 = icmp eq i32 %65, 2
  br i1 %cmp57, label %if.then.64, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.55
  %66 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode59 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %66, i32 0, i32 18
  %67 = load i32, i32* %text_rendering_mode59, align 4, !tbaa !98
  %cmp60 = icmp eq i32 %67, 4
  br i1 %cmp60, label %if.then.64, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %lor.lhs.false.58
  %68 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode62 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %68, i32 0, i32 18
  %69 = load i32, i32* %text_rendering_mode62, align 4, !tbaa !98
  %cmp63 = icmp eq i32 %69, 6
  br i1 %cmp63, label %if.then.64, label %if.end.85

if.then.64:                                       ; preds = %lor.lhs.false.61, %lor.lhs.false.58, %lor.lhs.false.55, %if.else.52
  %70 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color65 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %70, i32 0, i32 69
  %arrayidx66 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color65, i32 0, i64 0
  %dev_color67 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx66, i32 0, i32 2
  %71 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color67, align 8, !tbaa !105
  %type68 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %71, i32 0, i32 0
  %72 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type68, align 8, !tbaa !107
  %cmp69 = icmp ne %struct.gx_device_color_type_s* %72, @gx_dc_type_data_none
  br i1 %cmp69, label %cond.true.70, label %cond.false.71

cond.true.70:                                     ; preds = %if.then.64
  br label %cond.end.73

cond.false.71:                                    ; preds = %if.then.64
  %73 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call72 = call i32 @gx_remap_color(%struct.gs_state_s* %73) #7
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.71, %cond.true.70
  %cond74 = phi i32 [ 0, %cond.true.70 ], [ %call72, %cond.false.71 ]
  store i32 %cond74, i32* %code, align 4, !tbaa !21
  %74 = load i32, i32* %code, align 4, !tbaa !21
  %cmp75 = icmp ne i32 %74, 0
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %cond.end.73
  %75 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %75, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.77:                                        ; preds = %cond.end.73
  %76 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %77 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %78 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color78 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %78, i32 0, i32 69
  %arrayidx79 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color78, i32 0, i64 0
  %dev_color80 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx79, i32 0, i32 2
  %79 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color80, align 8, !tbaa !105
  %80 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_fill_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %80, i32 0, i32 56
  %81 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %fill_used_process_color = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %81, i32 0, i32 54
  %call81 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %76, %struct.gs_imager_state_s* %77, %struct.gx_device_color_s* %79, %struct.gx_hl_saved_color_s* %saved_fill_color, i32* %fill_used_process_color, %struct.psdf_set_color_commands_s* @psdf_set_fill_color_commands) #7
  store i32 %call81, i32* %code, align 4, !tbaa !21
  %82 = load i32, i32* %code, align 4, !tbaa !21
  %cmp82 = icmp slt i32 %82, 0
  br i1 %cmp82, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.end.77
  %83 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %83, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.84:                                        ; preds = %if.end.77
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %lor.lhs.false.61
  %84 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode86 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %84, i32 0, i32 18
  %85 = load i32, i32* %text_rendering_mode86, align 4, !tbaa !98
  %cmp87 = icmp eq i32 %85, 1
  br i1 %cmp87, label %if.then.97, label %lor.lhs.false.88

lor.lhs.false.88:                                 ; preds = %if.end.85
  %86 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode89 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %86, i32 0, i32 18
  %87 = load i32, i32* %text_rendering_mode89, align 4, !tbaa !98
  %cmp90 = icmp eq i32 %87, 2
  br i1 %cmp90, label %if.then.97, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false.88
  %88 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode92 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %88, i32 0, i32 18
  %89 = load i32, i32* %text_rendering_mode92, align 4, !tbaa !98
  %cmp93 = icmp eq i32 %89, 5
  br i1 %cmp93, label %if.then.97, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %lor.lhs.false.91
  %90 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %text_rendering_mode95 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %90, i32 0, i32 18
  %91 = load i32, i32* %text_rendering_mode95, align 4, !tbaa !98
  %cmp96 = icmp eq i32 %91, 6
  br i1 %cmp96, label %if.then.97, label %if.end.120

if.then.97:                                       ; preds = %lor.lhs.false.94, %lor.lhs.false.91, %lor.lhs.false.88, %if.end.85
  %92 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  call void @gs_swapcolors_quick(%struct.gs_state_s* %92) #7
  %93 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color98 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %93, i32 0, i32 69
  %arrayidx99 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color98, i32 0, i64 0
  %dev_color100 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx99, i32 0, i32 2
  %94 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color100, align 8, !tbaa !105
  %type101 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %94, i32 0, i32 0
  %95 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type101, align 8, !tbaa !107
  %cmp102 = icmp ne %struct.gx_device_color_type_s* %95, @gx_dc_type_data_none
  br i1 %cmp102, label %cond.true.103, label %cond.false.104

cond.true.103:                                    ; preds = %if.then.97
  br label %cond.end.106

cond.false.104:                                   ; preds = %if.then.97
  %96 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call105 = call i32 @gx_remap_color(%struct.gs_state_s* %96) #7
  br label %cond.end.106

cond.end.106:                                     ; preds = %cond.false.104, %cond.true.103
  %cond107 = phi i32 [ 0, %cond.true.103 ], [ %call105, %cond.false.104 ]
  store i32 %cond107, i32* %code, align 4, !tbaa !21
  %97 = load i32, i32* %code, align 4, !tbaa !21
  %cmp108 = icmp ne i32 %97, 0
  br i1 %cmp108, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %cond.end.106
  %98 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %98, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.110:                                       ; preds = %cond.end.106
  %99 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %100 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %101 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color111 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %101, i32 0, i32 69
  %arrayidx112 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color111, i32 0, i64 0
  %dev_color113 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx112, i32 0, i32 2
  %102 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color113, align 8, !tbaa !105
  %103 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_stroke_color114 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %103, i32 0, i32 57
  %104 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %stroke_used_process_color115 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %104, i32 0, i32 55
  %call116 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %99, %struct.gs_imager_state_s* %100, %struct.gx_device_color_s* %102, %struct.gx_hl_saved_color_s* %saved_stroke_color114, i32* %stroke_used_process_color115, %struct.psdf_set_color_commands_s* @psdf_set_stroke_color_commands) #7
  store i32 %call116, i32* %code, align 4, !tbaa !21
  %105 = load i32, i32* %code, align 4, !tbaa !21
  %cmp117 = icmp slt i32 %105, 0
  br i1 %cmp117, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.end.110
  %106 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %106, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.119:                                       ; preds = %if.end.110
  %107 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  call void @gs_swapcolors_quick(%struct.gs_state_s* %107) #7
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %lor.lhs.false.94
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.51
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %land.lhs.true, %if.then.32
  br label %if.end.154

if.else.123:                                      ; preds = %if.end.30
  %108 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color124 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %108, i32 0, i32 69
  %arrayidx125 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color124, i32 0, i64 0
  %dev_color126 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx125, i32 0, i32 2
  %109 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color126, align 8, !tbaa !105
  %type127 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %109, i32 0, i32 0
  %110 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type127, align 8, !tbaa !107
  %cmp128 = icmp ne %struct.gx_device_color_type_s* %110, @gx_dc_type_data_none
  br i1 %cmp128, label %cond.true.129, label %cond.false.130

cond.true.129:                                    ; preds = %if.else.123
  br label %cond.end.132

cond.false.130:                                   ; preds = %if.else.123
  %111 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %call131 = call i32 @gx_remap_color(%struct.gs_state_s* %111) #7
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.false.130, %cond.true.129
  %cond133 = phi i32 [ 0, %cond.true.129 ], [ %call131, %cond.false.130 ]
  store i32 %cond133, i32* %code, align 4, !tbaa !21
  %112 = load i32, i32* %code, align 4, !tbaa !21
  %cmp134 = icmp ne i32 %112, 0
  br i1 %cmp134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %cond.end.132
  %113 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %113, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.136:                                       ; preds = %cond.end.132
  %114 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %115 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %116 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color137 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %116, i32 0, i32 69
  %arrayidx138 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color137, i32 0, i64 0
  %dev_color139 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx138, i32 0, i32 2
  %117 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color139, align 8, !tbaa !105
  %118 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_stroke_color140 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %118, i32 0, i32 57
  %119 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %stroke_used_process_color141 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %119, i32 0, i32 55
  %call142 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %114, %struct.gs_imager_state_s* %115, %struct.gx_device_color_s* %117, %struct.gx_hl_saved_color_s* %saved_stroke_color140, i32* %stroke_used_process_color141, %struct.psdf_set_color_commands_s* @psdf_set_stroke_color_commands) #7
  store i32 %call142, i32* %code, align 4, !tbaa !21
  %cmp143 = icmp slt i32 %call142, 0
  br i1 %cmp143, label %if.then.152, label %lor.lhs.false.144

lor.lhs.false.144:                                ; preds = %if.end.136
  %120 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %121 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %122 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color145 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %122, i32 0, i32 69
  %arrayidx146 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %color145, i32 0, i64 0
  %dev_color147 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx146, i32 0, i32 2
  %123 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %dev_color147, align 8, !tbaa !105
  %124 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %saved_fill_color148 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %124, i32 0, i32 56
  %125 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %fill_used_process_color149 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %125, i32 0, i32 54
  %call150 = call i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s* %120, %struct.gs_imager_state_s* %121, %struct.gx_device_color_s* %123, %struct.gx_hl_saved_color_s* %saved_fill_color148, i32* %fill_used_process_color149, %struct.psdf_set_color_commands_s* @psdf_set_fill_color_commands) #7
  store i32 %call150, i32* %code, align 4, !tbaa !21
  %cmp151 = icmp slt i32 %call150, 0
  br i1 %cmp151, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %lor.lhs.false.144, %if.end.136
  %126 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %126, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.153:                                       ; preds = %lor.lhs.false.144
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %if.end.122
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.end.19
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.155, %if.then.152, %if.then.135, %if.then.118, %if.then.109, %if.then.83, %if.then.76, %if.then.50, %if.then.43, %if.then.28, %if.then.17, %if.then.13
  %127 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %127) #1
  %128 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %128) #1
  %129 = bitcast i32* %new_clip to i8*
  call void @llvm.lifetime.end(i64 4, i8* %129) #1
  %130 = bitcast %struct.gs_text_params_s** %text to i8*
  call void @llvm.lifetime.end(i64 8, i8* %130) #1
  %131 = bitcast %struct.gx_clip_path_s** %pcpath to i8*
  call void @llvm.lifetime.end(i64 8, i8* %131) #1
  %132 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %132) #1
  %133 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %133) #1
  %134 = load i32, i32* %retval
  ret i32 %134
}

; Function Attrs: nounwind uwtable
define internal i32 @complete_charproc(%struct.gx_device_pdf_s* %pdev, %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s* %pte_default, %struct.pdf_text_enum_s* %penum, i32 %was_PS_type3) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pte_default.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %was_PS_type3.addr = alloca i32, align 4
  %gnstr = alloca %struct.gs_const_string_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %glyph = alloca [256 x i8], align 16
  %FontName = alloca [48 x i8], align 16
  %KeyName = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte_default, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store i32 %was_PS_type3, i32* %was_PS_type3.addr, align 4, !tbaa !21
  %0 = bitcast %struct.gs_const_string_s* %gnstr to i8*
  call void @llvm.lifetime.start(i64 16, i8* %0) #1
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %4, i32 0, i32 28
  %current_glyph = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 1
  %5 = load i64, i64* %current_glyph, align 8, !tbaa !322
  %call = call i32 @pdf_choose_output_glyph_hame(%struct.gx_device_pdf_s* %2, %struct.pdf_text_enum_s* %3, %struct.gs_const_string_s* %gnstr, i64 %5) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %6 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %7, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %8, i32 0, i32 12
  %9 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %9, i32 0, i32 11
  %10 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp1 = icmp eq i32 %10, 3
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font2 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %11, i32 0, i32 12
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font2, align 8, !tbaa !217
  %FontType3 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %12, i32 0, i32 11
  %13 = load i32, i32* %FontType3, align 4, !tbaa !74
  %cmp4 = icmp eq i32 %13, 53
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %14 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font6 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %14, i32 0, i32 12
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font6, align 8, !tbaa !217
  %FontType7 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %15, i32 0, i32 11
  %16 = load i32, i32* %FontType7, align 4, !tbaa !74
  %cmp8 = icmp eq i32 %16, 51
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.5
  %17 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font10 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %17, i32 0, i32 12
  %18 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font10, align 8, !tbaa !217
  %FontType11 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %18, i32 0, i32 11
  %19 = load i32, i32* %FontType11, align 4, !tbaa !74
  %cmp12 = icmp eq i32 %19, 52
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %20 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font14 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %20, i32 0, i32 12
  %21 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font14, align 8, !tbaa !217
  %FontType15 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %21, i32 0, i32 11
  %22 = load i32, i32* %FontType15, align 4, !tbaa !74
  %cmp16 = icmp eq i32 %22, 54
  br i1 %cmp16, label %land.lhs.true, label %if.end.71

land.lhs.true:                                    ; preds = %lor.lhs.false.13, %lor.lhs.false.9, %lor.lhs.false.5, %lor.lhs.false, %if.end
  %23 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %strm = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %23, i32 0, i32 47
  %24 = load %struct.stream_s*, %struct.stream_s** %strm, align 8, !tbaa !351
  %call17 = call i64 @stell(%struct.stream_s* %24) #7
  %cmp18 = icmp eq i64 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.71

if.then.19:                                       ; preds = %land.lhs.true
  %25 = bitcast [256 x i8]* %glyph to i8*
  call void @llvm.lifetime.start(i64 256, i8* %25) #1
  %26 = bitcast [48 x i8]* %FontName to i8*
  call void @llvm.lifetime.start(i64 48, i8* %26) #1
  %27 = bitcast [256 x i8]* %KeyName to i8*
  call void @llvm.lifetime.start(i64 256, i8* %27) #1
  %28 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #1
  %size = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %gnstr, i32 0, i32 1
  %29 = load i32, i32* %size, align 4, !tbaa !231
  %cmp20 = icmp ult i32 47, %29
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.19
  br label %cond.end

cond.false:                                       ; preds = %if.then.19
  %size21 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %gnstr, i32 0, i32 1
  %30 = load i32, i32* %size21, align 4, !tbaa !231
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 47, %cond.true ], [ %30, %cond.false ]
  store i32 %cond, i32* %len, align 4, !tbaa !21
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %glyph, i32 0, i32 0
  %data = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %gnstr, i32 0, i32 0
  %31 = load i8*, i8** %data, align 8, !tbaa !230
  %32 = load i32, i32* %len, align 4, !tbaa !21
  %conv = sext i32 %32 to i64
  %call22 = call i8* @memcpy(i8* %arraydecay, i8* %31, i64 %conv) #9
  %33 = load i32, i32* %len, align 4, !tbaa !21
  %idxprom = sext i32 %33 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %glyph, i32 0, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1, !tbaa !161
  %34 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font23 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %34, i32 0, i32 12
  %35 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font23, align 8, !tbaa !217
  %font_name = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %35, i32 0, i32 22
  %size24 = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %font_name, i32 0, i32 1
  %36 = load i32, i32* %size24, align 4, !tbaa !352
  %cmp25 = icmp ult i32 47, %36
  br i1 %cmp25, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %cond.end
  br label %cond.end.32

cond.false.28:                                    ; preds = %cond.end
  %37 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font29 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %37, i32 0, i32 12
  %38 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font29, align 8, !tbaa !217
  %font_name30 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %38, i32 0, i32 22
  %size31 = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %font_name30, i32 0, i32 1
  %39 = load i32, i32* %size31, align 4, !tbaa !352
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.28, %cond.true.27
  %cond33 = phi i32 [ 47, %cond.true.27 ], [ %39, %cond.false.28 ]
  store i32 %cond33, i32* %len, align 4, !tbaa !21
  %arraydecay34 = getelementptr inbounds [48 x i8], [48 x i8]* %FontName, i32 0, i32 0
  %40 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font35 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %40, i32 0, i32 12
  %41 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font35, align 8, !tbaa !217
  %font_name36 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %41, i32 0, i32 22
  %chars = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %font_name36, i32 0, i32 0
  %arraydecay37 = getelementptr inbounds [48 x i8], [48 x i8]* %chars, i32 0, i32 0
  %42 = load i32, i32* %len, align 4, !tbaa !21
  %conv38 = sext i32 %42 to i64
  %call39 = call i8* @memcpy(i8* %arraydecay34, i8* %arraydecay37, i64 %conv38) #9
  %43 = load i32, i32* %len, align 4, !tbaa !21
  %idxprom40 = sext i32 %43 to i64
  %arrayidx41 = getelementptr inbounds [48 x i8], [48 x i8]* %FontName, i32 0, i64 %idxprom40
  store i8 0, i8* %arrayidx41, align 1, !tbaa !161
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font42 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %44, i32 0, i32 12
  %45 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font42, align 8, !tbaa !217
  %key_name = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %45, i32 0, i32 21
  %size43 = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %key_name, i32 0, i32 1
  %46 = load i32, i32* %size43, align 4, !tbaa !353
  %cmp44 = icmp ult i32 47, %46
  br i1 %cmp44, label %cond.true.46, label %cond.false.47

cond.true.46:                                     ; preds = %cond.end.32
  br label %cond.end.51

cond.false.47:                                    ; preds = %cond.end.32
  %47 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font48 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %47, i32 0, i32 12
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font48, align 8, !tbaa !217
  %key_name49 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %48, i32 0, i32 21
  %size50 = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %key_name49, i32 0, i32 1
  %49 = load i32, i32* %size50, align 4, !tbaa !353
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.47, %cond.true.46
  %cond52 = phi i32 [ 47, %cond.true.46 ], [ %49, %cond.false.47 ]
  store i32 %cond52, i32* %len, align 4, !tbaa !21
  %arraydecay53 = getelementptr inbounds [256 x i8], [256 x i8]* %KeyName, i32 0, i32 0
  %50 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font54 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %50, i32 0, i32 12
  %51 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font54, align 8, !tbaa !217
  %key_name55 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %51, i32 0, i32 21
  %chars56 = getelementptr inbounds %struct.gs_font_name_s, %struct.gs_font_name_s* %key_name55, i32 0, i32 0
  %arraydecay57 = getelementptr inbounds [48 x i8], [48 x i8]* %chars56, i32 0, i32 0
  %52 = load i32, i32* %len, align 4, !tbaa !21
  %conv58 = sext i32 %52 to i64
  %call59 = call i8* @memcpy(i8* %arraydecay53, i8* %arraydecay57, i64 %conv58) #9
  %53 = load i32, i32* %len, align 4, !tbaa !21
  %idxprom60 = sext i32 %53 to i64
  %arrayidx61 = getelementptr inbounds [256 x i8], [256 x i8]* %KeyName, i32 0, i64 %idxprom60
  store i8 0, i8* %arrayidx61, align 1, !tbaa !161
  %54 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %54, i32 0, i32 3
  %55 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !354
  %call62 = call i8* @gs_program_name() #7
  %call63 = call i64 @gs_revision_number() #7
  call void @emprintf_program_ident(%struct.gs_memory_s* %55, i8* %call62, i64 %call63) #7
  %56 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %memory64 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %56, i32 0, i32 3
  %57 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory64, align 8, !tbaa !354
  %58 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %next_page = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %58, i32 0, i32 153
  %59 = load i32, i32* %next_page, align 4, !tbaa !355
  %arraydecay65 = getelementptr inbounds [256 x i8], [256 x i8]* %glyph, i32 0, i32 0
  %arraydecay66 = getelementptr inbounds [48 x i8], [48 x i8]* %FontName, i32 0, i32 0
  %arraydecay67 = getelementptr inbounds [256 x i8], [256 x i8]* %KeyName, i32 0, i32 0
  %call68 = call i32 (%struct.gs_memory_s*, i8*, ...) @errprintf(%struct.gs_memory_s* %57, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.7, i32 0, i32 0), i32 %59, i8* %arraydecay65, i8* %arraydecay66, i8* %arraydecay67) #7
  %60 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %strm69 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %60, i32 0, i32 47
  %61 = load %struct.stream_s*, %struct.stream_s** %strm69, align 8, !tbaa !351
  %call70 = call i32 @stream_puts(%struct.stream_s* %61, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0)) #7
  %62 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #1
  %63 = bitcast [256 x i8]* %KeyName to i8*
  call void @llvm.lifetime.end(i64 256, i8* %63) #1
  %64 = bitcast [48 x i8]* %FontName to i8*
  call void @llvm.lifetime.end(i64 48, i8* %64) #1
  %65 = bitcast [256 x i8]* %glyph to i8*
  call void @llvm.lifetime.end(i64 256, i8* %65) #1
  br label %if.end.71

if.end.71:                                        ; preds = %cond.end.51, %land.lhs.true, %lor.lhs.false.13
  %66 = load i32, i32* %was_PS_type3.addr, align 4, !tbaa !21
  %tobool = icmp ne i32 %66, 0
  br i1 %tobool, label %if.then.72, label %if.end.74

if.then.72:                                       ; preds = %if.end.71
  %67 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %67, i32 0, i32 13
  %68 = load i32, i32* %width, align 4, !tbaa !349
  %div = sdiv i32 %68, 100
  store i32 %div, i32* %width, align 4, !tbaa !349
  %69 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %69, i32 0, i32 14
  %70 = load i32, i32* %height, align 4, !tbaa !350
  %div73 = sdiv i32 %70, 100
  store i32 %div73, i32* %height, align 4, !tbaa !350
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.72, %if.end.71
  %71 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %72 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font75 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %72, i32 0, i32 12
  %73 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font75, align 8, !tbaa !217
  %74 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %cgp = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %74, i32 0, i32 34
  %75 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp, align 8, !tbaa !5
  %76 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  %returned76 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %76, i32 0, i32 28
  %current_glyph77 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned76, i32 0, i32 1
  %77 = load i64, i64* %current_glyph77, align 8, !tbaa !322
  %78 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %78, i32 0, i32 35
  %79 = load i64, i64* %output_char_code, align 8, !tbaa !92
  %call78 = call i32 @pdf_end_charproc_accum(%struct.gx_device_pdf_s* %71, %struct.gs_font_s* %73, %struct.pdf_char_glyph_pairs_s* %75, i64 %77, i64 %79, %struct.gs_const_string_s* %gnstr) #7
  store i32 %call78, i32* %code, align 4, !tbaa !21
  %80 = load i32, i32* %code, align 4, !tbaa !21
  %cmp79 = icmp slt i32 %80, 0
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.74
  %81 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %81, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.82:                                        ; preds = %if.end.74
  %82 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %accumulating_charproc = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %82, i32 0, i32 212
  store i32 0, i32* %accumulating_charproc, align 4, !tbaa !88
  %83 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %83, i32 0, i32 31
  store i32 0, i32* %charproc_accum, align 4, !tbaa !87
  %84 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  %call83 = call i32 @gx_default_text_restore_state(%struct.gs_text_enum_s* %84) #7
  store i32 %call83, i32* %code, align 4, !tbaa !21
  %85 = load i32, i32* %code, align 4, !tbaa !21
  %cmp84 = icmp slt i32 %85, 0
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.82
  %86 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %86, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.87:                                        ; preds = %if.end.82
  %87 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  call void @gs_text_release(%struct.gs_text_enum_s* %87, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)) #7
  %88 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pte_default88 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %88, i32 0, i32 29
  store %struct.gs_text_enum_s* null, %struct.gs_text_enum_s** %pte_default88, align 8, !tbaa !86
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.87, %if.then.86, %if.then.81, %if.then
  %89 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %89) #1
  %90 = bitcast %struct.gs_const_string_s* %gnstr to i8*
  call void @llvm.lifetime.end(i64 16, i8* %90) #1
  %91 = load i32, i32* %retval
  ret i32 %91
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

declare i32 @gx_lookup_fm_pair(%struct.gs_font_s*, %struct.gs_matrix_s*, %struct.gs_log2_scale_point_s*, i32, %struct.cached_fm_pair_s**) #2

declare %struct.cached_char_s* @gx_lookup_cached_char(%struct.gs_font_s*, %struct.cached_fm_pair_s*, i64, i32, i32, %struct.gs_fixed_point_s*) #2

declare void @gx_purge_selected_cached_chars(%struct.gs_font_dir_s*, i32 (%struct.gs_memory_s*, %struct.cached_char_s*, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_query_purge_cached_char(%struct.gs_memory_s* %mem, %struct.cached_char_s* %cc, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cc.addr = alloca %struct.cached_char_s*, align 8
  %data.addr = alloca i8*, align 8
  %to_purge = alloca %struct.cached_char_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.cached_char_s* %cc, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  %0 = bitcast %struct.cached_char_s** %to_purge to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %2 = bitcast i8* %1 to %struct.cached_char_s*
  store %struct.cached_char_s* %2, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %3 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %code = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %3, i32 0, i32 8
  %4 = load i64, i64* %code, align 8, !tbaa !325
  %5 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %code1 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %5, i32 0, i32 8
  %6 = load i64, i64* %code1, align 8, !tbaa !325
  %cmp = icmp eq i64 %4, %6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %pair = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %7, i32 0, i32 6
  %8 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %pair, align 8, !tbaa !356
  %9 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %pair2 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %9, i32 0, i32 6
  %10 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %pair2, align 8, !tbaa !356
  %cmp3 = icmp eq %struct.cached_fm_pair_s* %8, %10
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %11 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %subpix_origin = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %11, i32 0, i32 13
  %x = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin, i32 0, i32 0
  %12 = load i32, i32* %x, align 4, !tbaa !330
  %13 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %subpix_origin5 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %13, i32 0, i32 13
  %x6 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin5, i32 0, i32 0
  %14 = load i32, i32* %x6, align 4, !tbaa !330
  %cmp7 = icmp eq i32 %12, %14
  br i1 %cmp7, label %land.lhs.true.8, label %if.end

land.lhs.true.8:                                  ; preds = %land.lhs.true.4
  %15 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %subpix_origin9 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %15, i32 0, i32 13
  %y = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin9, i32 0, i32 1
  %16 = load i32, i32* %y, align 4, !tbaa !329
  %17 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %subpix_origin10 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %17, i32 0, i32 13
  %y11 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %subpix_origin10, i32 0, i32 1
  %18 = load i32, i32* %y11, align 4, !tbaa !329
  %cmp12 = icmp eq i32 %16, %18
  br i1 %cmp12, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true.8
  %19 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %wmode = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %19, i32 0, i32 9
  %20 = load i8, i8* %wmode, align 1, !tbaa !328
  %conv = zext i8 %20 to i32
  %21 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %wmode14 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %21, i32 0, i32 9
  %22 = load i8, i8* %wmode14, align 1, !tbaa !328
  %conv15 = zext i8 %22 to i32
  %cmp16 = icmp eq i32 %conv, %conv15
  br i1 %cmp16, label %land.lhs.true.18, label %if.end

land.lhs.true.18:                                 ; preds = %land.lhs.true.13
  %23 = load %struct.cached_char_s*, %struct.cached_char_s** %cc.addr, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %23, i32 0, i32 0
  %depth = getelementptr inbounds %struct.gx_cached_bits_head_s, %struct.gx_cached_bits_head_s* %head, i32 0, i32 1
  %24 = load i32, i32* %depth, align 4, !tbaa !357
  %25 = load %struct.cached_char_s*, %struct.cached_char_s** %to_purge, align 8, !tbaa !1
  %head19 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %25, i32 0, i32 0
  %depth20 = getelementptr inbounds %struct.gx_cached_bits_head_s, %struct.gx_cached_bits_head_s* %head19, i32 0, i32 1
  %26 = load i32, i32* %depth20, align 4, !tbaa !357
  %cmp21 = icmp eq i32 %24, %26
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.18
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true.18, %land.lhs.true.13, %land.lhs.true.8, %land.lhs.true.4, %land.lhs.true, %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %27 = bitcast %struct.cached_char_s** %to_purge to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #1
  %28 = load i32, i32* %retval
  ret i32 %28
}

declare i32 @gs_gsave(%struct.gs_state_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @install_charproc_accumulator(%struct.gx_device_pdf_s* %pdev, %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s* %pte_default, %struct.pdf_text_enum_s* %penum) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pte_default.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %code = alloca i32, align 4
  %m = alloca %struct.gs_matrix_s, align 4
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte_default, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_ctm = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %1, i32 0, i32 211
  %2 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %2, i32 0, i32 3
  %3 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !247
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %3, i32 0, i32 5
  %4 = bitcast %struct.gs_matrix_fixed_s* %charproc_ctm to i8*
  %5 = bitcast %struct.gs_matrix_fixed_s* %ctm to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 36, i32 4, i1 false), !tbaa.struct !358
  %6 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %6, i32 0, i32 12
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %7, i32 0, i32 11
  %8 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %8, 3
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %9, i32 0, i32 12
  %10 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font1, align 8, !tbaa !217
  %FontType2 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %10, i32 0, i32 11
  %11 = load i32, i32* %FontType2, align 4, !tbaa !74
  %cmp3 = icmp eq i32 %11, 53
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %12 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font5 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %12, i32 0, i32 12
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font5, align 8, !tbaa !217
  %FontType6 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType6, align 4, !tbaa !74
  %cmp7 = icmp eq i32 %14, 51
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.4
  %15 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font9 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %15, i32 0, i32 12
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font9, align 8, !tbaa !217
  %FontType10 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %16, i32 0, i32 11
  %17 = load i32, i32* %FontType10, align 4, !tbaa !74
  %cmp11 = icmp eq i32 %17, 52
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.8
  %18 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font13 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %18, i32 0, i32 12
  %19 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font13, align 8, !tbaa !217
  %FontType14 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %19, i32 0, i32 11
  %20 = load i32, i32* %FontType14, align 4, !tbaa !74
  %cmp15 = icmp eq i32 %20, 54
  br i1 %cmp15, label %land.lhs.true, label %if.end.47

land.lhs.true:                                    ; preds = %lor.lhs.false.12, %lor.lhs.false.8, %lor.lhs.false.4, %lor.lhs.false, %entry
  %21 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %outer_CID = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %21, i32 0, i32 13
  %22 = load i64, i64* %outer_CID, align 8, !tbaa !341
  %cmp16 = icmp eq i64 %22, 2147483647
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.47

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %23 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pte_default18 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %23, i32 0, i32 29
  %24 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default18, align 8, !tbaa !86
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %24, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %25 = load i32, i32* %operation, align 4, !tbaa !225
  %and = and i32 %25, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.47, label %if.then

if.then:                                          ; preds = %land.lhs.true.17
  %26 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.start(i64 24, i8* %26) #1
  %27 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %27) #1
  %28 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %PS_accumulator = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %28, i32 0, i32 215
  store i32 0, i32* %PS_accumulator, align 4, !tbaa !338
  %29 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call = call i32 @pdf_start_charproc_accum(%struct.gx_device_pdf_s* %29) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %30 = load i32, i32* %code, align 4, !tbaa !21
  %cmp19 = icmp slt i32 %30, 0
  br i1 %cmp19, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then
  %31 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  %32 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %33 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis21 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %33, i32 0, i32 3
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis21, align 8, !tbaa !261
  %35 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pdcolor = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %35, i32 0, i32 6
  %36 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !294
  call void @pdf_viewer_state_from_imager_state(%struct.gx_device_pdf_s* %32, %struct.gs_imager_state_s* %34, %struct.gx_device_color_s* %36) #7
  %37 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %37, i32 0, i32 51
  %line_params = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state, i32 0, i32 3
  %half_width = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params, i32 0, i32 0
  store float -1.000000e+00, float* %half_width, align 4, !tbaa !359
  %38 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state22 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %38, i32 0, i32 51
  %line_params23 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state22, i32 0, i32 3
  %start_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params23, i32 0, i32 1
  store i32 4, i32* %start_cap, align 4, !tbaa !360
  %39 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state24 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %39, i32 0, i32 51
  %line_params25 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state24, i32 0, i32 3
  %end_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params25, i32 0, i32 2
  store i32 4, i32* %end_cap, align 4, !tbaa !361
  %40 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state26 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %40, i32 0, i32 51
  %line_params27 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state26, i32 0, i32 3
  %dash_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params27, i32 0, i32 3
  store i32 4, i32* %dash_cap, align 4, !tbaa !362
  %41 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state28 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %41, i32 0, i32 51
  %line_params29 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state28, i32 0, i32 3
  %join = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params29, i32 0, i32 4
  store i32 5, i32* %join, align 4, !tbaa !363
  %42 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state30 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %42, i32 0, i32 51
  %line_params31 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state30, i32 0, i32 3
  %miter_limit = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params31, i32 0, i32 6
  store float -1.000000e+00, float* %miter_limit, align 4, !tbaa !364
  %43 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state32 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %43, i32 0, i32 51
  %line_params33 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state32, i32 0, i32 3
  %dash = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params33, i32 0, i32 11
  %pattern_size = getelementptr inbounds %struct.gx_dash_params_s, %struct.gx_dash_params_s* %dash, i32 0, i32 1
  store i32 -1, i32* %pattern_size, align 4, !tbaa !365
  call void @gs_make_identity(%struct.gs_matrix_s* %m) #7
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis34 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %44, i32 0, i32 3
  %45 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis34, align 8, !tbaa !247
  %ctm35 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %45, i32 0, i32 5
  %call36 = call i32 @gs_matrix_fixed_from_matrix(%struct.gs_matrix_fixed_s* %ctm35, %struct.gs_matrix_s* %m) #7
  %46 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %47 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %48 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %48, i32 0, i32 35
  %call37 = call i32 @pdf_choose_output_char_code(%struct.gx_device_pdf_s* %46, %struct.pdf_text_enum_s* %47, i64* %output_char_code) #7
  store i32 %call37, i32* %code, align 4, !tbaa !21
  %49 = load i32, i32* %code, align 4, !tbaa !21
  %cmp38 = icmp slt i32 %49, 0
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end
  %50 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %50, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.40:                                        ; preds = %if.end
  %51 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %52 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font41 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %52, i32 0, i32 12
  %53 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font41, align 8, !tbaa !217
  %call42 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %51, %struct.gs_font_s* %53, %struct.pdf_font_resource_s** %pdfont, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call42, i32* %code, align 4, !tbaa !21
  %54 = load i32, i32* %code, align 4, !tbaa !21
  %cmp43 = icmp slt i32 %54, 0
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.40
  %55 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %55, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.45:                                        ; preds = %if.end.40
  %56 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %57 = bitcast %struct.pdf_font_resource_s* %56 to %struct.pdf_resource_s*
  %58 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font3 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %58, i32 0, i32 209
  store %struct.pdf_resource_s* %57, %struct.pdf_resource_s** %font3, align 8, !tbaa !102
  %59 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %59, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %s = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 7
  %type3 = bitcast %union.anon.5* %s to %struct.anon.8*
  %Resources = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3, i32 0, i32 5
  %60 = load %struct.cos_dict_s*, %struct.cos_dict_s** %Resources, align 8, !tbaa !211
  %61 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %substream_Resources = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %61, i32 0, i32 205
  store %struct.cos_dict_s* %60, %struct.cos_dict_s** %substream_Resources, align 8, !tbaa !366
  %62 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %62, i32 0, i32 31
  store i32 1, i32* %charproc_accum, align 4, !tbaa !87
  %63 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %accumulating_charproc = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %63, i32 0, i32 212
  store i32 1, i32* %accumulating_charproc, align 4, !tbaa !88
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.45, %if.then.44, %if.then.39, %if.then.20
  %64 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #1
  %65 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.end(i64 24, i8* %65) #1
  br label %cleanup.48

if.end.47:                                        ; preds = %land.lhs.true.17, %land.lhs.true, %lor.lhs.false.12
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.48

cleanup.48:                                       ; preds = %if.end.47, %cleanup
  %66 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %66) #1
  %67 = load i32, i32* %retval
  ret i32 %67
}

; Function Attrs: nounwind uwtable
define internal void @pdf_type3_get_initial_matrix(%struct.gx_device_s* %dev, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pdev = alloca %struct.gx_device_pdf_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_pdf_s*
  store %struct.gx_device_pdf_s* %2, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_ctm = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %3, i32 0, i32 211
  %xx = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %charproc_ctm, i32 0, i32 0
  %4 = load float, float* %xx, align 4, !tbaa !367
  %5 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %xx1 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %5, i32 0, i32 0
  store float %4, float* %xx1, align 4, !tbaa !244
  %6 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_ctm2 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %6, i32 0, i32 211
  %xy = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %charproc_ctm2, i32 0, i32 1
  %7 = load float, float* %xy, align 4, !tbaa !368
  %8 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %xy3 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %8, i32 0, i32 1
  store float %7, float* %xy3, align 4, !tbaa !245
  %9 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_ctm4 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %9, i32 0, i32 211
  %yx = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %charproc_ctm4, i32 0, i32 2
  %10 = load float, float* %yx, align 4, !tbaa !369
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %yx5 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 2
  store float %10, float* %yx5, align 4, !tbaa !242
  %12 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %charproc_ctm6 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %12, i32 0, i32 211
  %yy = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %charproc_ctm6, i32 0, i32 3
  %13 = load float, float* %yy, align 4, !tbaa !370
  %14 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %yy7 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %14, i32 0, i32 3
  store float %13, float* %yy7, align 4, !tbaa !243
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 4
  store float 0.000000e+00, float* %tx, align 4, !tbaa !241
  %16 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %16, i32 0, i32 5
  store float 0.000000e+00, float* %ty, align 4, !tbaa !240
  %17 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %18 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %17, %struct.gs_matrix_s* %18) #7
  %19 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %20 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %20, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %21 = load float, float* %arrayidx, align 4, !tbaa !142
  %conv = fpext float %21 to double
  %div = fdiv double %conv, 7.200000e+01
  %22 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev, align 8, !tbaa !1
  %HWResolution8 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %22, i32 0, i32 22
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution8, i32 0, i64 0
  %23 = load float, float* %arrayidx9, align 4, !tbaa !142
  %conv10 = fpext float %23 to double
  %div11 = fdiv double %conv10, 7.200000e+01
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %call12 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %19, double %div, double %div11, %struct.gs_matrix_s* %24) #7
  %25 = bitcast %struct.gx_device_pdf_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #1
  ret void
}

declare i32 @gs_text_process(%struct.gs_text_enum_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_choose_output_char_code(%struct.gx_device_pdf_s* %pdev, %struct.pdf_text_enum_s* %penum, i64* %pch) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %pch.addr = alloca i64*, align 8
  %ch = alloca i64, align 8
  %font = alloca %struct.gs_font_s*, align 8
  %buf = alloca [1 x i8], align 1
  %char_code_length = alloca i32, align 4
  %glyph = alloca i64, align 8
  %code = alloca i32, align 4
  %font0 = alloca %struct.gs_font_type0_s*, align 8
  %glyph12 = alloca i64, align 8
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %code17 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store i64* %pch, i64** %pch.addr, align 8, !tbaa !1
  %0 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  %1 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #1
  %2 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %2, i32 0, i32 12
  %3 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  store %struct.gs_font_s* %3, %struct.gs_font_s** %font, align 8, !tbaa !1
  %4 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %4, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %5 = load i32, i32* %operation, align 4, !tbaa !248
  %and = and i32 %5, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.7

if.then:                                          ; preds = %entry
  %6 = bitcast [1 x i8]* %buf to i8*
  call void @llvm.lifetime.start(i64 1, i8* %6) #1
  %7 = bitcast i32* %char_code_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  %8 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  %9 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %text1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %9, i32 0, i32 0
  %data = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text1, i32 0, i32 1
  %d_glyph = bitcast %union.sd_* %data to i64*
  %10 = load i64, i64* %d_glyph, align 8, !tbaa !25
  store i64 %10, i64* %glyph, align 8, !tbaa !25
  %11 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %13 = bitcast %struct.gs_font_s* %12 to %struct.gs_font_base_s*
  %14 = load i64, i64* %glyph, align 8, !tbaa !25
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %buf, i32 0, i32 0
  %call = call i32 @pdf_encode_glyph(%struct.gs_font_base_s* %13, i64 %14, i8* %arraydecay, i32 1, i32* %char_code_length) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %15 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp slt i32 %15, 0
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  store i64 -1, i64* %ch, align 8, !tbaa !25
  br label %if.end.6

if.else:                                          ; preds = %if.then
  %16 = load i32, i32* %char_code_length, align 4, !tbaa !21
  %cmp3 = icmp ne i32 %16, 1
  br i1 %cmp3, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %if.else
  store i64 -1, i64* %ch, align 8, !tbaa !25
  br label %if.end

if.else.5:                                        ; preds = %if.else
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %buf, i32 0, i64 0
  %17 = load i8, i8* %arrayidx, align 1, !tbaa !161
  %conv = zext i8 %17 to i64
  store i64 %conv, i64* %ch, align 8, !tbaa !25
  br label %if.end

if.end:                                           ; preds = %if.else.5, %if.then.4
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then.2
  %18 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #1
  %19 = bitcast i64* %glyph to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #1
  %20 = bitcast i32* %char_code_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %20) #1
  %21 = bitcast [1 x i8]* %buf to i8*
  call void @llvm.lifetime.end(i64 1, i8* %21) #1
  br label %if.end.36

if.else.7:                                        ; preds = %entry
  %22 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %orig_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %22, i32 0, i32 4
  %23 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font, align 8, !tbaa !93
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %23, i32 0, i32 11
  %24 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp8 = icmp eq i32 %24, 0
  br i1 %cmp8, label %if.then.10, label %if.else.32

if.then.10:                                       ; preds = %if.else.7
  %25 = bitcast %struct.gs_font_type0_s** %font0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #1
  %26 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %orig_font11 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %26, i32 0, i32 4
  %27 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font11, align 8, !tbaa !93
  %28 = bitcast %struct.gs_font_s* %27 to %struct.gs_font_type0_s*
  store %struct.gs_font_type0_s* %28, %struct.gs_font_type0_s** %font0, align 8, !tbaa !1
  %29 = bitcast i64* %glyph12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %29) #1
  %30 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %30, i32 0, i32 28
  %current_glyph = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 1
  %31 = load i64, i64* %current_glyph, align 8, !tbaa !323
  store i64 %31, i64* %glyph12, align 8, !tbaa !25
  %32 = load %struct.gs_font_type0_s*, %struct.gs_font_type0_s** %font0, align 8, !tbaa !1
  %data13 = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %32, i32 0, i32 23
  %FMapType = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data13, i32 0, i32 0
  %33 = load i32, i32* %FMapType, align 4, !tbaa !79
  %cmp14 = icmp eq i32 %33, 9
  br i1 %cmp14, label %if.then.16, label %if.else.25

if.then.16:                                       ; preds = %if.then.10
  %34 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #1
  %35 = bitcast i32* %code17 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %35) #1
  %36 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %37 = load %struct.gs_font_s*, %struct.gs_font_s** %font, align 8, !tbaa !1
  %call18 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %36, %struct.gs_font_s* %37, %struct.pdf_font_resource_s** %pdfont, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call18, i32* %code17, align 4, !tbaa !21
  %38 = load i32, i32* %code17, align 4, !tbaa !21
  %cmp19 = icmp slt i32 %38, 0
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.16
  %39 = load i32, i32* %code17, align 4, !tbaa !21
  store i32 %39, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.22:                                        ; preds = %if.then.16
  %40 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %41 = load i64, i64* %glyph12, align 8, !tbaa !25
  %call23 = call i64 @pdf_find_glyph(%struct.pdf_font_resource_s* %40, i64 %41) #7
  store i64 %call23, i64* %ch, align 8, !tbaa !25
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.22, %if.then.21
  %42 = bitcast i32* %code17 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %42) #1
  %43 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %43) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.28 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.27

if.else.25:                                       ; preds = %if.then.10
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %returned26 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %44, i32 0, i32 28
  %current_char = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned26, i32 0, i32 0
  %45 = load i64, i64* %current_char, align 8, !tbaa !319
  store i64 %45, i64* %ch, align 8, !tbaa !25
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.28

cleanup.28:                                       ; preds = %if.end.27, %cleanup
  %46 = bitcast i64* %glyph12 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #1
  %47 = bitcast %struct.gs_font_type0_s** %font0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #1
  %cleanup.dest.30 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.30, label %cleanup.37 [
    i32 0, label %cleanup.cont.31
  ]

cleanup.cont.31:                                  ; preds = %cleanup.28
  br label %if.end.35

if.else.32:                                       ; preds = %if.else.7
  %48 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %returned33 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %48, i32 0, i32 28
  %current_char34 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned33, i32 0, i32 0
  %49 = load i64, i64* %current_char34, align 8, !tbaa !319
  store i64 %49, i64* %ch, align 8, !tbaa !25
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %cleanup.cont.31
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.6
  %50 = load i64, i64* %ch, align 8, !tbaa !25
  %51 = load i64*, i64** %pch.addr, align 8, !tbaa !1
  store i64 %50, i64* %51, align 8, !tbaa !25
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.37

cleanup.37:                                       ; preds = %if.end.36, %cleanup.28
  %52 = bitcast %struct.gs_font_s** %font to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #1
  %53 = bitcast i64* %ch to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #1
  %54 = load i32, i32* %retval
  ret i32 %54
}

declare void @gs_make_mem_mono_device(%struct.gx_device_memory_s*, %struct.gs_memory_s*, %struct.gx_device_s*) #2

declare void @gx_device_retain(%struct.gx_device_s*, i32) #2

declare i32 @gx_alloc_char_bits(%struct.gs_font_dir_s*, %struct.gx_device_memory_s*, %struct.gx_device_memory_s*, i16 zeroext, i16 zeroext, %struct.gs_log2_scale_point_s*, i32, %struct.cached_char_s**) #2

declare i32 @gx_add_cached_char(%struct.gs_font_dir_s*, %struct.gx_device_memory_s*, %struct.cached_char_s*, %struct.cached_fm_pair_s*, %struct.gs_log2_scale_point_s*) #2

declare i32 @gx_hld_get_color_space_and_ccolor(%struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gs_color_space_s**, %struct.gs_client_color_s**) #2

; Function Attrs: nounwind uwtable
define internal i32 @install_PS_charproc_accumulator(%struct.gx_device_pdf_s* %pdev, %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s* %pte_default, %struct.pdf_text_enum_s* %penum) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pte.addr = alloca %struct.gs_text_enum_s*, align 8
  %pte_default.addr = alloca %struct.gs_text_enum_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %code = alloca i32, align 4
  %m = alloca %struct.gs_matrix_s, align 4
  %pdfont = alloca %struct.pdf_font_resource_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %pte_default, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  %returned = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %1, i32 0, i32 28
  %current_char = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned, i32 0, i32 0
  %2 = load i64, i64* %current_char, align 8, !tbaa !320
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %returned1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 28
  %current_char2 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned1, i32 0, i32 0
  store i64 %2, i64* %current_char2, align 8, !tbaa !319
  %4 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default.addr, align 8, !tbaa !1
  %returned3 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %4, i32 0, i32 28
  %current_glyph = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned3, i32 0, i32 1
  %5 = load i64, i64* %current_glyph, align 8, !tbaa !322
  %6 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %returned4 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %6, i32 0, i32 28
  %current_glyph5 = getelementptr inbounds %struct.gs_text_returned_s, %struct.gs_text_returned_s* %returned4, i32 0, i32 1
  store i64 %5, i64* %current_glyph5, align 8, !tbaa !323
  %7 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_ctm = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %7, i32 0, i32 211
  %8 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %8, i32 0, i32 3
  %9 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !247
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %9, i32 0, i32 5
  %10 = bitcast %struct.gs_matrix_fixed_s* %charproc_ctm to i8*
  %11 = bitcast %struct.gs_matrix_fixed_s* %ctm to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 36, i32 4, i1 false), !tbaa.struct !358
  %12 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %12, i32 0, i32 12
  %13 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font, align 8, !tbaa !217
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %13, i32 0, i32 11
  %14 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %14, 3
  br i1 %cmp, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %entry
  %15 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %outer_CID = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %15, i32 0, i32 13
  %16 = load i64, i64* %outer_CID, align 8, !tbaa !341
  %cmp6 = icmp eq i64 %16, 2147483647
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.46

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %17 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pte_default8 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %17, i32 0, i32 29
  %18 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte_default8, align 8, !tbaa !86
  %text = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %18, i32 0, i32 0
  %operation = getelementptr inbounds %struct.gs_text_params_s, %struct.gs_text_params_s* %text, i32 0, i32 0
  %19 = load i32, i32* %operation, align 4, !tbaa !225
  %and = and i32 %19, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.46, label %if.then

if.then:                                          ; preds = %land.lhs.true.7
  %20 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.start(i64 24, i8* %20) #1
  %21 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #1
  %22 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %call = call i32 @pdf_start_charproc_accum(%struct.gx_device_pdf_s* %22) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %23 = load i32, i32* %code, align 4, !tbaa !21
  %cmp9 = icmp slt i32 %23, 0
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %24 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %24, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  %25 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %25, i32 0, i32 13
  %26 = load i32, i32* %width, align 4, !tbaa !349
  %mul = mul nsw i32 %26, 100
  store i32 %mul, i32* %width, align 4, !tbaa !349
  %27 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %27, i32 0, i32 14
  %28 = load i32, i32* %height, align 4, !tbaa !350
  %mul11 = mul nsw i32 %28, 100
  store i32 %mul11, i32* %height, align 4, !tbaa !350
  %29 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %30 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pis12 = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %30, i32 0, i32 3
  %31 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis12, align 8, !tbaa !261
  %32 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %pte.addr, align 8, !tbaa !1
  %pdcolor = getelementptr inbounds %struct.gs_text_enum_s, %struct.gs_text_enum_s* %32, i32 0, i32 6
  %33 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !294
  call void @pdf_viewer_state_from_imager_state(%struct.gx_device_pdf_s* %29, %struct.gs_imager_state_s* %31, %struct.gx_device_color_s* %33) #7
  %34 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %34, i32 0, i32 51
  %line_params = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state, i32 0, i32 3
  %half_width = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params, i32 0, i32 0
  store float -1.000000e+00, float* %half_width, align 4, !tbaa !359
  %35 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state13 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %35, i32 0, i32 51
  %line_params14 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state13, i32 0, i32 3
  %start_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params14, i32 0, i32 1
  store i32 4, i32* %start_cap, align 4, !tbaa !360
  %36 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state15 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %36, i32 0, i32 51
  %line_params16 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state15, i32 0, i32 3
  %end_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params16, i32 0, i32 2
  store i32 4, i32* %end_cap, align 4, !tbaa !361
  %37 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state17 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %37, i32 0, i32 51
  %line_params18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state17, i32 0, i32 3
  %dash_cap = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params18, i32 0, i32 3
  store i32 4, i32* %dash_cap, align 4, !tbaa !362
  %38 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state19 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %38, i32 0, i32 51
  %line_params20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state19, i32 0, i32 3
  %join = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params20, i32 0, i32 4
  store i32 5, i32* %join, align 4, !tbaa !363
  %39 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state21 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %39, i32 0, i32 51
  %line_params22 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state21, i32 0, i32 3
  %miter_limit = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params22, i32 0, i32 6
  store float -1.000000e+00, float* %miter_limit, align 4, !tbaa !364
  %40 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %state23 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %40, i32 0, i32 51
  %line_params24 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %state23, i32 0, i32 3
  %dash = getelementptr inbounds %struct.gx_line_params_s, %struct.gx_line_params_s* %line_params24, i32 0, i32 11
  %pattern_size = getelementptr inbounds %struct.gx_dash_params_s, %struct.gx_dash_params_s* %dash, i32 0, i32 1
  store i32 -1, i32* %pattern_size, align 4, !tbaa !365
  call void @gs_make_identity(%struct.gs_matrix_s* %m) #7
  %call25 = call i32 @gs_matrix_scale(%struct.gs_matrix_s* %m, double 1.000000e+02, double 1.000000e+02, %struct.gs_matrix_s* %m) #7
  %41 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %pis26 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %41, i32 0, i32 3
  %42 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis26, align 8, !tbaa !247
  %ctm27 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %42, i32 0, i32 5
  %call28 = call i32 @gs_matrix_fixed_from_matrix(%struct.gs_matrix_fixed_s* %ctm27, %struct.gs_matrix_s* %m) #7
  %43 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %44 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %45 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %output_char_code = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %45, i32 0, i32 35
  %call29 = call i32 @pdf_choose_output_char_code(%struct.gx_device_pdf_s* %43, %struct.pdf_text_enum_s* %44, i64* %output_char_code) #7
  store i32 %call29, i32* %code, align 4, !tbaa !21
  %46 = load i32, i32* %code, align 4, !tbaa !21
  %cmp30 = icmp slt i32 %46, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end
  %47 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %47, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.32:                                        ; preds = %if.end
  %48 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %49 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %current_font33 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %49, i32 0, i32 12
  %50 = load %struct.gs_font_s*, %struct.gs_font_s** %current_font33, align 8, !tbaa !217
  %call34 = call i32 @pdf_attached_font_resource(%struct.gx_device_pdf_s* %48, %struct.gs_font_s* %50, %struct.pdf_font_resource_s** %pdfont, i8** null, double** null, i32* null, i32* null) #7
  store i32 %call34, i32* %code, align 4, !tbaa !21
  %51 = load i32, i32* %code, align 4, !tbaa !21
  %cmp35 = icmp slt i32 %51, 0
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.32
  %52 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %52, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.37:                                        ; preds = %if.end.32
  %53 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %54 = bitcast %struct.pdf_font_resource_s* %53 to %struct.pdf_resource_s*
  %55 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %font3 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %55, i32 0, i32 209
  store %struct.pdf_resource_s* %54, %struct.pdf_resource_s** %font3, align 8, !tbaa !102
  %56 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %56, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %s = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 7
  %type3 = bitcast %union.anon.5* %s to %struct.anon.8*
  %Resources = getelementptr inbounds %struct.anon.8, %struct.anon.8* %type3, i32 0, i32 5
  %57 = load %struct.cos_dict_s*, %struct.cos_dict_s** %Resources, align 8, !tbaa !211
  %58 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %substream_Resources = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %58, i32 0, i32 205
  store %struct.cos_dict_s* %57, %struct.cos_dict_s** %substream_Resources, align 8, !tbaa !366
  %59 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %charproc_accum = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %59, i32 0, i32 31
  store i32 1, i32* %charproc_accum, align 4, !tbaa !87
  %60 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %accumulating_charproc = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %60, i32 0, i32 212
  store i32 1, i32* %accumulating_charproc, align 4, !tbaa !88
  %61 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_BBox = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %61, i32 0, i32 213
  %p = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %charproc_BBox, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  store double 1.000000e+04, double* %x, align 8, !tbaa !371
  %62 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_BBox38 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %62, i32 0, i32 213
  %p39 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %charproc_BBox38, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p39, i32 0, i32 1
  store double 1.000000e+04, double* %y, align 8, !tbaa !372
  %63 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_BBox40 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %63, i32 0, i32 213
  %q = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %charproc_BBox40, i32 0, i32 1
  %x41 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q, i32 0, i32 0
  store double 0.000000e+00, double* %x41, align 8, !tbaa !373
  %64 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %charproc_BBox42 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %64, i32 0, i32 213
  %q43 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %charproc_BBox42, i32 0, i32 1
  %y44 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q43, i32 0, i32 1
  store double 0.000000e+00, double* %y44, align 8, !tbaa !374
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.37, %if.then.36, %if.then.31, %if.then.10
  %65 = bitcast %struct.pdf_font_resource_s** %pdfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #1
  %66 = bitcast %struct.gs_matrix_s* %m to i8*
  call void @llvm.lifetime.end(i64 24, i8* %66) #1
  br label %cleanup.47

if.end.46:                                        ; preds = %land.lhs.true.7, %land.lhs.true, %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.47

cleanup.47:                                       ; preds = %if.end.46, %cleanup
  %67 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %67) #1
  %68 = load i32, i32* %retval
  ret i32 %68
}

declare i32 @process_cid_text(%struct.gs_text_enum_s*, i8*, i32) #2

declare i32 @process_plain_text(%struct.gs_text_enum_s*, i8*, i32) #2

declare i32 @process_cmap_text(%struct.gs_text_enum_s*, i8*, i32) #2

declare i32 @process_composite_text(%struct.gs_text_enum_s*, i8*, i32) #2

declare i32 @pdf_must_put_clip_path(%struct.gx_device_pdf_s*, %struct.gx_clip_path_s*) #2

declare i32 @pdf_unclip(%struct.gx_device_pdf_s*) #2

declare i32 @pdf_open_page(%struct.gx_device_pdf_s*, i32) #2

declare i32 @pdf_prepare_fill(%struct.gx_device_pdf_s*, %struct.gs_imager_state_s*) #2

declare i32 @pdf_put_clip_path(%struct.gx_device_pdf_s*, %struct.gx_clip_path_s*) #2

declare i32 @gx_remap_color(%struct.gs_state_s*) #2

declare i32 @pdf_set_drawing_color(%struct.gx_device_pdf_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_hl_saved_color_s*, i32*, %struct.psdf_set_color_commands_s*) #2

declare void @gs_swapcolors_quick(%struct.gs_state_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_choose_output_glyph_hame(%struct.gx_device_pdf_s* %pdev, %struct.pdf_text_enum_s* %penum, %struct.gs_const_string_s* %gnstr, i64 %glyph) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %penum.addr = alloca %struct.pdf_text_enum_s*, align 8
  %gnstr.addr = alloca %struct.gs_const_string_s*, align 8
  %glyph.addr = alloca i64, align 8
  %buf = alloca [6 x i8], align 1
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_text_enum_s* %penum, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_const_string_s* %gnstr, %struct.gs_const_string_s** %gnstr.addr, align 8, !tbaa !1
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  %0 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %orig_font = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %0, i32 0, i32 4
  %1 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font, align 8, !tbaa !93
  %FontType = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %1, i32 0, i32 11
  %2 = load i32, i32* %FontType, align 4, !tbaa !74
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %orig_font1 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %3, i32 0, i32 4
  %4 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font1, align 8, !tbaa !93
  %procs = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %4, i32 0, i32 20
  %glyph_name = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 9
  %5 = load i32 (%struct.gs_font_s*, i64, %struct.gs_const_string_s*)*, i32 (%struct.gs_font_s*, i64, %struct.gs_const_string_s*)** %glyph_name, align 8, !tbaa !229
  %6 = load %struct.pdf_text_enum_s*, %struct.pdf_text_enum_s** %penum.addr, align 8, !tbaa !1
  %orig_font2 = getelementptr inbounds %struct.pdf_text_enum_s, %struct.pdf_text_enum_s* %6, i32 0, i32 4
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %orig_font2, align 8, !tbaa !93
  %8 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %9 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %gnstr.addr, align 8, !tbaa !1
  %call = call i32 %5(%struct.gs_font_s* %7, i64 %8, %struct.gs_const_string_s* %9) #7
  %cmp3 = icmp slt i32 %call, 0
  br i1 %cmp3, label %if.then, label %if.end.14

if.then:                                          ; preds = %lor.lhs.false, %entry
  %10 = bitcast [6 x i8]* %buf to i8*
  call void @llvm.lifetime.start(i64 6, i8* %10) #1
  %11 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #1
  %12 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %gnstr.addr, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %12, i32 0, i32 1
  store i32 5, i32* %size, align 4, !tbaa !231
  %13 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %13, i32 0, i32 43
  %14 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory, align 8, !tbaa !119
  %procs4 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %14, i32 0, i32 1
  %alloc_string = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs4, i32 0, i32 16
  %15 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_string, align 8, !tbaa !335
  %16 = load %struct.gx_device_pdf_s*, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  %v_memory5 = getelementptr inbounds %struct.gx_device_pdf_s, %struct.gx_device_pdf_s* %16, i32 0, i32 43
  %17 = load %struct.gs_memory_s*, %struct.gs_memory_s** %v_memory5, align 8, !tbaa !119
  %18 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %gnstr.addr, align 8, !tbaa !1
  %size6 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %18, i32 0, i32 1
  %19 = load i32, i32* %size6, align 4, !tbaa !231
  %call7 = call i8* %15(%struct.gs_memory_s* %17, i32 %19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0)) #7
  store i8* %call7, i8** %p, align 8, !tbaa !1
  %20 = load i8*, i8** %p, align 8, !tbaa !1
  %cmp8 = icmp eq i8* %20, null
  br i1 %cmp8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %buf, i32 0, i32 0
  %21 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %and = and i64 %21, 65535
  %conv = trunc i64 %and to i32
  %call10 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %conv) #7
  %22 = load i8*, i8** %p, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [6 x i8], [6 x i8]* %buf, i32 0, i32 0
  %call12 = call i8* @memcpy(i8* %22, i8* %arraydecay11, i64 5) #9
  %23 = load i8*, i8** %p, align 8, !tbaa !1
  %24 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %gnstr.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %24, i32 0, i32 0
  store i8* %23, i8** %data, align 8, !tbaa !230
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.9
  %25 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #1
  %26 = bitcast [6 x i8]* %buf to i8*
  call void @llvm.lifetime.end(i64 6, i8* %26) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.14

if.end.14:                                        ; preds = %cleanup.cont, %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.14, %cleanup
  %27 = load i32, i32* %retval
  ret i32 %27

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i64 @stell(%struct.stream_s*) #2

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8*, i64) #4

declare void @emprintf_program_ident(%struct.gs_memory_s*, i8*, i64) #2

declare i8* @gs_program_name() #2

declare i64 @gs_revision_number() #2

declare i32 @errprintf(%struct.gs_memory_s*, i8*, ...) #2

declare i32 @stream_puts(%struct.stream_s*, i8*) #2

declare i32 @pdf_end_charproc_accum(%struct.gx_device_pdf_s*, %struct.gs_font_s*, %struct.pdf_char_glyph_pairs_s*, i64, i64, %struct.gs_const_string_s*) #2

declare i32 @gx_default_text_restore_state(%struct.gs_text_enum_s*) #2

declare i32 @gs_sprintf(i8*, i8*, ...) #2

declare i32 @pdf_start_charproc_accum(%struct.gx_device_pdf_s*) #2

declare void @pdf_viewer_state_from_imager_state(%struct.gx_device_pdf_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*) #2

declare i32 @gs_matrix_fixed_from_matrix(%struct.gs_matrix_fixed_s*, %struct.gs_matrix_s*) #2

declare i32 @pdf_encode_glyph(%struct.gs_font_base_s*, i64, i8*, i32, i32*) #2

declare i32 @gs_text_is_width_only(%struct.gs_text_enum_s*) #2

declare i32 @gs_text_current_width(%struct.gs_text_enum_s*, %struct.gs_point_s*) #2

declare i32 @gs_text_set_cache(%struct.gs_text_enum_s*, double*, i32) #2

declare i32 @gs_point_transform(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2

declare i32 @gx_clip_to_rectangle(%struct.gs_state_s*, %struct.gs_fixed_rect_s*) #2

declare i32 @pdf_set_charproc_attrs(%struct.gx_device_pdf_s*, %struct.gs_font_s*, double*, i32, i32, i64, i32) #2

declare i64 @gx_get_clip_path_id(%struct.gs_state_s*) #2

declare i32 @pdf_exit_substream(%struct.gx_device_pdf_s*) #2

declare i32 @pdf_cancel_resource(%struct.gx_device_pdf_s*, %struct.pdf_resource_s*, i32) #2

declare void @pdf_forget_resource(%struct.gx_device_pdf_s*, %struct.pdf_resource_s*, i32) #2

declare i32 @gs_text_retry(%struct.gs_text_enum_s*) #2

declare void @gx_default_text_release(%struct.gs_text_enum_s*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_is_compatible_encoding(%struct.gx_device_pdf_s* %pdev, %struct.pdf_font_resource_s* %pdfont, %struct.gs_font_s* %font, %struct.pdf_char_glyph_pair_s* %pairs, i32 %num_chars) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pairs.addr = alloca %struct.pdf_char_glyph_pair_s*, align 8
  %num_chars.addr = alloca i32, align 4
  %pfont = alloca %struct.gs_font_type0_s*, align 8
  %pcmap = alloca %struct.gs_cmap_s*, align 8
  %s0 = alloca %struct.gs_const_string_s*, align 8
  %s1 = alloca %struct.gs_const_string_s*, align 8
  %cleanup.dest.slot = alloca i32
  %font1 = alloca %struct.gs_font_s*, align 8
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pair_s* %pairs, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  store i32 %num_chars, i32* %num_chars.addr, align 4, !tbaa !21
  %0 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %0, i32 0, i32 8
  %1 = load i32, i32* %FontType, align 4, !tbaa !126
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb.8
    i32 53, label %sw.bb.8
    i32 51, label %sw.bb.8
    i32 52, label %sw.bb.8
    i32 54, label %sw.bb.8
    i32 1, label %sw.bb.14
    i32 2, label %sw.bb.14
    i32 42, label %sw.bb.14
    i32 9, label %sw.bb.16
    i32 11, label %sw.bb.16
  ]

sw.bb:                                            ; preds = %entry
  %2 = bitcast %struct.gs_font_type0_s** %pfont to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  %3 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gs_font_s* %3 to %struct.gs_font_type0_s*
  store %struct.gs_font_type0_s* %4, %struct.gs_font_type0_s** %pfont, align 8, !tbaa !1
  %5 = load %struct.gs_font_type0_s*, %struct.gs_font_type0_s** %pfont, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %5, i32 0, i32 23
  %FMapType = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data, i32 0, i32 0
  %6 = load i32, i32* %FMapType, align 4, !tbaa !79
  %cmp = icmp eq i32 %6, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %7 = bitcast %struct.gs_cmap_s** %pcmap to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  %8 = load %struct.gs_font_type0_s*, %struct.gs_font_type0_s** %pfont, align 8, !tbaa !1
  %data1 = getelementptr inbounds %struct.gs_font_type0_s, %struct.gs_font_type0_s* %8, i32 0, i32 23
  %CMap = getelementptr inbounds %struct.gs_type0_data_s, %struct.gs_type0_data_s* %data1, i32 0, i32 11
  %9 = load %struct.gs_cmap_s*, %struct.gs_cmap_s** %CMap, align 8, !tbaa !165
  store %struct.gs_cmap_s* %9, %struct.gs_cmap_s** %pcmap, align 8, !tbaa !1
  %10 = bitcast %struct.gs_const_string_s** %s0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #1
  %11 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %11, i32 0, i32 20
  %type0 = bitcast %union.anon.1* %u to %struct.anon.2*
  %CMapName = getelementptr inbounds %struct.anon.2, %struct.anon.2* %type0, i32 0, i32 2
  store %struct.gs_const_string_s* %CMapName, %struct.gs_const_string_s** %s0, align 8, !tbaa !1
  %12 = bitcast %struct.gs_const_string_s** %s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #1
  %13 = load %struct.gs_cmap_s*, %struct.gs_cmap_s** %pcmap, align 8, !tbaa !1
  %CMapName2 = getelementptr inbounds %struct.gs_cmap_s, %struct.gs_cmap_s* %13, i32 0, i32 2
  store %struct.gs_const_string_s* %CMapName2, %struct.gs_const_string_s** %s1, align 8, !tbaa !1
  %14 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s0, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %14, i32 0, i32 1
  %15 = load i32, i32* %size, align 4, !tbaa !231
  %16 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s1, align 8, !tbaa !1
  %size3 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %16, i32 0, i32 1
  %17 = load i32, i32* %size3, align 4, !tbaa !231
  %cmp4 = icmp eq i32 %15, %17
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %18 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s0, align 8, !tbaa !1
  %data5 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %18, i32 0, i32 0
  %19 = load i8*, i8** %data5, align 8, !tbaa !230
  %20 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s1, align 8, !tbaa !1
  %data6 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %20, i32 0, i32 0
  %21 = load i8*, i8** %data6, align 8, !tbaa !230
  %22 = load %struct.gs_const_string_s*, %struct.gs_const_string_s** %s0, align 8, !tbaa !1
  %size7 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %22, i32 0, i32 1
  %23 = load i32, i32* %size7, align 4, !tbaa !231
  %conv = zext i32 %23 to i64
  %call = call i32 @memcmp(i8* %19, i8* %21, i64 %conv) #10
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %24 = phi i1 [ false, %if.then ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %24 to i32
  store i32 %land.ext, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %25 = bitcast %struct.gs_const_string_s** %s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #1
  %26 = bitcast %struct.gs_const_string_s** %s0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #1
  %27 = bitcast %struct.gs_cmap_s** %pcmap to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #1
  br label %cleanup

if.end:                                           ; preds = %sw.bb
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %land.end
  %28 = bitcast %struct.gs_font_type0_s** %pfont to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  store i32 0, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  %29 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u9 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %29, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u9 to %struct.anon.4*
  %Encoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 4
  %30 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding, align 8, !tbaa !153
  %cmp10 = icmp eq %struct.pdf_encoding_element_s* %30, null
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %sw.bb.8
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %sw.bb.8
  br label %sw.bb.14

sw.bb.14:                                         ; preds = %entry, %entry, %entry, %if.end.13
  %31 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %32 = load %struct.pdf_char_glyph_pair_s*, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  %33 = load i32, i32* %num_chars.addr, align 4, !tbaa !21
  %call15 = call i32 @pdf_check_encoding_compatibility(%struct.pdf_font_resource_s* %31, %struct.pdf_char_glyph_pair_s* %32, i32 %33) #7
  store i32 %call15, i32* %retval
  br label %return

sw.bb.16:                                         ; preds = %entry, %entry
  %34 = bitcast %struct.gs_font_s** %font1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #1
  %35 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %call17 = call %struct.gs_font_base_s* @pdf_font_resource_font(%struct.pdf_font_resource_s* %35, i32 0) #7
  %36 = bitcast %struct.gs_font_base_s* %call17 to %struct.gs_font_s*
  store %struct.gs_font_s* %36, %struct.gs_font_s** %font1, align 8, !tbaa !1
  %37 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %call18 = call %struct.gs_cid_system_info_s* @gs_font_cid_system_info(%struct.gs_font_s* %37) #7
  %38 = load %struct.gs_font_s*, %struct.gs_font_s** %font1, align 8, !tbaa !1
  %call19 = call %struct.gs_cid_system_info_s* @gs_font_cid_system_info(%struct.gs_font_s* %38) #7
  %call20 = call i32 @gs_is_CIDSystemInfo_compatible(%struct.gs_cid_system_info_s* %call18, %struct.gs_cid_system_info_s* %call19) #7
  store i32 %call20, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %39 = bitcast %struct.gs_font_s** %font1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #1
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.16, %sw.bb.14, %if.then.12, %cleanup.cont, %cleanup
  %40 = load i32, i32* %retval
  ret i32 %40

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf_font_has_glyphs(%struct.gx_device_pdf_s* %pdev, %struct.pdf_font_resource_s* %pdfont, %struct.gs_font_s* %font, %struct.pdf_char_glyph_pair_s* %pairs, i32 %num_chars) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_pdf_s*, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %pairs.addr = alloca %struct.pdf_char_glyph_pair_s*, align 8
  %num_chars.addr = alloca i32, align 4
  store %struct.gx_device_pdf_s* %pdev, %struct.gx_device_pdf_s** %pdev.addr, align 8, !tbaa !1
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pair_s* %pairs, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  store i32 %num_chars, i32* %num_chars.addr, align 4, !tbaa !21
  %0 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %FontType = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %0, i32 0, i32 8
  %1 = load i32, i32* %FontType, align 4, !tbaa !126
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb
    i32 53, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 54, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.1
    i32 42, label %sw.bb.1
    i32 9, label %sw.bb.2
    i32 11, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry
  %2 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %3 = load %struct.pdf_char_glyph_pair_s*, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  %4 = load i32, i32* %num_chars.addr, align 4, !tbaa !21
  %call = call i32 @pdf_check_encoding_has_glyphs(%struct.pdf_font_resource_s* %2, %struct.pdf_char_glyph_pair_s* %3, i32 %4) #7
  store i32 %call, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.2, %sw.bb.1, %sw.bb
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #6

declare i32 @gs_is_CIDSystemInfo_compatible(%struct.gs_cid_system_info_s*, %struct.gs_cid_system_info_s*) #2

declare %struct.gs_cid_system_info_s* @gs_font_cid_system_info(%struct.gs_font_s*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_check_encoding_has_glyphs(%struct.pdf_font_resource_s* %pdfont, %struct.pdf_char_glyph_pair_s* %pairs, i32 %num_chars) #0 {
entry:
  %retval = alloca i32, align 4
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %pairs.addr = alloca %struct.pdf_char_glyph_pair_s*, align 8
  %num_chars.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ch = alloca i32, align 4
  %pet = alloca %struct.pdf_encoding_element_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pair_s* %pairs, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  store i32 %num_chars, i32* %num_chars.addr, align 4, !tbaa !21
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 0, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc.8, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !21
  %3 = load i32, i32* %num_chars.addr, align 4, !tbaa !21
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.10

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %ch, align 4, !tbaa !21
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %ch, align 4, !tbaa !21
  %cmp2 = icmp slt i32 %4, 256
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %5 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  %6 = load i32, i32* %ch, align 4, !tbaa !21
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %7, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %Encoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 4
  %8 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding, align 8, !tbaa !153
  %arrayidx = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %8, i64 %idxprom
  store %struct.pdf_encoding_element_s* %arrayidx, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %9 = load i32, i32* %i, align 4, !tbaa !21
  %idxprom4 = sext i32 %9 to i64
  %10 = load %struct.pdf_char_glyph_pair_s*, %struct.pdf_char_glyph_pair_s** %pairs.addr, align 8, !tbaa !1
  %arrayidx5 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %10, i64 %idxprom4
  %glyph = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx5, i32 0, i32 1
  %11 = load i64, i64* %glyph, align 8, !tbaa !155
  %12 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph6 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %12, i32 0, i32 0
  %13 = load i64, i64* %glyph6, align 8, !tbaa !156
  %cmp7 = icmp eq i64 %11, %13
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.3
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %for.body.3
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %14 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.11 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %15 = load i32, i32* %ch, align 4, !tbaa !21
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %ch, align 4, !tbaa !21
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !tbaa !21
  %inc9 = add nsw i32 %16, 1
  store i32 %inc9, i32* %i, align 4, !tbaa !21
  br label %for.cond

for.end.10:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.11

cleanup.11:                                       ; preds = %for.end.10, %cleanup
  %17 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #1
  %18 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #1
  %19 = load i32, i32* %retval
  ret i32 %19
}

declare i32 @pdf_font_embed_status(%struct.gx_device_pdf_s*, %struct.gs_font_s*, i32*, %struct.pdf_char_glyph_pair_s*, i32) #2

declare i32 @pdf_font_std_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i32, i64, %struct.gs_font_base_s*, i32) #2

declare i32 @pdf_font_cidfont_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*) #2

declare i32 @pdf_font_simple_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s**, i64, %struct.pdf_font_descriptor_s*) #2

declare i32 @pdf_font_descriptor_alloc(%struct.gx_device_pdf_s*, %struct.pdf_font_descriptor_s**, %struct.gs_font_base_s*, i32) #2

declare %struct.gs_font_base_s* @pdf_font_descriptor_font(%struct.pdf_font_descriptor_s*, i32) #2

declare i64 @copied_get_notdef(%struct.gs_font_s*) #2

declare i32 @pdf_obtain_cidfont_widths_arrays(%struct.gx_device_pdf_s*, %struct.pdf_font_resource_s*, i32, double**, double**, double**) #2

; Function Attrs: nounwind uwtable
define internal i32 @pdf_next_char_glyph(%struct.gs_text_enum_s* %penum, %struct.gs_string_s* %pstr, %struct.gs_font_s* %font, i32 %font_is_simple, i64* %char_code, i64* %cid, i64* %glyph) #0 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.gs_text_enum_s*, align 8
  %pstr.addr = alloca %struct.gs_string_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %font_is_simple.addr = alloca i32, align 4
  %char_code.addr = alloca i64*, align 8
  %cid.addr = alloca i64*, align 8
  %glyph.addr = alloca i64*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_text_enum_s* %penum, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  store %struct.gs_string_s* %pstr, %struct.gs_string_s** %pstr.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store i32 %font_is_simple, i32* %font_is_simple.addr, align 4, !tbaa !21
  store i64* %char_code, i64** %char_code.addr, align 8, !tbaa !1
  store i64* %cid, i64** %cid.addr, align 8, !tbaa !1
  store i64* %glyph, i64** %glyph.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %1, i32 0, i32 20
  %next_char_glyph = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs, i32 0, i32 11
  %2 = load i32 (%struct.gs_text_enum_s*, i64*, i64*)*, i32 (%struct.gs_text_enum_s*, i64*, i64*)** %next_char_glyph, align 8, !tbaa !94
  %3 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %penum.addr, align 8, !tbaa !1
  %4 = load i64*, i64** %char_code.addr, align 8, !tbaa !1
  %5 = load i64*, i64** %glyph.addr, align 8, !tbaa !1
  %call = call i32 %2(%struct.gs_text_enum_s* %3, i64* %4, i64* %5) #7
  store i32 %call, i32* %code, align 4, !tbaa !21
  %6 = load i32, i32* %code, align 4, !tbaa !21
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %7, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %code, align 4, !tbaa !21
  %cmp1 = icmp slt i32 %8, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %9 = load i32, i32* %code, align 4, !tbaa !21
  store i32 %9, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %10 = load i32, i32* %font_is_simple.addr, align 4, !tbaa !21
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end.3
  %11 = load i64*, i64** %char_code.addr, align 8, !tbaa !1
  %12 = load i64, i64* %11, align 8, !tbaa !25
  %13 = load i64*, i64** %cid.addr, align 8, !tbaa !1
  store i64 %12, i64* %13, align 8, !tbaa !25
  %14 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %procs5 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %14, i32 0, i32 20
  %encode_char = getelementptr inbounds %struct.gs_font_procs_s, %struct.gs_font_procs_s* %procs5, i32 0, i32 4
  %15 = load i64 (%struct.gs_font_s*, i64, i32)*, i64 (%struct.gs_font_s*, i64, i32)** %encode_char, align 8, !tbaa !184
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %17 = load i64*, i64** %char_code.addr, align 8, !tbaa !1
  %18 = load i64, i64* %17, align 8, !tbaa !25
  %call6 = call i64 %15(%struct.gs_font_s* %16, i64 %18, i32 0) #7
  %19 = load i64*, i64** %glyph.addr, align 8, !tbaa !1
  store i64 %call6, i64* %19, align 8, !tbaa !25
  %20 = load i64*, i64** %glyph.addr, align 8, !tbaa !1
  %21 = load i64, i64* %20, align 8, !tbaa !25
  %cmp7 = icmp eq i64 %21, 2147483647
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.4
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.9:                                         ; preds = %if.then.4
  br label %if.end.13

if.else:                                          ; preds = %if.end.3
  %22 = load i64*, i64** %glyph.addr, align 8, !tbaa !1
  %23 = load i64, i64* %22, align 8, !tbaa !25
  %cmp10 = icmp ult i64 %23, 2147483648
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.12:                                        ; preds = %if.else
  %24 = load i64*, i64** %glyph.addr, align 8, !tbaa !1
  %25 = load i64, i64* %24, align 8, !tbaa !25
  %sub = sub i64 %25, 2147483648
  %26 = load i64*, i64** %cid.addr, align 8, !tbaa !1
  store i64 %sub, i64* %26, align 8, !tbaa !25
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end.9
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.13, %if.then.11, %if.then.8, %if.then.2, %if.then
  %27 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #1
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal void @store_glyphs(%struct.pdf_char_glyph_pairs_s* %cgp, i8* %glyph_usage, i32 %char_cache_size, i64 %char_code, i64 %cid, i64 %glyph) #0 {
entry:
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %glyph_usage.addr = alloca i8*, align 8
  %char_cache_size.addr = alloca i32, align 4
  %char_code.addr = alloca i64, align 8
  %cid.addr = alloca i64, align 8
  %glyph.addr = alloca i64, align 8
  %j = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  store i8* %glyph_usage, i8** %glyph_usage.addr, align 8, !tbaa !1
  store i32 %char_cache_size, i32* %char_cache_size.addr, align 4, !tbaa !21
  store i64 %char_code, i64* %char_code.addr, align 8, !tbaa !25
  store i64 %cid, i64* %cid.addr, align 8, !tbaa !25
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  %0 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %j, align 4, !tbaa !21
  %2 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %2, i32 0, i32 0
  %3 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %5, i32 0, i32 3
  %arrayidx = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom
  %chr = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 0
  %6 = load i64, i64* %chr, align 8, !tbaa !151
  %7 = load i64, i64* %cid.addr, align 8, !tbaa !25
  %cmp1 = icmp eq i64 %6, %7
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %j, align 4, !tbaa !21
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %9 = load i32, i32* %j, align 4, !tbaa !21
  %10 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars2 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %10, i32 0, i32 0
  %11 = load i32, i32* %num_all_chars2, align 4, !tbaa !169
  %cmp3 = icmp slt i32 %9, %11
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %for.end
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.5:                                         ; preds = %for.end
  %12 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %13 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars6 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %13, i32 0, i32 0
  %14 = load i32, i32* %num_all_chars6, align 4, !tbaa !169
  %idxprom7 = sext i32 %14 to i64
  %15 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s8 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %15, i32 0, i32 3
  %arrayidx9 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s8, i32 0, i64 %idxprom7
  %glyph10 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx9, i32 0, i32 1
  store i64 %12, i64* %glyph10, align 8, !tbaa !155
  %16 = load i64, i64* %char_code.addr, align 8, !tbaa !25
  %17 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars11 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %17, i32 0, i32 0
  %18 = load i32, i32* %num_all_chars11, align 4, !tbaa !169
  %idxprom12 = sext i32 %18 to i64
  %19 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s13 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %19, i32 0, i32 3
  %arrayidx14 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s13, i32 0, i64 %idxprom12
  %chr15 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx14, i32 0, i32 0
  store i64 %16, i64* %chr15, align 8, !tbaa !151
  %20 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars16 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %20, i32 0, i32 0
  %21 = load i32, i32* %num_all_chars16, align 4, !tbaa !169
  %inc17 = add nsw i32 %21, 1
  store i32 %inc17, i32* %num_all_chars16, align 4, !tbaa !169
  %22 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %cmp18 = icmp eq i8* %22, null
  br i1 %cmp18, label %if.then.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.5
  %23 = load i64, i64* %cid.addr, align 8, !tbaa !25
  %div = udiv i64 %23, 8
  %24 = load i8*, i8** %glyph_usage.addr, align 8, !tbaa !1
  %arrayidx19 = getelementptr inbounds i8, i8* %24, i64 %div
  %25 = load i8, i8* %arrayidx19, align 1, !tbaa !161
  %conv = zext i8 %25 to i32
  %26 = load i64, i64* %cid.addr, align 8, !tbaa !25
  %and = and i64 %26, 7
  %sh_prom = trunc i64 %and to i32
  %shr = ashr i32 128, %sh_prom
  %and20 = and i32 %conv, %shr
  %tobool = icmp ne i32 %and20, 0
  br i1 %tobool, label %if.end.35, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false, %if.end.5
  %27 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %28 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %28, i32 0, i32 2
  %29 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %30 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %30, i32 0, i32 1
  %31 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %add = add nsw i32 %29, %31
  %idxprom22 = sext i32 %add to i64
  %32 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s23 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %32, i32 0, i32 3
  %arrayidx24 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s23, i32 0, i64 %idxprom22
  %glyph25 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx24, i32 0, i32 1
  store i64 %27, i64* %glyph25, align 8, !tbaa !155
  %33 = load i64, i64* %char_code.addr, align 8, !tbaa !25
  %34 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset26 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %34, i32 0, i32 2
  %35 = load i32, i32* %unused_offset26, align 4, !tbaa !158
  %36 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars27 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %36, i32 0, i32 1
  %37 = load i32, i32* %num_unused_chars27, align 4, !tbaa !160
  %add28 = add nsw i32 %35, %37
  %idxprom29 = sext i32 %add28 to i64
  %38 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s30 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %38, i32 0, i32 3
  %arrayidx31 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s30, i32 0, i64 %idxprom29
  %chr32 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx31, i32 0, i32 0
  store i64 %33, i64* %chr32, align 8, !tbaa !151
  %39 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars33 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %39, i32 0, i32 1
  %40 = load i32, i32* %num_unused_chars33, align 4, !tbaa !160
  %inc34 = add nsw i32 %40, 1
  store i32 %inc34, i32* %num_unused_chars33, align 4, !tbaa !160
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.21, %lor.lhs.false
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.35, %if.then.4
  %41 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %41) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare i64 @gs_c_name_glyph(i8*, i32) #2

; Function Attrs: nounwind uwtable
define internal i64 @pdf_reserve_char_code_in_pdfont(%struct.pdf_font_resource_s* %pdfont, %struct.pdf_char_glyph_pairs_s* %cgp, i64 %glyph, i32* %last_reserved_char) #0 {
entry:
  %retval = alloca i64, align 8
  %pdfont.addr = alloca %struct.pdf_font_resource_s*, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %glyph.addr = alloca i64, align 8
  %last_reserved_char.addr = alloca i32*, align 8
  %j = alloca i32, align 4
  %ch = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pet = alloca %struct.pdf_encoding_element_s*, align 8
  %enc = alloca i16*, align 8
  %pet40 = alloca %struct.pdf_encoding_element_s*, align 8
  %pet71 = alloca %struct.pdf_encoding_element_s*, align 8
  store %struct.pdf_font_resource_s* %pdfont, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  store i32* %last_reserved_char, i32** %last_reserved_char.addr, align 8, !tbaa !1
  %0 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 0, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4, !tbaa !21
  %3 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %3, i32 0, i32 0
  %4 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %6, i32 0, i32 3
  %arrayidx = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom
  %glyph1 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 1
  %7 = load i64, i64* %glyph1, align 8, !tbaa !155
  %8 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %cmp2 = icmp eq i64 %7, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %j, align 4, !tbaa !21
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %10 = load i32, i32* %j, align 4, !tbaa !21
  %11 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars3 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %11, i32 0, i32 0
  %12 = load i32, i32* %num_all_chars3, align 4, !tbaa !169
  %cmp4 = icmp slt i32 %10, %12
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %for.end
  %13 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom6 = sext i32 %13 to i64
  %14 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s7 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %14, i32 0, i32 3
  %arrayidx8 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s7, i32 0, i64 %idxprom6
  %chr = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx8, i32 0, i32 0
  %15 = load i64, i64* %chr, align 8, !tbaa !151
  store i64 %15, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.118

if.end.9:                                         ; preds = %for.end
  store i32 0, i32* %ch, align 4, !tbaa !21
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc.19, %if.end.9
  %16 = load i32, i32* %ch, align 4, !tbaa !21
  %cmp11 = icmp slt i32 %16, 256
  br i1 %cmp11, label %for.body.12, label %for.end.21

for.body.12:                                      ; preds = %for.cond.10
  %17 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %18 = load i32, i32* %ch, align 4, !tbaa !21
  %idxprom13 = sext i32 %18 to i64
  %19 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %19, i32 0, i32 20
  %simple = bitcast %union.anon.1* %u to %struct.anon.4*
  %Encoding = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple, i32 0, i32 4
  %20 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding, align 8, !tbaa !153
  %arrayidx14 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %20, i64 %idxprom13
  store %struct.pdf_encoding_element_s* %arrayidx14, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %21 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %22 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet, align 8, !tbaa !1
  %glyph15 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %22, i32 0, i32 0
  %23 = load i64, i64* %glyph15, align 8, !tbaa !156
  %cmp16 = icmp eq i64 %21, %23
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %for.body.12
  %24 = load i32, i32* %ch, align 4, !tbaa !21
  %conv = sext i32 %24 to i64
  store i64 %conv, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.18:                                        ; preds = %for.body.12
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.18, %if.then.17
  %25 = bitcast %struct.pdf_encoding_element_s** %pet to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #1
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.118 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc.19

for.inc.19:                                       ; preds = %cleanup.cont
  %26 = load i32, i32* %ch, align 4, !tbaa !21
  %inc20 = add nsw i32 %26, 1
  store i32 %inc20, i32* %ch, align 4, !tbaa !21
  br label %for.cond.10

for.end.21:                                       ; preds = %for.cond.10
  %27 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u22 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %27, i32 0, i32 20
  %simple23 = bitcast %union.anon.1* %u22 to %struct.anon.4*
  %preferred_encoding_index = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple23, i32 0, i32 3
  %28 = load i32, i32* %preferred_encoding_index, align 4, !tbaa !228
  %cmp24 = icmp ne i32 %28, -1
  br i1 %cmp24, label %if.then.26, label %if.end.62

if.then.26:                                       ; preds = %for.end.21
  %29 = bitcast i16** %enc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %29) #1
  %30 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u27 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %30, i32 0, i32 20
  %simple28 = bitcast %union.anon.1* %u27 to %struct.anon.4*
  %preferred_encoding_index29 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple28, i32 0, i32 3
  %31 = load i32, i32* %preferred_encoding_index29, align 4, !tbaa !228
  %idxprom30 = sext i32 %31 to i64
  %arrayidx31 = getelementptr inbounds [0 x i16*], [0 x i16*]* @gs_c_known_encodings, i32 0, i64 %idxprom30
  %32 = load i16*, i16** %arrayidx31, align 8, !tbaa !1
  store i16* %32, i16** %enc, align 8, !tbaa !1
  %33 = load i64, i64* @standard_glyph_code_for_notdef, align 8, !tbaa !25
  %cmp32 = icmp eq i64 %33, 2147483647
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.26
  %call = call i64 @gs_c_name_glyph(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i32 7) #7
  %34 = load i64, i64* @gs_c_min_std_encoding_glyph, align 8, !tbaa !25
  %sub = sub i64 %call, %34
  store i64 %sub, i64* @standard_glyph_code_for_notdef, align 8, !tbaa !25
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.then.26
  %35 = load i32*, i32** %last_reserved_char.addr, align 8, !tbaa !1
  %36 = load i32, i32* %35, align 4, !tbaa !21
  %add = add nsw i32 %36, 1
  store i32 %add, i32* %ch, align 4, !tbaa !21
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.59, %if.end.35
  %37 = load i32, i32* %ch, align 4, !tbaa !21
  %cmp37 = icmp slt i32 %37, 256
  br i1 %cmp37, label %for.body.39, label %for.end.61

for.body.39:                                      ; preds = %for.cond.36
  %38 = bitcast %struct.pdf_encoding_element_s** %pet40 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %38) #1
  %39 = load i32, i32* %ch, align 4, !tbaa !21
  %idxprom41 = sext i32 %39 to i64
  %40 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u42 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %40, i32 0, i32 20
  %simple43 = bitcast %union.anon.1* %u42 to %struct.anon.4*
  %Encoding44 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple43, i32 0, i32 4
  %41 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding44, align 8, !tbaa !153
  %arrayidx45 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %41, i64 %idxprom41
  store %struct.pdf_encoding_element_s* %arrayidx45, %struct.pdf_encoding_element_s** %pet40, align 8, !tbaa !1
  %42 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet40, align 8, !tbaa !1
  %glyph46 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %42, i32 0, i32 0
  %43 = load i64, i64* %glyph46, align 8, !tbaa !156
  %cmp47 = icmp eq i64 %43, 2147483647
  br i1 %cmp47, label %land.lhs.true, label %if.end.55

land.lhs.true:                                    ; preds = %for.body.39
  %44 = load i32, i32* %ch, align 4, !tbaa !21
  %idxprom49 = sext i32 %44 to i64
  %45 = load i16*, i16** %enc, align 8, !tbaa !1
  %arrayidx50 = getelementptr inbounds i16, i16* %45, i64 %idxprom49
  %46 = load i16, i16* %arrayidx50, align 2, !tbaa !375
  %conv51 = zext i16 %46 to i64
  %47 = load i64, i64* @standard_glyph_code_for_notdef, align 8, !tbaa !25
  %cmp52 = icmp eq i64 %conv51, %47
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %land.lhs.true
  %48 = load i32, i32* %ch, align 4, !tbaa !21
  %49 = load i32*, i32** %last_reserved_char.addr, align 8, !tbaa !1
  store i32 %48, i32* %49, align 4, !tbaa !21
  store i32 8, i32* %cleanup.dest.slot
  br label %cleanup.56

if.end.55:                                        ; preds = %land.lhs.true, %for.body.39
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.56

cleanup.56:                                       ; preds = %if.end.55, %if.then.54
  %50 = bitcast %struct.pdf_encoding_element_s** %pet40 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %50) #1
  %cleanup.dest.57 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.57, label %unreachable [
    i32 0, label %cleanup.cont.58
    i32 8, label %for.end.61
  ]

cleanup.cont.58:                                  ; preds = %cleanup.56
  br label %for.inc.59

for.inc.59:                                       ; preds = %cleanup.cont.58
  %51 = load i32, i32* %ch, align 4, !tbaa !21
  %inc60 = add nsw i32 %51, 1
  store i32 %inc60, i32* %ch, align 4, !tbaa !21
  br label %for.cond.36

for.end.61:                                       ; preds = %cleanup.56, %for.cond.36
  %52 = bitcast i16** %enc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #1
  br label %if.end.62

if.end.62:                                        ; preds = %for.end.61, %for.end.21
  %53 = load i32, i32* %ch, align 4, !tbaa !21
  %cmp63 = icmp sgt i32 %53, 255
  br i1 %cmp63, label %if.then.65, label %if.end.88

if.then.65:                                       ; preds = %if.end.62
  %54 = load i32*, i32** %last_reserved_char.addr, align 8, !tbaa !1
  %55 = load i32, i32* %54, align 4, !tbaa !21
  %add66 = add nsw i32 %55, 1
  store i32 %add66, i32* %ch, align 4, !tbaa !21
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.85, %if.then.65
  %56 = load i32, i32* %ch, align 4, !tbaa !21
  %cmp68 = icmp slt i32 %56, 255
  br i1 %cmp68, label %for.body.70, label %for.end.87

for.body.70:                                      ; preds = %for.cond.67
  %57 = bitcast %struct.pdf_encoding_element_s** %pet71 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %57) #1
  %58 = load i32, i32* %ch, align 4, !tbaa !21
  %idxprom72 = sext i32 %58 to i64
  %59 = load %struct.pdf_font_resource_s*, %struct.pdf_font_resource_s** %pdfont.addr, align 8, !tbaa !1
  %u73 = getelementptr inbounds %struct.pdf_font_resource_s, %struct.pdf_font_resource_s* %59, i32 0, i32 20
  %simple74 = bitcast %union.anon.1* %u73 to %struct.anon.4*
  %Encoding75 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %simple74, i32 0, i32 4
  %60 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %Encoding75, align 8, !tbaa !153
  %arrayidx76 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %60, i64 %idxprom72
  store %struct.pdf_encoding_element_s* %arrayidx76, %struct.pdf_encoding_element_s** %pet71, align 8, !tbaa !1
  %61 = load %struct.pdf_encoding_element_s*, %struct.pdf_encoding_element_s** %pet71, align 8, !tbaa !1
  %glyph77 = getelementptr inbounds %struct.pdf_encoding_element_s, %struct.pdf_encoding_element_s* %61, i32 0, i32 0
  %62 = load i64, i64* %glyph77, align 8, !tbaa !156
  %cmp78 = icmp eq i64 %62, 2147483647
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %for.body.70
  store i32 11, i32* %cleanup.dest.slot
  br label %cleanup.82

if.end.81:                                        ; preds = %for.body.70
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.82

cleanup.82:                                       ; preds = %if.end.81, %if.then.80
  %63 = bitcast %struct.pdf_encoding_element_s** %pet71 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #1
  %cleanup.dest.83 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.83, label %unreachable [
    i32 0, label %cleanup.cont.84
    i32 11, label %for.end.87
  ]

cleanup.cont.84:                                  ; preds = %cleanup.82
  br label %for.inc.85

for.inc.85:                                       ; preds = %cleanup.cont.84
  %64 = load i32, i32* %ch, align 4, !tbaa !21
  %inc86 = add nsw i32 %64, 1
  store i32 %inc86, i32* %ch, align 4, !tbaa !21
  br label %for.cond.67

for.end.87:                                       ; preds = %cleanup.82, %for.cond.67
  %65 = load i32, i32* %ch, align 4, !tbaa !21
  %66 = load i32*, i32** %last_reserved_char.addr, align 8, !tbaa !1
  store i32 %65, i32* %66, align 4, !tbaa !21
  br label %if.end.88

if.end.88:                                        ; preds = %for.end.87, %if.end.62
  %67 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %68 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars89 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %68, i32 0, i32 0
  %69 = load i32, i32* %num_all_chars89, align 4, !tbaa !169
  %idxprom90 = sext i32 %69 to i64
  %70 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s91 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %70, i32 0, i32 3
  %arrayidx92 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s91, i32 0, i64 %idxprom90
  %glyph93 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx92, i32 0, i32 1
  store i64 %67, i64* %glyph93, align 8, !tbaa !155
  %71 = load i32, i32* %ch, align 4, !tbaa !21
  %conv94 = sext i32 %71 to i64
  %72 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars95 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %72, i32 0, i32 0
  %73 = load i32, i32* %num_all_chars95, align 4, !tbaa !169
  %idxprom96 = sext i32 %73 to i64
  %74 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s97 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %74, i32 0, i32 3
  %arrayidx98 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s97, i32 0, i64 %idxprom96
  %chr99 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx98, i32 0, i32 0
  store i64 %conv94, i64* %chr99, align 8, !tbaa !151
  %75 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars100 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %75, i32 0, i32 0
  %76 = load i32, i32* %num_all_chars100, align 4, !tbaa !169
  %inc101 = add nsw i32 %76, 1
  store i32 %inc101, i32* %num_all_chars100, align 4, !tbaa !169
  %77 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %78 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %78, i32 0, i32 2
  %79 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %80 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %80, i32 0, i32 1
  %81 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %add102 = add nsw i32 %79, %81
  %idxprom103 = sext i32 %add102 to i64
  %82 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s104 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %82, i32 0, i32 3
  %arrayidx105 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s104, i32 0, i64 %idxprom103
  %glyph106 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx105, i32 0, i32 1
  store i64 %77, i64* %glyph106, align 8, !tbaa !155
  %83 = load i32, i32* %ch, align 4, !tbaa !21
  %conv107 = sext i32 %83 to i64
  %84 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset108 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %84, i32 0, i32 2
  %85 = load i32, i32* %unused_offset108, align 4, !tbaa !158
  %86 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars109 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %86, i32 0, i32 1
  %87 = load i32, i32* %num_unused_chars109, align 4, !tbaa !160
  %add110 = add nsw i32 %85, %87
  %idxprom111 = sext i32 %add110 to i64
  %88 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s112 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %88, i32 0, i32 3
  %arrayidx113 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s112, i32 0, i64 %idxprom111
  %chr114 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx113, i32 0, i32 0
  store i64 %conv107, i64* %chr114, align 8, !tbaa !151
  %89 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars115 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %89, i32 0, i32 1
  %90 = load i32, i32* %num_unused_chars115, align 4, !tbaa !160
  %inc116 = add nsw i32 %90, 1
  store i32 %inc116, i32* %num_unused_chars115, align 4, !tbaa !160
  %91 = load i32, i32* %ch, align 4, !tbaa !21
  %conv117 = sext i32 %91 to i64
  store i64 %conv117, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.118

cleanup.118:                                      ; preds = %if.end.88, %cleanup, %if.then.5
  %92 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end(i64 4, i8* %92) #1
  %93 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #1
  %94 = load i64, i64* %retval
  ret i64 %94

unreachable:                                      ; preds = %cleanup.82, %cleanup.56
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i64 @pdf_new_char_code_in_pdfont(%struct.pdf_char_glyph_pairs_s* %cgp, i64 %glyph, i32* %last_reserved_char) #0 {
entry:
  %retval = alloca i64, align 8
  %cgp.addr = alloca %struct.pdf_char_glyph_pairs_s*, align 8
  %glyph.addr = alloca i64, align 8
  %last_reserved_char.addr = alloca i32*, align 8
  %j = alloca i32, align 4
  %ch = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf_char_glyph_pairs_s* %cgp, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  store i64 %glyph, i64* %glyph.addr, align 8, !tbaa !25
  store i32* %last_reserved_char, i32** %last_reserved_char.addr, align 8, !tbaa !1
  %0 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %1 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 0, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4, !tbaa !21
  %3 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %3, i32 0, i32 0
  %4 = load i32, i32* %num_all_chars, align 4, !tbaa !169
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %6, i32 0, i32 3
  %arrayidx = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s, i32 0, i64 %idxprom
  %glyph1 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx, i32 0, i32 1
  %7 = load i64, i64* %glyph1, align 8, !tbaa !155
  %8 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %cmp2 = icmp eq i64 %7, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %j, align 4, !tbaa !21
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4, !tbaa !21
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %10 = load i32, i32* %j, align 4, !tbaa !21
  %11 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars3 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %11, i32 0, i32 0
  %12 = load i32, i32* %num_all_chars3, align 4, !tbaa !169
  %cmp4 = icmp slt i32 %10, %12
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %for.end
  %13 = load i32, i32* %j, align 4, !tbaa !21
  %idxprom6 = sext i32 %13 to i64
  %14 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s7 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %14, i32 0, i32 3
  %arrayidx8 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s7, i32 0, i64 %idxprom6
  %chr = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx8, i32 0, i32 0
  %15 = load i64, i64* %chr, align 8, !tbaa !151
  store i64 %15, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.9:                                         ; preds = %for.end
  %16 = load i32*, i32** %last_reserved_char.addr, align 8, !tbaa !1
  %17 = load i32, i32* %16, align 4, !tbaa !21
  %inc10 = add nsw i32 %17, 1
  store i32 %inc10, i32* %16, align 4, !tbaa !21
  store i32 %inc10, i32* %ch, align 4, !tbaa !21
  %18 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %19 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars11 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %19, i32 0, i32 0
  %20 = load i32, i32* %num_all_chars11, align 4, !tbaa !169
  %idxprom12 = sext i32 %20 to i64
  %21 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s13 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %21, i32 0, i32 3
  %arrayidx14 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s13, i32 0, i64 %idxprom12
  %glyph15 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx14, i32 0, i32 1
  store i64 %18, i64* %glyph15, align 8, !tbaa !155
  %22 = load i32, i32* %ch, align 4, !tbaa !21
  %conv = sext i32 %22 to i64
  %23 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars16 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %23, i32 0, i32 0
  %24 = load i32, i32* %num_all_chars16, align 4, !tbaa !169
  %idxprom17 = sext i32 %24 to i64
  %25 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s18 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %25, i32 0, i32 3
  %arrayidx19 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s18, i32 0, i64 %idxprom17
  %chr20 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx19, i32 0, i32 0
  store i64 %conv, i64* %chr20, align 8, !tbaa !151
  %26 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_all_chars21 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %26, i32 0, i32 0
  %27 = load i32, i32* %num_all_chars21, align 4, !tbaa !169
  %inc22 = add nsw i32 %27, 1
  store i32 %inc22, i32* %num_all_chars21, align 4, !tbaa !169
  %28 = load i64, i64* %glyph.addr, align 8, !tbaa !25
  %29 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %29, i32 0, i32 2
  %30 = load i32, i32* %unused_offset, align 4, !tbaa !158
  %31 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %31, i32 0, i32 1
  %32 = load i32, i32* %num_unused_chars, align 4, !tbaa !160
  %add = add nsw i32 %30, %32
  %idxprom23 = sext i32 %add to i64
  %33 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s24 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %33, i32 0, i32 3
  %arrayidx25 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s24, i32 0, i64 %idxprom23
  %glyph26 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx25, i32 0, i32 1
  store i64 %28, i64* %glyph26, align 8, !tbaa !155
  %34 = load i32, i32* %ch, align 4, !tbaa !21
  %conv27 = sext i32 %34 to i64
  %35 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %unused_offset28 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %35, i32 0, i32 2
  %36 = load i32, i32* %unused_offset28, align 4, !tbaa !158
  %37 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars29 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %37, i32 0, i32 1
  %38 = load i32, i32* %num_unused_chars29, align 4, !tbaa !160
  %add30 = add nsw i32 %36, %38
  %idxprom31 = sext i32 %add30 to i64
  %39 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %s32 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %39, i32 0, i32 3
  %arrayidx33 = getelementptr inbounds [1 x %struct.pdf_char_glyph_pair_s], [1 x %struct.pdf_char_glyph_pair_s]* %s32, i32 0, i64 %idxprom31
  %chr34 = getelementptr inbounds %struct.pdf_char_glyph_pair_s, %struct.pdf_char_glyph_pair_s* %arrayidx33, i32 0, i32 0
  store i64 %conv27, i64* %chr34, align 8, !tbaa !151
  %40 = load %struct.pdf_char_glyph_pairs_s*, %struct.pdf_char_glyph_pairs_s** %cgp.addr, align 8, !tbaa !1
  %num_unused_chars35 = getelementptr inbounds %struct.pdf_char_glyph_pairs_s, %struct.pdf_char_glyph_pairs_s* %40, i32 0, i32 1
  %41 = load i32, i32* %num_unused_chars35, align 4, !tbaa !160
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %num_unused_chars35, align 4, !tbaa !160
  %42 = load i32, i32* %ch, align 4, !tbaa !21
  %conv37 = sext i32 %42 to i64
  store i64 %conv37, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.9, %if.then.5
  %43 = bitcast i32* %ch to i8*
  call void @llvm.lifetime.end(i64 4, i8* %43) #1
  %44 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %44) #1
  %45 = load i64, i64* %retval
  ret i64 %45
}

declare i64 @gs_c_decode(i64, i32) #2

declare i32 @gs_distance_transform_inverse(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2

declare %struct.gs_font_s* @gs_cid0_indexed_font(%struct.gs_font_s*, i32) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin }
attributes #8 = { nobuiltin nounwind readnone }
attributes #9 = { nobuiltin nounwind }
attributes #10 = { nobuiltin nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !2, i64 552}
!6 = !{!"pdf_text_enum_s", !7, i64 0, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !11, i64 160, !2, i64 184, !2, i64 192, !12, i64 200, !8, i64 208, !13, i64 212, !2, i64 224, !8, i64 232, !8, i64 236, !14, i64 240, !8, i64 344, !8, i64 348, !8, i64 352, !9, i64 360, !12, i64 376, !8, i64 384, !13, i64 388, !9, i64 400, !15, i64 416, !2, i64 448, !16, i64 456, !8, i64 464, !8, i64 468, !3, i64 472, !2, i64 552, !12, i64 560}
!7 = !{!"gs_text_params_s", !8, i64 0, !3, i64 8, !8, i64 16, !9, i64 24, !9, i64 40, !3, i64 56, !2, i64 64, !2, i64 72, !8, i64 80}
!8 = !{!"int", !3, i64 0}
!9 = !{!"gs_point_s", !10, i64 0, !10, i64 8}
!10 = !{!"double", !3, i64 0}
!11 = !{!"rc_header_s", !12, i64 0, !2, i64 8, !2, i64 16}
!12 = !{!"long", !3, i64 0}
!13 = !{!"gs_log2_scale_point_s", !8, i64 0, !8, i64 4}
!14 = !{!"gx_font_stack_s", !8, i64 0, !3, i64 8}
!15 = !{!"gs_text_returned_s", !12, i64 0, !12, i64 8, !9, i64 16}
!16 = !{!"gs_fixed_point_s", !8, i64 0, !8, i64 4}
!17 = !{!6, !2, i64 144}
!18 = !{!19, !2, i64 24}
!19 = !{!"gs_memory_s", !2, i64 0, !20, i64 8, !2, i64 192, !2, i64 200, !2, i64 208}
!20 = !{!"gs_memory_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176}
!21 = !{!8, !8, i64 0}
!22 = !{!9, !10, i64 0}
!23 = !{!9, !10, i64 8}
!24 = !{!7, !8, i64 16}
!25 = !{!12, !12, i64 0}
!26 = !{!27, !8, i64 30688}
!27 = !{!"gx_device_pdf_s", !8, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !8, i64 40, !2, i64 48, !11, i64 56, !8, i64 80, !8, i64 84, !8, i64 88, !28, i64 96, !31, i64 816, !8, i64 832, !8, i64 836, !8, i64 840, !8, i64 844, !8, i64 848, !8, i64 852, !3, i64 856, !3, i64 864, !8, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !12, i64 928, !12, i64 936, !8, i64 944, !8, i64 948, !8, i64 952, !8, i64 956, !8, i64 960, !12, i64 968, !12, i64 976, !32, i64 984, !8, i64 1052, !8, i64 1056, !33, i64 1064, !2, i64 1104, !3, i64 1112, !35, i64 1120, !36, i64 1144, !2, i64 1728, !2, i64 1736, !3, i64 1744, !2, i64 5840, !2, i64 5848, !2, i64 5856, !8, i64 5864, !8, i64 5868, !37, i64 5872, !2, i64 7488, !8, i64 7496, !8, i64 7500, !8, i64 7504, !47, i64 7512, !47, i64 8144, !12, i64 8776, !12, i64 8784, !3, i64 8792, !3, i64 8796, !9, i64 8800, !8, i64 8816, !2, i64 8824, !12, i64 8832, !12, i64 8840, !3, i64 8848, !8, i64 8852, !8, i64 8856, !8, i64 8860, !8, i64 8864, !10, i64 8872, !52, i64 8880, !8, i64 9360, !10, i64 9368, !8, i64 9376, !8, i64 9380, !8, i64 9384, !8, i64 9388, !8, i64 9392, !8, i64 9396, !8, i64 9400, !8, i64 9404, !8, i64 9408, !8, i64 9412, !8, i64 9416, !8, i64 9420, !57, i64 9424, !57, i64 9440, !8, i64 9456, !8, i64 9460, !8, i64 9464, !12, i64 9472, !8, i64 9480, !8, i64 9484, !56, i64 9488, !56, i64 9504, !8, i64 9520, !8, i64 9524, !8, i64 9528, !8, i64 9532, !8, i64 9536, !8, i64 9540, !8, i64 9544, !8, i64 9548, !8, i64 9552, !8, i64 9556, !8, i64 9560, !8, i64 9564, !8, i64 9568, !12, i64 9576, !12, i64 9584, !12, i64 9592, !58, i64 9600, !56, i64 9616, !56, i64 9632, !8, i64 9648, !8, i64 9652, !8, i64 9656, !56, i64 9664, !8, i64 9680, !8, i64 9684, !3, i64 9688, !3, i64 9720, !3, i64 9752, !8, i64 9768, !8, i64 9772, !8, i64 9776, !59, i64 9784, !60, i64 9816, !60, i64 9856, !8, i64 9896, !8, i64 9900, !8, i64 9904, !8, i64 9908, !8, i64 9912, !12, i64 9920, !3, i64 9928, !8, i64 9960, !12, i64 9968, !12, i64 9976, !3, i64 9984, !3, i64 9988, !61, i64 9992, !61, i64 14120, !61, i64 18248, !61, i64 22376, !12, i64 26504, !2, i64 26512, !2, i64 26520, !2, i64 26528, !12, i64 26536, !8, i64 26544, !8, i64 26548, !12, i64 26552, !3, i64 26560, !12, i64 26568, !12, i64 26576, !3, i64 26584, !2, i64 26592, !62, i64 26600, !2, i64 26648, !8, i64 26656, !12, i64 26664, !3, i64 26672, !3, i64 28592, !3, i64 28632, !2, i64 28648, !2, i64 28656, !12, i64 28664, !2, i64 28672, !8, i64 28680, !8, i64 28684, !8, i64 28688, !8, i64 28692, !2, i64 28696, !2, i64 28704, !2, i64 28712, !3, i64 28720, !3, i64 28736, !2, i64 28752, !2, i64 28760, !2, i64 28768, !2, i64 28776, !2, i64 28784, !9, i64 28792, !2, i64 28808, !2, i64 28816, !8, i64 28824, !2, i64 28832, !2, i64 28840, !2, i64 28848, !8, i64 28856, !8, i64 28860, !8, i64 28864, !63, i64 28872, !8, i64 30384, !8, i64 30388, !8, i64 30392, !2, i64 30400, !8, i64 30408, !8, i64 30412, !8, i64 30416, !40, i64 30420, !2, i64 30448, !3, i64 30456, !8, i64 30460, !8, i64 30464, !2, i64 30472, !2, i64 30480, !42, i64 30488, !8, i64 30524, !59, i64 30528, !8, i64 30560, !8, i64 30564, !8, i64 30568, !2, i64 30576, !8, i64 30584, !8, i64 30588, !12, i64 30592, !8, i64 30600, !8, i64 30604, !8, i64 30608, !40, i64 30612, !10, i64 30640, !2, i64 30648, !53, i64 30656, !8, i64 30672, !2, i64 30680, !8, i64 30688, !8, i64 30692, !8, i64 30696, !8, i64 30700, !8, i64 30704, !8, i64 30708, !8, i64 30712, !8, i64 30716, !8, i64 30720, !8, i64 30724, !8, i64 30728, !8, i64 30732, !8, i64 30736, !8, i64 30740, !8, i64 30744, !8, i64 30748, !8, i64 30752, !8, i64 30756, !8, i64 30760, !8, i64 30764, !8, i64 30768, !8, i64 30772, !2, i64 30776, !8, i64 30784, !8, i64 30788}
!28 = !{!"gx_device_color_info_s", !8, i64 0, !8, i64 4, !3, i64 8, !29, i64 12, !3, i64 14, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !30, i64 32, !3, i64 40, !3, i64 44, !3, i64 108, !3, i64 176, !2, i64 688, !3, i64 696, !12, i64 704, !8, i64 712}
!29 = !{!"short", !3, i64 0}
!30 = !{!"gx_device_anti_alias_info_s", !8, i64 0, !8, i64 4}
!31 = !{!"gx_device_cached_colors_s", !12, i64 0, !12, i64 8}
!32 = !{!"gx_stroked_gradient_recognizer_s", !8, i64 0, !3, i64 4, !3, i64 36}
!33 = !{!"gdev_space_params_s", !12, i64 0, !12, i64 8, !34, i64 16, !8, i64 32, !3, i64 36}
!34 = !{!"gx_band_params_s", !8, i64 0, !8, i64 4, !12, i64 8}
!35 = !{!"gx_page_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16}
!36 = !{!"gx_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560, !2, i64 568, !2, i64 576}
!37 = !{!"gs_imager_state_s", !8, i64 0, !2, i64 8, !2, i64 16, !38, i64 24, !8, i64 128, !42, i64 132, !8, i64 168, !9, i64 176, !9, i64 192, !8, i64 208, !8, i64 212, !29, i64 216, !3, i64 220, !43, i64 224, !43, i64 228, !44, i64 232, !12, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !2, i64 264, !8, i64 272, !8, i64 276, !8, i64 280, !8, i64 284, !8, i64 288, !8, i64 292, !39, i64 296, !16, i64 300, !8, i64 308, !8, i64 312, !8, i64 316, !39, i64 320, !8, i64 324, !8, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !8, i64 408, !2, i64 416, !2, i64 424, !45, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !46, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !46, i64 1336}
!38 = !{!"gx_line_params_s", !39, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !8, i64 20, !39, i64 24, !39, i64 28, !39, i64 32, !8, i64 36, !40, i64 40, !41, i64 64}
!39 = !{!"float", !3, i64 0}
!40 = !{!"gs_matrix_s", !39, i64 0, !39, i64 4, !39, i64 8, !39, i64 12, !39, i64 16, !39, i64 20}
!41 = !{!"gx_dash_params_s", !2, i64 0, !8, i64 8, !39, i64 12, !8, i64 16, !39, i64 20, !8, i64 24, !8, i64 28, !39, i64 32}
!42 = !{!"gs_matrix_fixed_s", !39, i64 0, !39, i64 4, !39, i64 8, !39, i64 12, !39, i64 16, !39, i64 20, !8, i64 24, !8, i64 28, !8, i64 32}
!43 = !{!"gs_transparency_source_s", !39, i64 0}
!44 = !{!"gs_xstate_trans_flags", !8, i64 0, !8, i64 4}
!45 = !{!"gx_transfer_s", !8, i64 0, !2, i64 8, !8, i64 16, !2, i64 24, !8, i64 32, !2, i64 40, !8, i64 48, !2, i64 56}
!46 = !{!"gs_devicen_color_map_s", !8, i64 0, !3, i64 4, !8, i64 8, !8, i64 12, !12, i64 16, !3, i64 24}
!47 = !{!"gx_hl_saved_color_s", !12, i64 0, !12, i64 8, !8, i64 16, !48, i64 24, !50, i64 288}
!48 = !{!"gs_client_color_s", !2, i64 0, !49, i64 8}
!49 = !{!"gs_paint_color_s", !3, i64 0}
!50 = !{!"gx_device_color_saved_s", !2, i64 0, !3, i64 8, !51, i64 336}
!51 = !{!"gs_int_point_s", !8, i64 0, !8, i64 4}
!52 = !{!"psdf_distiller_params_s", !8, i64 0, !3, i64 4, !3, i64 8, !8, i64 12, !3, i64 16, !8, i64 20, !8, i64 24, !12, i64 32, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !8, i64 56, !53, i64 64, !53, i64 80, !53, i64 96, !53, i64 112, !3, i64 128, !8, i64 132, !8, i64 136, !3, i64 140, !3, i64 144, !54, i64 152, !8, i64 232, !8, i64 236, !54, i64 240, !54, i64 320, !55, i64 400, !55, i64 416, !3, i64 432, !8, i64 436, !8, i64 440, !8, i64 444, !56, i64 448, !55, i64 464}
!53 = !{!"gs_const_string_s", !2, i64 0, !8, i64 8}
!54 = !{!"psdf_image_params_s", !2, i64 0, !8, i64 8, !8, i64 12, !8, i64 16, !2, i64 24, !8, i64 32, !39, i64 36, !3, i64 40, !8, i64 44, !2, i64 48, !8, i64 56, !2, i64 64, !2, i64 72}
!55 = !{!"gs_param_string_array_s", !2, i64 0, !8, i64 8, !8, i64 12}
!56 = !{!"gs_param_string_s", !2, i64 0, !8, i64 8, !8, i64 12}
!57 = !{!"gs_param_float_array_s", !2, i64 0, !8, i64 8, !8, i64 12}
!58 = !{!"gs_param_int_array_s", !2, i64 0, !8, i64 8, !8, i64 12}
!59 = !{!"gs_rect_s", !9, i64 0, !9, i64 16}
!60 = !{!"pdf_page_dsc_info_s", !8, i64 0, !8, i64 4, !59, i64 8}
!61 = !{!"pdf_temp_file_s", !3, i64 0, !2, i64 4096, !2, i64 4104, !2, i64 4112, !2, i64 4120}
!62 = !{!"pdf_text_rotation_s", !3, i64 0, !8, i64 40}
!63 = !{!"pdf_viewer_state_s", !8, i64 0, !3, i64 8, !39, i64 40, !39, i64 44, !3, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !8, i64 80, !39, i64 84, !39, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !8, i64 104, !8, i64 108, !8, i64 112, !47, i64 120, !47, i64 752, !38, i64 1384, !2, i64 1488, !8, i64 1496, !12, i64 1504}
!64 = !{!7, !8, i64 0}
!65 = !{!66, !2, i64 56}
!66 = !{!"gx_path_s", !67, i64 0, !2, i64 40, !3, i64 48, !2, i64 56, !2, i64 64, !69, i64 72, !2, i64 88, !3, i64 96, !3, i64 97, !3, i64 98, !3, i64 99, !3, i64 100, !8, i64 104, !8, i64 108, !16, i64 112, !2, i64 120}
!67 = !{!"gx_path_segments_s", !11, i64 0, !68, i64 24}
!68 = !{!"psc_", !2, i64 0, !2, i64 8}
!69 = !{!"gs_fixed_rect_s", !16, i64 0, !16, i64 8}
!70 = !{!67, !2, i64 24}
!71 = !{!27, !2, i64 26592}
!72 = !{!73, !2, i64 16}
!73 = !{!"pdf_text_data_s", !2, i64 0, !2, i64 8, !2, i64 16}
!74 = !{!75, !3, i64 128}
!75 = !{!"gs_font_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !8, i64 32, !76, i64 40, !12, i64 56, !2, i64 64, !2, i64 72, !40, i64 80, !40, i64 104, !3, i64 128, !8, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !8, i64 148, !8, i64 152, !39, i64 156, !8, i64 160, !77, i64 168, !78, i64 272, !78, i64 324}
!76 = !{!"gs_notify_list_s", !2, i64 0, !2, i64 8}
!77 = !{!"gs_font_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96}
!78 = !{!"gs_font_name_s", !3, i64 0, !8, i64 48}
!79 = !{!80, !3, i64 376}
!80 = !{!"gs_font_type0_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !8, i64 32, !76, i64 40, !12, i64 56, !2, i64 64, !2, i64 72, !40, i64 80, !40, i64 104, !3, i64 128, !8, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !8, i64 148, !8, i64 152, !39, i64 156, !8, i64 160, !77, i64 168, !78, i64 272, !78, i64 324, !81, i64 376}
!81 = !{!"gs_type0_data_s", !3, i64 0, !3, i64 4, !3, i64 5, !3, i64 6, !53, i64 8, !8, i64 24, !8, i64 28, !2, i64 32, !8, i64 40, !2, i64 48, !8, i64 56, !2, i64 64}
!82 = !{!19, !2, i64 72}
!83 = !{!6, !12, i64 160}
!84 = !{!6, !2, i64 168}
!85 = !{!6, !2, i64 176}
!86 = !{!6, !2, i64 448}
!87 = !{!6, !8, i64 464}
!88 = !{!27, !8, i64 30524}
!89 = !{!6, !8, i64 468}
!90 = !{!6, !10, i64 440}
!91 = !{!6, !10, i64 432}
!92 = !{!6, !12, i64 560}
!93 = !{!6, !2, i64 112}
!94 = !{!75, !2, i64 256}
!95 = !{!6, !8, i64 240}
!96 = !{!97, !2, i64 0}
!97 = !{!"gx_font_stack_item_s", !2, i64 0, !8, i64 8}
!98 = !{!37, !8, i64 252}
!99 = !{!66, !3, i64 97}
!100 = !{!27, !8, i64 30692}
!101 = !{!27, !8, i64 9524}
!102 = !{!27, !2, i64 30472}
!103 = !{!6, !8, i64 384}
!104 = !{!75, !8, i64 152}
!105 = !{!106, !2, i64 16}
!106 = !{!"", !2, i64 0, !2, i64 8, !2, i64 16}
!107 = !{!108, !2, i64 0}
!108 = !{!"gx_device_color_s", !2, i64 0, !3, i64 8, !51, i64 352, !8, i64 360, !48, i64 368, !109, i64 632}
!109 = !{!"_mask", !110, i64 0, !12, i64 8, !2, i64 16}
!110 = !{!"mp_", !8, i64 0, !8, i64 4}
!111 = !{!27, !8, i64 9908}
!112 = !{!27, !8, i64 9904}
!113 = !{!114, !12, i64 8}
!114 = !{!"pdf_font_cache_elem_s", !2, i64 0, !12, i64 8, !8, i64 16, !8, i64 20, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48}
!115 = !{!75, !12, i64 56}
!116 = !{!27, !2, i64 28784}
!117 = !{!114, !2, i64 0}
!118 = !{!114, !2, i64 48}
!119 = !{!27, !2, i64 1728}
!120 = !{!114, !2, i64 32}
!121 = !{!114, !2, i64 40}
!122 = !{!114, !2, i64 24}
!123 = !{!114, !8, i64 16}
!124 = !{!114, !8, i64 20}
!125 = !{!19, !2, i64 64}
!126 = !{!127, !3, i64 72}
!127 = !{!"pdf_font_resource_s", !2, i64 0, !2, i64 8, !12, i64 16, !8, i64 24, !8, i64 28, !3, i64 32, !12, i64 56, !2, i64 64, !3, i64 72, !2, i64 80, !128, i64 88, !2, i64 104, !2, i64 112, !8, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !3, i64 176}
!128 = !{!"gs_string_s", !2, i64 0, !8, i64 8}
!129 = !{!130, !8, i64 492}
!130 = !{!"gs_font_cid0_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !8, i64 32, !76, i64 40, !12, i64 56, !2, i64 64, !2, i64 72, !40, i64 80, !40, i64 104, !3, i64 128, !8, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !8, i64 148, !8, i64 152, !39, i64 156, !8, i64 160, !77, i64 168, !78, i64 272, !78, i64 324, !59, i64 376, !131, i64 408, !2, i64 424, !2, i64 432, !3, i64 440, !3, i64 444, !132, i64 448}
!131 = !{!"gs_uid_s", !12, i64 0, !2, i64 8}
!132 = !{!"gs_font_cid0_data_s", !133, i64 0, !12, i64 56, !2, i64 64, !8, i64 72, !8, i64 76, !2, i64 80, !2, i64 88}
!133 = !{!"gs_font_cid_data_s", !134, i64 0, !8, i64 40, !8, i64 44, !8, i64 48}
!134 = !{!"gs_cid_system_info_s", !53, i64 0, !53, i64 16, !8, i64 32}
!135 = !{!136, !8, i64 696}
!136 = !{!"gs_font_cid2_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !8, i64 32, !76, i64 40, !12, i64 56, !2, i64 64, !2, i64 72, !40, i64 80, !40, i64 104, !3, i64 128, !8, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !8, i64 148, !8, i64 152, !39, i64 156, !8, i64 160, !77, i64 168, !78, i64 272, !78, i64 324, !59, i64 376, !131, i64 408, !2, i64 424, !2, i64 432, !3, i64 440, !3, i64 444, !137, i64 448, !138, i64 656, !2, i64 744}
!137 = !{!"gs_type42_data_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !12, i64 48, !12, i64 56, !8, i64 64, !8, i64 68, !3, i64 72, !12, i64 120, !12, i64 128, !12, i64 136, !8, i64 144, !8, i64 148, !8, i64 152, !8, i64 156, !8, i64 160, !8, i64 164, !2, i64 168, !2, i64 176, !8, i64 184, !8, i64 188, !2, i64 192, !12, i64 200}
!138 = !{!"gs_font_cid2_data_s", !133, i64 0, !8, i64 56, !2, i64 64, !139, i64 72}
!139 = !{!"o_", !2, i64 0, !2, i64 8}
!140 = !{!75, !2, i64 64}
!141 = !{i64 0, i64 4, !142, i64 4, i64 4, !142, i64 8, i64 4, !142, i64 12, i64 4, !142, i64 16, i64 4, !142, i64 20, i64 4, !142}
!142 = !{!39, !39, i64 0}
!143 = !{!75, !39, i64 104}
!144 = !{!75, !39, i64 108}
!145 = !{!75, !39, i64 112}
!146 = !{!75, !39, i64 116}
!147 = !{!75, !39, i64 80}
!148 = !{!75, !39, i64 84}
!149 = !{!75, !39, i64 88}
!150 = !{!75, !39, i64 92}
!151 = !{!152, !12, i64 0}
!152 = !{!"pdf_char_glyph_pair_s", !12, i64 0, !12, i64 8}
!153 = !{!154, !2, i64 16}
!154 = !{!"", !8, i64 0, !8, i64 4, !3, i64 8, !3, i64 12, !2, i64 16, !2, i64 24, !8, i64 32, !3, i64 40}
!155 = !{!152, !12, i64 8}
!156 = !{!157, !12, i64 0}
!157 = !{!"pdf_encoding_element_s", !12, i64 0, !53, i64 8, !8, i64 24}
!158 = !{!159, !8, i64 8}
!159 = !{!"pdf_char_glyph_pairs_s", !8, i64 0, !8, i64 4, !8, i64 8, !3, i64 16}
!160 = !{!159, !8, i64 4}
!161 = !{!3, !3, i64 0}
!162 = !{!80, !2, i64 424}
!163 = !{!164, !2, i64 0}
!164 = !{!"", !2, i64 0, !3, i64 8, !53, i64 40, !8, i64 56, !8, i64 60, !8, i64 64}
!165 = !{!80, !2, i64 440}
!166 = !{!167, !8, i64 72}
!167 = !{!"gs_cmap_s", !8, i64 0, !12, i64 8, !53, i64 16, !2, i64 32, !8, i64 40, !39, i64 44, !131, i64 48, !12, i64 64, !8, i64 72, !8, i64 76, !8, i64 80, !2, i64 88, !2, i64 96, !2, i64 104}
!168 = !{!164, !8, i64 64}
!169 = !{!159, !8, i64 0}
!170 = !{!171, !2, i64 0}
!171 = !{!"pdf_resource_s", !2, i64 0, !2, i64 8, !12, i64 16, !8, i64 24, !8, i64 28, !3, i64 32, !12, i64 56, !2, i64 64}
!172 = !{!73, !2, i64 0}
!173 = !{!174, !2, i64 0}
!174 = !{!"pdf_outline_fonts_s", !2, i64 0}
!175 = !{!27, !3, i64 8848}
!176 = !{!27, !8, i64 8864}
!177 = !{!27, !8, i64 8856}
!178 = !{!27, !10, i64 9368}
!179 = !{!180, !2, i64 0}
!180 = !{!"pdf_standard_font_s", !2, i64 0, !40, i64 8}
!181 = !{!182, !3, i64 444}
!182 = !{!"gs_font_base_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !8, i64 32, !76, i64 40, !12, i64 56, !2, i64 64, !2, i64 72, !40, i64 80, !40, i64 104, !3, i64 128, !8, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !8, i64 148, !8, i64 152, !39, i64 156, !8, i64 160, !77, i64 168, !78, i64 272, !78, i64 324, !59, i64 376, !131, i64 408, !2, i64 424, !2, i64 432, !3, i64 440, !3, i64 444}
!183 = !{!154, !3, i64 8}
!184 = !{!75, !2, i64 200}
!185 = !{!75, !2, i64 24}
!186 = !{!187, !2, i64 128}
!187 = !{!"gs_font_dir_s", !2, i64 0, !2, i64 8, !8, i64 16, !8, i64 20, !188, i64 24, !189, i64 56, !8, i64 144, !8, i64 148, !8, i64 152, !8, i64 156, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !8, i64 192, !2, i64 200, !2, i64 208, !12, i64 216}
!188 = !{!"fm_pair_cache_s", !8, i64 0, !8, i64 4, !2, i64 8, !8, i64 16, !8, i64 20, !8, i64 24}
!189 = !{!"char_cache_s", !2, i64 0, !8, i64 8, !8, i64 12, !8, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !8, i64 48, !8, i64 52, !8, i64 56, !8, i64 60, !8, i64 64, !8, i64 68, !2, i64 72, !2, i64 80}
!190 = !{!127, !2, i64 160}
!191 = !{!27, !8, i64 9564}
!192 = !{!75, !8, i64 148}
!193 = !{!194, !10, i64 0}
!194 = !{!"pdf_glyph_widths_s", !195, i64 0, !195, i64 40, !8, i64 80, !8, i64 84, !59, i64 88}
!195 = !{!"pdf_glyph_width_s", !10, i64 0, !9, i64 8, !9, i64 24}
!196 = !{!10, !10, i64 0}
!197 = !{!127, !2, i64 136}
!198 = !{!182, !12, i64 56}
!199 = !{!200, !8, i64 68}
!200 = !{!"", !59, i64 0, !40, i64 32, !2, i64 56, !8, i64 64, !8, i64 68, !2, i64 72, !2, i64 80}
!201 = !{!200, !2, i64 56}
!202 = !{!200, !2, i64 80}
!203 = !{!182, !10, i64 376}
!204 = !{!182, !10, i64 384}
!205 = !{!182, !10, i64 392}
!206 = !{!182, !10, i64 400}
!207 = !{!200, !10, i64 0}
!208 = !{!200, !10, i64 8}
!209 = !{!200, !10, i64 16}
!210 = !{!200, !10, i64 24}
!211 = !{!200, !2, i64 72}
!212 = !{!200, !39, i64 32}
!213 = !{!200, !39, i64 36}
!214 = !{!200, !39, i64 40}
!215 = !{!200, !39, i64 44}
!216 = !{!6, !2, i64 88}
!217 = !{!6, !2, i64 192}
!218 = !{!128, !8, i64 8}
!219 = !{!6, !8, i64 16}
!220 = !{i64 0, i64 4, !21, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !25, i64 8, i64 8, !25, i64 16, i64 4, !21, i64 24, i64 8, !196, i64 32, i64 8, !196, i64 40, i64 8, !196, i64 48, i64 8, !196, i64 56, i64 8, !25, i64 56, i64 8, !25, i64 64, i64 8, !1, i64 72, i64 8, !1, i64 80, i64 4, !21, i64 88, i64 8, !1, i64 96, i64 8, !1, i64 104, i64 8, !1, i64 112, i64 8, !1, i64 120, i64 8, !1, i64 128, i64 8, !1, i64 136, i64 8, !1, i64 144, i64 8, !1, i64 152, i64 8, !1, i64 160, i64 8, !25, i64 168, i64 8, !1, i64 176, i64 8, !1, i64 184, i64 8, !1, i64 192, i64 8, !1, i64 200, i64 8, !25, i64 208, i64 4, !21, i64 212, i64 4, !21, i64 216, i64 4, !21, i64 224, i64 8, !1, i64 232, i64 4, !21, i64 236, i64 4, !21, i64 240, i64 4, !21, i64 248, i64 96, !161, i64 344, i64 4, !21, i64 348, i64 4, !21, i64 352, i64 4, !21, i64 360, i64 8, !196, i64 368, i64 8, !196, i64 376, i64 8, !25, i64 384, i64 4, !21, i64 388, i64 4, !21, i64 392, i64 4, !21, i64 400, i64 8, !196, i64 408, i64 8, !196, i64 416, i64 8, !25, i64 424, i64 8, !25, i64 432, i64 8, !196, i64 440, i64 8, !196}
!221 = !{!128, !2, i64 0}
!222 = !{!223, !8, i64 16}
!223 = !{!"gs_text_enum_s", !7, i64 0, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !11, i64 160, !2, i64 184, !2, i64 192, !12, i64 200, !8, i64 208, !13, i64 212, !2, i64 224, !8, i64 232, !8, i64 236, !14, i64 240, !8, i64 344, !8, i64 348, !8, i64 352, !9, i64 360, !12, i64 376, !8, i64 384, !13, i64 388, !9, i64 400, !15, i64 416}
!224 = !{!223, !8, i64 232}
!225 = !{!223, !8, i64 0}
!226 = !{!75, !2, i64 192}
!227 = !{!223, !2, i64 192}
!228 = !{!154, !3, i64 12}
!229 = !{!75, !2, i64 240}
!230 = !{!53, !2, i64 0}
!231 = !{!53, !8, i64 8}
!232 = !{!154, !8, i64 32}
!233 = !{!234, !2, i64 56}
!234 = !{!"", !12, i64 0, !2, i64 8, !8, i64 16, !12, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56}
!235 = !{!164, !8, i64 56}
!236 = !{!127, !8, i64 96}
!237 = !{!127, !2, i64 88}
!238 = !{!154, !8, i64 0}
!239 = !{!154, !8, i64 4}
!240 = !{!40, !39, i64 20}
!241 = !{!40, !39, i64 16}
!242 = !{!40, !39, i64 8}
!243 = !{!40, !39, i64 12}
!244 = !{!40, !39, i64 0}
!245 = !{!40, !39, i64 4}
!246 = !{!6, !2, i64 120}
!247 = !{!6, !2, i64 104}
!248 = !{!6, !8, i64 0}
!249 = !{!16, !8, i64 0}
!250 = !{!16, !8, i64 4}
!251 = !{!252, !39, i64 0}
!252 = !{!"pdf_text_process_state_s", !253, i64 0, !2, i64 56}
!253 = !{!"pdf_text_state_values_s", !39, i64 0, !2, i64 8, !10, i64 16, !40, i64 24, !8, i64 48, !39, i64 52}
!254 = !{!252, !2, i64 8}
!255 = !{!252, !10, i64 16}
!256 = !{!252, !8, i64 48}
!257 = !{!252, !39, i64 52}
!258 = !{!252, !2, i64 56}
!259 = !{!75, !39, i64 156}
!260 = !{!37, !39, i64 24}
!261 = !{!223, !2, i64 104}
!262 = !{!27, !3, i64 26560}
!263 = !{!194, !10, i64 32}
!264 = !{!194, !10, i64 24}
!265 = !{!194, !10, i64 72}
!266 = !{!194, !10, i64 64}
!267 = !{!194, !10, i64 56}
!268 = !{!194, !10, i64 48}
!269 = !{!194, !10, i64 40}
!270 = !{!194, !8, i64 80}
!271 = !{!194, !8, i64 84}
!272 = !{!182, !2, i64 224}
!273 = !{!274, !8, i64 0}
!274 = !{!"gs_glyph_info_s", !8, i64 0, !3, i64 8, !9, i64 40, !59, i64 56, !8, i64 88, !2, i64 96}
!275 = !{!75, !2, i64 216}
!276 = !{!75, !2, i64 224}
!277 = !{!274, !10, i64 40}
!278 = !{!274, !10, i64 48}
!279 = !{i64 0, i64 8, !196, i64 8, i64 8, !196}
!280 = !{!194, !10, i64 16}
!281 = !{!194, !10, i64 8}
!282 = !{i64 0, i64 8, !196, i64 8, i64 8, !196, i64 16, i64 8, !196, i64 24, i64 8, !196, i64 32, i64 8, !196}
!283 = !{!130, !2, i64 528}
!284 = !{!182, !2, i64 184}
!285 = !{!286, !8, i64 60}
!286 = !{!"gs_font_info_s", !8, i64 0, !8, i64 4, !8, i64 8, !287, i64 12, !8, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !39, i64 48, !8, i64 52, !8, i64 56, !8, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !53, i64 88, !53, i64 104, !53, i64 120, !53, i64 136, !8, i64 152}
!287 = !{!"gs_int_rect_s", !51, i64 0, !51, i64 8}
!288 = !{!195, !10, i64 16}
!289 = !{!195, !10, i64 8}
!290 = !{!195, !10, i64 0}
!291 = !{i64 0, i64 4, !21, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !25, i64 8, i64 8, !25, i64 16, i64 4, !21, i64 24, i64 8, !196, i64 32, i64 8, !196, i64 40, i64 8, !196, i64 48, i64 8, !196, i64 56, i64 8, !25, i64 56, i64 8, !25, i64 64, i64 8, !1, i64 72, i64 8, !1, i64 80, i64 4, !21}
!292 = !{!223, !2, i64 88}
!293 = !{!223, !2, i64 120}
!294 = !{!223, !2, i64 128}
!295 = !{!223, !2, i64 136}
!296 = !{!223, !2, i64 144}
!297 = !{!27, !8, i64 30560}
!298 = !{!37, !39, i64 140}
!299 = !{!37, !39, i64 144}
!300 = !{!37, !39, i64 132}
!301 = !{!37, !39, i64 136}
!302 = !{i64 0, i64 4, !21, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !1, i64 8, i64 8, !25, i64 8, i64 8, !25, i64 16, i64 4, !21, i64 24, i64 8, !196, i64 32, i64 8, !196, i64 40, i64 8, !196, i64 48, i64 8, !196, i64 56, i64 8, !25, i64 56, i64 8, !25, i64 64, i64 8, !1, i64 72, i64 8, !1, i64 80, i64 4, !21, i64 88, i64 8, !1, i64 96, i64 8, !1, i64 104, i64 8, !1, i64 112, i64 8, !1, i64 120, i64 8, !1, i64 128, i64 8, !1, i64 136, i64 8, !1, i64 144, i64 8, !1, i64 152, i64 8, !1, i64 160, i64 8, !25, i64 168, i64 8, !1, i64 176, i64 8, !1, i64 184, i64 8, !1, i64 192, i64 8, !1, i64 200, i64 8, !25, i64 208, i64 4, !21, i64 212, i64 4, !21, i64 216, i64 4, !21, i64 224, i64 8, !1, i64 232, i64 4, !21, i64 236, i64 4, !21, i64 240, i64 4, !21, i64 248, i64 96, !161, i64 344, i64 4, !21, i64 348, i64 4, !21, i64 352, i64 4, !21, i64 360, i64 8, !196, i64 368, i64 8, !196, i64 376, i64 8, !25, i64 384, i64 4, !21, i64 388, i64 4, !21, i64 392, i64 4, !21, i64 400, i64 8, !196, i64 408, i64 8, !196, i64 416, i64 8, !25, i64 424, i64 8, !25, i64 432, i64 8, !196, i64 440, i64 8, !196, i64 448, i64 4, !21, i64 456, i64 8, !1, i64 464, i64 4, !21, i64 468, i64 4, !161, i64 472, i64 8, !1, i64 480, i64 4, !21, i64 484, i64 4, !21, i64 488, i64 4, !21, i64 492, i64 4, !21, i64 496, i64 4, !21, i64 500, i64 4, !21, i64 504, i64 4, !21, i64 508, i64 4, !21, i64 512, i64 4, !21, i64 516, i64 4, !21, i64 520, i64 4, !21, i64 528, i64 8, !1, i64 536, i64 8, !1, i64 544, i64 8, !1, i64 552, i64 8, !1, i64 560, i64 4, !21, i64 564, i64 4, !21, i64 568, i64 8, !196, i64 576, i64 8, !196, i64 584, i64 4, !21, i64 588, i64 4, !21, i64 592, i64 4, !21, i64 600, i64 8, !1, i64 608, i64 4, !161, i64 616, i64 8, !1}
!303 = !{!223, !2, i64 152}
!304 = !{i64 0, i64 8, !1, i64 8, i64 8, !1, i64 16, i64 8, !1, i64 24, i64 8, !1, i64 32, i64 8, !1, i64 40, i64 8, !1, i64 48, i64 8, !1}
!305 = !{!27, !2, i64 1152}
!306 = !{!307, !2, i64 32}
!307 = !{!"gs_text_enum_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48}
!308 = !{!223, !8, i64 240}
!309 = !{!310, !2, i64 104}
!310 = !{!"gs_show_enum_s", !7, i64 0, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !11, i64 160, !2, i64 184, !2, i64 192, !12, i64 200, !8, i64 208, !13, i64 212, !2, i64 224, !8, i64 232, !8, i64 236, !14, i64 240, !8, i64 344, !8, i64 348, !8, i64 352, !9, i64 360, !12, i64 376, !8, i64 384, !13, i64 388, !9, i64 400, !15, i64 416, !8, i64 448, !2, i64 456, !8, i64 464, !3, i64 468, !2, i64 472, !8, i64 480, !287, i64 484, !287, i64 500, !8, i64 516, !8, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !16, i64 560, !9, i64 568, !8, i64 584, !16, i64 588, !2, i64 600, !3, i64 608, !2, i64 616}
!311 = !{!310, !2, i64 456}
!312 = !{!313, !2, i64 1792}
!313 = !{!"gs_state_s", !8, i64 0, !2, i64 8, !2, i64 16, !38, i64 24, !8, i64 128, !42, i64 132, !8, i64 168, !9, i64 176, !9, i64 192, !8, i64 208, !8, i64 212, !29, i64 216, !3, i64 220, !43, i64 224, !43, i64 228, !44, i64 232, !12, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !2, i64 264, !8, i64 272, !8, i64 276, !8, i64 280, !8, i64 284, !8, i64 288, !8, i64 292, !39, i64 296, !16, i64 300, !8, i64 308, !8, i64 312, !8, i64 316, !39, i64 320, !8, i64 324, !8, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !8, i64 408, !2, i64 416, !2, i64 424, !45, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !46, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !46, i64 1336, !2, i64 1616, !40, i64 1624, !8, i64 1648, !40, i64 1652, !8, i64 1676, !2, i64 1680, !2, i64 1688, !2, i64 1696, !2, i64 1704, !12, i64 1712, !12, i64 1720, !2, i64 1728, !8, i64 1736, !3, i64 1744, !2, i64 1792, !2, i64 1800, !42, i64 1808, !8, i64 1844, !3, i64 1848, !3, i64 1852, !2, i64 1856, !8, i64 1864, !2, i64 1872, !2, i64 1880, !314, i64 1888}
!314 = !{!"gs_state_client_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!315 = !{!313, !8, i64 1844}
!316 = !{!313, !8, i64 1840}
!317 = !{!313, !10, i64 184}
!318 = !{!313, !10, i64 176}
!319 = !{!6, !12, i64 416}
!320 = !{!223, !12, i64 416}
!321 = !{!27, !2, i64 28840}
!322 = !{!223, !12, i64 424}
!323 = !{!6, !12, i64 424}
!324 = !{!313, !2, i64 1872}
!325 = !{!326, !12, i64 40}
!326 = !{!"cached_char_s", !327, i64 0, !29, i64 8, !29, i64 10, !29, i64 12, !29, i64 14, !12, i64 16, !2, i64 24, !8, i64 32, !12, i64 40, !3, i64 48, !2, i64 56, !8, i64 64, !8, i64 68, !16, i64 72, !12, i64 80, !16, i64 88, !16, i64 96}
!327 = !{!"gx_cached_bits_head_s", !8, i64 0, !8, i64 4}
!328 = !{!326, !3, i64 48}
!329 = !{!326, !8, i64 76}
!330 = !{!326, !8, i64 72}
!331 = !{!13, !8, i64 4}
!332 = !{!13, !8, i64 0}
!333 = !{!310, !8, i64 480}
!334 = !{!223, !2, i64 112}
!335 = !{!19, !2, i64 136}
!336 = !{!19, !2, i64 160}
!337 = !{!6, !8, i64 232}
!338 = !{!27, !8, i64 30564}
!339 = !{!27, !10, i64 28792}
!340 = !{!27, !10, i64 28800}
!341 = !{!6, !12, i64 200}
!342 = !{!19, !2, i64 128}
!343 = !{!69, !8, i64 0}
!344 = !{!69, !8, i64 4}
!345 = !{!69, !8, i64 8}
!346 = !{!69, !8, i64 12}
!347 = !{!27, !12, i64 8784}
!348 = !{!27, !2, i64 30480}
!349 = !{!27, !8, i64 832}
!350 = !{!27, !8, i64 836}
!351 = !{!27, !2, i64 5848}
!352 = !{!75, !8, i64 372}
!353 = !{!75, !8, i64 320}
!354 = !{!27, !2, i64 24}
!355 = !{!27, !8, i64 26544}
!356 = !{!326, !2, i64 24}
!357 = !{!326, !8, i64 4}
!358 = !{i64 0, i64 4, !142, i64 4, i64 4, !142, i64 8, i64 4, !142, i64 12, i64 4, !142, i64 16, i64 4, !142, i64 20, i64 4, !142, i64 24, i64 4, !21, i64 28, i64 4, !21, i64 32, i64 4, !21}
!359 = !{!27, !39, i64 5896}
!360 = !{!27, !3, i64 5900}
!361 = !{!27, !3, i64 5904}
!362 = !{!27, !3, i64 5908}
!363 = !{!27, !3, i64 5912}
!364 = !{!27, !39, i64 5920}
!365 = !{!27, !8, i64 5968}
!366 = !{!27, !2, i64 30448}
!367 = !{!27, !39, i64 30488}
!368 = !{!27, !39, i64 30492}
!369 = !{!27, !39, i64 30496}
!370 = !{!27, !39, i64 30500}
!371 = !{!27, !10, i64 30528}
!372 = !{!27, !10, i64 30536}
!373 = !{!27, !10, i64 30544}
!374 = !{!27, !10, i64 30552}
!375 = !{!29, !29, i64 0}
