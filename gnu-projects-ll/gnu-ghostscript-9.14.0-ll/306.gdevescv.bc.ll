; ModuleID = './gdevescv.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.struct_shared_procs_s = type opaque
%struct.gs_memory_s = type { %struct.gs_memory_s*, %struct.gs_memory_procs_s, %struct.gs_lib_ctx_s*, %struct.gs_memory_s*, %struct.gs_memory_s* }
%struct.gs_memory_procs_s = type { i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)*, void (%struct.gs_memory_s*, %struct.gs_memory_status_s*)*, void (%struct.gs_memory_s*, i32, i8*)*, void (%struct.gs_memory_s*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i32 (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)*, i32 (%struct.gs_memory_s*, %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, i8*)*, void (%struct.gs_memory_s*, i32)* }
%struct.gs_memory_status_s = type { i64, i64, i32 }
%struct.gs_gc_root_s = type { %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i32 }
%struct.gs_ptr_procs_s = type { void (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i32 (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)* }
%struct.enum_ptr_s = type { i8*, i32 }
%struct.gc_state_s = type opaque
%struct.gs_lib_ctx_s = type { %struct.gs_memory_s*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i64, i8*, %struct.name_table_s*, i32, %struct.gx_io_device_s**, i32, i32, [2 x i64], %struct.gs_font_dir_s*, i32, i8*, i32, i8*, %struct.gs_fapi_server_s** }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.name_table_s = type opaque
%struct.gx_io_device_s = type { i8*, i8*, %struct.gx_io_device_procs_s, i8* }
%struct.gx_io_device_procs_s = type { i32 (%struct.gx_io_device_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i32, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i8*, %struct._IO_FILE**, i8*, i32)*, i32 (%struct.gx_io_device_s*, %struct._IO_FILE*)*, i32 (%struct.gx_io_device_s*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stat*)*, %struct.file_enum_s* (%struct.gx_io_device_s*, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.file_enum_s*, i8*, i32)*, void (%struct.file_enum_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)* }
%struct.stream_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8], %union.stream_cursor_s, i8*, i32, i32, i16, i8, i8, %struct.gs_string_s, i64, %struct.stream_procs, %struct.stream_s*, i32, i32, %struct.stream_state_s*, i16, i16, %struct.stream_s*, %struct.stream_s*, i32, i32, i32 (%struct.stream_s*)*, %struct._IO_FILE*, %struct.gs_const_string_s, i32, i64, i64 }
%struct.stream_template_s = type opaque
%union.stream_cursor_s = type { %struct.stream_cursor_read_s }
%struct.stream_cursor_read_s = type { i8*, i8*, i8* }
%struct.gs_string_s = type { i8*, i32 }
%struct.stream_procs = type { i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64)*, void (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32 (%struct.stream_s*, i32)* }
%struct.stream_cursor_write_s = type { i8*, i8*, i8* }
%struct.stream_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, {}*, i32, [80 x i8] }
%struct.gs_const_string_s = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.file_enum_s = type opaque
%struct.gs_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32 }
%struct.gs_param_list_procs_s = type { i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_typed_value_s*)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*, i32)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*)*, i32 (%struct.gs_param_list_s*, %union.gs_param_enumerator_s*, %struct.gs_param_string_s*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*)* }
%struct.gs_param_typed_value_s = type { %union.gs_param_value_s, i32 }
%union.gs_param_value_s = type { %struct.gs_param_string_s }
%struct.gs_param_string_s = type { i8*, i32, i32 }
%struct.gs_param_collection_s = type { %struct.gs_param_list_s*, i32 }
%union.gs_param_enumerator_s = type { i64 }
%struct.gs_font_dir_s = type opaque
%struct.gs_fapi_server_s = type opaque
%struct.gs_memory_struct_type_s = type { i32, i8*, %struct.struct_shared_procs_s*, {}*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }
%struct.gx_device_escv_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, i64, i64, i64, i64, %struct.gs_matrix_s, i32, i32, i32, i32, i32, float, float, i64, i32, [1024 x i64], [256 x i8], [256 x i8], [256 x i8], [256 x i8], [256 x i8], %struct.gs_param_string_s, %struct.gs_param_string_s, %struct.gs_param_string_s, %struct.gs_param_string_s, %struct.gs_param_string_s, i32, i32, i32, i32 }
%struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s }
%struct.rc_header_s = type { i64, %struct.gs_memory_s*, void (%struct.gs_memory_s*, i8*, i8*)* }
%struct.gx_device_color_info_s = type { i32, i32, i32, i16, i8, i32, i32, i32, i32, %struct.gx_device_anti_alias_info_s, i32, [64 x i8], [64 x i8], [64 x i64], i8*, i32, i64, i32 }
%struct.gx_device_anti_alias_info_s = type { i32, i32 }
%struct.gx_device_cached_colors_s = type { i64, i64 }
%struct.gx_stroked_gradient_recognizer_s = type { i32, [4 x %struct.gs_fixed_point_s], [4 x %struct.gs_fixed_point_s] }
%struct.gs_fixed_point_s = type { i32, i32 }
%struct.gdev_space_params_s = type { i64, i64, %struct.gx_band_params_s, i32, i32 }
%struct.gx_band_params_s = type { i32, i32, i64 }
%struct.cmm_dev_profile_s = type { [4 x %struct.cmm_profile_s*], %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, [4 x %struct.gsicc_rendering_param_s], i32, i32, i32, i32, i32, i32, %struct.gsicc_namelist_s*, i32, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.cmm_profile_s = type { i8, i8, i32, i32, i32, i32, %struct.gs_range_icc_s, i64, i32, [15 x i32], i32, i32, i32, %struct.gsicc_rendering_param_s, i8*, %struct.gx_device_s*, %struct.gsicc_namelist_s*, i8*, %struct.rc_header_s, i32, i8*, %struct.gs_memory_s*, %struct.gx_monitor_s* }
%struct.gs_range_icc_s = type { [15 x %struct.gs_range_s] }
%struct.gs_range_s = type { float, float }
%struct.gsicc_rendering_param_s = type { i32, i32, i32, i32, i32, i32 }
%struct.gx_monitor_s = type { %struct.gs_memory_s*, %union.gp_monitor }
%union.gp_monitor = type { i8* }
%struct.gsicc_namelist_s = type { i32, %struct.gsicc_colorname_s*, i8*, %struct.gs_devicen_color_map_s*, i32 }
%struct.gsicc_colorname_s = type { i8*, i32, %struct.gsicc_colorname_s* }
%struct.gs_devicen_color_map_s = type { i32, i32, i32, i32, i64, [64 x i32] }
%struct.gx_page_device_procs_s = type { i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* }
%struct.gs_state_s = type opaque
%struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i64 (%struct.gx_device_s*, i16*)*, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)*, i32 (%struct.gx_device_s*, i32, i32*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)*, i32 (%struct.gx_device_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, %struct.gs_devn_params_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, void (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* }
%struct.gx_tile_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16 }
%struct.gs_int_point_s = type { i32, i32 }
%struct.gx_xfont_procs_s = type opaque
%struct.gx_path_s = type { %struct.gx_path_segments_s, %struct.gs_memory_s*, i32, %struct.gx_path_segments_s*, %struct.segment_s*, %struct.gs_fixed_rect_s, %struct.segment_s*, i8, i8, i8, i8, i8, i32, i32, %struct.gs_fixed_point_s, %struct.gx_path_procs_s* }
%struct.gx_path_segments_s = type { %struct.rc_header_s, %struct.psc_ }
%struct.psc_ = type { %struct.subpath_s*, %struct.subpath_s* }
%struct.subpath_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.segment_s*, i32, %struct.line_close_segment, i8 }
%struct.line_close_segment = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.subpath_s* }
%struct.gs_fixed_rect_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.segment_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s }
%struct.gx_path_procs_s = type { i32 (%struct.gx_path_s*, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32)*, i8 (%struct.gx_path_s*, i8)* }
%struct.gx_fill_params_s = type opaque
%struct.gx_device_color_s = type { %struct.gx_device_color_type_s*, %union._c, %struct.gs_int_point_s, i32, %struct.gs_client_color_s, %struct._mask }
%struct.gx_device_color_type_s = type opaque
%union._c = type { %struct._col }
%struct._col = type { %struct.gx_device_halftone_s*, i16, [64 x i8], [64 x i32], i16, i64 }
%struct.gx_device_halftone_s = type opaque
%struct.gs_client_color_s = type { %struct.gs_pattern_instance_s*, %struct.gs_paint_color_s }
%struct.gs_pattern_instance_s = type opaque
%struct.gs_paint_color_s = type { [64 x float] }
%struct._mask = type { %struct.mp_, i64, %struct.gx_color_tile_s* }
%struct.mp_ = type { i32, i32 }
%struct.gx_color_tile_s = type opaque
%struct.gx_clip_path_s = type opaque
%struct.gx_stroke_params_s = type opaque
%struct.gs_fixed_edge_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gs_image1_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s, i32, i32, i32, [130 x float], i32, i32, i32, %struct.gs_color_space_s*, i32, i32, i32, i32 }
%struct.gx_image_type_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gs_imager_state_s*, %struct.gs_image_common_s*, %struct.gs_int_point_s*)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s**)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s*)*, void (%struct.gs_image_common_s*, %struct.gs_memory_s*)*, i32 }
%struct.gs_image_common_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s }
%struct.gs_color_space_s = type { %struct.gs_color_space_type_s*, %struct.rc_header_s, i64, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.client_color_space_data_s*, %struct.cmm_profile_s*, %union.anon }
%struct.gs_color_space_type_s = type { i32, i32, i32, %struct.gs_memory_struct_type_s*, i32 (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, %struct.gs_color_space_s* (%struct.gs_color_space_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i16*, %struct.gs_imager_state_s*, %struct.gx_device_s*)*, i32 (i16*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, void (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.stream_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, float, %struct.gsicc_link_s*)*, i32 (%struct.gs_color_space_s*)* }
%struct.gsicc_link_s = type { i8*, %struct.gscms_procs_s, %struct.gsicc_hashlink_s, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_s*, %struct.gx_semaphore_s*, i32, i32, i32, i32, i32, i32, %struct.gscms_procs_s, i32, i32, i32 }
%struct.gsicc_hashlink_s = type { i64, i64, i64, i64 }
%struct.gsicc_link_cache_s = type { %struct.gsicc_link_s*, i32, %struct.rc_header_s, %struct.gs_memory_s*, %struct.gx_monitor_s*, %struct.gx_semaphore_s*, i32 }
%struct.gx_semaphore_s = type { %struct.gs_memory_s*, %union.gp_semaphore }
%union.gp_semaphore = type { i8* }
%struct.gscms_procs_s = type { void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)*, void (%struct.gx_device_s*, %struct.gsicc_link_s*, i8*, i8*, i32)*, void (%struct.gsicc_link_s*)*, i32 (i8*, i32)* }
%struct.gsicc_bufferdesc_s = type { i8, i8, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.client_color_space_data_s = type { void (%struct.gs_color_space_s*, i32)* }
%union.anon = type { %struct.gs_device_n_params_s }
%struct.gs_device_n_params_s = type { i64*, i32, %struct.gs_device_n_map_s*, %struct.gs_device_n_attributes_s*, i32, i32 (%struct.gs_memory_s*, i64, i8**, i32*)* }
%struct.gs_device_n_map_s = type opaque
%struct.gs_device_n_attributes_s = type opaque
%struct.gs_int_rect_s = type { %struct.gs_int_point_s, %struct.gs_int_point_s }
%struct.gx_image_enum_common_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32] }
%struct.gx_image_enum_procs_s = type { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*)*, i32 (%struct.gx_image_enum_common_s*, i8*)* }
%struct.gx_image_plane_s = type { i8*, i32, i32 }
%struct.gx_strip_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16, i16, i16, i32 }
%struct.gs_get_bits_params_s = type opaque
%struct.gs_composite_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s* }
%struct.gs_composite_type_s = type { i8, %struct.gs_composite_type_procs_s }
%struct.gs_composite_type_procs_s = type { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)*, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)*, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)*, i32 (%struct.gs_composite_s*, i8, i8)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* }
%struct.gx_device_clist_writer_s = type opaque
%struct.gs_text_params_s = type { i32, %union.sd_, i32, %struct.gs_point_s, %struct.gs_point_s, %union.s_, float*, float*, i32 }
%union.sd_ = type { i8* }
%union.s_ = type { i64 }
%struct.gs_font_s = type opaque
%struct.gs_text_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s }
%struct.gs_text_enum_procs_s = type { i32 (%struct.gs_text_enum_s*, %struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*, %struct.gs_point_s*)*, i32 (%struct.gs_text_enum_s*, double*, i32)*, i32 (%struct.gs_text_enum_s*)*, void (%struct.gs_text_enum_s*, i8*)* }
%struct.cached_fm_pair_s = type opaque
%struct.gx_font_stack_s = type { i32, [6 x %struct.gx_font_stack_item_s] }
%struct.gx_font_stack_item_s = type { %struct.gs_font_s*, i32 }
%struct.gs_log2_scale_point_s = type { i32, i32 }
%struct.gs_text_returned_s = type { i64, i64, %struct.gs_point_s }
%struct.gs_transparency_group_params_s = type { %struct.gs_color_space_s*, i32, i32, i32, i32, i32, i32, i32, i64, %struct.cmm_profile_s* }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.gx_transparency_mask_params_s = type { i32, i32, i32, i32, [64 x float], float, i32, i32, i32, i32, [256 x i8], i64, %struct.cmm_profile_s* }
%struct.gx_cm_color_map_procs_s = type { void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)* }
%struct.gs_pattern1_instance_s = type opaque
%struct.gs_fill_attributes_s = type { %struct.gs_fixed_rect_s*, i32, %struct.gx_device_halftone_s*, i32, i32, i32, %struct.patch_fill_state_s* }
%struct.patch_fill_state_s = type opaque
%struct.gs_devn_params_s = type opaque
%struct.gx_process_page_options_s = type { i32 (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i32, i32, i8**)*, void (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_int_rect_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, i8*)*, i8*, i32 }
%struct.gx_device_vector_procs_s = type { i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, float*, i32, double)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32, i32)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gx_path_s*, i32, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, i32)* }
%struct.gx_device_vector_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64 }
%struct.gs_imager_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s }
%struct.gx_line_params_s = type { float, i32, i32, i32, i32, i32, float, float, float, i32, %struct.gs_matrix_s, %struct.gx_dash_params_s }
%struct.gx_dash_params_s = type { float*, i32, float, i32, float, i32, i32, float }
%struct.gs_matrix_fixed_s = type { float, float, float, float, float, float, i32, i32, i32 }
%struct.gs_transparency_source_s = type { float }
%struct.gs_xstate_trans_flags = type { i32, i32 }
%struct.gsicc_manager_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gsicc_devicen_s*, %struct.gsicc_smask_s*, i32, %struct.cmm_srcgtag_profile_s*, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.gsicc_devicen_s = type { %struct.gsicc_devicen_entry_s*, %struct.gsicc_devicen_entry_s*, i32 }
%struct.gsicc_devicen_entry_s = type { %struct.cmm_profile_s*, %struct.gsicc_devicen_entry_s* }
%struct.gsicc_smask_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gs_memory_s*, i32 }
%struct.cmm_srcgtag_profile_s = type { [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], %struct.cmm_profile_s*, %struct.gs_memory_s*, i32, i8*, %struct.rc_header_s }
%struct.gsicc_profile_cache_s = type { %struct.gsicc_profile_entry_s*, i32, %struct.rc_header_s, %struct.gs_memory_s* }
%struct.gsicc_profile_entry_s = type { %struct.gs_color_space_s*, %struct.gsicc_profile_entry_s*, i64 }
%struct.gs_halftone_s = type opaque
%struct.gs_cie_render_s = type opaque
%struct.gx_transfer_map_s = type { %struct.rc_header_s, float (double, %struct.gx_transfer_map_s*)*, %struct.gs_mapping_closure_s, i64, [256 x i16] }
%struct.gs_mapping_closure_s = type { float (double, %struct.gx_transfer_map_s*, i8*)*, i8* }
%struct.gx_transfer_s = type { i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s* }
%struct.gx_color_map_procs_s = type { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* }
%struct.gx_pattern_cache_s = type opaque
%struct.gx_cie_joint_caches_s = type opaque
%struct.gx_hl_saved_color_s = type { i64, i64, i32, %struct.gs_client_color_s, %struct.gx_device_color_saved_s }
%struct.gx_device_color_saved_s = type { %struct.gx_device_color_type_s*, %union._svc, %struct.gs_int_point_s }
%union._svc = type { %struct._svbin, [304 x i8] }
%struct._svbin = type { [2 x i64], i32, i32 }
%struct.gs_point_s = type { double, double }
%struct.gx_device_bbox_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, i32, i32, %struct.gx_device_bbox_procs_s, i8*, i32, %struct.gs_fixed_rect_s, i64, i64, i64 }
%struct.gx_device_bbox_procs_s = type { i32 (i8*)*, void (i8*, %struct.gs_fixed_rect_s*)*, void (i8*, i32, i32, i32, i32)*, i32 (i8*, %struct.gs_fixed_rect_s*)* }
%struct.gs_matrix_s = type { float, float, float, float, float, float }
%struct.anon = type { i8*, i32, i32, i32, i32 }
%struct.EPaperTable_s = type { i32, i32, i32, i8* }
%struct.gdev_vector_image_enum_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32], %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s*, i32, i32, i32, i32, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.gs_path_enum_s = type { %struct.gs_memory_s*, %struct.gs_matrix_s, %struct.segment_s*, %struct.gx_path_s*, %struct.gx_path_s*, i32, i32 }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.paper_candidate_s = type { %struct.EPaperTable_s*, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [15 x i8] c"gx_device_escv\00", align 1
@st_device_escv = constant { i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* } { i32 18648, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @device_escv_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @device_escv_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* @gx_device_finalize, i8* null }, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"epl2050\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"DeviceGray\00", align 1
@gs_epl2050_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"epl2050p\00", align 1
@gs_epl2050p_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"epl2120\00", align 1
@gs_epl2120_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.5 = private unnamed_addr constant [8 x i8] c"epl2500\00", align 1
@gs_epl2500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.6 = private unnamed_addr constant [8 x i8] c"epl2750\00", align 1
@gs_epl2750_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.7 = private unnamed_addr constant [8 x i8] c"epl5800\00", align 1
@gs_epl5800_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.8 = private unnamed_addr constant [8 x i8] c"epl5900\00", align 1
@gs_epl5900_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.9 = private unnamed_addr constant [8 x i8] c"epl6100\00", align 1
@gs_epl6100_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.10 = private unnamed_addr constant [8 x i8] c"epl6200\00", align 1
@gs_epl6200_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.11 = private unnamed_addr constant [7 x i8] c"lp1800\00", align 1
@gs_lp1800_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.12 = private unnamed_addr constant [7 x i8] c"lp1900\00", align 1
@gs_lp1900_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.13 = private unnamed_addr constant [7 x i8] c"lp2200\00", align 1
@gs_lp2200_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.14 = private unnamed_addr constant [7 x i8] c"lp2400\00", align 1
@gs_lp2400_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.15 = private unnamed_addr constant [7 x i8] c"lp2500\00", align 1
@gs_lp2500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.16 = private unnamed_addr constant [7 x i8] c"lp7500\00", align 1
@gs_lp7500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.17 = private unnamed_addr constant [7 x i8] c"lp7700\00", align 1
@gs_lp7700_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.18 = private unnamed_addr constant [7 x i8] c"lp7900\00", align 1
@gs_lp7900_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.19 = private unnamed_addr constant [7 x i8] c"lp8100\00", align 1
@gs_lp8100_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.20 = private unnamed_addr constant [8 x i8] c"lp8300f\00", align 1
@gs_lp8300f_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.21 = private unnamed_addr constant [8 x i8] c"lp8400f\00", align 1
@gs_lp8400f_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.22 = private unnamed_addr constant [7 x i8] c"lp8600\00", align 1
@gs_lp8600_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.23 = private unnamed_addr constant [8 x i8] c"lp8600f\00", align 1
@gs_lp8600f_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.24 = private unnamed_addr constant [7 x i8] c"lp8700\00", align 1
@gs_lp8700_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.25 = private unnamed_addr constant [7 x i8] c"lp8900\00", align 1
@gs_lp8900_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.26 = private unnamed_addr constant [8 x i8] c"lp9000b\00", align 1
@gs_lp9000b_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.27 = private unnamed_addr constant [7 x i8] c"lp9100\00", align 1
@gs_lp9100_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.28 = private unnamed_addr constant [8 x i8] c"lp9200b\00", align 1
@gs_lp9200b_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.29 = private unnamed_addr constant [7 x i8] c"lp9300\00", align 1
@gs_lp9300_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.30 = private unnamed_addr constant [7 x i8] c"lp9400\00", align 1
@gs_lp9400_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.31 = private unnamed_addr constant [7 x i8] c"lp9600\00", align 1
@gs_lp9600_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.32 = private unnamed_addr constant [8 x i8] c"lp9600s\00", align 1
@gs_lp9600s_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.33 = private unnamed_addr constant [8 x i8] c"lps4500\00", align 1
@gs_lps4500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.34 = private unnamed_addr constant [8 x i8] c"eplmono\00", align 1
@gs_eplmono_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0xC05D870E20000000, float 0xC05D870E20000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.35 = private unnamed_addr constant [8 x i8] c"alc1900\00", align 1
@.str.36 = private unnamed_addr constant [10 x i8] c"DeviceRGB\00", align 1
@gs_alc1900_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.37 = private unnamed_addr constant [8 x i8] c"alc2000\00", align 1
@gs_alc2000_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.38 = private unnamed_addr constant [8 x i8] c"alc4000\00", align 1
@gs_alc4000_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.39 = private unnamed_addr constant [8 x i8] c"alc4100\00", align 1
@gs_alc4100_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.40 = private unnamed_addr constant [8 x i8] c"alc8500\00", align 1
@gs_alc8500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.41 = private unnamed_addr constant [8 x i8] c"alc8600\00", align 1
@gs_alc8600_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.42 = private unnamed_addr constant [8 x i8] c"alc9100\00", align 1
@gs_alc9100_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.43 = private unnamed_addr constant [8 x i8] c"lp3000c\00", align 1
@gs_lp3000c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.44 = private unnamed_addr constant [8 x i8] c"lp8000c\00", align 1
@gs_lp8000c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.45 = private unnamed_addr constant [8 x i8] c"lp8200c\00", align 1
@gs_lp8200c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.46 = private unnamed_addr constant [8 x i8] c"lp8300c\00", align 1
@gs_lp8300c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.47 = private unnamed_addr constant [8 x i8] c"lp8500c\00", align 1
@gs_lp8500c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.48 = private unnamed_addr constant [8 x i8] c"lp8800c\00", align 1
@gs_lp8800c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.49 = private unnamed_addr constant [8 x i8] c"lp9000c\00", align 1
@gs_lp9000c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.50 = private unnamed_addr constant [8 x i8] c"lp9200c\00", align 1
@gs_lp9200c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.51 = private unnamed_addr constant [8 x i8] c"lp9500c\00", align 1
@gs_lp9500c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.52 = private unnamed_addr constant [8 x i8] c"lp9800c\00", align 1
@gs_lp9800c_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.53 = private unnamed_addr constant [8 x i8] c"lps6500\00", align 1
@gs_lps6500_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@.str.54 = private unnamed_addr constant [9 x i8] c"eplcolor\00", align 1
@gs_eplcolor_device = global %struct.gx_device_escv_s { i32 18648, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_escv to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 4840, i32 6896, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082266660000000, float 0x4089DC2900000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 6.000000e+02, float 6.000000e+02], [2 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000], [4 x float] [float 0x402C58B160000000, float 0.000000e+00, float 0.000000e+00, float 0x402C58B160000000], i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @escv_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @escv_output_page, i32 (%struct.gx_device_s*)* @escv_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gdev_vector_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @escv_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @escv_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @escv_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gdev_vector_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @escv_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @escv_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 1, i32 1, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s { double 0x4020AAAAAAAAAAAB, double 0x4020AAAAAAAAAAAB }, i32 0, %struct.gx_device_bbox_s* null, i64 -1, i64 -1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i64 0, i64 0, double 3.000000e+00, i64 0, i64 3, i64 0, i64 0, %struct.gs_matrix_s zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 0, float 0.000000e+00, float 0.000000e+00, i64 0, i32 0, [1024 x i64] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, [256 x i8] zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, %struct.gs_param_string_s zeroinitializer, i32 0, i32 0, i32 0, i32 600 }, align 8
@st_device_vector = external constant %struct.gs_memory_struct_type_s, align 8
@escv_vector_procs = internal constant %struct.gx_device_vector_procs_s { i32 (%struct.gx_device_vector_s*)* @escv_beginpage, i32 (%struct.gx_device_vector_s*, double)* @escv_setlinewidth, i32 (%struct.gx_device_vector_s*, i32)* @escv_setlinecap, i32 (%struct.gx_device_vector_s*, i32)* @escv_setlinejoin, i32 (%struct.gx_device_vector_s*, double)* @escv_setmiterlimit, i32 (%struct.gx_device_vector_s*, float*, i32, double)* @escv_setdash, i32 (%struct.gx_device_vector_s*, double)* @escv_setflat, i32 (%struct.gx_device_vector_s*, i32, i32)* @escv_setlogop, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @escv_can_handle_hl_color, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @escv_setfillcolor, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @escv_setstrokecolor, i32 (%struct.gx_device_vector_s*, %struct.gx_path_s*, i32, %struct.gs_matrix_s*)* @escv_vector_dopath, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)* @escv_vector_dorect, i32 (%struct.gx_device_vector_s*, i32)* @escv_beginpath, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @escv_moveto, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @escv_lineto, i32 (%struct.gx_device_vector_s*, double, double, double, double, double, double, double, double, i32)* @escv_curveto, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @escv_closepath, i32 (%struct.gx_device_vector_s*, i32)* @escv_endpath }, align 8
@escv_beginpage.model_resource = internal constant [51 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 600, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), i32 600, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i32 1200, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i32 0, i32 0), i32 600, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i32 0, i32 0), i32 600, i32 0, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i32 600, i32 0, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i32 600, i32 0, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 1200, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 1200, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 1200, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i32 600, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i32 600, i32 0, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 1200, i32 0, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i32 1200, i32 0, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i32 1200, i32 0, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i32 1200, i32 0, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i32 600, i32 1, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i32 1200, i32 1, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i32 1200, i32 1, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 1200, i32 1, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i32 1200, i32 1, i32 0, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i32 600, i32 1, i32 0, i32 1 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i32 600, i32 1, i32 0, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i32 0, i32 0), i32 600, i32 1, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 600, i32 1, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i32 1200, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i32 600, i32 1, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0), i32 600, i32 1, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i32 0, i32 0), i32 600, i32 1, i32 1, i32 1 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), i32 600, i32 1, i32 1, i32 0 }, %struct.anon { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.55, i32 0, i32 0), i32 -1, i32 -1, i32 0, i32 0 }], align 16
@.str.55 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.56 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.57 = private unnamed_addr constant [9 x i8] c"\1B\01@EJL \0A\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"@EJL SJ ID=\22\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"\22\0A\00", align 1
@.str.60 = private unnamed_addr constant [13 x i8] c"@EJL JI ID=\22\00", align 1
@.str.61 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c" DATE=\22\00", align 1
@.str.63 = private unnamed_addr constant [18 x i8] c"%Y/%m/%d %H:%M:%S\00", align 1
@.str.64 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"@EJL JI\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c" USER=\22\00", align 1
@.str.67 = private unnamed_addr constant [11 x i8] c" MACHINE=\22\00", align 1
@.str.68 = private unnamed_addr constant [12 x i8] c" DOCUMENT=\22\00", align 1
@.str.69 = private unnamed_addr constant [13 x i8] c"@EJL JI OS=\22\00", align 1
@.str.70 = private unnamed_addr constant [17 x i8] c"@EJL JI DRIVER=\22\00", align 1
@.str.71 = private unnamed_addr constant [18 x i8] c"@EJL JI PRINTER=\22\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"Ghostscript\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"@EJL CO \00", align 1
@.str.74 = private unnamed_addr constant [21 x i8] c"@EJL SE LA=ESC/PAGE\0A\00", align 1
@.str.75 = private unnamed_addr constant [9 x i8] c"@EJL SET\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c" RS=1200\00", align 1
@.str.77 = private unnamed_addr constant [7 x i8] c" RS=FN\00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c" RS=QK\00", align 1
@.str.79 = private unnamed_addr constant [7 x i8] c" OU=FU\00", align 1
@.str.80 = private unnamed_addr constant [7 x i8] c" OU=FD\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c" PU=1\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c" PU=15\00", align 1
@.str.83 = private unnamed_addr constant [7 x i8] c" PU=%d\00", align 1
@.str.84 = private unnamed_addr constant [7 x i8] c" PU=AU\00", align 1
@.str.85 = private unnamed_addr constant [7 x i8] c" DX=ON\00", align 1
@.str.86 = private unnamed_addr constant [7 x i8] c" BD=SE\00", align 1
@.str.87 = private unnamed_addr constant [7 x i8] c" BD=LE\00", align 1
@.str.88 = private unnamed_addr constant [8 x i8] c" DX=OFF\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c" QT=1 CO=%d\00", align 1
@.str.90 = private unnamed_addr constant [12 x i8] c" QT=%d CO=1\00", align 1
@.str.91 = private unnamed_addr constant [11 x i8] c" QT=1 CO=1\00", align 1
@.str.92 = private unnamed_addr constant [7 x i8] c" DL=%d\00", align 1
@.str.93 = private unnamed_addr constant [7 x i8] c" OR=LA\00", align 1
@.str.94 = private unnamed_addr constant [7 x i8] c" SN=ON\00", align 1
@.str.95 = private unnamed_addr constant [8 x i8] c" RI=OFF\00", align 1
@.str.96 = private unnamed_addr constant [7 x i8] c" RI=ON\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c" PK=NM\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c" PK=TH\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c" PK=TR\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c" PK=TN\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c" PK=LH\00", align 1
@.str.102 = private unnamed_addr constant [7 x i8] c" PK=CT\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c" PK=ET\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c" PK=HQ\00", align 1
@.str.105 = private unnamed_addr constant [7 x i8] c" PK=UT\00", align 1
@.str.106 = private unnamed_addr constant [7 x i8] c" PK=UM\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c" PS=\00", align 1
@.str.108 = private unnamed_addr constant [3 x i8] c"A4\00", align 1
@.str.109 = private unnamed_addr constant [47 x i8] c" ZO=OFF EC=ON SZ=OFF SL=YES TO=0.0MM LO=0.0MM\0A\00", align 1
@.str.110 = private unnamed_addr constant [21 x i8] c"@EJL EN LA=ESC/PAGE\0A\00", align 1
@.str.111 = private unnamed_addr constant [5 x i8] c"\1DrhE\00", align 1
@.str.112 = private unnamed_addr constant [11 x i8] c"\1D1mmE\1D1csE\00", align 1
@.str.113 = private unnamed_addr constant [11 x i8] c"\1D0;0.06muE\00", align 1
@.str.114 = private unnamed_addr constant [14 x i8] c"\1D1;45;156htmE\00", align 1
@.str.115 = private unnamed_addr constant [61 x i8] c"\1D9;1200;1200drE\1D2;1200;1200drE\1D1;1200;1200drE\1D0;1200;1200drE\00", align 1
@.str.116 = private unnamed_addr constant [9 x i8] c"\1D1;1;raE\00", align 1
@.str.117 = private unnamed_addr constant [11 x i8] c"\1D0;0.12muE\00", align 1
@.str.118 = private unnamed_addr constant [14 x i8] c"\1D1;45;106htmE\00", align 1
@.str.119 = private unnamed_addr constant [53 x i8] c"\1D9;600;600drE\1D2;600;600drE\1D1;600;600drE\1D0;600;600drE\00", align 1
@.str.120 = private unnamed_addr constant [11 x i8] c"\1D0;0.24muE\00", align 1
@.str.121 = private unnamed_addr constant [13 x i8] c"\1D1;45;71htmE\00", align 1
@.str.122 = private unnamed_addr constant [53 x i8] c"\1D9;300;300drE\1D2;300;300drE\1D1;300;300drE\1D0;300;300drE\00", align 1
@.str.123 = private unnamed_addr constant [64 x i8] c"\1D1tsE\1D1owE\1D0alfP\1D0affP\1D0;0;0clfP\1D0pmP\1D1024ibI\1D2cmE\1D0bcI\1D1;10mlG\00", align 1
@.str.124 = private unnamed_addr constant [7 x i8] c"\1D0sarG\00", align 1
@.str.125 = private unnamed_addr constant [39 x i8] c" ZO=OFF EC=ON SZ=OFF SL=YES TO=0 LO=0\0A\00", align 1
@.str.126 = private unnamed_addr constant [27 x i8] c"@EJL EN LA=ESC/PAGE-COLOR\0A\00", align 1
@.str.127 = private unnamed_addr constant [46 x i8] c"\1D0pddO\1D0;0mmE\1D2csE\1D0;1;3cmmE\1D0;1raE\1D0;2;4ccmE\00", align 1
@.str.128 = private unnamed_addr constant [66 x i8] c"\1D0pddO\1D0;0cmmE\1D1;2;3ccmE\1D2;2;3ccmE\1D3;2;4ccmE\1D1;1raE\1D2;1raE\1D3;1raE\00", align 1
@.str.129 = private unnamed_addr constant [21 x i8] c"\1D7;0;2;0cam{E\0A\00\00\00\00\00\00\00", align 1
@.str.130 = private unnamed_addr constant [9 x i8] c"\1D0;0cmmE\00", align 1
@.str.131 = private unnamed_addr constant [61 x i8] c"\1D3;1200;1200drE\1D2;1200;1200drE\1D1;1200;1200drE\1D0;1200;1200drE\00", align 1
@.str.132 = private unnamed_addr constant [53 x i8] c"\1D3;600;600drE\1D2;600;600drE\1D1;600;600drE\1D0;600;600drE\00", align 1
@.str.133 = private unnamed_addr constant [53 x i8] c"\1D3;300;300drE\1D2;300;300drE\1D1;300;300drE\1D0;300;300drE\00", align 1
@.str.134 = private unnamed_addr constant [8 x i8] c"\1D0;0loE\00", align 1
@.str.135 = private unnamed_addr constant [59 x i8] c"\1D1tsE\1D0alfP\1D0affP\1D0;0;0clfP\1D0pmP\1D1024ibI\1D2cmE\1D0bcI\1D1;10mlG\00", align 1
@.str.136 = private unnamed_addr constant [16 x i8] c"\1D8;1;2;2;2plr{E\00", align 1
@.str.137 = private unnamed_addr constant [9 x i8] c"\FF\FF\FF\FF\00\00\00\00\00", align 1
@.str.138 = private unnamed_addr constant [10 x i8] c"\1D2;204wfE\00", align 1
@.str.139 = private unnamed_addr constant [4 x i8] c"epl\00", align 1
@.str.140 = private unnamed_addr constant [11 x i8] c"EPSON EPL-\00", align 1
@.str.141 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c"EPSON AL-\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"lp\00", align 1
@.str.144 = private unnamed_addr constant [10 x i8] c"EPSON LP-\00", align 1
@ePaperTable = internal constant [23 x %struct.EPaperTable_s] [%struct.EPaperTable_s { i32 933, i32 1369, i32 72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.145, i32 0, i32 0) }, %struct.EPaperTable_s { i32 842, i32 1191, i32 13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.146, i32 0, i32 0) }, %struct.EPaperTable_s { i32 792, i32 1224, i32 36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.147, i32 0, i32 0) }, %struct.EPaperTable_s { i32 729, i32 1032, i32 24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i32 0, i32 0) }, %struct.EPaperTable_s { i32 709, i32 1001, i32 24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i32 0, i32 0) }, %struct.EPaperTable_s { i32 612, i32 1008, i32 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.149, i32 0, i32 0) }, %struct.EPaperTable_s { i32 612, i32 936, i32 34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.150, i32 0, i32 0) }, %struct.EPaperTable_s { i32 612, i32 792, i32 30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.151, i32 0, i32 0) }, %struct.EPaperTable_s { i32 595, i32 935, i32 37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.152, i32 0, i32 0) }, %struct.EPaperTable_s { i32 595, i32 842, i32 14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.108, i32 0, i32 0) }, %struct.EPaperTable_s { i32 576, i32 756, i32 35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i32 0, i32 0) }, %struct.EPaperTable_s { i32 522, i32 756, i32 33, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.154, i32 0, i32 0) }, %struct.EPaperTable_s { i32 516, i32 729, i32 25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.155, i32 0, i32 0) }, %struct.EPaperTable_s { i32 499, i32 709, i32 99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.156, i32 0, i32 0) }, %struct.EPaperTable_s { i32 459, i32 649, i32 91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.157, i32 0, i32 0) }, %struct.EPaperTable_s { i32 420, i32 595, i32 15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.158, i32 0, i32 0) }, %struct.EPaperTable_s { i32 396, i32 612, i32 31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.159, i32 0, i32 0) }, %struct.EPaperTable_s { i32 312, i32 624, i32 90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.160, i32 0, i32 0) }, %struct.EPaperTable_s { i32 298, i32 666, i32 64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i32 0, i32 0) }, %struct.EPaperTable_s { i32 297, i32 684, i32 81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.162, i32 0, i32 0) }, %struct.EPaperTable_s { i32 283, i32 420, i32 38, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.163, i32 0, i32 0) }, %struct.EPaperTable_s { i32 279, i32 540, i32 80, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.164, i32 0, i32 0) }, %struct.EPaperTable_s { i32 0, i32 0, i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.55, i32 0, i32 0) }], align 16
@.str.145 = private unnamed_addr constant [7 x i8] c"A3PLUS\00", align 1
@.str.146 = private unnamed_addr constant [3 x i8] c"A3\00", align 1
@.str.147 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.148 = private unnamed_addr constant [3 x i8] c"B4\00", align 1
@.str.149 = private unnamed_addr constant [4 x i8] c"LGL\00", align 1
@.str.150 = private unnamed_addr constant [4 x i8] c"GLG\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.152 = private unnamed_addr constant [3 x i8] c"F4\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c"GLT\00", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"EXE\00", align 1
@.str.155 = private unnamed_addr constant [3 x i8] c"B5\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"IB5\00", align 1
@.str.157 = private unnamed_addr constant [3 x i8] c"C5\00", align 1
@.str.158 = private unnamed_addr constant [3 x i8] c"A5\00", align 1
@.str.159 = private unnamed_addr constant [4 x i8] c"HLT\00", align 1
@.str.160 = private unnamed_addr constant [3 x i8] c"DL\00", align 1
@.str.161 = private unnamed_addr constant [5 x i8] c"YOU4\00", align 1
@.str.162 = private unnamed_addr constant [4 x i8] c"C10\00", align 1
@.str.163 = private unnamed_addr constant [9 x i8] c"POSTCARD\00", align 1
@.str.164 = private unnamed_addr constant [4 x i8] c"MON\00", align 1
@.str.165 = private unnamed_addr constant [13 x i8] c"\1D%d;%d;%dlwG\00", align 1
@.str.166 = private unnamed_addr constant [9 x i8] c"\1D1;%dmlG\00", align 1
@.str.167 = private unnamed_addr constant [8 x i8] c"\1D0;0lpG\00", align 1
@.str.168 = private unnamed_addr constant [12 x i8] c"\1D1;%d;%ddlG\00", align 1
@.str.169 = private unnamed_addr constant [3 x i8] c"\1D1\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c";%d\00", align 1
@.str.171 = private unnamed_addr constant [4 x i8] c"dlG\00", align 1
@.str.172 = private unnamed_addr constant [8 x i8] c"\1D1;1lpG\00", align 1
@gx_dc_type_pure = external constant %struct.gx_device_color_type_s*, align 8
@.str.173 = private unnamed_addr constant [23 x i8] c"\1D0;0;100spE\1D1;0;%ldccE\00", align 1
@.str.174 = private unnamed_addr constant [19 x i8] c"\1D1;2;3;%d;%d;%dfpE\00", align 1
@.str.175 = private unnamed_addr constant [40 x i8] c"\1D3;2;1;0;0cpE\1D1;2;1;0;0cpE\1D5;2;1;0;0cpE\00", align 1
@.str.176 = private unnamed_addr constant [23 x i8] c"\1D0;0;100spE\1D1;1;%ldccE\00", align 1
@.str.177 = private unnamed_addr constant [32 x i8] c"\1D1;2;3;%d;%d;%dfpE\1D2;2;1;0;0cpE\00", align 1
@.str.178 = private unnamed_addr constant [13 x i8] c"\1D0;%d;%dmvpG\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"\1D0;%d\00", align 1
@.str.180 = private unnamed_addr constant [7 x i8] c";%d;%d\00", align 1
@.str.181 = private unnamed_addr constant [5 x i8] c"lnpG\00", align 1
@.str.182 = private unnamed_addr constant [19 x i8] c";%d;%d;%d;%d;%d;%d\00", align 1
@.str.183 = private unnamed_addr constant [5 x i8] c"bzpG\00", align 1
@.str.184 = private unnamed_addr constant [6 x i8] c"\1DclpG\00", align 1
@.str.185 = private unnamed_addr constant [23 x i8] c"\1D0;%d;%d;%d;%d;0;0rrpG\00", align 1
@.str.186 = private unnamed_addr constant [7 x i8] c"\1D1bgpG\00", align 1
@.str.187 = private unnamed_addr constant [7 x i8] c"\1D0bgpG\00", align 1
@.str.188 = private unnamed_addr constant [15 x i8] c"\1D0;1;%d;%dlnpG\00", align 1
@.str.189 = private unnamed_addr constant [27 x i8] c"\1D0;3;%d;%d;%d;%d;%d;%dbzpG\00", align 1
@.str.190 = private unnamed_addr constant [6 x i8] c"\1DenpG\00", align 1
@.str.191 = private unnamed_addr constant [9 x i8] c"\1D1;2capG\00", align 1
@.str.192 = private unnamed_addr constant [9 x i8] c"\1D0;2drpG\00", align 1
@.str.193 = private unnamed_addr constant [9 x i8] c"\1D0;1drpG\00", align 1
@.str.194 = private unnamed_addr constant [9 x i8] c"\1D0;0drpG\00", align 1
@.str.195 = private unnamed_addr constant [19 x i8] c"\1D3;0;0lwG\1D1;10mlG\0C\00", align 1
@.str.196 = private unnamed_addr constant [30 x i8] c"\1DrhE\1B\01@EJL \0A@EJL EJ \0A\1B\01@EJL \0A\00", align 1
@.str.197 = private unnamed_addr constant [11 x i8] c"EPLModelJP\00", align 1
@.str.198 = private unnamed_addr constant [13 x i8] c"EPLCapFaceUp\00", align 1
@.str.199 = private unnamed_addr constant [17 x i8] c"EPLCapDuplexUnit\00", align 1
@.str.200 = private unnamed_addr constant [20 x i8] c"EPLCapMaxResolution\00", align 1
@.str.201 = private unnamed_addr constant [11 x i8] c"ManualFeed\00", align 1
@.str.202 = private unnamed_addr constant [7 x i8] c"Casset\00", align 1
@.str.203 = private unnamed_addr constant [7 x i8] c"RITOff\00", align 1
@.str.204 = private unnamed_addr constant [8 x i8] c"Collate\00", align 1
@.str.205 = private unnamed_addr constant [13 x i8] c"TonerDensity\00", align 1
@.str.206 = private unnamed_addr constant [10 x i8] c"Landscape\00", align 1
@.str.207 = private unnamed_addr constant [12 x i8] c"TonerSaving\00", align 1
@.str.208 = private unnamed_addr constant [7 x i8] c"Duplex\00", align 1
@.str.209 = private unnamed_addr constant [7 x i8] c"Tumble\00", align 1
@.str.210 = private unnamed_addr constant [7 x i8] c"FaceUp\00", align 1
@.str.211 = private unnamed_addr constant [10 x i8] c"MediaType\00", align 1
@.str.212 = private unnamed_addr constant [6 x i8] c"JobID\00", align 1
@.str.213 = private unnamed_addr constant [9 x i8] c"UserName\00", align 1
@.str.214 = private unnamed_addr constant [9 x i8] c"HostName\00", align 1
@.str.215 = private unnamed_addr constant [9 x i8] c"Document\00", align 1
@.str.216 = private unnamed_addr constant [11 x i8] c"eplComment\00", align 1
@.str.217 = private unnamed_addr constant [3 x i8] c"NM\00", align 1
@.str.218 = private unnamed_addr constant [6 x i8] c"THICK\00", align 1
@.str.219 = private unnamed_addr constant [3 x i8] c"TH\00", align 1
@.str.220 = private unnamed_addr constant [6 x i8] c"TRANS\00", align 1
@.str.221 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.222 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.223 = private unnamed_addr constant [3 x i8] c"LH\00", align 1
@.str.224 = private unnamed_addr constant [3 x i8] c"CT\00", align 1
@.str.225 = private unnamed_addr constant [3 x i8] c"ET\00", align 1
@.str.226 = private unnamed_addr constant [3 x i8] c"HQ\00", align 1
@.str.227 = private unnamed_addr constant [3 x i8] c"UT\00", align 1
@.str.228 = private unnamed_addr constant [3 x i8] c"UM\00", align 1
@.str.229 = private unnamed_addr constant [13 x i8] c"BitsPerPixel\00", align 1
@.str.230 = private unnamed_addr constant [12 x i8] c"\1D1;1;%ldccE\00", align 1
@.str.231 = private unnamed_addr constant [28 x i8] c"\1D2;184wfE\1D3;184wfE\1D5;184wfE\00", align 1
@.str.232 = private unnamed_addr constant [19 x i8] c"\1D3;184wfE\1D5;184wfE\00", align 1
@.str.233 = private unnamed_addr constant [19 x i8] c"\1D3;204wfE\1D5;204wfE\00", align 1
@.str.234 = private unnamed_addr constant [14 x i8] c"\1D5;2;1;0;0cpE\00", align 1
@.str.235 = private unnamed_addr constant [20 x i8] c"escv_copy_mono(buf)\00", align 1
@.str.236 = private unnamed_addr constant [9 x i8] c"\1D%dX\1D%dY\00", align 1
@.str.237 = private unnamed_addr constant [6 x i8] c"\1D0bcI\00", align 1
@.str.238 = private unnamed_addr constant [21 x i8] c"\1D5;%d;%d;%d;%d;%dsrI\00", align 1
@.str.239 = private unnamed_addr constant [31 x i8] c"\1D1;1;1;0;%d;%d;%d;%d;%d;%dscrI\00", align 1
@.str.240 = private unnamed_addr constant [31 x i8] c"\1D2;201;1;%d;%d;%d;%d;%d;%dscrI\00", align 1
@.str.241 = private unnamed_addr constant [19 x i8] c"\1D64;2;2;16;16plr{E\00", align 1
@.str.242 = private unnamed_addr constant [23 x i8] c"escv_write_begin(tmp4)\00", align 1
@.str.243 = private unnamed_addr constant [31 x i8] c"\1D2;203;2;%d;%d;%d;%d;%d;%dscrI\00", align 1
@.str.244 = private unnamed_addr constant [23 x i8] c"\1D1024;4;2;256;256plr{E\00", align 1
@.str.245 = private unnamed_addr constant [22 x i8] c"escv_write_begin(tmp)\00", align 1
@.str.246 = private unnamed_addr constant [31 x i8] c"\1D2;204;4;%d;%d;%d;%d;%d;%dscrI\00", align 1
@.str.247 = private unnamed_addr constant [31 x i8] c"\1D2;102;0;%d;%d;%d;%d;%d;%dscrI\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"escv_write_data(tmp)\00", align 1
@.str.249 = private unnamed_addr constant [18 x i8] c"\1D%d;1;%d;%d;0db{I\00", align 1
@.str.250 = private unnamed_addr constant [10 x i8] c"\1D%d;%du{I\00", align 1
@.str.251 = private unnamed_addr constant [11 x i8] c"\1D%d;%dcu{I\00", align 1
@.str.252 = private unnamed_addr constant [6 x i8] c"\1D1dbI\00", align 1
@.str.253 = private unnamed_addr constant [5 x i8] c"\1DerI\00", align 1
@.str.254 = private unnamed_addr constant [6 x i8] c"\1DecrI\00", align 1
@.str.255 = private unnamed_addr constant [21 x i8] c"escv_copy_color(buf)\00", align 1
@.str.256 = private unnamed_addr constant [20 x i8] c"escv_fill_mask(buf)\00", align 1
@.str.257 = private unnamed_addr constant [19 x i8] c"\1D%d;%d;%d;%d;0db{F\00", align 1
@.str.258 = private unnamed_addr constant [8 x i8] c"\1D%lddbF\00", align 1
@st_vector_image_enum = external constant %struct.gs_memory_struct_type_s, align 8
@.str.259 = private unnamed_addr constant [17 x i8] c"escv_begin_image\00", align 1
@escv_image_enum_procs = internal constant %struct.gx_image_enum_procs_s { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)* @escv_image_plane_data, i32 (%struct.gx_image_enum_common_s*, i32)* @escv_image_end_image, i32 (%struct.gx_image_enum_common_s*)* null, i32 (%struct.gx_image_enum_common_s*, i8*)* null }, align 8
@.str.260 = private unnamed_addr constant [9 x i8] c"\00\00\00\00\FF\FF\FF\FF\00", align 1
@.str.261 = private unnamed_addr constant [21 x i8] c"escv_image_data(buf)\00", align 1

; Function Attrs: nounwind uwtable
define internal %struct.gs_ptr_procs_s* @device_escv_enum_ptrs(%struct.gs_memory_s* %mem, i8* %vptr, i32 %size, i32 %index, %struct.enum_ptr_s* %pep, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #0 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %pep.addr = alloca %struct.enum_ptr_s*, align 8
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store i32 %index, i32* %index.addr, align 4, !tbaa !5
  store %struct.enum_ptr_s* %pep, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = load %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)** getelementptr inbounds (%struct.gs_memory_struct_type_s, %struct.gs_memory_struct_type_s* @st_device_vector, i32 0, i32 4), align 8, !tbaa !7
  %1 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %3 = load i32, i32* %size.addr, align 4, !tbaa !5
  %4 = load i32, i32* %index.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %4, 0
  %5 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %6 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call = call %struct.gs_ptr_procs_s* %0(%struct.gs_memory_s* %1, i8* %2, i32 %3, i32 %sub, %struct.enum_ptr_s* %5, %struct.gs_memory_struct_type_s* @st_device_vector, %struct.gc_state_s* %6) #6
  ret %struct.gs_ptr_procs_s* %call
}

; Function Attrs: nounwind uwtable
define internal void @device_escv_reloc_ptrs(i8* %vptr, i32 %size, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #0 {
entry:
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = load void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)** getelementptr inbounds (%struct.gs_memory_struct_type_s, %struct.gs_memory_struct_type_s* @st_device_vector, i32 0, i32 5), align 8, !tbaa !9
  %1 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %2 = load i32, i32* %size.addr, align 4, !tbaa !5
  %3 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  call void %0(i8* %1, i32 %2, %struct.gs_memory_struct_type_s* @st_device_vector, %struct.gc_state_s* %3) #6
  ret void
}

declare void @gx_device_finalize(%struct.gs_memory_s*, i8*) #1

declare i32 @gx_default_install(%struct.gx_device_s*, %struct.gs_state_s*) #1

declare i32 @gx_default_begin_page(%struct.gx_device_s*, %struct.gs_state_s*) #1

declare i32 @gx_default_end_page(%struct.gx_device_s*, i32, %struct.gs_state_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_open(%struct.gx_device_s* %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %code = alloca i32, align 4
  %width = alloca float, align 4
  %height = alloca float, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast float* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast float* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @escv_range_check(%struct.gx_device_s* %9) #6
  store i32 %call, i32* %code, align 4, !tbaa !5
  %10 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %11, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 3
  %13 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !10
  %14 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %14, i32 0, i32 43
  store %struct.gs_memory_s* %13, %struct.gs_memory_s** %v_memory, align 8, !tbaa !23
  %15 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %15, i32 0, i32 44
  store %struct.gx_device_vector_procs_s* @escv_vector_procs, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !43
  %16 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call1 = call i32 @gdev_vector_open_file_options(%struct.gx_device_vector_s* %16, i32 512, i32 12) #6
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %17 = load i32, i32* %code, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %17, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %18 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %18, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %19 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  call void @gdev_vector_init(%struct.gx_device_vector_s* %19) #6
  %20 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %first_page = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %20, i32 0, i32 82
  store i32 1, i32* %first_page, align 4, !tbaa !44
  %21 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %orientation = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %21, i32 0, i32 79
  %22 = load i32, i32* %orientation, align 4, !tbaa !47
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then.5, label %if.end.37

if.then.5:                                        ; preds = %if.end.4
  %23 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %23, i32 0, i32 67
  %24 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp6 = icmp eq i32 0, %24
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %25 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %width8 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %25, i32 0, i32 13
  %26 = load i32, i32* %width8, align 4, !tbaa !49
  %27 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %height9 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %27, i32 0, i32 14
  %28 = load i32, i32* %height9, align 4, !tbaa !50
  %sub = sub nsw i32 %26, %28
  %conv = sitofp i32 %sub to double
  %29 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %29, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %30 = load float, float* %arrayidx, align 4, !tbaa !51
  %conv10 = fpext float %30 to double
  %mul = fmul double 0x402C58B162C58B17, %conv10
  %div = fdiv double %mul, 7.200000e+01
  %sub11 = fsub double %conv, %div
  %mul12 = fmul double %sub11, 6.000000e+02
  %31 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution13 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %31, i32 0, i32 22
  %arrayidx14 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution13, i32 0, i64 0
  %32 = load float, float* %arrayidx14, align 4, !tbaa !51
  %conv15 = fpext float %32 to double
  %div16 = fdiv double %mul12, %conv15
  %conv17 = fptrunc double %div16 to float
  %33 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Margins = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %33, i32 0, i32 24
  %arrayidx18 = getelementptr inbounds [2 x float], [2 x float]* %Margins, i32 0, i64 1
  store float %conv17, float* %arrayidx18, align 4, !tbaa !51
  br label %if.end.29

if.else:                                          ; preds = %if.then.5
  %34 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %width19 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %34, i32 0, i32 13
  %35 = load i32, i32* %width19, align 4, !tbaa !49
  %36 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %height20 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %36, i32 0, i32 14
  %37 = load i32, i32* %height20, align 4, !tbaa !50
  %sub21 = sub nsw i32 %35, %37
  %mul22 = mul nsw i32 %sub21, 600
  %conv23 = sitofp i32 %mul22 to float
  %38 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution24 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %38, i32 0, i32 22
  %arrayidx25 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution24, i32 0, i64 0
  %39 = load float, float* %arrayidx25, align 4, !tbaa !51
  %div26 = fdiv float %conv23, %39
  %40 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Margins27 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %40, i32 0, i32 24
  %arrayidx28 = getelementptr inbounds [2 x float], [2 x float]* %Margins27, i32 0, i64 1
  store float %div26, float* %arrayidx28, align 4, !tbaa !51
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.7
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 19
  %arrayidx30 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %42 = load float, float* %arrayidx30, align 4, !tbaa !51
  store float %42, float* %width, align 4, !tbaa !51
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize31 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %43, i32 0, i32 19
  %arrayidx32 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize31, i32 0, i64 1
  %44 = load float, float* %arrayidx32, align 4, !tbaa !51
  store float %44, float* %height, align 4, !tbaa !51
  %45 = load float, float* %height, align 4, !tbaa !51
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize33 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %46, i32 0, i32 19
  %arrayidx34 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize33, i32 0, i64 0
  store float %45, float* %arrayidx34, align 4, !tbaa !51
  %47 = load float, float* %width, align 4, !tbaa !51
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize35 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 19
  %arrayidx36 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize35, i32 0, i64 1
  store float %47, float* %arrayidx36, align 4, !tbaa !51
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.29, %if.end.4
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.37, %if.then.3, %if.then
  %49 = bitcast float* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %49) #2
  %50 = bitcast float* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %50) #2
  %51 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  %52 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #2
  %53 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #2
  %54 = load i32, i32* %retval
  ret i32 %54
}

declare void @gx_default_get_initial_matrix(%struct.gx_device_s*, %struct.gs_matrix_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_output_page(%struct.gx_device_s* %dev, i32 %num_copies, i32 %flush) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %num_copies.addr = alloca i32, align 4
  %flush.addr = alloca i32, align 4
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %num_copies, i32* %num_copies.addr, align 4, !tbaa !5
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %7) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %8 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call1 = call i32 @lputs(%struct.stream_s* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.195, i32 0, i32 0)) #6
  %9 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.stream_s, %struct.stream_s* %9, i32 0, i32 14
  %flush2 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %procs, i32 0, i32 3
  %10 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %flush2, align 8, !tbaa !52
  %11 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call3 = call i32 %10(%struct.stream_s* %11) #6
  %12 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %in_page = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %12, i32 0, i32 63
  store i32 0, i32* %in_page, align 4, !tbaa !57
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %first_page = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 82
  store i32 0, i32* %first_page, align 4, !tbaa !44
  %14 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  call void @gdev_vector_reset(%struct.gx_device_vector_s* %14) #6
  %15 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %15) #2
  %16 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #2
  %17 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_close(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct._IO_FILE** %f to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %file = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %4, i32 0, i32 46
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !tbaa !58
  store %struct._IO_FILE* %5, %struct._IO_FILE** %f, align 8, !tbaa !1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !tbaa !1
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.196, i32 0, i32 0)) #6
  %7 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call1 = call i32 @gdev_vector_close_file(%struct.gx_device_vector_s* %7) #6
  %8 = bitcast %struct._IO_FILE** %f to i8*
  call void @llvm.lifetime.end(i64 8, i8* %8) #2
  %9 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #2
  ret i32 0
}

declare i64 @gx_default_gray_map_rgb_color(%struct.gx_device_s*, i16*) #1

declare i32 @gx_default_gray_map_color_rgb(%struct.gx_device_s*, i64, i16*) #1

declare i32 @gdev_vector_fill_rectangle(%struct.gx_device_s*, i32, i32, i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_copy_mono(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i64 %zero, i64 %one) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %zero.addr = alloca i64, align 8
  %one.addr = alloca i64, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %color = alloca %struct.gx_device_color_s, align 8
  %code = alloca i32, align 4
  %c_color = alloca i64, align 8
  %obuf = alloca [128 x i8], align 16
  %depth = alloca i32, align 4
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %dcolor = alloca %struct.gx_device_color_s, align 8
  %cleanup.dest.slot = alloca i32
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %width_bytes = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %buf = alloca i8*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !59
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %zero, i64* %zero.addr, align 8, !tbaa !59
  store i64 %one, i64* %one.addr, align 8, !tbaa !59
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %5, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %7) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_color_s* %color to i8*
  call void @llvm.lifetime.start(i64 656, i8* %8) #2
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %10 = bitcast i64* %c_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  store i64 0, i64* %c_color, align 8, !tbaa !59
  %11 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %11) #2
  %12 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 1, i32* %depth, align 4, !tbaa !5
  %13 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  store %struct.gs_imager_state_s* null, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %14 = load i64, i64* %id.addr, align 8, !tbaa !59
  %cmp = icmp ne i64 %14, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %15 = load i64, i64* %zero.addr, align 8, !tbaa !59
  %cmp1 = icmp eq i64 %15, -1
  br i1 %cmp1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %16 = load i64, i64* %one.addr, align 8, !tbaa !59
  %cmp3 = icmp ne i64 %16, -1
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true.2
  %17 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %17, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.4
  %18 = bitcast %struct.gx_device_color_s* %dcolor to i8*
  call void @llvm.lifetime.start(i64 656, i8* %18) #2
  %19 = load i64, i64* %one.addr, align 8, !tbaa !59
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %dcolor, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %19, i64* %pure, align 8, !tbaa !59
  %20 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** @gx_dc_type_pure, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %dcolor, i32 0, i32 0
  store %struct.gx_device_color_type_s* %20, %struct.gx_device_color_type_s** %type, align 8, !tbaa !60
  %21 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %call6 = call i32 @escv_setfillcolor(%struct.gx_device_vector_s* %21, %struct.gs_imager_state_s* %22, %struct.gx_device_color_s* %dcolor) #6
  %23 = bitcast %struct.gx_device_color_s* %dcolor to i8*
  call void @llvm.lifetime.end(i64 656, i8* %23) #2
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.4, %land.lhs.true.2, %land.lhs.true, %entry
  %24 = load i64, i64* %zero.addr, align 8, !tbaa !59
  %cmp7 = icmp eq i64 %24, -1
  br i1 %cmp7, label %if.then.8, label %if.else.36

if.then.8:                                        ; preds = %if.end
  %25 = load i64, i64* %one.addr, align 8, !tbaa !59
  %cmp9 = icmp eq i64 %25, -1
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.8
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.11:                                        ; preds = %if.then.8
  %26 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %26, i32 0, i32 87
  %27 = load i32, i32* %MaskState, align 4, !tbaa !64
  %cmp12 = icmp ne i32 %27, 1
  br i1 %cmp12, label %if.then.13, label %if.end.35

if.then.13:                                       ; preds = %if.end.11
  %28 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %28, i32 0, i32 67
  %29 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp14 = icmp eq i32 0, %29
  br i1 %cmp14, label %if.then.15, label %if.else.31

if.then.15:                                       ; preds = %if.then.13
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %30 = load i64, i64* %c_color, align 8, !tbaa !59
  %call16 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.230, i32 0, i32 0), i64 %30) #6
  %31 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay17 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call18 = call i32 @lputs(%struct.stream_s* %31, i8* %arraydecay17) #6
  %32 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %32, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %33 = load float, float* %arrayidx, align 4, !tbaa !51
  %cmp19 = fcmp oeq float %33, 1.200000e+03
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.then.15
  %34 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call21 = call i32 @lputs(%struct.stream_s* %34, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  br label %if.end.30

if.else:                                          ; preds = %if.then.15
  %35 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution22 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %35, i32 0, i32 22
  %arrayidx23 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution22, i32 0, i64 0
  %36 = load float, float* %arrayidx23, align 4, !tbaa !51
  %cmp24 = fcmp oeq float %36, 6.000000e+02
  br i1 %cmp24, label %if.then.25, label %if.else.27

if.then.25:                                       ; preds = %if.else
  %37 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call26 = call i32 @lputs(%struct.stream_s* %37, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  br label %if.end.29

if.else.27:                                       ; preds = %if.else
  %38 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call28 = call i32 @lputs(%struct.stream_s* %38, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.27, %if.then.25
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.20
  br label %if.end.33

if.else.31:                                       ; preds = %if.then.13
  %39 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call32 = call i32 @lputs(%struct.stream_s* %39, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.231, i32 0, i32 0)) #6
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.31, %if.end.30
  %40 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState34 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %40, i32 0, i32 87
  store i32 1, i32* %MaskState34, align 4, !tbaa !64
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.33, %if.end.11
  %41 = load i64, i64* %one.addr, align 8, !tbaa !59
  store i64 %41, i64* %c_color, align 8, !tbaa !59
  br label %if.end.82

if.else.36:                                       ; preds = %if.end
  %42 = load i64, i64* %one.addr, align 8, !tbaa !59
  %cmp37 = icmp eq i64 %42, -1
  br i1 %cmp37, label %if.then.38, label %if.else.50

if.then.38:                                       ; preds = %if.else.36
  %43 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState39 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %43, i32 0, i32 87
  %44 = load i32, i32* %MaskState39, align 4, !tbaa !64
  %cmp40 = icmp ne i32 %44, 1
  br i1 %cmp40, label %if.then.41, label %if.end.49

if.then.41:                                       ; preds = %if.then.38
  %45 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode42 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %45, i32 0, i32 67
  %46 = load i32, i32* %colormode42, align 4, !tbaa !48
  %cmp43 = icmp eq i32 0, %46
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.then.41
  br label %if.end.47

if.else.45:                                       ; preds = %if.then.41
  %47 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call46 = call i32 @lputs(%struct.stream_s* %47, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.232, i32 0, i32 0)) #6
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.45, %if.then.44
  %48 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState48 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %48, i32 0, i32 87
  store i32 1, i32* %MaskState48, align 4, !tbaa !64
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.47, %if.then.38
  %49 = load i64, i64* %zero.addr, align 8, !tbaa !59
  store i64 %49, i64* %c_color, align 8, !tbaa !59
  br label %if.end.81

if.else.50:                                       ; preds = %if.else.36
  %50 = load i64, i64* %one.addr, align 8, !tbaa !59
  %51 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %white = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %51, i32 0, i32 66
  %52 = load i64, i64* %white, align 8, !tbaa !65
  %cmp51 = icmp eq i64 %50, %52
  br i1 %cmp51, label %if.then.52, label %if.else.64

if.then.52:                                       ; preds = %if.else.50
  %53 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState53 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %53, i32 0, i32 87
  %54 = load i32, i32* %MaskState53, align 4, !tbaa !64
  %cmp54 = icmp ne i32 %54, 0
  br i1 %cmp54, label %if.then.55, label %if.end.63

if.then.55:                                       ; preds = %if.then.52
  %55 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode56 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %55, i32 0, i32 67
  %56 = load i32, i32* %colormode56, align 4, !tbaa !48
  %cmp57 = icmp eq i32 0, %56
  br i1 %cmp57, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %if.then.55
  br label %if.end.61

if.else.59:                                       ; preds = %if.then.55
  %57 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call60 = call i32 @lputs(%struct.stream_s* %57, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.233, i32 0, i32 0)) #6
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.59, %if.then.58
  %58 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState62 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %58, i32 0, i32 87
  store i32 0, i32* %MaskState62, align 4, !tbaa !64
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.61, %if.then.52
  %59 = load i64, i64* %zero.addr, align 8, !tbaa !59
  store i64 %59, i64* %c_color, align 8, !tbaa !59
  br label %if.end.80

if.else.64:                                       ; preds = %if.else.50
  %60 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState65 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %60, i32 0, i32 87
  %61 = load i32, i32* %MaskState65, align 4, !tbaa !64
  %cmp66 = icmp ne i32 %61, 1
  br i1 %cmp66, label %if.then.67, label %if.end.75

if.then.67:                                       ; preds = %if.else.64
  %62 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode68 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %62, i32 0, i32 67
  %63 = load i32, i32* %colormode68, align 4, !tbaa !48
  %cmp69 = icmp eq i32 0, %63
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %if.then.67
  br label %if.end.73

if.else.71:                                       ; preds = %if.then.67
  %64 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call72 = call i32 @lputs(%struct.stream_s* %64, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.232, i32 0, i32 0)) #6
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.71, %if.then.70
  %65 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState74 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %65, i32 0, i32 87
  store i32 1, i32* %MaskState74, align 4, !tbaa !64
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.73, %if.else.64
  %66 = load i64, i64* %one.addr, align 8, !tbaa !59
  %colors76 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %color, i32 0, i32 1
  %pure77 = bitcast %union._c* %colors76 to i64*
  store i64 %66, i64* %pure77, align 8, !tbaa !59
  %67 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** @gx_dc_type_pure, align 8, !tbaa !1
  %type78 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %color, i32 0, i32 0
  store %struct.gx_device_color_type_s* %67, %struct.gx_device_color_type_s** %type78, align 8, !tbaa !60
  %68 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %69 = bitcast %struct.gx_device_escv_s* %68 to %struct.gx_device_vector_s*
  %70 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %call79 = call i32 @gdev_vector_update_fill_color(%struct.gx_device_vector_s* %69, %struct.gs_imager_state_s* %70, %struct.gx_device_color_s* %color) #6
  store i32 %call79, i32* %code, align 4, !tbaa !5
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.75, %if.end.63
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end.49
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.end.35
  %71 = load i32, i32* %code, align 4, !tbaa !5
  %cmp83 = icmp slt i32 %71, 0
  br i1 %cmp83, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %if.end.82
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.85:                                        ; preds = %if.end.82
  %72 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode86 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %72, i32 0, i32 67
  %73 = load i32, i32* %colormode86, align 4, !tbaa !48
  %cmp87 = icmp eq i32 0, %73
  br i1 %cmp87, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %if.end.85
  br label %if.end.103

if.else.89:                                       ; preds = %if.end.85
  %arraydecay90 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %74 = load i64, i64* %c_color, align 8, !tbaa !59
  %shr = lshr i64 %74, 16
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i8
  %conv91 = zext i8 %conv to i32
  %75 = load i64, i64* %c_color, align 8, !tbaa !59
  %shr92 = lshr i64 %75, 8
  %and93 = and i64 %shr92, 255
  %conv94 = trunc i64 %and93 to i8
  %conv95 = zext i8 %conv94 to i32
  %76 = load i64, i64* %c_color, align 8, !tbaa !59
  %and96 = and i64 %76, 255
  %conv97 = trunc i64 %and96 to i8
  %conv98 = zext i8 %conv97 to i32
  %call99 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay90, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.174, i32 0, i32 0), i32 %conv91, i32 %conv95, i32 %conv98) #6
  %77 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay100 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call101 = call i32 @lputs(%struct.stream_s* %77, i8* %arraydecay100) #6
  %78 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call102 = call i32 @lputs(%struct.stream_s* %78, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.234, i32 0, i32 0)) #6
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.89, %if.then.88
  %79 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %80 = load i32, i32* %depth, align 4, !tbaa !5
  %81 = load i32, i32* %x.addr, align 4, !tbaa !5
  %82 = load i32, i32* %y.addr, align 4, !tbaa !5
  %83 = load i32, i32* %w.addr, align 4, !tbaa !5
  %84 = load i32, i32* %h.addr, align 4, !tbaa !5
  %85 = load i32, i32* %w.addr, align 4, !tbaa !5
  %86 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_begin(%struct.gx_device_s* %79, i32 %80, i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, i32 0) #6
  %87 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %87) #2
  %88 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %88) #2
  %89 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %89) #2
  %90 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %90, 7
  %shr104 = ashr i32 %add, 3
  store i32 %shr104, i32* %width_bytes, align 4, !tbaa !5
  %91 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %91) #2
  %92 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %93 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul = mul i32 %92, %93
  store i32 %mul, i32* %num_bytes, align 4, !tbaa !5
  %94 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %94) #2
  %95 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %95, i32 0, i32 3
  %96 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %96, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %97 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %98 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory105 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %98, i32 0, i32 3
  %99 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory105, align 8, !tbaa !66
  %100 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %call106 = call i8* %97(%struct.gs_memory_s* %99, i32 %100, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.235, i32 0, i32 0)) #6
  store i8* %call106, i8** %buf, align 8, !tbaa !1
  %101 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %rem = srem i32 %101, 8
  %cmp107 = icmp eq i32 %rem, 0
  br i1 %cmp107, label %if.then.109, label %if.else.121

if.then.109:                                      ; preds = %if.end.103
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.109
  %102 = load i32, i32* %i, align 4, !tbaa !5
  %103 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp110 = icmp slt i32 %102, %103
  br i1 %cmp110, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %104 = load i8*, i8** %buf, align 8, !tbaa !1
  %105 = load i32, i32* %i, align 4, !tbaa !5
  %106 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul112 = mul i32 %105, %106
  %idx.ext = zext i32 %mul112 to i64
  %add.ptr = getelementptr inbounds i8, i8* %104, i64 %idx.ext
  %107 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %108 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr113 = ashr i32 %108, 3
  %idx.ext114 = sext i32 %shr113 to i64
  %add.ptr115 = getelementptr inbounds i8, i8* %107, i64 %idx.ext114
  %109 = load i32, i32* %i, align 4, !tbaa !5
  %110 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul116 = mul nsw i32 %109, %110
  %idx.ext117 = sext i32 %mul116 to i64
  %add.ptr118 = getelementptr inbounds i8, i8* %add.ptr115, i64 %idx.ext117
  %111 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %conv119 = zext i32 %111 to i64
  %call120 = call i8* @memcpy(i8* %add.ptr, i8* %add.ptr118, i64 %conv119) #7
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %112 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %112, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.164

if.else.121:                                      ; preds = %if.end.103
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.161, %if.else.121
  %113 = load i32, i32* %i, align 4, !tbaa !5
  %114 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp123 = icmp slt i32 %113, %114
  br i1 %cmp123, label %for.body.125, label %for.end.163

for.body.125:                                     ; preds = %for.cond.122
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.126

for.cond.126:                                     ; preds = %for.inc.158, %for.body.125
  %115 = load i32, i32* %j, align 4, !tbaa !5
  %116 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %cmp127 = icmp ult i32 %115, %116
  br i1 %cmp127, label %for.body.129, label %for.end.160

for.body.129:                                     ; preds = %for.cond.126
  %117 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %118 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr130 = ashr i32 %118, 3
  %idx.ext131 = sext i32 %shr130 to i64
  %add.ptr132 = getelementptr inbounds i8, i8* %117, i64 %idx.ext131
  %119 = load i32, i32* %i, align 4, !tbaa !5
  %120 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul133 = mul nsw i32 %119, %120
  %idx.ext134 = sext i32 %mul133 to i64
  %add.ptr135 = getelementptr inbounds i8, i8* %add.ptr132, i64 %idx.ext134
  %121 = load i32, i32* %j, align 4, !tbaa !5
  %idx.ext136 = sext i32 %121 to i64
  %add.ptr137 = getelementptr inbounds i8, i8* %add.ptr135, i64 %idx.ext136
  %122 = load i8, i8* %add.ptr137, align 1, !tbaa !70
  %conv138 = zext i8 %122 to i32
  %123 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %rem139 = srem i32 %123, 8
  %shl = shl i32 %conv138, %rem139
  %124 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %125 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr140 = ashr i32 %125, 3
  %idx.ext141 = sext i32 %shr140 to i64
  %add.ptr142 = getelementptr inbounds i8, i8* %124, i64 %idx.ext141
  %126 = load i32, i32* %i, align 4, !tbaa !5
  %127 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul143 = mul nsw i32 %126, %127
  %idx.ext144 = sext i32 %mul143 to i64
  %add.ptr145 = getelementptr inbounds i8, i8* %add.ptr142, i64 %idx.ext144
  %128 = load i32, i32* %j, align 4, !tbaa !5
  %idx.ext146 = sext i32 %128 to i64
  %add.ptr147 = getelementptr inbounds i8, i8* %add.ptr145, i64 %idx.ext146
  %add.ptr148 = getelementptr inbounds i8, i8* %add.ptr147, i64 1
  %129 = load i8, i8* %add.ptr148, align 1, !tbaa !70
  %conv149 = zext i8 %129 to i32
  %130 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %rem150 = srem i32 %130, 8
  %sub = sub nsw i32 8, %rem150
  %shr151 = ashr i32 %conv149, %sub
  %or = or i32 %shl, %shr151
  %conv152 = trunc i32 %or to i8
  %131 = load i8*, i8** %buf, align 8, !tbaa !1
  %132 = load i32, i32* %i, align 4, !tbaa !5
  %133 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul153 = mul i32 %132, %133
  %idx.ext154 = zext i32 %mul153 to i64
  %add.ptr155 = getelementptr inbounds i8, i8* %131, i64 %idx.ext154
  %134 = load i32, i32* %j, align 4, !tbaa !5
  %idx.ext156 = sext i32 %134 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %add.ptr155, i64 %idx.ext156
  store i8 %conv152, i8* %add.ptr157, align 1, !tbaa !70
  br label %for.inc.158

for.inc.158:                                      ; preds = %for.body.129
  %135 = load i32, i32* %j, align 4, !tbaa !5
  %inc159 = add nsw i32 %135, 1
  store i32 %inc159, i32* %j, align 4, !tbaa !5
  br label %for.cond.126

for.end.160:                                      ; preds = %for.cond.126
  br label %for.inc.161

for.inc.161:                                      ; preds = %for.end.160
  %136 = load i32, i32* %i, align 4, !tbaa !5
  %inc162 = add nsw i32 %136, 1
  store i32 %inc162, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.end.163:                                      ; preds = %for.cond.122
  br label %if.end.164

if.end.164:                                       ; preds = %for.end.163, %for.end
  %137 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %138 = load i32, i32* %depth, align 4, !tbaa !5
  %139 = load i8*, i8** %buf, align 8, !tbaa !1
  %140 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %141 = load i32, i32* %w.addr, align 4, !tbaa !5
  %142 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_data(%struct.gx_device_s* %137, i32 %138, i8* %139, i32 %140, i32 %141, i32 %142) #6
  %143 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory165 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %143, i32 0, i32 3
  %144 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory165, align 8, !tbaa !66
  %procs166 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %144, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs166, i32 0, i32 2
  %145 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %146 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory167 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %146, i32 0, i32 3
  %147 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory167, align 8, !tbaa !66
  %148 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %145(%struct.gs_memory_s* %147, i8* %148, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.235, i32 0, i32 0)) #6
  %149 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %149) #2
  %150 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %150) #2
  %151 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %151) #2
  %152 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %152) #2
  %153 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %153) #2
  %154 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %155 = load i32, i32* %depth, align 4, !tbaa !5
  call void @escv_write_end(%struct.gx_device_s* %154, i32 %155) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.164, %if.then.84, %if.then.10
  %156 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %156) #2
  %157 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %157) #2
  %158 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %158) #2
  %159 = bitcast i64* %c_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %159) #2
  %160 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %160) #2
  %161 = bitcast %struct.gx_device_color_s* %color to i8*
  call void @llvm.lifetime.end(i64 656, i8* %161) #2
  %162 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %162) #2
  %163 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %163) #2
  %164 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %164) #2
  %165 = load i32, i32* %retval
  ret i32 %165
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_copy_color(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %depth = alloca i32, align 4
  %num_components = alloca i32, align 4
  %width_bytes = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %i = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %buf = alloca i8*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !59
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %5, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %6 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 11
  %depth1 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 3
  %8 = load i16, i16* %depth1, align 2, !tbaa !72
  %conv = zext i16 %8 to i32
  store i32 %conv, i32* %depth, align 4, !tbaa !5
  %9 = bitcast i32* %num_components to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load i32, i32* %depth, align 4, !tbaa !5
  %cmp = icmp slt i32 %10, 24
  %cond = select i1 %cmp, i32 1, i32 3
  store i32 %cond, i32* %num_components, align 4, !tbaa !5
  %11 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = load i32, i32* %w.addr, align 4, !tbaa !5
  %13 = load i32, i32* %num_components, align 4, !tbaa !5
  %mul = mul nsw i32 %12, %13
  store i32 %mul, i32* %width_bytes, align 4, !tbaa !5
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 87
  %15 = load i32, i32* %MaskState, align 4, !tbaa !64
  %cmp3 = icmp ne i32 %15, 0
  br i1 %cmp3, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %16 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %16, i32 0, i32 67
  %17 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp5 = icmp eq i32 0, %17
  br i1 %cmp5, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then
  br label %if.end

if.else:                                          ; preds = %if.then
  %18 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #2
  %19 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %19) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %20 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call8 = call i32 @lputs(%struct.stream_s* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.233, i32 0, i32 0)) #6
  %21 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  %22 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState9 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %22, i32 0, i32 87
  store i32 0, i32* %MaskState9, align 4, !tbaa !64
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %entry
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %24 = load i32, i32* %depth, align 4, !tbaa !5
  %25 = load i32, i32* %x.addr, align 4, !tbaa !5
  %26 = load i32, i32* %y.addr, align 4, !tbaa !5
  %27 = load i32, i32* %w.addr, align 4, !tbaa !5
  %28 = load i32, i32* %h.addr, align 4, !tbaa !5
  %29 = load i32, i32* %w.addr, align 4, !tbaa !5
  %30 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_begin(%struct.gx_device_s* %23, i32 %24, i32 %25, i32 %26, i32 %27, i32 %28, i32 %29, i32 %30, i32 0) #6
  %31 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #2
  %32 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %32) #2
  %33 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %34 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul11 = mul i32 %33, %34
  store i32 %mul11, i32* %num_bytes, align 4, !tbaa !5
  %35 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %35) #2
  %36 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %36, i32 0, i32 3
  %37 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %37, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %38 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %39 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory12 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %39, i32 0, i32 3
  %40 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory12, align 8, !tbaa !66
  %41 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %call13 = call i8* %38(%struct.gs_memory_s* %40, i32 %41, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.255, i32 0, i32 0)) #6
  store i8* %call13, i8** %buf, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %42 = load i32, i32* %i, align 4, !tbaa !5
  %43 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp14 = icmp slt i32 %42, %43
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %44 = load i8*, i8** %buf, align 8, !tbaa !1
  %45 = load i32, i32* %i, align 4, !tbaa !5
  %46 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul16 = mul i32 %45, %46
  %idx.ext = zext i32 %mul16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 %idx.ext
  %47 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %48 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %49 = load i32, i32* %depth, align 4, !tbaa !5
  %mul17 = mul nsw i32 %48, %49
  %shr = ashr i32 %mul17, 3
  %idx.ext18 = sext i32 %shr to i64
  %add.ptr19 = getelementptr inbounds i8, i8* %47, i64 %idx.ext18
  %50 = load i32, i32* %i, align 4, !tbaa !5
  %51 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul20 = mul nsw i32 %50, %51
  %idx.ext21 = sext i32 %mul20 to i64
  %add.ptr22 = getelementptr inbounds i8, i8* %add.ptr19, i64 %idx.ext21
  %52 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %conv23 = zext i32 %52 to i64
  %call24 = call i8* @memcpy(i8* %add.ptr, i8* %add.ptr22, i64 %conv23) #7
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %53 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %55 = load i32, i32* %depth, align 4, !tbaa !5
  %56 = load i8*, i8** %buf, align 8, !tbaa !1
  %57 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %58 = load i32, i32* %w.addr, align 4, !tbaa !5
  %59 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_data(%struct.gx_device_s* %54, i32 %55, i8* %56, i32 %57, i32 %58, i32 %59) #6
  %60 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory25 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %60, i32 0, i32 3
  %61 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory25, align 8, !tbaa !66
  %procs26 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %61, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs26, i32 0, i32 2
  %62 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %63 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory27 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %63, i32 0, i32 3
  %64 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory27, align 8, !tbaa !66
  %65 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %62(%struct.gs_memory_s* %64, i8* %65, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.255, i32 0, i32 0)) #6
  %66 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #2
  %67 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %67) #2
  %68 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %68) #2
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %70 = load i32, i32* %depth, align 4, !tbaa !5
  call void @escv_write_end(%struct.gx_device_s* %69, i32 %70) #6
  %71 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %71) #2
  %72 = bitcast i32* %num_components to i8*
  call void @llvm.lifetime.end(i64 4, i8* %72) #2
  %73 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #2
  %74 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %74) #2
  %75 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_get_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %code = alloca i32, align 4
  %ncode = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %ncode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @gdev_vector_get_params(%struct.gx_device_s* %5, %struct.gs_param_list_s* %6) #6
  store i32 %call, i32* %code, align 4, !tbaa !5
  %7 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %8, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %10 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %modelJP = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %10, i32 0, i32 120
  %call1 = call i32 @param_write_bool(%struct.gs_param_list_s* %9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i32 0, i32 0), i32* %modelJP) #6
  store i32 %call1, i32* %ncode, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %11 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %11, i32* %code, align 4, !tbaa !5
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %12 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capFaceUp = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 121
  %call5 = call i32 @param_write_bool(%struct.gs_param_list_s* %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.198, i32 0, i32 0), i32* %capFaceUp) #6
  store i32 %call5, i32* %ncode, align 4, !tbaa !5
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  %14 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %14, i32* %code, align 4, !tbaa !5
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.4
  %15 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %16 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capDuplexUnit = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %16, i32 0, i32 122
  %call9 = call i32 @param_write_bool(%struct.gs_param_list_s* %15, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.199, i32 0, i32 0), i32* %capDuplexUnit) #6
  store i32 %call9, i32* %ncode, align 4, !tbaa !5
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %17 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %17, i32* %code, align 4, !tbaa !5
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.8
  %18 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %19 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capMaxResolution = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %19, i32 0, i32 123
  %call13 = call i32 @param_write_int(%struct.gs_param_list_s* %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.200, i32 0, i32 0), i32* %capMaxResolution) #6
  store i32 %call13, i32* %ncode, align 4, !tbaa !5
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %20 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %20, i32* %code, align 4, !tbaa !5
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.12
  %21 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %22 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %manualFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %22, i32 0, i32 68
  %call17 = call i32 @param_write_bool(%struct.gs_param_list_s* %21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.201, i32 0, i32 0), i32* %manualFeed) #6
  store i32 %call17, i32* %ncode, align 4, !tbaa !5
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  %23 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %23, i32* %code, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.16
  %24 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %25 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cassetFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %25, i32 0, i32 69
  %call21 = call i32 @param_write_int(%struct.gs_param_list_s* %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.202, i32 0, i32 0), i32* %cassetFeed) #6
  store i32 %call21, i32* %ncode, align 4, !tbaa !5
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  %26 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %26, i32* %code, align 4, !tbaa !5
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.end.20
  %27 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %28 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %RITOff = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %28, i32 0, i32 70
  %call25 = call i32 @param_write_bool(%struct.gs_param_list_s* %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0), i32* %RITOff) #6
  store i32 %call25, i32* %ncode, align 4, !tbaa !5
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  %29 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %29, i32* %code, align 4, !tbaa !5
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %if.end.24
  %30 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %31 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Collate = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %31, i32 0, i32 71
  %call29 = call i32 @param_write_bool(%struct.gs_param_list_s* %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.204, i32 0, i32 0), i32* %Collate) #6
  store i32 %call29, i32* %ncode, align 4, !tbaa !5
  %cmp30 = icmp slt i32 %call29, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.28
  %32 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %32, i32* %code, align 4, !tbaa !5
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %if.end.28
  %33 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %34 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_density = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %34, i32 0, i32 72
  %call33 = call i32 @param_write_int(%struct.gs_param_list_s* %33, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205, i32 0, i32 0), i32* %toner_density) #6
  store i32 %call33, i32* %ncode, align 4, !tbaa !5
  %cmp34 = icmp slt i32 %call33, 0
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.32
  %35 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %35, i32* %code, align 4, !tbaa !5
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %if.end.32
  %36 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %37 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %orientation = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %37, i32 0, i32 79
  %call37 = call i32 @param_write_bool(%struct.gs_param_list_s* %36, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.206, i32 0, i32 0), i32* %orientation) #6
  store i32 %call37, i32* %ncode, align 4, !tbaa !5
  %cmp38 = icmp slt i32 %call37, 0
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.36
  %38 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %38, i32* %code, align 4, !tbaa !5
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %if.end.36
  %39 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %40 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_saving = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %40, i32 0, i32 73
  %call41 = call i32 @param_write_bool(%struct.gs_param_list_s* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207, i32 0, i32 0), i32* %toner_saving) #6
  %cmp42 = icmp slt i32 %call41, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.40
  %41 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %41, i32* %code, align 4, !tbaa !5
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.43, %if.end.40
  %42 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %43 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Duplex = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %43, i32 0, i32 83
  %call45 = call i32 @param_write_bool(%struct.gs_param_list_s* %42, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.208, i32 0, i32 0), i32* %Duplex) #6
  store i32 %call45, i32* %ncode, align 4, !tbaa !5
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  %44 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %44, i32* %code, align 4, !tbaa !5
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.47, %if.end.44
  %45 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %46 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Tumble = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %46, i32 0, i32 84
  %call49 = call i32 @param_write_bool(%struct.gs_param_list_s* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.209, i32 0, i32 0), i32* %Tumble) #6
  store i32 %call49, i32* %ncode, align 4, !tbaa !5
  %cmp50 = icmp slt i32 %call49, 0
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.end.48
  %47 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %47, i32* %code, align 4, !tbaa !5
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %if.end.48
  %48 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %49 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %faceup = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %49, i32 0, i32 80
  %call53 = call i32 @param_write_bool(%struct.gs_param_list_s* %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.210, i32 0, i32 0), i32* %faceup) #6
  store i32 %call53, i32* %ncode, align 4, !tbaa !5
  %cmp54 = icmp slt i32 %call53, 0
  br i1 %cmp54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.end.52
  %50 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %50, i32* %code, align 4, !tbaa !5
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %if.end.52
  %51 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %52 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %52, i32 0, i32 81
  %call57 = call i32 @param_write_int(%struct.gs_param_list_s* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i32 0, i32 0), i32* %MediaType) #6
  store i32 %call57, i32* %ncode, align 4, !tbaa !5
  %cmp58 = icmp slt i32 %call57, 0
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.56
  %53 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %53, i32* %code, align 4, !tbaa !5
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.59, %if.end.56
  %54 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %55 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %gpsJobID = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %55, i32 0, i32 115
  %56 = load i32, i32* %code, align 4, !tbaa !5
  %call61 = call i32 @escv_get_str_param(%struct.gs_param_list_s* %54, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), %struct.gs_param_string_s* %gpsJobID, i32 %56) #6
  store i32 %call61, i32* %code, align 4, !tbaa !5
  %57 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %58 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %gpsUserName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %58, i32 0, i32 116
  %59 = load i32, i32* %code, align 4, !tbaa !5
  %call62 = call i32 @escv_get_str_param(%struct.gs_param_list_s* %57, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.213, i32 0, i32 0), %struct.gs_param_string_s* %gpsUserName, i32 %59) #6
  store i32 %call62, i32* %code, align 4, !tbaa !5
  %60 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %61 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %gpsHostName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %61, i32 0, i32 117
  %62 = load i32, i32* %code, align 4, !tbaa !5
  %call63 = call i32 @escv_get_str_param(%struct.gs_param_list_s* %60, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.214, i32 0, i32 0), %struct.gs_param_string_s* %gpsHostName, i32 %62) #6
  store i32 %call63, i32* %code, align 4, !tbaa !5
  %63 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %64 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %gpsDocument = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %64, i32 0, i32 118
  %65 = load i32, i32* %code, align 4, !tbaa !5
  %call64 = call i32 @escv_get_str_param(%struct.gs_param_list_s* %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), %struct.gs_param_string_s* %gpsDocument, i32 %65) #6
  store i32 %call64, i32* %code, align 4, !tbaa !5
  %66 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %67 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %gpsComment = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %67, i32 0, i32 119
  %68 = load i32, i32* %code, align 4, !tbaa !5
  %call65 = call i32 @escv_get_str_param(%struct.gs_param_list_s* %66, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.216, i32 0, i32 0), %struct.gs_param_string_s* %gpsComment, i32 %68) #6
  store i32 %call65, i32* %code, align 4, !tbaa !5
  %69 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %69, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.60, %if.then
  %70 = bitcast i32* %ncode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %70) #2
  %71 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %71) #2
  %72 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %72) #2
  %73 = load i32, i32* %retval
  ret i32 %73
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_put_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %ecode = alloca i32, align 4
  %code = alloca i32, align 4
  %param_name = alloca i8*, align 8
  %pmedia = alloca %struct.gs_param_string_s, align 8
  %mf = alloca i32, align 4
  %cass = alloca i32, align 4
  %tum = alloca i32, align 4
  %collate = alloca i32, align 4
  %toner_density = alloca i32, align 4
  %toner_saving = alloca i32, align 4
  %landscape = alloca i32, align 4
  %faceup = alloca i32, align 4
  %duplex = alloca i32, align 4
  %RITOff = alloca i32, align 4
  %old_bpp = alloca i32, align 4
  %bpp = alloca i32, align 4
  %modelJP = alloca i32, align 4
  %capFaceUp = alloca i32, align 4
  %capDuplexUnit = alloca i32, align 4
  %capMaxResolution = alloca i32, align 4
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp130 = alloca i32, align 4
  %__s1_len138 = alloca i64, align 8
  %__s2_len140 = alloca i64, align 8
  %tmp141 = alloca i32, align 4
  %__s1148 = alloca i8*, align 8
  %__result151 = alloca i32, align 4
  %tmp189 = alloca i32, align 4
  %__s1_len199 = alloca i64, align 8
  %__s2_len201 = alloca i64, align 8
  %tmp202 = alloca i32, align 4
  %__s1209 = alloca i8*, align 8
  %__result212 = alloca i32, align 4
  %tmp250 = alloca i32, align 4
  %__s1_len262 = alloca i64, align 8
  %__s2_len264 = alloca i64, align 8
  %tmp265 = alloca i32, align 4
  %__s1272 = alloca i8*, align 8
  %__result275 = alloca i32, align 4
  %tmp313 = alloca i32, align 4
  %__s1_len323 = alloca i64, align 8
  %__s2_len325 = alloca i64, align 8
  %tmp326 = alloca i32, align 4
  %__s1333 = alloca i8*, align 8
  %__result336 = alloca i32, align 4
  %tmp374 = alloca i32, align 4
  %__s1_len386 = alloca i64, align 8
  %__s2_len388 = alloca i64, align 8
  %tmp389 = alloca i32, align 4
  %__s1396 = alloca i8*, align 8
  %__result399 = alloca i32, align 4
  %tmp437 = alloca i32, align 4
  %__s1_len449 = alloca i64, align 8
  %__s2_len451 = alloca i64, align 8
  %tmp452 = alloca i32, align 4
  %__s1459 = alloca i8*, align 8
  %__result462 = alloca i32, align 4
  %tmp500 = alloca i32, align 4
  %__s1_len512 = alloca i64, align 8
  %__s2_len514 = alloca i64, align 8
  %tmp515 = alloca i32, align 4
  %__s1522 = alloca i8*, align 8
  %__result525 = alloca i32, align 4
  %tmp563 = alloca i32, align 4
  %__s1_len575 = alloca i64, align 8
  %__s2_len577 = alloca i64, align 8
  %tmp578 = alloca i32, align 4
  %__s1585 = alloca i8*, align 8
  %__result588 = alloca i32, align 4
  %tmp626 = alloca i32, align 4
  %__s1_len638 = alloca i64, align 8
  %__s2_len640 = alloca i64, align 8
  %tmp641 = alloca i32, align 4
  %__s1648 = alloca i8*, align 8
  %__result651 = alloca i32, align 4
  %tmp689 = alloca i32, align 4
  %__s1_len701 = alloca i64, align 8
  %__s2_len703 = alloca i64, align 8
  %tmp704 = alloca i32, align 4
  %__s1711 = alloca i8*, align 8
  %__result714 = alloca i32, align 4
  %tmp752 = alloca i32, align 4
  %__s1_len764 = alloca i64, align 8
  %__s2_len766 = alloca i64, align 8
  %tmp767 = alloca i32, align 4
  %__s1774 = alloca i8*, align 8
  %__result777 = alloca i32, align 4
  %tmp815 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i8** %param_name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast %struct.gs_param_string_s* %pmedia to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast i32* %mf to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %manualFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 68
  %9 = load i32, i32* %manualFeed, align 4, !tbaa !73
  store i32 %9, i32* %mf, align 4, !tbaa !5
  %10 = bitcast i32* %cass to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cassetFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %11, i32 0, i32 69
  %12 = load i32, i32* %cassetFeed, align 4, !tbaa !74
  store i32 %12, i32* %cass, align 4, !tbaa !5
  %13 = bitcast i32* %tum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Tumble = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 84
  %15 = load i32, i32* %Tumble, align 4, !tbaa !75
  store i32 %15, i32* %tum, align 4, !tbaa !5
  %16 = bitcast i32* %collate to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  %17 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Collate = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %17, i32 0, i32 71
  %18 = load i32, i32* %Collate, align 4, !tbaa !76
  store i32 %18, i32* %collate, align 4, !tbaa !5
  %19 = bitcast i32* %toner_density to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #2
  %20 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_density1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %20, i32 0, i32 72
  %21 = load i32, i32* %toner_density1, align 4, !tbaa !77
  store i32 %21, i32* %toner_density, align 4, !tbaa !5
  %22 = bitcast i32* %toner_saving to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #2
  %23 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_saving2 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %23, i32 0, i32 73
  %24 = load i32, i32* %toner_saving2, align 4, !tbaa !78
  store i32 %24, i32* %toner_saving, align 4, !tbaa !5
  %25 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %25) #2
  %26 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %orientation = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %26, i32 0, i32 79
  %27 = load i32, i32* %orientation, align 4, !tbaa !47
  store i32 %27, i32* %landscape, align 4, !tbaa !5
  %28 = bitcast i32* %faceup to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %faceup3 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %29, i32 0, i32 80
  %30 = load i32, i32* %faceup3, align 4, !tbaa !79
  store i32 %30, i32* %faceup, align 4, !tbaa !5
  %31 = bitcast i32* %duplex to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #2
  %32 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Duplex = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %32, i32 0, i32 83
  %33 = load i32, i32* %Duplex, align 4, !tbaa !80
  store i32 %33, i32* %duplex, align 4, !tbaa !5
  %34 = bitcast i32* %RITOff to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #2
  %35 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %RITOff4 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %35, i32 0, i32 70
  %36 = load i32, i32* %RITOff4, align 4, !tbaa !81
  store i32 %36, i32* %RITOff, align 4, !tbaa !5
  %37 = bitcast i32* %old_bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %37) #2
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %38, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 3
  %39 = load i16, i16* %depth, align 2, !tbaa !72
  %conv = zext i16 %39 to i32
  store i32 %conv, i32* %old_bpp, align 4, !tbaa !5
  %40 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %40) #2
  store i32 0, i32* %bpp, align 4, !tbaa !5
  %41 = bitcast i32* %modelJP to i8*
  call void @llvm.lifetime.start(i64 4, i8* %41) #2
  store i32 0, i32* %modelJP, align 4, !tbaa !5
  %42 = bitcast i32* %capFaceUp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %42) #2
  store i32 0, i32* %capFaceUp, align 4, !tbaa !5
  %43 = bitcast i32* %capDuplexUnit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #2
  store i32 0, i32* %capDuplexUnit, align 4, !tbaa !5
  %44 = bitcast i32* %capMaxResolution to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #2
  store i32 0, i32* %capMaxResolution, align 4, !tbaa !5
  %45 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %46 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %JobID = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %46, i32 0, i32 110
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %JobID, i32 0, i32 0
  %47 = load i32, i32* %ecode, align 4, !tbaa !5
  %call = call i32 @escv_set_str_param(%struct.gs_param_list_s* %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* %arraydecay, i32 255, i32 %47) #6
  store i32 %call, i32* %ecode, align 4, !tbaa !5
  %48 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %49 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %UserName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %49, i32 0, i32 111
  %arraydecay5 = getelementptr inbounds [256 x i8], [256 x i8]* %UserName, i32 0, i32 0
  %50 = load i32, i32* %ecode, align 4, !tbaa !5
  %call6 = call i32 @escv_set_str_param(%struct.gs_param_list_s* %48, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.213, i32 0, i32 0), i8* %arraydecay5, i32 255, i32 %50) #6
  store i32 %call6, i32* %ecode, align 4, !tbaa !5
  %51 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %52 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %HostName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %52, i32 0, i32 112
  %arraydecay7 = getelementptr inbounds [256 x i8], [256 x i8]* %HostName, i32 0, i32 0
  %53 = load i32, i32* %ecode, align 4, !tbaa !5
  %call8 = call i32 @escv_set_str_param(%struct.gs_param_list_s* %51, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.214, i32 0, i32 0), i8* %arraydecay7, i32 255, i32 %53) #6
  store i32 %call8, i32* %ecode, align 4, !tbaa !5
  %54 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %55 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Document = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %55, i32 0, i32 113
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %Document, i32 0, i32 0
  %56 = load i32, i32* %ecode, align 4, !tbaa !5
  %call10 = call i32 @escv_set_str_param(%struct.gs_param_list_s* %54, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), i8* %arraydecay9, i32 255, i32 %56) #6
  store i32 %call10, i32* %ecode, align 4, !tbaa !5
  %57 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %58 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Comment = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %58, i32 0, i32 114
  %arraydecay11 = getelementptr inbounds [256 x i8], [256 x i8]* %Comment, i32 0, i32 0
  %59 = load i32, i32* %ecode, align 4, !tbaa !5
  %call12 = call i32 @escv_set_str_param(%struct.gs_param_list_s* %57, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.216, i32 0, i32 0), i8* %arraydecay11, i32 255, i32 %59) #6
  store i32 %call12, i32* %ecode, align 4, !tbaa !5
  %60 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %modelJP13 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %60, i32 0, i32 120
  %61 = load i32, i32* %modelJP13, align 4, !tbaa !82
  store i32 %61, i32* %modelJP, align 4, !tbaa !5
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %62 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %63 = load i8*, i8** %param_name, align 8, !tbaa !1
  %call14 = call i32 @param_read_bool(%struct.gs_param_list_s* %62, i8* %63, i32* %modelJP) #6
  store i32 %call14, i32* %code, align 4, !tbaa !5
  %64 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %64, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %65 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %65, i32* %ecode, align 4, !tbaa !5
  %66 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %66, i32 0, i32 0
  %67 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs, align 8, !tbaa !83
  %signal_error = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %67, i32 0, i32 7
  %68 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error, align 8, !tbaa !85
  %69 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %70 = load i8*, i8** %param_name, align 8, !tbaa !1
  %71 = load i32, i32* %ecode, align 4, !tbaa !5
  %call16 = call i32 %68(%struct.gs_param_list_s* %69, i8* %70, i32 %71) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %72 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capFaceUp17 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %72, i32 0, i32 121
  %73 = load i32, i32* %capFaceUp17, align 4, !tbaa !87
  store i32 %73, i32* %capFaceUp, align 4, !tbaa !5
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.198, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %74 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %75 = load i8*, i8** %param_name, align 8, !tbaa !1
  %call18 = call i32 @param_read_bool(%struct.gs_param_list_s* %74, i8* %75, i32* %capFaceUp) #6
  store i32 %call18, i32* %code, align 4, !tbaa !5
  %76 = load i32, i32* %code, align 4, !tbaa !5
  %cmp19 = icmp slt i32 %76, 0
  br i1 %cmp19, label %if.then.21, label %if.end.25

if.then.21:                                       ; preds = %if.end
  %77 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %77, i32* %ecode, align 4, !tbaa !5
  %78 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs22 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %78, i32 0, i32 0
  %79 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs22, align 8, !tbaa !83
  %signal_error23 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %79, i32 0, i32 7
  %80 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error23, align 8, !tbaa !85
  %81 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %82 = load i8*, i8** %param_name, align 8, !tbaa !1
  %83 = load i32, i32* %ecode, align 4, !tbaa !5
  %call24 = call i32 %80(%struct.gs_param_list_s* %81, i8* %82, i32 %83) #6
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.21, %if.end
  %84 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capDuplexUnit26 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %84, i32 0, i32 122
  %85 = load i32, i32* %capDuplexUnit26, align 4, !tbaa !88
  store i32 %85, i32* %capDuplexUnit, align 4, !tbaa !5
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.199, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %86 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %87 = load i8*, i8** %param_name, align 8, !tbaa !1
  %call27 = call i32 @param_read_bool(%struct.gs_param_list_s* %86, i8* %87, i32* %capDuplexUnit) #6
  store i32 %call27, i32* %code, align 4, !tbaa !5
  %88 = load i32, i32* %code, align 4, !tbaa !5
  %cmp28 = icmp slt i32 %88, 0
  br i1 %cmp28, label %if.then.30, label %if.end.34

if.then.30:                                       ; preds = %if.end.25
  %89 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %89, i32* %ecode, align 4, !tbaa !5
  %90 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs31 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %90, i32 0, i32 0
  %91 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs31, align 8, !tbaa !83
  %signal_error32 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %91, i32 0, i32 7
  %92 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error32, align 8, !tbaa !85
  %93 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %94 = load i8*, i8** %param_name, align 8, !tbaa !1
  %95 = load i32, i32* %ecode, align 4, !tbaa !5
  %call33 = call i32 %92(%struct.gs_param_list_s* %93, i8* %94, i32 %95) #6
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.30, %if.end.25
  %96 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capMaxResolution35 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %96, i32 0, i32 123
  %97 = load i32, i32* %capMaxResolution35, align 4, !tbaa !89
  store i32 %97, i32* %capMaxResolution, align 4, !tbaa !5
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.200, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %98 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %99 = load i8*, i8** %param_name, align 8, !tbaa !1
  %call36 = call i32 @param_read_int(%struct.gs_param_list_s* %98, i8* %99, i32* %capMaxResolution) #6
  store i32 %call36, i32* %code, align 4, !tbaa !5
  %100 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %100, label %sw.default [
    i32 1, label %sw.epilog
    i32 0, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end.34
  %101 = load i32, i32* %capMaxResolution, align 4, !tbaa !5
  %cmp37 = icmp ne i32 600, %101
  br i1 %cmp37, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %sw.bb
  %102 = load i32, i32* %capMaxResolution, align 4, !tbaa !5
  %cmp39 = icmp ne i32 1200, %102
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %land.lhs.true
  store i32 -13, i32* %ecode, align 4, !tbaa !5
  br label %maxrese

if.end.42:                                        ; preds = %land.lhs.true, %sw.bb
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.34
  %103 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %103, i32* %ecode, align 4, !tbaa !5
  br label %maxrese

maxrese:                                          ; preds = %sw.default, %if.then.41
  %104 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs43 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %104, i32 0, i32 0
  %105 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs43, align 8, !tbaa !83
  %signal_error44 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %105, i32 0, i32 7
  %106 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error44, align 8, !tbaa !85
  %107 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %108 = load i8*, i8** %param_name, align 8, !tbaa !1
  %109 = load i32, i32* %ecode, align 4, !tbaa !5
  %call45 = call i32 %106(%struct.gs_param_list_s* %107, i8* %108, i32 %109) #6
  br label %sw.epilog

sw.epilog:                                        ; preds = %maxrese, %if.end.42, %if.end.34
  %110 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.201, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call46 = call i32 @param_read_bool(%struct.gs_param_list_s* %110, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.201, i32 0, i32 0), i32* %mf) #6
  store i32 %call46, i32* %code, align 4, !tbaa !5
  %cmp47 = icmp slt i32 %call46, 0
  br i1 %cmp47, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %sw.epilog
  %111 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs50 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %111, i32 0, i32 0
  %112 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs50, align 8, !tbaa !83
  %signal_error51 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %112, i32 0, i32 7
  %113 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error51, align 8, !tbaa !85
  %114 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %115 = load i8*, i8** %param_name, align 8, !tbaa !1
  %116 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %116, i32* %ecode, align 4, !tbaa !5
  %call52 = call i32 %113(%struct.gs_param_list_s* %114, i8* %115, i32 %116) #6
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %sw.epilog
  %117 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.202, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call54 = call i32 @param_read_int(%struct.gs_param_list_s* %117, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.202, i32 0, i32 0), i32* %cass) #6
  store i32 %call54, i32* %code, align 4, !tbaa !5
  switch i32 %call54, label %sw.default.62 [
    i32 0, label %sw.bb.55
    i32 1, label %sw.epilog.66
  ]

sw.bb.55:                                         ; preds = %if.end.53
  %118 = load i32, i32* %cass, align 4, !tbaa !5
  %cmp56 = icmp slt i32 %118, -1
  br i1 %cmp56, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.55
  %119 = load i32, i32* %cass, align 4, !tbaa !5
  %cmp58 = icmp sgt i32 %119, 15
  br i1 %cmp58, label %if.then.60, label %if.else

if.then.60:                                       ; preds = %lor.lhs.false, %sw.bb.55
  store i32 -13, i32* %ecode, align 4, !tbaa !5
  br label %if.end.61

if.else:                                          ; preds = %lor.lhs.false
  br label %sw.epilog.66

if.end.61:                                        ; preds = %if.then.60
  br label %casse

sw.default.62:                                    ; preds = %if.end.53
  %120 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %120, i32* %ecode, align 4, !tbaa !5
  br label %casse

casse:                                            ; preds = %sw.default.62, %if.end.61
  %121 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs63 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %121, i32 0, i32 0
  %122 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs63, align 8, !tbaa !83
  %signal_error64 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %122, i32 0, i32 7
  %123 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error64, align 8, !tbaa !85
  %124 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %125 = load i8*, i8** %param_name, align 8, !tbaa !1
  %126 = load i32, i32* %ecode, align 4, !tbaa !5
  %call65 = call i32 %123(%struct.gs_param_list_s* %124, i8* %125, i32 %126) #6
  br label %sw.epilog.66

sw.epilog.66:                                     ; preds = %casse, %if.end.53, %if.else
  %127 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.204, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call67 = call i32 @param_read_bool(%struct.gs_param_list_s* %127, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.204, i32 0, i32 0), i32* %collate) #6
  store i32 %call67, i32* %code, align 4, !tbaa !5
  %cmp68 = icmp slt i32 %call67, 0
  br i1 %cmp68, label %if.then.70, label %if.end.74

if.then.70:                                       ; preds = %sw.epilog.66
  %128 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs71 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %128, i32 0, i32 0
  %129 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs71, align 8, !tbaa !83
  %signal_error72 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %129, i32 0, i32 7
  %130 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error72, align 8, !tbaa !85
  %131 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %132 = load i8*, i8** %param_name, align 8, !tbaa !1
  %133 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %133, i32* %ecode, align 4, !tbaa !5
  %call73 = call i32 %130(%struct.gs_param_list_s* %131, i8* %132, i32 %133) #6
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.70, %sw.epilog.66
  %134 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call75 = call i32 @param_read_bool(%struct.gs_param_list_s* %134, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0), i32* %RITOff) #6
  store i32 %call75, i32* %code, align 4, !tbaa !5
  %cmp76 = icmp slt i32 %call75, 0
  br i1 %cmp76, label %if.then.78, label %if.end.82

if.then.78:                                       ; preds = %if.end.74
  %135 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs79 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %135, i32 0, i32 0
  %136 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs79, align 8, !tbaa !83
  %signal_error80 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %136, i32 0, i32 7
  %137 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error80, align 8, !tbaa !85
  %138 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %139 = load i8*, i8** %param_name, align 8, !tbaa !1
  %140 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %140, i32* %ecode, align 4, !tbaa !5
  %call81 = call i32 %137(%struct.gs_param_list_s* %138, i8* %139, i32 %140) #6
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.78, %if.end.74
  %141 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call83 = call i32 @param_read_string(%struct.gs_param_list_s* %141, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i32 0, i32 0), %struct.gs_param_string_s* %pmedia) #6
  store i32 %call83, i32* %code, align 4, !tbaa !5
  switch i32 %call83, label %sw.default.837 [
    i32 0, label %sw.bb.84
    i32 1, label %sw.bb.841
  ]

sw.bb.84:                                         ; preds = %if.end.82
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 1
  %142 = load i32, i32* %size, align 4, !tbaa !90
  %cmp85 = icmp ugt i32 %142, 32
  br i1 %cmp85, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %sw.bb.84
  store i32 -13, i32* %ecode, align 4, !tbaa !5
  br label %pmediae

if.else.88:                                       ; preds = %sw.bb.84
  %143 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %143) #2
  %144 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %144) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.217 to i64)), i64 1), label %land.lhs.true.89, label %cond.false

land.lhs.true.89:                                 ; preds = %if.else.88
  %call90 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i32 0)) #8
  store i64 %call90, i64* %__s2_len, align 8, !tbaa !59
  %145 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp91 = icmp ult i64 %145, 4
  br i1 %cmp91, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.89
  %146 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %146) #2
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %147 = load i8*, i8** %data, align 8, !tbaa !91
  store i8* %147, i8** %__s1, align 8, !tbaa !1
  %148 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %148) #2
  %149 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %149, i64 0
  %150 = load i8, i8* %arrayidx, align 1, !tbaa !70
  %conv95 = zext i8 %150 to i32
  %151 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i32 0), align 1, !tbaa !70
  %conv96 = zext i8 %151 to i32
  %sub = sub nsw i32 %conv95, %conv96
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %152 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp97 = icmp ugt i64 %152, 0
  br i1 %cmp97, label %land.lhs.true.99, label %if.end.129

land.lhs.true.99:                                 ; preds = %cond.true
  %153 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp100 = icmp eq i32 %153, 0
  br i1 %cmp100, label %if.then.102, label %if.end.129

if.then.102:                                      ; preds = %land.lhs.true.99
  %154 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx103 = getelementptr inbounds i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx103, align 1, !tbaa !70
  %conv104 = zext i8 %155 to i32
  %156 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i64 1), align 1, !tbaa !70
  %conv105 = zext i8 %156 to i32
  %sub106 = sub nsw i32 %conv104, %conv105
  store i32 %sub106, i32* %__result, align 4, !tbaa !5
  %157 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp107 = icmp ugt i64 %157, 1
  br i1 %cmp107, label %land.lhs.true.109, label %if.end.128

land.lhs.true.109:                                ; preds = %if.then.102
  %158 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp110 = icmp eq i32 %158, 0
  br i1 %cmp110, label %if.then.112, label %if.end.128

if.then.112:                                      ; preds = %land.lhs.true.109
  %159 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx113 = getelementptr inbounds i8, i8* %159, i64 2
  %160 = load i8, i8* %arrayidx113, align 1, !tbaa !70
  %conv114 = zext i8 %160 to i32
  %161 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i64 2), align 1, !tbaa !70
  %conv115 = zext i8 %161 to i32
  %sub116 = sub nsw i32 %conv114, %conv115
  store i32 %sub116, i32* %__result, align 4, !tbaa !5
  %162 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp117 = icmp ugt i64 %162, 2
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.127

land.lhs.true.119:                                ; preds = %if.then.112
  %163 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp120 = icmp eq i32 %163, 0
  br i1 %cmp120, label %if.then.122, label %if.end.127

if.then.122:                                      ; preds = %land.lhs.true.119
  %164 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx123 = getelementptr inbounds i8, i8* %164, i64 3
  %165 = load i8, i8* %arrayidx123, align 1, !tbaa !70
  %conv124 = zext i8 %165 to i32
  %166 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv125 = zext i8 %166 to i32
  %sub126 = sub nsw i32 %conv124, %conv125
  store i32 %sub126, i32* %__result, align 4, !tbaa !5
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.122, %land.lhs.true.119, %if.then.112
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %land.lhs.true.109, %if.then.102
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %land.lhs.true.99, %cond.true
  %167 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %167, i32* %tmp130, !tbaa !5
  %168 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %168) #2
  %169 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %169) #2
  %170 = load i32, i32* %tmp130, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.89, %if.else.88
  %data131 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %171 = load i8*, i8** %data131, align 8, !tbaa !91
  %call132 = call i32 @strcmp(i8* %171, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.129
  %cond = phi i32 [ %170, %if.end.129 ], [ %call132, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %172 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %172) #2
  %173 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %173) #2
  %174 = load i32, i32* %tmp, !tbaa !5
  %cmp133 = icmp eq i32 %174, 0
  br i1 %cmp133, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %cond.end
  %175 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %175, i32 0, i32 81
  store i32 0, i32* %MediaType, align 4, !tbaa !92
  br label %if.end.835

if.else.136:                                      ; preds = %cond.end
  %176 = bitcast i64* %__s1_len138 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %176) #2
  %177 = bitcast i64* %__s2_len140 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %177) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i64 1) to i64), i64 ptrtoint ([6 x i8]* @.str.218 to i64)), i64 1), label %land.lhs.true.142, label %cond.false.190

land.lhs.true.142:                                ; preds = %if.else.136
  %call143 = call i64 @strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i32 0)) #8
  store i64 %call143, i64* %__s2_len140, align 8, !tbaa !59
  %178 = load i64, i64* %__s2_len140, align 8, !tbaa !59
  %cmp144 = icmp ult i64 %178, 4
  br i1 %cmp144, label %cond.true.146, label %cond.false.190

cond.true.146:                                    ; preds = %land.lhs.true.142
  %179 = bitcast i8** %__s1148 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %179) #2
  %data149 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %180 = load i8*, i8** %data149, align 8, !tbaa !91
  store i8* %180, i8** %__s1148, align 8, !tbaa !1
  %181 = bitcast i32* %__result151 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %181) #2
  %182 = load i8*, i8** %__s1148, align 8, !tbaa !1
  %arrayidx152 = getelementptr inbounds i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx152, align 1, !tbaa !70
  %conv153 = zext i8 %183 to i32
  %184 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i32 0), align 1, !tbaa !70
  %conv154 = zext i8 %184 to i32
  %sub155 = sub nsw i32 %conv153, %conv154
  store i32 %sub155, i32* %__result151, align 4, !tbaa !5
  %185 = load i64, i64* %__s2_len140, align 8, !tbaa !59
  %cmp156 = icmp ugt i64 %185, 0
  br i1 %cmp156, label %land.lhs.true.158, label %if.end.188

land.lhs.true.158:                                ; preds = %cond.true.146
  %186 = load i32, i32* %__result151, align 4, !tbaa !5
  %cmp159 = icmp eq i32 %186, 0
  br i1 %cmp159, label %if.then.161, label %if.end.188

if.then.161:                                      ; preds = %land.lhs.true.158
  %187 = load i8*, i8** %__s1148, align 8, !tbaa !1
  %arrayidx162 = getelementptr inbounds i8, i8* %187, i64 1
  %188 = load i8, i8* %arrayidx162, align 1, !tbaa !70
  %conv163 = zext i8 %188 to i32
  %189 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i64 1), align 1, !tbaa !70
  %conv164 = zext i8 %189 to i32
  %sub165 = sub nsw i32 %conv163, %conv164
  store i32 %sub165, i32* %__result151, align 4, !tbaa !5
  %190 = load i64, i64* %__s2_len140, align 8, !tbaa !59
  %cmp166 = icmp ugt i64 %190, 1
  br i1 %cmp166, label %land.lhs.true.168, label %if.end.187

land.lhs.true.168:                                ; preds = %if.then.161
  %191 = load i32, i32* %__result151, align 4, !tbaa !5
  %cmp169 = icmp eq i32 %191, 0
  br i1 %cmp169, label %if.then.171, label %if.end.187

if.then.171:                                      ; preds = %land.lhs.true.168
  %192 = load i8*, i8** %__s1148, align 8, !tbaa !1
  %arrayidx172 = getelementptr inbounds i8, i8* %192, i64 2
  %193 = load i8, i8* %arrayidx172, align 1, !tbaa !70
  %conv173 = zext i8 %193 to i32
  %194 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i64 2), align 1, !tbaa !70
  %conv174 = zext i8 %194 to i32
  %sub175 = sub nsw i32 %conv173, %conv174
  store i32 %sub175, i32* %__result151, align 4, !tbaa !5
  %195 = load i64, i64* %__s2_len140, align 8, !tbaa !59
  %cmp176 = icmp ugt i64 %195, 2
  br i1 %cmp176, label %land.lhs.true.178, label %if.end.186

land.lhs.true.178:                                ; preds = %if.then.171
  %196 = load i32, i32* %__result151, align 4, !tbaa !5
  %cmp179 = icmp eq i32 %196, 0
  br i1 %cmp179, label %if.then.181, label %if.end.186

if.then.181:                                      ; preds = %land.lhs.true.178
  %197 = load i8*, i8** %__s1148, align 8, !tbaa !1
  %arrayidx182 = getelementptr inbounds i8, i8* %197, i64 3
  %198 = load i8, i8* %arrayidx182, align 1, !tbaa !70
  %conv183 = zext i8 %198 to i32
  %199 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i64 3), align 1, !tbaa !70
  %conv184 = zext i8 %199 to i32
  %sub185 = sub nsw i32 %conv183, %conv184
  store i32 %sub185, i32* %__result151, align 4, !tbaa !5
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.181, %land.lhs.true.178, %if.then.171
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %land.lhs.true.168, %if.then.161
  br label %if.end.188

if.end.188:                                       ; preds = %if.end.187, %land.lhs.true.158, %cond.true.146
  %200 = load i32, i32* %__result151, align 4, !tbaa !5
  store i32 %200, i32* %tmp189, !tbaa !5
  %201 = bitcast i32* %__result151 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %201) #2
  %202 = bitcast i8** %__s1148 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %202) #2
  %203 = load i32, i32* %tmp189, !tbaa !5
  br label %cond.end.193

cond.false.190:                                   ; preds = %land.lhs.true.142, %if.else.136
  %data191 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %204 = load i8*, i8** %data191, align 8, !tbaa !91
  %call192 = call i32 @strcmp(i8* %204, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i32 0)) #7
  br label %cond.end.193

cond.end.193:                                     ; preds = %cond.false.190, %if.end.188
  %cond194 = phi i32 [ %203, %if.end.188 ], [ %call192, %cond.false.190 ]
  store i32 %cond194, i32* %tmp141, !tbaa !5
  %205 = bitcast i64* %__s2_len140 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %205) #2
  %206 = bitcast i64* %__s1_len138 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %206) #2
  %207 = load i32, i32* %tmp141, !tbaa !5
  %cmp195 = icmp eq i32 %207, 0
  br i1 %cmp195, label %if.then.258, label %lor.lhs.false.197

lor.lhs.false.197:                                ; preds = %cond.end.193
  %208 = bitcast i64* %__s1_len199 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %208) #2
  %209 = bitcast i64* %__s2_len201 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %209) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.219 to i64)), i64 1), label %land.lhs.true.203, label %cond.false.251

land.lhs.true.203:                                ; preds = %lor.lhs.false.197
  %call204 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0)) #8
  store i64 %call204, i64* %__s2_len201, align 8, !tbaa !59
  %210 = load i64, i64* %__s2_len201, align 8, !tbaa !59
  %cmp205 = icmp ult i64 %210, 4
  br i1 %cmp205, label %cond.true.207, label %cond.false.251

cond.true.207:                                    ; preds = %land.lhs.true.203
  %211 = bitcast i8** %__s1209 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %211) #2
  %data210 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %212 = load i8*, i8** %data210, align 8, !tbaa !91
  store i8* %212, i8** %__s1209, align 8, !tbaa !1
  %213 = bitcast i32* %__result212 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %213) #2
  %214 = load i8*, i8** %__s1209, align 8, !tbaa !1
  %arrayidx213 = getelementptr inbounds i8, i8* %214, i64 0
  %215 = load i8, i8* %arrayidx213, align 1, !tbaa !70
  %conv214 = zext i8 %215 to i32
  %216 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0), align 1, !tbaa !70
  %conv215 = zext i8 %216 to i32
  %sub216 = sub nsw i32 %conv214, %conv215
  store i32 %sub216, i32* %__result212, align 4, !tbaa !5
  %217 = load i64, i64* %__s2_len201, align 8, !tbaa !59
  %cmp217 = icmp ugt i64 %217, 0
  br i1 %cmp217, label %land.lhs.true.219, label %if.end.249

land.lhs.true.219:                                ; preds = %cond.true.207
  %218 = load i32, i32* %__result212, align 4, !tbaa !5
  %cmp220 = icmp eq i32 %218, 0
  br i1 %cmp220, label %if.then.222, label %if.end.249

if.then.222:                                      ; preds = %land.lhs.true.219
  %219 = load i8*, i8** %__s1209, align 8, !tbaa !1
  %arrayidx223 = getelementptr inbounds i8, i8* %219, i64 1
  %220 = load i8, i8* %arrayidx223, align 1, !tbaa !70
  %conv224 = zext i8 %220 to i32
  %221 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i64 1), align 1, !tbaa !70
  %conv225 = zext i8 %221 to i32
  %sub226 = sub nsw i32 %conv224, %conv225
  store i32 %sub226, i32* %__result212, align 4, !tbaa !5
  %222 = load i64, i64* %__s2_len201, align 8, !tbaa !59
  %cmp227 = icmp ugt i64 %222, 1
  br i1 %cmp227, label %land.lhs.true.229, label %if.end.248

land.lhs.true.229:                                ; preds = %if.then.222
  %223 = load i32, i32* %__result212, align 4, !tbaa !5
  %cmp230 = icmp eq i32 %223, 0
  br i1 %cmp230, label %if.then.232, label %if.end.248

if.then.232:                                      ; preds = %land.lhs.true.229
  %224 = load i8*, i8** %__s1209, align 8, !tbaa !1
  %arrayidx233 = getelementptr inbounds i8, i8* %224, i64 2
  %225 = load i8, i8* %arrayidx233, align 1, !tbaa !70
  %conv234 = zext i8 %225 to i32
  %226 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i64 2), align 1, !tbaa !70
  %conv235 = zext i8 %226 to i32
  %sub236 = sub nsw i32 %conv234, %conv235
  store i32 %sub236, i32* %__result212, align 4, !tbaa !5
  %227 = load i64, i64* %__s2_len201, align 8, !tbaa !59
  %cmp237 = icmp ugt i64 %227, 2
  br i1 %cmp237, label %land.lhs.true.239, label %if.end.247

land.lhs.true.239:                                ; preds = %if.then.232
  %228 = load i32, i32* %__result212, align 4, !tbaa !5
  %cmp240 = icmp eq i32 %228, 0
  br i1 %cmp240, label %if.then.242, label %if.end.247

if.then.242:                                      ; preds = %land.lhs.true.239
  %229 = load i8*, i8** %__s1209, align 8, !tbaa !1
  %arrayidx243 = getelementptr inbounds i8, i8* %229, i64 3
  %230 = load i8, i8* %arrayidx243, align 1, !tbaa !70
  %conv244 = zext i8 %230 to i32
  %231 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv245 = zext i8 %231 to i32
  %sub246 = sub nsw i32 %conv244, %conv245
  store i32 %sub246, i32* %__result212, align 4, !tbaa !5
  br label %if.end.247

if.end.247:                                       ; preds = %if.then.242, %land.lhs.true.239, %if.then.232
  br label %if.end.248

if.end.248:                                       ; preds = %if.end.247, %land.lhs.true.229, %if.then.222
  br label %if.end.249

if.end.249:                                       ; preds = %if.end.248, %land.lhs.true.219, %cond.true.207
  %232 = load i32, i32* %__result212, align 4, !tbaa !5
  store i32 %232, i32* %tmp250, !tbaa !5
  %233 = bitcast i32* %__result212 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %233) #2
  %234 = bitcast i8** %__s1209 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %234) #2
  %235 = load i32, i32* %tmp250, !tbaa !5
  br label %cond.end.254

cond.false.251:                                   ; preds = %land.lhs.true.203, %lor.lhs.false.197
  %data252 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %236 = load i8*, i8** %data252, align 8, !tbaa !91
  %call253 = call i32 @strcmp(i8* %236, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0)) #7
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.false.251, %if.end.249
  %cond255 = phi i32 [ %235, %if.end.249 ], [ %call253, %cond.false.251 ]
  store i32 %cond255, i32* %tmp202, !tbaa !5
  %237 = bitcast i64* %__s2_len201 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %237) #2
  %238 = bitcast i64* %__s1_len199 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %238) #2
  %239 = load i32, i32* %tmp202, !tbaa !5
  %cmp256 = icmp eq i32 %239, 0
  br i1 %cmp256, label %if.then.258, label %if.else.260

if.then.258:                                      ; preds = %cond.end.254, %cond.end.193
  %240 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType259 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %240, i32 0, i32 81
  store i32 1, i32* %MediaType259, align 4, !tbaa !92
  br label %if.end.834

if.else.260:                                      ; preds = %cond.end.254
  %241 = bitcast i64* %__s1_len262 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %241) #2
  %242 = bitcast i64* %__s2_len264 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %242) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i64 1) to i64), i64 ptrtoint ([6 x i8]* @.str.220 to i64)), i64 1), label %land.lhs.true.266, label %cond.false.314

land.lhs.true.266:                                ; preds = %if.else.260
  %call267 = call i64 @strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i32 0)) #8
  store i64 %call267, i64* %__s2_len264, align 8, !tbaa !59
  %243 = load i64, i64* %__s2_len264, align 8, !tbaa !59
  %cmp268 = icmp ult i64 %243, 4
  br i1 %cmp268, label %cond.true.270, label %cond.false.314

cond.true.270:                                    ; preds = %land.lhs.true.266
  %244 = bitcast i8** %__s1272 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %244) #2
  %data273 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %245 = load i8*, i8** %data273, align 8, !tbaa !91
  store i8* %245, i8** %__s1272, align 8, !tbaa !1
  %246 = bitcast i32* %__result275 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %246) #2
  %247 = load i8*, i8** %__s1272, align 8, !tbaa !1
  %arrayidx276 = getelementptr inbounds i8, i8* %247, i64 0
  %248 = load i8, i8* %arrayidx276, align 1, !tbaa !70
  %conv277 = zext i8 %248 to i32
  %249 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i32 0), align 1, !tbaa !70
  %conv278 = zext i8 %249 to i32
  %sub279 = sub nsw i32 %conv277, %conv278
  store i32 %sub279, i32* %__result275, align 4, !tbaa !5
  %250 = load i64, i64* %__s2_len264, align 8, !tbaa !59
  %cmp280 = icmp ugt i64 %250, 0
  br i1 %cmp280, label %land.lhs.true.282, label %if.end.312

land.lhs.true.282:                                ; preds = %cond.true.270
  %251 = load i32, i32* %__result275, align 4, !tbaa !5
  %cmp283 = icmp eq i32 %251, 0
  br i1 %cmp283, label %if.then.285, label %if.end.312

if.then.285:                                      ; preds = %land.lhs.true.282
  %252 = load i8*, i8** %__s1272, align 8, !tbaa !1
  %arrayidx286 = getelementptr inbounds i8, i8* %252, i64 1
  %253 = load i8, i8* %arrayidx286, align 1, !tbaa !70
  %conv287 = zext i8 %253 to i32
  %254 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i64 1), align 1, !tbaa !70
  %conv288 = zext i8 %254 to i32
  %sub289 = sub nsw i32 %conv287, %conv288
  store i32 %sub289, i32* %__result275, align 4, !tbaa !5
  %255 = load i64, i64* %__s2_len264, align 8, !tbaa !59
  %cmp290 = icmp ugt i64 %255, 1
  br i1 %cmp290, label %land.lhs.true.292, label %if.end.311

land.lhs.true.292:                                ; preds = %if.then.285
  %256 = load i32, i32* %__result275, align 4, !tbaa !5
  %cmp293 = icmp eq i32 %256, 0
  br i1 %cmp293, label %if.then.295, label %if.end.311

if.then.295:                                      ; preds = %land.lhs.true.292
  %257 = load i8*, i8** %__s1272, align 8, !tbaa !1
  %arrayidx296 = getelementptr inbounds i8, i8* %257, i64 2
  %258 = load i8, i8* %arrayidx296, align 1, !tbaa !70
  %conv297 = zext i8 %258 to i32
  %259 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i64 2), align 1, !tbaa !70
  %conv298 = zext i8 %259 to i32
  %sub299 = sub nsw i32 %conv297, %conv298
  store i32 %sub299, i32* %__result275, align 4, !tbaa !5
  %260 = load i64, i64* %__s2_len264, align 8, !tbaa !59
  %cmp300 = icmp ugt i64 %260, 2
  br i1 %cmp300, label %land.lhs.true.302, label %if.end.310

land.lhs.true.302:                                ; preds = %if.then.295
  %261 = load i32, i32* %__result275, align 4, !tbaa !5
  %cmp303 = icmp eq i32 %261, 0
  br i1 %cmp303, label %if.then.305, label %if.end.310

if.then.305:                                      ; preds = %land.lhs.true.302
  %262 = load i8*, i8** %__s1272, align 8, !tbaa !1
  %arrayidx306 = getelementptr inbounds i8, i8* %262, i64 3
  %263 = load i8, i8* %arrayidx306, align 1, !tbaa !70
  %conv307 = zext i8 %263 to i32
  %264 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i64 3), align 1, !tbaa !70
  %conv308 = zext i8 %264 to i32
  %sub309 = sub nsw i32 %conv307, %conv308
  store i32 %sub309, i32* %__result275, align 4, !tbaa !5
  br label %if.end.310

if.end.310:                                       ; preds = %if.then.305, %land.lhs.true.302, %if.then.295
  br label %if.end.311

if.end.311:                                       ; preds = %if.end.310, %land.lhs.true.292, %if.then.285
  br label %if.end.312

if.end.312:                                       ; preds = %if.end.311, %land.lhs.true.282, %cond.true.270
  %265 = load i32, i32* %__result275, align 4, !tbaa !5
  store i32 %265, i32* %tmp313, !tbaa !5
  %266 = bitcast i32* %__result275 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %266) #2
  %267 = bitcast i8** %__s1272 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %267) #2
  %268 = load i32, i32* %tmp313, !tbaa !5
  br label %cond.end.317

cond.false.314:                                   ; preds = %land.lhs.true.266, %if.else.260
  %data315 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %269 = load i8*, i8** %data315, align 8, !tbaa !91
  %call316 = call i32 @strcmp(i8* %269, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220, i32 0, i32 0)) #7
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.false.314, %if.end.312
  %cond318 = phi i32 [ %268, %if.end.312 ], [ %call316, %cond.false.314 ]
  store i32 %cond318, i32* %tmp265, !tbaa !5
  %270 = bitcast i64* %__s2_len264 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %270) #2
  %271 = bitcast i64* %__s1_len262 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %271) #2
  %272 = load i32, i32* %tmp265, !tbaa !5
  %cmp319 = icmp eq i32 %272, 0
  br i1 %cmp319, label %if.then.382, label %lor.lhs.false.321

lor.lhs.false.321:                                ; preds = %cond.end.317
  %273 = bitcast i64* %__s1_len323 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %273) #2
  %274 = bitcast i64* %__s2_len325 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %274) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.221 to i64)), i64 1), label %land.lhs.true.327, label %cond.false.375

land.lhs.true.327:                                ; preds = %lor.lhs.false.321
  %call328 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0)) #8
  store i64 %call328, i64* %__s2_len325, align 8, !tbaa !59
  %275 = load i64, i64* %__s2_len325, align 8, !tbaa !59
  %cmp329 = icmp ult i64 %275, 4
  br i1 %cmp329, label %cond.true.331, label %cond.false.375

cond.true.331:                                    ; preds = %land.lhs.true.327
  %276 = bitcast i8** %__s1333 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %276) #2
  %data334 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %277 = load i8*, i8** %data334, align 8, !tbaa !91
  store i8* %277, i8** %__s1333, align 8, !tbaa !1
  %278 = bitcast i32* %__result336 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %278) #2
  %279 = load i8*, i8** %__s1333, align 8, !tbaa !1
  %arrayidx337 = getelementptr inbounds i8, i8* %279, i64 0
  %280 = load i8, i8* %arrayidx337, align 1, !tbaa !70
  %conv338 = zext i8 %280 to i32
  %281 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0), align 1, !tbaa !70
  %conv339 = zext i8 %281 to i32
  %sub340 = sub nsw i32 %conv338, %conv339
  store i32 %sub340, i32* %__result336, align 4, !tbaa !5
  %282 = load i64, i64* %__s2_len325, align 8, !tbaa !59
  %cmp341 = icmp ugt i64 %282, 0
  br i1 %cmp341, label %land.lhs.true.343, label %if.end.373

land.lhs.true.343:                                ; preds = %cond.true.331
  %283 = load i32, i32* %__result336, align 4, !tbaa !5
  %cmp344 = icmp eq i32 %283, 0
  br i1 %cmp344, label %if.then.346, label %if.end.373

if.then.346:                                      ; preds = %land.lhs.true.343
  %284 = load i8*, i8** %__s1333, align 8, !tbaa !1
  %arrayidx347 = getelementptr inbounds i8, i8* %284, i64 1
  %285 = load i8, i8* %arrayidx347, align 1, !tbaa !70
  %conv348 = zext i8 %285 to i32
  %286 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i64 1), align 1, !tbaa !70
  %conv349 = zext i8 %286 to i32
  %sub350 = sub nsw i32 %conv348, %conv349
  store i32 %sub350, i32* %__result336, align 4, !tbaa !5
  %287 = load i64, i64* %__s2_len325, align 8, !tbaa !59
  %cmp351 = icmp ugt i64 %287, 1
  br i1 %cmp351, label %land.lhs.true.353, label %if.end.372

land.lhs.true.353:                                ; preds = %if.then.346
  %288 = load i32, i32* %__result336, align 4, !tbaa !5
  %cmp354 = icmp eq i32 %288, 0
  br i1 %cmp354, label %if.then.356, label %if.end.372

if.then.356:                                      ; preds = %land.lhs.true.353
  %289 = load i8*, i8** %__s1333, align 8, !tbaa !1
  %arrayidx357 = getelementptr inbounds i8, i8* %289, i64 2
  %290 = load i8, i8* %arrayidx357, align 1, !tbaa !70
  %conv358 = zext i8 %290 to i32
  %291 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i64 2), align 1, !tbaa !70
  %conv359 = zext i8 %291 to i32
  %sub360 = sub nsw i32 %conv358, %conv359
  store i32 %sub360, i32* %__result336, align 4, !tbaa !5
  %292 = load i64, i64* %__s2_len325, align 8, !tbaa !59
  %cmp361 = icmp ugt i64 %292, 2
  br i1 %cmp361, label %land.lhs.true.363, label %if.end.371

land.lhs.true.363:                                ; preds = %if.then.356
  %293 = load i32, i32* %__result336, align 4, !tbaa !5
  %cmp364 = icmp eq i32 %293, 0
  br i1 %cmp364, label %if.then.366, label %if.end.371

if.then.366:                                      ; preds = %land.lhs.true.363
  %294 = load i8*, i8** %__s1333, align 8, !tbaa !1
  %arrayidx367 = getelementptr inbounds i8, i8* %294, i64 3
  %295 = load i8, i8* %arrayidx367, align 1, !tbaa !70
  %conv368 = zext i8 %295 to i32
  %296 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv369 = zext i8 %296 to i32
  %sub370 = sub nsw i32 %conv368, %conv369
  store i32 %sub370, i32* %__result336, align 4, !tbaa !5
  br label %if.end.371

if.end.371:                                       ; preds = %if.then.366, %land.lhs.true.363, %if.then.356
  br label %if.end.372

if.end.372:                                       ; preds = %if.end.371, %land.lhs.true.353, %if.then.346
  br label %if.end.373

if.end.373:                                       ; preds = %if.end.372, %land.lhs.true.343, %cond.true.331
  %297 = load i32, i32* %__result336, align 4, !tbaa !5
  store i32 %297, i32* %tmp374, !tbaa !5
  %298 = bitcast i32* %__result336 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %298) #2
  %299 = bitcast i8** %__s1333 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %299) #2
  %300 = load i32, i32* %tmp374, !tbaa !5
  br label %cond.end.378

cond.false.375:                                   ; preds = %land.lhs.true.327, %lor.lhs.false.321
  %data376 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %301 = load i8*, i8** %data376, align 8, !tbaa !91
  %call377 = call i32 @strcmp(i8* %301, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0)) #7
  br label %cond.end.378

cond.end.378:                                     ; preds = %cond.false.375, %if.end.373
  %cond379 = phi i32 [ %300, %if.end.373 ], [ %call377, %cond.false.375 ]
  store i32 %cond379, i32* %tmp326, !tbaa !5
  %302 = bitcast i64* %__s2_len325 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %302) #2
  %303 = bitcast i64* %__s1_len323 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %303) #2
  %304 = load i32, i32* %tmp326, !tbaa !5
  %cmp380 = icmp eq i32 %304, 0
  br i1 %cmp380, label %if.then.382, label %if.else.384

if.then.382:                                      ; preds = %cond.end.378, %cond.end.317
  %305 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType383 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %305, i32 0, i32 81
  store i32 2, i32* %MediaType383, align 4, !tbaa !92
  br label %if.end.833

if.else.384:                                      ; preds = %cond.end.378
  %306 = bitcast i64* %__s1_len386 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %306) #2
  %307 = bitcast i64* %__s2_len388 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %307) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.222 to i64)), i64 1), label %land.lhs.true.390, label %cond.false.438

land.lhs.true.390:                                ; preds = %if.else.384
  %call391 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0)) #8
  store i64 %call391, i64* %__s2_len388, align 8, !tbaa !59
  %308 = load i64, i64* %__s2_len388, align 8, !tbaa !59
  %cmp392 = icmp ult i64 %308, 4
  br i1 %cmp392, label %cond.true.394, label %cond.false.438

cond.true.394:                                    ; preds = %land.lhs.true.390
  %309 = bitcast i8** %__s1396 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %309) #2
  %data397 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %310 = load i8*, i8** %data397, align 8, !tbaa !91
  store i8* %310, i8** %__s1396, align 8, !tbaa !1
  %311 = bitcast i32* %__result399 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %311) #2
  %312 = load i8*, i8** %__s1396, align 8, !tbaa !1
  %arrayidx400 = getelementptr inbounds i8, i8* %312, i64 0
  %313 = load i8, i8* %arrayidx400, align 1, !tbaa !70
  %conv401 = zext i8 %313 to i32
  %314 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0), align 1, !tbaa !70
  %conv402 = zext i8 %314 to i32
  %sub403 = sub nsw i32 %conv401, %conv402
  store i32 %sub403, i32* %__result399, align 4, !tbaa !5
  %315 = load i64, i64* %__s2_len388, align 8, !tbaa !59
  %cmp404 = icmp ugt i64 %315, 0
  br i1 %cmp404, label %land.lhs.true.406, label %if.end.436

land.lhs.true.406:                                ; preds = %cond.true.394
  %316 = load i32, i32* %__result399, align 4, !tbaa !5
  %cmp407 = icmp eq i32 %316, 0
  br i1 %cmp407, label %if.then.409, label %if.end.436

if.then.409:                                      ; preds = %land.lhs.true.406
  %317 = load i8*, i8** %__s1396, align 8, !tbaa !1
  %arrayidx410 = getelementptr inbounds i8, i8* %317, i64 1
  %318 = load i8, i8* %arrayidx410, align 1, !tbaa !70
  %conv411 = zext i8 %318 to i32
  %319 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i64 1), align 1, !tbaa !70
  %conv412 = zext i8 %319 to i32
  %sub413 = sub nsw i32 %conv411, %conv412
  store i32 %sub413, i32* %__result399, align 4, !tbaa !5
  %320 = load i64, i64* %__s2_len388, align 8, !tbaa !59
  %cmp414 = icmp ugt i64 %320, 1
  br i1 %cmp414, label %land.lhs.true.416, label %if.end.435

land.lhs.true.416:                                ; preds = %if.then.409
  %321 = load i32, i32* %__result399, align 4, !tbaa !5
  %cmp417 = icmp eq i32 %321, 0
  br i1 %cmp417, label %if.then.419, label %if.end.435

if.then.419:                                      ; preds = %land.lhs.true.416
  %322 = load i8*, i8** %__s1396, align 8, !tbaa !1
  %arrayidx420 = getelementptr inbounds i8, i8* %322, i64 2
  %323 = load i8, i8* %arrayidx420, align 1, !tbaa !70
  %conv421 = zext i8 %323 to i32
  %324 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i64 2), align 1, !tbaa !70
  %conv422 = zext i8 %324 to i32
  %sub423 = sub nsw i32 %conv421, %conv422
  store i32 %sub423, i32* %__result399, align 4, !tbaa !5
  %325 = load i64, i64* %__s2_len388, align 8, !tbaa !59
  %cmp424 = icmp ugt i64 %325, 2
  br i1 %cmp424, label %land.lhs.true.426, label %if.end.434

land.lhs.true.426:                                ; preds = %if.then.419
  %326 = load i32, i32* %__result399, align 4, !tbaa !5
  %cmp427 = icmp eq i32 %326, 0
  br i1 %cmp427, label %if.then.429, label %if.end.434

if.then.429:                                      ; preds = %land.lhs.true.426
  %327 = load i8*, i8** %__s1396, align 8, !tbaa !1
  %arrayidx430 = getelementptr inbounds i8, i8* %327, i64 3
  %328 = load i8, i8* %arrayidx430, align 1, !tbaa !70
  %conv431 = zext i8 %328 to i32
  %329 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv432 = zext i8 %329 to i32
  %sub433 = sub nsw i32 %conv431, %conv432
  store i32 %sub433, i32* %__result399, align 4, !tbaa !5
  br label %if.end.434

if.end.434:                                       ; preds = %if.then.429, %land.lhs.true.426, %if.then.419
  br label %if.end.435

if.end.435:                                       ; preds = %if.end.434, %land.lhs.true.416, %if.then.409
  br label %if.end.436

if.end.436:                                       ; preds = %if.end.435, %land.lhs.true.406, %cond.true.394
  %330 = load i32, i32* %__result399, align 4, !tbaa !5
  store i32 %330, i32* %tmp437, !tbaa !5
  %331 = bitcast i32* %__result399 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %331) #2
  %332 = bitcast i8** %__s1396 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %332) #2
  %333 = load i32, i32* %tmp437, !tbaa !5
  br label %cond.end.441

cond.false.438:                                   ; preds = %land.lhs.true.390, %if.else.384
  %data439 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %334 = load i8*, i8** %data439, align 8, !tbaa !91
  %call440 = call i32 @strcmp(i8* %334, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0)) #7
  br label %cond.end.441

cond.end.441:                                     ; preds = %cond.false.438, %if.end.436
  %cond442 = phi i32 [ %333, %if.end.436 ], [ %call440, %cond.false.438 ]
  store i32 %cond442, i32* %tmp389, !tbaa !5
  %335 = bitcast i64* %__s2_len388 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %335) #2
  %336 = bitcast i64* %__s1_len386 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %336) #2
  %337 = load i32, i32* %tmp389, !tbaa !5
  %cmp443 = icmp eq i32 %337, 0
  br i1 %cmp443, label %if.then.445, label %if.else.447

if.then.445:                                      ; preds = %cond.end.441
  %338 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType446 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %338, i32 0, i32 81
  store i32 3, i32* %MediaType446, align 4, !tbaa !92
  br label %if.end.832

if.else.447:                                      ; preds = %cond.end.441
  %339 = bitcast i64* %__s1_len449 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %339) #2
  %340 = bitcast i64* %__s2_len451 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %340) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.223 to i64)), i64 1), label %land.lhs.true.453, label %cond.false.501

land.lhs.true.453:                                ; preds = %if.else.447
  %call454 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i32 0)) #8
  store i64 %call454, i64* %__s2_len451, align 8, !tbaa !59
  %341 = load i64, i64* %__s2_len451, align 8, !tbaa !59
  %cmp455 = icmp ult i64 %341, 4
  br i1 %cmp455, label %cond.true.457, label %cond.false.501

cond.true.457:                                    ; preds = %land.lhs.true.453
  %342 = bitcast i8** %__s1459 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %342) #2
  %data460 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %343 = load i8*, i8** %data460, align 8, !tbaa !91
  store i8* %343, i8** %__s1459, align 8, !tbaa !1
  %344 = bitcast i32* %__result462 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %344) #2
  %345 = load i8*, i8** %__s1459, align 8, !tbaa !1
  %arrayidx463 = getelementptr inbounds i8, i8* %345, i64 0
  %346 = load i8, i8* %arrayidx463, align 1, !tbaa !70
  %conv464 = zext i8 %346 to i32
  %347 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i32 0), align 1, !tbaa !70
  %conv465 = zext i8 %347 to i32
  %sub466 = sub nsw i32 %conv464, %conv465
  store i32 %sub466, i32* %__result462, align 4, !tbaa !5
  %348 = load i64, i64* %__s2_len451, align 8, !tbaa !59
  %cmp467 = icmp ugt i64 %348, 0
  br i1 %cmp467, label %land.lhs.true.469, label %if.end.499

land.lhs.true.469:                                ; preds = %cond.true.457
  %349 = load i32, i32* %__result462, align 4, !tbaa !5
  %cmp470 = icmp eq i32 %349, 0
  br i1 %cmp470, label %if.then.472, label %if.end.499

if.then.472:                                      ; preds = %land.lhs.true.469
  %350 = load i8*, i8** %__s1459, align 8, !tbaa !1
  %arrayidx473 = getelementptr inbounds i8, i8* %350, i64 1
  %351 = load i8, i8* %arrayidx473, align 1, !tbaa !70
  %conv474 = zext i8 %351 to i32
  %352 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i64 1), align 1, !tbaa !70
  %conv475 = zext i8 %352 to i32
  %sub476 = sub nsw i32 %conv474, %conv475
  store i32 %sub476, i32* %__result462, align 4, !tbaa !5
  %353 = load i64, i64* %__s2_len451, align 8, !tbaa !59
  %cmp477 = icmp ugt i64 %353, 1
  br i1 %cmp477, label %land.lhs.true.479, label %if.end.498

land.lhs.true.479:                                ; preds = %if.then.472
  %354 = load i32, i32* %__result462, align 4, !tbaa !5
  %cmp480 = icmp eq i32 %354, 0
  br i1 %cmp480, label %if.then.482, label %if.end.498

if.then.482:                                      ; preds = %land.lhs.true.479
  %355 = load i8*, i8** %__s1459, align 8, !tbaa !1
  %arrayidx483 = getelementptr inbounds i8, i8* %355, i64 2
  %356 = load i8, i8* %arrayidx483, align 1, !tbaa !70
  %conv484 = zext i8 %356 to i32
  %357 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i64 2), align 1, !tbaa !70
  %conv485 = zext i8 %357 to i32
  %sub486 = sub nsw i32 %conv484, %conv485
  store i32 %sub486, i32* %__result462, align 4, !tbaa !5
  %358 = load i64, i64* %__s2_len451, align 8, !tbaa !59
  %cmp487 = icmp ugt i64 %358, 2
  br i1 %cmp487, label %land.lhs.true.489, label %if.end.497

land.lhs.true.489:                                ; preds = %if.then.482
  %359 = load i32, i32* %__result462, align 4, !tbaa !5
  %cmp490 = icmp eq i32 %359, 0
  br i1 %cmp490, label %if.then.492, label %if.end.497

if.then.492:                                      ; preds = %land.lhs.true.489
  %360 = load i8*, i8** %__s1459, align 8, !tbaa !1
  %arrayidx493 = getelementptr inbounds i8, i8* %360, i64 3
  %361 = load i8, i8* %arrayidx493, align 1, !tbaa !70
  %conv494 = zext i8 %361 to i32
  %362 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv495 = zext i8 %362 to i32
  %sub496 = sub nsw i32 %conv494, %conv495
  store i32 %sub496, i32* %__result462, align 4, !tbaa !5
  br label %if.end.497

if.end.497:                                       ; preds = %if.then.492, %land.lhs.true.489, %if.then.482
  br label %if.end.498

if.end.498:                                       ; preds = %if.end.497, %land.lhs.true.479, %if.then.472
  br label %if.end.499

if.end.499:                                       ; preds = %if.end.498, %land.lhs.true.469, %cond.true.457
  %363 = load i32, i32* %__result462, align 4, !tbaa !5
  store i32 %363, i32* %tmp500, !tbaa !5
  %364 = bitcast i32* %__result462 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %364) #2
  %365 = bitcast i8** %__s1459 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %365) #2
  %366 = load i32, i32* %tmp500, !tbaa !5
  br label %cond.end.504

cond.false.501:                                   ; preds = %land.lhs.true.453, %if.else.447
  %data502 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %367 = load i8*, i8** %data502, align 8, !tbaa !91
  %call503 = call i32 @strcmp(i8* %367, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.223, i32 0, i32 0)) #7
  br label %cond.end.504

cond.end.504:                                     ; preds = %cond.false.501, %if.end.499
  %cond505 = phi i32 [ %366, %if.end.499 ], [ %call503, %cond.false.501 ]
  store i32 %cond505, i32* %tmp452, !tbaa !5
  %368 = bitcast i64* %__s2_len451 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %368) #2
  %369 = bitcast i64* %__s1_len449 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %369) #2
  %370 = load i32, i32* %tmp452, !tbaa !5
  %cmp506 = icmp eq i32 %370, 0
  br i1 %cmp506, label %if.then.508, label %if.else.510

if.then.508:                                      ; preds = %cond.end.504
  %371 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType509 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %371, i32 0, i32 81
  store i32 4, i32* %MediaType509, align 4, !tbaa !92
  br label %if.end.831

if.else.510:                                      ; preds = %cond.end.504
  %372 = bitcast i64* %__s1_len512 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %372) #2
  %373 = bitcast i64* %__s2_len514 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %373) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.224 to i64)), i64 1), label %land.lhs.true.516, label %cond.false.564

land.lhs.true.516:                                ; preds = %if.else.510
  %call517 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i32 0)) #8
  store i64 %call517, i64* %__s2_len514, align 8, !tbaa !59
  %374 = load i64, i64* %__s2_len514, align 8, !tbaa !59
  %cmp518 = icmp ult i64 %374, 4
  br i1 %cmp518, label %cond.true.520, label %cond.false.564

cond.true.520:                                    ; preds = %land.lhs.true.516
  %375 = bitcast i8** %__s1522 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %375) #2
  %data523 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %376 = load i8*, i8** %data523, align 8, !tbaa !91
  store i8* %376, i8** %__s1522, align 8, !tbaa !1
  %377 = bitcast i32* %__result525 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %377) #2
  %378 = load i8*, i8** %__s1522, align 8, !tbaa !1
  %arrayidx526 = getelementptr inbounds i8, i8* %378, i64 0
  %379 = load i8, i8* %arrayidx526, align 1, !tbaa !70
  %conv527 = zext i8 %379 to i32
  %380 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i32 0), align 1, !tbaa !70
  %conv528 = zext i8 %380 to i32
  %sub529 = sub nsw i32 %conv527, %conv528
  store i32 %sub529, i32* %__result525, align 4, !tbaa !5
  %381 = load i64, i64* %__s2_len514, align 8, !tbaa !59
  %cmp530 = icmp ugt i64 %381, 0
  br i1 %cmp530, label %land.lhs.true.532, label %if.end.562

land.lhs.true.532:                                ; preds = %cond.true.520
  %382 = load i32, i32* %__result525, align 4, !tbaa !5
  %cmp533 = icmp eq i32 %382, 0
  br i1 %cmp533, label %if.then.535, label %if.end.562

if.then.535:                                      ; preds = %land.lhs.true.532
  %383 = load i8*, i8** %__s1522, align 8, !tbaa !1
  %arrayidx536 = getelementptr inbounds i8, i8* %383, i64 1
  %384 = load i8, i8* %arrayidx536, align 1, !tbaa !70
  %conv537 = zext i8 %384 to i32
  %385 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i64 1), align 1, !tbaa !70
  %conv538 = zext i8 %385 to i32
  %sub539 = sub nsw i32 %conv537, %conv538
  store i32 %sub539, i32* %__result525, align 4, !tbaa !5
  %386 = load i64, i64* %__s2_len514, align 8, !tbaa !59
  %cmp540 = icmp ugt i64 %386, 1
  br i1 %cmp540, label %land.lhs.true.542, label %if.end.561

land.lhs.true.542:                                ; preds = %if.then.535
  %387 = load i32, i32* %__result525, align 4, !tbaa !5
  %cmp543 = icmp eq i32 %387, 0
  br i1 %cmp543, label %if.then.545, label %if.end.561

if.then.545:                                      ; preds = %land.lhs.true.542
  %388 = load i8*, i8** %__s1522, align 8, !tbaa !1
  %arrayidx546 = getelementptr inbounds i8, i8* %388, i64 2
  %389 = load i8, i8* %arrayidx546, align 1, !tbaa !70
  %conv547 = zext i8 %389 to i32
  %390 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i64 2), align 1, !tbaa !70
  %conv548 = zext i8 %390 to i32
  %sub549 = sub nsw i32 %conv547, %conv548
  store i32 %sub549, i32* %__result525, align 4, !tbaa !5
  %391 = load i64, i64* %__s2_len514, align 8, !tbaa !59
  %cmp550 = icmp ugt i64 %391, 2
  br i1 %cmp550, label %land.lhs.true.552, label %if.end.560

land.lhs.true.552:                                ; preds = %if.then.545
  %392 = load i32, i32* %__result525, align 4, !tbaa !5
  %cmp553 = icmp eq i32 %392, 0
  br i1 %cmp553, label %if.then.555, label %if.end.560

if.then.555:                                      ; preds = %land.lhs.true.552
  %393 = load i8*, i8** %__s1522, align 8, !tbaa !1
  %arrayidx556 = getelementptr inbounds i8, i8* %393, i64 3
  %394 = load i8, i8* %arrayidx556, align 1, !tbaa !70
  %conv557 = zext i8 %394 to i32
  %395 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv558 = zext i8 %395 to i32
  %sub559 = sub nsw i32 %conv557, %conv558
  store i32 %sub559, i32* %__result525, align 4, !tbaa !5
  br label %if.end.560

if.end.560:                                       ; preds = %if.then.555, %land.lhs.true.552, %if.then.545
  br label %if.end.561

if.end.561:                                       ; preds = %if.end.560, %land.lhs.true.542, %if.then.535
  br label %if.end.562

if.end.562:                                       ; preds = %if.end.561, %land.lhs.true.532, %cond.true.520
  %396 = load i32, i32* %__result525, align 4, !tbaa !5
  store i32 %396, i32* %tmp563, !tbaa !5
  %397 = bitcast i32* %__result525 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %397) #2
  %398 = bitcast i8** %__s1522 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %398) #2
  %399 = load i32, i32* %tmp563, !tbaa !5
  br label %cond.end.567

cond.false.564:                                   ; preds = %land.lhs.true.516, %if.else.510
  %data565 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %400 = load i8*, i8** %data565, align 8, !tbaa !91
  %call566 = call i32 @strcmp(i8* %400, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i32 0)) #7
  br label %cond.end.567

cond.end.567:                                     ; preds = %cond.false.564, %if.end.562
  %cond568 = phi i32 [ %399, %if.end.562 ], [ %call566, %cond.false.564 ]
  store i32 %cond568, i32* %tmp515, !tbaa !5
  %401 = bitcast i64* %__s2_len514 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %401) #2
  %402 = bitcast i64* %__s1_len512 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %402) #2
  %403 = load i32, i32* %tmp515, !tbaa !5
  %cmp569 = icmp eq i32 %403, 0
  br i1 %cmp569, label %if.then.571, label %if.else.573

if.then.571:                                      ; preds = %cond.end.567
  %404 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType572 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %404, i32 0, i32 81
  store i32 5, i32* %MediaType572, align 4, !tbaa !92
  br label %if.end.830

if.else.573:                                      ; preds = %cond.end.567
  %405 = bitcast i64* %__s1_len575 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %405) #2
  %406 = bitcast i64* %__s2_len577 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %406) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.225 to i64)), i64 1), label %land.lhs.true.579, label %cond.false.627

land.lhs.true.579:                                ; preds = %if.else.573
  %call580 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i32 0)) #8
  store i64 %call580, i64* %__s2_len577, align 8, !tbaa !59
  %407 = load i64, i64* %__s2_len577, align 8, !tbaa !59
  %cmp581 = icmp ult i64 %407, 4
  br i1 %cmp581, label %cond.true.583, label %cond.false.627

cond.true.583:                                    ; preds = %land.lhs.true.579
  %408 = bitcast i8** %__s1585 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %408) #2
  %data586 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %409 = load i8*, i8** %data586, align 8, !tbaa !91
  store i8* %409, i8** %__s1585, align 8, !tbaa !1
  %410 = bitcast i32* %__result588 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %410) #2
  %411 = load i8*, i8** %__s1585, align 8, !tbaa !1
  %arrayidx589 = getelementptr inbounds i8, i8* %411, i64 0
  %412 = load i8, i8* %arrayidx589, align 1, !tbaa !70
  %conv590 = zext i8 %412 to i32
  %413 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i32 0), align 1, !tbaa !70
  %conv591 = zext i8 %413 to i32
  %sub592 = sub nsw i32 %conv590, %conv591
  store i32 %sub592, i32* %__result588, align 4, !tbaa !5
  %414 = load i64, i64* %__s2_len577, align 8, !tbaa !59
  %cmp593 = icmp ugt i64 %414, 0
  br i1 %cmp593, label %land.lhs.true.595, label %if.end.625

land.lhs.true.595:                                ; preds = %cond.true.583
  %415 = load i32, i32* %__result588, align 4, !tbaa !5
  %cmp596 = icmp eq i32 %415, 0
  br i1 %cmp596, label %if.then.598, label %if.end.625

if.then.598:                                      ; preds = %land.lhs.true.595
  %416 = load i8*, i8** %__s1585, align 8, !tbaa !1
  %arrayidx599 = getelementptr inbounds i8, i8* %416, i64 1
  %417 = load i8, i8* %arrayidx599, align 1, !tbaa !70
  %conv600 = zext i8 %417 to i32
  %418 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i64 1), align 1, !tbaa !70
  %conv601 = zext i8 %418 to i32
  %sub602 = sub nsw i32 %conv600, %conv601
  store i32 %sub602, i32* %__result588, align 4, !tbaa !5
  %419 = load i64, i64* %__s2_len577, align 8, !tbaa !59
  %cmp603 = icmp ugt i64 %419, 1
  br i1 %cmp603, label %land.lhs.true.605, label %if.end.624

land.lhs.true.605:                                ; preds = %if.then.598
  %420 = load i32, i32* %__result588, align 4, !tbaa !5
  %cmp606 = icmp eq i32 %420, 0
  br i1 %cmp606, label %if.then.608, label %if.end.624

if.then.608:                                      ; preds = %land.lhs.true.605
  %421 = load i8*, i8** %__s1585, align 8, !tbaa !1
  %arrayidx609 = getelementptr inbounds i8, i8* %421, i64 2
  %422 = load i8, i8* %arrayidx609, align 1, !tbaa !70
  %conv610 = zext i8 %422 to i32
  %423 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i64 2), align 1, !tbaa !70
  %conv611 = zext i8 %423 to i32
  %sub612 = sub nsw i32 %conv610, %conv611
  store i32 %sub612, i32* %__result588, align 4, !tbaa !5
  %424 = load i64, i64* %__s2_len577, align 8, !tbaa !59
  %cmp613 = icmp ugt i64 %424, 2
  br i1 %cmp613, label %land.lhs.true.615, label %if.end.623

land.lhs.true.615:                                ; preds = %if.then.608
  %425 = load i32, i32* %__result588, align 4, !tbaa !5
  %cmp616 = icmp eq i32 %425, 0
  br i1 %cmp616, label %if.then.618, label %if.end.623

if.then.618:                                      ; preds = %land.lhs.true.615
  %426 = load i8*, i8** %__s1585, align 8, !tbaa !1
  %arrayidx619 = getelementptr inbounds i8, i8* %426, i64 3
  %427 = load i8, i8* %arrayidx619, align 1, !tbaa !70
  %conv620 = zext i8 %427 to i32
  %428 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv621 = zext i8 %428 to i32
  %sub622 = sub nsw i32 %conv620, %conv621
  store i32 %sub622, i32* %__result588, align 4, !tbaa !5
  br label %if.end.623

if.end.623:                                       ; preds = %if.then.618, %land.lhs.true.615, %if.then.608
  br label %if.end.624

if.end.624:                                       ; preds = %if.end.623, %land.lhs.true.605, %if.then.598
  br label %if.end.625

if.end.625:                                       ; preds = %if.end.624, %land.lhs.true.595, %cond.true.583
  %429 = load i32, i32* %__result588, align 4, !tbaa !5
  store i32 %429, i32* %tmp626, !tbaa !5
  %430 = bitcast i32* %__result588 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %430) #2
  %431 = bitcast i8** %__s1585 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %431) #2
  %432 = load i32, i32* %tmp626, !tbaa !5
  br label %cond.end.630

cond.false.627:                                   ; preds = %land.lhs.true.579, %if.else.573
  %data628 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %433 = load i8*, i8** %data628, align 8, !tbaa !91
  %call629 = call i32 @strcmp(i8* %433, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.225, i32 0, i32 0)) #7
  br label %cond.end.630

cond.end.630:                                     ; preds = %cond.false.627, %if.end.625
  %cond631 = phi i32 [ %432, %if.end.625 ], [ %call629, %cond.false.627 ]
  store i32 %cond631, i32* %tmp578, !tbaa !5
  %434 = bitcast i64* %__s2_len577 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %434) #2
  %435 = bitcast i64* %__s1_len575 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %435) #2
  %436 = load i32, i32* %tmp578, !tbaa !5
  %cmp632 = icmp eq i32 %436, 0
  br i1 %cmp632, label %if.then.634, label %if.else.636

if.then.634:                                      ; preds = %cond.end.630
  %437 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType635 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %437, i32 0, i32 81
  store i32 6, i32* %MediaType635, align 4, !tbaa !92
  br label %if.end.829

if.else.636:                                      ; preds = %cond.end.630
  %438 = bitcast i64* %__s1_len638 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %438) #2
  %439 = bitcast i64* %__s2_len640 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %439) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.226 to i64)), i64 1), label %land.lhs.true.642, label %cond.false.690

land.lhs.true.642:                                ; preds = %if.else.636
  %call643 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0)) #8
  store i64 %call643, i64* %__s2_len640, align 8, !tbaa !59
  %440 = load i64, i64* %__s2_len640, align 8, !tbaa !59
  %cmp644 = icmp ult i64 %440, 4
  br i1 %cmp644, label %cond.true.646, label %cond.false.690

cond.true.646:                                    ; preds = %land.lhs.true.642
  %441 = bitcast i8** %__s1648 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %441) #2
  %data649 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %442 = load i8*, i8** %data649, align 8, !tbaa !91
  store i8* %442, i8** %__s1648, align 8, !tbaa !1
  %443 = bitcast i32* %__result651 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %443) #2
  %444 = load i8*, i8** %__s1648, align 8, !tbaa !1
  %arrayidx652 = getelementptr inbounds i8, i8* %444, i64 0
  %445 = load i8, i8* %arrayidx652, align 1, !tbaa !70
  %conv653 = zext i8 %445 to i32
  %446 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0), align 1, !tbaa !70
  %conv654 = zext i8 %446 to i32
  %sub655 = sub nsw i32 %conv653, %conv654
  store i32 %sub655, i32* %__result651, align 4, !tbaa !5
  %447 = load i64, i64* %__s2_len640, align 8, !tbaa !59
  %cmp656 = icmp ugt i64 %447, 0
  br i1 %cmp656, label %land.lhs.true.658, label %if.end.688

land.lhs.true.658:                                ; preds = %cond.true.646
  %448 = load i32, i32* %__result651, align 4, !tbaa !5
  %cmp659 = icmp eq i32 %448, 0
  br i1 %cmp659, label %if.then.661, label %if.end.688

if.then.661:                                      ; preds = %land.lhs.true.658
  %449 = load i8*, i8** %__s1648, align 8, !tbaa !1
  %arrayidx662 = getelementptr inbounds i8, i8* %449, i64 1
  %450 = load i8, i8* %arrayidx662, align 1, !tbaa !70
  %conv663 = zext i8 %450 to i32
  %451 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i64 1), align 1, !tbaa !70
  %conv664 = zext i8 %451 to i32
  %sub665 = sub nsw i32 %conv663, %conv664
  store i32 %sub665, i32* %__result651, align 4, !tbaa !5
  %452 = load i64, i64* %__s2_len640, align 8, !tbaa !59
  %cmp666 = icmp ugt i64 %452, 1
  br i1 %cmp666, label %land.lhs.true.668, label %if.end.687

land.lhs.true.668:                                ; preds = %if.then.661
  %453 = load i32, i32* %__result651, align 4, !tbaa !5
  %cmp669 = icmp eq i32 %453, 0
  br i1 %cmp669, label %if.then.671, label %if.end.687

if.then.671:                                      ; preds = %land.lhs.true.668
  %454 = load i8*, i8** %__s1648, align 8, !tbaa !1
  %arrayidx672 = getelementptr inbounds i8, i8* %454, i64 2
  %455 = load i8, i8* %arrayidx672, align 1, !tbaa !70
  %conv673 = zext i8 %455 to i32
  %456 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i64 2), align 1, !tbaa !70
  %conv674 = zext i8 %456 to i32
  %sub675 = sub nsw i32 %conv673, %conv674
  store i32 %sub675, i32* %__result651, align 4, !tbaa !5
  %457 = load i64, i64* %__s2_len640, align 8, !tbaa !59
  %cmp676 = icmp ugt i64 %457, 2
  br i1 %cmp676, label %land.lhs.true.678, label %if.end.686

land.lhs.true.678:                                ; preds = %if.then.671
  %458 = load i32, i32* %__result651, align 4, !tbaa !5
  %cmp679 = icmp eq i32 %458, 0
  br i1 %cmp679, label %if.then.681, label %if.end.686

if.then.681:                                      ; preds = %land.lhs.true.678
  %459 = load i8*, i8** %__s1648, align 8, !tbaa !1
  %arrayidx682 = getelementptr inbounds i8, i8* %459, i64 3
  %460 = load i8, i8* %arrayidx682, align 1, !tbaa !70
  %conv683 = zext i8 %460 to i32
  %461 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv684 = zext i8 %461 to i32
  %sub685 = sub nsw i32 %conv683, %conv684
  store i32 %sub685, i32* %__result651, align 4, !tbaa !5
  br label %if.end.686

if.end.686:                                       ; preds = %if.then.681, %land.lhs.true.678, %if.then.671
  br label %if.end.687

if.end.687:                                       ; preds = %if.end.686, %land.lhs.true.668, %if.then.661
  br label %if.end.688

if.end.688:                                       ; preds = %if.end.687, %land.lhs.true.658, %cond.true.646
  %462 = load i32, i32* %__result651, align 4, !tbaa !5
  store i32 %462, i32* %tmp689, !tbaa !5
  %463 = bitcast i32* %__result651 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %463) #2
  %464 = bitcast i8** %__s1648 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %464) #2
  %465 = load i32, i32* %tmp689, !tbaa !5
  br label %cond.end.693

cond.false.690:                                   ; preds = %land.lhs.true.642, %if.else.636
  %data691 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %466 = load i8*, i8** %data691, align 8, !tbaa !91
  %call692 = call i32 @strcmp(i8* %466, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0)) #7
  br label %cond.end.693

cond.end.693:                                     ; preds = %cond.false.690, %if.end.688
  %cond694 = phi i32 [ %465, %if.end.688 ], [ %call692, %cond.false.690 ]
  store i32 %cond694, i32* %tmp641, !tbaa !5
  %467 = bitcast i64* %__s2_len640 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %467) #2
  %468 = bitcast i64* %__s1_len638 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %468) #2
  %469 = load i32, i32* %tmp641, !tbaa !5
  %cmp695 = icmp eq i32 %469, 0
  br i1 %cmp695, label %if.then.697, label %if.else.699

if.then.697:                                      ; preds = %cond.end.693
  %470 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType698 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %470, i32 0, i32 81
  store i32 7, i32* %MediaType698, align 4, !tbaa !92
  br label %if.end.828

if.else.699:                                      ; preds = %cond.end.693
  %471 = bitcast i64* %__s1_len701 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %471) #2
  %472 = bitcast i64* %__s2_len703 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %472) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.227 to i64)), i64 1), label %land.lhs.true.705, label %cond.false.753

land.lhs.true.705:                                ; preds = %if.else.699
  %call706 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0)) #8
  store i64 %call706, i64* %__s2_len703, align 8, !tbaa !59
  %473 = load i64, i64* %__s2_len703, align 8, !tbaa !59
  %cmp707 = icmp ult i64 %473, 4
  br i1 %cmp707, label %cond.true.709, label %cond.false.753

cond.true.709:                                    ; preds = %land.lhs.true.705
  %474 = bitcast i8** %__s1711 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %474) #2
  %data712 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %475 = load i8*, i8** %data712, align 8, !tbaa !91
  store i8* %475, i8** %__s1711, align 8, !tbaa !1
  %476 = bitcast i32* %__result714 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %476) #2
  %477 = load i8*, i8** %__s1711, align 8, !tbaa !1
  %arrayidx715 = getelementptr inbounds i8, i8* %477, i64 0
  %478 = load i8, i8* %arrayidx715, align 1, !tbaa !70
  %conv716 = zext i8 %478 to i32
  %479 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0), align 1, !tbaa !70
  %conv717 = zext i8 %479 to i32
  %sub718 = sub nsw i32 %conv716, %conv717
  store i32 %sub718, i32* %__result714, align 4, !tbaa !5
  %480 = load i64, i64* %__s2_len703, align 8, !tbaa !59
  %cmp719 = icmp ugt i64 %480, 0
  br i1 %cmp719, label %land.lhs.true.721, label %if.end.751

land.lhs.true.721:                                ; preds = %cond.true.709
  %481 = load i32, i32* %__result714, align 4, !tbaa !5
  %cmp722 = icmp eq i32 %481, 0
  br i1 %cmp722, label %if.then.724, label %if.end.751

if.then.724:                                      ; preds = %land.lhs.true.721
  %482 = load i8*, i8** %__s1711, align 8, !tbaa !1
  %arrayidx725 = getelementptr inbounds i8, i8* %482, i64 1
  %483 = load i8, i8* %arrayidx725, align 1, !tbaa !70
  %conv726 = zext i8 %483 to i32
  %484 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i64 1), align 1, !tbaa !70
  %conv727 = zext i8 %484 to i32
  %sub728 = sub nsw i32 %conv726, %conv727
  store i32 %sub728, i32* %__result714, align 4, !tbaa !5
  %485 = load i64, i64* %__s2_len703, align 8, !tbaa !59
  %cmp729 = icmp ugt i64 %485, 1
  br i1 %cmp729, label %land.lhs.true.731, label %if.end.750

land.lhs.true.731:                                ; preds = %if.then.724
  %486 = load i32, i32* %__result714, align 4, !tbaa !5
  %cmp732 = icmp eq i32 %486, 0
  br i1 %cmp732, label %if.then.734, label %if.end.750

if.then.734:                                      ; preds = %land.lhs.true.731
  %487 = load i8*, i8** %__s1711, align 8, !tbaa !1
  %arrayidx735 = getelementptr inbounds i8, i8* %487, i64 2
  %488 = load i8, i8* %arrayidx735, align 1, !tbaa !70
  %conv736 = zext i8 %488 to i32
  %489 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i64 2), align 1, !tbaa !70
  %conv737 = zext i8 %489 to i32
  %sub738 = sub nsw i32 %conv736, %conv737
  store i32 %sub738, i32* %__result714, align 4, !tbaa !5
  %490 = load i64, i64* %__s2_len703, align 8, !tbaa !59
  %cmp739 = icmp ugt i64 %490, 2
  br i1 %cmp739, label %land.lhs.true.741, label %if.end.749

land.lhs.true.741:                                ; preds = %if.then.734
  %491 = load i32, i32* %__result714, align 4, !tbaa !5
  %cmp742 = icmp eq i32 %491, 0
  br i1 %cmp742, label %if.then.744, label %if.end.749

if.then.744:                                      ; preds = %land.lhs.true.741
  %492 = load i8*, i8** %__s1711, align 8, !tbaa !1
  %arrayidx745 = getelementptr inbounds i8, i8* %492, i64 3
  %493 = load i8, i8* %arrayidx745, align 1, !tbaa !70
  %conv746 = zext i8 %493 to i32
  %494 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv747 = zext i8 %494 to i32
  %sub748 = sub nsw i32 %conv746, %conv747
  store i32 %sub748, i32* %__result714, align 4, !tbaa !5
  br label %if.end.749

if.end.749:                                       ; preds = %if.then.744, %land.lhs.true.741, %if.then.734
  br label %if.end.750

if.end.750:                                       ; preds = %if.end.749, %land.lhs.true.731, %if.then.724
  br label %if.end.751

if.end.751:                                       ; preds = %if.end.750, %land.lhs.true.721, %cond.true.709
  %495 = load i32, i32* %__result714, align 4, !tbaa !5
  store i32 %495, i32* %tmp752, !tbaa !5
  %496 = bitcast i32* %__result714 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %496) #2
  %497 = bitcast i8** %__s1711 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %497) #2
  %498 = load i32, i32* %tmp752, !tbaa !5
  br label %cond.end.756

cond.false.753:                                   ; preds = %land.lhs.true.705, %if.else.699
  %data754 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %499 = load i8*, i8** %data754, align 8, !tbaa !91
  %call755 = call i32 @strcmp(i8* %499, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0)) #7
  br label %cond.end.756

cond.end.756:                                     ; preds = %cond.false.753, %if.end.751
  %cond757 = phi i32 [ %498, %if.end.751 ], [ %call755, %cond.false.753 ]
  store i32 %cond757, i32* %tmp704, !tbaa !5
  %500 = bitcast i64* %__s2_len703 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %500) #2
  %501 = bitcast i64* %__s1_len701 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %501) #2
  %502 = load i32, i32* %tmp704, !tbaa !5
  %cmp758 = icmp eq i32 %502, 0
  br i1 %cmp758, label %if.then.760, label %if.else.762

if.then.760:                                      ; preds = %cond.end.756
  %503 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType761 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %503, i32 0, i32 81
  store i32 8, i32* %MediaType761, align 4, !tbaa !92
  br label %if.end.827

if.else.762:                                      ; preds = %cond.end.756
  %504 = bitcast i64* %__s1_len764 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %504) #2
  %505 = bitcast i64* %__s2_len766 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %505) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.228 to i64)), i64 1), label %land.lhs.true.768, label %cond.false.816

land.lhs.true.768:                                ; preds = %if.else.762
  %call769 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i32 0)) #8
  store i64 %call769, i64* %__s2_len766, align 8, !tbaa !59
  %506 = load i64, i64* %__s2_len766, align 8, !tbaa !59
  %cmp770 = icmp ult i64 %506, 4
  br i1 %cmp770, label %cond.true.772, label %cond.false.816

cond.true.772:                                    ; preds = %land.lhs.true.768
  %507 = bitcast i8** %__s1774 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %507) #2
  %data775 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %508 = load i8*, i8** %data775, align 8, !tbaa !91
  store i8* %508, i8** %__s1774, align 8, !tbaa !1
  %509 = bitcast i32* %__result777 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %509) #2
  %510 = load i8*, i8** %__s1774, align 8, !tbaa !1
  %arrayidx778 = getelementptr inbounds i8, i8* %510, i64 0
  %511 = load i8, i8* %arrayidx778, align 1, !tbaa !70
  %conv779 = zext i8 %511 to i32
  %512 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i32 0), align 1, !tbaa !70
  %conv780 = zext i8 %512 to i32
  %sub781 = sub nsw i32 %conv779, %conv780
  store i32 %sub781, i32* %__result777, align 4, !tbaa !5
  %513 = load i64, i64* %__s2_len766, align 8, !tbaa !59
  %cmp782 = icmp ugt i64 %513, 0
  br i1 %cmp782, label %land.lhs.true.784, label %if.end.814

land.lhs.true.784:                                ; preds = %cond.true.772
  %514 = load i32, i32* %__result777, align 4, !tbaa !5
  %cmp785 = icmp eq i32 %514, 0
  br i1 %cmp785, label %if.then.787, label %if.end.814

if.then.787:                                      ; preds = %land.lhs.true.784
  %515 = load i8*, i8** %__s1774, align 8, !tbaa !1
  %arrayidx788 = getelementptr inbounds i8, i8* %515, i64 1
  %516 = load i8, i8* %arrayidx788, align 1, !tbaa !70
  %conv789 = zext i8 %516 to i32
  %517 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i64 1), align 1, !tbaa !70
  %conv790 = zext i8 %517 to i32
  %sub791 = sub nsw i32 %conv789, %conv790
  store i32 %sub791, i32* %__result777, align 4, !tbaa !5
  %518 = load i64, i64* %__s2_len766, align 8, !tbaa !59
  %cmp792 = icmp ugt i64 %518, 1
  br i1 %cmp792, label %land.lhs.true.794, label %if.end.813

land.lhs.true.794:                                ; preds = %if.then.787
  %519 = load i32, i32* %__result777, align 4, !tbaa !5
  %cmp795 = icmp eq i32 %519, 0
  br i1 %cmp795, label %if.then.797, label %if.end.813

if.then.797:                                      ; preds = %land.lhs.true.794
  %520 = load i8*, i8** %__s1774, align 8, !tbaa !1
  %arrayidx798 = getelementptr inbounds i8, i8* %520, i64 2
  %521 = load i8, i8* %arrayidx798, align 1, !tbaa !70
  %conv799 = zext i8 %521 to i32
  %522 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i64 2), align 1, !tbaa !70
  %conv800 = zext i8 %522 to i32
  %sub801 = sub nsw i32 %conv799, %conv800
  store i32 %sub801, i32* %__result777, align 4, !tbaa !5
  %523 = load i64, i64* %__s2_len766, align 8, !tbaa !59
  %cmp802 = icmp ugt i64 %523, 2
  br i1 %cmp802, label %land.lhs.true.804, label %if.end.812

land.lhs.true.804:                                ; preds = %if.then.797
  %524 = load i32, i32* %__result777, align 4, !tbaa !5
  %cmp805 = icmp eq i32 %524, 0
  br i1 %cmp805, label %if.then.807, label %if.end.812

if.then.807:                                      ; preds = %land.lhs.true.804
  %525 = load i8*, i8** %__s1774, align 8, !tbaa !1
  %arrayidx808 = getelementptr inbounds i8, i8* %525, i64 3
  %526 = load i8, i8* %arrayidx808, align 1, !tbaa !70
  %conv809 = zext i8 %526 to i32
  %527 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv810 = zext i8 %527 to i32
  %sub811 = sub nsw i32 %conv809, %conv810
  store i32 %sub811, i32* %__result777, align 4, !tbaa !5
  br label %if.end.812

if.end.812:                                       ; preds = %if.then.807, %land.lhs.true.804, %if.then.797
  br label %if.end.813

if.end.813:                                       ; preds = %if.end.812, %land.lhs.true.794, %if.then.787
  br label %if.end.814

if.end.814:                                       ; preds = %if.end.813, %land.lhs.true.784, %cond.true.772
  %528 = load i32, i32* %__result777, align 4, !tbaa !5
  store i32 %528, i32* %tmp815, !tbaa !5
  %529 = bitcast i32* %__result777 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %529) #2
  %530 = bitcast i8** %__s1774 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %530) #2
  %531 = load i32, i32* %tmp815, !tbaa !5
  br label %cond.end.819

cond.false.816:                                   ; preds = %land.lhs.true.768, %if.else.762
  %data817 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  %532 = load i8*, i8** %data817, align 8, !tbaa !91
  %call818 = call i32 @strcmp(i8* %532, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i32 0)) #7
  br label %cond.end.819

cond.end.819:                                     ; preds = %cond.false.816, %if.end.814
  %cond820 = phi i32 [ %531, %if.end.814 ], [ %call818, %cond.false.816 ]
  store i32 %cond820, i32* %tmp767, !tbaa !5
  %533 = bitcast i64* %__s2_len766 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %533) #2
  %534 = bitcast i64* %__s1_len764 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %534) #2
  %535 = load i32, i32* %tmp767, !tbaa !5
  %cmp821 = icmp eq i32 %535, 0
  br i1 %cmp821, label %if.then.823, label %if.else.825

if.then.823:                                      ; preds = %cond.end.819
  %536 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType824 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %536, i32 0, i32 81
  store i32 9, i32* %MediaType824, align 4, !tbaa !92
  br label %if.end.826

if.else.825:                                      ; preds = %cond.end.819
  store i32 -15, i32* %ecode, align 4, !tbaa !5
  br label %pmediae

if.end.826:                                       ; preds = %if.then.823
  br label %if.end.827

if.end.827:                                       ; preds = %if.end.826, %if.then.760
  br label %if.end.828

if.end.828:                                       ; preds = %if.end.827, %if.then.697
  br label %if.end.829

if.end.829:                                       ; preds = %if.end.828, %if.then.634
  br label %if.end.830

if.end.830:                                       ; preds = %if.end.829, %if.then.571
  br label %if.end.831

if.end.831:                                       ; preds = %if.end.830, %if.then.508
  br label %if.end.832

if.end.832:                                       ; preds = %if.end.831, %if.then.445
  br label %if.end.833

if.end.833:                                       ; preds = %if.end.832, %if.then.382
  br label %if.end.834

if.end.834:                                       ; preds = %if.end.833, %if.then.258
  br label %if.end.835

if.end.835:                                       ; preds = %if.end.834, %if.then.135
  br label %if.end.836

if.end.836:                                       ; preds = %if.end.835
  br label %sw.epilog.847

sw.default.837:                                   ; preds = %if.end.82
  %537 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %537, i32* %ecode, align 4, !tbaa !5
  br label %pmediae

pmediae:                                          ; preds = %sw.default.837, %if.else.825, %if.then.87
  %538 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs838 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %538, i32 0, i32 0
  %539 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs838, align 8, !tbaa !83
  %signal_error839 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %539, i32 0, i32 7
  %540 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error839, align 8, !tbaa !85
  %541 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %542 = load i8*, i8** %param_name, align 8, !tbaa !1
  %543 = load i32, i32* %ecode, align 4, !tbaa !5
  %call840 = call i32 %540(%struct.gs_param_list_s* %541, i8* %542, i32 %543) #6
  br label %sw.bb.841

sw.bb.841:                                        ; preds = %if.end.82, %pmediae
  %544 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType842 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %544, i32 0, i32 81
  %545 = load i32, i32* %MediaType842, align 4, !tbaa !92
  %tobool = icmp ne i32 %545, 0
  br i1 %tobool, label %if.end.846, label %if.then.843

if.then.843:                                      ; preds = %sw.bb.841
  %546 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType844 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %546, i32 0, i32 81
  store i32 0, i32* %MediaType844, align 4, !tbaa !92
  %data845 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmedia, i32 0, i32 0
  store i8* null, i8** %data845, align 8, !tbaa !91
  br label %if.end.846

if.end.846:                                       ; preds = %if.then.843, %sw.bb.841
  br label %sw.epilog.847

sw.epilog.847:                                    ; preds = %if.end.846, %if.end.836
  %547 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call848 = call i32 @param_read_int(%struct.gs_param_list_s* %547, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205, i32 0, i32 0), i32* %toner_density) #6
  store i32 %call848, i32* %code, align 4, !tbaa !5
  switch i32 %call848, label %sw.default.858 [
    i32 0, label %sw.bb.849
    i32 1, label %sw.epilog.862
  ]

sw.bb.849:                                        ; preds = %sw.epilog.847
  %548 = load i32, i32* %toner_density, align 4, !tbaa !5
  %cmp850 = icmp slt i32 %548, 0
  br i1 %cmp850, label %if.then.855, label %lor.lhs.false.852

lor.lhs.false.852:                                ; preds = %sw.bb.849
  %549 = load i32, i32* %toner_density, align 4, !tbaa !5
  %cmp853 = icmp sgt i32 %549, 5
  br i1 %cmp853, label %if.then.855, label %if.else.856

if.then.855:                                      ; preds = %lor.lhs.false.852, %sw.bb.849
  store i32 -15, i32* %ecode, align 4, !tbaa !5
  br label %if.end.857

if.else.856:                                      ; preds = %lor.lhs.false.852
  br label %sw.epilog.862

if.end.857:                                       ; preds = %if.then.855
  br label %tden

sw.default.858:                                   ; preds = %sw.epilog.847
  %550 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %550, i32* %ecode, align 4, !tbaa !5
  br label %tden

tden:                                             ; preds = %sw.default.858, %if.end.857
  %551 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs859 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %551, i32 0, i32 0
  %552 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs859, align 8, !tbaa !83
  %signal_error860 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %552, i32 0, i32 7
  %553 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error860, align 8, !tbaa !85
  %554 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %555 = load i8*, i8** %param_name, align 8, !tbaa !1
  %556 = load i32, i32* %ecode, align 4, !tbaa !5
  %call861 = call i32 %553(%struct.gs_param_list_s* %554, i8* %555, i32 %556) #6
  br label %sw.epilog.862

sw.epilog.862:                                    ; preds = %tden, %sw.epilog.847, %if.else.856
  %557 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call863 = call i32 @param_read_bool(%struct.gs_param_list_s* %557, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207, i32 0, i32 0), i32* %toner_saving) #6
  store i32 %call863, i32* %code, align 4, !tbaa !5
  switch i32 %call863, label %sw.default.864 [
    i32 0, label %sw.epilog.873
    i32 1, label %sw.epilog.873
  ]

sw.default.864:                                   ; preds = %sw.epilog.862
  %558 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %559 = load i8*, i8** %param_name, align 8, !tbaa !1
  %call865 = call i32 @param_read_null(%struct.gs_param_list_s* %558, i8* %559) #6
  store i32 %call865, i32* %code, align 4, !tbaa !5
  %cmp866 = icmp eq i32 %call865, 0
  br i1 %cmp866, label %if.then.868, label %if.end.869

if.then.868:                                      ; preds = %sw.default.864
  br label %sw.epilog.873

if.end.869:                                       ; preds = %sw.default.864
  %560 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %560, i32* %ecode, align 4, !tbaa !5
  %561 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs870 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %561, i32 0, i32 0
  %562 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs870, align 8, !tbaa !83
  %signal_error871 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %562, i32 0, i32 7
  %563 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error871, align 8, !tbaa !85
  %564 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %565 = load i8*, i8** %param_name, align 8, !tbaa !1
  %566 = load i32, i32* %ecode, align 4, !tbaa !5
  %call872 = call i32 %563(%struct.gs_param_list_s* %564, i8* %565, i32 %566) #6
  br label %sw.epilog.873

sw.epilog.873:                                    ; preds = %if.end.869, %sw.epilog.862, %if.then.868, %sw.epilog.862
  %567 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.208, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call874 = call i32 @param_read_bool(%struct.gs_param_list_s* %567, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.208, i32 0, i32 0), i32* %duplex) #6
  store i32 %call874, i32* %code, align 4, !tbaa !5
  %cmp875 = icmp slt i32 %call874, 0
  br i1 %cmp875, label %if.then.877, label %if.end.881

if.then.877:                                      ; preds = %sw.epilog.873
  %568 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs878 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %568, i32 0, i32 0
  %569 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs878, align 8, !tbaa !83
  %signal_error879 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %569, i32 0, i32 7
  %570 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error879, align 8, !tbaa !85
  %571 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %572 = load i8*, i8** %param_name, align 8, !tbaa !1
  %573 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %573, i32* %ecode, align 4, !tbaa !5
  %call880 = call i32 %570(%struct.gs_param_list_s* %571, i8* %572, i32 %573) #6
  br label %if.end.881

if.end.881:                                       ; preds = %if.then.877, %sw.epilog.873
  %574 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.209, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call882 = call i32 @param_read_bool(%struct.gs_param_list_s* %574, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.209, i32 0, i32 0), i32* %tum) #6
  store i32 %call882, i32* %code, align 4, !tbaa !5
  %cmp883 = icmp slt i32 %call882, 0
  br i1 %cmp883, label %if.then.885, label %if.end.889

if.then.885:                                      ; preds = %if.end.881
  %575 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs886 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %575, i32 0, i32 0
  %576 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs886, align 8, !tbaa !83
  %signal_error887 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %576, i32 0, i32 7
  %577 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error887, align 8, !tbaa !85
  %578 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %579 = load i8*, i8** %param_name, align 8, !tbaa !1
  %580 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %580, i32* %ecode, align 4, !tbaa !5
  %call888 = call i32 %577(%struct.gs_param_list_s* %578, i8* %579, i32 %580) #6
  br label %if.end.889

if.end.889:                                       ; preds = %if.then.885, %if.end.881
  %581 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.206, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call890 = call i32 @param_read_bool(%struct.gs_param_list_s* %581, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.206, i32 0, i32 0), i32* %landscape) #6
  store i32 %call890, i32* %code, align 4, !tbaa !5
  %cmp891 = icmp slt i32 %call890, 0
  br i1 %cmp891, label %if.then.893, label %if.end.897

if.then.893:                                      ; preds = %if.end.889
  %582 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs894 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %582, i32 0, i32 0
  %583 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs894, align 8, !tbaa !83
  %signal_error895 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %583, i32 0, i32 7
  %584 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error895, align 8, !tbaa !85
  %585 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %586 = load i8*, i8** %param_name, align 8, !tbaa !1
  %587 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %587, i32* %ecode, align 4, !tbaa !5
  %call896 = call i32 %584(%struct.gs_param_list_s* %585, i8* %586, i32 %587) #6
  br label %if.end.897

if.end.897:                                       ; preds = %if.then.893, %if.end.889
  %588 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.210, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call898 = call i32 @param_read_bool(%struct.gs_param_list_s* %588, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.210, i32 0, i32 0), i32* %faceup) #6
  store i32 %call898, i32* %code, align 4, !tbaa !5
  %cmp899 = icmp slt i32 %call898, 0
  br i1 %cmp899, label %if.then.901, label %if.end.905

if.then.901:                                      ; preds = %if.end.897
  %589 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs902 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %589, i32 0, i32 0
  %590 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs902, align 8, !tbaa !83
  %signal_error903 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %590, i32 0, i32 7
  %591 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error903, align 8, !tbaa !85
  %592 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %593 = load i8*, i8** %param_name, align 8, !tbaa !1
  %594 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %594, i32* %ecode, align 4, !tbaa !5
  %call904 = call i32 %591(%struct.gs_param_list_s* %592, i8* %593, i32 %594) #6
  br label %if.end.905

if.end.905:                                       ; preds = %if.then.901, %if.end.897
  %595 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.229, i32 0, i32 0), i8** %param_name, align 8, !tbaa !1
  %call906 = call i32 @param_read_int(%struct.gs_param_list_s* %595, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.229, i32 0, i32 0), i32* %bpp) #6
  store i32 %call906, i32* %code, align 4, !tbaa !5
  switch i32 %call906, label %sw.default.916 [
    i32 0, label %sw.bb.907
    i32 1, label %sw.epilog.920
  ]

sw.bb.907:                                        ; preds = %if.end.905
  %596 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp908 = icmp ne i32 %596, 8
  br i1 %cmp908, label %land.lhs.true.910, label %if.else.914

land.lhs.true.910:                                ; preds = %sw.bb.907
  %597 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp911 = icmp ne i32 %597, 24
  br i1 %cmp911, label %if.then.913, label %if.else.914

if.then.913:                                      ; preds = %land.lhs.true.910
  store i32 -15, i32* %ecode, align 4, !tbaa !5
  br label %if.end.915

if.else.914:                                      ; preds = %land.lhs.true.910, %sw.bb.907
  br label %sw.epilog.920

if.end.915:                                       ; preds = %if.then.913
  br label %bppe

sw.default.916:                                   ; preds = %if.end.905
  %598 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %598, i32* %ecode, align 4, !tbaa !5
  br label %bppe

bppe:                                             ; preds = %sw.default.916, %if.end.915
  %599 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs917 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %599, i32 0, i32 0
  %600 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs917, align 8, !tbaa !83
  %signal_error918 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %600, i32 0, i32 7
  %601 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error918, align 8, !tbaa !85
  %602 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %603 = load i8*, i8** %param_name, align 8, !tbaa !1
  %604 = load i32, i32* %ecode, align 4, !tbaa !5
  %call919 = call i32 %601(%struct.gs_param_list_s* %602, i8* %603, i32 %604) #6
  br label %sw.epilog.920

sw.epilog.920:                                    ; preds = %bppe, %if.end.905, %if.else.914
  %605 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp921 = icmp ne i32 %605, 0
  br i1 %cmp921, label %if.then.923, label %if.end.955

if.then.923:                                      ; preds = %sw.epilog.920
  %606 = load i32, i32* %bpp, align 4, !tbaa !5
  %conv924 = trunc i32 %606 to i16
  %607 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info925 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %607, i32 0, i32 11
  %depth926 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info925, i32 0, i32 3
  store i16 %conv924, i16* %depth926, align 2, !tbaa !72
  %608 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp927 = icmp eq i32 %608, 8
  %cond929 = select i1 %cmp927, i32 1, i32 3
  %609 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info930 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %609, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info930, i32 0, i32 1
  store i32 %cond929, i32* %num_components, align 4, !tbaa !93
  %610 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp931 = icmp sgt i32 %610, 8
  %cond933 = select i1 %cmp931, i32 255, i32 1000
  %611 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info934 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %611, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info934, i32 0, i32 5
  store i32 %cond933, i32* %max_gray, align 4, !tbaa !94
  %612 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp935 = icmp sgt i32 %612, 8
  %cond937 = select i1 %cmp935, i32 255, i32 1000
  %613 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info938 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %613, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info938, i32 0, i32 6
  store i32 %cond937, i32* %max_color, align 4, !tbaa !95
  %614 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp939 = icmp sgt i32 %614, 8
  %cond941 = select i1 %cmp939, i32 256, i32 5
  %615 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info942 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %615, i32 0, i32 11
  %dither_grays = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info942, i32 0, i32 7
  store i32 %cond941, i32* %dither_grays, align 4, !tbaa !96
  %616 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp943 = icmp sgt i32 %616, 8
  %cond945 = select i1 %cmp943, i32 256, i32 2
  %617 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info946 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %617, i32 0, i32 11
  %dither_colors = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info946, i32 0, i32 8
  store i32 %cond945, i32* %dither_colors, align 4, !tbaa !97
  %618 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp947 = icmp eq i32 %618, 8
  %cond949 = select i1 %cmp947, i64 (%struct.gx_device_s*, i16*)* @gx_default_gray_map_rgb_color, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color
  %619 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %procs950 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %619, i32 0, i32 42
  %map_rgb_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs950, i32 0, i32 5
  store i64 (%struct.gx_device_s*, i16*)* %cond949, i64 (%struct.gx_device_s*, i16*)** %map_rgb_color, align 8, !tbaa !98
  %620 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp951 = icmp eq i32 %620, 8
  %cond953 = select i1 %cmp951, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_gray_map_color_rgb, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb
  %621 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %procs954 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %621, i32 0, i32 42
  %map_color_rgb = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs954, i32 0, i32 6
  store i32 (%struct.gx_device_s*, i64, i16*)* %cond953, i32 (%struct.gx_device_s*, i64, i16*)** %map_color_rgb, align 8, !tbaa !99
  br label %if.end.955

if.end.955:                                       ; preds = %if.then.923, %sw.epilog.920
  %622 = load i32, i32* %ecode, align 4, !tbaa !5
  %cmp956 = icmp slt i32 %622, 0
  br i1 %cmp956, label %if.then.958, label %if.end.959

if.then.958:                                      ; preds = %if.end.955
  %623 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %623, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.959:                                       ; preds = %if.end.955
  %624 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %625 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call960 = call i32 @gdev_vector_put_params(%struct.gx_device_s* %624, %struct.gs_param_list_s* %625) #6
  store i32 %call960, i32* %code, align 4, !tbaa !5
  %626 = load i32, i32* %code, align 4, !tbaa !5
  %cmp961 = icmp slt i32 %626, 0
  br i1 %cmp961, label %if.then.963, label %if.end.964

if.then.963:                                      ; preds = %if.end.959
  %627 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %627, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.964:                                       ; preds = %if.end.959
  %628 = load i32, i32* %modelJP, align 4, !tbaa !5
  %629 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %modelJP965 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %629, i32 0, i32 120
  store i32 %628, i32* %modelJP965, align 4, !tbaa !82
  %630 = load i32, i32* %capFaceUp, align 4, !tbaa !5
  %631 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capFaceUp966 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %631, i32 0, i32 121
  store i32 %630, i32* %capFaceUp966, align 4, !tbaa !87
  %632 = load i32, i32* %capDuplexUnit, align 4, !tbaa !5
  %633 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capDuplexUnit967 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %633, i32 0, i32 122
  store i32 %632, i32* %capDuplexUnit967, align 4, !tbaa !88
  %634 = load i32, i32* %capMaxResolution, align 4, !tbaa !5
  %635 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capMaxResolution968 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %635, i32 0, i32 123
  store i32 %634, i32* %capMaxResolution968, align 4, !tbaa !89
  %636 = load i32, i32* %mf, align 4, !tbaa !5
  %637 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %manualFeed969 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %637, i32 0, i32 68
  store i32 %636, i32* %manualFeed969, align 4, !tbaa !73
  %638 = load i32, i32* %cass, align 4, !tbaa !5
  %639 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cassetFeed970 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %639, i32 0, i32 69
  store i32 %638, i32* %cassetFeed970, align 4, !tbaa !74
  %640 = load i32, i32* %faceup, align 4, !tbaa !5
  %641 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %faceup971 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %641, i32 0, i32 80
  store i32 %640, i32* %faceup971, align 4, !tbaa !79
  %642 = load i32, i32* %RITOff, align 4, !tbaa !5
  %643 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %RITOff972 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %643, i32 0, i32 70
  store i32 %642, i32* %RITOff972, align 4, !tbaa !81
  %644 = load i32, i32* %landscape, align 4, !tbaa !5
  %645 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %orientation973 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %645, i32 0, i32 79
  store i32 %644, i32* %orientation973, align 4, !tbaa !47
  %646 = load i32, i32* %toner_density, align 4, !tbaa !5
  %647 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_density974 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %647, i32 0, i32 72
  store i32 %646, i32* %toner_density974, align 4, !tbaa !77
  %648 = load i32, i32* %toner_saving, align 4, !tbaa !5
  %649 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_saving975 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %649, i32 0, i32 73
  store i32 %648, i32* %toner_saving975, align 4, !tbaa !78
  %650 = load i32, i32* %collate, align 4, !tbaa !5
  %651 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Collate976 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %651, i32 0, i32 71
  store i32 %650, i32* %Collate976, align 4, !tbaa !76
  %652 = load i32, i32* %duplex, align 4, !tbaa !5
  %653 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Duplex977 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %653, i32 0, i32 83
  store i32 %652, i32* %Duplex977, align 4, !tbaa !80
  %654 = load i32, i32* %tum, align 4, !tbaa !5
  %655 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Tumble978 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %655, i32 0, i32 84
  store i32 %654, i32* %Tumble978, align 4, !tbaa !75
  %656 = load i32, i32* %bpp, align 4, !tbaa !5
  %cmp979 = icmp ne i32 %656, 0
  br i1 %cmp979, label %land.lhs.true.981, label %if.end.988

land.lhs.true.981:                                ; preds = %if.end.964
  %657 = load i32, i32* %bpp, align 4, !tbaa !5
  %658 = load i32, i32* %old_bpp, align 4, !tbaa !5
  %cmp982 = icmp ne i32 %657, %658
  br i1 %cmp982, label %land.lhs.true.984, label %if.end.988

land.lhs.true.984:                                ; preds = %land.lhs.true.981
  %659 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %is_open = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %659, i32 0, i32 9
  %660 = load i32, i32* %is_open, align 4, !tbaa !100
  %tobool985 = icmp ne i32 %660, 0
  br i1 %tobool985, label %if.then.986, label %if.end.988

if.then.986:                                      ; preds = %land.lhs.true.984
  %661 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call987 = call i32 @gs_closedevice(%struct.gx_device_s* %661) #6
  store i32 %call987, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.988:                                       ; preds = %land.lhs.true.984, %land.lhs.true.981, %if.end.964
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.988, %if.then.986, %if.then.963, %if.then.958
  %662 = bitcast i32* %capMaxResolution to i8*
  call void @llvm.lifetime.end(i64 4, i8* %662) #2
  %663 = bitcast i32* %capDuplexUnit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %663) #2
  %664 = bitcast i32* %capFaceUp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %664) #2
  %665 = bitcast i32* %modelJP to i8*
  call void @llvm.lifetime.end(i64 4, i8* %665) #2
  %666 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %666) #2
  %667 = bitcast i32* %old_bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %667) #2
  %668 = bitcast i32* %RITOff to i8*
  call void @llvm.lifetime.end(i64 4, i8* %668) #2
  %669 = bitcast i32* %duplex to i8*
  call void @llvm.lifetime.end(i64 4, i8* %669) #2
  %670 = bitcast i32* %faceup to i8*
  call void @llvm.lifetime.end(i64 4, i8* %670) #2
  %671 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %671) #2
  %672 = bitcast i32* %toner_saving to i8*
  call void @llvm.lifetime.end(i64 4, i8* %672) #2
  %673 = bitcast i32* %toner_density to i8*
  call void @llvm.lifetime.end(i64 4, i8* %673) #2
  %674 = bitcast i32* %collate to i8*
  call void @llvm.lifetime.end(i64 4, i8* %674) #2
  %675 = bitcast i32* %tum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %675) #2
  %676 = bitcast i32* %cass to i8*
  call void @llvm.lifetime.end(i64 4, i8* %676) #2
  %677 = bitcast i32* %mf to i8*
  call void @llvm.lifetime.end(i64 4, i8* %677) #2
  %678 = bitcast %struct.gs_param_string_s* %pmedia to i8*
  call void @llvm.lifetime.end(i64 16, i8* %678) #2
  %679 = bitcast i8** %param_name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %679) #2
  %680 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %680) #2
  %681 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %681) #2
  %682 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %682) #2
  %683 = load i32, i32* %retval
  ret i32 %683
}

declare %struct.gx_device_s* @gx_page_device_get_page_device(%struct.gx_device_s*) #1

declare i32 @gdev_vector_fill_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_stroke_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_fill_mask(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, %struct.gx_device_color_s* %pdcolor, i32 %depth, i32 %lop, %struct.gx_clip_path_s* %pcpath) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %depth.addr = alloca i32, align 4
  %lop.addr = alloca i32, align 4
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %color = alloca i64, align 8
  %obuf = alloca [64 x i8], align 16
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %cleanup.dest.slot = alloca i32
  %obuf51 = alloca [128 x i8], align 16
  %i = alloca i32, align 4
  %width_bytes = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %buf = alloca i8*, align 8
  %i90 = alloca i32, align 4
  %width_bytes91 = alloca i32, align 4
  %num_bytes94 = alloca i32, align 4
  %buf96 = alloca i8*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !59
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  store i32 %lop, i32* %lop.addr, align 4, !tbaa !5
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %7) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %8 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %9, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %10 = load i64, i64* %pure, align 8, !tbaa !59
  store i64 %10, i64* %color, align 8, !tbaa !59
  %11 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %11) #2
  %12 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  store %struct.gs_imager_state_s* null, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %13 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp = icmp sle i32 %13, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %14 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp1 = icmp sle i32 %14, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %15 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %cmp2 = icmp sgt i32 %15, 1
  br i1 %cmp2, label %if.then.12, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.end
  %16 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %17 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %18 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call4 = call i32 @gdev_vector_update_fill_color(%struct.gx_device_vector_s* %16, %struct.gs_imager_state_s* %17, %struct.gx_device_color_s* %18) #6
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then.12, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %19 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %20 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call7 = call i32 @gdev_vector_update_clip_path(%struct.gx_device_vector_s* %19, %struct.gx_clip_path_s* %20) #6
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then.12, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %21 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %22 = load i32, i32* %lop.addr, align 4, !tbaa !5
  %call10 = call i32 @gdev_vector_update_log_op(%struct.gx_device_vector_s* %21, i32 %22) #6
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false.3, %if.end
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %24 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %25 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %26 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %27 = load i64, i64* %id.addr, align 8, !tbaa !59
  %28 = load i32, i32* %x.addr, align 4, !tbaa !5
  %29 = load i32, i32* %y.addr, align 4, !tbaa !5
  %30 = load i32, i32* %w.addr, align 4, !tbaa !5
  %31 = load i32, i32* %h.addr, align 4, !tbaa !5
  %32 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %33 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %34 = load i32, i32* %lop.addr, align 4, !tbaa !5
  %35 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call13 = call i32 @gx_default_fill_mask(%struct.gx_device_s* %23, i8* %24, i32 %25, i32 %26, i64 %27, i32 %28, i32 %29, i32 %30, i32 %31, %struct.gx_device_color_s* %32, i32 %33, i32 %34, %struct.gx_clip_path_s* %35) #6
  store i32 %call13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.14:                                        ; preds = %lor.lhs.false.9
  %36 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %36, i32 0, i32 67
  %37 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp15 = icmp eq i32 0, %37
  br i1 %cmp15, label %if.then.16, label %if.else.39

if.then.16:                                       ; preds = %if.end.14
  %38 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %38, i32 0, i32 0
  %39 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !60
  %40 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** @gx_dc_type_pure, align 8, !tbaa !1
  %cmp17 = icmp eq %struct.gx_device_color_type_s* %39, %40
  br i1 %cmp17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %if.then.16
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.19:                                        ; preds = %if.then.16
  %41 = load i64, i64* %color, align 8, !tbaa !59
  %42 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %current_color = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %42, i32 0, i32 93
  store i64 %41, i64* %current_color, align 8, !tbaa !101
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %43 = load i64, i64* %color, align 8, !tbaa !59
  %call20 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.176, i32 0, i32 0), i64 %43) #6
  %44 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay21 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call22 = call i32 @lputs(%struct.stream_s* %44, i8* %arraydecay21) #6
  %45 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %45, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %46 = load float, float* %arrayidx, align 4, !tbaa !51
  %cmp23 = fcmp oeq float %46, 1.200000e+03
  br i1 %cmp23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %if.end.19
  %47 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call25 = call i32 @lputs(%struct.stream_s* %47, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  br label %if.end.34

if.else:                                          ; preds = %if.end.19
  %48 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution26 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %48, i32 0, i32 22
  %arrayidx27 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution26, i32 0, i64 0
  %49 = load float, float* %arrayidx27, align 4, !tbaa !51
  %cmp28 = fcmp oeq float %49, 6.000000e+02
  br i1 %cmp28, label %if.then.29, label %if.else.31

if.then.29:                                       ; preds = %if.else
  %50 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call30 = call i32 @lputs(%struct.stream_s* %50, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  br label %if.end.33

if.else.31:                                       ; preds = %if.else
  %51 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call32 = call i32 @lputs(%struct.stream_s* %51, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.31, %if.then.29
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.24
  %52 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %52, i32 0, i32 87
  %53 = load i32, i32* %MaskState, align 4, !tbaa !64
  %cmp35 = icmp ne i32 %53, 1
  br i1 %cmp35, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %if.end.34
  %54 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState37 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %54, i32 0, i32 87
  store i32 1, i32* %MaskState37, align 4, !tbaa !64
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %if.end.34
  br label %if.end.89

if.else.39:                                       ; preds = %if.end.14
  %55 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState40 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %55, i32 0, i32 87
  %56 = load i32, i32* %MaskState40, align 4, !tbaa !64
  %cmp41 = icmp ne i32 %56, 1
  br i1 %cmp41, label %if.then.42, label %if.end.45

if.then.42:                                       ; preds = %if.else.39
  %57 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call43 = call i32 @lputs(%struct.stream_s* %57, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.232, i32 0, i32 0)) #6
  %58 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState44 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %58, i32 0, i32 87
  store i32 1, i32* %MaskState44, align 4, !tbaa !64
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.42, %if.else.39
  %59 = load i64, i64* %id.addr, align 8, !tbaa !59
  %cmp46 = icmp ne i64 %59, 0
  br i1 %cmp46, label %land.lhs.true, label %if.end.88

land.lhs.true:                                    ; preds = %if.end.45
  %60 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %cmp47 = icmp eq i32 %60, 0
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.88

land.lhs.true.48:                                 ; preds = %land.lhs.true
  %61 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %cmp49 = icmp eq i32 %61, 1
  br i1 %cmp49, label %if.then.50, label %if.end.88

if.then.50:                                       ; preds = %land.lhs.true.48
  %62 = bitcast [128 x i8]* %obuf51 to i8*
  call void @llvm.lifetime.start(i64 128, i8* %62) #2
  %63 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %63) #2
  %64 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #2
  %65 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %65, 7
  %shr = ashr i32 %add, 3
  store i32 %shr, i32* %width_bytes, align 4, !tbaa !5
  %66 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %66) #2
  %67 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %68 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul = mul i32 %67, %68
  store i32 %mul, i32* %num_bytes, align 4, !tbaa !5
  %69 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %69) #2
  %70 = load i64, i64* %id.addr, align 8, !tbaa !59
  %and = and i64 %70, 1023
  %71 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %id_cache = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %71, i32 0, i32 109
  %arrayidx52 = getelementptr inbounds [1024 x i64], [1024 x i64]* %id_cache, i32 0, i64 %and
  %72 = load i64, i64* %arrayidx52, align 8, !tbaa !59
  %73 = load i64, i64* %id.addr, align 8, !tbaa !59
  %cmp53 = icmp ne i64 %72, %73
  br i1 %cmp53, label %if.then.54, label %if.end.78

if.then.54:                                       ; preds = %if.then.50
  %74 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %74, i32 0, i32 3
  %75 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %75, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %76 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %77 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory55 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %77, i32 0, i32 3
  %78 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory55, align 8, !tbaa !66
  %79 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %call56 = call i8* %76(%struct.gs_memory_s* %78, i32 %79, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0)) #6
  store i8* %call56, i8** %buf, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.54
  %80 = load i32, i32* %i, align 4, !tbaa !5
  %81 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp57 = icmp slt i32 %80, %81
  br i1 %cmp57, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %82 = load i8*, i8** %buf, align 8, !tbaa !1
  %83 = load i32, i32* %i, align 4, !tbaa !5
  %84 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul58 = mul i32 %83, %84
  %idx.ext = zext i32 %mul58 to i64
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 %idx.ext
  %85 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %86 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr59 = ashr i32 %86, 3
  %idx.ext60 = sext i32 %shr59 to i64
  %add.ptr61 = getelementptr inbounds i8, i8* %85, i64 %idx.ext60
  %87 = load i32, i32* %i, align 4, !tbaa !5
  %88 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul62 = mul nsw i32 %87, %88
  %idx.ext63 = sext i32 %mul62 to i64
  %add.ptr64 = getelementptr inbounds i8, i8* %add.ptr61, i64 %idx.ext63
  %89 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %conv = zext i32 %89 to i64
  %call65 = call i8* @memcpy(i8* %add.ptr, i8* %add.ptr64, i64 %conv) #7
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %90 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %90, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay66 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %91 = load i32, i32* %num_bytes, align 4, !tbaa !5
  %92 = load i64, i64* %id.addr, align 8, !tbaa !59
  %and67 = and i64 %92, 1023
  %conv68 = trunc i64 %and67 to i32
  %93 = load i32, i32* %w.addr, align 4, !tbaa !5
  %94 = load i32, i32* %h.addr, align 4, !tbaa !5
  %call69 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay66, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.257, i32 0, i32 0), i32 %91, i32 %conv68, i32 %93, i32 %94) #6
  %95 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay70 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %call71 = call i32 @lputs(%struct.stream_s* %95, i8* %arraydecay70) #6
  %96 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %97 = load i8*, i8** %buf, align 8, !tbaa !1
  %98 = load i32, i32* %num_bytes, align 4, !tbaa !5
  call void @put_bytes(%struct.stream_s* %96, i8* %97, i32 %98) #6
  %99 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory72 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %99, i32 0, i32 3
  %100 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory72, align 8, !tbaa !66
  %procs73 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %100, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs73, i32 0, i32 2
  %101 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %102 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory74 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %102, i32 0, i32 3
  %103 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory74, align 8, !tbaa !66
  %104 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %101(%struct.gs_memory_s* %103, i8* %104, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0)) #6
  %105 = load i64, i64* %id.addr, align 8, !tbaa !59
  %106 = load i64, i64* %id.addr, align 8, !tbaa !59
  %and75 = and i64 %106, 1023
  %107 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %id_cache76 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %107, i32 0, i32 109
  %arrayidx77 = getelementptr inbounds [1024 x i64], [1024 x i64]* %id_cache76, i32 0, i64 %and75
  store i64 %105, i64* %arrayidx77, align 8, !tbaa !59
  br label %if.end.78

if.end.78:                                        ; preds = %for.end, %if.then.50
  %arraydecay79 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %108 = load i32, i32* %x.addr, align 4, !tbaa !5
  %109 = load i32, i32* %y.addr, align 4, !tbaa !5
  %call80 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay79, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.236, i32 0, i32 0), i32 %108, i32 %109) #6
  %110 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay81 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %call82 = call i32 @lputs(%struct.stream_s* %110, i8* %arraydecay81) #6
  %arraydecay83 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %111 = load i64, i64* %id.addr, align 8, !tbaa !59
  %and84 = and i64 %111, 1023
  %call85 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay83, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.258, i32 0, i32 0), i64 %and84) #6
  %112 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay86 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf51, i32 0, i32 0
  %call87 = call i32 @lputs(%struct.stream_s* %112, i8* %arraydecay86) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %113 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = bitcast i32* %num_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %114) #2
  %115 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %115) #2
  %116 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %116) #2
  %117 = bitcast [128 x i8]* %obuf51 to i8*
  call void @llvm.lifetime.end(i64 128, i8* %117) #2
  br label %cleanup

if.end.88:                                        ; preds = %land.lhs.true.48, %land.lhs.true, %if.end.45
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.end.38
  %118 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %119 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %120 = load i32, i32* %x.addr, align 4, !tbaa !5
  %121 = load i32, i32* %y.addr, align 4, !tbaa !5
  %122 = load i32, i32* %w.addr, align 4, !tbaa !5
  %123 = load i32, i32* %h.addr, align 4, !tbaa !5
  %124 = load i32, i32* %w.addr, align 4, !tbaa !5
  %125 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_begin(%struct.gx_device_s* %118, i32 %119, i32 %120, i32 %121, i32 %122, i32 %123, i32 %124, i32 %125, i32 0) #6
  %126 = bitcast i32* %i90 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %126) #2
  %127 = bitcast i32* %width_bytes91 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %127) #2
  %128 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add92 = add nsw i32 %128, 7
  %shr93 = ashr i32 %add92, 3
  store i32 %shr93, i32* %width_bytes91, align 4, !tbaa !5
  %129 = bitcast i32* %num_bytes94 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %129) #2
  %130 = load i32, i32* %width_bytes91, align 4, !tbaa !5
  %131 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul95 = mul i32 %130, %131
  store i32 %mul95, i32* %num_bytes94, align 4, !tbaa !5
  %132 = bitcast i8** %buf96 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %132) #2
  %133 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory97 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %133, i32 0, i32 3
  %134 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory97, align 8, !tbaa !66
  %procs98 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %134, i32 0, i32 1
  %alloc_bytes99 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs98, i32 0, i32 7
  %135 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes99, align 8, !tbaa !67
  %136 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory100 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %136, i32 0, i32 3
  %137 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory100, align 8, !tbaa !66
  %138 = load i32, i32* %num_bytes94, align 4, !tbaa !5
  %call101 = call i8* %135(%struct.gs_memory_s* %137, i32 %138, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0)) #6
  store i8* %call101, i8** %buf96, align 8, !tbaa !1
  store i32 0, i32* %i90, align 4, !tbaa !5
  br label %for.cond.102

for.cond.102:                                     ; preds = %for.inc.117, %if.end.89
  %139 = load i32, i32* %i90, align 4, !tbaa !5
  %140 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp103 = icmp slt i32 %139, %140
  br i1 %cmp103, label %for.body.105, label %for.end.119

for.body.105:                                     ; preds = %for.cond.102
  %141 = load i8*, i8** %buf96, align 8, !tbaa !1
  %142 = load i32, i32* %i90, align 4, !tbaa !5
  %143 = load i32, i32* %width_bytes91, align 4, !tbaa !5
  %mul106 = mul i32 %142, %143
  %idx.ext107 = zext i32 %mul106 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %141, i64 %idx.ext107
  %144 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %145 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr109 = ashr i32 %145, 3
  %idx.ext110 = sext i32 %shr109 to i64
  %add.ptr111 = getelementptr inbounds i8, i8* %144, i64 %idx.ext110
  %146 = load i32, i32* %i90, align 4, !tbaa !5
  %147 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul112 = mul nsw i32 %146, %147
  %idx.ext113 = sext i32 %mul112 to i64
  %add.ptr114 = getelementptr inbounds i8, i8* %add.ptr111, i64 %idx.ext113
  %148 = load i32, i32* %width_bytes91, align 4, !tbaa !5
  %conv115 = zext i32 %148 to i64
  %call116 = call i8* @memcpy(i8* %add.ptr108, i8* %add.ptr114, i64 %conv115) #7
  br label %for.inc.117

for.inc.117:                                      ; preds = %for.body.105
  %149 = load i32, i32* %i90, align 4, !tbaa !5
  %inc118 = add nsw i32 %149, 1
  store i32 %inc118, i32* %i90, align 4, !tbaa !5
  br label %for.cond.102

for.end.119:                                      ; preds = %for.cond.102
  %150 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %151 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %152 = load i8*, i8** %buf96, align 8, !tbaa !1
  %153 = load i32, i32* %num_bytes94, align 4, !tbaa !5
  %154 = load i32, i32* %w.addr, align 4, !tbaa !5
  %155 = load i32, i32* %h.addr, align 4, !tbaa !5
  call void @escv_write_data(%struct.gx_device_s* %150, i32 %151, i8* %152, i32 %153, i32 %154, i32 %155) #6
  %156 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %157 = load i32, i32* %depth.addr, align 4, !tbaa !5
  call void @escv_write_end(%struct.gx_device_s* %156, i32 %157) #6
  %158 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory120 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %158, i32 0, i32 3
  %159 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory120, align 8, !tbaa !66
  %procs121 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %159, i32 0, i32 1
  %free_object122 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs121, i32 0, i32 2
  %160 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object122, align 8, !tbaa !71
  %161 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory123 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %161, i32 0, i32 3
  %162 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory123, align 8, !tbaa !66
  %163 = load i8*, i8** %buf96, align 8, !tbaa !1
  call void %160(%struct.gs_memory_s* %162, i8* %163, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0)) #6
  %164 = bitcast i8** %buf96 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %164) #2
  %165 = bitcast i32* %num_bytes94 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %165) #2
  %166 = bitcast i32* %width_bytes91 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %166) #2
  %167 = bitcast i32* %i90 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %167) #2
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.119, %if.end.78, %if.then.18, %if.then.12, %if.then
  %168 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %168) #2
  %169 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %169) #2
  %170 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %170) #2
  %171 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %171) #2
  %172 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %172) #2
  %173 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %173) #2
  %174 = load i32, i32* %retval
  ret i32 %174
}

declare i32 @gdev_vector_fill_trapezoid(%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

declare i32 @gdev_vector_fill_parallelogram(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

declare i32 @gdev_vector_fill_triangle(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_begin_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_image1_s* %pim, i32 %format, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gx_image_enum_common_s** %pinfo) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pim.addr = alloca %struct.gs_image1_s*, align 8
  %format.addr = alloca i32, align 4
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %pie = alloca %struct.gdev_vector_image_enum_s*, align 8
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %index = alloca i32, align 4
  %num_components = alloca i32, align 4
  %can_do = alloca i32, align 4
  %imat = alloca %struct.gs_matrix_s, align 4
  %code = alloca i32, align 4
  %ty = alloca i32, align 4
  %bx = alloca i32, align 4
  %by = alloca i32, align 4
  %cx = alloca i32, align 4
  %cy = alloca i32, align 4
  %dx = alloca i32, align 4
  %dy = alloca i32, align 4
  %sx = alloca i32, align 4
  %sy = alloca i32, align 4
  %color = alloca i64, align 8
  %obuf = alloca [128 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_image1_s* %pim, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  store i32 %format, i32* %format.addr, align 4, !tbaa !70
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_escv_s* %7 to %struct.gx_device_vector_s*
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %8) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %9 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %10, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %11 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !102
  %12 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call1 = call i8* %11(%struct.gs_memory_s* %12, %struct.gs_memory_struct_type_s* @st_vector_image_enum, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.259, i32 0, i32 0)) #6
  %13 = bitcast i8* %call1 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %13, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %14 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  %15 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ColorSpace = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %15, i32 0, i32 9
  %16 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %ColorSpace, align 8, !tbaa !103
  store %struct.gs_color_space_s* %16, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %17 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = bitcast i32* %num_components to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  store i32 1, i32* %num_components, align 4, !tbaa !5
  %19 = bitcast i32* %can_do to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #2
  %20 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct.gs_int_rect_s* %20, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %21 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %format2 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %21, i32 0, i32 7
  %22 = load i32, i32* %format2, align 4, !tbaa !105
  %cmp3 = icmp eq i32 %22, 0
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %23 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %format4 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %23, i32 0, i32 7
  %24 = load i32, i32* %format4, align 4, !tbaa !105
  %cmp5 = icmp eq i32 %24, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %25 = phi i1 [ true, %land.rhs ], [ %cmp5, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %26 = phi i1 [ false, %entry ], [ %25, %lor.end ]
  %land.ext = zext i1 %26 to i32
  store i32 %land.ext, i32* %can_do, align 4, !tbaa !5
  %27 = bitcast %struct.gs_matrix_s* %imat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %27) #2
  %28 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = bitcast i32* %ty to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #2
  %30 = bitcast i32* %bx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %30) #2
  %31 = bitcast i32* %by to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #2
  %32 = bitcast i32* %cx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %32) #2
  %33 = bitcast i32* %cy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %33) #2
  %34 = bitcast i32* %dx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #2
  %35 = bitcast i32* %dy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %35) #2
  %36 = bitcast i32* %sx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %36) #2
  %37 = bitcast i32* %sy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %37) #2
  %38 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %38) #2
  %39 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %39, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %40 = load i64, i64* %pure, align 8, !tbaa !59
  store i64 %40, i64* %color, align 8, !tbaa !59
  %41 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %41) #2
  %42 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %cmp6 = icmp eq %struct.gdev_vector_image_enum_s* %42, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.end
  %43 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %44 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %44, i32 0, i32 3
  store %struct.gs_memory_s* %43, %struct.gs_memory_s** %memory, align 8, !tbaa !106
  %45 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %46 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %47 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %48 = load i32, i32* %format.addr, align 4, !tbaa !70
  %49 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %50 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %51 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %52 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %53 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %call7 = call i32 @gdev_vector_begin_image(%struct.gx_device_vector_s* %45, %struct.gs_imager_state_s* %46, %struct.gs_image1_s* %47, i32 %48, %struct.gs_int_rect_s* %49, %struct.gx_device_color_s* %50, %struct.gx_clip_path_s* %51, %struct.gs_memory_s* %52, %struct.gx_image_enum_procs_s* @escv_image_enum_procs, %struct.gdev_vector_image_enum_s* %53) #6
  store i32 %call7, i32* %code, align 4, !tbaa !5
  %54 = load i32, i32* %code, align 4, !tbaa !5
  %cmp8 = icmp slt i32 %54, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %55 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %55, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.10:                                        ; preds = %if.end
  %56 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %57 = bitcast %struct.gdev_vector_image_enum_s* %56 to %struct.gx_image_enum_common_s*
  %58 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s* %57, %struct.gx_image_enum_common_s** %58, align 8, !tbaa !1
  %59 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %59, i32 0, i32 10
  %60 = load i32, i32* %ImageMask, align 4, !tbaa !108
  %tobool = icmp ne i32 %60, 0
  br i1 %tobool, label %if.end.52, label %if.then.11

if.then.11:                                       ; preds = %if.end.10
  %61 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %call12 = call i32 @gs_color_space_get_index(%struct.gs_color_space_s* %61) #6
  store i32 %call12, i32* %index, align 4, !tbaa !70
  %62 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %call13 = call i32 @gs_color_space_num_components(%struct.gs_color_space_s* %62) #6
  store i32 %call13, i32* %num_components, align 4, !tbaa !5
  %63 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %CombineWithColor = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %63, i32 0, i32 8
  %64 = load i32, i32* %CombineWithColor, align 4, !tbaa !109
  %tobool14 = icmp ne i32 %64, 0
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.then.11
  store i32 0, i32* %can_do, align 4, !tbaa !5
  br label %if.end.51

if.else:                                          ; preds = %if.then.11
  %65 = load i32, i32* %index, align 4, !tbaa !70
  switch i32 %65, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.29
  ]

sw.bb:                                            ; preds = %if.else
  %66 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %66, i32 0, i32 5
  %arrayidx = getelementptr inbounds [130 x float], [130 x float]* %Decode, i32 0, i64 0
  %67 = load float, float* %arrayidx, align 4, !tbaa !51
  %cmp16 = fcmp une float %67, 0.000000e+00
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %68 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode17 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %68, i32 0, i32 5
  %arrayidx18 = getelementptr inbounds [130 x float], [130 x float]* %Decode17, i32 0, i64 1
  %69 = load float, float* %arrayidx18, align 4, !tbaa !51
  %cmp19 = fcmp une float %69, 1.000000e+00
  br i1 %cmp19, label %land.lhs.true, label %if.end.28

land.lhs.true:                                    ; preds = %lor.lhs.false, %sw.bb
  %70 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode20 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %70, i32 0, i32 5
  %arrayidx21 = getelementptr inbounds [130 x float], [130 x float]* %Decode20, i32 0, i64 0
  %71 = load float, float* %arrayidx21, align 4, !tbaa !51
  %cmp22 = fcmp une float %71, 1.000000e+00
  br i1 %cmp22, label %if.then.27, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %land.lhs.true
  %72 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode24 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %72, i32 0, i32 5
  %arrayidx25 = getelementptr inbounds [130 x float], [130 x float]* %Decode24, i32 0, i64 1
  %73 = load float, float* %arrayidx25, align 4, !tbaa !51
  %cmp26 = fcmp une float %73, 0.000000e+00
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %lor.lhs.false.23, %land.lhs.true
  store i32 0, i32* %can_do, align 4, !tbaa !5
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %lor.lhs.false.23, %lor.lhs.false
  br label %sw.epilog

sw.bb.29:                                         ; preds = %if.else
  %74 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode30 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %74, i32 0, i32 5
  %arrayidx31 = getelementptr inbounds [130 x float], [130 x float]* %Decode30, i32 0, i64 0
  %75 = load float, float* %arrayidx31, align 4, !tbaa !51
  %cmp32 = fcmp une float %75, 0.000000e+00
  br i1 %cmp32, label %if.then.49, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %sw.bb.29
  %76 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode34 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %76, i32 0, i32 5
  %arrayidx35 = getelementptr inbounds [130 x float], [130 x float]* %Decode34, i32 0, i64 1
  %77 = load float, float* %arrayidx35, align 4, !tbaa !51
  %cmp36 = fcmp une float %77, 1.000000e+00
  br i1 %cmp36, label %if.then.49, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.33
  %78 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode38 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %78, i32 0, i32 5
  %arrayidx39 = getelementptr inbounds [130 x float], [130 x float]* %Decode38, i32 0, i64 2
  %79 = load float, float* %arrayidx39, align 4, !tbaa !51
  %cmp40 = fcmp une float %79, 0.000000e+00
  br i1 %cmp40, label %if.then.49, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false.37
  %80 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode42 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %80, i32 0, i32 5
  %arrayidx43 = getelementptr inbounds [130 x float], [130 x float]* %Decode42, i32 0, i64 3
  %81 = load float, float* %arrayidx43, align 4, !tbaa !51
  %cmp44 = fcmp une float %81, 1.000000e+00
  br i1 %cmp44, label %if.then.49, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.41
  %82 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode46 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %82, i32 0, i32 5
  %arrayidx47 = getelementptr inbounds [130 x float], [130 x float]* %Decode46, i32 0, i64 4
  %83 = load float, float* %arrayidx47, align 4, !tbaa !51
  %cmp48 = fcmp une float %83, 0.000000e+00
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %lor.lhs.false.45, %lor.lhs.false.41, %lor.lhs.false.37, %lor.lhs.false.33, %sw.bb.29
  store i32 0, i32* %can_do, align 4, !tbaa !5
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %lor.lhs.false.45
  br label %sw.epilog

sw.default:                                       ; preds = %if.else
  store i32 0, i32* %can_do, align 4, !tbaa !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.50, %if.end.28
  br label %if.end.51

if.end.51:                                        ; preds = %sw.epilog, %if.then.15
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.end.10
  %84 = load i32, i32* %can_do, align 4, !tbaa !5
  %tobool53 = icmp ne i32 %84, 0
  br i1 %tobool53, label %if.end.56, label %if.then.54

if.then.54:                                       ; preds = %if.end.52
  %85 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %86 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %87 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %88 = load i32, i32* %format.addr, align 4, !tbaa !70
  %89 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %90 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %91 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %92 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %93 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %default_info = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %93, i32 0, i32 9
  %call55 = call i32 @gx_default_begin_image(%struct.gx_device_s* %85, %struct.gs_imager_state_s* %86, %struct.gs_image1_s* %87, i32 %88, %struct.gs_int_rect_s* %89, %struct.gx_device_color_s* %90, %struct.gx_clip_path_s* %91, %struct.gs_memory_s* %92, %struct.gx_image_enum_common_s** %default_info) #6
  store i32 %call55, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.56:                                        ; preds = %if.end.52
  %94 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask57 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %94, i32 0, i32 10
  %95 = load i32, i32* %ImageMask57, align 4, !tbaa !108
  %tobool58 = icmp ne i32 %95, 0
  br i1 %tobool58, label %if.then.63, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %if.end.56
  %96 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %BitsPerComponent = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %96, i32 0, i32 4
  %97 = load i32, i32* %BitsPerComponent, align 4, !tbaa !110
  %cmp60 = icmp eq i32 %97, 1
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.78

land.lhs.true.61:                                 ; preds = %lor.lhs.false.59
  %98 = load i32, i32* %num_components, align 4, !tbaa !5
  %cmp62 = icmp eq i32 %98, 1
  br i1 %cmp62, label %if.then.63, label %if.end.78

if.then.63:                                       ; preds = %land.lhs.true.61, %if.end.56
  %99 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode64 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %99, i32 0, i32 5
  %arrayidx65 = getelementptr inbounds [130 x float], [130 x float]* %Decode64, i32 0, i64 0
  %100 = load float, float* %arrayidx65, align 4, !tbaa !51
  %101 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode66 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %101, i32 0, i32 5
  %arrayidx67 = getelementptr inbounds [130 x float], [130 x float]* %Decode66, i32 0, i64 1
  %102 = load float, float* %arrayidx67, align 4, !tbaa !51
  %cmp68 = fcmp ogt float %100, %102
  br i1 %cmp68, label %if.then.69, label %if.else.70

if.then.69:                                       ; preds = %if.then.63
  %103 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskReverse = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %103, i32 0, i32 86
  store i32 1, i32* %MaskReverse, align 4, !tbaa !111
  br label %if.end.77

if.else.70:                                       ; preds = %if.then.63
  %104 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %104, i32 0, i32 67
  %105 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp71 = icmp eq i32 0, %105
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %if.else.70
  br label %if.end.75

if.else.73:                                       ; preds = %if.else.70
  %106 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call74 = call i32 @lputs(%struct.stream_s* %106, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i32 0, i32 0)) #6
  %107 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %107, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.260, i32 0, i32 0), i32 8) #6
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.73, %if.then.72
  %108 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskReverse76 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %108, i32 0, i32 86
  store i32 0, i32* %MaskReverse76, align 4, !tbaa !111
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.75, %if.then.69
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %land.lhs.true.61, %lor.lhs.false.59
  %109 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %109, i32 0, i32 1
  %call79 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %ImageMatrix, %struct.gs_matrix_s* %imat) #6
  %110 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %110, i32 0, i32 5
  %111 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %call80 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %imat, %struct.gs_matrix_s* %111, %struct.gs_matrix_s* %imat) #6
  %ty81 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %112 = load float, float* %ty81, align 4, !tbaa !112
  %conv = fptosi float %112 to i32
  store i32 %conv, i32* %ty, align 4, !tbaa !5
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 0
  %113 = load float, float* %xx, align 4, !tbaa !113
  %114 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Width = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %114, i32 0, i32 2
  %115 = load i32, i32* %Width, align 4, !tbaa !114
  %conv82 = sitofp i32 %115 to float
  %mul = fmul float %113, %conv82
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 2
  %116 = load float, float* %yx, align 4, !tbaa !115
  %117 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Height = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %117, i32 0, i32 3
  %118 = load i32, i32* %Height, align 4, !tbaa !116
  %conv83 = sitofp i32 %118 to float
  %mul84 = fmul float %116, %conv83
  %add = fadd float %mul, %mul84
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %119 = load float, float* %tx, align 4, !tbaa !117
  %add85 = fadd float %add, %119
  %conv86 = fptosi float %add85 to i32
  store i32 %conv86, i32* %bx, align 4, !tbaa !5
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 1
  %120 = load float, float* %xy, align 4, !tbaa !118
  %121 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Width87 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %121, i32 0, i32 2
  %122 = load i32, i32* %Width87, align 4, !tbaa !114
  %conv88 = sitofp i32 %122 to float
  %mul89 = fmul float %120, %conv88
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 3
  %123 = load float, float* %yy, align 4, !tbaa !119
  %124 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Height90 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %124, i32 0, i32 3
  %125 = load i32, i32* %Height90, align 4, !tbaa !116
  %conv91 = sitofp i32 %125 to float
  %mul92 = fmul float %123, %conv91
  %add93 = fadd float %mul89, %mul92
  %ty94 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %126 = load float, float* %ty94, align 4, !tbaa !112
  %add95 = fadd float %add93, %126
  %conv96 = fptosi float %add95 to i32
  store i32 %conv96, i32* %by, align 4, !tbaa !5
  %yx97 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 2
  %127 = load float, float* %yx97, align 4, !tbaa !115
  %128 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Height98 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %128, i32 0, i32 3
  %129 = load i32, i32* %Height98, align 4, !tbaa !116
  %conv99 = sitofp i32 %129 to float
  %mul100 = fmul float %127, %conv99
  %tx101 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %130 = load float, float* %tx101, align 4, !tbaa !117
  %add102 = fadd float %mul100, %130
  %conv103 = fptosi float %add102 to i32
  store i32 %conv103, i32* %cx, align 4, !tbaa !5
  %yy104 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 3
  %131 = load float, float* %yy104, align 4, !tbaa !119
  %132 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Height105 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %132, i32 0, i32 3
  %133 = load i32, i32* %Height105, align 4, !tbaa !116
  %conv106 = sitofp i32 %133 to float
  %mul107 = fmul float %131, %conv106
  %ty108 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %134 = load float, float* %ty108, align 4, !tbaa !112
  %add109 = fadd float %mul107, %134
  %conv110 = fptosi float %add109 to i32
  store i32 %conv110, i32* %cy, align 4, !tbaa !5
  %xx111 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 0
  %135 = load float, float* %xx111, align 4, !tbaa !113
  %136 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Width112 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %136, i32 0, i32 2
  %137 = load i32, i32* %Width112, align 4, !tbaa !114
  %conv113 = sitofp i32 %137 to float
  %mul114 = fmul float %135, %conv113
  %tx115 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %138 = load float, float* %tx115, align 4, !tbaa !117
  %add116 = fadd float %mul114, %138
  %conv117 = fptosi float %add116 to i32
  store i32 %conv117, i32* %dx, align 4, !tbaa !5
  %xy118 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 1
  %139 = load float, float* %xy118, align 4, !tbaa !118
  %140 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Width119 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %140, i32 0, i32 2
  %141 = load i32, i32* %Width119, align 4, !tbaa !114
  %conv120 = sitofp i32 %141 to float
  %mul121 = fmul float %139, %conv120
  %ty122 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %142 = load float, float* %ty122, align 4, !tbaa !112
  %add123 = fadd float %mul121, %142
  %conv124 = fptosi float %add123 to i32
  store i32 %conv124, i32* %dy, align 4, !tbaa !5
  %143 = load i32, i32* %bx, align 4, !tbaa !5
  %tx125 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %144 = load float, float* %tx125, align 4, !tbaa !117
  %conv126 = fptosi float %144 to i32
  %sub = sub nsw i32 %143, %conv126
  store i32 %sub, i32* %sx, align 4, !tbaa !5
  %145 = load i32, i32* %by, align 4, !tbaa !5
  %ty127 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %146 = load float, float* %ty127, align 4, !tbaa !112
  %conv128 = fptosi float %146 to i32
  %sub129 = sub nsw i32 %145, %conv128
  store i32 %sub129, i32* %sy, align 4, !tbaa !5
  %147 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %roll = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %147, i32 0, i32 104
  store i32 0, i32* %roll, align 4, !tbaa !120
  %148 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %148, i32 0, i32 98
  store i64 0, i64* %reverse_y, align 8, !tbaa !121
  %149 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %149, i32 0, i32 97
  store i64 0, i64* %reverse_x, align 8, !tbaa !122
  %tx130 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %150 = load float, float* %tx130, align 4, !tbaa !117
  %151 = load i32, i32* %bx, align 4, !tbaa !5
  %conv131 = sitofp i32 %151 to float
  %cmp132 = fcmp ogt float %150, %conv131
  br i1 %cmp132, label %if.then.134, label %if.end.139

if.then.134:                                      ; preds = %if.end.78
  %152 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x135 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %152, i32 0, i32 97
  store i64 1, i64* %reverse_x135, align 8, !tbaa !122
  %153 = load i32, i32* %sx, align 4, !tbaa !5
  %sub136 = sub nsw i32 0, %153
  store i32 %sub136, i32* %sx, align 4, !tbaa !5
  %154 = load i32, i32* %bx, align 4, !tbaa !5
  %conv137 = sitofp i32 %154 to float
  %tx138 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  store float %conv137, float* %tx138, align 4, !tbaa !117
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.134, %if.end.78
  %ty140 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %155 = load float, float* %ty140, align 4, !tbaa !112
  %156 = load i32, i32* %by, align 4, !tbaa !5
  %conv141 = sitofp i32 %156 to float
  %cmp142 = fcmp ogt float %155, %conv141
  br i1 %cmp142, label %if.then.144, label %if.end.149

if.then.144:                                      ; preds = %if.end.139
  %157 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y145 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %157, i32 0, i32 98
  store i64 1, i64* %reverse_y145, align 8, !tbaa !121
  %158 = load i32, i32* %sy, align 4, !tbaa !5
  %sub146 = sub nsw i32 0, %158
  store i32 %sub146, i32* %sy, align 4, !tbaa !5
  %159 = load i32, i32* %by, align 4, !tbaa !5
  %conv147 = sitofp i32 %159 to float
  %ty148 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  store float %conv147, float* %ty148, align 4, !tbaa !112
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.144, %if.end.139
  %160 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %160, i32 0, i32 99
  %161 = bitcast %struct.gs_matrix_s* %xmat to i8*
  %162 = bitcast %struct.gs_matrix_s* %imat to i8*
  %call150 = call i8* @memcpy(i8* %161, i8* %162, i64 24) #7
  %163 = load i32, i32* %sx, align 4, !tbaa !5
  %conv151 = sitofp i32 %163 to float
  %164 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx152 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %164, i32 0, i32 105
  store float %conv151, float* %sx152, align 4, !tbaa !123
  %165 = load i32, i32* %sy, align 4, !tbaa !5
  %conv153 = sitofp i32 %165 to float
  %166 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy154 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %166, i32 0, i32 106
  store float %conv153, float* %sy154, align 4, !tbaa !124
  %167 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Height155 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %167, i32 0, i32 3
  %168 = load i32, i32* %Height155, align 4, !tbaa !116
  %169 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %h = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %169, i32 0, i32 103
  store i32 %168, i32* %h, align 4, !tbaa !125
  %170 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Width156 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %170, i32 0, i32 2
  %171 = load i32, i32* %Width156, align 4, !tbaa !114
  %172 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %172, i32 0, i32 102
  store i32 %171, i32* %w, align 4, !tbaa !126
  %173 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dd = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %173, i32 0, i32 107
  store i64 0, i64* %dd, align 8, !tbaa !127
  %174 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %bx157 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %174, i32 0, i32 100
  store i32 0, i32* %bx157, align 4, !tbaa !128
  %175 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %by158 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %175, i32 0, i32 101
  store i32 0, i32* %by158, align 4, !tbaa !129
  %176 = load i32, i32* %ty, align 4, !tbaa !5
  %177 = load i32, i32* %cy, align 4, !tbaa !5
  %cmp159 = icmp eq i32 %176, %177
  br i1 %cmp159, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %if.end.149
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.162:                                       ; preds = %if.end.149
  %178 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask163 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %178, i32 0, i32 10
  %179 = load i32, i32* %ImageMask163, align 4, !tbaa !108
  %tobool164 = icmp ne i32 %179, 0
  br i1 %tobool164, label %if.then.165, label %if.else.197

if.then.165:                                      ; preds = %if.end.162
  %180 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ncomp = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %180, i32 0, i32 85
  store i32 1, i32* %ncomp, align 4, !tbaa !130
  %181 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %181, i32 0, i32 87
  %182 = load i32, i32* %MaskState, align 4, !tbaa !64
  %cmp166 = icmp ne i32 %182, 1
  br i1 %cmp166, label %if.then.168, label %if.end.196

if.then.168:                                      ; preds = %if.then.165
  %183 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode169 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %183, i32 0, i32 67
  %184 = load i32, i32* %colormode169, align 4, !tbaa !48
  %cmp170 = icmp eq i32 0, %184
  br i1 %cmp170, label %if.then.172, label %if.else.192

if.then.172:                                      ; preds = %if.then.168
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %185 = load i64, i64* %color, align 8, !tbaa !59
  %call173 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.230, i32 0, i32 0), i64 %185) #6
  %186 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay174 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call175 = call i32 @lputs(%struct.stream_s* %186, i8* %arraydecay174) #6
  %187 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %187, i32 0, i32 22
  %arrayidx176 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %188 = load float, float* %arrayidx176, align 4, !tbaa !51
  %cmp177 = fcmp oeq float %188, 1.200000e+03
  br i1 %cmp177, label %if.then.179, label %if.else.181

if.then.179:                                      ; preds = %if.then.172
  %189 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call180 = call i32 @lputs(%struct.stream_s* %189, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  br label %if.end.191

if.else.181:                                      ; preds = %if.then.172
  %190 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %HWResolution182 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %190, i32 0, i32 22
  %arrayidx183 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution182, i32 0, i64 0
  %191 = load float, float* %arrayidx183, align 4, !tbaa !51
  %cmp184 = fcmp oeq float %191, 6.000000e+02
  br i1 %cmp184, label %if.then.186, label %if.else.188

if.then.186:                                      ; preds = %if.else.181
  %192 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call187 = call i32 @lputs(%struct.stream_s* %192, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  br label %if.end.190

if.else.188:                                      ; preds = %if.else.181
  %193 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call189 = call i32 @lputs(%struct.stream_s* %193, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.188, %if.then.186
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %if.then.179
  br label %if.end.195

if.else.192:                                      ; preds = %if.then.168
  %194 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call193 = call i32 @lputs(%struct.stream_s* %194, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.232, i32 0, i32 0)) #6
  %195 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState194 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %195, i32 0, i32 87
  store i32 1, i32* %MaskState194, align 4, !tbaa !64
  br label %if.end.195

if.end.195:                                       ; preds = %if.else.192, %if.end.191
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %if.then.165
  br label %if.end.212

if.else.197:                                      ; preds = %if.end.162
  %196 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState198 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %196, i32 0, i32 87
  %197 = load i32, i32* %MaskState198, align 4, !tbaa !64
  %cmp199 = icmp ne i32 %197, 0
  br i1 %cmp199, label %if.then.201, label %if.end.210

if.then.201:                                      ; preds = %if.else.197
  %198 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode202 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %198, i32 0, i32 67
  %199 = load i32, i32* %colormode202, align 4, !tbaa !48
  %cmp203 = icmp eq i32 0, %199
  br i1 %cmp203, label %if.then.205, label %if.else.206

if.then.205:                                      ; preds = %if.then.201
  br label %if.end.208

if.else.206:                                      ; preds = %if.then.201
  %200 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call207 = call i32 @lputs(%struct.stream_s* %200, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.233, i32 0, i32 0)) #6
  br label %if.end.208

if.end.208:                                       ; preds = %if.else.206, %if.then.205
  %201 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskState209 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %201, i32 0, i32 87
  store i32 0, i32* %MaskState209, align 4, !tbaa !64
  br label %if.end.210

if.end.210:                                       ; preds = %if.end.208, %if.else.197
  %202 = load i32, i32* %num_components, align 4, !tbaa !5
  %203 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ncomp211 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %203, i32 0, i32 85
  store i32 %202, i32* %ncomp211, align 4, !tbaa !130
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.210, %if.end.196
  %204 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y213 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %204, i32 0, i32 98
  %205 = load i64, i64* %reverse_y213, align 8, !tbaa !121
  %tobool214 = icmp ne i64 %205, 0
  br i1 %tobool214, label %if.then.215, label %if.end.216

if.then.215:                                      ; preds = %if.end.212
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.216:                                       ; preds = %if.end.212
  %206 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %207 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %207, i32 0, i32 13
  %208 = load i32, i32* %bits_per_pixel, align 4, !tbaa !131
  %tx217 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
  %209 = load float, float* %tx217, align 4, !tbaa !117
  %conv218 = fptosi float %209 to i32
  %ty219 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
  %210 = load float, float* %ty219, align 4, !tbaa !112
  %conv220 = fptosi float %210 to i32
  %211 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %211, i32 0, i32 11
  %212 = load i32, i32* %width, align 4, !tbaa !132
  %213 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %213, i32 0, i32 12
  %214 = load i32, i32* %height, align 4, !tbaa !133
  %215 = load i32, i32* %sx, align 4, !tbaa !5
  %216 = load i32, i32* %sy, align 4, !tbaa !5
  %217 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %roll221 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %217, i32 0, i32 104
  %218 = load i32, i32* %roll221, align 4, !tbaa !120
  call void @escv_write_begin(%struct.gx_device_s* %206, i32 %208, i32 %conv218, i32 %conv220, i32 %212, i32 %214, i32 %215, i32 %216, i32 %218) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.216, %if.then.215, %if.then.161, %if.then.54, %if.then.9, %if.then
  %219 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %219) #2
  %220 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %220) #2
  %221 = bitcast i32* %sy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %221) #2
  %222 = bitcast i32* %sx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %222) #2
  %223 = bitcast i32* %dy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %223) #2
  %224 = bitcast i32* %dx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %224) #2
  %225 = bitcast i32* %cy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %225) #2
  %226 = bitcast i32* %cx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %226) #2
  %227 = bitcast i32* %by to i8*
  call void @llvm.lifetime.end(i64 4, i8* %227) #2
  %228 = bitcast i32* %bx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %228) #2
  %229 = bitcast i32* %ty to i8*
  call void @llvm.lifetime.end(i64 4, i8* %229) #2
  %230 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %230) #2
  %231 = bitcast %struct.gs_matrix_s* %imat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %231) #2
  %232 = bitcast i32* %can_do to i8*
  call void @llvm.lifetime.end(i64 4, i8* %232) #2
  %233 = bitcast i32* %num_components to i8*
  call void @llvm.lifetime.end(i64 4, i8* %233) #2
  %234 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %234) #2
  %235 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %235) #2
  %236 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.end(i64 8, i8* %236) #2
  %237 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %237) #2
  %238 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %238) #2
  %239 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %239) #2
  %240 = load i32, i32* %retval
  ret i32 %240
}

declare i64 @gx_default_rgb_map_rgb_color(%struct.gx_device_s*, i16*) #1

declare i32 @gx_default_rgb_map_color_rgb(%struct.gx_device_s*, i64, i16*) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define internal i32 @escv_range_check(%struct.gx_device_s* %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %xdpi = alloca i32, align 4
  %ydpi = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %1, i32 0, i32 19
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %2 = load float, float* %arrayidx, align 4, !tbaa !51
  %conv = fptosi float %2 to i32
  store i32 %conv, i32* %width, align 4, !tbaa !5
  %3 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %4, i32 0, i32 19
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize1, i32 0, i64 1
  %5 = load float, float* %arrayidx2, align 4, !tbaa !51
  %conv3 = fptosi float %5 to i32
  store i32 %conv3, i32* %height, align 4, !tbaa !5
  %6 = bitcast i32* %xdpi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 22
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %8 = load float, float* %arrayidx4, align 4, !tbaa !51
  %conv5 = fptosi float %8 to i32
  store i32 %conv5, i32* %xdpi, align 4, !tbaa !5
  %9 = bitcast i32* %ydpi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 22
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution6, i32 0, i64 1
  %11 = load float, float* %arrayidx7, align 4, !tbaa !51
  %conv8 = fptosi float %11 to i32
  store i32 %conv8, i32* %ydpi, align 4, !tbaa !5
  %12 = load i32, i32* %width, align 4, !tbaa !5
  %13 = load i32, i32* %height, align 4, !tbaa !5
  %cmp = icmp sle i32 %12, %13
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %14 = load i32, i32* %width, align 4, !tbaa !5
  %cmp10 = icmp slt i32 %14, 274
  br i1 %cmp10, label %if.then.20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %15 = load i32, i32* %width, align 4, !tbaa !5
  %cmp12 = icmp sgt i32 %15, 938
  br i1 %cmp12, label %if.then.20, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false
  %16 = load i32, i32* %height, align 4, !tbaa !5
  %cmp15 = icmp slt i32 %16, 415
  br i1 %cmp15, label %if.then.20, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.14
  %17 = load i32, i32* %height, align 4, !tbaa !5
  %cmp18 = icmp sgt i32 %17, 1374
  br i1 %cmp18, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %lor.lhs.false.17, %lor.lhs.false.14, %lor.lhs.false, %if.then
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false.17
  br label %if.end.34

if.else:                                          ; preds = %entry
  %18 = load i32, i32* %width, align 4, !tbaa !5
  %cmp21 = icmp slt i32 %18, 415
  br i1 %cmp21, label %if.then.32, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.else
  %19 = load i32, i32* %width, align 4, !tbaa !5
  %cmp24 = icmp sgt i32 %19, 1374
  br i1 %cmp24, label %if.then.32, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.23
  %20 = load i32, i32* %height, align 4, !tbaa !5
  %cmp27 = icmp slt i32 %20, 274
  br i1 %cmp27, label %if.then.32, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.26
  %21 = load i32, i32* %height, align 4, !tbaa !5
  %cmp30 = icmp sgt i32 %21, 938
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %lor.lhs.false.29, %lor.lhs.false.26, %lor.lhs.false.23, %if.else
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.33:                                        ; preds = %lor.lhs.false.29
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end
  %22 = load i32, i32* %xdpi, align 4, !tbaa !5
  %23 = load i32, i32* %ydpi, align 4, !tbaa !5
  %cmp35 = icmp ne i32 %22, %23
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.34
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.38:                                        ; preds = %if.end.34
  %24 = load i32, i32* %xdpi, align 4, !tbaa !5
  %cmp39 = icmp slt i32 %24, 60
  br i1 %cmp39, label %if.then.44, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %if.end.38
  %25 = load i32, i32* %xdpi, align 4, !tbaa !5
  %cmp42 = icmp sgt i32 %25, 1200
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %lor.lhs.false.41, %if.end.38
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.45:                                        ; preds = %lor.lhs.false.41
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.45, %if.then.44, %if.then.37, %if.then.32, %if.then.20
  %26 = bitcast i32* %ydpi to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #2
  %27 = bitcast i32* %xdpi to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #2
  %28 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #2
  %30 = load i32, i32* %retval
  ret i32 %30
}

declare i32 @gdev_vector_open_file_options(%struct.gx_device_vector_s*, i32, i32) #1

declare void @gdev_vector_init(%struct.gx_device_vector_s*) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define internal i32 @escv_beginpage(%struct.gx_device_vector_s* %vdev) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %ebuf = alloca [1024 x i8], align 16
  %MaxRes = alloca i32, align 4
  %Local = alloca i32, align 4
  %Duplex = alloca i32, align 4
  %FaceUp = alloca i32, align 4
  %t = alloca i64, align 8
  %tm = alloca %struct.tm*, align 8
  %str = alloca [32 x i8], align 16
  %i = alloca i64, align 8
  %sysname = alloca i8*, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp102 = alloca i32, align 4
  %__s1_len108 = alloca i64, align 8
  %__s2_len110 = alloca i64, align 8
  %tmp111 = alloca i32, align 4
  %__s1118 = alloca i8*, align 8
  %__result121 = alloca i32, align 4
  %tmp159 = alloca i32, align 4
  %_modelname = alloca [256 x i8], align 16
  %modelname = alloca i8*, align 8
  %i179 = alloca i32, align 4
  %__s1_len185 = alloca i64, align 8
  %__s2_len187 = alloca i64, align 8
  %tmp188 = alloca i32, align 4
  %__s1_len335 = alloca i64, align 8
  %__s2_len337 = alloca i64, align 8
  %tmp338 = alloca i32, align 4
  %__s1345 = alloca i8*, align 8
  %__result348 = alloca i32, align 4
  %tmp386 = alloca i32, align 4
  %pt = alloca %struct.EPaperTable_s*, align 8
  %__s1_len557 = alloca i64, align 8
  %__s2_len559 = alloca i64, align 8
  %tmp560 = alloca i32, align 4
  %__s1567 = alloca i8*, align 8
  %__result570 = alloca i32, align 4
  %tmp608 = alloca i32, align 4
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %first_page = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %3, i32 0, i32 82
  %4 = load i32, i32* %first_page, align 4, !tbaa !44
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end.648

if.then:                                          ; preds = %entry
  %5 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %strm = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %6, i32 0, i32 47
  %7 = load %struct.stream_s*, %struct.stream_s** %strm, align 8, !tbaa !134
  store %struct.stream_s* %7, %struct.stream_s** %s, align 8, !tbaa !1
  %8 = bitcast [1024 x i8]* %ebuf to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %8) #2
  %9 = bitcast i32* %MaxRes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %Local to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %Duplex to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i32* %FaceUp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 600, i32* %MaxRes, align 4, !tbaa !5
  store i32 1, i32* %Local, align 4, !tbaa !5
  store i32 0, i32* %Duplex, align 4, !tbaa !5
  store i32 0, i32* %FaceUp, align 4, !tbaa !5
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %JobID = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 110
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %JobID, i32 0, i32 0
  %14 = load i8, i8* %arraydecay, align 1, !tbaa !70
  %tobool1 = icmp ne i8 %14, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %15 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %JobID3 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %15, i32 0, i32 110
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %JobID3, i32 0, i32 0
  %call = call i8* @strcpy(i8* %arraydecay4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0)) #7
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %16 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call5 = call i32 @lputs(%struct.stream_s* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.57, i32 0, i32 0)) #6
  %17 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call6 = call i32 @lputs(%struct.stream_s* %17, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0)) #6
  %18 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %19 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %JobID7 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %19, i32 0, i32 110
  %arraydecay8 = getelementptr inbounds [256 x i8], [256 x i8]* %JobID7, i32 0, i32 0
  %call9 = call i32 @lputs(%struct.stream_s* %18, i8* %arraydecay8) #6
  %20 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call10 = call i32 @lputs(%struct.stream_s* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  %21 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call11 = call i32 @lputs(%struct.stream_s* %21, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.60, i32 0, i32 0)) #6
  %22 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %23 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %JobID12 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %23, i32 0, i32 110
  %arraydecay13 = getelementptr inbounds [256 x i8], [256 x i8]* %JobID12, i32 0, i32 0
  %call14 = call i32 @lputs(%struct.stream_s* %22, i8* %arraydecay13) #6
  %24 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call15 = call i32 @lputs(%struct.stream_s* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0)) #6
  %25 = bitcast i64* %t to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #2
  %call16 = call i64 @time(i64* %t) #7
  %26 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call17 = call i32 @lputs(%struct.stream_s* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0)) #6
  %27 = bitcast %struct.tm** %tm to i8*
  call void @llvm.lifetime.start(i64 8, i8* %27) #2
  %28 = bitcast [32 x i8]* %str to i8*
  call void @llvm.lifetime.start(i64 32, i8* %28) #2
  %29 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %29) #2
  %call18 = call %struct.tm* @localtime(i64* %t) #7
  store %struct.tm* %call18, %struct.tm** %tm, align 8, !tbaa !1
  %arraydecay19 = getelementptr inbounds [32 x i8], [32 x i8]* %str, i32 0, i32 0
  %30 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !1
  %call20 = call i64 @strftime(i8* %arraydecay19, i64 30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i32 0, i32 0), %struct.tm* %30) #7
  store i64 %call20, i64* %i, align 8, !tbaa !59
  %31 = load i64, i64* %i, align 8, !tbaa !59
  %cmp = icmp uge i64 30, %31
  br i1 %cmp, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end
  %32 = load i64, i64* %i, align 8, !tbaa !59
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %str, i32 0, i64 %32
  store i8 0, i8* %arrayidx, align 1, !tbaa !70
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.end
  %33 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay23 = getelementptr inbounds [32 x i8], [32 x i8]* %str, i32 0, i32 0
  %call24 = call i32 @lputs(%struct.stream_s* %33, i8* %arraydecay23) #6
  %34 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = bitcast [32 x i8]* %str to i8*
  call void @llvm.lifetime.end(i64 32, i8* %35) #2
  %36 = bitcast %struct.tm** %tm to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call25 = call i32 @lputs(%struct.stream_s* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0)) #6
  %38 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call26 = call i32 @lputs(%struct.stream_s* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.64, i32 0, i32 0)) #6
  %39 = bitcast i64* %t to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #2
  %40 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call27 = call i32 @lputs(%struct.stream_s* %40, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0)) #6
  %41 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call28 = call i32 @lputs(%struct.stream_s* %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0)) #6
  %42 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %UserName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %42, i32 0, i32 111
  %arraydecay29 = getelementptr inbounds [256 x i8], [256 x i8]* %UserName, i32 0, i32 0
  %43 = load i8, i8* %arraydecay29, align 1, !tbaa !70
  %tobool30 = icmp ne i8 %43, 0
  br i1 %tobool30, label %if.then.31, label %if.end.35

if.then.31:                                       ; preds = %if.end.22
  %44 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %45 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %UserName32 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %45, i32 0, i32 111
  %arraydecay33 = getelementptr inbounds [256 x i8], [256 x i8]* %UserName32, i32 0, i32 0
  %call34 = call i32 @lputs(%struct.stream_s* %44, i8* %arraydecay33) #6
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.31, %if.end.22
  %46 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call36 = call i32 @lputs(%struct.stream_s* %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0)) #6
  %47 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call37 = call i32 @lputs(%struct.stream_s* %47, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.67, i32 0, i32 0)) #6
  %48 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %HostName = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %48, i32 0, i32 112
  %arraydecay38 = getelementptr inbounds [256 x i8], [256 x i8]* %HostName, i32 0, i32 0
  %49 = load i8, i8* %arraydecay38, align 1, !tbaa !70
  %tobool39 = icmp ne i8 %49, 0
  br i1 %tobool39, label %if.then.40, label %if.end.44

if.then.40:                                       ; preds = %if.end.35
  %50 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %51 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %HostName41 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %51, i32 0, i32 112
  %arraydecay42 = getelementptr inbounds [256 x i8], [256 x i8]* %HostName41, i32 0, i32 0
  %call43 = call i32 @lputs(%struct.stream_s* %50, i8* %arraydecay42) #6
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.40, %if.end.35
  %52 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call45 = call i32 @lputs(%struct.stream_s* %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0)) #6
  %53 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call46 = call i32 @lputs(%struct.stream_s* %53, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i32 0, i32 0)) #6
  %54 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Document = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %54, i32 0, i32 113
  %arraydecay47 = getelementptr inbounds [256 x i8], [256 x i8]* %Document, i32 0, i32 0
  %55 = load i8, i8* %arraydecay47, align 1, !tbaa !70
  %tobool48 = icmp ne i8 %55, 0
  br i1 %tobool48, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %if.end.44
  %56 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %57 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Document50 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %57, i32 0, i32 113
  %arraydecay51 = getelementptr inbounds [256 x i8], [256 x i8]* %Document50, i32 0, i32 0
  %call52 = call i32 @lputs(%struct.stream_s* %56, i8* %arraydecay51) #6
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %if.end.44
  %58 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call54 = call i32 @lputs(%struct.stream_s* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0)) #6
  %59 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call55 = call i32 @lputs(%struct.stream_s* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.64, i32 0, i32 0)) #6
  %60 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call56 = call i32 @lputs(%struct.stream_s* %60, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.69, i32 0, i32 0)) #6
  %61 = bitcast i8** %sysname to i8*
  call void @llvm.lifetime.start(i64 8, i8* %61) #2
  %call57 = call i8* @get_sysname() #6
  store i8* %call57, i8** %sysname, align 8, !tbaa !1
  %62 = load i8*, i8** %sysname, align 8, !tbaa !1
  %tobool58 = icmp ne i8* %62, null
  br i1 %tobool58, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %if.end.53
  %63 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %64 = load i8*, i8** %sysname, align 8, !tbaa !1
  %call60 = call i32 @lputs(%struct.stream_s* %63, i8* %64) #6
  %65 = load i8*, i8** %sysname, align 8, !tbaa !1
  call void @free(i8* %65) #7
  store i8* null, i8** %sysname, align 8, !tbaa !1
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.59, %if.end.53
  %66 = bitcast i8** %sysname to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #2
  %67 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call62 = call i32 @lputs(%struct.stream_s* %67, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  %68 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %68) #2
  %69 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %69) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i64 1) to i64), i64 ptrtoint ([9 x i8]* @.str.54 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end.61
  %call63 = call i64 @strlen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0)) #8
  store i64 %call63, i64* %__s2_len, align 8, !tbaa !59
  %70 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp64 = icmp ult i64 %70, 4
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %71 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %71) #2
  %72 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %72, i32 0, i32 2
  %73 = load i8*, i8** %dname, align 8, !tbaa !135
  store i8* %73, i8** %__s1, align 8, !tbaa !1
  %74 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %74) #2
  %75 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx67 = getelementptr inbounds i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx67, align 1, !tbaa !70
  %conv = zext i8 %76 to i32
  %77 = load i8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), align 1, !tbaa !70
  %conv68 = zext i8 %77 to i32
  %sub = sub nsw i32 %conv, %conv68
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %78 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp69 = icmp ugt i64 %78, 0
  br i1 %cmp69, label %land.lhs.true.71, label %if.end.101

land.lhs.true.71:                                 ; preds = %cond.true
  %79 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp72 = icmp eq i32 %79, 0
  br i1 %cmp72, label %if.then.74, label %if.end.101

if.then.74:                                       ; preds = %land.lhs.true.71
  %80 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx75 = getelementptr inbounds i8, i8* %80, i64 1
  %81 = load i8, i8* %arrayidx75, align 1, !tbaa !70
  %conv76 = zext i8 %81 to i32
  %82 = load i8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i64 1), align 1, !tbaa !70
  %conv77 = zext i8 %82 to i32
  %sub78 = sub nsw i32 %conv76, %conv77
  store i32 %sub78, i32* %__result, align 4, !tbaa !5
  %83 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp79 = icmp ugt i64 %83, 1
  br i1 %cmp79, label %land.lhs.true.81, label %if.end.100

land.lhs.true.81:                                 ; preds = %if.then.74
  %84 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp82 = icmp eq i32 %84, 0
  br i1 %cmp82, label %if.then.84, label %if.end.100

if.then.84:                                       ; preds = %land.lhs.true.81
  %85 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx85 = getelementptr inbounds i8, i8* %85, i64 2
  %86 = load i8, i8* %arrayidx85, align 1, !tbaa !70
  %conv86 = zext i8 %86 to i32
  %87 = load i8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i64 2), align 1, !tbaa !70
  %conv87 = zext i8 %87 to i32
  %sub88 = sub nsw i32 %conv86, %conv87
  store i32 %sub88, i32* %__result, align 4, !tbaa !5
  %88 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp89 = icmp ugt i64 %88, 2
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.99

land.lhs.true.91:                                 ; preds = %if.then.84
  %89 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp92 = icmp eq i32 %89, 0
  br i1 %cmp92, label %if.then.94, label %if.end.99

if.then.94:                                       ; preds = %land.lhs.true.91
  %90 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx95 = getelementptr inbounds i8, i8* %90, i64 3
  %91 = load i8, i8* %arrayidx95, align 1, !tbaa !70
  %conv96 = zext i8 %91 to i32
  %92 = load i8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i64 3), align 1, !tbaa !70
  %conv97 = zext i8 %92 to i32
  %sub98 = sub nsw i32 %conv96, %conv97
  store i32 %sub98, i32* %__result, align 4, !tbaa !5
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.94, %land.lhs.true.91, %if.then.84
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %land.lhs.true.81, %if.then.74
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %land.lhs.true.71, %cond.true
  %93 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %93, i32* %tmp102, !tbaa !5
  %94 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  %95 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  %96 = load i32, i32* %tmp102, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end.61
  %97 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname103 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %97, i32 0, i32 2
  %98 = load i8*, i8** %dname103, align 8, !tbaa !135
  %call104 = call i32 @strcmp(i8* %98, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.101
  %cond = phi i32 [ %96, %if.end.101 ], [ %call104, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %99 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %99) #2
  %100 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %100) #2
  %101 = load i32, i32* %tmp, !tbaa !5
  %cmp105 = icmp eq i32 0, %101
  br i1 %cmp105, label %if.then.167, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %102 = bitcast i64* %__s1_len108 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %102) #2
  %103 = bitcast i64* %__s2_len110 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %103) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i64 1) to i64), i64 ptrtoint ([8 x i8]* @.str.34 to i64)), i64 1), label %land.lhs.true.112, label %cond.false.160

land.lhs.true.112:                                ; preds = %lor.lhs.false
  %call113 = call i64 @strlen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0)) #8
  store i64 %call113, i64* %__s2_len110, align 8, !tbaa !59
  %104 = load i64, i64* %__s2_len110, align 8, !tbaa !59
  %cmp114 = icmp ult i64 %104, 4
  br i1 %cmp114, label %cond.true.116, label %cond.false.160

cond.true.116:                                    ; preds = %land.lhs.true.112
  %105 = bitcast i8** %__s1118 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %105) #2
  %106 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname119 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %106, i32 0, i32 2
  %107 = load i8*, i8** %dname119, align 8, !tbaa !135
  store i8* %107, i8** %__s1118, align 8, !tbaa !1
  %108 = bitcast i32* %__result121 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %108) #2
  %109 = load i8*, i8** %__s1118, align 8, !tbaa !1
  %arrayidx122 = getelementptr inbounds i8, i8* %109, i64 0
  %110 = load i8, i8* %arrayidx122, align 1, !tbaa !70
  %conv123 = zext i8 %110 to i32
  %111 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), align 1, !tbaa !70
  %conv124 = zext i8 %111 to i32
  %sub125 = sub nsw i32 %conv123, %conv124
  store i32 %sub125, i32* %__result121, align 4, !tbaa !5
  %112 = load i64, i64* %__s2_len110, align 8, !tbaa !59
  %cmp126 = icmp ugt i64 %112, 0
  br i1 %cmp126, label %land.lhs.true.128, label %if.end.158

land.lhs.true.128:                                ; preds = %cond.true.116
  %113 = load i32, i32* %__result121, align 4, !tbaa !5
  %cmp129 = icmp eq i32 %113, 0
  br i1 %cmp129, label %if.then.131, label %if.end.158

if.then.131:                                      ; preds = %land.lhs.true.128
  %114 = load i8*, i8** %__s1118, align 8, !tbaa !1
  %arrayidx132 = getelementptr inbounds i8, i8* %114, i64 1
  %115 = load i8, i8* %arrayidx132, align 1, !tbaa !70
  %conv133 = zext i8 %115 to i32
  %116 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i64 1), align 1, !tbaa !70
  %conv134 = zext i8 %116 to i32
  %sub135 = sub nsw i32 %conv133, %conv134
  store i32 %sub135, i32* %__result121, align 4, !tbaa !5
  %117 = load i64, i64* %__s2_len110, align 8, !tbaa !59
  %cmp136 = icmp ugt i64 %117, 1
  br i1 %cmp136, label %land.lhs.true.138, label %if.end.157

land.lhs.true.138:                                ; preds = %if.then.131
  %118 = load i32, i32* %__result121, align 4, !tbaa !5
  %cmp139 = icmp eq i32 %118, 0
  br i1 %cmp139, label %if.then.141, label %if.end.157

if.then.141:                                      ; preds = %land.lhs.true.138
  %119 = load i8*, i8** %__s1118, align 8, !tbaa !1
  %arrayidx142 = getelementptr inbounds i8, i8* %119, i64 2
  %120 = load i8, i8* %arrayidx142, align 1, !tbaa !70
  %conv143 = zext i8 %120 to i32
  %121 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i64 2), align 1, !tbaa !70
  %conv144 = zext i8 %121 to i32
  %sub145 = sub nsw i32 %conv143, %conv144
  store i32 %sub145, i32* %__result121, align 4, !tbaa !5
  %122 = load i64, i64* %__s2_len110, align 8, !tbaa !59
  %cmp146 = icmp ugt i64 %122, 2
  br i1 %cmp146, label %land.lhs.true.148, label %if.end.156

land.lhs.true.148:                                ; preds = %if.then.141
  %123 = load i32, i32* %__result121, align 4, !tbaa !5
  %cmp149 = icmp eq i32 %123, 0
  br i1 %cmp149, label %if.then.151, label %if.end.156

if.then.151:                                      ; preds = %land.lhs.true.148
  %124 = load i8*, i8** %__s1118, align 8, !tbaa !1
  %arrayidx152 = getelementptr inbounds i8, i8* %124, i64 3
  %125 = load i8, i8* %arrayidx152, align 1, !tbaa !70
  %conv153 = zext i8 %125 to i32
  %126 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i64 3), align 1, !tbaa !70
  %conv154 = zext i8 %126 to i32
  %sub155 = sub nsw i32 %conv153, %conv154
  store i32 %sub155, i32* %__result121, align 4, !tbaa !5
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.151, %land.lhs.true.148, %if.then.141
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.156, %land.lhs.true.138, %if.then.131
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %land.lhs.true.128, %cond.true.116
  %127 = load i32, i32* %__result121, align 4, !tbaa !5
  store i32 %127, i32* %tmp159, !tbaa !5
  %128 = bitcast i32* %__result121 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %128) #2
  %129 = bitcast i8** %__s1118 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %129) #2
  %130 = load i32, i32* %tmp159, !tbaa !5
  br label %cond.end.163

cond.false.160:                                   ; preds = %land.lhs.true.112, %lor.lhs.false
  %131 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname161 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %131, i32 0, i32 2
  %132 = load i8*, i8** %dname161, align 8, !tbaa !135
  %call162 = call i32 @strcmp(i8* %132, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0)) #7
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.160, %if.end.158
  %cond164 = phi i32 [ %130, %if.end.158 ], [ %call162, %cond.false.160 ]
  store i32 %cond164, i32* %tmp111, !tbaa !5
  %133 = bitcast i64* %__s2_len110 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %133) #2
  %134 = bitcast i64* %__s1_len108 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %134) #2
  %135 = load i32, i32* %tmp111, !tbaa !5
  %cmp165 = icmp eq i32 0, %135
  br i1 %cmp165, label %if.then.167, label %if.else

if.then.167:                                      ; preds = %cond.end.163, %cond.end
  %136 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %modelJP = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %136, i32 0, i32 120
  %137 = load i32, i32* %modelJP, align 4, !tbaa !82
  store i32 %137, i32* %Local, align 4, !tbaa !5
  %138 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capFaceUp = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %138, i32 0, i32 121
  %139 = load i32, i32* %capFaceUp, align 4, !tbaa !87
  store i32 %139, i32* %FaceUp, align 4, !tbaa !5
  %140 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capDuplexUnit = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %140, i32 0, i32 122
  %141 = load i32, i32* %capDuplexUnit, align 4, !tbaa !88
  store i32 %141, i32* %Duplex, align 4, !tbaa !5
  %142 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %capMaxResolution = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %142, i32 0, i32 123
  %143 = load i32, i32* %capMaxResolution, align 4, !tbaa !89
  store i32 %143, i32* %MaxRes, align 4, !tbaa !5
  %144 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call168 = call i32 @lputs(%struct.stream_s* %144, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i32 0, i32 0)) #6
  %145 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %146 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname169 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %146, i32 0, i32 2
  %147 = load i8*, i8** %dname169, align 8, !tbaa !135
  %call170 = call i32 @lputs(%struct.stream_s* %145, i8* %147) #6
  %148 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call171 = call i32 @lputs(%struct.stream_s* %148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  %149 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call172 = call i32 @lputs(%struct.stream_s* %149, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.71, i32 0, i32 0)) #6
  %150 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %151 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname173 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %151, i32 0, i32 2
  %152 = load i8*, i8** %dname173, align 8, !tbaa !135
  %call174 = call i32 @lputs(%struct.stream_s* %150, i8* %152) #6
  %153 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call175 = call i32 @lputs(%struct.stream_s* %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  br label %if.end.231

if.else:                                          ; preds = %cond.end.163
  %154 = bitcast [256 x i8]* %_modelname to i8*
  call void @llvm.lifetime.start(i64 256, i8* %154) #2
  %155 = bitcast [256 x i8]* %_modelname to i8*
  call void @llvm.memset.p0i8.i64(i8* %155, i8 0, i64 256, i32 16, i1 false)
  %156 = bitcast i8** %modelname to i8*
  call void @llvm.lifetime.start(i64 8, i8* %156) #2
  %157 = bitcast i32* %i179 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %157) #2
  %158 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname180 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %158, i32 0, i32 2
  %159 = load i8*, i8** %dname180, align 8, !tbaa !135
  store i8* %159, i8** %modelname, align 8, !tbaa !1
  store i32 0, i32* %i179, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %160 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom = sext i32 %160 to i64
  %arrayidx181 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom
  %resolution = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx181, i32 0, i32 1
  %161 = load i32, i32* %resolution, align 4, !tbaa !136
  %cmp182 = icmp ne i32 -1, %161
  br i1 %cmp182, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %162 = bitcast i64* %__s1_len185 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %162) #2
  %163 = bitcast i64* %__s2_len187 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %163) #2
  %164 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname189 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %164, i32 0, i32 2
  %165 = load i8*, i8** %dname189, align 8, !tbaa !135
  %166 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom190 = sext i32 %166 to i64
  %arrayidx191 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom190
  %name = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx191, i32 0, i32 0
  %167 = load i8*, i8** %name, align 8, !tbaa !138
  %call192 = call i32 @strcmp(i8* %165, i8* %167) #7
  store i32 %call192, i32* %tmp188, !tbaa !5
  %168 = bitcast i64* %__s2_len187 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %168) #2
  %169 = bitcast i64* %__s1_len185 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %169) #2
  %170 = load i32, i32* %tmp188, !tbaa !5
  %cmp193 = icmp eq i32 0, %170
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %for.body
  br label %for.end

if.end.196:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.196
  %171 = load i32, i32* %i179, align 4, !tbaa !5
  %inc = add nsw i32 %171, 1
  store i32 %inc, i32* %i179, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %if.then.195, %for.cond
  %172 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call197 = call i32 @lputs(%struct.stream_s* %172, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i32 0, i32 0)) #6
  %173 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom198 = sext i32 %173 to i64
  %arrayidx199 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom198
  %resolution200 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx199, i32 0, i32 1
  %174 = load i32, i32* %resolution200, align 4, !tbaa !136
  %cmp201 = icmp ne i32 -1, %174
  br i1 %cmp201, label %if.then.203, label %if.else.224

if.then.203:                                      ; preds = %for.end
  %175 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom204 = sext i32 %175 to i64
  %arrayidx205 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom204
  %resolution206 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx205, i32 0, i32 1
  %176 = load i32, i32* %resolution206, align 4, !tbaa !136
  store i32 %176, i32* %MaxRes, align 4, !tbaa !5
  %177 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom207 = sext i32 %177 to i64
  %arrayidx208 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom207
  %locale = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx208, i32 0, i32 2
  %178 = load i32, i32* %locale, align 4, !tbaa !139
  store i32 %178, i32* %Local, align 4, !tbaa !5
  %179 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom209 = sext i32 %179 to i64
  %arrayidx210 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom209
  %duplex = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx210, i32 0, i32 3
  %180 = load i32, i32* %duplex, align 4, !tbaa !140
  store i32 %180, i32* %Duplex, align 4, !tbaa !5
  %181 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom211 = sext i32 %181 to i64
  %arrayidx212 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom211
  %faceup = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx212, i32 0, i32 4
  %182 = load i32, i32* %faceup, align 4, !tbaa !141
  store i32 %182, i32* %FaceUp, align 4, !tbaa !5
  %arraydecay213 = getelementptr inbounds [256 x i8], [256 x i8]* %_modelname, i32 0, i32 0
  %183 = load i32, i32* %i179, align 4, !tbaa !5
  %idxprom214 = sext i32 %183 to i64
  %arrayidx215 = getelementptr inbounds [51 x %struct.anon], [51 x %struct.anon]* @escv_beginpage.model_resource, i32 0, i64 %idxprom214
  %name216 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx215, i32 0, i32 0
  %184 = load i8*, i8** %name216, align 8, !tbaa !138
  %call217 = call i32 @trans_modelname(i8* %arraydecay213, i8* %184, i64 255) #6
  %cmp218 = icmp sle i32 0, %call217
  br i1 %cmp218, label %if.then.220, label %if.end.222

if.then.220:                                      ; preds = %if.then.203
  %arraydecay221 = getelementptr inbounds [256 x i8], [256 x i8]* %_modelname, i32 0, i32 0
  store i8* %arraydecay221, i8** %modelname, align 8, !tbaa !1
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.220, %if.then.203
  %185 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %186 = load i8*, i8** %modelname, align 8, !tbaa !1
  %call223 = call i32 @lputs(%struct.stream_s* %185, i8* %186) #6
  br label %if.end.226

if.else.224:                                      ; preds = %for.end
  %187 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call225 = call i32 @lputs(%struct.stream_s* %187, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0)) #6
  br label %if.end.226

if.end.226:                                       ; preds = %if.else.224, %if.end.222
  %188 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call227 = call i32 @lputs(%struct.stream_s* %188, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  %189 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call228 = call i32 @lputs(%struct.stream_s* %189, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.71, i32 0, i32 0)) #6
  %190 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %191 = load i8*, i8** %modelname, align 8, !tbaa !1
  %call229 = call i32 @lputs(%struct.stream_s* %190, i8* %191) #6
  %192 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call230 = call i32 @lputs(%struct.stream_s* %192, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)) #6
  %193 = bitcast i32* %i179 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %193) #2
  %194 = bitcast i8** %modelname to i8*
  call void @llvm.lifetime.end(i64 8, i8* %194) #2
  %195 = bitcast [256 x i8]* %_modelname to i8*
  call void @llvm.lifetime.end(i64 256, i8* %195) #2
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.226, %if.then.167
  %196 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Comment = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %196, i32 0, i32 114
  %arraydecay232 = getelementptr inbounds [256 x i8], [256 x i8]* %Comment, i32 0, i32 0
  %197 = load i8, i8* %arraydecay232, align 1, !tbaa !70
  %tobool233 = icmp ne i8 %197, 0
  br i1 %tobool233, label %if.then.234, label %if.end.240

if.then.234:                                      ; preds = %if.end.231
  %198 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call235 = call i32 @lputs(%struct.stream_s* %198, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0)) #6
  %199 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %200 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Comment236 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %200, i32 0, i32 114
  %arraydecay237 = getelementptr inbounds [256 x i8], [256 x i8]* %Comment236, i32 0, i32 0
  %call238 = call i32 @lputs(%struct.stream_s* %199, i8* %arraydecay237) #6
  %201 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call239 = call i32 @lputs(%struct.stream_s* %201, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.64, i32 0, i32 0)) #6
  br label %if.end.240

if.end.240:                                       ; preds = %if.then.234, %if.end.231
  %202 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call241 = call i32 @lputs(%struct.stream_s* %202, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.74, i32 0, i32 0)) #6
  %203 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call242 = call i32 @lputs(%struct.stream_s* %203, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i32 0, i32 0)) #6
  %204 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %204, i32 0, i32 22
  %arrayidx243 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %205 = load float, float* %arrayidx243, align 4, !tbaa !51
  %cmp244 = fcmp oeq float %205, 1.200000e+03
  br i1 %cmp244, label %if.then.246, label %if.else.254

if.then.246:                                      ; preds = %if.end.240
  %206 = load i32, i32* %MaxRes, align 4, !tbaa !5
  %cmp247 = icmp eq i32 %206, 1200
  br i1 %cmp247, label %if.then.249, label %if.else.251

if.then.249:                                      ; preds = %if.then.246
  %207 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call250 = call i32 @lputs(%struct.stream_s* %207, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0)) #6
  br label %if.end.253

if.else.251:                                      ; preds = %if.then.246
  %208 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call252 = call i32 @lputs(%struct.stream_s* %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0)) #6
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.251, %if.then.249
  br label %if.end.264

if.else.254:                                      ; preds = %if.end.240
  %209 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution255 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %209, i32 0, i32 22
  %arrayidx256 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution255, i32 0, i64 0
  %210 = load float, float* %arrayidx256, align 4, !tbaa !51
  %cmp257 = fcmp oeq float %210, 6.000000e+02
  br i1 %cmp257, label %if.then.259, label %if.else.261

if.then.259:                                      ; preds = %if.else.254
  %211 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call260 = call i32 @lputs(%struct.stream_s* %211, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0)) #6
  br label %if.end.263

if.else.261:                                      ; preds = %if.else.254
  %212 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call262 = call i32 @lputs(%struct.stream_s* %212, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #6
  br label %if.end.263

if.end.263:                                       ; preds = %if.else.261, %if.then.259
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %if.end.253
  %213 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %faceup265 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %213, i32 0, i32 80
  %214 = load i32, i32* %faceup265, align 4, !tbaa !79
  %tobool266 = icmp ne i32 %214, 0
  br i1 %tobool266, label %land.lhs.true.267, label %lor.lhs.false.269

land.lhs.true.267:                                ; preds = %if.end.264
  %215 = load i32, i32* %FaceUp, align 4, !tbaa !5
  %tobool268 = icmp ne i32 %215, 0
  br i1 %tobool268, label %if.then.273, label %lor.lhs.false.269

lor.lhs.false.269:                                ; preds = %land.lhs.true.267, %if.end.264
  %216 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %216, i32 0, i32 81
  %217 = load i32, i32* %MediaType, align 4, !tbaa !92
  %tobool270 = icmp ne i32 %217, 0
  br i1 %tobool270, label %land.lhs.true.271, label %if.else.275

land.lhs.true.271:                                ; preds = %lor.lhs.false.269
  %218 = load i32, i32* %FaceUp, align 4, !tbaa !5
  %tobool272 = icmp ne i32 %218, 0
  br i1 %tobool272, label %if.then.273, label %if.else.275

if.then.273:                                      ; preds = %land.lhs.true.271, %land.lhs.true.267
  %219 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call274 = call i32 @lputs(%struct.stream_s* %219, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.79, i32 0, i32 0)) #6
  br label %if.end.277

if.else.275:                                      ; preds = %land.lhs.true.271, %lor.lhs.false.269
  %220 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call276 = call i32 @lputs(%struct.stream_s* %220, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.80, i32 0, i32 0)) #6
  br label %if.end.277

if.end.277:                                       ; preds = %if.else.275, %if.then.273
  %221 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType278 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %221, i32 0, i32 81
  %222 = load i32, i32* %MediaType278, align 4, !tbaa !92
  %tobool279 = icmp ne i32 %222, 0
  br i1 %tobool279, label %if.then.280, label %if.else.288

if.then.280:                                      ; preds = %if.end.277
  %223 = load i32, i32* %Local, align 4, !tbaa !5
  %cmp281 = icmp eq i32 %223, 0
  br i1 %cmp281, label %if.then.283, label %if.else.285

if.then.283:                                      ; preds = %if.then.280
  %224 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call284 = call i32 @lputs(%struct.stream_s* %224, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0)) #6
  br label %if.end.287

if.else.285:                                      ; preds = %if.then.280
  %225 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call286 = call i32 @lputs(%struct.stream_s* %225, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0)) #6
  br label %if.end.287

if.end.287:                                       ; preds = %if.else.285, %if.then.283
  br label %if.end.310

if.else.288:                                      ; preds = %if.end.277
  %226 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %manualFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %226, i32 0, i32 68
  %227 = load i32, i32* %manualFeed, align 4, !tbaa !73
  %tobool289 = icmp ne i32 %227, 0
  br i1 %tobool289, label %if.then.290, label %if.else.298

if.then.290:                                      ; preds = %if.else.288
  %228 = load i32, i32* %Local, align 4, !tbaa !5
  %cmp291 = icmp eq i32 %228, 0
  br i1 %cmp291, label %if.then.293, label %if.else.295

if.then.293:                                      ; preds = %if.then.290
  %229 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call294 = call i32 @lputs(%struct.stream_s* %229, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0)) #6
  br label %if.end.297

if.else.295:                                      ; preds = %if.then.290
  %230 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call296 = call i32 @lputs(%struct.stream_s* %230, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0)) #6
  br label %if.end.297

if.end.297:                                       ; preds = %if.else.295, %if.then.293
  br label %if.end.309

if.else.298:                                      ; preds = %if.else.288
  %231 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cassetFeed = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %231, i32 0, i32 69
  %232 = load i32, i32* %cassetFeed, align 4, !tbaa !74
  %tobool299 = icmp ne i32 %232, 0
  br i1 %tobool299, label %if.then.300, label %if.else.306

if.then.300:                                      ; preds = %if.else.298
  %arraydecay301 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %233 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cassetFeed302 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %233, i32 0, i32 69
  %234 = load i32, i32* %cassetFeed302, align 4, !tbaa !74
  %call303 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay301, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i32 0, i32 0), i32 %234) #6
  %235 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay304 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %call305 = call i32 @lputs(%struct.stream_s* %235, i8* %arraydecay304) #6
  br label %if.end.308

if.else.306:                                      ; preds = %if.else.298
  %236 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call307 = call i32 @lputs(%struct.stream_s* %236, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.84, i32 0, i32 0)) #6
  br label %if.end.308

if.end.308:                                       ; preds = %if.else.306, %if.then.300
  br label %if.end.309

if.end.309:                                       ; preds = %if.end.308, %if.end.297
  br label %if.end.310

if.end.310:                                       ; preds = %if.end.309, %if.end.287
  %237 = load i32, i32* %Duplex, align 4, !tbaa !5
  %tobool311 = icmp ne i32 %237, 0
  br i1 %tobool311, label %land.lhs.true.312, label %if.else.323

land.lhs.true.312:                                ; preds = %if.end.310
  %238 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Duplex313 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %238, i32 0, i32 83
  %239 = load i32, i32* %Duplex313, align 4, !tbaa !80
  %tobool314 = icmp ne i32 %239, 0
  br i1 %tobool314, label %if.then.315, label %if.else.323

if.then.315:                                      ; preds = %land.lhs.true.312
  %240 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call316 = call i32 @lputs(%struct.stream_s* %240, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0)) #6
  %241 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Tumble = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %241, i32 0, i32 84
  %242 = load i32, i32* %Tumble, align 4, !tbaa !75
  %tobool317 = icmp ne i32 %242, 0
  br i1 %tobool317, label %if.then.318, label %if.else.320

if.then.318:                                      ; preds = %if.then.315
  %243 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call319 = call i32 @lputs(%struct.stream_s* %243, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.86, i32 0, i32 0)) #6
  br label %if.end.322

if.else.320:                                      ; preds = %if.then.315
  %244 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call321 = call i32 @lputs(%struct.stream_s* %244, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0)) #6
  br label %if.end.322

if.end.322:                                       ; preds = %if.else.320, %if.then.318
  br label %if.end.325

if.else.323:                                      ; preds = %land.lhs.true.312, %if.end.310
  %245 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call324 = call i32 @lputs(%struct.stream_s* %245, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.88, i32 0, i32 0)) #6
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.323, %if.end.322
  %246 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %246, i32 0, i32 28
  %247 = load i32, i32* %NumCopies, align 4, !tbaa !142
  %tobool326 = icmp ne i32 %247, 0
  br i1 %tobool326, label %if.then.327, label %if.else.412

if.then.327:                                      ; preds = %if.end.325
  %248 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies328 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %248, i32 0, i32 28
  %249 = load i32, i32* %NumCopies328, align 4, !tbaa !142
  %cmp329 = icmp sge i32 %249, 1000
  br i1 %cmp329, label %if.then.331, label %if.end.333

if.then.331:                                      ; preds = %if.then.327
  %250 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies332 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %250, i32 0, i32 28
  store i32 999, i32* %NumCopies332, align 4, !tbaa !142
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.331, %if.then.327
  %251 = bitcast i64* %__s1_len335 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %251) #2
  %252 = bitcast i64* %__s2_len337 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %252) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 1) to i64), i64 ptrtoint ([8 x i8]* @.str.44 to i64)), i64 1), label %land.lhs.true.339, label %cond.false.387

land.lhs.true.339:                                ; preds = %if.end.333
  %call340 = call i64 @strlen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0)) #8
  store i64 %call340, i64* %__s2_len337, align 8, !tbaa !59
  %253 = load i64, i64* %__s2_len337, align 8, !tbaa !59
  %cmp341 = icmp ult i64 %253, 4
  br i1 %cmp341, label %cond.true.343, label %cond.false.387

cond.true.343:                                    ; preds = %land.lhs.true.339
  %254 = bitcast i8** %__s1345 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %254) #2
  %255 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname346 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %255, i32 0, i32 2
  %256 = load i8*, i8** %dname346, align 8, !tbaa !135
  store i8* %256, i8** %__s1345, align 8, !tbaa !1
  %257 = bitcast i32* %__result348 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %257) #2
  %258 = load i8*, i8** %__s1345, align 8, !tbaa !1
  %arrayidx349 = getelementptr inbounds i8, i8* %258, i64 0
  %259 = load i8, i8* %arrayidx349, align 1, !tbaa !70
  %conv350 = zext i8 %259 to i32
  %260 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), align 1, !tbaa !70
  %conv351 = zext i8 %260 to i32
  %sub352 = sub nsw i32 %conv350, %conv351
  store i32 %sub352, i32* %__result348, align 4, !tbaa !5
  %261 = load i64, i64* %__s2_len337, align 8, !tbaa !59
  %cmp353 = icmp ugt i64 %261, 0
  br i1 %cmp353, label %land.lhs.true.355, label %if.end.385

land.lhs.true.355:                                ; preds = %cond.true.343
  %262 = load i32, i32* %__result348, align 4, !tbaa !5
  %cmp356 = icmp eq i32 %262, 0
  br i1 %cmp356, label %if.then.358, label %if.end.385

if.then.358:                                      ; preds = %land.lhs.true.355
  %263 = load i8*, i8** %__s1345, align 8, !tbaa !1
  %arrayidx359 = getelementptr inbounds i8, i8* %263, i64 1
  %264 = load i8, i8* %arrayidx359, align 1, !tbaa !70
  %conv360 = zext i8 %264 to i32
  %265 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 1), align 1, !tbaa !70
  %conv361 = zext i8 %265 to i32
  %sub362 = sub nsw i32 %conv360, %conv361
  store i32 %sub362, i32* %__result348, align 4, !tbaa !5
  %266 = load i64, i64* %__s2_len337, align 8, !tbaa !59
  %cmp363 = icmp ugt i64 %266, 1
  br i1 %cmp363, label %land.lhs.true.365, label %if.end.384

land.lhs.true.365:                                ; preds = %if.then.358
  %267 = load i32, i32* %__result348, align 4, !tbaa !5
  %cmp366 = icmp eq i32 %267, 0
  br i1 %cmp366, label %if.then.368, label %if.end.384

if.then.368:                                      ; preds = %land.lhs.true.365
  %268 = load i8*, i8** %__s1345, align 8, !tbaa !1
  %arrayidx369 = getelementptr inbounds i8, i8* %268, i64 2
  %269 = load i8, i8* %arrayidx369, align 1, !tbaa !70
  %conv370 = zext i8 %269 to i32
  %270 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 2), align 1, !tbaa !70
  %conv371 = zext i8 %270 to i32
  %sub372 = sub nsw i32 %conv370, %conv371
  store i32 %sub372, i32* %__result348, align 4, !tbaa !5
  %271 = load i64, i64* %__s2_len337, align 8, !tbaa !59
  %cmp373 = icmp ugt i64 %271, 2
  br i1 %cmp373, label %land.lhs.true.375, label %if.end.383

land.lhs.true.375:                                ; preds = %if.then.368
  %272 = load i32, i32* %__result348, align 4, !tbaa !5
  %cmp376 = icmp eq i32 %272, 0
  br i1 %cmp376, label %if.then.378, label %if.end.383

if.then.378:                                      ; preds = %land.lhs.true.375
  %273 = load i8*, i8** %__s1345, align 8, !tbaa !1
  %arrayidx379 = getelementptr inbounds i8, i8* %273, i64 3
  %274 = load i8, i8* %arrayidx379, align 1, !tbaa !70
  %conv380 = zext i8 %274 to i32
  %275 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 3), align 1, !tbaa !70
  %conv381 = zext i8 %275 to i32
  %sub382 = sub nsw i32 %conv380, %conv381
  store i32 %sub382, i32* %__result348, align 4, !tbaa !5
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.378, %land.lhs.true.375, %if.then.368
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.383, %land.lhs.true.365, %if.then.358
  br label %if.end.385

if.end.385:                                       ; preds = %if.end.384, %land.lhs.true.355, %cond.true.343
  %276 = load i32, i32* %__result348, align 4, !tbaa !5
  store i32 %276, i32* %tmp386, !tbaa !5
  %277 = bitcast i32* %__result348 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %277) #2
  %278 = bitcast i8** %__s1345 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %278) #2
  %279 = load i32, i32* %tmp386, !tbaa !5
  br label %cond.end.390

cond.false.387:                                   ; preds = %land.lhs.true.339, %if.end.333
  %280 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname388 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %280, i32 0, i32 2
  %281 = load i8*, i8** %dname388, align 8, !tbaa !135
  %call389 = call i32 @strcmp(i8* %281, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0)) #7
  br label %cond.end.390

cond.end.390:                                     ; preds = %cond.false.387, %if.end.385
  %cond391 = phi i32 [ %279, %if.end.385 ], [ %call389, %cond.false.387 ]
  store i32 %cond391, i32* %tmp338, !tbaa !5
  %282 = bitcast i64* %__s2_len337 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %282) #2
  %283 = bitcast i64* %__s1_len335 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %283) #2
  %284 = load i32, i32* %tmp338, !tbaa !5
  %cmp392 = icmp eq i32 %284, 0
  br i1 %cmp392, label %if.then.394, label %if.else.398

if.then.394:                                      ; preds = %cond.end.390
  %arraydecay395 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %285 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies396 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %285, i32 0, i32 28
  %286 = load i32, i32* %NumCopies396, align 4, !tbaa !142
  %call397 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay395, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i32 0, i32 0), i32 %286) #6
  br label %if.end.409

if.else.398:                                      ; preds = %cond.end.390
  %287 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %Collate = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %287, i32 0, i32 71
  %288 = load i32, i32* %Collate, align 4, !tbaa !76
  %tobool399 = icmp ne i32 %288, 0
  br i1 %tobool399, label %if.then.400, label %if.else.404

if.then.400:                                      ; preds = %if.else.398
  %arraydecay401 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %289 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies402 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %289, i32 0, i32 28
  %290 = load i32, i32* %NumCopies402, align 4, !tbaa !142
  %call403 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay401, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.90, i32 0, i32 0), i32 %290) #6
  br label %if.end.408

if.else.404:                                      ; preds = %if.else.398
  %arraydecay405 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %291 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %NumCopies406 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %291, i32 0, i32 28
  %292 = load i32, i32* %NumCopies406, align 4, !tbaa !142
  %call407 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay405, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i32 0, i32 0), i32 %292) #6
  br label %if.end.408

if.end.408:                                       ; preds = %if.else.404, %if.then.400
  br label %if.end.409

if.end.409:                                       ; preds = %if.end.408, %if.then.394
  %293 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay410 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %call411 = call i32 @lputs(%struct.stream_s* %293, i8* %arraydecay410) #6
  br label %if.end.414

if.else.412:                                      ; preds = %if.end.325
  %294 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call413 = call i32 @lputs(%struct.stream_s* %294, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.91, i32 0, i32 0)) #6
  br label %if.end.414

if.end.414:                                       ; preds = %if.else.412, %if.end.409
  %295 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_density = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %295, i32 0, i32 72
  %296 = load i32, i32* %toner_density, align 4, !tbaa !77
  %tobool415 = icmp ne i32 %296, 0
  br i1 %tobool415, label %if.then.416, label %if.end.422

if.then.416:                                      ; preds = %if.end.414
  %arraydecay417 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %297 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_density418 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %297, i32 0, i32 72
  %298 = load i32, i32* %toner_density418, align 4, !tbaa !77
  %call419 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay417, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.92, i32 0, i32 0), i32 %298) #6
  %299 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay420 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ebuf, i32 0, i32 0
  %call421 = call i32 @lputs(%struct.stream_s* %299, i8* %arraydecay420) #6
  br label %if.end.422

if.end.422:                                       ; preds = %if.then.416, %if.end.414
  %300 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %orientation = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %300, i32 0, i32 79
  %301 = load i32, i32* %orientation, align 4, !tbaa !47
  %tobool423 = icmp ne i32 %301, 0
  br i1 %tobool423, label %if.then.424, label %if.end.426

if.then.424:                                      ; preds = %if.end.422
  %302 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call425 = call i32 @lputs(%struct.stream_s* %302, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.93, i32 0, i32 0)) #6
  br label %if.end.426

if.end.426:                                       ; preds = %if.then.424, %if.end.422
  %303 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %toner_saving = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %303, i32 0, i32 73
  %304 = load i32, i32* %toner_saving, align 4, !tbaa !78
  %tobool427 = icmp ne i32 %304, 0
  br i1 %tobool427, label %if.then.428, label %if.end.430

if.then.428:                                      ; preds = %if.end.426
  %305 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call429 = call i32 @lputs(%struct.stream_s* %305, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i32 0, i32 0)) #6
  br label %if.end.430

if.end.430:                                       ; preds = %if.then.428, %if.end.426
  %306 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %RITOff = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %306, i32 0, i32 70
  %307 = load i32, i32* %RITOff, align 4, !tbaa !81
  %tobool431 = icmp ne i32 %307, 0
  br i1 %tobool431, label %if.then.432, label %if.else.434

if.then.432:                                      ; preds = %if.end.430
  %308 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call433 = call i32 @lputs(%struct.stream_s* %308, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.95, i32 0, i32 0)) #6
  br label %if.end.436

if.else.434:                                      ; preds = %if.end.430
  %309 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call435 = call i32 @lputs(%struct.stream_s* %309, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.96, i32 0, i32 0)) #6
  br label %if.end.436

if.end.436:                                       ; preds = %if.else.434, %if.then.432
  %310 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType437 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %310, i32 0, i32 81
  %311 = load i32, i32* %MediaType437, align 4, !tbaa !92
  %cmp438 = icmp eq i32 %311, 0
  br i1 %cmp438, label %if.then.440, label %if.else.442

if.then.440:                                      ; preds = %if.end.436
  %312 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call441 = call i32 @lputs(%struct.stream_s* %312, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0)) #6
  br label %if.end.507

if.else.442:                                      ; preds = %if.end.436
  %313 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType443 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %313, i32 0, i32 81
  %314 = load i32, i32* %MediaType443, align 4, !tbaa !92
  %cmp444 = icmp eq i32 %314, 1
  br i1 %cmp444, label %if.then.446, label %if.else.448

if.then.446:                                      ; preds = %if.else.442
  %315 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call447 = call i32 @lputs(%struct.stream_s* %315, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0)) #6
  br label %if.end.506

if.else.448:                                      ; preds = %if.else.442
  %316 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType449 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %316, i32 0, i32 81
  %317 = load i32, i32* %MediaType449, align 4, !tbaa !92
  %cmp450 = icmp eq i32 %317, 2
  br i1 %cmp450, label %if.then.452, label %if.else.454

if.then.452:                                      ; preds = %if.else.448
  %318 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call453 = call i32 @lputs(%struct.stream_s* %318, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i32 0, i32 0)) #6
  br label %if.end.505

if.else.454:                                      ; preds = %if.else.448
  %319 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType455 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %319, i32 0, i32 81
  %320 = load i32, i32* %MediaType455, align 4, !tbaa !92
  %cmp456 = icmp eq i32 %320, 3
  br i1 %cmp456, label %if.then.458, label %if.else.460

if.then.458:                                      ; preds = %if.else.454
  %321 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call459 = call i32 @lputs(%struct.stream_s* %321, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0)) #6
  br label %if.end.504

if.else.460:                                      ; preds = %if.else.454
  %322 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType461 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %322, i32 0, i32 81
  %323 = load i32, i32* %MediaType461, align 4, !tbaa !92
  %cmp462 = icmp eq i32 %323, 4
  br i1 %cmp462, label %if.then.464, label %if.else.466

if.then.464:                                      ; preds = %if.else.460
  %324 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call465 = call i32 @lputs(%struct.stream_s* %324, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0)) #6
  br label %if.end.503

if.else.466:                                      ; preds = %if.else.460
  %325 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType467 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %325, i32 0, i32 81
  %326 = load i32, i32* %MediaType467, align 4, !tbaa !92
  %cmp468 = icmp eq i32 %326, 5
  br i1 %cmp468, label %if.then.470, label %if.else.472

if.then.470:                                      ; preds = %if.else.466
  %327 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call471 = call i32 @lputs(%struct.stream_s* %327, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102, i32 0, i32 0)) #6
  br label %if.end.502

if.else.472:                                      ; preds = %if.else.466
  %328 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType473 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %328, i32 0, i32 81
  %329 = load i32, i32* %MediaType473, align 4, !tbaa !92
  %cmp474 = icmp eq i32 %329, 6
  br i1 %cmp474, label %if.then.476, label %if.else.478

if.then.476:                                      ; preds = %if.else.472
  %330 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call477 = call i32 @lputs(%struct.stream_s* %330, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0)) #6
  br label %if.end.501

if.else.478:                                      ; preds = %if.else.472
  %331 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType479 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %331, i32 0, i32 81
  %332 = load i32, i32* %MediaType479, align 4, !tbaa !92
  %cmp480 = icmp eq i32 %332, 7
  br i1 %cmp480, label %if.then.482, label %if.else.484

if.then.482:                                      ; preds = %if.else.478
  %333 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call483 = call i32 @lputs(%struct.stream_s* %333, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0)) #6
  br label %if.end.500

if.else.484:                                      ; preds = %if.else.478
  %334 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType485 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %334, i32 0, i32 81
  %335 = load i32, i32* %MediaType485, align 4, !tbaa !92
  %cmp486 = icmp eq i32 %335, 8
  br i1 %cmp486, label %if.then.488, label %if.else.490

if.then.488:                                      ; preds = %if.else.484
  %336 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call489 = call i32 @lputs(%struct.stream_s* %336, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0)) #6
  br label %if.end.499

if.else.490:                                      ; preds = %if.else.484
  %337 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaType491 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %337, i32 0, i32 81
  %338 = load i32, i32* %MediaType491, align 4, !tbaa !92
  %cmp492 = icmp eq i32 %338, 9
  br i1 %cmp492, label %if.then.494, label %if.else.496

if.then.494:                                      ; preds = %if.else.490
  %339 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call495 = call i32 @lputs(%struct.stream_s* %339, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.106, i32 0, i32 0)) #6
  br label %if.end.498

if.else.496:                                      ; preds = %if.else.490
  %340 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call497 = call i32 @lputs(%struct.stream_s* %340, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0)) #6
  br label %if.end.498

if.end.498:                                       ; preds = %if.else.496, %if.then.494
  br label %if.end.499

if.end.499:                                       ; preds = %if.end.498, %if.then.488
  br label %if.end.500

if.end.500:                                       ; preds = %if.end.499, %if.then.482
  br label %if.end.501

if.end.501:                                       ; preds = %if.end.500, %if.then.476
  br label %if.end.502

if.end.502:                                       ; preds = %if.end.501, %if.then.470
  br label %if.end.503

if.end.503:                                       ; preds = %if.end.502, %if.then.464
  br label %if.end.504

if.end.504:                                       ; preds = %if.end.503, %if.then.458
  br label %if.end.505

if.end.505:                                       ; preds = %if.end.504, %if.then.452
  br label %if.end.506

if.end.506:                                       ; preds = %if.end.505, %if.then.446
  br label %if.end.507

if.end.507:                                       ; preds = %if.end.506, %if.then.440
  %341 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call508 = call i32 @lputs(%struct.stream_s* %341, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #6
  %342 = bitcast %struct.EPaperTable_s** %pt to i8*
  call void @llvm.lifetime.start(i64 8, i8* %342) #2
  %343 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call510 = call %struct.EPaperTable_s* @escv_checkpapersize(%struct.gx_device_vector_s* %343) #6
  store %struct.EPaperTable_s* %call510, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %344 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %cmp511 = icmp eq %struct.EPaperTable_s* null, %344
  br i1 %cmp511, label %if.then.513, label %if.else.515

if.then.513:                                      ; preds = %if.end.507
  %345 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call514 = call i32 @lputs(%struct.stream_s* %345, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.108, i32 0, i32 0)) #6
  br label %if.end.518

if.else.515:                                      ; preds = %if.end.507
  %346 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %347 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %name516 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %347, i32 0, i32 3
  %348 = load i8*, i8** %name516, align 8, !tbaa !143
  %call517 = call i32 @lputs(%struct.stream_s* %346, i8* %348) #6
  br label %if.end.518

if.end.518:                                       ; preds = %if.else.515, %if.then.513
  %349 = bitcast %struct.EPaperTable_s** %pt to i8*
  call void @llvm.lifetime.end(i64 8, i8* %349) #2
  %350 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %350, i32 0, i32 67
  %351 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp519 = icmp eq i32 0, %351
  br i1 %cmp519, label %if.then.521, label %if.else.552

if.then.521:                                      ; preds = %if.end.518
  %352 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call522 = call i32 @lputs(%struct.stream_s* %352, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.109, i32 0, i32 0)) #6
  %353 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call523 = call i32 @lputs(%struct.stream_s* %353, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.110, i32 0, i32 0)) #6
  %354 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call524 = call i32 @lputs(%struct.stream_s* %354, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111, i32 0, i32 0)) #6
  %355 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call525 = call i32 @lputs(%struct.stream_s* %355, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.112, i32 0, i32 0)) #6
  %356 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution526 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %356, i32 0, i32 22
  %arrayidx527 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution526, i32 0, i64 0
  %357 = load float, float* %arrayidx527, align 4, !tbaa !51
  %cmp528 = fcmp oeq float %357, 1.200000e+03
  br i1 %cmp528, label %if.then.530, label %if.else.535

if.then.530:                                      ; preds = %if.then.521
  %358 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call531 = call i32 @lputs(%struct.stream_s* %358, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0)) #6
  %359 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call532 = call i32 @lputs(%struct.stream_s* %359, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  %360 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call533 = call i32 @lputs(%struct.stream_s* %360, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.115, i32 0, i32 0)) #6
  %361 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call534 = call i32 @lputs(%struct.stream_s* %361, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.116, i32 0, i32 0)) #6
  br label %if.end.549

if.else.535:                                      ; preds = %if.then.521
  %362 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution536 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %362, i32 0, i32 22
  %arrayidx537 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution536, i32 0, i64 0
  %363 = load float, float* %arrayidx537, align 4, !tbaa !51
  %cmp538 = fcmp oeq float %363, 6.000000e+02
  br i1 %cmp538, label %if.then.540, label %if.else.544

if.then.540:                                      ; preds = %if.else.535
  %364 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call541 = call i32 @lputs(%struct.stream_s* %364, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.117, i32 0, i32 0)) #6
  %365 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call542 = call i32 @lputs(%struct.stream_s* %365, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  %366 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call543 = call i32 @lputs(%struct.stream_s* %366, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.119, i32 0, i32 0)) #6
  br label %if.end.548

if.else.544:                                      ; preds = %if.else.535
  %367 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call545 = call i32 @lputs(%struct.stream_s* %367, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0)) #6
  %368 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call546 = call i32 @lputs(%struct.stream_s* %368, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  %369 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call547 = call i32 @lputs(%struct.stream_s* %369, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.122, i32 0, i32 0)) #6
  br label %if.end.548

if.end.548:                                       ; preds = %if.else.544, %if.then.540
  br label %if.end.549

if.end.549:                                       ; preds = %if.end.548, %if.then.530
  %370 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call550 = call i32 @lputs(%struct.stream_s* %370, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.123, i32 0, i32 0)) #6
  %371 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call551 = call i32 @lputs(%struct.stream_s* %371, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.124, i32 0, i32 0)) #6
  br label %if.end.647

if.else.552:                                      ; preds = %if.end.518
  %372 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call553 = call i32 @lputs(%struct.stream_s* %372, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.125, i32 0, i32 0)) #6
  %373 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call554 = call i32 @lputs(%struct.stream_s* %373, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.126, i32 0, i32 0)) #6
  %374 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call555 = call i32 @lputs(%struct.stream_s* %374, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111, i32 0, i32 0)) #6
  %375 = bitcast i64* %__s1_len557 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %375) #2
  %376 = bitcast i64* %__s2_len559 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %376) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 1) to i64), i64 ptrtoint ([8 x i8]* @.str.44 to i64)), i64 1), label %land.lhs.true.561, label %cond.false.609

land.lhs.true.561:                                ; preds = %if.else.552
  %call562 = call i64 @strlen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0)) #8
  store i64 %call562, i64* %__s2_len559, align 8, !tbaa !59
  %377 = load i64, i64* %__s2_len559, align 8, !tbaa !59
  %cmp563 = icmp ult i64 %377, 4
  br i1 %cmp563, label %cond.true.565, label %cond.false.609

cond.true.565:                                    ; preds = %land.lhs.true.561
  %378 = bitcast i8** %__s1567 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %378) #2
  %379 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %dname568 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %379, i32 0, i32 2
  %380 = load i8*, i8** %dname568, align 8, !tbaa !145
  store i8* %380, i8** %__s1567, align 8, !tbaa !1
  %381 = bitcast i32* %__result570 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %381) #2
  %382 = load i8*, i8** %__s1567, align 8, !tbaa !1
  %arrayidx571 = getelementptr inbounds i8, i8* %382, i64 0
  %383 = load i8, i8* %arrayidx571, align 1, !tbaa !70
  %conv572 = zext i8 %383 to i32
  %384 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), align 1, !tbaa !70
  %conv573 = zext i8 %384 to i32
  %sub574 = sub nsw i32 %conv572, %conv573
  store i32 %sub574, i32* %__result570, align 4, !tbaa !5
  %385 = load i64, i64* %__s2_len559, align 8, !tbaa !59
  %cmp575 = icmp ugt i64 %385, 0
  br i1 %cmp575, label %land.lhs.true.577, label %if.end.607

land.lhs.true.577:                                ; preds = %cond.true.565
  %386 = load i32, i32* %__result570, align 4, !tbaa !5
  %cmp578 = icmp eq i32 %386, 0
  br i1 %cmp578, label %if.then.580, label %if.end.607

if.then.580:                                      ; preds = %land.lhs.true.577
  %387 = load i8*, i8** %__s1567, align 8, !tbaa !1
  %arrayidx581 = getelementptr inbounds i8, i8* %387, i64 1
  %388 = load i8, i8* %arrayidx581, align 1, !tbaa !70
  %conv582 = zext i8 %388 to i32
  %389 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 1), align 1, !tbaa !70
  %conv583 = zext i8 %389 to i32
  %sub584 = sub nsw i32 %conv582, %conv583
  store i32 %sub584, i32* %__result570, align 4, !tbaa !5
  %390 = load i64, i64* %__s2_len559, align 8, !tbaa !59
  %cmp585 = icmp ugt i64 %390, 1
  br i1 %cmp585, label %land.lhs.true.587, label %if.end.606

land.lhs.true.587:                                ; preds = %if.then.580
  %391 = load i32, i32* %__result570, align 4, !tbaa !5
  %cmp588 = icmp eq i32 %391, 0
  br i1 %cmp588, label %if.then.590, label %if.end.606

if.then.590:                                      ; preds = %land.lhs.true.587
  %392 = load i8*, i8** %__s1567, align 8, !tbaa !1
  %arrayidx591 = getelementptr inbounds i8, i8* %392, i64 2
  %393 = load i8, i8* %arrayidx591, align 1, !tbaa !70
  %conv592 = zext i8 %393 to i32
  %394 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 2), align 1, !tbaa !70
  %conv593 = zext i8 %394 to i32
  %sub594 = sub nsw i32 %conv592, %conv593
  store i32 %sub594, i32* %__result570, align 4, !tbaa !5
  %395 = load i64, i64* %__s2_len559, align 8, !tbaa !59
  %cmp595 = icmp ugt i64 %395, 2
  br i1 %cmp595, label %land.lhs.true.597, label %if.end.605

land.lhs.true.597:                                ; preds = %if.then.590
  %396 = load i32, i32* %__result570, align 4, !tbaa !5
  %cmp598 = icmp eq i32 %396, 0
  br i1 %cmp598, label %if.then.600, label %if.end.605

if.then.600:                                      ; preds = %land.lhs.true.597
  %397 = load i8*, i8** %__s1567, align 8, !tbaa !1
  %arrayidx601 = getelementptr inbounds i8, i8* %397, i64 3
  %398 = load i8, i8* %arrayidx601, align 1, !tbaa !70
  %conv602 = zext i8 %398 to i32
  %399 = load i8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i64 3), align 1, !tbaa !70
  %conv603 = zext i8 %399 to i32
  %sub604 = sub nsw i32 %conv602, %conv603
  store i32 %sub604, i32* %__result570, align 4, !tbaa !5
  br label %if.end.605

if.end.605:                                       ; preds = %if.then.600, %land.lhs.true.597, %if.then.590
  br label %if.end.606

if.end.606:                                       ; preds = %if.end.605, %land.lhs.true.587, %if.then.580
  br label %if.end.607

if.end.607:                                       ; preds = %if.end.606, %land.lhs.true.577, %cond.true.565
  %400 = load i32, i32* %__result570, align 4, !tbaa !5
  store i32 %400, i32* %tmp608, !tbaa !5
  %401 = bitcast i32* %__result570 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %401) #2
  %402 = bitcast i8** %__s1567 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %402) #2
  %403 = load i32, i32* %tmp608, !tbaa !5
  br label %cond.end.612

cond.false.609:                                   ; preds = %land.lhs.true.561, %if.else.552
  %404 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %dname610 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %404, i32 0, i32 2
  %405 = load i8*, i8** %dname610, align 8, !tbaa !145
  %call611 = call i32 @strcmp(i8* %405, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0)) #7
  br label %cond.end.612

cond.end.612:                                     ; preds = %cond.false.609, %if.end.607
  %cond613 = phi i32 [ %403, %if.end.607 ], [ %call611, %cond.false.609 ]
  store i32 %cond613, i32* %tmp560, !tbaa !5
  %406 = bitcast i64* %__s2_len559 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %406) #2
  %407 = bitcast i64* %__s1_len557 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %407) #2
  %408 = load i32, i32* %tmp560, !tbaa !5
  %cmp614 = icmp eq i32 %408, 0
  br i1 %cmp614, label %if.then.616, label %if.else.618

if.then.616:                                      ; preds = %cond.end.612
  %409 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call617 = call i32 @lputs(%struct.stream_s* %409, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.127, i32 0, i32 0)) #6
  br label %if.end.620

if.else.618:                                      ; preds = %cond.end.612
  %410 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call619 = call i32 @lputs(%struct.stream_s* %410, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.128, i32 0, i32 0)) #6
  br label %if.end.620

if.end.620:                                       ; preds = %if.else.618, %if.then.616
  %411 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %411, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.129, i32 0, i32 0), i32 20) #6
  %412 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call621 = call i32 @lputs(%struct.stream_s* %412, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0)) #6
  %413 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution622 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %413, i32 0, i32 22
  %arrayidx623 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution622, i32 0, i64 0
  %414 = load float, float* %arrayidx623, align 4, !tbaa !51
  %cmp624 = fcmp oeq float %414, 1.200000e+03
  br i1 %cmp624, label %if.then.626, label %if.else.629

if.then.626:                                      ; preds = %if.end.620
  %415 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call627 = call i32 @lputs(%struct.stream_s* %415, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0)) #6
  %416 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call628 = call i32 @lputs(%struct.stream_s* %416, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.131, i32 0, i32 0)) #6
  br label %if.end.641

if.else.629:                                      ; preds = %if.end.620
  %417 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution630 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %417, i32 0, i32 22
  %arrayidx631 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution630, i32 0, i64 0
  %418 = load float, float* %arrayidx631, align 4, !tbaa !51
  %cmp632 = fcmp oeq float %418, 6.000000e+02
  br i1 %cmp632, label %if.then.634, label %if.else.637

if.then.634:                                      ; preds = %if.else.629
  %419 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call635 = call i32 @lputs(%struct.stream_s* %419, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.117, i32 0, i32 0)) #6
  %420 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call636 = call i32 @lputs(%struct.stream_s* %420, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.132, i32 0, i32 0)) #6
  br label %if.end.640

if.else.637:                                      ; preds = %if.else.629
  %421 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call638 = call i32 @lputs(%struct.stream_s* %421, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0)) #6
  %422 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call639 = call i32 @lputs(%struct.stream_s* %422, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.133, i32 0, i32 0)) #6
  br label %if.end.640

if.end.640:                                       ; preds = %if.else.637, %if.then.634
  br label %if.end.641

if.end.641:                                       ; preds = %if.end.640, %if.then.626
  %423 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call642 = call i32 @lputs(%struct.stream_s* %423, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.134, i32 0, i32 0)) #6
  %424 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call643 = call i32 @lputs(%struct.stream_s* %424, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.135, i32 0, i32 0)) #6
  %425 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call644 = call i32 @lputs(%struct.stream_s* %425, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i32 0, i32 0)) #6
  %426 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %426, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.137, i32 0, i32 0), i32 8) #6
  %427 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call645 = call i32 @lputs(%struct.stream_s* %427, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.124, i32 0, i32 0)) #6
  %428 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call646 = call i32 @lputs(%struct.stream_s* %428, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.138, i32 0, i32 0)) #6
  br label %if.end.647

if.end.647:                                       ; preds = %if.end.641, %if.end.549
  %429 = bitcast i32* %FaceUp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %429) #2
  %430 = bitcast i32* %Duplex to i8*
  call void @llvm.lifetime.end(i64 4, i8* %430) #2
  %431 = bitcast i32* %Local to i8*
  call void @llvm.lifetime.end(i64 4, i8* %431) #2
  %432 = bitcast i32* %MaxRes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %432) #2
  %433 = bitcast [1024 x i8]* %ebuf to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %433) #2
  %434 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %434) #2
  br label %if.end.648

if.end.648:                                       ; preds = %if.end.647, %entry
  %435 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %435) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setlinewidth(%struct.gx_device_vector_s* %vdev, double %width) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %width.addr = alloca double, align 8
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [64 x i8], align 16
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %width, double* %width.addr, align 8, !tbaa !146
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %5) #2
  %6 = load double, double* %width.addr, align 8, !tbaa !146
  %cmp = fcmp olt double %6, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 1.000000e+00, double* %width.addr, align 8, !tbaa !146
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load double, double* %width.addr, align 8, !tbaa !146
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %lwidth = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 94
  store double %7, double* %lwidth, align 8, !tbaa !147
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %9 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %lwidth1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %9, i32 0, i32 94
  %10 = load double, double* %lwidth1, align 8, !tbaa !147
  %conv = fptosi double %10 to i32
  %11 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %11, i32 0, i32 95
  %12 = load i64, i64* %cap, align 8, !tbaa !148
  %conv2 = trunc i64 %12 to i32
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 96
  %14 = load i64, i64* %join, align 8, !tbaa !149
  %conv3 = trunc i64 %14 to i32
  %call4 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.165, i32 0, i32 0), i32 %conv, i32 %conv2, i32 %conv3) #6
  %15 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call6 = call i32 @lputs(%struct.stream_s* %15, i8* %arraydecay5) #6
  %16 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %16) #2
  %17 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setlinecap(%struct.gx_device_vector_s* %vdev, i32 %cap) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %cap.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %cap, i32* %cap.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %5) #2
  %6 = load i32, i32* %cap.addr, align 4, !tbaa !70
  %conv = zext i32 %6 to i64
  %7 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %7, i32 0, i32 95
  store i64 %conv, i64* %cap1, align 8, !tbaa !148
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap2 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 95
  %9 = load i64, i64* %cap2, align 8, !tbaa !148
  %cmp = icmp sge i64 %9, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %10 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %lwidth = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %10, i32 0, i32 94
  %11 = load double, double* %lwidth, align 8, !tbaa !147
  %conv4 = fptosi double %11 to i32
  %12 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap5 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %12, i32 0, i32 95
  %13 = load i64, i64* %cap5, align 8, !tbaa !148
  %conv6 = trunc i64 %13 to i32
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 96
  %15 = load i64, i64* %join, align 8, !tbaa !149
  %conv7 = trunc i64 %15 to i32
  %call8 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.165, i32 0, i32 0), i32 %conv4, i32 %conv6, i32 %conv7) #6
  %16 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay9 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call10 = call i32 @lputs(%struct.stream_s* %16, i8* %arraydecay9) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %17) #2
  %18 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setlinejoin(%struct.gx_device_vector_s* %vdev, i32 %join) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %join.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %join, i32* %join.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %5) #2
  %6 = load i32, i32* %join.addr, align 4, !tbaa !70
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.2
    i32 2, label %sw.bb.4
  ]

sw.bb:                                            ; preds = %entry
  %7 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %7, i32 0, i32 96
  store i64 3, i64* %join1, align 8, !tbaa !149
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join3 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 96
  store i64 1, i64* %join3, align 8, !tbaa !149
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %9 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join5 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %9, i32 0, i32 96
  store i64 2, i64* %join5, align 8, !tbaa !149
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %sw.bb.4, %sw.bb.2, %sw.bb
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %10 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %lwidth = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %10, i32 0, i32 94
  %11 = load double, double* %lwidth, align 8, !tbaa !147
  %conv = fptosi double %11 to i32
  %12 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %12, i32 0, i32 95
  %13 = load i64, i64* %cap, align 8, !tbaa !148
  %conv6 = trunc i64 %13 to i32
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join7 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 96
  %15 = load i64, i64* %join7, align 8, !tbaa !149
  %conv8 = trunc i64 %15 to i32
  %call9 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.165, i32 0, i32 0), i32 %conv, i32 %conv6, i32 %conv8) #6
  %16 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay10 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call11 = call i32 @lputs(%struct.stream_s* %16, i8* %arraydecay10) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default
  %17 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %17) #2
  %18 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setmiterlimit(%struct.gx_device_vector_s* %vdev, double %limit) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %limit.addr = alloca double, align 8
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [128 x i8], align 16
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %limit, double* %limit.addr, align 8, !tbaa !146
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %6 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %6, i32 0, i32 96
  %7 = load i64, i64* %join, align 8, !tbaa !149
  %cmp = icmp ne i64 %7, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 96
  store i64 3, i64* %join1, align 8, !tbaa !149
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %9 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %lwidth = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %9, i32 0, i32 94
  %10 = load double, double* %lwidth, align 8, !tbaa !147
  %conv = fptosi double %10 to i32
  %11 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %cap = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %11, i32 0, i32 95
  %12 = load i64, i64* %cap, align 8, !tbaa !148
  %conv2 = trunc i64 %12 to i32
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %join3 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 96
  %14 = load i64, i64* %join3, align 8, !tbaa !149
  %conv4 = trunc i64 %14 to i32
  %call5 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.165, i32 0, i32 0), i32 %conv, i32 %conv2, i32 %conv4) #6
  %15 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call7 = call i32 @lputs(%struct.stream_s* %15, i8* %arraydecay6) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay8 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %16 = load double, double* %limit.addr, align 8, !tbaa !146
  %conv9 = fptosi double %16 to i32
  %call10 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.166, i32 0, i32 0), i32 %conv9) #6
  %17 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call12 = call i32 @lputs(%struct.stream_s* %17, i8* %arraydecay11) #6
  %18 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %18) #2
  %19 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  %20 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setdash(%struct.gx_device_vector_s* %vdev, float* %pattern, i32 %count, double %offset) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pattern.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %offset.addr = alloca double, align 8
  %s = alloca %struct.stream_s*, align 8
  %i = alloca i32, align 4
  %obuf = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store float* %pattern, float** %pattern.addr, align 8, !tbaa !1
  store i32 %count, i32* %count.addr, align 4, !tbaa !5
  store double %offset, double* %offset.addr, align 8, !tbaa !146
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %3) #2
  %4 = load i32, i32* %count.addr, align 4, !tbaa !5
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call1 = call i32 @lputs(%struct.stream_s* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.167, i32 0, i32 0)) #6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load double, double* %offset.addr, align 8, !tbaa !146
  %cmp2 = fcmp une double %6, 0.000000e+00
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %7 = load i32, i32* %count.addr, align 4, !tbaa !5
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then.5, label %if.end.38

if.then.5:                                        ; preds = %if.end.4
  %8 = load i32, i32* %count.addr, align 4, !tbaa !5
  %cmp6 = icmp eq i32 %8, 1
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %9 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds float, float* %9, i64 0
  %10 = load float, float* %arrayidx, align 4, !tbaa !51
  %conv = fptosi float %10 to i32
  %11 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx8 = getelementptr inbounds float, float* %11, i64 0
  %12 = load float, float* %arrayidx8, align 4, !tbaa !51
  %conv9 = fptosi float %12 to i32
  %call10 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.168, i32 0, i32 0), i32 %conv, i32 %conv9) #6
  %13 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call12 = call i32 @lputs(%struct.stream_s* %13, i8* %arraydecay11) #6
  br label %if.end.36

if.else:                                          ; preds = %if.then.5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %15 = load i32, i32* %count.addr, align 4, !tbaa !5
  %cmp13 = icmp ult i32 %14, %15
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %16 to i64
  %17 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx15 = getelementptr inbounds float, float* %17, i64 %idxprom
  %18 = load float, float* %arrayidx15, align 4, !tbaa !51
  %cmp16 = fcmp oeq float %18, 0.000000e+00
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %for.body
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.19:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.19
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call20 = call i32 @lputs(%struct.stream_s* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.169, i32 0, i32 0)) #6
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.32, %for.end
  %21 = load i32, i32* %i, align 4, !tbaa !5
  %22 = load i32, i32* %count.addr, align 4, !tbaa !5
  %cmp22 = icmp ult i32 %21, %22
  br i1 %cmp22, label %for.body.24, label %for.end.34

for.body.24:                                      ; preds = %for.cond.21
  %arraydecay25 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %23 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom26 = sext i32 %23 to i64
  %24 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx27 = getelementptr inbounds float, float* %24, i64 %idxprom26
  %25 = load float, float* %arrayidx27, align 4, !tbaa !51
  %conv28 = fptosi float %25 to i32
  %call29 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), i32 %conv28) #6
  %26 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay30 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call31 = call i32 @lputs(%struct.stream_s* %26, i8* %arraydecay30) #6
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.24
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %inc33 = add nsw i32 %27, 1
  store i32 %inc33, i32* %i, align 4, !tbaa !5
  br label %for.cond.21

for.end.34:                                       ; preds = %for.cond.21
  %28 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call35 = call i32 @lputs(%struct.stream_s* %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.171, i32 0, i32 0)) #6
  br label %if.end.36

if.end.36:                                        ; preds = %for.end.34, %if.then.7
  %29 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call37 = call i32 @lputs(%struct.stream_s* %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.172, i32 0, i32 0)) #6
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.36, %if.end.4
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.38, %if.then.18, %if.then.3, %if.then
  %30 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %30) #2
  %31 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %31) #2
  %32 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setflat(%struct.gx_device_vector_s* %vdev, double %flatness) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %flatness.addr = alloca double, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %flatness, double* %flatness.addr, align 8, !tbaa !146
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setlogop(%struct.gx_device_vector_s* %vdev, i32 %lop, i32 %diff) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %lop.addr = alloca i32, align 4
  %diff.addr = alloca i32, align 4
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %lop, i32* %lop.addr, align 4, !tbaa !5
  store i32 %diff, i32* %diff.addr, align 4, !tbaa !5
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_can_handle_hl_color(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setfillcolor(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %color = alloca i64, align 8
  %obuf = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %6, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %7 = load i64, i64* %pure, align 8, !tbaa !59
  store i64 %7, i64* %color, align 8, !tbaa !59
  %8 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %8) #2
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %9, i32 0, i32 0
  %10 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !60
  %11 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** @gx_dc_type_pure, align 8, !tbaa !1
  %cmp = icmp eq %struct.gx_device_color_type_s* %10, %11
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load i64, i64* %color, align 8, !tbaa !59
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %current_color = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 93
  store i64 %12, i64* %current_color, align 8, !tbaa !101
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 67
  %15 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp1 = icmp eq i32 0, %15
  br i1 %cmp1, label %if.then.2, label %if.else.18

if.then.2:                                        ; preds = %if.end
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %16 = load i64, i64* %color, align 8, !tbaa !59
  %call3 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.173, i32 0, i32 0), i64 %16) #6
  %17 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call5 = call i32 @lputs(%struct.stream_s* %17, i8* %arraydecay4) #6
  %18 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %18, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %19 = load float, float* %arrayidx, align 4, !tbaa !51
  %cmp6 = fcmp oeq float %19, 1.200000e+03
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.2
  %20 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call8 = call i32 @lputs(%struct.stream_s* %20, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  br label %if.end.17

if.else:                                          ; preds = %if.then.2
  %21 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution9 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %21, i32 0, i32 22
  %arrayidx10 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution9, i32 0, i64 0
  %22 = load float, float* %arrayidx10, align 4, !tbaa !51
  %cmp11 = fcmp oeq float %22, 6.000000e+02
  br i1 %cmp11, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %if.else
  %23 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call13 = call i32 @lputs(%struct.stream_s* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  br label %if.end.16

if.else.14:                                       ; preds = %if.else
  %24 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call15 = call i32 @lputs(%struct.stream_s* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.14, %if.then.12
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then.7
  br label %if.end.32

if.else.18:                                       ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %25 = load i64, i64* %color, align 8, !tbaa !59
  %shr = lshr i64 %25, 16
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i8
  %conv20 = zext i8 %conv to i32
  %26 = load i64, i64* %color, align 8, !tbaa !59
  %shr21 = lshr i64 %26, 8
  %and22 = and i64 %shr21, 255
  %conv23 = trunc i64 %and22 to i8
  %conv24 = zext i8 %conv23 to i32
  %27 = load i64, i64* %color, align 8, !tbaa !59
  %and25 = and i64 %27, 255
  %conv26 = trunc i64 %and25 to i8
  %conv27 = zext i8 %conv26 to i32
  %call28 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.174, i32 0, i32 0), i32 %conv20, i32 %conv24, i32 %conv27) #6
  %28 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay29 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call30 = call i32 @lputs(%struct.stream_s* %28, i8* %arraydecay29) #6
  %29 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call31 = call i32 @lputs(%struct.stream_s* %29, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.175, i32 0, i32 0)) #6
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.18, %if.end.17
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.32, %if.then
  %30 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %30) #2
  %31 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #2
  %32 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #2
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_setstrokecolor(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %color = alloca i64, align 8
  %obuf = alloca [64 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %6, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %7 = load i64, i64* %pure, align 8, !tbaa !59
  store i64 %7, i64* %color, align 8, !tbaa !59
  %8 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %8) #2
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %9, i32 0, i32 0
  %10 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !60
  %11 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** @gx_dc_type_pure, align 8, !tbaa !1
  %cmp = icmp eq %struct.gx_device_color_type_s* %10, %11
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %12, i32 0, i32 67
  %13 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp1 = icmp eq i32 0, %13
  br i1 %cmp1, label %if.then.2, label %if.else.18

if.then.2:                                        ; preds = %if.end
  %14 = load i64, i64* %color, align 8, !tbaa !59
  %15 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %current_color = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %15, i32 0, i32 93
  store i64 %14, i64* %current_color, align 8, !tbaa !101
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %16 = load i64, i64* %color, align 8, !tbaa !59
  %call3 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.176, i32 0, i32 0), i64 %16) #6
  %17 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call5 = call i32 @lputs(%struct.stream_s* %17, i8* %arraydecay4) #6
  %18 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %18, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %19 = load float, float* %arrayidx, align 4, !tbaa !51
  %cmp6 = fcmp oeq float %19, 1.200000e+03
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.2
  %20 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call8 = call i32 @lputs(%struct.stream_s* %20, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.114, i32 0, i32 0)) #6
  br label %if.end.17

if.else:                                          ; preds = %if.then.2
  %21 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %HWResolution9 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %21, i32 0, i32 22
  %arrayidx10 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution9, i32 0, i64 0
  %22 = load float, float* %arrayidx10, align 4, !tbaa !51
  %cmp11 = fcmp oeq float %22, 6.000000e+02
  br i1 %cmp11, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %if.else
  %23 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call13 = call i32 @lputs(%struct.stream_s* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0)) #6
  br label %if.end.16

if.else.14:                                       ; preds = %if.else
  %24 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call15 = call i32 @lputs(%struct.stream_s* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0)) #6
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.14, %if.then.12
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then.7
  br label %if.end.37

if.else.18:                                       ; preds = %if.end
  %25 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %25, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 3
  %26 = load i16, i16* %depth, align 2, !tbaa !150
  %conv = zext i16 %26 to i32
  %cmp19 = icmp eq i32 %conv, 24
  br i1 %cmp19, label %if.then.21, label %if.end.36

if.then.21:                                       ; preds = %if.else.18
  %27 = load i64, i64* %color, align 8, !tbaa !59
  %28 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %current_color22 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %28, i32 0, i32 93
  store i64 %27, i64* %current_color22, align 8, !tbaa !101
  %arraydecay23 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %29 = load i64, i64* %color, align 8, !tbaa !59
  %shr = lshr i64 %29, 16
  %and = and i64 %shr, 255
  %conv24 = trunc i64 %and to i8
  %conv25 = zext i8 %conv24 to i32
  %30 = load i64, i64* %color, align 8, !tbaa !59
  %shr26 = lshr i64 %30, 8
  %and27 = and i64 %shr26, 255
  %conv28 = trunc i64 %and27 to i8
  %conv29 = zext i8 %conv28 to i32
  %31 = load i64, i64* %color, align 8, !tbaa !59
  %and30 = and i64 %31, 255
  %conv31 = trunc i64 %and30 to i8
  %conv32 = zext i8 %conv31 to i32
  %call33 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.177, i32 0, i32 0), i32 %conv25, i32 %conv29, i32 %conv32) #6
  %32 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay34 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call35 = call i32 @lputs(%struct.stream_s* %32, i8* %arraydecay34) #6
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.21, %if.else.18
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end.17
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.37, %if.then
  %33 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %33) #2
  %34 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  %36 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_vector_dopath(%struct.gx_device_vector_s* %vdev, %struct.gx_path_s* %ppath, i32 %type, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %type.addr = alloca i32, align 4
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %do_close = alloca i32, align 4
  %rect = alloca %struct.gs_fixed_rect_s, align 4
  %scale = alloca %struct.gs_point_s, align 8
  %x_start = alloca double, align 8
  %y_start = alloca double, align 8
  %x_prev = alloca double, align 8
  %y_prev = alloca double, align 8
  %first = alloca i32, align 4
  %cenum = alloca %struct.gs_path_enum_s, align 8
  %code = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %obuf = alloca [128 x i8], align 16
  %cleanup.dest.slot = alloca i32
  %x13 = alloca double, align 8
  %y14 = alloca double, align 8
  %vs = alloca [6 x i32], align 16
  %pe_op = alloca i32, align 4
  %cnt = alloca i32, align 4
  %pseg = alloca %struct.segment_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %do_close to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and = and i32 %4, 2
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %do_close, align 4, !tbaa !5
  %5 = bitcast %struct.gs_fixed_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #2
  %6 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast double* %x_start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  store double 0.000000e+00, double* %x_start, align 8, !tbaa !146
  %8 = bitcast double* %y_start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store double 0.000000e+00, double* %y_start, align 8, !tbaa !146
  %9 = bitcast double* %x_prev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  store double 0.000000e+00, double* %x_prev, align 8, !tbaa !146
  %10 = bitcast double* %y_prev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  store double 0.000000e+00, double* %y_prev, align 8, !tbaa !146
  %11 = bitcast i32* %first to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  store i32 1, i32* %first, align 4, !tbaa !5
  %12 = bitcast %struct.gs_path_enum_s* %cenum to i8*
  call void @llvm.lifetime.start(i64 64, i8* %12) #2
  %13 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  %15 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %15) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %16 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %16) #2
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call1 = call i32 @gx_path_is_rectangular(%struct.gx_path_s* %17, %struct.gs_fixed_rect_s* %rect) #6
  %cmp2 = icmp ne i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %18, i32 0, i32 44
  %19 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !43
  %dorect = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %19, i32 0, i32 12
  %20 = load i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)** %dorect, align 8, !tbaa !151
  %21 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %22 = load i32, i32* %x, align 4, !tbaa !153
  %p4 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p4, i32 0, i32 1
  %23 = load i32, i32* %y, align 4, !tbaa !155
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 1
  %x5 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %24 = load i32, i32* %x5, align 4, !tbaa !156
  %q6 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 1
  %y7 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q6, i32 0, i32 1
  %25 = load i32, i32* %y7, align 4, !tbaa !157
  %26 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call8 = call i32 %20(%struct.gx_device_vector_s* %21, i32 %22, i32 %23, i32 %24, i32 %25, i32 %26) #6
  store i32 %call8, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.166

if.end:                                           ; preds = %entry
  %27 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %scale9 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %27, i32 0, i32 62
  %28 = bitcast %struct.gs_point_s* %scale to i8*
  %29 = bitcast %struct.gs_point_s* %scale9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false), !tbaa.struct !158
  %30 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs10 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %30, i32 0, i32 44
  %31 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs10, align 8, !tbaa !43
  %beginpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %31, i32 0, i32 13
  %32 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %beginpath, align 8, !tbaa !159
  %33 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %34 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call11 = call i32 %32(%struct.gx_device_vector_s* %33, i32 %34) #6
  store i32 %call11, i32* %code, align 4, !tbaa !5
  %35 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call12 = call i32 @gx_path_enum_init(%struct.gs_path_enum_s* %cenum, %struct.gx_path_s* %35) #6
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %if.end
  %36 = bitcast double* %x13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %36) #2
  %37 = bitcast double* %y14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %37) #2
  %38 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.start(i64 24, i8* %38) #2
  %39 = bitcast i32* %pe_op to i8*
  call void @llvm.lifetime.start(i64 4, i8* %39) #2
  %40 = bitcast i32* %cnt to i8*
  call void @llvm.lifetime.start(i64 4, i8* %40) #2
  %41 = bitcast %struct.segment_s** %pseg to i8*
  call void @llvm.lifetime.start(i64 8, i8* %41) #2
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %42 = bitcast i32* %arraydecay to %struct.gs_fixed_point_s*
  %call15 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %cenum, %struct.gs_fixed_point_s* %42) #6
  store i32 %call15, i32* %pe_op, align 4, !tbaa !5
  br label %sw

sw:                                               ; preds = %if.end.152, %do.end.135, %do.end, %for.cond
  %43 = load i32, i32* %pe_op, align 4, !tbaa !5
  switch i32 %43, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.18
    i32 2, label %sw.bb.34
    i32 3, label %sw.bb.68
    i32 4, label %sw.bb.138
  ]

sw.bb:                                            ; preds = %sw
  %44 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs16 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %44, i32 0, i32 44
  %45 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs16, align 8, !tbaa !43
  %endpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %45, i32 0, i32 18
  %46 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %endpath, align 8, !tbaa !160
  %47 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %48 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call17 = call i32 %46(%struct.gx_device_vector_s* %47, i32 %48) #6
  store i32 %call17, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.18:                                         ; preds = %sw
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %49 = load i32, i32* %arrayidx, align 4, !tbaa !5
  %conv19 = sitofp i32 %49 to double
  %mul = fmul double %conv19, 3.906250e-03
  %x20 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %50 = load double, double* %x20, align 8, !tbaa !161
  %div = fdiv double %mul, %50
  store double %div, double* %x13, align 8, !tbaa !146
  %arrayidx21 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %51 = load i32, i32* %arrayidx21, align 4, !tbaa !5
  %conv22 = sitofp i32 %51 to double
  %mul23 = fmul double %conv22, 3.906250e-03
  %y24 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %52 = load double, double* %y24, align 8, !tbaa !162
  %div25 = fdiv double %mul23, %52
  store double %div25, double* %y14, align 8, !tbaa !146
  %arraydecay26 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %53 = load double, double* %x13, align 8, !tbaa !146
  %conv27 = fptosi double %53 to i32
  %54 = load double, double* %y14, align 8, !tbaa !146
  %conv28 = fptosi double %54 to i32
  %call29 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay26, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.178, i32 0, i32 0), i32 %conv27, i32 %conv28) #6
  %55 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay30 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call31 = call i32 @lputs(%struct.stream_s* %55, i8* %arraydecay30) #6
  %56 = load i32, i32* %first, align 4, !tbaa !5
  %tobool = icmp ne i32 %56, 0
  br i1 %tobool, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %sw.bb.18
  %57 = load double, double* %x13, align 8, !tbaa !146
  store double %57, double* %x_start, align 8, !tbaa !146
  %58 = load double, double* %y14, align 8, !tbaa !146
  store double %58, double* %y_start, align 8, !tbaa !146
  store i32 0, i32* %first, align 4, !tbaa !5
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %sw.bb.18
  br label %sw.epilog

sw.bb.34:                                         ; preds = %sw
  store i32 1, i32* %cnt, align 4, !tbaa !5
  %pseg35 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %cenum, i32 0, i32 2
  %59 = load %struct.segment_s*, %struct.segment_s** %pseg35, align 8, !tbaa !163
  store %struct.segment_s* %59, %struct.segment_s** %pseg, align 8, !tbaa !1
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc, %sw.bb.34
  %60 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %cmp37 = icmp ne %struct.segment_s* %60, null
  br i1 %cmp37, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.36
  %61 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %type39 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %61, i32 0, i32 2
  %62 = load i16, i16* %type39, align 2, !tbaa !165
  %conv40 = zext i16 %62 to i32
  %cmp41 = icmp eq i32 %conv40, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.36
  %63 = phi i1 [ false, %for.cond.36 ], [ %cmp41, %land.rhs ]
  br i1 %63, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %64 = load i32, i32* %cnt, align 4, !tbaa !5
  %inc = add nsw i32 %64, 1
  store i32 %inc, i32* %cnt, align 4, !tbaa !5
  %65 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.segment_s, %struct.segment_s* %65, i32 0, i32 1
  %66 = load %struct.segment_s*, %struct.segment_s** %next, align 8, !tbaa !167
  store %struct.segment_s* %66, %struct.segment_s** %pseg, align 8, !tbaa !1
  br label %for.cond.36

for.end:                                          ; preds = %land.end
  %arraydecay43 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %67 = load i32, i32* %cnt, align 4, !tbaa !5
  %call44 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i32 0, i32 0), i32 %67) #6
  %68 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay45 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call46 = call i32 @lputs(%struct.stream_s* %68, i8* %arraydecay45) #6
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  %arraydecay47 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %69 = load i32, i32* %arrayidx48, align 4, !tbaa !5
  %conv49 = sitofp i32 %69 to double
  %mul50 = fmul double %conv49, 3.906250e-03
  %x51 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %70 = load double, double* %x51, align 8, !tbaa !161
  %div52 = fdiv double %mul50, %70
  %conv53 = fptosi double %div52 to i32
  %arrayidx54 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %71 = load i32, i32* %arrayidx54, align 4, !tbaa !5
  %conv55 = sitofp i32 %71 to double
  %mul56 = fmul double %conv55, 3.906250e-03
  %y57 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %72 = load double, double* %y57, align 8, !tbaa !162
  %div58 = fdiv double %mul56, %72
  %conv59 = fptosi double %div58 to i32
  %call60 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay47, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.180, i32 0, i32 0), i32 %conv53, i32 %conv59) #6
  %73 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay61 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call62 = call i32 @lputs(%struct.stream_s* %73, i8* %arraydecay61) #6
  %arraydecay63 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %74 = bitcast i32* %arraydecay63 to %struct.gs_fixed_point_s*
  %call64 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %cenum, %struct.gs_fixed_point_s* %74) #6
  store i32 %call64, i32* %pe_op, align 4, !tbaa !5
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %75 = load i32, i32* %pe_op, align 4, !tbaa !5
  %cmp65 = icmp eq i32 %75, 2
  br i1 %cmp65, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %76 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call67 = call i32 @lputs(%struct.stream_s* %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.181, i32 0, i32 0)) #6
  %77 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %77, i32 0, i32 108
  store i32 1, i32* %ispath, align 4, !tbaa !168
  br label %sw

sw.bb.68:                                         ; preds = %sw
  store i32 1, i32* %cnt, align 4, !tbaa !5
  %pseg69 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %cenum, i32 0, i32 2
  %78 = load %struct.segment_s*, %struct.segment_s** %pseg69, align 8, !tbaa !163
  store %struct.segment_s* %78, %struct.segment_s** %pseg, align 8, !tbaa !1
  br label %for.cond.70

for.cond.70:                                      ; preds = %for.inc.80, %sw.bb.68
  %79 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %cmp71 = icmp ne %struct.segment_s* %79, null
  br i1 %cmp71, label %land.rhs.73, label %land.end.78

land.rhs.73:                                      ; preds = %for.cond.70
  %80 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %type74 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %80, i32 0, i32 2
  %81 = load i16, i16* %type74, align 2, !tbaa !165
  %conv75 = zext i16 %81 to i32
  %cmp76 = icmp eq i32 %conv75, 3
  br label %land.end.78

land.end.78:                                      ; preds = %land.rhs.73, %for.cond.70
  %82 = phi i1 [ false, %for.cond.70 ], [ %cmp76, %land.rhs.73 ]
  br i1 %82, label %for.body.79, label %for.end.83

for.body.79:                                      ; preds = %land.end.78
  br label %for.inc.80

for.inc.80:                                       ; preds = %for.body.79
  %83 = load i32, i32* %cnt, align 4, !tbaa !5
  %inc81 = add nsw i32 %83, 1
  store i32 %inc81, i32* %cnt, align 4, !tbaa !5
  %84 = load %struct.segment_s*, %struct.segment_s** %pseg, align 8, !tbaa !1
  %next82 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %84, i32 0, i32 1
  %85 = load %struct.segment_s*, %struct.segment_s** %next82, align 8, !tbaa !167
  store %struct.segment_s* %85, %struct.segment_s** %pseg, align 8, !tbaa !1
  br label %for.cond.70

for.end.83:                                       ; preds = %land.end.78
  %arraydecay84 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %86 = load i32, i32* %cnt, align 4, !tbaa !5
  %mul85 = mul nsw i32 %86, 3
  %call86 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay84, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i32 0, i32 0), i32 %mul85) #6
  %87 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay87 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call88 = call i32 @lputs(%struct.stream_s* %87, i8* %arraydecay87) #6
  br label %do.body.89

do.body.89:                                       ; preds = %do.cond.132, %for.end.83
  %arraydecay90 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %arrayidx91 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %88 = load i32, i32* %arrayidx91, align 4, !tbaa !5
  %conv92 = sitofp i32 %88 to double
  %mul93 = fmul double %conv92, 3.906250e-03
  %x94 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %89 = load double, double* %x94, align 8, !tbaa !161
  %div95 = fdiv double %mul93, %89
  %conv96 = fptosi double %div95 to i32
  %arrayidx97 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %90 = load i32, i32* %arrayidx97, align 4, !tbaa !5
  %conv98 = sitofp i32 %90 to double
  %mul99 = fmul double %conv98, 3.906250e-03
  %y100 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %91 = load double, double* %y100, align 8, !tbaa !162
  %div101 = fdiv double %mul99, %91
  %conv102 = fptosi double %div101 to i32
  %arrayidx103 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 2
  %92 = load i32, i32* %arrayidx103, align 4, !tbaa !5
  %conv104 = sitofp i32 %92 to double
  %mul105 = fmul double %conv104, 3.906250e-03
  %x106 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %93 = load double, double* %x106, align 8, !tbaa !161
  %div107 = fdiv double %mul105, %93
  %conv108 = fptosi double %div107 to i32
  %arrayidx109 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 3
  %94 = load i32, i32* %arrayidx109, align 4, !tbaa !5
  %conv110 = sitofp i32 %94 to double
  %mul111 = fmul double %conv110, 3.906250e-03
  %y112 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %95 = load double, double* %y112, align 8, !tbaa !162
  %div113 = fdiv double %mul111, %95
  %conv114 = fptosi double %div113 to i32
  %arrayidx115 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 4
  %96 = load i32, i32* %arrayidx115, align 4, !tbaa !5
  %conv116 = sitofp i32 %96 to double
  %mul117 = fmul double %conv116, 3.906250e-03
  %x118 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %97 = load double, double* %x118, align 8, !tbaa !161
  %div119 = fdiv double %mul117, %97
  %conv120 = fptosi double %div119 to i32
  %arrayidx121 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 5
  %98 = load i32, i32* %arrayidx121, align 4, !tbaa !5
  %conv122 = sitofp i32 %98 to double
  %mul123 = fmul double %conv122, 3.906250e-03
  %y124 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %99 = load double, double* %y124, align 8, !tbaa !162
  %div125 = fdiv double %mul123, %99
  %conv126 = fptosi double %div125 to i32
  %call127 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay90, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.182, i32 0, i32 0), i32 %conv96, i32 %conv102, i32 %conv108, i32 %conv114, i32 %conv120, i32 %conv126) #6
  %100 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay128 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call129 = call i32 @lputs(%struct.stream_s* %100, i8* %arraydecay128) #6
  %arraydecay130 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %101 = bitcast i32* %arraydecay130 to %struct.gs_fixed_point_s*
  %call131 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %cenum, %struct.gs_fixed_point_s* %101) #6
  store i32 %call131, i32* %pe_op, align 4, !tbaa !5
  br label %do.cond.132

do.cond.132:                                      ; preds = %do.body.89
  %102 = load i32, i32* %pe_op, align 4, !tbaa !5
  %cmp133 = icmp eq i32 %102, 3
  br i1 %cmp133, label %do.body.89, label %do.end.135

do.end.135:                                       ; preds = %do.cond.132
  %103 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call136 = call i32 @lputs(%struct.stream_s* %103, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.183, i32 0, i32 0)) #6
  %104 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath137 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %104, i32 0, i32 108
  store i32 1, i32* %ispath137, align 4, !tbaa !168
  br label %sw

sw.bb.138:                                        ; preds = %sw
  %105 = load double, double* %x_start, align 8, !tbaa !146
  store double %105, double* %x13, align 8, !tbaa !146
  %106 = load double, double* %y_start, align 8, !tbaa !146
  store double %106, double* %y14, align 8, !tbaa !146
  %107 = load i32, i32* %do_close, align 4, !tbaa !5
  %tobool139 = icmp ne i32 %107, 0
  br i1 %tobool139, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %sw.bb.138
  %108 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call141 = call i32 @lputs(%struct.stream_s* %108, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0)) #6
  br label %sw.epilog

if.end.142:                                       ; preds = %sw.bb.138
  %arraydecay143 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %109 = bitcast i32* %arraydecay143 to %struct.gs_fixed_point_s*
  %call144 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %cenum, %struct.gs_fixed_point_s* %109) #6
  store i32 %call144, i32* %pe_op, align 4, !tbaa !5
  %110 = load i32, i32* %pe_op, align 4, !tbaa !5
  %cmp145 = icmp ne i32 %110, 0
  br i1 %cmp145, label %if.then.147, label %if.end.153

if.then.147:                                      ; preds = %if.end.142
  %111 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call148 = call i32 @lputs(%struct.stream_s* %111, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0)) #6
  %112 = load i32, i32* %code, align 4, !tbaa !5
  %cmp149 = icmp slt i32 %112, 0
  br i1 %cmp149, label %if.then.151, label %if.end.152

if.then.151:                                      ; preds = %if.then.147
  %113 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %113, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.152:                                       ; preds = %if.then.147
  br label %sw

if.end.153:                                       ; preds = %if.end.142
  %114 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs154 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %114, i32 0, i32 44
  %115 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs154, align 8, !tbaa !43
  %endpath155 = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %115, i32 0, i32 18
  %116 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %endpath155, align 8, !tbaa !160
  %117 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %118 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call156 = call i32 %116(%struct.gx_device_vector_s* %117, i32 %118) #6
  store i32 %call156, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.default:                                       ; preds = %sw
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %if.then.140, %if.end.33
  %119 = load i32, i32* %code, align 4, !tbaa !5
  %cmp157 = icmp slt i32 %119, 0
  br i1 %cmp157, label %if.then.159, label %if.end.160

if.then.159:                                      ; preds = %sw.epilog
  %120 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %120, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.160:                                       ; preds = %sw.epilog
  %121 = load double, double* %x13, align 8, !tbaa !146
  store double %121, double* %x_prev, align 8, !tbaa !146
  %122 = load double, double* %y14, align 8, !tbaa !146
  store double %122, double* %y_prev, align 8, !tbaa !146
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.160, %if.then.159, %sw.default, %if.end.153, %if.then.151, %sw.bb
  %123 = bitcast %struct.segment_s** %pseg to i8*
  call void @llvm.lifetime.end(i64 8, i8* %123) #2
  %124 = bitcast i32* %cnt to i8*
  call void @llvm.lifetime.end(i64 4, i8* %124) #2
  %125 = bitcast i32* %pe_op to i8*
  call void @llvm.lifetime.end(i64 4, i8* %125) #2
  %126 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.end(i64 24, i8* %126) #2
  %127 = bitcast double* %y14 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %127) #2
  %128 = bitcast double* %x13 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %128) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.166 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

cleanup.166:                                      ; preds = %cleanup, %if.then
  %129 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %129) #2
  %130 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %130) #2
  %131 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %131) #2
  %132 = bitcast %struct.gs_path_enum_s* %cenum to i8*
  call void @llvm.lifetime.end(i64 64, i8* %132) #2
  %133 = bitcast i32* %first to i8*
  call void @llvm.lifetime.end(i64 4, i8* %133) #2
  %134 = bitcast double* %y_prev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %134) #2
  %135 = bitcast double* %x_prev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %135) #2
  %136 = bitcast double* %y_start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %136) #2
  %137 = bitcast double* %x_start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %137) #2
  %138 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.end(i64 16, i8* %138) #2
  %139 = bitcast %struct.gs_fixed_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %139) #2
  %140 = bitcast i32* %do_close to i8*
  call void @llvm.lifetime.end(i64 4, i8* %140) #2
  %141 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %141) #2
  %142 = load i32, i32* %retval
  ret i32 %142
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_vector_dorect(%struct.gx_device_vector_s* %vdev, i32 %x0, i32 %y0, i32 %x1, i32 %y1, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %x1.addr = alloca i32, align 4
  %y1.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %code = alloca i32, align 4
  %obuf = alloca [128 x i8], align 16
  %scale = alloca %struct.gs_point_s, align 8
  %s = alloca %struct.stream_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %x0, i32* %x0.addr, align 4, !tbaa !5
  store i32 %y0, i32* %y0.addr, align 4, !tbaa !5
  store i32 %x1, i32* %x1.addr, align 4, !tbaa !5
  store i32 %y1, i32* %y1.addr, align 4, !tbaa !5
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %4) #2
  %5 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #2
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %7) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %8 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !43
  %beginpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 13
  %10 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %beginpath, align 8, !tbaa !159
  %11 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %12 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call1 = call i32 %10(%struct.gx_device_vector_s* %11, i32 %12) #6
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %13 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %13, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %14, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %15 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %scale2 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %15, i32 0, i32 62
  %16 = bitcast %struct.gs_point_s* %scale to i8*
  %17 = bitcast %struct.gs_point_s* %scale2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false), !tbaa.struct !158
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %18 = load i32, i32* %x0.addr, align 4, !tbaa !5
  %conv = sitofp i32 %18 to double
  %mul = fmul double %conv, 3.906250e-03
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %19 = load double, double* %x, align 8, !tbaa !161
  %div = fdiv double %mul, %19
  %conv3 = fptosi double %div to i32
  %20 = load i32, i32* %y0.addr, align 4, !tbaa !5
  %conv4 = sitofp i32 %20 to double
  %mul5 = fmul double %conv4, 3.906250e-03
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %21 = load double, double* %y, align 8, !tbaa !162
  %div6 = fdiv double %mul5, %21
  %conv7 = fptosi double %div6 to i32
  %22 = load i32, i32* %x1.addr, align 4, !tbaa !5
  %conv8 = sitofp i32 %22 to double
  %mul9 = fmul double %conv8, 3.906250e-03
  %x10 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %23 = load double, double* %x10, align 8, !tbaa !161
  %div11 = fdiv double %mul9, %23
  %conv12 = fptosi double %div11 to i32
  %24 = load i32, i32* %y1.addr, align 4, !tbaa !5
  %conv13 = sitofp i32 %24 to double
  %mul14 = fmul double %conv13, 3.906250e-03
  %y15 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %25 = load double, double* %y15, align 8, !tbaa !162
  %div16 = fdiv double %mul14, %25
  %conv17 = fptosi double %div16 to i32
  %call18 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.185, i32 0, i32 0), i32 %conv3, i32 %conv7, i32 %conv12, i32 %conv17) #6
  %26 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay19 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call20 = call i32 @lputs(%struct.stream_s* %26, i8* %arraydecay19) #6
  %27 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %27, i32 0, i32 108
  store i32 1, i32* %ispath, align 4, !tbaa !168
  %28 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs21 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %28, i32 0, i32 44
  %29 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs21, align 8, !tbaa !43
  %endpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %29, i32 0, i32 18
  %30 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %endpath, align 8, !tbaa !160
  %31 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %32 = load i32, i32* %type.addr, align 4, !tbaa !70
  %call22 = call i32 %30(%struct.gx_device_vector_s* %31, i32 %32) #6
  store i32 %call22, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %33 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #2
  %34 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.end(i64 16, i8* %34) #2
  %35 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %35) #2
  %36 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #2
  %37 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #2
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_beginpath(%struct.gx_device_vector_s* %vdev, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and = and i32 %5, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call1 = call i32 @lputs(%struct.stream_s* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.186, i32 0, i32 0)) #6
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call2 = call i32 @lputs(%struct.stream_s* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.187, i32 0, i32 0)) #6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %8, i32 0, i32 108
  store i32 0, i32* %ispath, align 4, !tbaa !168
  %9 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #2
  %10 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_moveto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %obuf = alloca [64 x i8], align 16
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !146
  store double %y0, double* %y0.addr, align 8, !tbaa !146
  store double %x1, double* %x1.addr, align 8, !tbaa !146
  store double %y1, double* %y1.addr, align 8, !tbaa !146
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %2) #2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %3 = load double, double* %x1.addr, align 8, !tbaa !146
  %conv = fptosi double %3 to i32
  %4 = load double, double* %y1.addr, align 8, !tbaa !146
  %conv1 = fptosi double %4 to i32
  %call2 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.178, i32 0, i32 0), i32 %conv, i32 %conv1) #6
  %5 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call4 = call i32 @lputs(%struct.stream_s* %5, i8* %arraydecay3) #6
  %6 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %6) #2
  %7 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_lineto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [64 x i8], align 16
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !146
  store double %y0, double* %y0.addr, align 8, !tbaa !146
  store double %x1, double* %x1.addr, align 8, !tbaa !146
  store double %y1, double* %y1.addr, align 8, !tbaa !146
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 64, i8* %5) #2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %6 = load double, double* %x1.addr, align 8, !tbaa !146
  %conv = fptosi double %6 to i32
  %7 = load double, double* %y1.addr, align 8, !tbaa !146
  %conv1 = fptosi double %7 to i32
  %call2 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.188, i32 0, i32 0), i32 %conv, i32 %conv1) #6
  %8 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %obuf, i32 0, i32 0
  %call4 = call i32 @lputs(%struct.stream_s* %8, i8* %arraydecay3) #6
  %9 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %9, i32 0, i32 108
  store i32 1, i32* %ispath, align 4, !tbaa !168
  %10 = bitcast [64 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 64, i8* %10) #2
  %11 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #2
  %12 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_curveto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, double %x2, double %y2, double %x3, double %y3, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %y2.addr = alloca double, align 8
  %x3.addr = alloca double, align 8
  %y3.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %obuf = alloca [128 x i8], align 16
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !146
  store double %y0, double* %y0.addr, align 8, !tbaa !146
  store double %x1, double* %x1.addr, align 8, !tbaa !146
  store double %y1, double* %y1.addr, align 8, !tbaa !146
  store double %x2, double* %x2.addr, align 8, !tbaa !146
  store double %y2, double* %y2.addr, align 8, !tbaa !146
  store double %x3, double* %x3.addr, align 8, !tbaa !146
  store double %y3, double* %y3.addr, align 8, !tbaa !146
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %6 = load double, double* %x1.addr, align 8, !tbaa !146
  %conv = fptosi double %6 to i32
  %7 = load double, double* %y1.addr, align 8, !tbaa !146
  %conv1 = fptosi double %7 to i32
  %8 = load double, double* %x2.addr, align 8, !tbaa !146
  %conv2 = fptosi double %8 to i32
  %9 = load double, double* %y2.addr, align 8, !tbaa !146
  %conv3 = fptosi double %9 to i32
  %10 = load double, double* %x3.addr, align 8, !tbaa !146
  %conv4 = fptosi double %10 to i32
  %11 = load double, double* %y3.addr, align 8, !tbaa !146
  %conv5 = fptosi double %11 to i32
  %call6 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.189, i32 0, i32 0), i32 %conv, i32 %conv1, i32 %conv2, i32 %conv3, i32 %conv4, i32 %conv5) #6
  %12 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call8 = call i32 @lputs(%struct.stream_s* %12, i8* %arraydecay7) #6
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 108
  store i32 1, i32* %ispath, align 4, !tbaa !168
  %14 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %14) #2
  %15 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %15) #2
  %16 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_closepath(%struct.gx_device_vector_s* %vdev, double %x, double %y, double %x_start, double %y_start, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %x_start.addr = alloca double, align 8
  %y_start.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x, double* %x.addr, align 8, !tbaa !146
  store double %y, double* %y.addr, align 8, !tbaa !146
  store double %x_start, double* %x_start.addr, align 8, !tbaa !146
  store double %y_start, double* %y_start.addr, align 8, !tbaa !146
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call1 = call i32 @lputs(%struct.stream_s* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0)) #6
  %3 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %3) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_endpath(%struct.gx_device_vector_s* %vdev, i32 %type) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %type.addr = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !70
  %0 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %1) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_vector_s* %3 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %4, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and = and i32 %5, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and1 = and i32 %6, 4
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call3 = call i32 @lputs(%struct.stream_s* %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0)) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call4 = call i32 @lputs(%struct.stream_s* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.190, i32 0, i32 0)) #6
  %9 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and5 = and i32 %9, 4
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %10 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ispath = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %10, i32 0, i32 108
  %11 = load i32, i32* %ispath, align 4, !tbaa !168
  %cmp = icmp ne i32 0, %11
  br i1 %cmp, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.then.7
  %12 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call9 = call i32 @lputs(%struct.stream_s* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.191, i32 0, i32 0)) #6
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.then.7
  br label %if.end.24

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and11 = and i32 %13, 1
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then.13, label %if.else.21

if.then.13:                                       ; preds = %if.else
  %14 = load i32, i32* %type.addr, align 4, !tbaa !70
  %and14 = and i32 %14, 8
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %if.then.13
  %15 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call17 = call i32 @lputs(%struct.stream_s* %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.192, i32 0, i32 0)) #6
  br label %if.end.20

if.else.18:                                       ; preds = %if.then.13
  %16 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call19 = call i32 @lputs(%struct.stream_s* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.193, i32 0, i32 0)) #6
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.18, %if.then.16
  br label %if.end.23

if.else.21:                                       ; preds = %if.else
  %17 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call22 = call i32 @lputs(%struct.stream_s* %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.194, i32 0, i32 0)) #6
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.21, %if.end.20
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.10
  %18 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal i32 @lputs(%struct.stream_s* %s, i8* %str) #0 {
entry:
  %s.addr = alloca %struct.stream_s*, align 8
  %str.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %used = alloca i32, align 4
  %status = alloca i32, align 4
  store %struct.stream_s* %s, %struct.stream_s** %s.addr, align 8, !tbaa !1
  store i8* %str, i8** %str.addr, align 8, !tbaa !1
  %0 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load i8*, i8** %str.addr, align 8, !tbaa !1
  %call = call i64 @strlen(i8* %1) #8
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4, !tbaa !5
  %2 = bitcast i32* %used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.stream_s*, %struct.stream_s** %s.addr, align 8, !tbaa !1
  %5 = load i8*, i8** %str.addr, align 8, !tbaa !1
  %6 = load i32, i32* %len, align 4, !tbaa !5
  %call1 = call i32 @sputs(%struct.stream_s* %4, i8* %5, i32 %6, i32* %used) #6
  store i32 %call1, i32* %status, align 4, !tbaa !5
  %7 = load i32, i32* %status, align 4, !tbaa !5
  %cmp = icmp sge i32 %7, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %8 = load i32, i32* %used, align 4, !tbaa !5
  %9 = load i32, i32* %len, align 4, !tbaa !5
  %cmp3 = icmp eq i32 %8, %9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %10 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %cond = select i1 %10, i32 0, i32 -1
  %11 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #2
  %12 = bitcast i32* %used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #2
  %13 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #2
  ret i32 %cond
}

; Function Attrs: nounwind
declare i64 @time(i64*) #3

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #3

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) #3

; Function Attrs: nounwind uwtable
define internal i8* @get_sysname() #0 {
entry:
  %result = alloca i8*, align 8
  %utsn = alloca %struct.utsname, align 1
  %0 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  store i8* null, i8** %result, align 8, !tbaa !1
  %1 = bitcast %struct.utsname* %utsn to i8*
  call void @llvm.lifetime.start(i64 390, i8* %1) #2
  %call = call i32 @uname(%struct.utsname* %utsn) #7
  %cmp = icmp eq i32 0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sysname = getelementptr inbounds %struct.utsname, %struct.utsname* %utsn, i32 0, i32 0
  %arraydecay = getelementptr inbounds [65 x i8], [65 x i8]* %sysname, i32 0, i32 0
  %call1 = call noalias i8* @__strdup(i8* %arraydecay) #7
  store i8* %call1, i8** %result, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %result, align 8, !tbaa !1
  %3 = bitcast %struct.utsname* %utsn to i8*
  call void @llvm.lifetime.end(i64 390, i8* %3) #2
  %4 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %4) #2
  ret i8* %2
}

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal i32 @trans_modelname(i8* %dest, i8* %src, i64 %dest_len) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %dest_len.addr = alloca i64, align 8
  %cp = alloca i8*, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp39 = alloca i32, align 4
  %__s1_len55 = alloca i64, align 8
  %__s2_len57 = alloca i64, align 8
  %tmp58 = alloca i32, align 4
  %__s165 = alloca i8*, align 8
  %__result67 = alloca i32, align 4
  %tmp105 = alloca i32, align 4
  %__s1_len125 = alloca i64, align 8
  %__s2_len127 = alloca i64, align 8
  %tmp128 = alloca i32, align 4
  %__s1135 = alloca i8*, align 8
  %__result137 = alloca i32, align 4
  %tmp175 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pdest = alloca i8*, align 8
  %len = alloca i64, align 8
  %__res = alloca i32, align 4
  %tmp211 = alloca i32, align 4
  store i8* %dest, i8** %dest.addr, align 8, !tbaa !1
  store i8* %src, i8** %src.addr, align 8, !tbaa !1
  store i64 %dest_len, i64* %dest_len.addr, align 8, !tbaa !59
  %0 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !1
  store i8* %1, i8** %cp, align 8, !tbaa !1
  %2 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  store i8 0, i8* %arrayidx, align 1, !tbaa !70
  %call = call i64 @strlen(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0)) #8
  %cmp = icmp ult i64 %call, 3
  br i1 %cmp, label %cond.true, label %cond.false.41

cond.true:                                        ; preds = %entry
  %3 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i64 1) to i64), i64 ptrtoint ([4 x i8]* @.str.139 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %call1 = call i64 @strlen(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0)) #8
  store i64 %call1, i64* %__s2_len, align 8, !tbaa !59
  %5 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp2 = icmp ult i64 %5, 4
  br i1 %cmp2, label %cond.true.3, label %cond.false

cond.true.3:                                      ; preds = %land.lhs.true
  %6 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load i8*, i8** %cp, align 8, !tbaa !1
  store i8* %7, i8** %__s1, align 8, !tbaa !1
  %8 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1, !tbaa !70
  %conv = zext i8 %10 to i32
  %11 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0), align 1, !tbaa !70
  %conv7 = zext i8 %11 to i32
  %sub = sub nsw i32 %conv, %conv7
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %12 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp8 = icmp ugt i64 %12, 0
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.38

land.lhs.true.10:                                 ; preds = %cond.true.3
  %13 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp11 = icmp eq i32 %13, 0
  br i1 %cmp11, label %if.then, label %if.end.38

if.then:                                          ; preds = %land.lhs.true.10
  %14 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx13, align 1, !tbaa !70
  %conv14 = zext i8 %15 to i32
  %16 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i64 1), align 1, !tbaa !70
  %conv15 = zext i8 %16 to i32
  %sub16 = sub nsw i32 %conv14, %conv15
  store i32 %sub16, i32* %__result, align 4, !tbaa !5
  %17 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp17 = icmp ugt i64 %17, 1
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.37

land.lhs.true.19:                                 ; preds = %if.then
  %18 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp20 = icmp eq i32 %18, 0
  br i1 %cmp20, label %if.then.22, label %if.end.37

if.then.22:                                       ; preds = %land.lhs.true.19
  %19 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i64 2
  %20 = load i8, i8* %arrayidx23, align 1, !tbaa !70
  %conv24 = zext i8 %20 to i32
  %21 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i64 2), align 1, !tbaa !70
  %conv25 = zext i8 %21 to i32
  %sub26 = sub nsw i32 %conv24, %conv25
  store i32 %sub26, i32* %__result, align 4, !tbaa !5
  %22 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp27 = icmp ugt i64 %22, 2
  br i1 %cmp27, label %land.lhs.true.29, label %if.end

land.lhs.true.29:                                 ; preds = %if.then.22
  %23 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp30 = icmp eq i32 %23, 0
  br i1 %cmp30, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %land.lhs.true.29
  %24 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx33 = getelementptr inbounds i8, i8* %24, i64 3
  %25 = load i8, i8* %arrayidx33, align 1, !tbaa !70
  %conv34 = zext i8 %25 to i32
  %26 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i64 3), align 1, !tbaa !70
  %conv35 = zext i8 %26 to i32
  %sub36 = sub nsw i32 %conv34, %conv35
  store i32 %sub36, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.32, %land.lhs.true.29, %if.then.22
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %land.lhs.true.19, %if.then
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %land.lhs.true.10, %cond.true.3
  %27 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %27, i32* %tmp39, !tbaa !5
  %28 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  %30 = load i32, i32* %tmp39, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  %31 = load i8*, i8** %cp, align 8, !tbaa !1
  %call40 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.38
  %cond = phi i32 [ %30, %if.end.38 ], [ %call40, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %32 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #2
  %34 = load i32, i32* %tmp, !tbaa !5
  br label %cond.end.43

cond.false.41:                                    ; preds = %entry
  %35 = load i8*, i8** %cp, align 8, !tbaa !1
  %call42 = call i32 @strncmp(i8* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0), i64 3) #8
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.41, %cond.end
  %cond44 = phi i32 [ %34, %cond.end ], [ %call42, %cond.false.41 ]
  %cmp45 = icmp eq i32 0, %cond44
  br i1 %cmp45, label %if.then.47, label %if.else

if.then.47:                                       ; preds = %cond.end.43
  %36 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %call48 = call i8* @strcat(i8* %36, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.140, i32 0, i32 0)) #7
  %37 = load i8*, i8** %cp, align 8, !tbaa !1
  %arrayidx49 = getelementptr inbounds i8, i8* %37, i64 3
  store i8* %arrayidx49, i8** %cp, align 8, !tbaa !1
  br label %if.end.194

if.else:                                          ; preds = %cond.end.43
  %call50 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0)) #8
  %cmp51 = icmp ult i64 %call50, 2
  br i1 %cmp51, label %cond.true.53, label %cond.false.110

cond.true.53:                                     ; preds = %if.else
  %38 = bitcast i64* %__s1_len55 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %38) #2
  %39 = bitcast i64* %__s2_len57 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %39) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.141 to i64)), i64 1), label %land.lhs.true.59, label %cond.false.106

land.lhs.true.59:                                 ; preds = %cond.true.53
  %call60 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0)) #8
  store i64 %call60, i64* %__s2_len57, align 8, !tbaa !59
  %40 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp61 = icmp ult i64 %40, 4
  br i1 %cmp61, label %cond.true.63, label %cond.false.106

cond.true.63:                                     ; preds = %land.lhs.true.59
  %41 = bitcast i8** %__s165 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %41) #2
  %42 = load i8*, i8** %cp, align 8, !tbaa !1
  store i8* %42, i8** %__s165, align 8, !tbaa !1
  %43 = bitcast i32* %__result67 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #2
  %44 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx68 = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx68, align 1, !tbaa !70
  %conv69 = zext i8 %45 to i32
  %46 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0), align 1, !tbaa !70
  %conv70 = zext i8 %46 to i32
  %sub71 = sub nsw i32 %conv69, %conv70
  store i32 %sub71, i32* %__result67, align 4, !tbaa !5
  %47 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp72 = icmp ugt i64 %47, 0
  br i1 %cmp72, label %land.lhs.true.74, label %if.end.104

land.lhs.true.74:                                 ; preds = %cond.true.63
  %48 = load i32, i32* %__result67, align 4, !tbaa !5
  %cmp75 = icmp eq i32 %48, 0
  br i1 %cmp75, label %if.then.77, label %if.end.104

if.then.77:                                       ; preds = %land.lhs.true.74
  %49 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx78 = getelementptr inbounds i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx78, align 1, !tbaa !70
  %conv79 = zext i8 %50 to i32
  %51 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i64 1), align 1, !tbaa !70
  %conv80 = zext i8 %51 to i32
  %sub81 = sub nsw i32 %conv79, %conv80
  store i32 %sub81, i32* %__result67, align 4, !tbaa !5
  %52 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp82 = icmp ugt i64 %52, 1
  br i1 %cmp82, label %land.lhs.true.84, label %if.end.103

land.lhs.true.84:                                 ; preds = %if.then.77
  %53 = load i32, i32* %__result67, align 4, !tbaa !5
  %cmp85 = icmp eq i32 %53, 0
  br i1 %cmp85, label %if.then.87, label %if.end.103

if.then.87:                                       ; preds = %land.lhs.true.84
  %54 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx88 = getelementptr inbounds i8, i8* %54, i64 2
  %55 = load i8, i8* %arrayidx88, align 1, !tbaa !70
  %conv89 = zext i8 %55 to i32
  %56 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i64 2), align 1, !tbaa !70
  %conv90 = zext i8 %56 to i32
  %sub91 = sub nsw i32 %conv89, %conv90
  store i32 %sub91, i32* %__result67, align 4, !tbaa !5
  %57 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp92 = icmp ugt i64 %57, 2
  br i1 %cmp92, label %land.lhs.true.94, label %if.end.102

land.lhs.true.94:                                 ; preds = %if.then.87
  %58 = load i32, i32* %__result67, align 4, !tbaa !5
  %cmp95 = icmp eq i32 %58, 0
  br i1 %cmp95, label %if.then.97, label %if.end.102

if.then.97:                                       ; preds = %land.lhs.true.94
  %59 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx98 = getelementptr inbounds i8, i8* %59, i64 3
  %60 = load i8, i8* %arrayidx98, align 1, !tbaa !70
  %conv99 = zext i8 %60 to i32
  %61 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv100 = zext i8 %61 to i32
  %sub101 = sub nsw i32 %conv99, %conv100
  store i32 %sub101, i32* %__result67, align 4, !tbaa !5
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.97, %land.lhs.true.94, %if.then.87
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %land.lhs.true.84, %if.then.77
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true.74, %cond.true.63
  %62 = load i32, i32* %__result67, align 4, !tbaa !5
  store i32 %62, i32* %tmp105, !tbaa !5
  %63 = bitcast i32* %__result67 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #2
  %64 = bitcast i8** %__s165 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = load i32, i32* %tmp105, !tbaa !5
  br label %cond.end.108

cond.false.106:                                   ; preds = %land.lhs.true.59, %cond.true.53
  %66 = load i8*, i8** %cp, align 8, !tbaa !1
  %call107 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0)) #7
  br label %cond.end.108

cond.end.108:                                     ; preds = %cond.false.106, %if.end.104
  %cond109 = phi i32 [ %65, %if.end.104 ], [ %call107, %cond.false.106 ]
  store i32 %cond109, i32* %tmp58, !tbaa !5
  %67 = bitcast i64* %__s2_len57 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #2
  %68 = bitcast i64* %__s1_len55 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #2
  %69 = load i32, i32* %tmp58, !tbaa !5
  br label %cond.end.112

cond.false.110:                                   ; preds = %if.else
  %70 = load i8*, i8** %cp, align 8, !tbaa !1
  %call111 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0), i64 2) #8
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.110, %cond.end.108
  %cond113 = phi i32 [ %69, %cond.end.108 ], [ %call111, %cond.false.110 ]
  %cmp114 = icmp eq i32 0, %cond113
  br i1 %cmp114, label %if.then.116, label %if.else.119

if.then.116:                                      ; preds = %cond.end.112
  %71 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %call117 = call i8* @strcat(i8* %71, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.142, i32 0, i32 0)) #7
  %72 = load i8*, i8** %cp, align 8, !tbaa !1
  %arrayidx118 = getelementptr inbounds i8, i8* %72, i64 2
  store i8* %arrayidx118, i8** %cp, align 8, !tbaa !1
  br label %if.end.193

if.else.119:                                      ; preds = %cond.end.112
  %call120 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0)) #8
  %cmp121 = icmp ult i64 %call120, 2
  br i1 %cmp121, label %cond.true.123, label %cond.false.180

cond.true.123:                                    ; preds = %if.else.119
  %73 = bitcast i64* %__s1_len125 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %73) #2
  %74 = bitcast i64* %__s2_len127 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %74) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.143 to i64)), i64 1), label %land.lhs.true.129, label %cond.false.176

land.lhs.true.129:                                ; preds = %cond.true.123
  %call130 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0)) #8
  store i64 %call130, i64* %__s2_len127, align 8, !tbaa !59
  %75 = load i64, i64* %__s2_len127, align 8, !tbaa !59
  %cmp131 = icmp ult i64 %75, 4
  br i1 %cmp131, label %cond.true.133, label %cond.false.176

cond.true.133:                                    ; preds = %land.lhs.true.129
  %76 = bitcast i8** %__s1135 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %76) #2
  %77 = load i8*, i8** %cp, align 8, !tbaa !1
  store i8* %77, i8** %__s1135, align 8, !tbaa !1
  %78 = bitcast i32* %__result137 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %78) #2
  %79 = load i8*, i8** %__s1135, align 8, !tbaa !1
  %arrayidx138 = getelementptr inbounds i8, i8* %79, i64 0
  %80 = load i8, i8* %arrayidx138, align 1, !tbaa !70
  %conv139 = zext i8 %80 to i32
  %81 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), align 1, !tbaa !70
  %conv140 = zext i8 %81 to i32
  %sub141 = sub nsw i32 %conv139, %conv140
  store i32 %sub141, i32* %__result137, align 4, !tbaa !5
  %82 = load i64, i64* %__s2_len127, align 8, !tbaa !59
  %cmp142 = icmp ugt i64 %82, 0
  br i1 %cmp142, label %land.lhs.true.144, label %if.end.174

land.lhs.true.144:                                ; preds = %cond.true.133
  %83 = load i32, i32* %__result137, align 4, !tbaa !5
  %cmp145 = icmp eq i32 %83, 0
  br i1 %cmp145, label %if.then.147, label %if.end.174

if.then.147:                                      ; preds = %land.lhs.true.144
  %84 = load i8*, i8** %__s1135, align 8, !tbaa !1
  %arrayidx148 = getelementptr inbounds i8, i8* %84, i64 1
  %85 = load i8, i8* %arrayidx148, align 1, !tbaa !70
  %conv149 = zext i8 %85 to i32
  %86 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i64 1), align 1, !tbaa !70
  %conv150 = zext i8 %86 to i32
  %sub151 = sub nsw i32 %conv149, %conv150
  store i32 %sub151, i32* %__result137, align 4, !tbaa !5
  %87 = load i64, i64* %__s2_len127, align 8, !tbaa !59
  %cmp152 = icmp ugt i64 %87, 1
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.173

land.lhs.true.154:                                ; preds = %if.then.147
  %88 = load i32, i32* %__result137, align 4, !tbaa !5
  %cmp155 = icmp eq i32 %88, 0
  br i1 %cmp155, label %if.then.157, label %if.end.173

if.then.157:                                      ; preds = %land.lhs.true.154
  %89 = load i8*, i8** %__s1135, align 8, !tbaa !1
  %arrayidx158 = getelementptr inbounds i8, i8* %89, i64 2
  %90 = load i8, i8* %arrayidx158, align 1, !tbaa !70
  %conv159 = zext i8 %90 to i32
  %91 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i64 2), align 1, !tbaa !70
  %conv160 = zext i8 %91 to i32
  %sub161 = sub nsw i32 %conv159, %conv160
  store i32 %sub161, i32* %__result137, align 4, !tbaa !5
  %92 = load i64, i64* %__s2_len127, align 8, !tbaa !59
  %cmp162 = icmp ugt i64 %92, 2
  br i1 %cmp162, label %land.lhs.true.164, label %if.end.172

land.lhs.true.164:                                ; preds = %if.then.157
  %93 = load i32, i32* %__result137, align 4, !tbaa !5
  %cmp165 = icmp eq i32 %93, 0
  br i1 %cmp165, label %if.then.167, label %if.end.172

if.then.167:                                      ; preds = %land.lhs.true.164
  %94 = load i8*, i8** %__s1135, align 8, !tbaa !1
  %arrayidx168 = getelementptr inbounds i8, i8* %94, i64 3
  %95 = load i8, i8* %arrayidx168, align 1, !tbaa !70
  %conv169 = zext i8 %95 to i32
  %96 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i64 3), align 1, !tbaa !70
  %conv170 = zext i8 %96 to i32
  %sub171 = sub nsw i32 %conv169, %conv170
  store i32 %sub171, i32* %__result137, align 4, !tbaa !5
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.167, %land.lhs.true.164, %if.then.157
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %land.lhs.true.154, %if.then.147
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.173, %land.lhs.true.144, %cond.true.133
  %97 = load i32, i32* %__result137, align 4, !tbaa !5
  store i32 %97, i32* %tmp175, !tbaa !5
  %98 = bitcast i32* %__result137 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %98) #2
  %99 = bitcast i8** %__s1135 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %99) #2
  %100 = load i32, i32* %tmp175, !tbaa !5
  br label %cond.end.178

cond.false.176:                                   ; preds = %land.lhs.true.129, %cond.true.123
  %101 = load i8*, i8** %cp, align 8, !tbaa !1
  %call177 = call i32 @strcmp(i8* %101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0)) #7
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.false.176, %if.end.174
  %cond179 = phi i32 [ %100, %if.end.174 ], [ %call177, %cond.false.176 ]
  store i32 %cond179, i32* %tmp128, !tbaa !5
  %102 = bitcast i64* %__s2_len127 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %102) #2
  %103 = bitcast i64* %__s1_len125 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %103) #2
  %104 = load i32, i32* %tmp128, !tbaa !5
  br label %cond.end.182

cond.false.180:                                   ; preds = %if.else.119
  %105 = load i8*, i8** %cp, align 8, !tbaa !1
  %call181 = call i32 @strncmp(i8* %105, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i64 2) #8
  br label %cond.end.182

cond.end.182:                                     ; preds = %cond.false.180, %cond.end.178
  %cond183 = phi i32 [ %104, %cond.end.178 ], [ %call181, %cond.false.180 ]
  %cmp184 = icmp eq i32 0, %cond183
  br i1 %cmp184, label %if.then.186, label %if.else.189

if.then.186:                                      ; preds = %cond.end.182
  %106 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %call187 = call i8* @strcat(i8* %106, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0)) #7
  %107 = load i8*, i8** %cp, align 8, !tbaa !1
  %arrayidx188 = getelementptr inbounds i8, i8* %107, i64 2
  store i8* %arrayidx188, i8** %cp, align 8, !tbaa !1
  br label %if.end.192

if.else.189:                                      ; preds = %cond.end.182
  %108 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %109 = load i8*, i8** %src.addr, align 8, !tbaa !1
  %110 = load i64, i64* %dest_len.addr, align 8, !tbaa !59
  %call190 = call i8* @strncpy(i8* %108, i8* %109, i64 %110) #7
  %111 = load i64, i64* %dest_len.addr, align 8, !tbaa !59
  %112 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %arrayidx191 = getelementptr inbounds i8, i8* %112, i64 %111
  store i8 0, i8* %arrayidx191, align 1, !tbaa !70
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.192:                                       ; preds = %if.then.186
  br label %if.end.193

if.end.193:                                       ; preds = %if.end.192, %if.then.116
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %if.then.47
  %113 = bitcast i8** %pdest to i8*
  call void @llvm.lifetime.start(i64 8, i8* %113) #2
  %114 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %call196 = call i8* @__rawmemchr(i8* %114, i32 0) #6
  store i8* %call196, i8** %pdest, align 8, !tbaa !1
  %115 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %115) #2
  %116 = load i8*, i8** %dest.addr, align 8, !tbaa !1
  %call198 = call i64 @strlen(i8* %116) #8
  store i64 %call198, i64* %len, align 8, !tbaa !59
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.194
  %117 = load i64, i64* %len, align 8, !tbaa !59
  %118 = load i64, i64* %dest_len.addr, align 8, !tbaa !59
  %sub199 = sub i64 %118, 1
  %cmp200 = icmp ult i64 %117, %sub199
  br i1 %cmp200, label %land.lhs.true.202, label %land.end

land.lhs.true.202:                                ; preds = %while.cond
  %119 = load i8*, i8** %cp, align 8, !tbaa !1
  %120 = load i8, i8* %119, align 1, !tbaa !70
  %conv203 = sext i8 %120 to i32
  %tobool = icmp ne i32 %conv203, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.202
  %121 = load i8*, i8** %cp, align 8, !tbaa !1
  %122 = load i8, i8* %121, align 1, !tbaa !70
  %conv204 = sext i8 %122 to i32
  %cmp205 = icmp ne i32 95, %conv204
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.202, %while.cond
  %123 = phi i1 [ false, %land.lhs.true.202 ], [ false, %while.cond ], [ %cmp205, %land.rhs ]
  br i1 %123, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %124 = bitcast i32* %__res to i8*
  call void @llvm.lifetime.start(i64 4, i8* %124) #2
  %125 = load i8*, i8** %cp, align 8, !tbaa !1
  %126 = load i8, i8* %125, align 1, !tbaa !70
  %conv208 = sext i8 %126 to i32
  %idxprom = sext i32 %conv208 to i64
  %call209 = call i32** @__ctype_toupper_loc() #9
  %127 = load i32*, i32** %call209, align 8, !tbaa !1
  %arrayidx210 = getelementptr inbounds i32, i32* %127, i64 %idxprom
  %128 = load i32, i32* %arrayidx210, align 4, !tbaa !5
  store i32 %128, i32* %__res, align 4, !tbaa !5
  %129 = load i32, i32* %__res, align 4, !tbaa !5
  store i32 %129, i32* %tmp211, !tbaa !5
  %130 = bitcast i32* %__res to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #2
  %131 = load i32, i32* %tmp211, !tbaa !5
  %conv212 = trunc i32 %131 to i8
  %132 = load i8*, i8** %pdest, align 8, !tbaa !1
  store i8 %conv212, i8* %132, align 1, !tbaa !70
  %133 = load i8*, i8** %pdest, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr, i8** %pdest, align 8, !tbaa !1
  %134 = load i8*, i8** %cp, align 8, !tbaa !1
  %incdec.ptr213 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr213, i8** %cp, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %land.end
  %135 = load i8*, i8** %pdest, align 8, !tbaa !1
  store i8 0, i8* %135, align 1, !tbaa !70
  %136 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %136) #2
  %137 = bitcast i8** %pdest to i8*
  call void @llvm.lifetime.end(i64 8, i8* %137) #2
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.else.189
  %138 = bitcast i8** %cp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %138) #2
  %139 = load i32, i32* %retval
  ret i32 %139
}

declare i32 @gs_sprintf(i8*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct.EPaperTable_s* @escv_checkpapersize(%struct.gx_device_vector_s* %vdev) #0 {
entry:
  %retval = alloca %struct.EPaperTable_s*, align 8
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %devw = alloca i32, align 4
  %devh = alloca i32, align 4
  %candidate = alloca [23 x %struct.paper_candidate_s], align 16
  %num_candidate = alloca i32, align 4
  %pt = alloca %struct.EPaperTable_s*, align 8
  %delta = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %absminw = alloca i32, align 4
  %absminh = alloca i32, align 4
  %i = alloca i32, align 4
  %best_candidate = alloca i32, align 4
  %i227 = alloca i32, align 4
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %devw to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %devh to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast [23 x %struct.paper_candidate_s]* %candidate to i8*
  call void @llvm.lifetime.start(i64 920, i8* %5) #2
  %6 = bitcast i32* %num_candidate to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %7, i32 0, i32 19
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %8 = load float, float* %arrayidx, align 4, !tbaa !51
  %9 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize1 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %9, i32 0, i32 19
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize1, i32 0, i64 1
  %10 = load float, float* %arrayidx2, align 4, !tbaa !51
  %cmp = fcmp olt float %8, %10
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %11 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize3 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %11, i32 0, i32 19
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize3, i32 0, i64 0
  %12 = load float, float* %arrayidx4, align 4, !tbaa !51
  %conv = fptosi float %12 to i32
  store i32 %conv, i32* %devw, align 4, !tbaa !5
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize5 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 19
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize5, i32 0, i64 1
  %14 = load float, float* %arrayidx6, align 4, !tbaa !51
  %conv7 = fptosi float %14 to i32
  store i32 %conv7, i32* %devh, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %15 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize8 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %15, i32 0, i32 19
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize8, i32 0, i64 1
  %16 = load float, float* %arrayidx9, align 4, !tbaa !51
  %conv10 = fptosi float %16 to i32
  store i32 %conv10, i32* %devw, align 4, !tbaa !5
  %17 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MediaSize11 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %17, i32 0, i32 19
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize11, i32 0, i64 0
  %18 = load float, float* %arrayidx12, align 4, !tbaa !51
  %conv13 = fptosi float %18 to i32
  store i32 %conv13, i32* %devh, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = bitcast %struct.EPaperTable_s** %pt to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  store i32 0, i32* %num_candidate, align 4, !tbaa !5
  store i32 0, i32* %delta, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.78, %if.end
  %21 = load i32, i32* %delta, align 4, !tbaa !5
  %cmp14 = icmp sle i32 %21, 5
  br i1 %cmp14, label %for.body, label %for.end.80

for.body:                                         ; preds = %for.cond
  store %struct.EPaperTable_s* getelementptr inbounds ([23 x %struct.EPaperTable_s], [23 x %struct.EPaperTable_s]* @ePaperTable, i32 0, i32 0), %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc, %for.body
  %22 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %escpage = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %22, i32 0, i32 2
  %23 = load i32, i32* %escpage, align 4, !tbaa !169
  %cmp17 = icmp sle i32 0, %23
  br i1 %cmp17, label %for.body.19, label %for.end

for.body.19:                                      ; preds = %for.cond.16
  %24 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %24, i32 0, i32 0
  %25 = load i32, i32* %width, align 4, !tbaa !170
  %26 = load i32, i32* %delta, align 4, !tbaa !5
  %add = add nsw i32 %25, %26
  %27 = load i32, i32* %devw, align 4, !tbaa !5
  %cmp20 = icmp sge i32 %add, %27
  br i1 %cmp20, label %land.lhs.true, label %if.end.73

land.lhs.true:                                    ; preds = %for.body.19
  %28 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %width22 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %28, i32 0, i32 0
  %29 = load i32, i32* %width22, align 4, !tbaa !170
  %30 = load i32, i32* %delta, align 4, !tbaa !5
  %sub = sub nsw i32 %29, %30
  %31 = load i32, i32* %devw, align 4, !tbaa !5
  %cmp23 = icmp sle i32 %sub, %31
  br i1 %cmp23, label %land.lhs.true.25, label %if.end.73

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %32 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %32, i32 0, i32 1
  %33 = load i32, i32* %height, align 4, !tbaa !171
  %34 = load i32, i32* %delta, align 4, !tbaa !5
  %add26 = add nsw i32 %33, %34
  %35 = load i32, i32* %devh, align 4, !tbaa !5
  %cmp27 = icmp sge i32 %add26, %35
  br i1 %cmp27, label %land.lhs.true.29, label %if.end.73

land.lhs.true.29:                                 ; preds = %land.lhs.true.25
  %36 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %height30 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %36, i32 0, i32 1
  %37 = load i32, i32* %height30, align 4, !tbaa !171
  %38 = load i32, i32* %delta, align 4, !tbaa !5
  %sub31 = sub nsw i32 %37, %38
  %39 = load i32, i32* %devh, align 4, !tbaa !5
  %cmp32 = icmp sle i32 %sub31, %39
  br i1 %cmp32, label %if.then.34, label %if.end.73

if.then.34:                                       ; preds = %land.lhs.true.29
  %40 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %41 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom = sext i32 %41 to i64
  %arrayidx35 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom
  %paper = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx35, i32 0, i32 0
  store %struct.EPaperTable_s* %40, %struct.EPaperTable_s** %paper, align 8, !tbaa !172
  %42 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %width36 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %42, i32 0, i32 0
  %43 = load i32, i32* %width36, align 4, !tbaa !170
  %44 = load i32, i32* %devw, align 4, !tbaa !5
  %sub37 = sub nsw i32 %43, %44
  %call = call i32 @abs(i32 %sub37) #9
  %45 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom38 = sext i32 %45 to i64
  %arrayidx39 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom38
  %absw = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx39, i32 0, i32 1
  store i32 %call, i32* %absw, align 4, !tbaa !174
  %46 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %height40 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %46, i32 0, i32 1
  %47 = load i32, i32* %height40, align 4, !tbaa !171
  %48 = load i32, i32* %devh, align 4, !tbaa !5
  %sub41 = sub nsw i32 %47, %48
  %call42 = call i32 @abs(i32 %sub41) #9
  %49 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom43 = sext i32 %49 to i64
  %arrayidx44 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom43
  %absh = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx44, i32 0, i32 2
  store i32 %call42, i32* %absh, align 4, !tbaa !175
  %50 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom45 = sext i32 %50 to i64
  %arrayidx46 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom45
  %score = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx46, i32 0, i32 3
  store i32 0, i32* %score, align 4, !tbaa !176
  %51 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom47 = sext i32 %51 to i64
  %arrayidx48 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom47
  %isfillw = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx48, i32 0, i32 4
  store i32 0, i32* %isfillw, align 4, !tbaa !177
  %52 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom49 = sext i32 %52 to i64
  %arrayidx50 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom49
  %isfillh = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx50, i32 0, i32 5
  store i32 0, i32* %isfillh, align 4, !tbaa !178
  %53 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom51 = sext i32 %53 to i64
  %arrayidx52 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom51
  %isminw = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx52, i32 0, i32 6
  store i32 0, i32* %isminw, align 4, !tbaa !179
  %54 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom53 = sext i32 %54 to i64
  %arrayidx54 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom53
  %isminh = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx54, i32 0, i32 7
  store i32 0, i32* %isminh, align 4, !tbaa !180
  %55 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %width55 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %55, i32 0, i32 0
  %56 = load i32, i32* %width55, align 4, !tbaa !170
  %57 = load i32, i32* %devw, align 4, !tbaa !5
  %sub56 = sub nsw i32 %56, %57
  %cmp57 = icmp sle i32 0, %sub56
  br i1 %cmp57, label %if.then.59, label %if.end.63

if.then.59:                                       ; preds = %if.then.34
  %58 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom60 = sext i32 %58 to i64
  %arrayidx61 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom60
  %isfillw62 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx61, i32 0, i32 4
  store i32 1, i32* %isfillw62, align 4, !tbaa !177
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.59, %if.then.34
  %59 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %height64 = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %59, i32 0, i32 1
  %60 = load i32, i32* %height64, align 4, !tbaa !171
  %61 = load i32, i32* %devh, align 4, !tbaa !5
  %sub65 = sub nsw i32 %60, %61
  %cmp66 = icmp sle i32 0, %sub65
  br i1 %cmp66, label %if.then.68, label %if.end.72

if.then.68:                                       ; preds = %if.end.63
  %62 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %idxprom69 = sext i32 %62 to i64
  %arrayidx70 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom69
  %isfillh71 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx70, i32 0, i32 5
  store i32 1, i32* %isfillh71, align 4, !tbaa !178
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.68, %if.end.63
  %63 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %num_candidate, align 4, !tbaa !5
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %land.lhs.true.29, %land.lhs.true.25, %land.lhs.true, %for.body.19
  br label %for.inc

for.inc:                                          ; preds = %if.end.73
  %64 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds %struct.EPaperTable_s, %struct.EPaperTable_s* %64, i32 1
  store %struct.EPaperTable_s* %incdec.ptr, %struct.EPaperTable_s** %pt, align 8, !tbaa !1
  br label %for.cond.16

for.end:                                          ; preds = %for.cond.16
  %65 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp74 = icmp slt i32 0, %65
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %for.end
  br label %for.end.80

if.end.77:                                        ; preds = %for.end
  br label %for.inc.78

for.inc.78:                                       ; preds = %if.end.77
  %66 = load i32, i32* %delta, align 4, !tbaa !5
  %inc79 = add nsw i32 %66, 1
  store i32 %inc79, i32* %delta, align 4, !tbaa !5
  br label %for.cond

for.end.80:                                       ; preds = %if.then.76, %for.cond
  %67 = bitcast i32* %delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %67) #2
  %68 = bitcast %struct.EPaperTable_s** %pt to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #2
  %69 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp81 = icmp eq i32 0, %69
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %for.end.80
  store %struct.EPaperTable_s* null, %struct.EPaperTable_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.84:                                        ; preds = %for.end.80
  %70 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp85 = icmp eq i32 1, %70
  br i1 %cmp85, label %if.then.87, label %if.end.90

if.then.87:                                       ; preds = %if.end.84
  %arrayidx88 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 0
  %paper89 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx88, i32 0, i32 0
  %71 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %paper89, align 8, !tbaa !172
  store %struct.EPaperTable_s* %71, %struct.EPaperTable_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.90:                                        ; preds = %if.end.84
  %72 = bitcast i32* %absminw to i8*
  call void @llvm.lifetime.start(i64 4, i8* %72) #2
  %73 = bitcast i32* %absminh to i8*
  call void @llvm.lifetime.start(i64 4, i8* %73) #2
  %74 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %74) #2
  %arrayidx91 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 0
  %absw92 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx91, i32 0, i32 1
  %75 = load i32, i32* %absw92, align 4, !tbaa !174
  store i32 %75, i32* %absminw, align 4, !tbaa !5
  %arrayidx93 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 0
  %absh94 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx93, i32 0, i32 2
  %76 = load i32, i32* %absh94, align 4, !tbaa !175
  store i32 %76, i32* %absminh, align 4, !tbaa !5
  store i32 1, i32* %i, align 4, !tbaa !5
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.119, %if.end.90
  %77 = load i32, i32* %i, align 4, !tbaa !5
  %78 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp96 = icmp slt i32 %77, %78
  br i1 %cmp96, label %for.body.98, label %for.end.121

for.body.98:                                      ; preds = %for.cond.95
  %79 = load i32, i32* %absminw, align 4, !tbaa !5
  %80 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom99 = sext i32 %80 to i64
  %arrayidx100 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom99
  %absw101 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx100, i32 0, i32 1
  %81 = load i32, i32* %absw101, align 4, !tbaa !174
  %cmp102 = icmp sgt i32 %79, %81
  br i1 %cmp102, label %if.then.104, label %if.end.108

if.then.104:                                      ; preds = %for.body.98
  %82 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom105 = sext i32 %82 to i64
  %arrayidx106 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom105
  %absw107 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx106, i32 0, i32 1
  %83 = load i32, i32* %absw107, align 4, !tbaa !174
  store i32 %83, i32* %absminw, align 4, !tbaa !5
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.104, %for.body.98
  %84 = load i32, i32* %absminh, align 4, !tbaa !5
  %85 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom109 = sext i32 %85 to i64
  %arrayidx110 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom109
  %absh111 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx110, i32 0, i32 2
  %86 = load i32, i32* %absh111, align 4, !tbaa !175
  %cmp112 = icmp sgt i32 %84, %86
  br i1 %cmp112, label %if.then.114, label %if.end.118

if.then.114:                                      ; preds = %if.end.108
  %87 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom115 = sext i32 %87 to i64
  %arrayidx116 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom115
  %absh117 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx116, i32 0, i32 2
  %88 = load i32, i32* %absh117, align 4, !tbaa !175
  store i32 %88, i32* %absminh, align 4, !tbaa !5
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.114, %if.end.108
  br label %for.inc.119

for.inc.119:                                      ; preds = %if.end.118
  %89 = load i32, i32* %i, align 4, !tbaa !5
  %inc120 = add nsw i32 %89, 1
  store i32 %inc120, i32* %i, align 4, !tbaa !5
  br label %for.cond.95

for.end.121:                                      ; preds = %for.cond.95
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.146, %for.end.121
  %90 = load i32, i32* %i, align 4, !tbaa !5
  %91 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp123 = icmp slt i32 %90, %91
  br i1 %cmp123, label %for.body.125, label %for.end.148

for.body.125:                                     ; preds = %for.cond.122
  %92 = load i32, i32* %absminw, align 4, !tbaa !5
  %93 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom126 = sext i32 %93 to i64
  %arrayidx127 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom126
  %absw128 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx127, i32 0, i32 1
  %94 = load i32, i32* %absw128, align 4, !tbaa !174
  %cmp129 = icmp eq i32 %92, %94
  br i1 %cmp129, label %if.then.131, label %if.end.135

if.then.131:                                      ; preds = %for.body.125
  %95 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom132 = sext i32 %95 to i64
  %arrayidx133 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom132
  %isminw134 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx133, i32 0, i32 6
  store i32 1, i32* %isminw134, align 4, !tbaa !179
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.131, %for.body.125
  %96 = load i32, i32* %absminh, align 4, !tbaa !5
  %97 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom136 = sext i32 %97 to i64
  %arrayidx137 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom136
  %absh138 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx137, i32 0, i32 2
  %98 = load i32, i32* %absh138, align 4, !tbaa !175
  %cmp139 = icmp eq i32 %96, %98
  br i1 %cmp139, label %if.then.141, label %if.end.145

if.then.141:                                      ; preds = %if.end.135
  %99 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom142 = sext i32 %99 to i64
  %arrayidx143 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom142
  %isminh144 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx143, i32 0, i32 7
  store i32 1, i32* %isminh144, align 4, !tbaa !180
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.141, %if.end.135
  br label %for.inc.146

for.inc.146:                                      ; preds = %if.end.145
  %100 = load i32, i32* %i, align 4, !tbaa !5
  %inc147 = add nsw i32 %100, 1
  store i32 %inc147, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.end.148:                                      ; preds = %for.cond.122
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.149

for.cond.149:                                     ; preds = %for.inc.224, %for.end.148
  %101 = load i32, i32* %i, align 4, !tbaa !5
  %102 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp150 = icmp slt i32 %101, %102
  br i1 %cmp150, label %for.body.152, label %for.end.226

for.body.152:                                     ; preds = %for.cond.149
  %103 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom153 = sext i32 %103 to i64
  %arrayidx154 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom153
  %isminw155 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx154, i32 0, i32 6
  %104 = load i32, i32* %isminw155, align 4, !tbaa !179
  %cmp156 = icmp eq i32 %104, 1
  br i1 %cmp156, label %if.then.158, label %if.end.163

if.then.158:                                      ; preds = %for.body.152
  %105 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom159 = sext i32 %105 to i64
  %arrayidx160 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom159
  %score161 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx160, i32 0, i32 3
  %106 = load i32, i32* %score161, align 4, !tbaa !176
  %add162 = add nsw i32 %106, 100
  store i32 %add162, i32* %score161, align 4, !tbaa !176
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.158, %for.body.152
  %107 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom164 = sext i32 %107 to i64
  %arrayidx165 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom164
  %isminh166 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx165, i32 0, i32 7
  %108 = load i32, i32* %isminh166, align 4, !tbaa !180
  %cmp167 = icmp eq i32 %108, 1
  br i1 %cmp167, label %if.then.169, label %if.end.174

if.then.169:                                      ; preds = %if.end.163
  %109 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom170 = sext i32 %109 to i64
  %arrayidx171 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom170
  %score172 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx171, i32 0, i32 3
  %110 = load i32, i32* %score172, align 4, !tbaa !176
  %add173 = add nsw i32 %110, 100
  store i32 %add173, i32* %score172, align 4, !tbaa !176
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.169, %if.end.163
  %111 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom175 = sext i32 %111 to i64
  %arrayidx176 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom175
  %isfillw177 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx176, i32 0, i32 4
  %112 = load i32, i32* %isfillw177, align 4, !tbaa !177
  %cmp178 = icmp eq i32 %112, 1
  br i1 %cmp178, label %if.then.180, label %if.end.185

if.then.180:                                      ; preds = %if.end.174
  %113 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom181 = sext i32 %113 to i64
  %arrayidx182 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom181
  %score183 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx182, i32 0, i32 3
  %114 = load i32, i32* %score183, align 4, !tbaa !176
  %add184 = add nsw i32 %114, 10
  store i32 %add184, i32* %score183, align 4, !tbaa !176
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.180, %if.end.174
  %115 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom186 = sext i32 %115 to i64
  %arrayidx187 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom186
  %isfillh188 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx187, i32 0, i32 5
  %116 = load i32, i32* %isfillh188, align 4, !tbaa !178
  %cmp189 = icmp eq i32 %116, 1
  br i1 %cmp189, label %if.then.191, label %if.end.196

if.then.191:                                      ; preds = %if.end.185
  %117 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom192 = sext i32 %117 to i64
  %arrayidx193 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom192
  %score194 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx193, i32 0, i32 3
  %118 = load i32, i32* %score194, align 4, !tbaa !176
  %add195 = add nsw i32 %118, 10
  store i32 %add195, i32* %score194, align 4, !tbaa !176
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.191, %if.end.185
  %119 = load i32, i32* %absminw, align 4, !tbaa !5
  %120 = load i32, i32* %absminh, align 4, !tbaa !5
  %cmp197 = icmp slt i32 %119, %120
  br i1 %cmp197, label %if.then.199, label %if.else.211

if.then.199:                                      ; preds = %if.end.196
  %121 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom200 = sext i32 %121 to i64
  %arrayidx201 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom200
  %isminw202 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx201, i32 0, i32 6
  %122 = load i32, i32* %isminw202, align 4, !tbaa !179
  %cmp203 = icmp eq i32 %122, 1
  br i1 %cmp203, label %if.then.205, label %if.end.210

if.then.205:                                      ; preds = %if.then.199
  %123 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom206 = sext i32 %123 to i64
  %arrayidx207 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom206
  %score208 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx207, i32 0, i32 3
  %124 = load i32, i32* %score208, align 4, !tbaa !176
  %add209 = add nsw i32 %124, 1
  store i32 %add209, i32* %score208, align 4, !tbaa !176
  br label %if.end.210

if.end.210:                                       ; preds = %if.then.205, %if.then.199
  br label %if.end.223

if.else.211:                                      ; preds = %if.end.196
  %125 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom212 = sext i32 %125 to i64
  %arrayidx213 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom212
  %isminh214 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx213, i32 0, i32 7
  %126 = load i32, i32* %isminh214, align 4, !tbaa !180
  %cmp215 = icmp eq i32 %126, 1
  br i1 %cmp215, label %if.then.217, label %if.end.222

if.then.217:                                      ; preds = %if.else.211
  %127 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom218 = sext i32 %127 to i64
  %arrayidx219 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom218
  %score220 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx219, i32 0, i32 3
  %128 = load i32, i32* %score220, align 4, !tbaa !176
  %add221 = add nsw i32 %128, 1
  store i32 %add221, i32* %score220, align 4, !tbaa !176
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.217, %if.else.211
  br label %if.end.223

if.end.223:                                       ; preds = %if.end.222, %if.end.210
  br label %for.inc.224

for.inc.224:                                      ; preds = %if.end.223
  %129 = load i32, i32* %i, align 4, !tbaa !5
  %inc225 = add nsw i32 %129, 1
  store i32 %inc225, i32* %i, align 4, !tbaa !5
  br label %for.cond.149

for.end.226:                                      ; preds = %for.cond.149
  %130 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #2
  %131 = bitcast i32* %absminh to i8*
  call void @llvm.lifetime.end(i64 4, i8* %131) #2
  %132 = bitcast i32* %absminw to i8*
  call void @llvm.lifetime.end(i64 4, i8* %132) #2
  %133 = bitcast i32* %best_candidate to i8*
  call void @llvm.lifetime.start(i64 4, i8* %133) #2
  %134 = bitcast i32* %i227 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %134) #2
  store i32 0, i32* %best_candidate, align 4, !tbaa !5
  store i32 1, i32* %i227, align 4, !tbaa !5
  br label %for.cond.228

for.cond.228:                                     ; preds = %for.inc.242, %for.end.226
  %135 = load i32, i32* %i227, align 4, !tbaa !5
  %136 = load i32, i32* %num_candidate, align 4, !tbaa !5
  %cmp229 = icmp slt i32 %135, %136
  br i1 %cmp229, label %for.body.231, label %for.end.244

for.body.231:                                     ; preds = %for.cond.228
  %137 = load i32, i32* %best_candidate, align 4, !tbaa !5
  %idxprom232 = sext i32 %137 to i64
  %arrayidx233 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom232
  %score234 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx233, i32 0, i32 3
  %138 = load i32, i32* %score234, align 4, !tbaa !176
  %139 = load i32, i32* %i227, align 4, !tbaa !5
  %idxprom235 = sext i32 %139 to i64
  %arrayidx236 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom235
  %score237 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx236, i32 0, i32 3
  %140 = load i32, i32* %score237, align 4, !tbaa !176
  %cmp238 = icmp sle i32 %138, %140
  br i1 %cmp238, label %if.then.240, label %if.end.241

if.then.240:                                      ; preds = %for.body.231
  %141 = load i32, i32* %i227, align 4, !tbaa !5
  store i32 %141, i32* %best_candidate, align 4, !tbaa !5
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.240, %for.body.231
  br label %for.inc.242

for.inc.242:                                      ; preds = %if.end.241
  %142 = load i32, i32* %i227, align 4, !tbaa !5
  %inc243 = add nsw i32 %142, 1
  store i32 %inc243, i32* %i227, align 4, !tbaa !5
  br label %for.cond.228

for.end.244:                                      ; preds = %for.cond.228
  %143 = load i32, i32* %best_candidate, align 4, !tbaa !5
  %idxprom245 = sext i32 %143 to i64
  %arrayidx246 = getelementptr inbounds [23 x %struct.paper_candidate_s], [23 x %struct.paper_candidate_s]* %candidate, i32 0, i64 %idxprom245
  %paper247 = getelementptr inbounds %struct.paper_candidate_s, %struct.paper_candidate_s* %arrayidx246, i32 0, i32 0
  %144 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %paper247, align 8, !tbaa !172
  store %struct.EPaperTable_s* %144, %struct.EPaperTable_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  %145 = bitcast i32* %i227 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %145) #2
  %146 = bitcast i32* %best_candidate to i8*
  call void @llvm.lifetime.end(i64 4, i8* %146) #2
  br label %cleanup

cleanup:                                          ; preds = %for.end.244, %if.then.87, %if.then.83
  %147 = bitcast i32* %num_candidate to i8*
  call void @llvm.lifetime.end(i64 4, i8* %147) #2
  %148 = bitcast [23 x %struct.paper_candidate_s]* %candidate to i8*
  call void @llvm.lifetime.end(i64 920, i8* %148) #2
  %149 = bitcast i32* %devh to i8*
  call void @llvm.lifetime.end(i64 4, i8* %149) #2
  %150 = bitcast i32* %devw to i8*
  call void @llvm.lifetime.end(i64 4, i8* %150) #2
  %151 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %151) #2
  %152 = load %struct.EPaperTable_s*, %struct.EPaperTable_s** %retval
  ret %struct.EPaperTable_s* %152
}

; Function Attrs: nounwind uwtable
define internal void @put_bytes(%struct.stream_s* %s, i8* %data, i32 %count) #0 {
entry:
  %s.addr = alloca %struct.stream_s*, align 8
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %used = alloca i32, align 4
  store %struct.stream_s* %s, %struct.stream_s** %s.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %count, i32* %count.addr, align 4, !tbaa !5
  %0 = bitcast i32* %used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.stream_s*, %struct.stream_s** %s.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %3 = load i32, i32* %count.addr, align 4, !tbaa !5
  %call = call i32 @sputs(%struct.stream_s* %1, i8* %2, i32 %3, i32* %used) #6
  %4 = bitcast i32* %used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %4) #2
  ret void
}

declare i32 @sputs(%struct.stream_s*, i8*, i32, i32*) #1

; Function Attrs: nounwind
declare i32 @uname(%struct.utsname*) #3

; Function Attrs: nounwind
declare noalias i8* @__strdup(i8*) #3

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #3

declare i8* @__rawmemchr(i8*, i32) #1

; Function Attrs: nounwind readnone
declare i32** @__ctype_toupper_loc() #5

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #5

declare %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s*) #1

declare i32 @gx_path_is_rectangular(%struct.gx_path_s*, %struct.gs_fixed_rect_s*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @gx_path_enum_init(%struct.gs_path_enum_s*, %struct.gx_path_s*) #1

declare i32 @gx_path_enum_next(%struct.gs_path_enum_s*, %struct.gs_fixed_point_s*) #1

declare void @gdev_vector_reset(%struct.gx_device_vector_s*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare i32 @gdev_vector_close_file(%struct.gx_device_vector_s*) #1

declare i32 @gdev_vector_get_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

declare i32 @param_write_bool(%struct.gs_param_list_s*, i8*, i32*) #1

declare i32 @param_write_int(%struct.gs_param_list_s*, i8*, i32*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_get_str_param(%struct.gs_param_list_s* %plist, i8* %key, %struct.gs_param_string_s* %pgsstr, i32 %code) #0 {
entry:
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %key.addr = alloca i8*, align 8
  %pgsstr.addr = alloca %struct.gs_param_string_s*, align 8
  %code.addr = alloca i32, align 4
  %ncode = alloca i32, align 4
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* %key, i8** %key.addr, align 8, !tbaa !1
  store %struct.gs_param_string_s* %pgsstr, %struct.gs_param_string_s** %pgsstr.addr, align 8, !tbaa !1
  store i32 %code, i32* %code.addr, align 4, !tbaa !5
  %0 = bitcast i32* %ncode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %key.addr, align 8, !tbaa !1
  %3 = load %struct.gs_param_string_s*, %struct.gs_param_string_s** %pgsstr.addr, align 8, !tbaa !1
  %call = call i32 @param_write_string(%struct.gs_param_list_s* %1, i8* %2, %struct.gs_param_string_s* %3) #6
  store i32 %call, i32* %ncode, align 4, !tbaa !5
  %4 = load i32, i32* %ncode, align 4, !tbaa !5
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %ncode, align 4, !tbaa !5
  store i32 %5, i32* %code.addr, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %code.addr, align 4, !tbaa !5
  %7 = bitcast i32* %ncode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %7) #2
  ret i32 %6
}

declare i32 @param_write_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_set_str_param(%struct.gs_param_list_s* %plist, i8* %key, i8* %strvalue, i32 %bufmax, i32 %ecode) #0 {
entry:
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %key.addr = alloca i8*, align 8
  %strvalue.addr = alloca i8*, align 8
  %bufmax.addr = alloca i32, align 4
  %ecode.addr = alloca i32, align 4
  %param_name = alloca i8*, align 8
  %gsstr = alloca %struct.gs_param_string_s, align 8
  %code = alloca i32, align 4
  %writesize = alloca i32, align 4
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store i8* %key, i8** %key.addr, align 8, !tbaa !1
  store i8* %strvalue, i8** %strvalue.addr, align 8, !tbaa !1
  store i32 %bufmax, i32* %bufmax.addr, align 4, !tbaa !5
  store i32 %ecode, i32* %ecode.addr, align 4, !tbaa !5
  %0 = bitcast i8** %param_name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.gs_param_string_s* %gsstr to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #2
  %2 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %writesize to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load i32, i32* %bufmax.addr, align 4, !tbaa !5
  store i32 %4, i32* %writesize, align 4, !tbaa !5
  %5 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %6 = load i8*, i8** %key.addr, align 8, !tbaa !1
  store i8* %6, i8** %param_name, align 8, !tbaa !1
  %call = call i32 @param_read_string(%struct.gs_param_list_s* %5, i8* %6, %struct.gs_param_string_s* %gsstr) #6
  store i32 %call, i32* %code, align 4, !tbaa !5
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.epilog
  ]

sw.bb:                                            ; preds = %entry
  %7 = load i32, i32* %bufmax.addr, align 4, !tbaa !5
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %gsstr, i32 0, i32 1
  %8 = load i32, i32* %size, align 4, !tbaa !90
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  %9 = load i32, i32* %bufmax.addr, align 4, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %size1 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %gsstr, i32 0, i32 1
  %10 = load i32, i32* %size1, align 4, !tbaa !90
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %writesize, align 4, !tbaa !5
  %11 = load i8*, i8** %strvalue.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %gsstr, i32 0, i32 0
  %12 = load i8*, i8** %data, align 8, !tbaa !91
  %13 = load i32, i32* %writesize, align 4, !tbaa !5
  %conv = sext i32 %13 to i64
  %call2 = call i8* @strncpy(i8* %11, i8* %12, i64 %conv) #7
  %14 = load i32, i32* %writesize, align 4, !tbaa !5
  %idxprom = sext i32 %14 to i64
  %15 = load i8*, i8** %strvalue.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1, !tbaa !70
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %16 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %16, i32* %ecode.addr, align 4, !tbaa !5
  %17 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %17, i32 0, i32 0
  %18 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs, align 8, !tbaa !83
  %signal_error = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %18, i32 0, i32 7
  %19 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error, align 8, !tbaa !85
  %20 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %21 = load i8*, i8** %param_name, align 8, !tbaa !1
  %22 = load i32, i32* %ecode.addr, align 4, !tbaa !5
  %call3 = call i32 %19(%struct.gs_param_list_s* %20, i8* %21, i32 %22) #6
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %entry, %cond.end
  %23 = load i32, i32* %ecode.addr, align 4, !tbaa !5
  %24 = bitcast i32* %writesize to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast %struct.gs_param_string_s* %gsstr to i8*
  call void @llvm.lifetime.end(i64 16, i8* %26) #2
  %27 = bitcast i8** %param_name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  ret i32 %23
}

declare i32 @param_read_bool(%struct.gs_param_list_s*, i8*, i32*) #1

declare i32 @param_read_int(%struct.gs_param_list_s*, i8*, i32*) #1

declare i32 @param_read_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #1

declare i32 @param_read_null(%struct.gs_param_list_s*, i8*) #1

declare i32 @gdev_vector_put_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

declare i32 @gs_closedevice(%struct.gx_device_s*) #1

declare i32 @gdev_vector_update_fill_color(%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*) #1

; Function Attrs: nounwind uwtable
define internal void @escv_write_begin(%struct.gx_device_s* %dev, i32 %bits, i32 %x, i32 %y, i32 %sw, i32 %sh, i32 %dw, i32 %dh, i32 %roll) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %bits.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %sw.addr = alloca i32, align 4
  %sh.addr = alloca i32, align 4
  %dw.addr = alloca i32, align 4
  %dh.addr = alloca i32, align 4
  %roll.addr = alloca i32, align 4
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %obuf = alloca [128 x i8], align 16
  %tmp = alloca i8*, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %comp = alloca i32, align 4
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp11 = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp49 = alloca i32, align 4
  %__s1_len55 = alloca i64, align 8
  %__s2_len57 = alloca i64, align 8
  %tmp58 = alloca i32, align 4
  %__s165 = alloca i8*, align 8
  %__result68 = alloca i32, align 4
  %tmp106 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %bits, i32* %bits.addr, align 4, !tbaa !5
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %sw, i32* %sw.addr, align 4, !tbaa !5
  store i32 %sh, i32* %sh.addr, align 4, !tbaa !5
  store i32 %dw, i32* %dw.addr, align 4, !tbaa !5
  store i32 %dh, i32* %dh.addr, align 4, !tbaa !5
  store i32 %roll, i32* %roll.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_s* %7 to %struct.gx_device_vector_s*
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %8) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %9 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %9) #2
  %10 = bitcast i8** %tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast i32* %comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %14, i32 0, i32 67
  %15 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp = icmp eq i32 0, %15
  br i1 %cmp, label %if.then, label %if.else.145

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %16 = load i32, i32* %x.addr, align 4, !tbaa !5
  %17 = load i32, i32* %y.addr, align 4, !tbaa !5
  %call4 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.236, i32 0, i32 0), i32 %16, i32 %17) #6
  %18 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call6 = call i32 @lputs(%struct.stream_s* %18, i8* %arraydecay5) #6
  store i32 10, i32* %comp, align 4, !tbaa !5
  %19 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp7 = icmp eq i32 %19, 1
  br i1 %cmp7, label %if.then.8, label %if.else.120

if.then.8:                                        ; preds = %if.then
  %20 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #2
  %21 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.11 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.8
  %call12 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #8
  store i64 %call12, i64* %__s2_len, align 8, !tbaa !59
  %22 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp13 = icmp ult i64 %22, 4
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %23 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #2
  %24 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %24, i32 0, i32 2
  %25 = load i8*, i8** %dname, align 8, !tbaa !135
  store i8* %25, i8** %__s1, align 8, !tbaa !1
  %26 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #2
  %27 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx, align 1, !tbaa !70
  %conv = zext i8 %28 to i32
  %29 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1, !tbaa !70
  %conv16 = zext i8 %29 to i32
  %sub = sub nsw i32 %conv, %conv16
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %30 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp17 = icmp ugt i64 %30, 0
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.48

land.lhs.true.19:                                 ; preds = %cond.true
  %31 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp20 = icmp eq i32 %31, 0
  br i1 %cmp20, label %if.then.22, label %if.end.48

if.then.22:                                       ; preds = %land.lhs.true.19
  %32 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx23 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx23, align 1, !tbaa !70
  %conv24 = zext i8 %33 to i32
  %34 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1), align 1, !tbaa !70
  %conv25 = zext i8 %34 to i32
  %sub26 = sub nsw i32 %conv24, %conv25
  store i32 %sub26, i32* %__result, align 4, !tbaa !5
  %35 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp27 = icmp ugt i64 %35, 1
  br i1 %cmp27, label %land.lhs.true.29, label %if.end.47

land.lhs.true.29:                                 ; preds = %if.then.22
  %36 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp30 = icmp eq i32 %36, 0
  br i1 %cmp30, label %if.then.32, label %if.end.47

if.then.32:                                       ; preds = %land.lhs.true.29
  %37 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx33 = getelementptr inbounds i8, i8* %37, i64 2
  %38 = load i8, i8* %arrayidx33, align 1, !tbaa !70
  %conv34 = zext i8 %38 to i32
  %39 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 2), align 1, !tbaa !70
  %conv35 = zext i8 %39 to i32
  %sub36 = sub nsw i32 %conv34, %conv35
  store i32 %sub36, i32* %__result, align 4, !tbaa !5
  %40 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp37 = icmp ugt i64 %40, 2
  br i1 %cmp37, label %land.lhs.true.39, label %if.end

land.lhs.true.39:                                 ; preds = %if.then.32
  %41 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp40 = icmp eq i32 %41, 0
  br i1 %cmp40, label %if.then.42, label %if.end

if.then.42:                                       ; preds = %land.lhs.true.39
  %42 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx43 = getelementptr inbounds i8, i8* %42, i64 3
  %43 = load i8, i8* %arrayidx43, align 1, !tbaa !70
  %conv44 = zext i8 %43 to i32
  %44 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 3), align 1, !tbaa !70
  %conv45 = zext i8 %44 to i32
  %sub46 = sub nsw i32 %conv44, %conv45
  store i32 %sub46, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.42, %land.lhs.true.39, %if.then.32
  br label %if.end.47

if.end.47:                                        ; preds = %if.end, %land.lhs.true.29, %if.then.22
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %land.lhs.true.19, %cond.true
  %45 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %45, i32* %tmp49, !tbaa !5
  %46 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %46) #2
  %47 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #2
  %48 = load i32, i32* %tmp49, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.8
  %49 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname50 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %49, i32 0, i32 2
  %50 = load i8*, i8** %dname50, align 8, !tbaa !135
  %call51 = call i32 @strcmp(i8* %50, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.48
  %cond = phi i32 [ %48, %if.end.48 ], [ %call51, %cond.false ]
  store i32 %cond, i32* %tmp11, !tbaa !5
  %51 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %51) #2
  %52 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #2
  %53 = load i32, i32* %tmp11, !tbaa !5
  %cmp52 = icmp eq i32 %53, 0
  br i1 %cmp52, label %if.then.114, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %54 = bitcast i64* %__s1_len55 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %54) #2
  %55 = bitcast i64* %__s2_len57 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %55) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.31 to i64)), i64 1), label %land.lhs.true.59, label %cond.false.107

land.lhs.true.59:                                 ; preds = %lor.lhs.false
  %call60 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #8
  store i64 %call60, i64* %__s2_len57, align 8, !tbaa !59
  %56 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp61 = icmp ult i64 %56, 4
  br i1 %cmp61, label %cond.true.63, label %cond.false.107

cond.true.63:                                     ; preds = %land.lhs.true.59
  %57 = bitcast i8** %__s165 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %57) #2
  %58 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname66 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %58, i32 0, i32 2
  %59 = load i8*, i8** %dname66, align 8, !tbaa !135
  store i8* %59, i8** %__s165, align 8, !tbaa !1
  %60 = bitcast i32* %__result68 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %60) #2
  %61 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx69 = getelementptr inbounds i8, i8* %61, i64 0
  %62 = load i8, i8* %arrayidx69, align 1, !tbaa !70
  %conv70 = zext i8 %62 to i32
  %63 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), align 1, !tbaa !70
  %conv71 = zext i8 %63 to i32
  %sub72 = sub nsw i32 %conv70, %conv71
  store i32 %sub72, i32* %__result68, align 4, !tbaa !5
  %64 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp73 = icmp ugt i64 %64, 0
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.105

land.lhs.true.75:                                 ; preds = %cond.true.63
  %65 = load i32, i32* %__result68, align 4, !tbaa !5
  %cmp76 = icmp eq i32 %65, 0
  br i1 %cmp76, label %if.then.78, label %if.end.105

if.then.78:                                       ; preds = %land.lhs.true.75
  %66 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx79 = getelementptr inbounds i8, i8* %66, i64 1
  %67 = load i8, i8* %arrayidx79, align 1, !tbaa !70
  %conv80 = zext i8 %67 to i32
  %68 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1), align 1, !tbaa !70
  %conv81 = zext i8 %68 to i32
  %sub82 = sub nsw i32 %conv80, %conv81
  store i32 %sub82, i32* %__result68, align 4, !tbaa !5
  %69 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp83 = icmp ugt i64 %69, 1
  br i1 %cmp83, label %land.lhs.true.85, label %if.end.104

land.lhs.true.85:                                 ; preds = %if.then.78
  %70 = load i32, i32* %__result68, align 4, !tbaa !5
  %cmp86 = icmp eq i32 %70, 0
  br i1 %cmp86, label %if.then.88, label %if.end.104

if.then.88:                                       ; preds = %land.lhs.true.85
  %71 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx89 = getelementptr inbounds i8, i8* %71, i64 2
  %72 = load i8, i8* %arrayidx89, align 1, !tbaa !70
  %conv90 = zext i8 %72 to i32
  %73 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 2), align 1, !tbaa !70
  %conv91 = zext i8 %73 to i32
  %sub92 = sub nsw i32 %conv90, %conv91
  store i32 %sub92, i32* %__result68, align 4, !tbaa !5
  %74 = load i64, i64* %__s2_len57, align 8, !tbaa !59
  %cmp93 = icmp ugt i64 %74, 2
  br i1 %cmp93, label %land.lhs.true.95, label %if.end.103

land.lhs.true.95:                                 ; preds = %if.then.88
  %75 = load i32, i32* %__result68, align 4, !tbaa !5
  %cmp96 = icmp eq i32 %75, 0
  br i1 %cmp96, label %if.then.98, label %if.end.103

if.then.98:                                       ; preds = %land.lhs.true.95
  %76 = load i8*, i8** %__s165, align 8, !tbaa !1
  %arrayidx99 = getelementptr inbounds i8, i8* %76, i64 3
  %77 = load i8, i8* %arrayidx99, align 1, !tbaa !70
  %conv100 = zext i8 %77 to i32
  %78 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 3), align 1, !tbaa !70
  %conv101 = zext i8 %78 to i32
  %sub102 = sub nsw i32 %conv100, %conv101
  store i32 %sub102, i32* %__result68, align 4, !tbaa !5
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.98, %land.lhs.true.95, %if.then.88
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true.85, %if.then.78
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %land.lhs.true.75, %cond.true.63
  %79 = load i32, i32* %__result68, align 4, !tbaa !5
  store i32 %79, i32* %tmp106, !tbaa !5
  %80 = bitcast i32* %__result68 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %80) #2
  %81 = bitcast i8** %__s165 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %81) #2
  %82 = load i32, i32* %tmp106, !tbaa !5
  br label %cond.end.110

cond.false.107:                                   ; preds = %land.lhs.true.59, %lor.lhs.false
  %83 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname108 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %83, i32 0, i32 2
  %84 = load i8*, i8** %dname108, align 8, !tbaa !135
  %call109 = call i32 @strcmp(i8* %84, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #7
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.107, %if.end.105
  %cond111 = phi i32 [ %82, %if.end.105 ], [ %call109, %cond.false.107 ]
  store i32 %cond111, i32* %tmp58, !tbaa !5
  %85 = bitcast i64* %__s2_len57 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %85) #2
  %86 = bitcast i64* %__s1_len55 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %86) #2
  %87 = load i32, i32* %tmp58, !tbaa !5
  %cmp112 = icmp eq i32 %87, 0
  br i1 %cmp112, label %if.then.114, label %if.else

if.then.114:                                      ; preds = %cond.end.110, %cond.end
  %arraydecay115 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call116 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay115, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.237, i32 0, i32 0)) #6
  br label %if.end.119

if.else:                                          ; preds = %cond.end.110
  %arraydecay117 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %88 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %89 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %90 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %91 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %92 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call118 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay117, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.238, i32 0, i32 0), i32 %88, i32 %89, i32 %90, i32 %91, i32 %92) #6
  br label %if.end.119

if.end.119:                                       ; preds = %if.else, %if.then.114
  br label %if.end.144

if.else.120:                                      ; preds = %if.then
  %93 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp121 = icmp eq i32 %93, 4
  br i1 %cmp121, label %if.then.123, label %if.else.129

if.then.123:                                      ; preds = %if.else.120
  %94 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c4map = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %94, i32 0, i32 88
  %95 = load i32, i32* %c4map, align 4, !tbaa !181
  %tobool = icmp ne i32 %95, 0
  br i1 %tobool, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %if.then.123
  %96 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c4map125 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %96, i32 0, i32 88
  store i32 0, i32* %c4map125, align 4, !tbaa !181
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %if.then.123
  %arraydecay127 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %97 = load i32, i32* %comp, align 4, !tbaa !5
  %98 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %99 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %100 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %101 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %102 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call128 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay127, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.239, i32 0, i32 0), i32 %97, i32 %98, i32 %99, i32 %100, i32 %101, i32 %102) #6
  br label %if.end.143

if.else.129:                                      ; preds = %if.else.120
  %103 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp130 = icmp eq i32 %103, 8
  br i1 %cmp130, label %if.then.132, label %if.else.139

if.then.132:                                      ; preds = %if.else.129
  %104 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c8map = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %104, i32 0, i32 89
  %105 = load i32, i32* %c8map, align 4, !tbaa !182
  %tobool133 = icmp ne i32 %105, 0
  br i1 %tobool133, label %if.then.134, label %if.end.136

if.then.134:                                      ; preds = %if.then.132
  %106 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c8map135 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %106, i32 0, i32 89
  store i32 0, i32* %c8map135, align 4, !tbaa !182
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.134, %if.then.132
  %arraydecay137 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %107 = load i32, i32* %comp, align 4, !tbaa !5
  %108 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %109 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %110 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %111 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %112 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call138 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay137, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.239, i32 0, i32 0), i32 %107, i32 %108, i32 %109, i32 %110, i32 %111, i32 %112) #6
  br label %if.end.142

if.else.139:                                      ; preds = %if.else.129
  %arraydecay140 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %113 = load i32, i32* %comp, align 4, !tbaa !5
  %114 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %115 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %116 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %117 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %118 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call141 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay140, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.239, i32 0, i32 0), i32 %113, i32 %114, i32 %115, i32 %116, i32 %117, i32 %118) #6
  br label %if.end.142

if.end.142:                                       ; preds = %if.else.139, %if.end.136
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.end.126
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.end.119
  br label %if.end.226

if.else.145:                                      ; preds = %entry
  %arraydecay146 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %119 = load i32, i32* %x.addr, align 4, !tbaa !5
  %120 = load i32, i32* %y.addr, align 4, !tbaa !5
  %call147 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay146, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.236, i32 0, i32 0), i32 %119, i32 %120) #6
  %121 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay148 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call149 = call i32 @lputs(%struct.stream_s* %121, i8* %arraydecay148) #6
  store i32 0, i32* %comp, align 4, !tbaa !5
  %122 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp150 = icmp eq i32 %122, 1
  br i1 %cmp150, label %if.then.152, label %if.else.155

if.then.152:                                      ; preds = %if.else.145
  %arraydecay153 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %123 = load i32, i32* %comp, align 4, !tbaa !5
  %124 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %125 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %126 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %127 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %128 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call154 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay153, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.240, i32 0, i32 0), i32 %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128) #6
  br label %if.end.225

if.else.155:                                      ; preds = %if.else.145
  %129 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp156 = icmp eq i32 %129, 4
  br i1 %cmp156, label %if.then.158, label %if.else.184

if.then.158:                                      ; preds = %if.else.155
  %130 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c4map159 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %130, i32 0, i32 88
  %131 = load i32, i32* %c4map159, align 4, !tbaa !181
  %tobool160 = icmp ne i32 %131, 0
  br i1 %tobool160, label %if.then.161, label %if.end.181

if.then.161:                                      ; preds = %if.then.158
  %132 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call162 = call i32 @lputs(%struct.stream_s* %132, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.241, i32 0, i32 0)) #6
  %133 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %133, i32 0, i32 3
  %134 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %134, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %135 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %136 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory163 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %136, i32 0, i32 3
  %137 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory163, align 8, !tbaa !66
  %call164 = call i8* %135(%struct.gs_memory_s* %137, i32 64, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.242, i32 0, i32 0)) #6
  store i8* %call164, i8** %tmp, align 8, !tbaa !1
  store i8* %call164, i8** %p, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.161
  %138 = load i32, i32* %i, align 4, !tbaa !5
  %cmp165 = icmp slt i32 %138, 16
  br i1 %cmp165, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %139 = load i32, i32* %i, align 4, !tbaa !5
  %shl = shl i32 %139, 4
  %conv167 = trunc i32 %shl to i8
  %140 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !1
  store i8 %conv167, i8* %140, align 1, !tbaa !70
  %141 = load i32, i32* %i, align 4, !tbaa !5
  %shl168 = shl i32 %141, 4
  %conv169 = trunc i32 %shl168 to i8
  %142 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr170 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr170, i8** %p, align 8, !tbaa !1
  store i8 %conv169, i8* %142, align 1, !tbaa !70
  %143 = load i32, i32* %i, align 4, !tbaa !5
  %shl171 = shl i32 %143, 4
  %conv172 = trunc i32 %shl171 to i8
  %144 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr173 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %incdec.ptr173, i8** %p, align 8, !tbaa !1
  store i8 %conv172, i8* %144, align 1, !tbaa !70
  %145 = load i32, i32* %i, align 4, !tbaa !5
  %shl174 = shl i32 %145, 4
  %conv175 = trunc i32 %shl174 to i8
  %146 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr176 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %incdec.ptr176, i8** %p, align 8, !tbaa !1
  store i8 %conv175, i8* %146, align 1, !tbaa !70
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %147 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %147, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %148 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %149 = load i8*, i8** %tmp, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %148, i8* %149, i32 64) #6
  %150 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory177 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %150, i32 0, i32 3
  %151 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory177, align 8, !tbaa !66
  %procs178 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %151, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs178, i32 0, i32 2
  %152 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %153 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory179 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %153, i32 0, i32 3
  %154 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory179, align 8, !tbaa !66
  %155 = load i8*, i8** %tmp, align 8, !tbaa !1
  call void %152(%struct.gs_memory_s* %154, i8* %155, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.242, i32 0, i32 0)) #6
  %156 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c4map180 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %156, i32 0, i32 88
  store i32 0, i32* %c4map180, align 4, !tbaa !181
  br label %if.end.181

if.end.181:                                       ; preds = %for.end, %if.then.158
  %arraydecay182 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %157 = load i32, i32* %comp, align 4, !tbaa !5
  %158 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %159 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %160 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %161 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %162 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call183 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay182, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.243, i32 0, i32 0), i32 %157, i32 %158, i32 %159, i32 %160, i32 %161, i32 %162) #6
  br label %if.end.224

if.else.184:                                      ; preds = %if.else.155
  %163 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp185 = icmp eq i32 %163, 8
  br i1 %cmp185, label %if.then.187, label %if.else.220

if.then.187:                                      ; preds = %if.else.184
  %164 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c8map188 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %164, i32 0, i32 89
  %165 = load i32, i32* %c8map188, align 4, !tbaa !182
  %tobool189 = icmp ne i32 %165, 0
  br i1 %tobool189, label %if.then.190, label %if.end.217

if.then.190:                                      ; preds = %if.then.187
  %166 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call191 = call i32 @lputs(%struct.stream_s* %166, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.244, i32 0, i32 0)) #6
  %167 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory192 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %167, i32 0, i32 3
  %168 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory192, align 8, !tbaa !66
  %procs193 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %168, i32 0, i32 1
  %alloc_bytes194 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs193, i32 0, i32 7
  %169 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes194, align 8, !tbaa !67
  %170 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory195 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %170, i32 0, i32 3
  %171 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory195, align 8, !tbaa !66
  %call196 = call i8* %169(%struct.gs_memory_s* %171, i32 1024, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.245, i32 0, i32 0)) #6
  store i8* %call196, i8** %tmp, align 8, !tbaa !1
  store i8* %call196, i8** %p, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.197

for.cond.197:                                     ; preds = %for.inc.209, %if.then.190
  %172 = load i32, i32* %i, align 4, !tbaa !5
  %cmp198 = icmp slt i32 %172, 256
  br i1 %cmp198, label %for.body.200, label %for.end.211

for.body.200:                                     ; preds = %for.cond.197
  %173 = load i32, i32* %i, align 4, !tbaa !5
  %conv201 = trunc i32 %173 to i8
  %174 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr202 = getelementptr inbounds i8, i8* %174, i32 1
  store i8* %incdec.ptr202, i8** %p, align 8, !tbaa !1
  store i8 %conv201, i8* %174, align 1, !tbaa !70
  %175 = load i32, i32* %i, align 4, !tbaa !5
  %conv203 = trunc i32 %175 to i8
  %176 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr204 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr204, i8** %p, align 8, !tbaa !1
  store i8 %conv203, i8* %176, align 1, !tbaa !70
  %177 = load i32, i32* %i, align 4, !tbaa !5
  %conv205 = trunc i32 %177 to i8
  %178 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr206 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr206, i8** %p, align 8, !tbaa !1
  store i8 %conv205, i8* %178, align 1, !tbaa !70
  %179 = load i32, i32* %i, align 4, !tbaa !5
  %conv207 = trunc i32 %179 to i8
  %180 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr208 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr208, i8** %p, align 8, !tbaa !1
  store i8 %conv207, i8* %180, align 1, !tbaa !70
  br label %for.inc.209

for.inc.209:                                      ; preds = %for.body.200
  %181 = load i32, i32* %i, align 4, !tbaa !5
  %inc210 = add nsw i32 %181, 1
  store i32 %inc210, i32* %i, align 4, !tbaa !5
  br label %for.cond.197

for.end.211:                                      ; preds = %for.cond.197
  %182 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %183 = load i8*, i8** %tmp, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %182, i8* %183, i32 1024) #6
  %184 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory212 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %184, i32 0, i32 3
  %185 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory212, align 8, !tbaa !66
  %procs213 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %185, i32 0, i32 1
  %free_object214 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs213, i32 0, i32 2
  %186 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object214, align 8, !tbaa !71
  %187 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory215 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %187, i32 0, i32 3
  %188 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory215, align 8, !tbaa !66
  %189 = load i8*, i8** %tmp, align 8, !tbaa !1
  call void %186(%struct.gs_memory_s* %188, i8* %189, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.245, i32 0, i32 0)) #6
  %190 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %c8map216 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %190, i32 0, i32 89
  store i32 0, i32* %c8map216, align 4, !tbaa !182
  br label %if.end.217

if.end.217:                                       ; preds = %for.end.211, %if.then.187
  %arraydecay218 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %191 = load i32, i32* %comp, align 4, !tbaa !5
  %192 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %193 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %194 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %195 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %196 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call219 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay218, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.246, i32 0, i32 0), i32 %191, i32 %192, i32 %193, i32 %194, i32 %195, i32 %196) #6
  br label %if.end.223

if.else.220:                                      ; preds = %if.else.184
  %arraydecay221 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %197 = load i32, i32* %comp, align 4, !tbaa !5
  %198 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %199 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %200 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %201 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %202 = load i32, i32* %roll.addr, align 4, !tbaa !5
  %call222 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay221, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.247, i32 0, i32 0), i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, i32 %202) #6
  br label %if.end.223

if.end.223:                                       ; preds = %if.else.220, %if.end.217
  br label %if.end.224

if.end.224:                                       ; preds = %if.end.223, %if.end.181
  br label %if.end.225

if.end.225:                                       ; preds = %if.end.224, %if.then.152
  br label %if.end.226

if.end.226:                                       ; preds = %if.end.225, %if.end.144
  %203 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay227 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call228 = call i32 @lputs(%struct.stream_s* %203, i8* %arraydecay227) #6
  %204 = bitcast i32* %comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %204) #2
  %205 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %205) #2
  %206 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %206) #2
  %207 = bitcast i8** %tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %207) #2
  %208 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %208) #2
  %209 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %209) #2
  %210 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %210) #2
  %211 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %211) #2
  ret void
}

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8*, i64) #3

; Function Attrs: nounwind uwtable
define internal void @escv_write_data(%struct.gx_device_s* %dev, i32 %bits, i8* %buf, i32 %bsize, i32 %w, i32 %ras) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %bits.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %bsize.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %ras.addr = alloca i32, align 4
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %obuf = alloca [128 x i8], align 16
  %size = alloca i32, align 4
  %tmps = alloca i8*, align 8
  %p = alloca i8*, align 8
  %rgbbuf = alloca i8*, align 8
  %ucp = alloca i8*, align 8
  %gray8 = alloca double, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp134 = alloca i32, align 4
  %__s1_len140 = alloca i64, align 8
  %__s2_len142 = alloca i64, align 8
  %tmp143 = alloca i32, align 4
  %__s1150 = alloca i8*, align 8
  %__result153 = alloca i32, align 4
  %tmp191 = alloca i32, align 4
  %tmp226 = alloca i8, align 1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %bits, i32* %bits.addr, align 4, !tbaa !5
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !1
  store i32 %bsize, i32* %bsize.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %ras, i32* %ras.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %5, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_escv_s* %7 to %struct.gx_device_vector_s*
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %8) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %9 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.start(i64 128, i8* %9) #2
  %10 = bitcast i32* %size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i8** %tmps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = bitcast i8** %rgbbuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = bitcast i8** %ucp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  %15 = bitcast double* %gray8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %16, i32 0, i32 67
  %17 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp = icmp eq i32 0, %17
  br i1 %cmp, label %if.then, label %if.else.224

if.then:                                          ; preds = %entry
  store i8* null, i8** %tmps, align 8, !tbaa !1
  %18 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp1 = icmp eq i32 %18, 12
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %19 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %19, i32 0, i32 3
  %20 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %20, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %21 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %22 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory3 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %22, i32 0, i32 3
  %23 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory3, align 8, !tbaa !66
  %24 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %24, 2
  %call4 = call i8* %21(%struct.gs_memory_s* %23, i32 %mul, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  store i8* %call4, i8** %tmps, align 8, !tbaa !1
  store i8* %call4, i8** %p, align 8, !tbaa !1
  store i32 0, i32* %size, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %25 = load i32, i32* %size, align 4, !tbaa !5
  %26 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %25, %26
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom = sext i32 %27 to i64
  %28 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %28, i64 %idxprom
  %29 = load i8, i8* %arrayidx, align 1, !tbaa !70
  %conv = sext i8 %29 to i32
  %and = and i32 %conv, 240
  %conv6 = trunc i32 %and to i8
  %30 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !1
  store i8 %conv6, i8* %30, align 1, !tbaa !70
  %31 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom7 = sext i32 %31 to i64
  %32 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx8 = getelementptr inbounds i8, i8* %32, i64 %idxprom7
  %33 = load i8, i8* %arrayidx8, align 1, !tbaa !70
  %conv9 = sext i8 %33 to i32
  %shl = shl i32 %conv9, 4
  %conv10 = trunc i32 %shl to i8
  %34 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr11 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr11, i8** %p, align 8, !tbaa !1
  store i8 %conv10, i8* %34, align 1, !tbaa !70
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %size, align 4, !tbaa !5
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %size, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %36 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul12 = mul nsw i32 %36, 2
  store i32 %mul12, i32* %bsize.addr, align 4, !tbaa !5
  %37 = load i8*, i8** %tmps, align 8, !tbaa !1
  store i8* %37, i8** %buf.addr, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %38 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp13 = icmp eq i32 %38, 4
  br i1 %cmp13, label %if.then.15, label %if.end.46

if.then.15:                                       ; preds = %if.end
  %39 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory16 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %39, i32 0, i32 3
  %40 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory16, align 8, !tbaa !66
  %procs17 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %40, i32 0, i32 1
  %alloc_bytes18 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs17, i32 0, i32 7
  %41 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes18, align 8, !tbaa !67
  %42 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory19 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %42, i32 0, i32 3
  %43 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory19, align 8, !tbaa !66
  %44 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul20 = mul nsw i32 %44, 2
  %call21 = call i8* %41(%struct.gs_memory_s* %43, i32 %mul20, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  store i8* %call21, i8** %tmps, align 8, !tbaa !1
  store i8* %call21, i8** %p, align 8, !tbaa !1
  store i32 0, i32* %size, align 4, !tbaa !5
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc.42, %if.then.15
  %45 = load i32, i32* %size, align 4, !tbaa !5
  %46 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %cmp23 = icmp slt i32 %45, %46
  br i1 %cmp23, label %for.body.25, label %for.end.44

for.body.25:                                      ; preds = %for.cond.22
  %47 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom26 = sext i32 %47 to i64
  %48 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx27 = getelementptr inbounds i8, i8* %48, i64 %idxprom26
  %49 = load i8, i8* %arrayidx27, align 1, !tbaa !70
  %conv28 = sext i8 %49 to i32
  %and29 = and i32 %conv28, 240
  %mul30 = mul nsw i32 %and29, 255
  %div = sdiv i32 %mul30, 240
  %conv31 = trunc i32 %div to i8
  %50 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr32 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr32, i8** %p, align 8, !tbaa !1
  store i8 %conv31, i8* %50, align 1, !tbaa !70
  %51 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom33 = sext i32 %51 to i64
  %52 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx34 = getelementptr inbounds i8, i8* %52, i64 %idxprom33
  %53 = load i8, i8* %arrayidx34, align 1, !tbaa !70
  %conv35 = sext i8 %53 to i32
  %shl36 = shl i32 %conv35, 4
  %and37 = and i32 %shl36, 240
  %mul38 = mul nsw i32 %and37, 255
  %div39 = sdiv i32 %mul38, 240
  %conv40 = trunc i32 %div39 to i8
  %54 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr41 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr41, i8** %p, align 8, !tbaa !1
  store i8 %conv40, i8* %54, align 1, !tbaa !70
  br label %for.inc.42

for.inc.42:                                       ; preds = %for.body.25
  %55 = load i32, i32* %size, align 4, !tbaa !5
  %inc43 = add nsw i32 %55, 1
  store i32 %inc43, i32* %size, align 4, !tbaa !5
  br label %for.cond.22

for.end.44:                                       ; preds = %for.cond.22
  %56 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul45 = mul nsw i32 %56, 2
  store i32 %mul45, i32* %bsize.addr, align 4, !tbaa !5
  %57 = load i8*, i8** %tmps, align 8, !tbaa !1
  store i8* %57, i8** %buf.addr, align 8, !tbaa !1
  br label %if.end.46

if.end.46:                                        ; preds = %for.end.44, %if.end
  %58 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp47 = icmp eq i32 %58, 24
  br i1 %cmp47, label %if.then.49, label %if.end.89

if.then.49:                                       ; preds = %if.end.46
  %59 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory50 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %59, i32 0, i32 3
  %60 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory50, align 8, !tbaa !66
  %procs51 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %60, i32 0, i32 1
  %alloc_bytes52 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs51, i32 0, i32 7
  %61 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes52, align 8, !tbaa !67
  %62 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory53 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %62, i32 0, i32 3
  %63 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory53, align 8, !tbaa !66
  %64 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %div54 = sdiv i32 %64, 3
  %call55 = call i8* %61(%struct.gs_memory_s* %63, i32 %div54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  store i8* %call55, i8** %tmps, align 8, !tbaa !1
  %65 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  store i8* %65, i8** %rgbbuf, align 8, !tbaa !1
  %66 = load i8*, i8** %tmps, align 8, !tbaa !1
  store i8* %66, i8** %ucp, align 8, !tbaa !1
  store i32 0, i32* %size, align 4, !tbaa !5
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.85, %if.then.49
  %67 = load i32, i32* %size, align 4, !tbaa !5
  %68 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %cmp57 = icmp slt i32 %67, %68
  br i1 %cmp57, label %for.body.59, label %for.end.87

for.body.59:                                      ; preds = %for.cond.56
  %69 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom60 = sext i32 %69 to i64
  %70 = load i8*, i8** %rgbbuf, align 8, !tbaa !1
  %arrayidx61 = getelementptr inbounds i8, i8* %70, i64 %idxprom60
  %71 = load i8, i8* %arrayidx61, align 1, !tbaa !70
  %conv62 = zext i8 %71 to i32
  %conv63 = sitofp i32 %conv62 to x86_fp80
  %mul64 = fmul x86_fp80 0xK3FFD9916872B020C49BA, %conv63
  %72 = load i32, i32* %size, align 4, !tbaa !5
  %add = add nsw i32 %72, 1
  %idxprom65 = sext i32 %add to i64
  %73 = load i8*, i8** %rgbbuf, align 8, !tbaa !1
  %arrayidx66 = getelementptr inbounds i8, i8* %73, i64 %idxprom65
  %74 = load i8, i8* %arrayidx66, align 1, !tbaa !70
  %conv67 = zext i8 %74 to i32
  %conv68 = sitofp i32 %conv67 to x86_fp80
  %mul69 = fmul x86_fp80 0xK3FFE9645A1CAC083126F, %conv68
  %add70 = fadd x86_fp80 %mul64, %mul69
  %75 = load i32, i32* %size, align 4, !tbaa !5
  %add71 = add nsw i32 %75, 2
  %idxprom72 = sext i32 %add71 to i64
  %76 = load i8*, i8** %rgbbuf, align 8, !tbaa !1
  %arrayidx73 = getelementptr inbounds i8, i8* %76, i64 %idxprom72
  %77 = load i8, i8* %arrayidx73, align 1, !tbaa !70
  %conv74 = zext i8 %77 to i32
  %conv75 = sitofp i32 %conv74 to x86_fp80
  %mul76 = fmul x86_fp80 0xK3FFBE978D4FDF3B645A2, %conv75
  %add77 = fadd x86_fp80 %add70, %mul76
  %conv78 = fptrunc x86_fp80 %add77 to double
  store double %conv78, double* %gray8, align 8, !tbaa !146
  %78 = load double, double* %gray8, align 8, !tbaa !146
  %cmp79 = fcmp ogt double %78, 2.550000e+02
  br i1 %cmp79, label %if.then.81, label %if.else

if.then.81:                                       ; preds = %for.body.59
  %79 = load i8*, i8** %ucp, align 8, !tbaa !1
  store i8 -1, i8* %79, align 1, !tbaa !70
  br label %if.end.83

if.else:                                          ; preds = %for.body.59
  %80 = load double, double* %gray8, align 8, !tbaa !146
  %conv82 = fptoui double %80 to i8
  %81 = load i8*, i8** %ucp, align 8, !tbaa !1
  store i8 %conv82, i8* %81, align 1, !tbaa !70
  br label %if.end.83

if.end.83:                                        ; preds = %if.else, %if.then.81
  %82 = load i8*, i8** %ucp, align 8, !tbaa !1
  %incdec.ptr84 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr84, i8** %ucp, align 8, !tbaa !1
  br label %for.inc.85

for.inc.85:                                       ; preds = %if.end.83
  %83 = load i32, i32* %size, align 4, !tbaa !5
  %add86 = add nsw i32 %83, 3
  store i32 %add86, i32* %size, align 4, !tbaa !5
  br label %for.cond.56

for.end.87:                                       ; preds = %for.cond.56
  %84 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %div88 = sdiv i32 %84, 3
  store i32 %div88, i32* %bsize.addr, align 4, !tbaa !5
  %85 = load i8*, i8** %tmps, align 8, !tbaa !1
  store i8* %85, i8** %buf.addr, align 8, !tbaa !1
  br label %if.end.89

if.end.89:                                        ; preds = %for.end.87, %if.end.46
  %86 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp90 = icmp eq i32 %86, 1
  br i1 %cmp90, label %if.then.92, label %if.else.205

if.then.92:                                       ; preds = %if.end.89
  %87 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %87) #2
  %88 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %88) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.11 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.92
  %call93 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #8
  store i64 %call93, i64* %__s2_len, align 8, !tbaa !59
  %89 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp94 = icmp ult i64 %89, 4
  br i1 %cmp94, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %90 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %90) #2
  %91 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %91, i32 0, i32 2
  %92 = load i8*, i8** %dname, align 8, !tbaa !135
  store i8* %92, i8** %__s1, align 8, !tbaa !1
  %93 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %93) #2
  %94 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx98 = getelementptr inbounds i8, i8* %94, i64 0
  %95 = load i8, i8* %arrayidx98, align 1, !tbaa !70
  %conv99 = zext i8 %95 to i32
  %96 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1, !tbaa !70
  %conv100 = zext i8 %96 to i32
  %sub = sub nsw i32 %conv99, %conv100
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %97 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp101 = icmp ugt i64 %97, 0
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.133

land.lhs.true.103:                                ; preds = %cond.true
  %98 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp104 = icmp eq i32 %98, 0
  br i1 %cmp104, label %if.then.106, label %if.end.133

if.then.106:                                      ; preds = %land.lhs.true.103
  %99 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx107 = getelementptr inbounds i8, i8* %99, i64 1
  %100 = load i8, i8* %arrayidx107, align 1, !tbaa !70
  %conv108 = zext i8 %100 to i32
  %101 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1), align 1, !tbaa !70
  %conv109 = zext i8 %101 to i32
  %sub110 = sub nsw i32 %conv108, %conv109
  store i32 %sub110, i32* %__result, align 4, !tbaa !5
  %102 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp111 = icmp ugt i64 %102, 1
  br i1 %cmp111, label %land.lhs.true.113, label %if.end.132

land.lhs.true.113:                                ; preds = %if.then.106
  %103 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp114 = icmp eq i32 %103, 0
  br i1 %cmp114, label %if.then.116, label %if.end.132

if.then.116:                                      ; preds = %land.lhs.true.113
  %104 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx117 = getelementptr inbounds i8, i8* %104, i64 2
  %105 = load i8, i8* %arrayidx117, align 1, !tbaa !70
  %conv118 = zext i8 %105 to i32
  %106 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 2), align 1, !tbaa !70
  %conv119 = zext i8 %106 to i32
  %sub120 = sub nsw i32 %conv118, %conv119
  store i32 %sub120, i32* %__result, align 4, !tbaa !5
  %107 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp121 = icmp ugt i64 %107, 2
  br i1 %cmp121, label %land.lhs.true.123, label %if.end.131

land.lhs.true.123:                                ; preds = %if.then.116
  %108 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp124 = icmp eq i32 %108, 0
  br i1 %cmp124, label %if.then.126, label %if.end.131

if.then.126:                                      ; preds = %land.lhs.true.123
  %109 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx127 = getelementptr inbounds i8, i8* %109, i64 3
  %110 = load i8, i8* %arrayidx127, align 1, !tbaa !70
  %conv128 = zext i8 %110 to i32
  %111 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 3), align 1, !tbaa !70
  %conv129 = zext i8 %111 to i32
  %sub130 = sub nsw i32 %conv128, %conv129
  store i32 %sub130, i32* %__result, align 4, !tbaa !5
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.126, %land.lhs.true.123, %if.then.116
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %land.lhs.true.113, %if.then.106
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %land.lhs.true.103, %cond.true
  %112 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %112, i32* %tmp134, !tbaa !5
  %113 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #2
  %114 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #2
  %115 = load i32, i32* %tmp134, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.92
  %116 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname135 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %116, i32 0, i32 2
  %117 = load i8*, i8** %dname135, align 8, !tbaa !135
  %call136 = call i32 @strcmp(i8* %117, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.133
  %cond = phi i32 [ %115, %if.end.133 ], [ %call136, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %118 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %118) #2
  %119 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %119) #2
  %120 = load i32, i32* %tmp, !tbaa !5
  %cmp137 = icmp eq i32 %120, 0
  br i1 %cmp137, label %if.then.199, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %121 = bitcast i64* %__s1_len140 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %121) #2
  %122 = bitcast i64* %__s2_len142 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %122) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.31 to i64)), i64 1), label %land.lhs.true.144, label %cond.false.192

land.lhs.true.144:                                ; preds = %lor.lhs.false
  %call145 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #8
  store i64 %call145, i64* %__s2_len142, align 8, !tbaa !59
  %123 = load i64, i64* %__s2_len142, align 8, !tbaa !59
  %cmp146 = icmp ult i64 %123, 4
  br i1 %cmp146, label %cond.true.148, label %cond.false.192

cond.true.148:                                    ; preds = %land.lhs.true.144
  %124 = bitcast i8** %__s1150 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %124) #2
  %125 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname151 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %125, i32 0, i32 2
  %126 = load i8*, i8** %dname151, align 8, !tbaa !135
  store i8* %126, i8** %__s1150, align 8, !tbaa !1
  %127 = bitcast i32* %__result153 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %127) #2
  %128 = load i8*, i8** %__s1150, align 8, !tbaa !1
  %arrayidx154 = getelementptr inbounds i8, i8* %128, i64 0
  %129 = load i8, i8* %arrayidx154, align 1, !tbaa !70
  %conv155 = zext i8 %129 to i32
  %130 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), align 1, !tbaa !70
  %conv156 = zext i8 %130 to i32
  %sub157 = sub nsw i32 %conv155, %conv156
  store i32 %sub157, i32* %__result153, align 4, !tbaa !5
  %131 = load i64, i64* %__s2_len142, align 8, !tbaa !59
  %cmp158 = icmp ugt i64 %131, 0
  br i1 %cmp158, label %land.lhs.true.160, label %if.end.190

land.lhs.true.160:                                ; preds = %cond.true.148
  %132 = load i32, i32* %__result153, align 4, !tbaa !5
  %cmp161 = icmp eq i32 %132, 0
  br i1 %cmp161, label %if.then.163, label %if.end.190

if.then.163:                                      ; preds = %land.lhs.true.160
  %133 = load i8*, i8** %__s1150, align 8, !tbaa !1
  %arrayidx164 = getelementptr inbounds i8, i8* %133, i64 1
  %134 = load i8, i8* %arrayidx164, align 1, !tbaa !70
  %conv165 = zext i8 %134 to i32
  %135 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1), align 1, !tbaa !70
  %conv166 = zext i8 %135 to i32
  %sub167 = sub nsw i32 %conv165, %conv166
  store i32 %sub167, i32* %__result153, align 4, !tbaa !5
  %136 = load i64, i64* %__s2_len142, align 8, !tbaa !59
  %cmp168 = icmp ugt i64 %136, 1
  br i1 %cmp168, label %land.lhs.true.170, label %if.end.189

land.lhs.true.170:                                ; preds = %if.then.163
  %137 = load i32, i32* %__result153, align 4, !tbaa !5
  %cmp171 = icmp eq i32 %137, 0
  br i1 %cmp171, label %if.then.173, label %if.end.189

if.then.173:                                      ; preds = %land.lhs.true.170
  %138 = load i8*, i8** %__s1150, align 8, !tbaa !1
  %arrayidx174 = getelementptr inbounds i8, i8* %138, i64 2
  %139 = load i8, i8* %arrayidx174, align 1, !tbaa !70
  %conv175 = zext i8 %139 to i32
  %140 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 2), align 1, !tbaa !70
  %conv176 = zext i8 %140 to i32
  %sub177 = sub nsw i32 %conv175, %conv176
  store i32 %sub177, i32* %__result153, align 4, !tbaa !5
  %141 = load i64, i64* %__s2_len142, align 8, !tbaa !59
  %cmp178 = icmp ugt i64 %141, 2
  br i1 %cmp178, label %land.lhs.true.180, label %if.end.188

land.lhs.true.180:                                ; preds = %if.then.173
  %142 = load i32, i32* %__result153, align 4, !tbaa !5
  %cmp181 = icmp eq i32 %142, 0
  br i1 %cmp181, label %if.then.183, label %if.end.188

if.then.183:                                      ; preds = %land.lhs.true.180
  %143 = load i8*, i8** %__s1150, align 8, !tbaa !1
  %arrayidx184 = getelementptr inbounds i8, i8* %143, i64 3
  %144 = load i8, i8* %arrayidx184, align 1, !tbaa !70
  %conv185 = zext i8 %144 to i32
  %145 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 3), align 1, !tbaa !70
  %conv186 = zext i8 %145 to i32
  %sub187 = sub nsw i32 %conv185, %conv186
  store i32 %sub187, i32* %__result153, align 4, !tbaa !5
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.183, %land.lhs.true.180, %if.then.173
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %land.lhs.true.170, %if.then.163
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.189, %land.lhs.true.160, %cond.true.148
  %146 = load i32, i32* %__result153, align 4, !tbaa !5
  store i32 %146, i32* %tmp191, !tbaa !5
  %147 = bitcast i32* %__result153 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %147) #2
  %148 = bitcast i8** %__s1150 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %148) #2
  %149 = load i32, i32* %tmp191, !tbaa !5
  br label %cond.end.195

cond.false.192:                                   ; preds = %land.lhs.true.144, %lor.lhs.false
  %150 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname193 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %150, i32 0, i32 2
  %151 = load i8*, i8** %dname193, align 8, !tbaa !135
  %call194 = call i32 @strcmp(i8* %151, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #7
  br label %cond.end.195

cond.end.195:                                     ; preds = %cond.false.192, %if.end.190
  %cond196 = phi i32 [ %149, %if.end.190 ], [ %call194, %cond.false.192 ]
  store i32 %cond196, i32* %tmp143, !tbaa !5
  %152 = bitcast i64* %__s2_len142 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %152) #2
  %153 = bitcast i64* %__s1_len140 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %153) #2
  %154 = load i32, i32* %tmp143, !tbaa !5
  %cmp197 = icmp eq i32 %154, 0
  br i1 %cmp197, label %if.then.199, label %if.else.201

if.then.199:                                      ; preds = %cond.end.195, %cond.end
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %155 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %156 = load i32, i32* %w.addr, align 4, !tbaa !5
  %157 = load i32, i32* %ras.addr, align 4, !tbaa !5
  %call200 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.249, i32 0, i32 0), i32 %155, i32 %156, i32 %157) #6
  br label %if.end.204

if.else.201:                                      ; preds = %cond.end.195
  %arraydecay202 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %158 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %159 = load i32, i32* %ras.addr, align 4, !tbaa !5
  %call203 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay202, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.250, i32 0, i32 0), i32 %158, i32 %159) #6
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.201, %if.then.199
  br label %if.end.208

if.else.205:                                      ; preds = %if.end.89
  %arraydecay206 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %160 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %161 = load i32, i32* %ras.addr, align 4, !tbaa !5
  %call207 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay206, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.251, i32 0, i32 0), i32 %160, i32 %161) #6
  br label %if.end.208

if.end.208:                                       ; preds = %if.else.205, %if.end.204
  %162 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay209 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call210 = call i32 @lputs(%struct.stream_s* %162, i8* %arraydecay209) #6
  %163 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %164 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %165 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  call void @put_bytes(%struct.stream_s* %163, i8* %164, i32 %165) #6
  %166 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp211 = icmp eq i32 %166, 12
  br i1 %cmp211, label %if.then.219, label %lor.lhs.false.213

lor.lhs.false.213:                                ; preds = %if.end.208
  %167 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp214 = icmp eq i32 %167, 4
  br i1 %cmp214, label %if.then.219, label %lor.lhs.false.216

lor.lhs.false.216:                                ; preds = %lor.lhs.false.213
  %168 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp217 = icmp eq i32 %168, 24
  br i1 %cmp217, label %if.then.219, label %if.end.223

if.then.219:                                      ; preds = %lor.lhs.false.216, %lor.lhs.false.213, %if.end.208
  %169 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory220 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %169, i32 0, i32 3
  %170 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory220, align 8, !tbaa !66
  %procs221 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %170, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs221, i32 0, i32 2
  %171 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %172 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory222 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %172, i32 0, i32 3
  %173 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory222, align 8, !tbaa !66
  %174 = load i8*, i8** %tmps, align 8, !tbaa !1
  call void %171(%struct.gs_memory_s* %173, i8* %174, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.219, %lor.lhs.false.216
  br label %if.end.280

if.else.224:                                      ; preds = %entry
  call void @llvm.lifetime.start(i64 1, i8* %tmp226) #2
  store i8* null, i8** %tmps, align 8, !tbaa !1
  %175 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp227 = icmp eq i32 %175, 12
  br i1 %cmp227, label %if.then.229, label %if.end.267

if.then.229:                                      ; preds = %if.else.224
  %176 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory230 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %176, i32 0, i32 3
  %177 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory230, align 8, !tbaa !66
  %procs231 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %177, i32 0, i32 1
  %alloc_bytes232 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs231, i32 0, i32 7
  %178 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes232, align 8, !tbaa !67
  %179 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory233 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %179, i32 0, i32 3
  %180 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory233, align 8, !tbaa !66
  %181 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul234 = mul nsw i32 %181, 2
  %call235 = call i8* %178(%struct.gs_memory_s* %180, i32 %mul234, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  store i8* %call235, i8** %tmps, align 8, !tbaa !1
  store i8* %call235, i8** %p, align 8, !tbaa !1
  store i32 0, i32* %size, align 4, !tbaa !5
  br label %for.cond.236

for.cond.236:                                     ; preds = %for.inc.263, %if.then.229
  %182 = load i32, i32* %size, align 4, !tbaa !5
  %183 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %cmp237 = icmp slt i32 %182, %183
  br i1 %cmp237, label %for.body.239, label %for.end.265

for.body.239:                                     ; preds = %for.cond.236
  %184 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom240 = sext i32 %184 to i64
  %185 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx241 = getelementptr inbounds i8, i8* %185, i64 %idxprom240
  %186 = load i8, i8* %arrayidx241, align 1, !tbaa !70
  %conv242 = sext i8 %186 to i32
  %and243 = and i32 %conv242, 240
  %conv244 = trunc i32 %and243 to i8
  store i8 %conv244, i8* %tmp226, align 1, !tbaa !70
  %187 = load i8, i8* %tmp226, align 1, !tbaa !70
  %conv245 = sext i8 %187 to i32
  %188 = load i8, i8* %tmp226, align 1, !tbaa !70
  %conv246 = sext i8 %188 to i32
  %shr = ashr i32 %conv246, 4
  %and247 = and i32 %shr, 15
  %add248 = add nsw i32 %conv245, %and247
  %conv249 = trunc i32 %add248 to i8
  %189 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr250 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr250, i8** %p, align 8, !tbaa !1
  store i8 %conv249, i8* %189, align 1, !tbaa !70
  %190 = load i32, i32* %size, align 4, !tbaa !5
  %idxprom251 = sext i32 %190 to i64
  %191 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %arrayidx252 = getelementptr inbounds i8, i8* %191, i64 %idxprom251
  %192 = load i8, i8* %arrayidx252, align 1, !tbaa !70
  %conv253 = sext i8 %192 to i32
  %shl254 = shl i32 %conv253, 4
  %conv255 = trunc i32 %shl254 to i8
  store i8 %conv255, i8* %tmp226, align 1, !tbaa !70
  %193 = load i8, i8* %tmp226, align 1, !tbaa !70
  %conv256 = sext i8 %193 to i32
  %194 = load i8, i8* %tmp226, align 1, !tbaa !70
  %conv257 = sext i8 %194 to i32
  %shr258 = ashr i32 %conv257, 4
  %and259 = and i32 %shr258, 15
  %add260 = add nsw i32 %conv256, %and259
  %conv261 = trunc i32 %add260 to i8
  %195 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr262 = getelementptr inbounds i8, i8* %195, i32 1
  store i8* %incdec.ptr262, i8** %p, align 8, !tbaa !1
  store i8 %conv261, i8* %195, align 1, !tbaa !70
  br label %for.inc.263

for.inc.263:                                      ; preds = %for.body.239
  %196 = load i32, i32* %size, align 4, !tbaa !5
  %inc264 = add nsw i32 %196, 1
  store i32 %inc264, i32* %size, align 4, !tbaa !5
  br label %for.cond.236

for.end.265:                                      ; preds = %for.cond.236
  %197 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %mul266 = mul nsw i32 %197, 2
  store i32 %mul266, i32* %bsize.addr, align 4, !tbaa !5
  %198 = load i8*, i8** %tmps, align 8, !tbaa !1
  store i8* %198, i8** %buf.addr, align 8, !tbaa !1
  br label %if.end.267

if.end.267:                                       ; preds = %for.end.265, %if.else.224
  %arraydecay268 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %199 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  %200 = load i32, i32* %ras.addr, align 4, !tbaa !5
  %call269 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay268, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.251, i32 0, i32 0), i32 %199, i32 %200) #6
  %201 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %arraydecay270 = getelementptr inbounds [128 x i8], [128 x i8]* %obuf, i32 0, i32 0
  %call271 = call i32 @lputs(%struct.stream_s* %201, i8* %arraydecay270) #6
  %202 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %203 = load i8*, i8** %buf.addr, align 8, !tbaa !1
  %204 = load i32, i32* %bsize.addr, align 4, !tbaa !5
  call void @put_bytes(%struct.stream_s* %202, i8* %203, i32 %204) #6
  %205 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp272 = icmp eq i32 %205, 12
  br i1 %cmp272, label %if.then.274, label %if.end.279

if.then.274:                                      ; preds = %if.end.267
  %206 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory275 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %206, i32 0, i32 3
  %207 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory275, align 8, !tbaa !66
  %procs276 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %207, i32 0, i32 1
  %free_object277 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs276, i32 0, i32 2
  %208 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object277, align 8, !tbaa !71
  %209 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory278 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %209, i32 0, i32 3
  %210 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory278, align 8, !tbaa !66
  %211 = load i8*, i8** %tmps, align 8, !tbaa !1
  call void %208(%struct.gs_memory_s* %210, i8* %211, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0)) #6
  br label %if.end.279

if.end.279:                                       ; preds = %if.then.274, %if.end.267
  call void @llvm.lifetime.end(i64 1, i8* %tmp226) #2
  br label %if.end.280

if.end.280:                                       ; preds = %if.end.279, %if.end.223
  %212 = bitcast double* %gray8 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %212) #2
  %213 = bitcast i8** %ucp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %213) #2
  %214 = bitcast i8** %rgbbuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %214) #2
  %215 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %215) #2
  %216 = bitcast i8** %tmps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %216) #2
  %217 = bitcast i32* %size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %217) #2
  %218 = bitcast [128 x i8]* %obuf to i8*
  call void @llvm.lifetime.end(i64 128, i8* %218) #2
  %219 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %219) #2
  %220 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %220) #2
  %221 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %221) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @escv_write_end(%struct.gx_device_s* %dev, i32 %bits) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %bits.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %s = alloca %struct.stream_s*, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp40 = alloca i32, align 4
  %__s1_len46 = alloca i64, align 8
  %__s2_len48 = alloca i64, align 8
  %tmp49 = alloca i32, align 4
  %__s156 = alloca i8*, align 8
  %__result59 = alloca i32, align 4
  %tmp97 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %bits, i32* %bits.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %2, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_escv_s* %4 to %struct.gx_device_vector_s*
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %5) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %6 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %6, i32 0, i32 67
  %7 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp = icmp eq i32 0, %7
  br i1 %cmp, label %if.then, label %if.else.112

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %bits.addr, align 4, !tbaa !5
  %cmp1 = icmp eq i32 %8, 1
  br i1 %cmp1, label %if.then.2, label %if.else.109

if.then.2:                                        ; preds = %if.then
  %9 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.11 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.2
  %call3 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #8
  store i64 %call3, i64* %__s2_len, align 8, !tbaa !59
  %11 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp4 = icmp ult i64 %11, 4
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 2
  %14 = load i8*, i8** %dname, align 8, !tbaa !135
  store i8* %14, i8** %__s1, align 8, !tbaa !1
  %15 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx, align 1, !tbaa !70
  %conv = zext i8 %17 to i32
  %18 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1, !tbaa !70
  %conv7 = zext i8 %18 to i32
  %sub = sub nsw i32 %conv, %conv7
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %19 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp8 = icmp ugt i64 %19, 0
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.39

land.lhs.true.10:                                 ; preds = %cond.true
  %20 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp11 = icmp eq i32 %20, 0
  br i1 %cmp11, label %if.then.13, label %if.end.39

if.then.13:                                       ; preds = %land.lhs.true.10
  %21 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx14, align 1, !tbaa !70
  %conv15 = zext i8 %22 to i32
  %23 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1), align 1, !tbaa !70
  %conv16 = zext i8 %23 to i32
  %sub17 = sub nsw i32 %conv15, %conv16
  store i32 %sub17, i32* %__result, align 4, !tbaa !5
  %24 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp18 = icmp ugt i64 %24, 1
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.38

land.lhs.true.20:                                 ; preds = %if.then.13
  %25 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp21 = icmp eq i32 %25, 0
  br i1 %cmp21, label %if.then.23, label %if.end.38

if.then.23:                                       ; preds = %land.lhs.true.20
  %26 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx24 = getelementptr inbounds i8, i8* %26, i64 2
  %27 = load i8, i8* %arrayidx24, align 1, !tbaa !70
  %conv25 = zext i8 %27 to i32
  %28 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 2), align 1, !tbaa !70
  %conv26 = zext i8 %28 to i32
  %sub27 = sub nsw i32 %conv25, %conv26
  store i32 %sub27, i32* %__result, align 4, !tbaa !5
  %29 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp28 = icmp ugt i64 %29, 2
  br i1 %cmp28, label %land.lhs.true.30, label %if.end

land.lhs.true.30:                                 ; preds = %if.then.23
  %30 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp31 = icmp eq i32 %30, 0
  br i1 %cmp31, label %if.then.33, label %if.end

if.then.33:                                       ; preds = %land.lhs.true.30
  %31 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx34 = getelementptr inbounds i8, i8* %31, i64 3
  %32 = load i8, i8* %arrayidx34, align 1, !tbaa !70
  %conv35 = zext i8 %32 to i32
  %33 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 3), align 1, !tbaa !70
  %conv36 = zext i8 %33 to i32
  %sub37 = sub nsw i32 %conv35, %conv36
  store i32 %sub37, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.33, %land.lhs.true.30, %if.then.23
  br label %if.end.38

if.end.38:                                        ; preds = %if.end, %land.lhs.true.20, %if.then.13
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %land.lhs.true.10, %cond.true
  %34 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %34, i32* %tmp40, !tbaa !5
  %35 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %35) #2
  %36 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = load i32, i32* %tmp40, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.2
  %38 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname41 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %38, i32 0, i32 2
  %39 = load i8*, i8** %dname41, align 8, !tbaa !135
  %call42 = call i32 @strcmp(i8* %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.39
  %cond = phi i32 [ %37, %if.end.39 ], [ %call42, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %40 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #2
  %41 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #2
  %42 = load i32, i32* %tmp, !tbaa !5
  %cmp43 = icmp eq i32 %42, 0
  br i1 %cmp43, label %if.then.105, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %43 = bitcast i64* %__s1_len46 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %43) #2
  %44 = bitcast i64* %__s2_len48 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %44) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.31 to i64)), i64 1), label %land.lhs.true.50, label %cond.false.98

land.lhs.true.50:                                 ; preds = %lor.lhs.false
  %call51 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #8
  store i64 %call51, i64* %__s2_len48, align 8, !tbaa !59
  %45 = load i64, i64* %__s2_len48, align 8, !tbaa !59
  %cmp52 = icmp ult i64 %45, 4
  br i1 %cmp52, label %cond.true.54, label %cond.false.98

cond.true.54:                                     ; preds = %land.lhs.true.50
  %46 = bitcast i8** %__s156 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %46) #2
  %47 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname57 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %47, i32 0, i32 2
  %48 = load i8*, i8** %dname57, align 8, !tbaa !135
  store i8* %48, i8** %__s156, align 8, !tbaa !1
  %49 = bitcast i32* %__result59 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %49) #2
  %50 = load i8*, i8** %__s156, align 8, !tbaa !1
  %arrayidx60 = getelementptr inbounds i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx60, align 1, !tbaa !70
  %conv61 = zext i8 %51 to i32
  %52 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), align 1, !tbaa !70
  %conv62 = zext i8 %52 to i32
  %sub63 = sub nsw i32 %conv61, %conv62
  store i32 %sub63, i32* %__result59, align 4, !tbaa !5
  %53 = load i64, i64* %__s2_len48, align 8, !tbaa !59
  %cmp64 = icmp ugt i64 %53, 0
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.96

land.lhs.true.66:                                 ; preds = %cond.true.54
  %54 = load i32, i32* %__result59, align 4, !tbaa !5
  %cmp67 = icmp eq i32 %54, 0
  br i1 %cmp67, label %if.then.69, label %if.end.96

if.then.69:                                       ; preds = %land.lhs.true.66
  %55 = load i8*, i8** %__s156, align 8, !tbaa !1
  %arrayidx70 = getelementptr inbounds i8, i8* %55, i64 1
  %56 = load i8, i8* %arrayidx70, align 1, !tbaa !70
  %conv71 = zext i8 %56 to i32
  %57 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1), align 1, !tbaa !70
  %conv72 = zext i8 %57 to i32
  %sub73 = sub nsw i32 %conv71, %conv72
  store i32 %sub73, i32* %__result59, align 4, !tbaa !5
  %58 = load i64, i64* %__s2_len48, align 8, !tbaa !59
  %cmp74 = icmp ugt i64 %58, 1
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.95

land.lhs.true.76:                                 ; preds = %if.then.69
  %59 = load i32, i32* %__result59, align 4, !tbaa !5
  %cmp77 = icmp eq i32 %59, 0
  br i1 %cmp77, label %if.then.79, label %if.end.95

if.then.79:                                       ; preds = %land.lhs.true.76
  %60 = load i8*, i8** %__s156, align 8, !tbaa !1
  %arrayidx80 = getelementptr inbounds i8, i8* %60, i64 2
  %61 = load i8, i8* %arrayidx80, align 1, !tbaa !70
  %conv81 = zext i8 %61 to i32
  %62 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 2), align 1, !tbaa !70
  %conv82 = zext i8 %62 to i32
  %sub83 = sub nsw i32 %conv81, %conv82
  store i32 %sub83, i32* %__result59, align 4, !tbaa !5
  %63 = load i64, i64* %__s2_len48, align 8, !tbaa !59
  %cmp84 = icmp ugt i64 %63, 2
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.94

land.lhs.true.86:                                 ; preds = %if.then.79
  %64 = load i32, i32* %__result59, align 4, !tbaa !5
  %cmp87 = icmp eq i32 %64, 0
  br i1 %cmp87, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %land.lhs.true.86
  %65 = load i8*, i8** %__s156, align 8, !tbaa !1
  %arrayidx90 = getelementptr inbounds i8, i8* %65, i64 3
  %66 = load i8, i8* %arrayidx90, align 1, !tbaa !70
  %conv91 = zext i8 %66 to i32
  %67 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 3), align 1, !tbaa !70
  %conv92 = zext i8 %67 to i32
  %sub93 = sub nsw i32 %conv91, %conv92
  store i32 %sub93, i32* %__result59, align 4, !tbaa !5
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.89, %land.lhs.true.86, %if.then.79
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %land.lhs.true.76, %if.then.69
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %land.lhs.true.66, %cond.true.54
  %68 = load i32, i32* %__result59, align 4, !tbaa !5
  store i32 %68, i32* %tmp97, !tbaa !5
  %69 = bitcast i32* %__result59 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %69) #2
  %70 = bitcast i8** %__s156 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %70) #2
  %71 = load i32, i32* %tmp97, !tbaa !5
  br label %cond.end.101

cond.false.98:                                    ; preds = %land.lhs.true.50, %lor.lhs.false
  %72 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname99 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %72, i32 0, i32 2
  %73 = load i8*, i8** %dname99, align 8, !tbaa !135
  %call100 = call i32 @strcmp(i8* %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #7
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.false.98, %if.end.96
  %cond102 = phi i32 [ %71, %if.end.96 ], [ %call100, %cond.false.98 ]
  store i32 %cond102, i32* %tmp49, !tbaa !5
  %74 = bitcast i64* %__s2_len48 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %74) #2
  %75 = bitcast i64* %__s1_len46 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #2
  %76 = load i32, i32* %tmp49, !tbaa !5
  %cmp103 = icmp eq i32 %76, 0
  br i1 %cmp103, label %if.then.105, label %if.else

if.then.105:                                      ; preds = %cond.end.101, %cond.end
  %77 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call106 = call i32 @lputs(%struct.stream_s* %77, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.252, i32 0, i32 0)) #6
  br label %if.end.108

if.else:                                          ; preds = %cond.end.101
  %78 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call107 = call i32 @lputs(%struct.stream_s* %78, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.253, i32 0, i32 0)) #6
  br label %if.end.108

if.end.108:                                       ; preds = %if.else, %if.then.105
  br label %if.end.111

if.else.109:                                      ; preds = %if.then
  %79 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call110 = call i32 @lputs(%struct.stream_s* %79, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.254, i32 0, i32 0)) #6
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.109, %if.end.108
  br label %if.end.114

if.else.112:                                      ; preds = %entry
  %80 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call113 = call i32 @lputs(%struct.stream_s* %80, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.254, i32 0, i32 0)) #6
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.112, %if.end.111
  %81 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %81) #2
  %82 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %82) #2
  ret void
}

declare i32 @gdev_vector_update_clip_path(%struct.gx_device_vector_s*, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_update_log_op(%struct.gx_device_vector_s*, i32) #1

declare i32 @gx_default_fill_mask(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_begin_image(%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_procs_s*, %struct.gdev_vector_image_enum_s*) #1

declare i32 @gs_color_space_get_index(%struct.gs_color_space_s*) #1

declare i32 @gs_color_space_num_components(%struct.gs_color_space_s*) #1

declare i32 @gx_default_begin_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #1

declare i32 @gs_matrix_invert(%struct.gs_matrix_s*, %struct.gs_matrix_s*) #1

declare i32 @gs_matrix_multiply(%struct.gs_matrix_s*, %struct.gs_matrix_s*, %struct.gs_matrix_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @escv_image_plane_data(%struct.gx_image_enum_common_s* %info, %struct.gx_image_plane_s* %planes, i32 %height, i32* %rows_used) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.gx_image_enum_common_s*, align 8
  %planes.addr = alloca %struct.gx_image_plane_s*, align 8
  %height.addr = alloca i32, align 4
  %rows_used.addr = alloca i32*, align 8
  %dev = alloca %struct.gx_device_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %pie = alloca %struct.gdev_vector_image_enum_s*, align 8
  %y = alloca i32, align 4
  %plane = alloca i32, align 4
  %width_bytes = alloca i32, align 4
  %tbyte = alloca i32, align 4
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp58 = alloca i32, align 4
  %__s1_len65 = alloca i64, align 8
  %__s2_len67 = alloca i64, align 8
  %tmp68 = alloca i32, align 4
  %__s175 = alloca i8*, align 8
  %__result78 = alloca i32, align 4
  %tmp116 = alloca i32, align 4
  %yy = alloca float, align 4
  %sy163 = alloca float, align 4
  %bit = alloca i32, align 4
  %w257 = alloca i32, align 4
  %p = alloca i8*, align 8
  %d = alloca i8*, align 8
  %c = alloca i8, align 1
  %t = alloca i32, align 4
  %__s1_len414 = alloca i64, align 8
  %__s2_len416 = alloca i64, align 8
  %tmp417 = alloca i32, align 4
  %__s1424 = alloca i8*, align 8
  %__result427 = alloca i32, align 4
  %tmp465 = alloca i32, align 4
  %__s1_len474 = alloca i64, align 8
  %__s2_len476 = alloca i64, align 8
  %tmp477 = alloca i32, align 4
  %__s1484 = alloca i8*, align 8
  %__result487 = alloca i32, align 4
  %tmp525 = alloca i32, align 4
  store %struct.gx_image_enum_common_s* %info, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  store %struct.gx_image_plane_s* %planes, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  store i32 %height, i32* %height.addr, align 4, !tbaa !5
  store i32* %rows_used, i32** %rows_used.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %dev1 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %1, i32 0, i32 2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev1, align 8, !tbaa !183
  store %struct.gx_device_s* %2, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %5, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_s* %7 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %8, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %9 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %11 = bitcast %struct.gx_image_enum_common_s* %10 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %11, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %12 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast i32* %plane to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %tbyte to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %17 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %default_info = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %17, i32 0, i32 9
  %18 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %default_info, align 8, !tbaa !185
  %tobool = icmp ne %struct.gx_image_enum_common_s* %18, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %19 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %default_info2 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %19, i32 0, i32 9
  %20 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %default_info2, align 8, !tbaa !185
  %21 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %22 = load i32, i32* %height.addr, align 4, !tbaa !5
  %call = call i32 @gx_image_plane_data(%struct.gx_image_enum_common_s* %20, %struct.gx_image_plane_s* %21, i32 %22) #6
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %23 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bbox_info = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %23, i32 0, i32 10
  %24 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %bbox_info, align 8, !tbaa !186
  %25 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %26 = load i32, i32* %height.addr, align 4, !tbaa !5
  %call3 = call i32 @gx_image_plane_data(%struct.gx_image_enum_common_s* %24, %struct.gx_image_plane_s* %25, i32 %26) #6
  %27 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp = icmp eq i32 %27, 260
  br i1 %cmp, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 1, i32* %height.addr, align 4, !tbaa !5
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %28 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %28, i32 0, i32 11
  %29 = load i32, i32* %width, align 4, !tbaa !132
  %30 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %30, i32 0, i32 13
  %31 = load i32, i32* %bits_per_pixel, align 4, !tbaa !131
  %mul = mul nsw i32 %29, %31
  %32 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ncomp = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %32, i32 0, i32 85
  %33 = load i32, i32* %ncomp, align 4, !tbaa !130
  %div = sdiv i32 %mul, %33
  %add = add nsw i32 %div, 7
  %div6 = sdiv i32 %add, 8
  %34 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %ncomp7 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %34, i32 0, i32 85
  %35 = load i32, i32* %ncomp7, align 4, !tbaa !130
  %mul8 = mul nsw i32 %div6, %35
  store i32 %mul8, i32* %width_bytes, align 4, !tbaa !5
  %36 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %37 = load i32, i32* %height.addr, align 4, !tbaa !5
  %mul9 = mul nsw i32 %36, %37
  store i32 %mul9, i32* %tbyte, align 4, !tbaa !5
  %38 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %38, i32 0, i32 3
  %39 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !66
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %39, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %40 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !67
  %41 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory10 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %41, i32 0, i32 3
  %42 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory10, align 8, !tbaa !66
  %43 = load i32, i32* %tbyte, align 4, !tbaa !5
  %call11 = call i8* %40(%struct.gs_memory_s* %42, i32 %43, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  store i8* %call11, i8** %buf, align 8, !tbaa !1
  %44 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %44, i32 0, i32 98
  %45 = load i64, i64* %reverse_y, align 8, !tbaa !121
  %tobool12 = icmp ne i64 %45, 0
  br i1 %tobool12, label %if.then.13, label %if.end.245

if.then.13:                                       ; preds = %if.end.5
  %46 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %h = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %46, i32 0, i32 103
  %47 = load i32, i32* %h, align 4, !tbaa !125
  %48 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp14 = icmp eq i32 %47, %48
  br i1 %cmp14, label %if.then.15, label %if.else.160

if.then.15:                                       ; preds = %if.then.13
  %49 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %49, i32 0, i32 67
  %50 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp16 = icmp eq i32 0, %50
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.15
  %51 = load i32, i32* %tbyte, align 4, !tbaa !5
  %cmp18 = icmp eq i32 %51, 1
  br i1 %cmp18, label %if.then.19, label %if.end.134

if.then.19:                                       ; preds = %if.then.17
  %52 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %52) #2
  %53 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %53) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.11 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.19
  %call20 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #8
  store i64 %call20, i64* %__s2_len, align 8, !tbaa !59
  %54 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp21 = icmp ult i64 %54, 4
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %55 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %55) #2
  %56 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %56, i32 0, i32 2
  %57 = load i8*, i8** %dname, align 8, !tbaa !135
  store i8* %57, i8** %__s1, align 8, !tbaa !1
  %58 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %58) #2
  %59 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx, align 1, !tbaa !70
  %conv = zext i8 %60 to i32
  %61 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1, !tbaa !70
  %conv24 = zext i8 %61 to i32
  %sub = sub nsw i32 %conv, %conv24
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %62 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp25 = icmp ugt i64 %62, 0
  br i1 %cmp25, label %land.lhs.true.27, label %if.end.57

land.lhs.true.27:                                 ; preds = %cond.true
  %63 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp28 = icmp eq i32 %63, 0
  br i1 %cmp28, label %if.then.30, label %if.end.57

if.then.30:                                       ; preds = %land.lhs.true.27
  %64 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx31 = getelementptr inbounds i8, i8* %64, i64 1
  %65 = load i8, i8* %arrayidx31, align 1, !tbaa !70
  %conv32 = zext i8 %65 to i32
  %66 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1), align 1, !tbaa !70
  %conv33 = zext i8 %66 to i32
  %sub34 = sub nsw i32 %conv32, %conv33
  store i32 %sub34, i32* %__result, align 4, !tbaa !5
  %67 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp35 = icmp ugt i64 %67, 1
  br i1 %cmp35, label %land.lhs.true.37, label %if.end.56

land.lhs.true.37:                                 ; preds = %if.then.30
  %68 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp38 = icmp eq i32 %68, 0
  br i1 %cmp38, label %if.then.40, label %if.end.56

if.then.40:                                       ; preds = %land.lhs.true.37
  %69 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx41 = getelementptr inbounds i8, i8* %69, i64 2
  %70 = load i8, i8* %arrayidx41, align 1, !tbaa !70
  %conv42 = zext i8 %70 to i32
  %71 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 2), align 1, !tbaa !70
  %conv43 = zext i8 %71 to i32
  %sub44 = sub nsw i32 %conv42, %conv43
  store i32 %sub44, i32* %__result, align 4, !tbaa !5
  %72 = load i64, i64* %__s2_len, align 8, !tbaa !59
  %cmp45 = icmp ugt i64 %72, 2
  br i1 %cmp45, label %land.lhs.true.47, label %if.end.55

land.lhs.true.47:                                 ; preds = %if.then.40
  %73 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp48 = icmp eq i32 %73, 0
  br i1 %cmp48, label %if.then.50, label %if.end.55

if.then.50:                                       ; preds = %land.lhs.true.47
  %74 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx51 = getelementptr inbounds i8, i8* %74, i64 3
  %75 = load i8, i8* %arrayidx51, align 1, !tbaa !70
  %conv52 = zext i8 %75 to i32
  %76 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 3), align 1, !tbaa !70
  %conv53 = zext i8 %76 to i32
  %sub54 = sub nsw i32 %conv52, %conv53
  store i32 %sub54, i32* %__result, align 4, !tbaa !5
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.50, %land.lhs.true.47, %if.then.40
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %land.lhs.true.37, %if.then.30
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %land.lhs.true.27, %cond.true
  %77 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %77, i32* %tmp58, !tbaa !5
  %78 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %78) #2
  %79 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #2
  %80 = load i32, i32* %tmp58, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.19
  %81 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname59 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %81, i32 0, i32 2
  %82 = load i8*, i8** %dname59, align 8, !tbaa !135
  %call60 = call i32 @strcmp(i8* %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.57
  %cond = phi i32 [ %80, %if.end.57 ], [ %call60, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %83 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %83) #2
  %84 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %84) #2
  %85 = load i32, i32* %tmp, !tbaa !5
  %cmp61 = icmp ne i32 %85, 0
  br i1 %cmp61, label %land.lhs.true.63, label %if.end.133

land.lhs.true.63:                                 ; preds = %cond.end
  %86 = bitcast i64* %__s1_len65 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %86) #2
  %87 = bitcast i64* %__s2_len67 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %87) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.31 to i64)), i64 1), label %land.lhs.true.69, label %cond.false.117

land.lhs.true.69:                                 ; preds = %land.lhs.true.63
  %call70 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #8
  store i64 %call70, i64* %__s2_len67, align 8, !tbaa !59
  %88 = load i64, i64* %__s2_len67, align 8, !tbaa !59
  %cmp71 = icmp ult i64 %88, 4
  br i1 %cmp71, label %cond.true.73, label %cond.false.117

cond.true.73:                                     ; preds = %land.lhs.true.69
  %89 = bitcast i8** %__s175 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %89) #2
  %90 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname76 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %90, i32 0, i32 2
  %91 = load i8*, i8** %dname76, align 8, !tbaa !135
  store i8* %91, i8** %__s175, align 8, !tbaa !1
  %92 = bitcast i32* %__result78 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %92) #2
  %93 = load i8*, i8** %__s175, align 8, !tbaa !1
  %arrayidx79 = getelementptr inbounds i8, i8* %93, i64 0
  %94 = load i8, i8* %arrayidx79, align 1, !tbaa !70
  %conv80 = zext i8 %94 to i32
  %95 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), align 1, !tbaa !70
  %conv81 = zext i8 %95 to i32
  %sub82 = sub nsw i32 %conv80, %conv81
  store i32 %sub82, i32* %__result78, align 4, !tbaa !5
  %96 = load i64, i64* %__s2_len67, align 8, !tbaa !59
  %cmp83 = icmp ugt i64 %96, 0
  br i1 %cmp83, label %land.lhs.true.85, label %if.end.115

land.lhs.true.85:                                 ; preds = %cond.true.73
  %97 = load i32, i32* %__result78, align 4, !tbaa !5
  %cmp86 = icmp eq i32 %97, 0
  br i1 %cmp86, label %if.then.88, label %if.end.115

if.then.88:                                       ; preds = %land.lhs.true.85
  %98 = load i8*, i8** %__s175, align 8, !tbaa !1
  %arrayidx89 = getelementptr inbounds i8, i8* %98, i64 1
  %99 = load i8, i8* %arrayidx89, align 1, !tbaa !70
  %conv90 = zext i8 %99 to i32
  %100 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1), align 1, !tbaa !70
  %conv91 = zext i8 %100 to i32
  %sub92 = sub nsw i32 %conv90, %conv91
  store i32 %sub92, i32* %__result78, align 4, !tbaa !5
  %101 = load i64, i64* %__s2_len67, align 8, !tbaa !59
  %cmp93 = icmp ugt i64 %101, 1
  br i1 %cmp93, label %land.lhs.true.95, label %if.end.114

land.lhs.true.95:                                 ; preds = %if.then.88
  %102 = load i32, i32* %__result78, align 4, !tbaa !5
  %cmp96 = icmp eq i32 %102, 0
  br i1 %cmp96, label %if.then.98, label %if.end.114

if.then.98:                                       ; preds = %land.lhs.true.95
  %103 = load i8*, i8** %__s175, align 8, !tbaa !1
  %arrayidx99 = getelementptr inbounds i8, i8* %103, i64 2
  %104 = load i8, i8* %arrayidx99, align 1, !tbaa !70
  %conv100 = zext i8 %104 to i32
  %105 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 2), align 1, !tbaa !70
  %conv101 = zext i8 %105 to i32
  %sub102 = sub nsw i32 %conv100, %conv101
  store i32 %sub102, i32* %__result78, align 4, !tbaa !5
  %106 = load i64, i64* %__s2_len67, align 8, !tbaa !59
  %cmp103 = icmp ugt i64 %106, 2
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.113

land.lhs.true.105:                                ; preds = %if.then.98
  %107 = load i32, i32* %__result78, align 4, !tbaa !5
  %cmp106 = icmp eq i32 %107, 0
  br i1 %cmp106, label %if.then.108, label %if.end.113

if.then.108:                                      ; preds = %land.lhs.true.105
  %108 = load i8*, i8** %__s175, align 8, !tbaa !1
  %arrayidx109 = getelementptr inbounds i8, i8* %108, i64 3
  %109 = load i8, i8* %arrayidx109, align 1, !tbaa !70
  %conv110 = zext i8 %109 to i32
  %110 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 3), align 1, !tbaa !70
  %conv111 = zext i8 %110 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %__result78, align 4, !tbaa !5
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.108, %land.lhs.true.105, %if.then.98
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %land.lhs.true.95, %if.then.88
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %land.lhs.true.85, %cond.true.73
  %111 = load i32, i32* %__result78, align 4, !tbaa !5
  store i32 %111, i32* %tmp116, !tbaa !5
  %112 = bitcast i32* %__result78 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #2
  %113 = bitcast i8** %__s175 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = load i32, i32* %tmp116, !tbaa !5
  br label %cond.end.120

cond.false.117:                                   ; preds = %land.lhs.true.69, %land.lhs.true.63
  %115 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname118 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %115, i32 0, i32 2
  %116 = load i8*, i8** %dname118, align 8, !tbaa !135
  %call119 = call i32 @strcmp(i8* %116, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #7
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.117, %if.end.115
  %cond121 = phi i32 [ %114, %if.end.115 ], [ %call119, %cond.false.117 ]
  store i32 %cond121, i32* %tmp68, !tbaa !5
  %117 = bitcast i64* %__s2_len67 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %117) #2
  %118 = bitcast i64* %__s1_len65 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %118) #2
  %119 = load i32, i32* %tmp68, !tbaa !5
  %cmp122 = icmp ne i32 %119, 0
  br i1 %cmp122, label %if.then.124, label %if.end.133

if.then.124:                                      ; preds = %cond.end.120
  %120 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %120, i32 0, i32 105
  %121 = load float, float* %sx, align 4, !tbaa !123
  %div125 = fdiv float %121, 2.048000e+03
  %122 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %122, i32 0, i32 102
  %123 = load i32, i32* %w, align 4, !tbaa !126
  %conv126 = sitofp i32 %123 to float
  %add127 = fadd float %conv126, %div125
  %conv128 = fptosi float %add127 to i32
  store i32 %conv128, i32* %w, align 4, !tbaa !126
  %124 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %124, i32 0, i32 106
  %125 = load float, float* %sy, align 4, !tbaa !124
  %div129 = fdiv float %125, 2.048000e+03
  %126 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv130 = sitofp i32 %126 to float
  %add131 = fadd float %conv130, %div129
  %conv132 = fptosi float %add131 to i32
  store i32 %conv132, i32* %height.addr, align 4, !tbaa !5
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.124, %cond.end.120, %cond.end
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.then.17
  br label %if.end.150

if.else:                                          ; preds = %if.then.15
  %127 = load i32, i32* %tbyte, align 4, !tbaa !5
  %cmp135 = icmp eq i32 %127, 1
  br i1 %cmp135, label %if.then.137, label %if.end.149

if.then.137:                                      ; preds = %if.else
  %128 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx138 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %128, i32 0, i32 105
  %129 = load float, float* %sx138, align 4, !tbaa !123
  %div139 = fdiv float %129, 2.048000e+03
  %130 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w140 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %130, i32 0, i32 102
  %131 = load i32, i32* %w140, align 4, !tbaa !126
  %conv141 = sitofp i32 %131 to float
  %add142 = fadd float %conv141, %div139
  %conv143 = fptosi float %add142 to i32
  store i32 %conv143, i32* %w140, align 4, !tbaa !126
  %132 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy144 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %132, i32 0, i32 106
  %133 = load float, float* %sy144, align 4, !tbaa !124
  %div145 = fdiv float %133, 2.048000e+03
  %134 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv146 = sitofp i32 %134 to float
  %add147 = fadd float %conv146, %div145
  %conv148 = fptosi float %add147 to i32
  store i32 %conv148, i32* %height.addr, align 4, !tbaa !5
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.137, %if.else
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %if.end.134
  %135 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %136 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel151 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %136, i32 0, i32 13
  %137 = load i32, i32* %bits_per_pixel151, align 4, !tbaa !131
  %138 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %138, i32 0, i32 99
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat, i32 0, i32 4
  %139 = load float, float* %tx, align 4, !tbaa !187
  %conv152 = fptosi float %139 to i32
  %140 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat153 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %140, i32 0, i32 99
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat153, i32 0, i32 5
  %141 = load float, float* %ty, align 4, !tbaa !188
  %conv154 = fptosi float %141 to i32
  %142 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w155 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %142, i32 0, i32 102
  %143 = load i32, i32* %w155, align 4, !tbaa !126
  %144 = load i32, i32* %height.addr, align 4, !tbaa !5
  %145 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx156 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %145, i32 0, i32 105
  %146 = load float, float* %sx156, align 4, !tbaa !123
  %conv157 = fptosi float %146 to i32
  %147 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy158 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %147, i32 0, i32 106
  %148 = load float, float* %sy158, align 4, !tbaa !124
  %conv159 = fptosi float %148 to i32
  %149 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %roll = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %149, i32 0, i32 104
  %150 = load i32, i32* %roll, align 4, !tbaa !120
  call void @escv_write_begin(%struct.gx_device_s* %135, i32 %137, i32 %conv152, i32 %conv154, i32 %143, i32 %144, i32 %conv157, i32 %conv159, i32 %150) #6
  br label %if.end.244

if.else.160:                                      ; preds = %if.then.13
  %151 = bitcast float* %yy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %151) #2
  %152 = bitcast float* %sy163 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %152) #2
  %153 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %h164 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %153, i32 0, i32 103
  %154 = load i32, i32* %h164, align 4, !tbaa !125
  %conv165 = sitofp i32 %154 to float
  %155 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat166 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %155, i32 0, i32 99
  %yy167 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat166, i32 0, i32 3
  %156 = load float, float* %yy167, align 4, !tbaa !189
  %mul168 = fmul float %conv165, %156
  %157 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dd = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %157, i32 0, i32 107
  %158 = load i64, i64* %dd, align 8, !tbaa !127
  %conv169 = sitofp i64 %158 to float
  %159 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat170 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %159, i32 0, i32 99
  %yy171 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat170, i32 0, i32 3
  %160 = load float, float* %yy171, align 4, !tbaa !189
  %mul172 = fmul float %conv169, %160
  %sub173 = fsub float %mul168, %mul172
  %161 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv174 = sitofp i32 %161 to float
  %162 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat175 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %162, i32 0, i32 99
  %yy176 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat175, i32 0, i32 3
  %163 = load float, float* %yy176, align 4, !tbaa !189
  %mul177 = fmul float %conv174, %163
  %sub178 = fsub float %sub173, %mul177
  store float %sub178, float* %yy, align 4, !tbaa !51
  %164 = load float, float* %yy, align 4, !tbaa !51
  %cmp179 = fcmp oeq float %164, 0.000000e+00
  br i1 %cmp179, label %if.then.181, label %if.end.197

if.then.181:                                      ; preds = %if.else.160
  %165 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %h182 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %165, i32 0, i32 103
  %166 = load i32, i32* %h182, align 4, !tbaa !125
  %conv183 = sitofp i32 %166 to float
  %167 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat184 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %167, i32 0, i32 99
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat184, i32 0, i32 2
  %168 = load float, float* %yx, align 4, !tbaa !190
  %mul185 = fmul float %conv183, %168
  %169 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dd186 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %169, i32 0, i32 107
  %170 = load i64, i64* %dd186, align 8, !tbaa !127
  %conv187 = sitofp i64 %170 to float
  %171 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat188 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %171, i32 0, i32 99
  %yx189 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat188, i32 0, i32 2
  %172 = load float, float* %yx189, align 4, !tbaa !190
  %mul190 = fmul float %conv187, %172
  %sub191 = fsub float %mul185, %mul190
  %173 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv192 = sitofp i32 %173 to float
  %174 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat193 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %174, i32 0, i32 99
  %yx194 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat193, i32 0, i32 2
  %175 = load float, float* %yx194, align 4, !tbaa !190
  %mul195 = fmul float %conv192, %175
  %sub196 = fsub float %sub191, %mul195
  store float %sub196, float* %yy, align 4, !tbaa !51
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.181, %if.else.160
  %176 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %by = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %176, i32 0, i32 101
  %177 = load i32, i32* %by, align 4, !tbaa !129
  %tobool198 = icmp ne i32 %177, 0
  br i1 %tobool198, label %if.then.199, label %if.else.210

if.then.199:                                      ; preds = %if.end.197
  %178 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat200 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %178, i32 0, i32 99
  %ty201 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat200, i32 0, i32 5
  %179 = load float, float* %ty201, align 4, !tbaa !188
  %conv202 = fptosi float %179 to i32
  %180 = load float, float* %yy, align 4, !tbaa !51
  %conv203 = fptosi float %180 to i32
  %sub204 = sub nsw i32 %conv202, %conv203
  %conv205 = sitofp i32 %sub204 to float
  store float %conv205, float* %sy163, align 4, !tbaa !51
  %181 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %by206 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %181, i32 0, i32 101
  %182 = load i32, i32* %by206, align 4, !tbaa !129
  %183 = load float, float* %sy163, align 4, !tbaa !51
  %conv207 = fptosi float %183 to i32
  %sub208 = sub nsw i32 %182, %conv207
  %conv209 = sitofp i32 %sub208 to float
  store float %conv209, float* %sy163, align 4, !tbaa !51
  br label %if.end.218

if.else.210:                                      ; preds = %if.end.197
  %184 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv211 = sitofp i32 %184 to float
  %185 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat212 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %185, i32 0, i32 99
  %yy213 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat212, i32 0, i32 3
  %186 = load float, float* %yy213, align 4, !tbaa !189
  %mul214 = fmul float %conv211, %186
  %conv215 = fpext float %mul214 to double
  %add216 = fadd double %conv215, 5.000000e-01
  %conv217 = fptrunc double %add216 to float
  store float %conv217, float* %sy163, align 4, !tbaa !51
  br label %if.end.218

if.end.218:                                       ; preds = %if.else.210, %if.then.199
  %187 = load float, float* %sy163, align 4, !tbaa !51
  %cmp219 = fcmp olt float %187, 0.000000e+00
  br i1 %cmp219, label %if.then.221, label %if.end.223

if.then.221:                                      ; preds = %if.end.218
  %188 = load float, float* %sy163, align 4, !tbaa !51
  %sub222 = fsub float -0.000000e+00, %188
  store float %sub222, float* %sy163, align 4, !tbaa !51
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.221, %if.end.218
  %189 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %190 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel224 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %190, i32 0, i32 13
  %191 = load i32, i32* %bits_per_pixel224, align 4, !tbaa !131
  %192 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat225 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %192, i32 0, i32 99
  %tx226 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat225, i32 0, i32 4
  %193 = load float, float* %tx226, align 4, !tbaa !187
  %conv227 = fptosi float %193 to i32
  %194 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat228 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %194, i32 0, i32 99
  %ty229 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat228, i32 0, i32 5
  %195 = load float, float* %ty229, align 4, !tbaa !188
  %conv230 = fptosi float %195 to i32
  %196 = load float, float* %yy, align 4, !tbaa !51
  %conv231 = fptosi float %196 to i32
  %sub232 = sub nsw i32 %conv230, %conv231
  %197 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w233 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %197, i32 0, i32 102
  %198 = load i32, i32* %w233, align 4, !tbaa !126
  %199 = load i32, i32* %height.addr, align 4, !tbaa !5
  %200 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx234 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %200, i32 0, i32 105
  %201 = load float, float* %sx234, align 4, !tbaa !123
  %conv235 = fptosi float %201 to i32
  %202 = load float, float* %sy163, align 4, !tbaa !51
  %conv236 = fptosi float %202 to i32
  %203 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %roll237 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %203, i32 0, i32 104
  %204 = load i32, i32* %roll237, align 4, !tbaa !120
  call void @escv_write_begin(%struct.gx_device_s* %189, i32 %191, i32 %conv227, i32 %sub232, i32 %198, i32 %199, i32 %conv235, i32 %conv236, i32 %204) #6
  %205 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %xmat238 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %205, i32 0, i32 99
  %ty239 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %xmat238, i32 0, i32 5
  %206 = load float, float* %ty239, align 4, !tbaa !188
  %conv240 = fptosi float %206 to i32
  %207 = load float, float* %yy, align 4, !tbaa !51
  %conv241 = fptosi float %207 to i32
  %sub242 = sub nsw i32 %conv240, %conv241
  %208 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %by243 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %208, i32 0, i32 101
  store i32 %sub242, i32* %by243, align 4, !tbaa !129
  %209 = bitcast float* %sy163 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %209) #2
  %210 = bitcast float* %yy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %210) #2
  br label %if.end.244

if.end.244:                                       ; preds = %if.end.223, %if.end.150
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %if.end.5
  %211 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv246 = sext i32 %211 to i64
  %212 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dd247 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %212, i32 0, i32 107
  %213 = load i64, i64* %dd247, align 8, !tbaa !127
  %add248 = add nsw i64 %213, %conv246
  store i64 %add248, i64* %dd247, align 8, !tbaa !127
  store i32 0, i32* %plane, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.399, %if.end.245
  %214 = load i32, i32* %plane, align 4, !tbaa !5
  %215 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %num_planes = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %215, i32 0, i32 6
  %216 = load i32, i32* %num_planes, align 4, !tbaa !191
  %cmp249 = icmp slt i32 %214, %216
  br i1 %cmp249, label %for.body, label %for.end.401

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4, !tbaa !5
  br label %for.cond.251

for.cond.251:                                     ; preds = %for.inc.396, %for.body
  %217 = load i32, i32* %y, align 4, !tbaa !5
  %218 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp252 = icmp slt i32 %217, %218
  br i1 %cmp252, label %for.body.254, label %for.end.398

for.body.254:                                     ; preds = %for.cond.251
  %219 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %219) #2
  %220 = bitcast i32* %w257 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %220) #2
  %221 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %221) #2
  %222 = bitcast i8** %d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %222) #2
  call void @llvm.lifetime.start(i64 1, i8* %c) #2
  %223 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom = sext i32 %223 to i64
  %224 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx261 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %224, i64 %idxprom
  %data = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx261, i32 0, i32 0
  %225 = load i8*, i8** %data, align 8, !tbaa !192
  %226 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom262 = sext i32 %226 to i64
  %227 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx263 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %227, i64 %idxprom262
  %data_x = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx263, i32 0, i32 1
  %228 = load i32, i32* %data_x, align 4, !tbaa !194
  %229 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel264 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %229, i32 0, i32 13
  %230 = load i32, i32* %bits_per_pixel264, align 4, !tbaa !131
  %mul265 = mul nsw i32 %228, %230
  %shr = ashr i32 %mul265, 3
  %idx.ext = sext i32 %shr to i64
  %add.ptr = getelementptr inbounds i8, i8* %225, i64 %idx.ext
  %231 = load i32, i32* %y, align 4, !tbaa !5
  %232 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom266 = sext i32 %232 to i64
  %233 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx267 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %233, i64 %idxprom266
  %raster = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx267, i32 0, i32 2
  %234 = load i32, i32* %raster, align 4, !tbaa !195
  %mul268 = mul i32 %231, %234
  %idx.ext269 = zext i32 %mul268 to i64
  %add.ptr270 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext269
  store i8* %add.ptr270, i8** %p, align 8, !tbaa !1
  %235 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y271 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %235, i32 0, i32 98
  %236 = load i64, i64* %reverse_y271, align 8, !tbaa !121
  %tobool272 = icmp ne i64 %236, 0
  br i1 %tobool272, label %if.then.273, label %if.else.305

if.then.273:                                      ; preds = %for.body.254
  %237 = load i8*, i8** %buf, align 8, !tbaa !1
  %238 = load i32, i32* %height.addr, align 4, !tbaa !5
  %239 = load i32, i32* %y, align 4, !tbaa !5
  %sub274 = sub nsw i32 %238, %239
  %240 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul275 = mul nsw i32 %sub274, %240
  %idx.ext276 = sext i32 %mul275 to i64
  %add.ptr277 = getelementptr inbounds i8, i8* %237, i64 %idx.ext276
  store i8* %add.ptr277, i8** %d, align 8, !tbaa !1
  %241 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %241, i32 0, i32 97
  %242 = load i64, i64* %reverse_x, align 8, !tbaa !122
  %tobool278 = icmp ne i64 %242, 0
  br i1 %tobool278, label %if.end.304, label %if.then.279

if.then.279:                                      ; preds = %if.then.273
  %243 = load i8*, i8** %buf, align 8, !tbaa !1
  %244 = load i32, i32* %height.addr, align 4, !tbaa !5
  %245 = load i32, i32* %y, align 4, !tbaa !5
  %sub280 = sub nsw i32 %244, %245
  %sub281 = sub nsw i32 %sub280, 1
  %246 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul282 = mul nsw i32 %sub281, %246
  %idx.ext283 = sext i32 %mul282 to i64
  %add.ptr284 = getelementptr inbounds i8, i8* %243, i64 %idx.ext283
  %247 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom285 = sext i32 %247 to i64
  %248 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx286 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %248, i64 %idxprom285
  %data287 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx286, i32 0, i32 0
  %249 = load i8*, i8** %data287, align 8, !tbaa !192
  %250 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom288 = sext i32 %250 to i64
  %251 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx289 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %251, i64 %idxprom288
  %data_x290 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx289, i32 0, i32 1
  %252 = load i32, i32* %data_x290, align 4, !tbaa !194
  %253 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel291 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %253, i32 0, i32 13
  %254 = load i32, i32* %bits_per_pixel291, align 4, !tbaa !131
  %mul292 = mul nsw i32 %252, %254
  %shr293 = ashr i32 %mul292, 3
  %idx.ext294 = sext i32 %shr293 to i64
  %add.ptr295 = getelementptr inbounds i8, i8* %249, i64 %idx.ext294
  %255 = load i32, i32* %y, align 4, !tbaa !5
  %256 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom296 = sext i32 %256 to i64
  %257 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx297 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %257, i64 %idxprom296
  %raster298 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx297, i32 0, i32 2
  %258 = load i32, i32* %raster298, align 4, !tbaa !195
  %mul299 = mul i32 %255, %258
  %idx.ext300 = zext i32 %mul299 to i64
  %add.ptr301 = getelementptr inbounds i8, i8* %add.ptr295, i64 %idx.ext300
  %259 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %conv302 = sext i32 %259 to i64
  %call303 = call i8* @memcpy(i8* %add.ptr284, i8* %add.ptr301, i64 %conv302) #7
  br label %if.end.304

if.end.304:                                       ; preds = %if.then.279, %if.then.273
  br label %if.end.336

if.else.305:                                      ; preds = %for.body.254
  %260 = load i8*, i8** %buf, align 8, !tbaa !1
  %261 = load i32, i32* %y, align 4, !tbaa !5
  %add306 = add nsw i32 %261, 1
  %262 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul307 = mul nsw i32 %add306, %262
  %idx.ext308 = sext i32 %mul307 to i64
  %add.ptr309 = getelementptr inbounds i8, i8* %260, i64 %idx.ext308
  store i8* %add.ptr309, i8** %d, align 8, !tbaa !1
  %263 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x310 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %263, i32 0, i32 97
  %264 = load i64, i64* %reverse_x310, align 8, !tbaa !122
  %tobool311 = icmp ne i64 %264, 0
  br i1 %tobool311, label %if.end.335, label %if.then.312

if.then.312:                                      ; preds = %if.else.305
  %265 = load i8*, i8** %buf, align 8, !tbaa !1
  %266 = load i32, i32* %y, align 4, !tbaa !5
  %267 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %mul313 = mul nsw i32 %266, %267
  %idx.ext314 = sext i32 %mul313 to i64
  %add.ptr315 = getelementptr inbounds i8, i8* %265, i64 %idx.ext314
  %268 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom316 = sext i32 %268 to i64
  %269 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx317 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %269, i64 %idxprom316
  %data318 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx317, i32 0, i32 0
  %270 = load i8*, i8** %data318, align 8, !tbaa !192
  %271 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom319 = sext i32 %271 to i64
  %272 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx320 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %272, i64 %idxprom319
  %data_x321 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx320, i32 0, i32 1
  %273 = load i32, i32* %data_x321, align 4, !tbaa !194
  %274 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel322 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %274, i32 0, i32 13
  %275 = load i32, i32* %bits_per_pixel322, align 4, !tbaa !131
  %mul323 = mul nsw i32 %273, %275
  %shr324 = ashr i32 %mul323, 3
  %idx.ext325 = sext i32 %shr324 to i64
  %add.ptr326 = getelementptr inbounds i8, i8* %270, i64 %idx.ext325
  %276 = load i32, i32* %y, align 4, !tbaa !5
  %277 = load i32, i32* %plane, align 4, !tbaa !5
  %idxprom327 = sext i32 %277 to i64
  %278 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx328 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %278, i64 %idxprom327
  %raster329 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx328, i32 0, i32 2
  %279 = load i32, i32* %raster329, align 4, !tbaa !195
  %mul330 = mul i32 %276, %279
  %idx.ext331 = zext i32 %mul330 to i64
  %add.ptr332 = getelementptr inbounds i8, i8* %add.ptr326, i64 %idx.ext331
  %280 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %conv333 = sext i32 %280 to i64
  %call334 = call i8* @memcpy(i8* %add.ptr315, i8* %add.ptr332, i64 %conv333) #7
  br label %if.end.335

if.end.335:                                       ; preds = %if.then.312, %if.else.305
  br label %if.end.336

if.end.336:                                       ; preds = %if.end.335, %if.end.304
  %281 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x337 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %281, i32 0, i32 97
  %282 = load i64, i64* %reverse_x337, align 8, !tbaa !122
  %tobool338 = icmp ne i64 %282, 0
  br i1 %tobool338, label %if.then.339, label %if.end.395

if.then.339:                                      ; preds = %if.end.336
  %283 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel340 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %283, i32 0, i32 13
  %284 = load i32, i32* %bits_per_pixel340, align 4, !tbaa !131
  %cmp341 = icmp eq i32 %284, 1
  br i1 %cmp341, label %if.then.343, label %if.else.364

if.then.343:                                      ; preds = %if.then.339
  store i32 0, i32* %w257, align 4, !tbaa !5
  br label %for.cond.344

for.cond.344:                                     ; preds = %for.inc.361, %if.then.343
  %285 = load i32, i32* %w257, align 4, !tbaa !5
  %286 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %cmp345 = icmp slt i32 %285, %286
  br i1 %cmp345, label %for.body.347, label %for.end.363

for.body.347:                                     ; preds = %for.cond.344
  store i8 0, i8* %c, align 1, !tbaa !70
  store i32 0, i32* %bit, align 4, !tbaa !5
  br label %for.cond.348

for.cond.348:                                     ; preds = %for.inc, %for.body.347
  %287 = load i32, i32* %bit, align 4, !tbaa !5
  %cmp349 = icmp slt i32 %287, 8
  br i1 %cmp349, label %for.body.351, label %for.end

for.body.351:                                     ; preds = %for.cond.348
  %288 = load i8*, i8** %p, align 8, !tbaa !1
  %289 = load i8, i8* %288, align 1, !tbaa !70
  %conv352 = zext i8 %289 to i32
  %290 = load i32, i32* %bit, align 4, !tbaa !5
  %sub353 = sub nsw i32 7, %290
  %shl = shl i32 1, %sub353
  %and = and i32 %conv352, %shl
  %tobool354 = icmp ne i32 %and, 0
  br i1 %tobool354, label %if.then.355, label %if.end.359

if.then.355:                                      ; preds = %for.body.351
  %291 = load i32, i32* %bit, align 4, !tbaa !5
  %shl356 = shl i32 1, %291
  %292 = load i8, i8* %c, align 1, !tbaa !70
  %conv357 = zext i8 %292 to i32
  %or = or i32 %conv357, %shl356
  %conv358 = trunc i32 %or to i8
  store i8 %conv358, i8* %c, align 1, !tbaa !70
  br label %if.end.359

if.end.359:                                       ; preds = %if.then.355, %for.body.351
  br label %for.inc

for.inc:                                          ; preds = %if.end.359
  %293 = load i32, i32* %bit, align 4, !tbaa !5
  %inc = add nsw i32 %293, 1
  store i32 %inc, i32* %bit, align 4, !tbaa !5
  br label %for.cond.348

for.end:                                          ; preds = %for.cond.348
  %294 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %294, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !1
  %295 = load i8, i8* %c, align 1, !tbaa !70
  %296 = load i8*, i8** %d, align 8, !tbaa !1
  %incdec.ptr360 = getelementptr inbounds i8, i8* %296, i32 -1
  store i8* %incdec.ptr360, i8** %d, align 8, !tbaa !1
  store i8 %295, i8* %incdec.ptr360, align 1, !tbaa !70
  br label %for.inc.361

for.inc.361:                                      ; preds = %for.end
  %297 = load i32, i32* %w257, align 4, !tbaa !5
  %inc362 = add nsw i32 %297, 1
  store i32 %inc362, i32* %w257, align 4, !tbaa !5
  br label %for.cond.344

for.end.363:                                      ; preds = %for.cond.344
  br label %if.end.394

if.else.364:                                      ; preds = %if.then.339
  %298 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel365 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %298, i32 0, i32 13
  %299 = load i32, i32* %bits_per_pixel365, align 4, !tbaa !131
  %cmp366 = icmp eq i32 %299, 8
  br i1 %cmp366, label %if.then.368, label %if.else.378

if.then.368:                                      ; preds = %if.else.364
  store i32 0, i32* %w257, align 4, !tbaa !5
  br label %for.cond.369

for.cond.369:                                     ; preds = %for.inc.375, %if.then.368
  %300 = load i32, i32* %w257, align 4, !tbaa !5
  %301 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %cmp370 = icmp slt i32 %300, %301
  br i1 %cmp370, label %for.body.372, label %for.end.377

for.body.372:                                     ; preds = %for.cond.369
  %302 = load i8*, i8** %p, align 8, !tbaa !1
  %incdec.ptr373 = getelementptr inbounds i8, i8* %302, i32 1
  store i8* %incdec.ptr373, i8** %p, align 8, !tbaa !1
  %303 = load i8, i8* %302, align 1, !tbaa !70
  %304 = load i8*, i8** %d, align 8, !tbaa !1
  %incdec.ptr374 = getelementptr inbounds i8, i8* %304, i32 -1
  store i8* %incdec.ptr374, i8** %d, align 8, !tbaa !1
  store i8 %303, i8* %incdec.ptr374, align 1, !tbaa !70
  br label %for.inc.375

for.inc.375:                                      ; preds = %for.body.372
  %305 = load i32, i32* %w257, align 4, !tbaa !5
  %inc376 = add nsw i32 %305, 1
  store i32 %inc376, i32* %w257, align 4, !tbaa !5
  br label %for.cond.369

for.end.377:                                      ; preds = %for.cond.369
  br label %if.end.393

if.else.378:                                      ; preds = %if.else.364
  store i32 0, i32* %w257, align 4, !tbaa !5
  br label %for.cond.379

for.cond.379:                                     ; preds = %for.inc.390, %if.else.378
  %306 = load i32, i32* %w257, align 4, !tbaa !5
  %307 = load i32, i32* %width_bytes, align 4, !tbaa !5
  %div380 = sdiv i32 %307, 3
  %cmp381 = icmp slt i32 %306, %div380
  br i1 %cmp381, label %for.body.383, label %for.end.392

for.body.383:                                     ; preds = %for.cond.379
  %308 = load i8*, i8** %p, align 8, !tbaa !1
  %add.ptr384 = getelementptr inbounds i8, i8* %308, i64 2
  %309 = load i8, i8* %add.ptr384, align 1, !tbaa !70
  %310 = load i8*, i8** %d, align 8, !tbaa !1
  %incdec.ptr385 = getelementptr inbounds i8, i8* %310, i32 -1
  store i8* %incdec.ptr385, i8** %d, align 8, !tbaa !1
  store i8 %309, i8* %incdec.ptr385, align 1, !tbaa !70
  %311 = load i8*, i8** %p, align 8, !tbaa !1
  %add.ptr386 = getelementptr inbounds i8, i8* %311, i64 1
  %312 = load i8, i8* %add.ptr386, align 1, !tbaa !70
  %313 = load i8*, i8** %d, align 8, !tbaa !1
  %incdec.ptr387 = getelementptr inbounds i8, i8* %313, i32 -1
  store i8* %incdec.ptr387, i8** %d, align 8, !tbaa !1
  store i8 %312, i8* %incdec.ptr387, align 1, !tbaa !70
  %314 = load i8*, i8** %p, align 8, !tbaa !1
  %315 = load i8, i8* %314, align 1, !tbaa !70
  %316 = load i8*, i8** %d, align 8, !tbaa !1
  %incdec.ptr388 = getelementptr inbounds i8, i8* %316, i32 -1
  store i8* %incdec.ptr388, i8** %d, align 8, !tbaa !1
  store i8 %315, i8* %incdec.ptr388, align 1, !tbaa !70
  %317 = load i8*, i8** %p, align 8, !tbaa !1
  %add.ptr389 = getelementptr inbounds i8, i8* %317, i64 3
  store i8* %add.ptr389, i8** %p, align 8, !tbaa !1
  br label %for.inc.390

for.inc.390:                                      ; preds = %for.body.383
  %318 = load i32, i32* %w257, align 4, !tbaa !5
  %inc391 = add nsw i32 %318, 1
  store i32 %inc391, i32* %w257, align 4, !tbaa !5
  br label %for.cond.379

for.end.392:                                      ; preds = %for.cond.379
  br label %if.end.393

if.end.393:                                       ; preds = %for.end.392, %for.end.377
  br label %if.end.394

if.end.394:                                       ; preds = %if.end.393, %for.end.363
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.394, %if.end.336
  call void @llvm.lifetime.end(i64 1, i8* %c) #2
  %319 = bitcast i8** %d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %319) #2
  %320 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %320) #2
  %321 = bitcast i32* %w257 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %321) #2
  %322 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %322) #2
  br label %for.inc.396

for.inc.396:                                      ; preds = %if.end.395
  %323 = load i32, i32* %y, align 4, !tbaa !5
  %inc397 = add nsw i32 %323, 1
  store i32 %inc397, i32* %y, align 4, !tbaa !5
  br label %for.cond.251

for.end.398:                                      ; preds = %for.cond.251
  br label %for.inc.399

for.inc.399:                                      ; preds = %for.end.398
  %324 = load i32, i32* %plane, align 4, !tbaa !5
  %inc400 = add nsw i32 %324, 1
  store i32 %inc400, i32* %plane, align 4, !tbaa !5
  br label %for.cond

for.end.401:                                      ; preds = %for.cond
  %325 = load i32, i32* %tbyte, align 4, !tbaa !5
  %cmp402 = icmp eq i32 %325, 1
  br i1 %cmp402, label %if.then.404, label %if.end.636

if.then.404:                                      ; preds = %for.end.401
  %326 = bitcast i32* %t to i8*
  call void @llvm.lifetime.start(i64 4, i8* %326) #2
  %327 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode406 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %327, i32 0, i32 67
  %328 = load i32, i32* %colormode406, align 4, !tbaa !48
  %cmp407 = icmp eq i32 0, %328
  br i1 %cmp407, label %if.then.409, label %if.else.601

if.then.409:                                      ; preds = %if.then.404
  %329 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory410 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %329, i32 0, i32 3
  %330 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory410, align 8, !tbaa !66
  %procs411 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %330, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs411, i32 0, i32 2
  %331 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !71
  %332 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory412 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %332, i32 0, i32 3
  %333 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory412, align 8, !tbaa !66
  %334 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %331(%struct.gs_memory_s* %333, i8* %334, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  %335 = bitcast i64* %__s1_len414 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %335) #2
  %336 = bitcast i64* %__s2_len416 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %336) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.11 to i64)), i64 1), label %land.lhs.true.418, label %cond.false.466

land.lhs.true.418:                                ; preds = %if.then.409
  %call419 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #8
  store i64 %call419, i64* %__s2_len416, align 8, !tbaa !59
  %337 = load i64, i64* %__s2_len416, align 8, !tbaa !59
  %cmp420 = icmp ult i64 %337, 4
  br i1 %cmp420, label %cond.true.422, label %cond.false.466

cond.true.422:                                    ; preds = %land.lhs.true.418
  %338 = bitcast i8** %__s1424 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %338) #2
  %339 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname425 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %339, i32 0, i32 2
  %340 = load i8*, i8** %dname425, align 8, !tbaa !135
  store i8* %340, i8** %__s1424, align 8, !tbaa !1
  %341 = bitcast i32* %__result427 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %341) #2
  %342 = load i8*, i8** %__s1424, align 8, !tbaa !1
  %arrayidx428 = getelementptr inbounds i8, i8* %342, i64 0
  %343 = load i8, i8* %arrayidx428, align 1, !tbaa !70
  %conv429 = zext i8 %343 to i32
  %344 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1, !tbaa !70
  %conv430 = zext i8 %344 to i32
  %sub431 = sub nsw i32 %conv429, %conv430
  store i32 %sub431, i32* %__result427, align 4, !tbaa !5
  %345 = load i64, i64* %__s2_len416, align 8, !tbaa !59
  %cmp432 = icmp ugt i64 %345, 0
  br i1 %cmp432, label %land.lhs.true.434, label %if.end.464

land.lhs.true.434:                                ; preds = %cond.true.422
  %346 = load i32, i32* %__result427, align 4, !tbaa !5
  %cmp435 = icmp eq i32 %346, 0
  br i1 %cmp435, label %if.then.437, label %if.end.464

if.then.437:                                      ; preds = %land.lhs.true.434
  %347 = load i8*, i8** %__s1424, align 8, !tbaa !1
  %arrayidx438 = getelementptr inbounds i8, i8* %347, i64 1
  %348 = load i8, i8* %arrayidx438, align 1, !tbaa !70
  %conv439 = zext i8 %348 to i32
  %349 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 1), align 1, !tbaa !70
  %conv440 = zext i8 %349 to i32
  %sub441 = sub nsw i32 %conv439, %conv440
  store i32 %sub441, i32* %__result427, align 4, !tbaa !5
  %350 = load i64, i64* %__s2_len416, align 8, !tbaa !59
  %cmp442 = icmp ugt i64 %350, 1
  br i1 %cmp442, label %land.lhs.true.444, label %if.end.463

land.lhs.true.444:                                ; preds = %if.then.437
  %351 = load i32, i32* %__result427, align 4, !tbaa !5
  %cmp445 = icmp eq i32 %351, 0
  br i1 %cmp445, label %if.then.447, label %if.end.463

if.then.447:                                      ; preds = %land.lhs.true.444
  %352 = load i8*, i8** %__s1424, align 8, !tbaa !1
  %arrayidx448 = getelementptr inbounds i8, i8* %352, i64 2
  %353 = load i8, i8* %arrayidx448, align 1, !tbaa !70
  %conv449 = zext i8 %353 to i32
  %354 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 2), align 1, !tbaa !70
  %conv450 = zext i8 %354 to i32
  %sub451 = sub nsw i32 %conv449, %conv450
  store i32 %sub451, i32* %__result427, align 4, !tbaa !5
  %355 = load i64, i64* %__s2_len416, align 8, !tbaa !59
  %cmp452 = icmp ugt i64 %355, 2
  br i1 %cmp452, label %land.lhs.true.454, label %if.end.462

land.lhs.true.454:                                ; preds = %if.then.447
  %356 = load i32, i32* %__result427, align 4, !tbaa !5
  %cmp455 = icmp eq i32 %356, 0
  br i1 %cmp455, label %if.then.457, label %if.end.462

if.then.457:                                      ; preds = %land.lhs.true.454
  %357 = load i8*, i8** %__s1424, align 8, !tbaa !1
  %arrayidx458 = getelementptr inbounds i8, i8* %357, i64 3
  %358 = load i8, i8* %arrayidx458, align 1, !tbaa !70
  %conv459 = zext i8 %358 to i32
  %359 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i64 3), align 1, !tbaa !70
  %conv460 = zext i8 %359 to i32
  %sub461 = sub nsw i32 %conv459, %conv460
  store i32 %sub461, i32* %__result427, align 4, !tbaa !5
  br label %if.end.462

if.end.462:                                       ; preds = %if.then.457, %land.lhs.true.454, %if.then.447
  br label %if.end.463

if.end.463:                                       ; preds = %if.end.462, %land.lhs.true.444, %if.then.437
  br label %if.end.464

if.end.464:                                       ; preds = %if.end.463, %land.lhs.true.434, %cond.true.422
  %360 = load i32, i32* %__result427, align 4, !tbaa !5
  store i32 %360, i32* %tmp465, !tbaa !5
  %361 = bitcast i32* %__result427 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %361) #2
  %362 = bitcast i8** %__s1424 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %362) #2
  %363 = load i32, i32* %tmp465, !tbaa !5
  br label %cond.end.469

cond.false.466:                                   ; preds = %land.lhs.true.418, %if.then.409
  %364 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname467 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %364, i32 0, i32 2
  %365 = load i8*, i8** %dname467, align 8, !tbaa !135
  %call468 = call i32 @strcmp(i8* %365, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0)) #7
  br label %cond.end.469

cond.end.469:                                     ; preds = %cond.false.466, %if.end.464
  %cond470 = phi i32 [ %363, %if.end.464 ], [ %call468, %cond.false.466 ]
  store i32 %cond470, i32* %tmp417, !tbaa !5
  %366 = bitcast i64* %__s2_len416 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %366) #2
  %367 = bitcast i64* %__s1_len414 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %367) #2
  %368 = load i32, i32* %tmp417, !tbaa !5
  %cmp471 = icmp eq i32 %368, 0
  br i1 %cmp471, label %if.then.533, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.469
  %369 = bitcast i64* %__s1_len474 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %369) #2
  %370 = bitcast i64* %__s2_len476 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %370) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1) to i64), i64 ptrtoint ([7 x i8]* @.str.31 to i64)), i64 1), label %land.lhs.true.478, label %cond.false.526

land.lhs.true.478:                                ; preds = %lor.lhs.false
  %call479 = call i64 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #8
  store i64 %call479, i64* %__s2_len476, align 8, !tbaa !59
  %371 = load i64, i64* %__s2_len476, align 8, !tbaa !59
  %cmp480 = icmp ult i64 %371, 4
  br i1 %cmp480, label %cond.true.482, label %cond.false.526

cond.true.482:                                    ; preds = %land.lhs.true.478
  %372 = bitcast i8** %__s1484 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %372) #2
  %373 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname485 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %373, i32 0, i32 2
  %374 = load i8*, i8** %dname485, align 8, !tbaa !135
  store i8* %374, i8** %__s1484, align 8, !tbaa !1
  %375 = bitcast i32* %__result487 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %375) #2
  %376 = load i8*, i8** %__s1484, align 8, !tbaa !1
  %arrayidx488 = getelementptr inbounds i8, i8* %376, i64 0
  %377 = load i8, i8* %arrayidx488, align 1, !tbaa !70
  %conv489 = zext i8 %377 to i32
  %378 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), align 1, !tbaa !70
  %conv490 = zext i8 %378 to i32
  %sub491 = sub nsw i32 %conv489, %conv490
  store i32 %sub491, i32* %__result487, align 4, !tbaa !5
  %379 = load i64, i64* %__s2_len476, align 8, !tbaa !59
  %cmp492 = icmp ugt i64 %379, 0
  br i1 %cmp492, label %land.lhs.true.494, label %if.end.524

land.lhs.true.494:                                ; preds = %cond.true.482
  %380 = load i32, i32* %__result487, align 4, !tbaa !5
  %cmp495 = icmp eq i32 %380, 0
  br i1 %cmp495, label %if.then.497, label %if.end.524

if.then.497:                                      ; preds = %land.lhs.true.494
  %381 = load i8*, i8** %__s1484, align 8, !tbaa !1
  %arrayidx498 = getelementptr inbounds i8, i8* %381, i64 1
  %382 = load i8, i8* %arrayidx498, align 1, !tbaa !70
  %conv499 = zext i8 %382 to i32
  %383 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 1), align 1, !tbaa !70
  %conv500 = zext i8 %383 to i32
  %sub501 = sub nsw i32 %conv499, %conv500
  store i32 %sub501, i32* %__result487, align 4, !tbaa !5
  %384 = load i64, i64* %__s2_len476, align 8, !tbaa !59
  %cmp502 = icmp ugt i64 %384, 1
  br i1 %cmp502, label %land.lhs.true.504, label %if.end.523

land.lhs.true.504:                                ; preds = %if.then.497
  %385 = load i32, i32* %__result487, align 4, !tbaa !5
  %cmp505 = icmp eq i32 %385, 0
  br i1 %cmp505, label %if.then.507, label %if.end.523

if.then.507:                                      ; preds = %land.lhs.true.504
  %386 = load i8*, i8** %__s1484, align 8, !tbaa !1
  %arrayidx508 = getelementptr inbounds i8, i8* %386, i64 2
  %387 = load i8, i8* %arrayidx508, align 1, !tbaa !70
  %conv509 = zext i8 %387 to i32
  %388 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 2), align 1, !tbaa !70
  %conv510 = zext i8 %388 to i32
  %sub511 = sub nsw i32 %conv509, %conv510
  store i32 %sub511, i32* %__result487, align 4, !tbaa !5
  %389 = load i64, i64* %__s2_len476, align 8, !tbaa !59
  %cmp512 = icmp ugt i64 %389, 2
  br i1 %cmp512, label %land.lhs.true.514, label %if.end.522

land.lhs.true.514:                                ; preds = %if.then.507
  %390 = load i32, i32* %__result487, align 4, !tbaa !5
  %cmp515 = icmp eq i32 %390, 0
  br i1 %cmp515, label %if.then.517, label %if.end.522

if.then.517:                                      ; preds = %land.lhs.true.514
  %391 = load i8*, i8** %__s1484, align 8, !tbaa !1
  %arrayidx518 = getelementptr inbounds i8, i8* %391, i64 3
  %392 = load i8, i8* %arrayidx518, align 1, !tbaa !70
  %conv519 = zext i8 %392 to i32
  %393 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i64 3), align 1, !tbaa !70
  %conv520 = zext i8 %393 to i32
  %sub521 = sub nsw i32 %conv519, %conv520
  store i32 %sub521, i32* %__result487, align 4, !tbaa !5
  br label %if.end.522

if.end.522:                                       ; preds = %if.then.517, %land.lhs.true.514, %if.then.507
  br label %if.end.523

if.end.523:                                       ; preds = %if.end.522, %land.lhs.true.504, %if.then.497
  br label %if.end.524

if.end.524:                                       ; preds = %if.end.523, %land.lhs.true.494, %cond.true.482
  %394 = load i32, i32* %__result487, align 4, !tbaa !5
  store i32 %394, i32* %tmp525, !tbaa !5
  %395 = bitcast i32* %__result487 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %395) #2
  %396 = bitcast i8** %__s1484 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %396) #2
  %397 = load i32, i32* %tmp525, !tbaa !5
  br label %cond.end.529

cond.false.526:                                   ; preds = %land.lhs.true.478, %lor.lhs.false
  %398 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %dname527 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %398, i32 0, i32 2
  %399 = load i8*, i8** %dname527, align 8, !tbaa !135
  %call528 = call i32 @strcmp(i8* %399, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #7
  br label %cond.end.529

cond.end.529:                                     ; preds = %cond.false.526, %if.end.524
  %cond530 = phi i32 [ %397, %if.end.524 ], [ %call528, %cond.false.526 ]
  store i32 %cond530, i32* %tmp477, !tbaa !5
  %400 = bitcast i64* %__s2_len476 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %400) #2
  %401 = bitcast i64* %__s1_len474 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %401) #2
  %402 = load i32, i32* %tmp477, !tbaa !5
  %cmp531 = icmp eq i32 %402, 0
  br i1 %cmp531, label %if.then.533, label %if.else.570

if.then.533:                                      ; preds = %cond.end.529, %cond.end.469
  %403 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx534 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %403, i32 0, i32 105
  %404 = load float, float* %sx534, align 4, !tbaa !123
  %405 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy535 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %405, i32 0, i32 106
  %406 = load float, float* %sy535, align 4, !tbaa !124
  %cmp536 = fcmp ogt float %404, %406
  br i1 %cmp536, label %if.then.538, label %if.else.550

if.then.538:                                      ; preds = %if.then.533
  %407 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy539 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %407, i32 0, i32 106
  %408 = load float, float* %sy539, align 4, !tbaa !124
  %conv540 = fptosi float %408 to i32
  store i32 %conv540, i32* %height.addr, align 4, !tbaa !5
  %409 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx541 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %409, i32 0, i32 105
  %410 = load float, float* %sx541, align 4, !tbaa !123
  %conv542 = fptosi float %410 to i32
  %411 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w543 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %411, i32 0, i32 102
  store i32 %conv542, i32* %w543, align 4, !tbaa !126
  %412 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx544 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %412, i32 0, i32 105
  %413 = load float, float* %sx544, align 4, !tbaa !123
  %add545 = fadd float %413, 7.000000e+00
  %div546 = fdiv float %add545, 8.000000e+00
  %414 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy547 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %414, i32 0, i32 106
  %415 = load float, float* %sy547, align 4, !tbaa !124
  %mul548 = fmul float %div546, %415
  %conv549 = fptosi float %mul548 to i32
  store i32 %conv549, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.569

if.else.550:                                      ; preds = %if.then.533
  %416 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx551 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %416, i32 0, i32 105
  %417 = load float, float* %sx551, align 4, !tbaa !123
  %418 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy552 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %418, i32 0, i32 106
  %419 = load float, float* %sy552, align 4, !tbaa !124
  %cmp553 = fcmp olt float %417, %419
  br i1 %cmp553, label %if.then.555, label %if.else.567

if.then.555:                                      ; preds = %if.else.550
  %420 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy556 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %420, i32 0, i32 106
  %421 = load float, float* %sy556, align 4, !tbaa !124
  %conv557 = fptosi float %421 to i32
  store i32 %conv557, i32* %height.addr, align 4, !tbaa !5
  %422 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx558 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %422, i32 0, i32 105
  %423 = load float, float* %sx558, align 4, !tbaa !123
  %conv559 = fptosi float %423 to i32
  %424 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w560 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %424, i32 0, i32 102
  store i32 %conv559, i32* %w560, align 4, !tbaa !126
  %425 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx561 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %425, i32 0, i32 105
  %426 = load float, float* %sx561, align 4, !tbaa !123
  %add562 = fadd float %426, 7.000000e+00
  %div563 = fdiv float %add562, 8.000000e+00
  %427 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy564 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %427, i32 0, i32 106
  %428 = load float, float* %sy564, align 4, !tbaa !124
  %mul565 = fmul float %div563, %428
  %conv566 = fptosi float %mul565 to i32
  store i32 %conv566, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.568

if.else.567:                                      ; preds = %if.else.550
  store i32 1, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.568

if.end.568:                                       ; preds = %if.else.567, %if.then.555
  br label %if.end.569

if.end.569:                                       ; preds = %if.end.568, %if.then.538
  br label %if.end.586

if.else.570:                                      ; preds = %cond.end.529
  %429 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx571 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %429, i32 0, i32 105
  %430 = load float, float* %sx571, align 4, !tbaa !123
  %431 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy572 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %431, i32 0, i32 106
  %432 = load float, float* %sy572, align 4, !tbaa !124
  %cmp573 = fcmp ogt float %430, %432
  br i1 %cmp573, label %if.then.575, label %if.else.576

if.then.575:                                      ; preds = %if.else.570
  store i32 1, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.585

if.else.576:                                      ; preds = %if.else.570
  %433 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx577 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %433, i32 0, i32 105
  %434 = load float, float* %sx577, align 4, !tbaa !123
  %435 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy578 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %435, i32 0, i32 106
  %436 = load float, float* %sy578, align 4, !tbaa !124
  %cmp579 = fcmp olt float %434, %436
  br i1 %cmp579, label %if.then.581, label %if.else.583

if.then.581:                                      ; preds = %if.else.576
  %437 = load i32, i32* %tbyte, align 4, !tbaa !5
  %438 = load i32, i32* %height.addr, align 4, !tbaa !5
  %mul582 = mul nsw i32 %437, %438
  store i32 %mul582, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.584

if.else.583:                                      ; preds = %if.else.576
  store i32 1, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.584

if.end.584:                                       ; preds = %if.else.583, %if.then.581
  br label %if.end.585

if.end.585:                                       ; preds = %if.end.584, %if.then.575
  br label %if.end.586

if.end.586:                                       ; preds = %if.end.585, %if.end.569
  %439 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory587 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %439, i32 0, i32 3
  %440 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory587, align 8, !tbaa !66
  %procs588 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %440, i32 0, i32 1
  %alloc_bytes589 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs588, i32 0, i32 7
  %441 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes589, align 8, !tbaa !67
  %442 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory590 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %442, i32 0, i32 3
  %443 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory590, align 8, !tbaa !66
  %444 = load i32, i32* %tbyte, align 4, !tbaa !5
  %call591 = call i8* %441(%struct.gs_memory_s* %443, i32 %444, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  store i8* %call591, i8** %buf, align 8, !tbaa !1
  store i32 0, i32* %t, align 4, !tbaa !5
  br label %for.cond.592

for.cond.592:                                     ; preds = %for.inc.598, %if.end.586
  %445 = load i32, i32* %t, align 4, !tbaa !5
  %446 = load i32, i32* %tbyte, align 4, !tbaa !5
  %cmp593 = icmp slt i32 %445, %446
  br i1 %cmp593, label %for.body.595, label %for.end.600

for.body.595:                                     ; preds = %for.cond.592
  %447 = load i32, i32* %t, align 4, !tbaa !5
  %idxprom596 = sext i32 %447 to i64
  %448 = load i8*, i8** %buf, align 8, !tbaa !1
  %arrayidx597 = getelementptr inbounds i8, i8* %448, i64 %idxprom596
  store i8 -1, i8* %arrayidx597, align 1, !tbaa !70
  br label %for.inc.598

for.inc.598:                                      ; preds = %for.body.595
  %449 = load i32, i32* %t, align 4, !tbaa !5
  %inc599 = add nsw i32 %449, 1
  store i32 %inc599, i32* %t, align 4, !tbaa !5
  br label %for.cond.592

for.end.600:                                      ; preds = %for.cond.592
  br label %if.end.635

if.else.601:                                      ; preds = %if.then.404
  %450 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory602 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %450, i32 0, i32 3
  %451 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory602, align 8, !tbaa !66
  %procs603 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %451, i32 0, i32 1
  %free_object604 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs603, i32 0, i32 2
  %452 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object604, align 8, !tbaa !71
  %453 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory605 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %453, i32 0, i32 3
  %454 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory605, align 8, !tbaa !66
  %455 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %452(%struct.gs_memory_s* %454, i8* %455, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  %456 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx606 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %456, i32 0, i32 105
  %457 = load float, float* %sx606, align 4, !tbaa !123
  %458 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy607 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %458, i32 0, i32 106
  %459 = load float, float* %sy607, align 4, !tbaa !124
  %cmp608 = fcmp ogt float %457, %459
  br i1 %cmp608, label %if.then.610, label %if.else.611

if.then.610:                                      ; preds = %if.else.601
  store i32 1, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.620

if.else.611:                                      ; preds = %if.else.601
  %460 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sx612 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %460, i32 0, i32 105
  %461 = load float, float* %sx612, align 4, !tbaa !123
  %462 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %sy613 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %462, i32 0, i32 106
  %463 = load float, float* %sy613, align 4, !tbaa !124
  %cmp614 = fcmp olt float %461, %463
  br i1 %cmp614, label %if.then.616, label %if.else.618

if.then.616:                                      ; preds = %if.else.611
  %464 = load i32, i32* %tbyte, align 4, !tbaa !5
  %465 = load i32, i32* %height.addr, align 4, !tbaa !5
  %mul617 = mul nsw i32 %464, %465
  store i32 %mul617, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.619

if.else.618:                                      ; preds = %if.else.611
  store i32 1, i32* %tbyte, align 4, !tbaa !5
  br label %if.end.619

if.end.619:                                       ; preds = %if.else.618, %if.then.616
  br label %if.end.620

if.end.620:                                       ; preds = %if.end.619, %if.then.610
  %466 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory621 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %466, i32 0, i32 3
  %467 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory621, align 8, !tbaa !66
  %procs622 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %467, i32 0, i32 1
  %alloc_bytes623 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs622, i32 0, i32 7
  %468 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes623, align 8, !tbaa !67
  %469 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory624 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %469, i32 0, i32 3
  %470 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory624, align 8, !tbaa !66
  %471 = load i32, i32* %tbyte, align 4, !tbaa !5
  %call625 = call i8* %468(%struct.gs_memory_s* %470, i32 %471, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  store i8* %call625, i8** %buf, align 8, !tbaa !1
  store i32 0, i32* %t, align 4, !tbaa !5
  br label %for.cond.626

for.cond.626:                                     ; preds = %for.inc.632, %if.end.620
  %472 = load i32, i32* %t, align 4, !tbaa !5
  %473 = load i32, i32* %tbyte, align 4, !tbaa !5
  %cmp627 = icmp slt i32 %472, %473
  br i1 %cmp627, label %for.body.629, label %for.end.634

for.body.629:                                     ; preds = %for.cond.626
  %474 = load i32, i32* %t, align 4, !tbaa !5
  %idxprom630 = sext i32 %474 to i64
  %475 = load i8*, i8** %buf, align 8, !tbaa !1
  %arrayidx631 = getelementptr inbounds i8, i8* %475, i64 %idxprom630
  store i8 0, i8* %arrayidx631, align 1, !tbaa !70
  br label %for.inc.632

for.inc.632:                                      ; preds = %for.body.629
  %476 = load i32, i32* %t, align 4, !tbaa !5
  %inc633 = add nsw i32 %476, 1
  store i32 %inc633, i32* %t, align 4, !tbaa !5
  br label %for.cond.626

for.end.634:                                      ; preds = %for.cond.626
  br label %if.end.635

if.end.635:                                       ; preds = %for.end.634, %for.end.600
  %477 = bitcast i32* %t to i8*
  call void @llvm.lifetime.end(i64 4, i8* %477) #2
  br label %if.end.636

if.end.636:                                       ; preds = %if.end.635, %for.end.401
  %478 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %479 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel637 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %479, i32 0, i32 13
  %480 = load i32, i32* %bits_per_pixel637, align 4, !tbaa !131
  %481 = load i8*, i8** %buf, align 8, !tbaa !1
  %482 = load i32, i32* %tbyte, align 4, !tbaa !5
  %483 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %w638 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %483, i32 0, i32 102
  %484 = load i32, i32* %w638, align 4, !tbaa !126
  %485 = load i32, i32* %height.addr, align 4, !tbaa !5
  call void @escv_write_data(%struct.gx_device_s* %478, i32 %480, i8* %481, i32 %482, i32 %484, i32 %485) #6
  %486 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y639 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %486, i32 0, i32 98
  %487 = load i64, i64* %reverse_y639, align 8, !tbaa !121
  %tobool640 = icmp ne i64 %487, 0
  br i1 %tobool640, label %if.then.641, label %if.end.643

if.then.641:                                      ; preds = %if.end.636
  %488 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %489 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel642 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %489, i32 0, i32 13
  %490 = load i32, i32* %bits_per_pixel642, align 4, !tbaa !131
  call void @escv_write_end(%struct.gx_device_s* %488, i32 %490) #6
  br label %if.end.643

if.end.643:                                       ; preds = %if.then.641, %if.end.636
  %491 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory644 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %491, i32 0, i32 3
  %492 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory644, align 8, !tbaa !66
  %procs645 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %492, i32 0, i32 1
  %free_object646 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs645, i32 0, i32 2
  %493 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object646, align 8, !tbaa !71
  %494 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %memory647 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %494, i32 0, i32 3
  %495 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory647, align 8, !tbaa !66
  %496 = load i8*, i8** %buf, align 8, !tbaa !1
  call void %493(%struct.gs_memory_s* %495, i8* %496, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0)) #6
  %497 = load i32, i32* %height.addr, align 4, !tbaa !5
  %498 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %y648 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %498, i32 0, i32 15
  %499 = load i32, i32* %y648, align 4, !tbaa !196
  %add649 = add nsw i32 %499, %497
  store i32 %add649, i32* %y648, align 4, !tbaa !196
  %500 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %height650 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %500, i32 0, i32 12
  %501 = load i32, i32* %height650, align 4, !tbaa !133
  %cmp651 = icmp sge i32 %add649, %501
  %conv652 = zext i1 %cmp651 to i32
  store i32 %conv652, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.643, %if.then
  %502 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %502) #2
  %503 = bitcast i32* %tbyte to i8*
  call void @llvm.lifetime.end(i64 4, i8* %503) #2
  %504 = bitcast i32* %width_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %504) #2
  %505 = bitcast i32* %plane to i8*
  call void @llvm.lifetime.end(i64 4, i8* %505) #2
  %506 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %506) #2
  %507 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.end(i64 8, i8* %507) #2
  %508 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %508) #2
  %509 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %509) #2
  %510 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %510) #2
  %511 = load i32, i32* %retval
  ret i32 %511
}

; Function Attrs: nounwind uwtable
define internal i32 @escv_image_end_image(%struct.gx_image_enum_common_s* %info, i32 %draw_last) #0 {
entry:
  %info.addr = alloca %struct.gx_image_enum_common_s*, align 8
  %draw_last.addr = alloca i32, align 4
  %dev = alloca %struct.gx_device_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_escv_s*, align 8
  %pie = alloca %struct.gdev_vector_image_enum_s*, align 8
  %code = alloca i32, align 4
  %s = alloca %struct.stream_s*, align 8
  store %struct.gx_image_enum_common_s* %info, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  store i32 %draw_last, i32* %draw_last.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %dev1 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %1, i32 0, i32 2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev1, align 8, !tbaa !183
  store %struct.gx_device_s* %2, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %5, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_s* %7 to %struct.gx_device_escv_s*
  store %struct.gx_device_escv_s* %8, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %9 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %11 = bitcast %struct.gx_image_enum_common_s* %10 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %11, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %13, i32 0, i32 98
  %14 = load i64, i64* %reverse_y, align 8, !tbaa !121
  %tobool = icmp ne i64 %14, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %16 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %bits_per_pixel = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %16, i32 0, i32 13
  %17 = load i32, i32* %bits_per_pixel, align 4, !tbaa !131
  call void @escv_write_end(%struct.gx_device_s* %15, i32 %17) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_y2 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %18, i32 0, i32 98
  store i64 0, i64* %reverse_y2, align 8, !tbaa !121
  %19 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %reverse_x = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %19, i32 0, i32 97
  store i64 0, i64* %reverse_x, align 8, !tbaa !122
  %20 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskReverse = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %20, i32 0, i32 86
  %21 = load i32, i32* %MaskReverse, align 4, !tbaa !111
  %cmp = icmp eq i32 %21, 0
  br i1 %cmp, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  %22 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %colormode = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %22, i32 0, i32 67
  %23 = load i32, i32* %colormode, align 4, !tbaa !48
  %cmp4 = icmp eq i32 0, %23
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.3
  br label %if.end.7

if.else:                                          ; preds = %if.then.3
  %24 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %24) #2
  %25 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %26 = bitcast %struct.gx_device_escv_s* %25 to %struct.gx_device_vector_s*
  %call = call %struct.stream_s* @gdev_vector_stream(%struct.gx_device_vector_s* %26) #6
  store %struct.stream_s* %call, %struct.stream_s** %s, align 8, !tbaa !1
  %27 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  %call6 = call i32 @lputs(%struct.stream_s* %27, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i32 0, i32 0)) #6
  %28 = load %struct.stream_s*, %struct.stream_s** %s, align 8, !tbaa !1
  call void @put_bytes(%struct.stream_s* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.137, i32 0, i32 0), i32 8) #6
  %29 = bitcast %struct.stream_s** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.5
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %if.end
  %30 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %MaskReverse9 = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %30, i32 0, i32 86
  store i32 -1, i32* %MaskReverse9, align 4, !tbaa !111
  %31 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %32 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %pie, align 8, !tbaa !1
  %33 = load i32, i32* %draw_last.addr, align 4, !tbaa !5
  %34 = load %struct.gx_device_escv_s*, %struct.gx_device_escv_s** %pdev, align 8, !tbaa !1
  %white = getelementptr inbounds %struct.gx_device_escv_s, %struct.gx_device_escv_s* %34, i32 0, i32 66
  %35 = load i64, i64* %white, align 8, !tbaa !197
  %call10 = call i32 @gdev_vector_end_image(%struct.gx_device_vector_s* %31, %struct.gdev_vector_image_enum_s* %32, i32 %33, i64 %35) #6
  store i32 %call10, i32* %code, align 4, !tbaa !5
  %36 = load i32, i32* %code, align 4, !tbaa !5
  %37 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %37) #2
  %38 = bitcast %struct.gdev_vector_image_enum_s** %pie to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #2
  %39 = bitcast %struct.gx_device_escv_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #2
  %40 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #2
  %41 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #2
  ret i32 %36
}

declare i32 @gx_image_plane_data(%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32) #1

declare i32 @gdev_vector_end_image(%struct.gx_device_vector_s*, %struct.gdev_vector_image_enum_s*, i32, i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nobuiltin nounwind readonly }
attributes #9 = { nobuiltin nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !3, i64 0}
!7 = !{!8, !2, i64 32}
!8 = !{!"gs_memory_struct_type_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56}
!9 = !{!8, !2, i64 40}
!10 = !{!11, !2, i64 24}
!11 = !{!"gx_device_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !12, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !14, i64 96, !17, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !13, i64 928, !13, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !13, i64 968, !13, i64 976, !18, i64 984, !6, i64 1052, !6, i64 1056, !19, i64 1064, !2, i64 1104, !3, i64 1112, !21, i64 1120, !22, i64 1144}
!12 = !{!"rc_header_s", !13, i64 0, !2, i64 8, !2, i64 16}
!13 = !{!"long", !3, i64 0}
!14 = !{!"gx_device_color_info_s", !6, i64 0, !6, i64 4, !3, i64 8, !15, i64 12, !3, i64 14, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !16, i64 32, !3, i64 40, !3, i64 44, !3, i64 108, !3, i64 176, !2, i64 688, !3, i64 696, !13, i64 704, !6, i64 712}
!15 = !{!"short", !3, i64 0}
!16 = !{!"gx_device_anti_alias_info_s", !6, i64 0, !6, i64 4}
!17 = !{!"gx_device_cached_colors_s", !13, i64 0, !13, i64 8}
!18 = !{!"gx_stroked_gradient_recognizer_s", !6, i64 0, !3, i64 4, !3, i64 36}
!19 = !{!"gdev_space_params_s", !13, i64 0, !13, i64 8, !20, i64 16, !6, i64 32, !3, i64 36}
!20 = !{!"gx_band_params_s", !6, i64 0, !6, i64 4, !13, i64 8}
!21 = !{!"gx_page_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16}
!22 = !{!"gx_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560, !2, i64 568, !2, i64 576}
!23 = !{!24, !2, i64 1728}
!24 = !{!"gx_device_vector_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !12, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !14, i64 96, !17, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !13, i64 928, !13, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !13, i64 968, !13, i64 976, !18, i64 984, !6, i64 1052, !6, i64 1056, !19, i64 1064, !2, i64 1104, !3, i64 1112, !21, i64 1120, !22, i64 1144, !2, i64 1728, !2, i64 1736, !3, i64 1744, !2, i64 5840, !2, i64 5848, !2, i64 5856, !6, i64 5864, !6, i64 5868, !25, i64 5872, !2, i64 7488, !6, i64 7496, !6, i64 7500, !6, i64 7504, !38, i64 7512, !38, i64 8144, !13, i64 8776, !13, i64 8784, !3, i64 8792, !3, i64 8796, !31, i64 8800, !6, i64 8816, !2, i64 8824, !13, i64 8832, !13, i64 8840}
!25 = !{!"gs_imager_state_s", !6, i64 0, !2, i64 8, !2, i64 16, !26, i64 24, !6, i64 128, !30, i64 132, !6, i64 168, !31, i64 176, !31, i64 192, !6, i64 208, !6, i64 212, !15, i64 216, !3, i64 220, !33, i64 224, !33, i64 228, !34, i64 232, !13, i64 240, !6, i64 248, !6, i64 252, !6, i64 256, !2, i64 264, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284, !6, i64 288, !6, i64 292, !27, i64 296, !35, i64 300, !6, i64 308, !6, i64 312, !6, i64 316, !27, i64 320, !6, i64 324, !6, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !6, i64 408, !2, i64 416, !2, i64 424, !36, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !37, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !37, i64 1336}
!26 = !{!"gx_line_params_s", !27, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !6, i64 20, !27, i64 24, !27, i64 28, !27, i64 32, !6, i64 36, !28, i64 40, !29, i64 64}
!27 = !{!"float", !3, i64 0}
!28 = !{!"gs_matrix_s", !27, i64 0, !27, i64 4, !27, i64 8, !27, i64 12, !27, i64 16, !27, i64 20}
!29 = !{!"gx_dash_params_s", !2, i64 0, !6, i64 8, !27, i64 12, !6, i64 16, !27, i64 20, !6, i64 24, !6, i64 28, !27, i64 32}
!30 = !{!"gs_matrix_fixed_s", !27, i64 0, !27, i64 4, !27, i64 8, !27, i64 12, !27, i64 16, !27, i64 20, !6, i64 24, !6, i64 28, !6, i64 32}
!31 = !{!"gs_point_s", !32, i64 0, !32, i64 8}
!32 = !{!"double", !3, i64 0}
!33 = !{!"gs_transparency_source_s", !27, i64 0}
!34 = !{!"gs_xstate_trans_flags", !6, i64 0, !6, i64 4}
!35 = !{!"gs_fixed_point_s", !6, i64 0, !6, i64 4}
!36 = !{!"gx_transfer_s", !6, i64 0, !2, i64 8, !6, i64 16, !2, i64 24, !6, i64 32, !2, i64 40, !6, i64 48, !2, i64 56}
!37 = !{!"gs_devicen_color_map_s", !6, i64 0, !3, i64 4, !6, i64 8, !6, i64 12, !13, i64 16, !3, i64 24}
!38 = !{!"gx_hl_saved_color_s", !13, i64 0, !13, i64 8, !6, i64 16, !39, i64 24, !41, i64 288}
!39 = !{!"gs_client_color_s", !2, i64 0, !40, i64 8}
!40 = !{!"gs_paint_color_s", !3, i64 0}
!41 = !{!"gx_device_color_saved_s", !2, i64 0, !3, i64 8, !42, i64 336}
!42 = !{!"gs_int_point_s", !6, i64 0, !6, i64 4}
!43 = !{!24, !2, i64 1736}
!44 = !{!45, !6, i64 8908}
!45 = !{!"gx_device_escv_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !12, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !14, i64 96, !17, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !13, i64 928, !13, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !13, i64 968, !13, i64 976, !18, i64 984, !6, i64 1052, !6, i64 1056, !19, i64 1064, !2, i64 1104, !3, i64 1112, !21, i64 1120, !22, i64 1144, !2, i64 1728, !2, i64 1736, !3, i64 1744, !2, i64 5840, !2, i64 5848, !2, i64 5856, !6, i64 5864, !6, i64 5868, !25, i64 5872, !2, i64 7488, !6, i64 7496, !6, i64 7500, !6, i64 7504, !38, i64 7512, !38, i64 8144, !13, i64 8776, !13, i64 8784, !3, i64 8792, !3, i64 8796, !31, i64 8800, !6, i64 8816, !2, i64 8824, !13, i64 8832, !13, i64 8840, !6, i64 8848, !6, i64 8852, !6, i64 8856, !6, i64 8860, !6, i64 8864, !6, i64 8868, !6, i64 8872, !6, i64 8876, !6, i64 8880, !6, i64 8884, !6, i64 8888, !6, i64 8892, !6, i64 8896, !6, i64 8900, !6, i64 8904, !6, i64 8908, !6, i64 8912, !6, i64 8916, !6, i64 8920, !6, i64 8924, !6, i64 8928, !6, i64 8932, !6, i64 8936, !6, i64 8940, !6, i64 8944, !13, i64 8952, !13, i64 8960, !32, i64 8968, !13, i64 8976, !13, i64 8984, !13, i64 8992, !13, i64 9000, !28, i64 9008, !6, i64 9032, !6, i64 9036, !6, i64 9040, !6, i64 9044, !6, i64 9048, !27, i64 9052, !27, i64 9056, !13, i64 9064, !6, i64 9072, !3, i64 9080, !3, i64 17272, !3, i64 17528, !3, i64 17784, !3, i64 18040, !3, i64 18296, !46, i64 18552, !46, i64 18568, !46, i64 18584, !46, i64 18600, !46, i64 18616, !6, i64 18632, !6, i64 18636, !6, i64 18640, !6, i64 18644}
!46 = !{!"gs_param_string_s", !2, i64 0, !6, i64 8, !6, i64 12}
!47 = !{!45, !6, i64 8896}
!48 = !{!45, !6, i64 8848}
!49 = !{!45, !6, i64 832}
!50 = !{!45, !6, i64 836}
!51 = !{!27, !27, i64 0}
!52 = !{!53, !2, i64 208}
!53 = !{!"stream_s", !2, i64 0, !2, i64 8, !2, i64 16, !6, i64 24, !3, i64 28, !3, i64 112, !2, i64 136, !6, i64 144, !6, i64 148, !15, i64 152, !3, i64 154, !3, i64 155, !54, i64 160, !13, i64 176, !55, i64 184, !2, i64 240, !6, i64 248, !6, i64 252, !2, i64 256, !15, i64 264, !15, i64 266, !2, i64 272, !2, i64 280, !6, i64 288, !6, i64 292, !2, i64 296, !2, i64 304, !56, i64 312, !6, i64 328, !13, i64 336, !13, i64 344}
!54 = !{!"gs_string_s", !2, i64 0, !6, i64 8}
!55 = !{!"", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48}
!56 = !{!"gs_const_string_s", !2, i64 0, !6, i64 8}
!57 = !{!24, !6, i64 8816}
!58 = !{!24, !2, i64 5840}
!59 = !{!13, !13, i64 0}
!60 = !{!61, !2, i64 0}
!61 = !{!"gx_device_color_s", !2, i64 0, !3, i64 8, !42, i64 352, !6, i64 360, !39, i64 368, !62, i64 632}
!62 = !{!"_mask", !63, i64 0, !13, i64 8, !2, i64 16}
!63 = !{!"mp_", !6, i64 0, !6, i64 4}
!64 = !{!45, !6, i64 8928}
!65 = !{!24, !13, i64 8840}
!66 = !{!24, !2, i64 24}
!67 = !{!68, !2, i64 64}
!68 = !{!"gs_memory_s", !2, i64 0, !69, i64 8, !2, i64 192, !2, i64 200, !2, i64 208}
!69 = !{!"gs_memory_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176}
!70 = !{!3, !3, i64 0}
!71 = !{!68, !2, i64 24}
!72 = !{!11, !15, i64 108}
!73 = !{!45, !6, i64 8852}
!74 = !{!45, !6, i64 8856}
!75 = !{!45, !6, i64 8916}
!76 = !{!45, !6, i64 8864}
!77 = !{!45, !6, i64 8868}
!78 = !{!45, !6, i64 8872}
!79 = !{!45, !6, i64 8900}
!80 = !{!45, !6, i64 8912}
!81 = !{!45, !6, i64 8860}
!82 = !{!45, !6, i64 18632}
!83 = !{!84, !2, i64 0}
!84 = !{!"gs_param_list_s", !2, i64 0, !2, i64 8, !6, i64 16}
!85 = !{!86, !2, i64 56}
!86 = !{!"gs_param_list_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64}
!87 = !{!45, !6, i64 18636}
!88 = !{!45, !6, i64 18640}
!89 = !{!45, !6, i64 18644}
!90 = !{!46, !6, i64 8}
!91 = !{!46, !2, i64 0}
!92 = !{!45, !6, i64 8904}
!93 = !{!11, !6, i64 100}
!94 = !{!11, !6, i64 112}
!95 = !{!11, !6, i64 116}
!96 = !{!11, !6, i64 120}
!97 = !{!11, !6, i64 124}
!98 = !{!45, !2, i64 1184}
!99 = !{!45, !2, i64 1192}
!100 = !{!45, !6, i64 84}
!101 = !{!45, !13, i64 8960}
!102 = !{!68, !2, i64 72}
!103 = !{!104, !2, i64 576}
!104 = !{!"gs_image1_s", !2, i64 0, !28, i64 8, !6, i64 32, !6, i64 36, !6, i64 40, !3, i64 44, !6, i64 564, !3, i64 568, !6, i64 572, !2, i64 576, !6, i64 584, !6, i64 588, !3, i64 592, !3, i64 596}
!105 = !{!104, !3, i64 568}
!106 = !{!107, !2, i64 24}
!107 = !{!"gdev_vector_image_enum_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !13, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308, !2, i64 568, !2, i64 576, !6, i64 584, !6, i64 588, !6, i64 592, !6, i64 596, !6, i64 600}
!108 = !{!104, !6, i64 584}
!109 = !{!104, !6, i64 572}
!110 = !{!104, !6, i64 40}
!111 = !{!45, !6, i64 8924}
!112 = !{!28, !27, i64 20}
!113 = !{!28, !27, i64 0}
!114 = !{!104, !6, i64 32}
!115 = !{!28, !27, i64 8}
!116 = !{!104, !6, i64 36}
!117 = !{!28, !27, i64 16}
!118 = !{!28, !27, i64 4}
!119 = !{!28, !27, i64 12}
!120 = !{!45, !6, i64 9048}
!121 = !{!45, !13, i64 9000}
!122 = !{!45, !13, i64 8992}
!123 = !{!45, !27, i64 9052}
!124 = !{!45, !27, i64 9056}
!125 = !{!45, !6, i64 9044}
!126 = !{!45, !6, i64 9040}
!127 = !{!45, !13, i64 9064}
!128 = !{!45, !6, i64 9032}
!129 = !{!45, !6, i64 9036}
!130 = !{!45, !6, i64 8920}
!131 = !{!107, !6, i64 592}
!132 = !{!107, !6, i64 584}
!133 = !{!107, !6, i64 588}
!134 = !{!24, !2, i64 5848}
!135 = !{!45, !2, i64 16}
!136 = !{!137, !6, i64 8}
!137 = !{!"", !2, i64 0, !6, i64 8, !6, i64 12, !6, i64 16, !6, i64 20}
!138 = !{!137, !2, i64 0}
!139 = !{!137, !6, i64 12}
!140 = !{!137, !6, i64 16}
!141 = !{!137, !6, i64 20}
!142 = !{!45, !6, i64 944}
!143 = !{!144, !2, i64 16}
!144 = !{!"EPaperTable_s", !6, i64 0, !6, i64 4, !6, i64 8, !2, i64 16}
!145 = !{!24, !2, i64 16}
!146 = !{!32, !32, i64 0}
!147 = !{!45, !32, i64 8968}
!148 = !{!45, !13, i64 8976}
!149 = !{!45, !13, i64 8984}
!150 = !{!24, !15, i64 108}
!151 = !{!152, !2, i64 96}
!152 = !{!"gx_device_vector_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144}
!153 = !{!154, !6, i64 0}
!154 = !{!"gs_fixed_rect_s", !35, i64 0, !35, i64 8}
!155 = !{!154, !6, i64 4}
!156 = !{!154, !6, i64 8}
!157 = !{!154, !6, i64 12}
!158 = !{i64 0, i64 8, !146, i64 8, i64 8, !146}
!159 = !{!152, !2, i64 104}
!160 = !{!152, !2, i64 144}
!161 = !{!31, !32, i64 0}
!162 = !{!31, !32, i64 8}
!163 = !{!164, !2, i64 32}
!164 = !{!"gs_path_enum_s", !2, i64 0, !28, i64 8, !2, i64 32, !2, i64 40, !2, i64 48, !6, i64 56, !3, i64 60}
!165 = !{!166, !15, i64 16}
!166 = !{!"segment_s", !2, i64 0, !2, i64 8, !15, i64 16, !15, i64 18, !35, i64 20}
!167 = !{!166, !2, i64 8}
!168 = !{!45, !6, i64 9072}
!169 = !{!144, !6, i64 8}
!170 = !{!144, !6, i64 0}
!171 = !{!144, !6, i64 4}
!172 = !{!173, !2, i64 0}
!173 = !{!"paper_candidate_s", !2, i64 0, !6, i64 8, !6, i64 12, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !6, i64 32}
!174 = !{!173, !6, i64 8}
!175 = !{!173, !6, i64 12}
!176 = !{!173, !6, i64 16}
!177 = !{!173, !6, i64 20}
!178 = !{!173, !6, i64 24}
!179 = !{!173, !6, i64 28}
!180 = !{!173, !6, i64 32}
!181 = !{!45, !6, i64 8932}
!182 = !{!45, !6, i64 8936}
!183 = !{!184, !2, i64 16}
!184 = !{!"gx_image_enum_common_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !13, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308}
!185 = !{!107, !2, i64 568}
!186 = !{!107, !2, i64 576}
!187 = !{!45, !27, i64 9024}
!188 = !{!45, !27, i64 9028}
!189 = !{!45, !27, i64 9020}
!190 = !{!45, !27, i64 9016}
!191 = !{!107, !6, i64 44}
!192 = !{!193, !2, i64 0}
!193 = !{!"gx_image_plane_s", !2, i64 0, !6, i64 8, !6, i64 12}
!194 = !{!193, !6, i64 8}
!195 = !{!193, !6, i64 12}
!196 = !{!107, !6, i64 600}
!197 = !{!45, !13, i64 8840}
