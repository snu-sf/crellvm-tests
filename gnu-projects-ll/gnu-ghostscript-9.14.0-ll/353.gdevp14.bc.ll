; ModuleID = './gdevp14.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i64 (%struct.gx_device_s*, i16*)*, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)*, i32 (%struct.gx_device_s*, i32, i32*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)*, i32 (%struct.gx_device_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, %struct.gs_devn_params_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, void (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* }
%struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s }
%struct.gs_memory_s = type { %struct.gs_memory_s*, %struct.gs_memory_procs_s, %struct.gs_lib_ctx_s*, %struct.gs_memory_s*, %struct.gs_memory_s* }
%struct.gs_memory_procs_s = type { i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)*, void (%struct.gs_memory_s*, %struct.gs_memory_status_s*)*, void (%struct.gs_memory_s*, i32, i8*)*, void (%struct.gs_memory_s*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i32 (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)*, i32 (%struct.gs_memory_s*, %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, i8*)*, void (%struct.gs_memory_s*, i32)* }
%struct.gs_memory_status_s = type { i64, i64, i32 }
%struct.gs_gc_root_s = type { %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i32 }
%struct.gs_ptr_procs_s = type { void (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i32 (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)* }
%struct.enum_ptr_s = type { i8*, i32 }
%struct.gc_state_s = type opaque
%struct.gs_lib_ctx_s = type { %struct.gs_memory_s*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i64, i8*, %struct.name_table_s*, i32, %struct.gx_io_device_s**, i32, i32, [2 x i64], %struct.gs_font_dir_s*, i32, i8*, i32, i8*, %struct.gs_fapi_server_s** }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.name_table_s = type opaque
%struct.gx_io_device_s = type opaque
%struct.gs_font_dir_s = type opaque
%struct.gs_fapi_server_s = type opaque
%struct.gs_memory_struct_type_s = type { i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }
%struct.struct_shared_procs_s = type opaque
%struct.rc_header_s = type { i64, %struct.gs_memory_s*, void (%struct.gs_memory_s*, i8*, i8*)* }
%struct.gx_device_color_info_s = type { i32, i32, i32, i16, i8, i32, i32, i32, i32, %struct.gx_device_anti_alias_info_s, i32, [64 x i8], [64 x i8], [64 x i64], i8*, i32, i64, i32 }
%struct.gx_device_anti_alias_info_s = type { i32, i32 }
%struct.gx_device_cached_colors_s = type { i64, i64 }
%struct.gx_stroked_gradient_recognizer_s = type { i32, [4 x %struct.gs_fixed_point_s], [4 x %struct.gs_fixed_point_s] }
%struct.gs_fixed_point_s = type { i32, i32 }
%struct.gdev_space_params_s = type { i64, i64, %struct.gx_band_params_s, i32, i32 }
%struct.gx_band_params_s = type { i32, i32, i64 }
%struct.cmm_dev_profile_s = type { [4 x %struct.cmm_profile_s*], %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, [4 x %struct.gsicc_rendering_param_s], i32, i32, i32, i32, i32, i32, %struct.gsicc_namelist_s*, i32, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.cmm_profile_s = type { i8, i8, i32, i32, i32, i32, %struct.gs_range_icc_s, i64, i32, [15 x i32], i32, i32, i32, %struct.gsicc_rendering_param_s, i8*, %struct.gx_device_s*, %struct.gsicc_namelist_s*, i8*, %struct.rc_header_s, i32, i8*, %struct.gs_memory_s*, %struct.gx_monitor_s* }
%struct.gs_range_icc_s = type { [15 x %struct.gs_range_s] }
%struct.gs_range_s = type { float, float }
%struct.gsicc_rendering_param_s = type { i32, i32, i32, i32, i32, i32 }
%struct.gx_monitor_s = type { %struct.gs_memory_s*, %union.gp_monitor }
%union.gp_monitor = type { i8* }
%struct.gsicc_namelist_s = type { i32, %struct.gsicc_colorname_s*, i8*, %struct.gs_devicen_color_map_s*, i32 }
%struct.gsicc_colorname_s = type { i8*, i32, %struct.gsicc_colorname_s* }
%struct.gs_devicen_color_map_s = type { i32, i32, i32, i32, i64, [64 x i32] }
%struct.gx_page_device_procs_s = type { i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* }
%struct.gs_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s, %struct.gs_state_s*, %struct.gs_matrix_s, i32, %struct.gs_matrix_s, i32, %struct.gx_path_s*, %struct.gx_clip_path_s*, %struct.gx_clip_stack_s*, %struct.gx_clip_path_s*, i64, i64, %struct.gx_clip_path_s*, i32, [2 x %struct.anon.2], %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_matrix_fixed_s, i32, i32, i32, %struct.gs_state_s*, i32, %struct.gx_device_s*, %struct.gs_device_filter_stack_s*, %struct.gs_state_client_procs_s }
%struct.gx_line_params_s = type { float, i32, i32, i32, i32, i32, float, float, float, i32, %struct.gs_matrix_s, %struct.gx_dash_params_s }
%struct.gx_dash_params_s = type { float*, i32, float, i32, float, i32, i32, float }
%struct.gs_point_s = type { double, double }
%struct.gs_transparency_source_s = type { float }
%struct.gs_xstate_trans_flags = type { i32, i32 }
%struct.gsicc_manager_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gsicc_devicen_s*, %struct.gsicc_smask_s*, i32, %struct.cmm_srcgtag_profile_s*, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.gsicc_devicen_s = type { %struct.gsicc_devicen_entry_s*, %struct.gsicc_devicen_entry_s*, i32 }
%struct.gsicc_devicen_entry_s = type { %struct.cmm_profile_s*, %struct.gsicc_devicen_entry_s* }
%struct.gsicc_smask_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gs_memory_s*, i32 }
%struct.cmm_srcgtag_profile_s = type { [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], %struct.cmm_profile_s*, %struct.gs_memory_s*, i32, i8*, %struct.rc_header_s }
%struct.gsicc_link_cache_s = type { %struct.gsicc_link_s*, i32, %struct.rc_header_s, %struct.gs_memory_s*, %struct.gx_monitor_s*, %struct.gx_semaphore_s*, i32 }
%struct.gsicc_link_s = type { i8*, %struct.gscms_procs_s, %struct.gsicc_hashlink_s, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_s*, %struct.gx_semaphore_s*, i32, i32, i32, i32, i32, i32, %struct.gscms_procs_s, i32, i32, i32 }
%struct.gsicc_hashlink_s = type { i64, i64, i64, i64 }
%struct.gscms_procs_s = type { void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)*, void (%struct.gx_device_s*, %struct.gsicc_link_s*, i8*, i8*, i32)*, void (%struct.gsicc_link_s*)*, i32 (i8*, i32)* }
%struct.gsicc_bufferdesc_s = type { i8, i8, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.gx_semaphore_s = type { %struct.gs_memory_s*, %union.gp_semaphore }
%union.gp_semaphore = type { i8* }
%struct.gsicc_profile_cache_s = type { %struct.gsicc_profile_entry_s*, i32, %struct.rc_header_s, %struct.gs_memory_s* }
%struct.gsicc_profile_entry_s = type { %struct.gs_color_space_s*, %struct.gsicc_profile_entry_s*, i64 }
%struct.gs_imager_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s }
%struct.gs_halftone_s = type { i32, %struct.rc_header_s, %union.anon }
%union.anon = type { %struct.gs_colorscreen_halftone_s }
%struct.gs_colorscreen_halftone_s = type { %union._css }
%union._css = type { [4 x %struct.gs_screen_halftone_s] }
%struct.gs_screen_halftone_s = type { float, float, float (double, double)*, float, float }
%struct.gs_int_point_s = type { i32, i32 }
%struct.gx_device_halftone_s = type { %struct.gx_ht_order_s, %struct.rc_header_s, i64, i32, %struct.gx_ht_order_component_s*, i32, i32, i32, i32 }
%struct.gx_ht_order_s = type { %struct.gx_ht_cell_params_s, i16, i16, i16, i16, i16, i16, i32, i32, i32, %struct.gx_ht_order_procs_s*, %struct.gs_memory_s*, i32*, i8*, %struct.gx_ht_cache_s*, %struct.gx_transfer_map_s*, %struct.gx_ht_order_screen_params_s, i8*, i32 }
%struct.gx_ht_cell_params_s = type { i16, i16, i16, i16, i16, i16, i64, i16, i16, i32, i32, i32 }
%struct.gx_ht_order_procs_s = type { i32, i32 (%struct.gx_ht_order_s*, i8*)*, i32 (%struct.gx_ht_order_s*, i32, %struct.gs_int_point_s*)*, i32 (%struct.gx_ht_tile_s*, i32, %struct.gx_ht_order_s*)*, i32 (%struct.gx_ht_order_s*, i16, i8*, i32, i32, i32, i32, i32)* }
%struct.gx_ht_tile_s = type { %struct.gx_strip_bitmap_s, i32, i32 }
%struct.gx_strip_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16, i16, i16, i32 }
%struct.gx_ht_cache_s = type opaque
%struct.gx_ht_order_screen_params_s = type { %struct.gs_matrix_s, i64 }
%struct.gx_ht_order_component_s = type { %struct.gx_ht_order_s, i32, i32 }
%struct.gs_cie_render_s = type { i32, %struct.rc_header_s, i64, i8*, %struct.gs_cie_wb_s, %struct.gs_matrix3_s, %struct.gs_range3_s, %struct.gs_cie_transform_proc3_s, %struct.gs_matrix3_s, %struct.gs_cie_render_proc3_s, %struct.gs_range3_s, %struct.gs_matrix3_s, %struct.gs_cie_render_proc3_s, %struct.gs_range3_s, %struct.gs_cie_render_table_s, %struct.gs_range3_s, %struct.gs_range3_s, %struct.gs_matrix3_s, [3 x float], %struct.gs_matrix3_s, %struct.gs_vector3_s, %struct.gs_vector3_s, %struct.anon.1 }
%struct.gs_cie_wb_s = type { %struct.gs_vector3_s, %struct.gs_vector3_s }
%struct.gs_cie_transform_proc3_s = type { i32 (i32, double, %struct.gs_cie_wbsd_s*, %struct.gs_cie_render_s*, float*)*, i8*, %struct.gs_const_string_s, i8* }
%struct.gs_cie_wbsd_s = type { %struct.anon, %struct.anon, %struct.anon, %struct.anon }
%struct.anon = type { %struct.gs_vector3_s, %struct.gs_vector3_s }
%struct.gs_const_string_s = type { i8*, i32 }
%struct.gs_cie_render_proc3_s = type { [3 x float (double, %struct.gs_cie_render_s*)*] }
%struct.gs_cie_render_table_s = type { %struct.gx_color_lookup_table_s, %struct.gs_cie_render_table_procs_s }
%struct.gx_color_lookup_table_s = type { i32, [4 x i32], i32, %struct.gs_const_string_s* }
%struct.gs_cie_render_table_procs_s = type { [4 x i16 (i8, %struct.gs_cie_render_s*)*] }
%struct.gs_range3_s = type { [3 x %struct.gs_range_s] }
%struct.gs_matrix3_s = type { %struct.gs_vector3_s, %struct.gs_vector3_s, %struct.gs_vector3_s, i32 }
%struct.gs_vector3_s = type { float, float, float }
%struct.anon.1 = type { %struct.gx_cie_vector_cache3_s, [3 x %struct.gx_cie_float_fixed_cache_s], [4 x %union.gx_cie_scalar_cache_s], i32 }
%struct.gx_cie_vector_cache3_s = type { [3 x %struct.gx_cie_vector_cache_s], [3 x %struct.cie_interpolation_range_s] }
%struct.gx_cie_vector_cache_s = type { %struct.cie_cache_floats_s, %struct.cie_cache_vectors_s }
%struct.cie_cache_floats_s = type { %struct.cie_cache_params_s, [512 x float] }
%struct.cie_cache_params_s = type { i32, double, double, %struct.cie_linear_params_s }
%struct.cie_linear_params_s = type { i32, float, float }
%struct.cie_cache_vectors_s = type { %struct.cie_vector_cache_params_s, [512 x %struct.cie_cached_vector3_s] }
%struct.cie_vector_cache_params_s = type { float, float, float, [3 x %struct.cie_interpolation_range_s] }
%struct.cie_cached_vector3_s = type { float, float, float }
%struct.cie_interpolation_range_s = type { float, float }
%struct.gx_cie_float_fixed_cache_s = type { %struct.cie_cache_floats_s, %union.if_ }
%union.if_ = type { %struct.cie_cache_ints_s }
%struct.cie_cache_ints_s = type { %struct.cie_cache_params_s, [512 x i32] }
%union.gx_cie_scalar_cache_s = type { %struct.cie_cache_floats_s }
%struct.gx_transfer_map_s = type { %struct.rc_header_s, {}*, %struct.gs_mapping_closure_s, i64, [256 x i16] }
%struct.gs_mapping_closure_s = type { float (double, %struct.gx_transfer_map_s*, i8*)*, i8* }
%struct.gx_transfer_s = type { i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s* }
%struct.gx_color_map_procs_s = type { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* }
%struct.gx_device_color_s = type { %struct.gx_device_color_type_s*, %union._c, %struct.gs_int_point_s, i32, %struct.gs_client_color_s, %struct._mask }
%struct.gx_device_color_type_s = type { %struct.gs_memory_struct_type_s*, void (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*)*, %struct.gx_device_halftone_s* (%struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_int_point_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gx_device_color_s*, i32, i32, i32, i32, %struct.gx_device_s*, i32, %struct.gx_rop_source_s*)*, i32 (%struct.gx_device_color_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*, %struct.gx_device_s*, i64, i8*, i32*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_device_s*, i64, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_s*, i64*)* }
%struct.gx_device_color_saved_s = type { %struct.gx_device_color_type_s*, %union._svc, %struct.gs_int_point_s }
%union._svc = type { %struct._svbin, [304 x i8] }
%struct._svbin = type { [2 x i64], i32, i32 }
%struct.gx_rop_source_s = type { i8*, i32, i32, i64, [2 x i64], i32, i32 }
%union._c = type { %struct._col }
%struct._col = type { %struct.gx_device_halftone_s*, i16, [64 x i8], [64 x i32], i16, i64 }
%struct.gs_client_color_s = type { %struct.gs_pattern_instance_s*, %struct.gs_paint_color_s }
%struct.gs_pattern_instance_s = type { %struct.rc_header_s, %struct.gs_pattern_type_s*, %struct.gs_state_s*, i64 }
%struct.gs_pattern_type_s = type { i32, %struct.pp_ }
%struct.pp_ = type { i32 (%struct.gs_pattern_template_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_pattern_template_s*, %struct.gs_matrix_s*, %struct.gs_state_s*, %struct.gs_memory_s*)*, %struct.gs_pattern_template_s* (%struct.gs_pattern_instance_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_client_color_s*, %struct.gs_state_s*)* }
%struct.gs_pattern_template_s = type { %struct.gs_pattern_type_s*, i32, %struct.gs_uid_s, i8* }
%struct.gs_uid_s = type { i64, i64* }
%struct.gs_paint_color_s = type { [64 x float] }
%struct._mask = type { %struct.mp_, i64, %struct.gx_color_tile_s* }
%struct.mp_ = type { i32, i32 }
%struct.gx_color_tile_s = type { i64, i32, %struct.gs_uid_s, i32, i32, %struct.gs_matrix_s, %struct.gs_rect_s, %struct.gx_strip_bitmap_s, %struct.gx_strip_bitmap_s, %struct.gx_pattern_trans_s*, %union.gx_device_clist_s*, i8, i8, i8, [2 x i8], i32, i32, i32 }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.gx_pattern_trans_s = type { %struct.gx_device_s*, i8*, %struct.gs_memory_s*, %struct.gx_pattern_trans_s*, %struct.gs_int_rect_s, i32, i32, i32, i32, i32, i32, %struct.pdf14_nonseparable_blending_procs_s*, i32, i32, %struct.gs_int_rect_s*, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)* }
%struct.gs_int_rect_s = type { %struct.gs_int_point_s, %struct.gs_int_point_s }
%struct.pdf14_nonseparable_blending_procs_s = type { void (i32, i8*, i8*, i8*)*, void (i32, i8*, i8*, i8*)* }
%struct.gx_image_enum_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32], i32, i32, i8, i8, i8, i8, i32, %struct.mc_, i8, i8, i8, i8, %struct.gs_matrix_s, %struct.r_, %struct.anon.14, i32, i32, %struct.gs_fixed_point_s, %struct.gs_fixed_point_s, i8* (i8*, i32*, i8*, i32, i32, %struct.sample_map_s*, i32, i32)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)*, %struct.gs_imager_state_s*, %struct.gs_color_space_s*, i8*, i32, i8*, i32, i32, i32, i8, i8, i8, i8, %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s, i32, i32, i32, i32, %struct.gx_device_clip_s*, %struct.gx_device_rop_texture_s*, %struct.stream_image_scale_state_s*, i32, %struct.gs_int_point_s, %struct.gs_fixed_point_s, %struct.gs_fixed_point_s, %struct.dd_, i32, i32, %struct.gs_int_point_s, i32, i32, i32, i32, i32, [65 x %struct.sample_map_s], %struct.gx_image_clue_s*, %struct.gx_device_color_s, %struct.gx_device_color_s, %struct.gx_device_color_s*, %struct.gx_device_color_s*, %struct.gsicc_link_s*, %struct.gx_image_color_cache_s*, i8*, i32, i32, i32, i8*, i32, i32, %struct.ht_landscape_info_s, %struct.gx_image_icc_setup_s, i32 }
%struct.gx_image_type_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gs_imager_state_s*, %struct.gs_image_common_s*, %struct.gs_int_point_s*)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s**)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s*)*, void (%struct.gs_image_common_s*, %struct.gs_memory_s*)*, i32 }
%struct.gs_image_common_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s }
%struct.stream_s = type opaque
%struct.gx_image_enum_procs_s = type { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*)*, i32 (%struct.gx_image_enum_common_s*, i8*)* }
%struct.gx_image_enum_common_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32] }
%struct.gx_image_plane_s = type { i8*, i32, i32 }
%struct.mc_ = type { [130 x i32], i32, i32, i32 }
%struct.r_ = type { i32, i32, i32, i32 }
%struct.anon.14 = type { i32, i32, i32, i32 }
%struct.sample_map_s = type { %union.sample_lookup_s, [16 x float], float, i32, i32 }
%union.sample_lookup_s = type { [16 x i32], [192 x i8] }
%struct.gs_fixed_rect_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gx_device_clip_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_clip_list_s, %struct.gx_clip_rect_s*, %struct.gs_int_point_s, %struct.gs_fixed_rect_s, i32 }
%struct.gx_clip_list_s = type { %struct.gx_clip_rect_s, %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, i32, i32, i32 }
%struct.gx_clip_rect_s = type { %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, i32, i32, i32, i32, i8 }
%struct.gx_device_rop_texture_s = type opaque
%struct.stream_image_scale_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8], %struct.stream_image_scale_params_s }
%struct.stream_template_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32, i32, void (%struct.stream_state_s*)*, void (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*)* }
%struct.stream_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8] }
%struct.stream_cursor_read_s = type { i8*, i8*, i8* }
%struct.stream_cursor_write_s = type { i8*, i8*, i8* }
%struct.stream_image_scale_params_s = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.dd_ = type { %struct.gx_dda_fixed_point_s, %struct.gx_dda_fixed_point_s, %struct.gx_dda_fixed_point_s }
%struct.gx_dda_fixed_point_s = type { %struct.gx_dda_fixed_s, %struct.gx_dda_fixed_s }
%struct.gx_dda_fixed_s = type { %struct._a, %struct._e }
%struct._a = type { i32, i32 }
%struct._e = type { i32, i32, i32 }
%struct.gx_image_clue_s = type { %struct.gx_device_color_s, i32 }
%struct.gx_image_color_cache_s = type { i32*, i8* }
%struct.ht_landscape_info_s = type { i32, [64 x i32], i32, i32, i32, i32, i32, i32, i32 }
%struct.gx_image_icc_setup_s = type { i32, i32, i32, i32 }
%union.gx_device_clist_s = type { %struct.gx_device_clist_writer_s }
%struct.gx_device_clist_writer_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_device_buf_procs_s, %struct.gs_memory_s*, i8*, i32, %struct.gx_band_params_s, i32, i32, %struct.gx_bits_cache_chunk_s, %struct.gx_bits_cache_s, i32, i32, %struct.tile_hash*, i32, i32, %struct.gx_band_page_info_s, i32, i64, %struct.clist_icctable_s*, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_cache_s**, i32, %struct.gx_clist_state_s*, i8*, i8*, i8*, %struct.cmd_list_s*, %struct.cmd_list_s, i32, i32, i32, i32, %struct.gx_strip_bitmap_s, i32, i32, i32, %struct.gs_imager_state_s, i32, i32, i32, i32, [11 x float], %struct.gx_clip_path_s*, i64, %struct.clist_color_space_s, [4 x i64], i64, i64, i64, i64, i32, i32, i32, i32, i32 (%struct.gx_device_s*, i32)*, i32, %struct.gs_pattern1_instance_s*, i32, i32, i32, i32, i32, i32, %struct.clist_writer_cropping_buffer_s*, i64, i32, i32, i32, i32, %struct.gx_device_color_info_s }
%struct.gx_device_buf_procs_s = type { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)*, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)*, void (%struct.gx_device_s*)* }
%struct.gx_render_plane_s = type { i32, i32, i32 }
%struct.gx_colors_usage_s = type { i64, i32, %struct.gs_int_rect_s }
%struct.gx_device_buf_space_s = type { i64, i64, i32 }
%struct.gx_bits_cache_chunk_s = type { %struct.gx_bits_cache_chunk_s*, i8*, i32, i32 }
%struct.gx_bits_cache_s = type { %struct.gx_bits_cache_chunk_s*, i32, i32, i32 }
%struct.tile_hash = type { i64 }
%struct.gx_band_page_info_s = type { [4096 x i8], i8*, [4096 x i8], i8*, %struct.clist_io_procs_s*, i32, i64, i64, %struct.gx_band_params_s }
%struct.clist_io_procs_s = type { i32 (i8*, i8*, i8**, %struct.gs_memory_s*, %struct.gs_memory_s*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)*, i32 (i8*, i32)*, i32 (i8*)*, i64 (i8*)*, void (i8*, i32, i8*)*, i32 (i8*, i64, i32, i8*)* }
%struct.clist_icctable_s = type { i32, %struct.gs_memory_s*, %struct.clist_icctable_entry_s*, %struct.clist_icctable_entry_s* }
%struct.clist_icctable_entry_s = type { %struct.clist_icc_serial_entry_s, %struct.clist_icctable_entry_s*, %struct.cmm_profile_s*, i32 }
%struct.clist_icc_serial_entry_s = type { i64, i64, i32 }
%struct.gx_clist_state_s = type { [2 x i64], %struct.gx_device_color_saved_s, i32, i64, i64, %struct.gs_int_point_s, [2 x i64], [2 x %struct.gx_device_color_s], %struct.gx_cmd_rect, i32, i16, i16, i32, i32, i32, %struct.cmd_list_s, %struct.gx_colors_usage_s }
%struct.gx_cmd_rect = type { i32, i32, i32, i32 }
%struct.cmd_list_s = type { %struct.cmd_prefix_s*, %struct.cmd_prefix_s* }
%struct.cmd_prefix_s = type { %struct.cmd_prefix_s*, i32, i64 }
%struct.clist_color_space_s = type { i8, i64, %struct.clist_icc_color_s, %struct.gs_color_space_s* }
%struct.clist_icc_color_s = type { i64, i8, i32, i32, i32 }
%struct.gs_pattern1_instance_s = type { %struct.rc_header_s, %struct.gs_pattern_type_s*, %struct.gs_state_s*, i64, %struct.gs_pattern1_template_s, %struct.gs_matrix_s, %struct.gs_rect_s, i32, i32, i32, i32, i32, %struct.gs_int_point_s, i64 }
%struct.gs_pattern1_template_s = type { %struct.gs_pattern_type_s*, i32, %struct.gs_uid_s, i8*, i32, i32, i32, %struct.gs_rect_s, float, float, i32 (%struct.gs_client_color_s*, %struct.gs_state_s*)* }
%struct.clist_writer_cropping_buffer_s = type { i32, i32, i32, i32, %struct.clist_writer_cropping_buffer_s* }
%struct.gx_pattern_cache_s = type { %struct.gs_memory_s*, %struct.gx_color_tile_s*, i32, i32, i32, i64, i64, void (%struct.gx_pattern_cache_s*)* }
%struct.gs_color_space_s = type { %struct.gs_color_space_type_s*, %struct.rc_header_s, i64, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.client_color_space_data_s*, %struct.cmm_profile_s*, %union.anon.3 }
%struct.gs_color_space_type_s = type { i32, i32, i32, %struct.gs_memory_struct_type_s*, i32 (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, %struct.gs_color_space_s* (%struct.gs_color_space_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i16*, %struct.gs_imager_state_s*, %struct.gx_device_s*)*, i32 (i16*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, void (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.stream_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, float, %struct.gsicc_link_s*)*, i32 (%struct.gs_color_space_s*)* }
%struct.client_color_space_data_s = type { void (%struct.gs_color_space_s*, i32)* }
%union.anon.3 = type { %struct.gs_device_n_params_s }
%struct.gs_device_n_params_s = type { i64*, i32, %struct.gs_device_n_map_s*, %struct.gs_device_n_attributes_s*, i32, i32 (%struct.gs_memory_s*, i64, i8**, i32*)* }
%struct.gs_device_n_map_s = type opaque
%struct.gs_device_n_attributes_s = type opaque
%struct.gx_cie_joint_caches_s = type { i64, i64, i32, i32, %struct.rc_header_s, i32 (<2 x float>, float, i16*, float*, %struct.gs_imager_state_s*, %struct.gs_color_space_s*)*, i32, i32, %struct.gx_cie_vector_cache3_s, %struct.gs_cie_wbsd_s, i32, %struct.gx_cie_vector_cache3_s, i32 }
%struct.gs_matrix_s = type { float, float, float, float, float, float }
%struct.gx_path_s = type { %struct.gx_path_segments_s, %struct.gs_memory_s*, i32, %struct.gx_path_segments_s*, %struct.segment_s*, %struct.gs_fixed_rect_s, %struct.segment_s*, i8, i8, i8, i8, i8, i32, i32, %struct.gs_fixed_point_s, %struct.gx_path_procs_s* }
%struct.gx_path_segments_s = type { %struct.rc_header_s, %struct.psc_ }
%struct.psc_ = type { %struct.subpath_s*, %struct.subpath_s* }
%struct.subpath_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.segment_s*, i32, %struct.line_close_segment, i8 }
%struct.line_close_segment = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.subpath_s* }
%struct.segment_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s }
%struct.gx_path_procs_s = type { i32 (%struct.gx_path_s*, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32)*, i8 (%struct.gx_path_s*, i8)* }
%struct.gx_clip_stack_s = type opaque
%struct.gx_clip_path_s = type { %struct.gx_path_s, %struct.gx_clip_rect_list_s, i32, %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s, %struct.gx_clip_rect_list_s*, i32, %struct.gx_cpath_path_list_s*, i64 }
%struct.gx_clip_rect_list_s = type { %struct.rc_header_s, %struct.gx_clip_list_s }
%struct.gx_cpath_path_list_s = type { %struct.gx_path_s, %struct.rc_header_s, i32, %struct.gx_cpath_path_list_s* }
%struct.anon.2 = type { %struct.gs_color_space_s*, %struct.gs_client_color_s*, %struct.gx_device_color_s* }
%struct.gs_font_s = type opaque
%struct.gs_matrix_fixed_s = type { float, float, float, float, float, float, i32, i32, i32 }
%struct.gs_device_filter_stack_s = type { %struct.gs_device_filter_stack_s*, %struct.gs_device_filter_s*, %struct.gx_device_s*, %struct.rc_header_s }
%struct.gs_device_filter_s = type { i32 (%struct.gs_device_filter_s*, %struct.gs_memory_s*, %struct.gs_state_s*, %struct.gx_device_s**, %struct.gx_device_s*)*, i32 (%struct.gs_device_filter_s*, %struct.gs_memory_s*, %struct.gs_state_s*, %struct.gx_device_s*)*, i32 (%struct.gs_device_filter_s*, %struct.gs_memory_s*, %struct.gs_state_s*, %struct.gx_device_s*)* }
%struct.gs_state_client_procs_s = type { i8* (%struct.gs_memory_s*)*, i32 (i8*, i8*)*, void (i8*, %struct.gs_memory_s*)*, i32 (i8*, i8*, i32)* }
%struct.gx_tile_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16 }
%struct.gx_xfont_procs_s = type opaque
%struct.gx_fill_params_s = type { i32, %struct.gs_fixed_point_s, float }
%struct.gx_stroke_params_s = type { float, i32 }
%struct.gs_fixed_edge_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gs_image1_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s, i32, i32, i32, [130 x float], i32, i32, i32, %struct.gs_color_space_s*, i32, i32, i32, i32 }
%struct.gs_get_bits_params_s = type opaque
%struct.gs_composite_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s* }
%struct.gs_composite_type_s = type { i8, %struct.gs_composite_type_procs_s }
%struct.gs_composite_type_procs_s = type { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)*, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)*, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)*, i32 (%struct.gs_composite_s*, i8, i8)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* }
%struct.gs_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32 }
%struct.gs_param_list_procs_s = type { i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_typed_value_s*)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*, i32)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*)*, i32 (%struct.gs_param_list_s*, %union.gs_param_enumerator_s*, %struct.gs_param_string_s*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*)* }
%struct.gs_param_typed_value_s = type { %union.gs_param_value_s, i32 }
%union.gs_param_value_s = type { %struct.gs_param_string_s }
%struct.gs_param_string_s = type { i8*, i32, i32 }
%struct.gs_param_collection_s = type { %struct.gs_param_list_s*, i32 }
%union.gs_param_enumerator_s = type { i64 }
%struct.gs_text_params_s = type { i32, %union.sd_, i32, %struct.gs_point_s, %struct.gs_point_s, %union.s_, float*, float*, i32 }
%union.sd_ = type { i8* }
%union.s_ = type { i64 }
%struct.gs_text_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s }
%struct.gs_text_enum_procs_s = type { i32 (%struct.gs_text_enum_s*, %struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*, %struct.gs_point_s*)*, i32 (%struct.gs_text_enum_s*, double*, i32)*, i32 (%struct.gs_text_enum_s*)*, void (%struct.gs_text_enum_s*, i8*)* }
%struct.cached_fm_pair_s = type opaque
%struct.gx_font_stack_s = type { i32, [6 x %struct.gx_font_stack_item_s] }
%struct.gx_font_stack_item_s = type { %struct.gs_font_s*, i32 }
%struct.gs_log2_scale_point_s = type { i32, i32 }
%struct.gs_text_returned_s = type { i64, i64, %struct.gs_point_s }
%struct.gs_transparency_group_params_s = type { %struct.gs_color_space_s*, i32, i32, i32, i32, i32, i32, i32, i64, %struct.cmm_profile_s* }
%struct.gx_transparency_mask_params_s = type { i32, i32, i32, i32, [64 x float], float, i32, i32, i32, i32, [256 x i8], i64, %struct.cmm_profile_s* }
%struct.gx_cm_color_map_procs_s = type { void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)* }
%struct.gs_fill_attributes_s = type { %struct.gs_fixed_rect_s*, i32, %struct.gx_device_halftone_s*, i32, i32, i32, %struct.patch_fill_state_s* }
%struct.patch_fill_state_s = type opaque
%struct.gs_devn_params_s = type { i32, i8**, i32, i32, i32, %struct.gs_separations_s, i32, [70 x i32], %struct.compressed_color_list_s*, %struct.compressed_color_list_s*, %struct.gs_separations_s }
%struct.compressed_color_list_s = type { %struct.gs_memory_s*, i32, i32, i32, %union.anon.13 }
%union.anon.13 = type { [256 x %struct.comp_bit_map_list_s] }
%struct.comp_bit_map_list_s = type { i16, i16, i32, i64, i64 }
%struct.gs_separations_s = type { i32, [64 x %struct.devn_separation_name_s] }
%struct.devn_separation_name_s = type { i32, i8* }
%struct.gx_process_page_options_s = type { i32 (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i32, i32, i8**)*, void (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_int_rect_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, i8*)*, i8*, i32 }
%struct.pdf14_procs_s = type { void (i32, i64, %struct.pdf14_device_s*, i8*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* }
%struct.pdf14_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gs_devn_params_s, %struct.pdf14_procs_s*, %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_ctx_s*, %struct.pdf14_smaskcolor_s*, float, float, float, i32, i32, i32, i32, i32, i64, %struct.gx_device_s*, i32, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_device_color_info_s, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, %struct.pdf14_parent_color_s* }
%struct.pdf14_ctx_s = type { %struct.pdf14_buf_s*, %struct.pdf14_mask_s*, %struct.gs_memory_s*, %struct.gs_int_rect_s, i32, i32, i32, i32 }
%struct.pdf14_buf_s = type { %struct.pdf14_buf_s*, i8*, i32, i32, i8, i8, i32, i32, i32, i32, %struct.gs_int_rect_s, i32, i32, i32, i32, i8*, i8*, %struct.gs_int_rect_s, %struct.pdf14_mask_s*, i32, i32, i32, %struct.pdf14_parent_color_s*, i32 }
%struct.pdf14_mask_s = type { %struct.pdf14_rcmask_s*, %struct.pdf14_mask_s*, %struct.gs_memory_s* }
%struct.pdf14_rcmask_s = type { %struct.pdf14_buf_s*, %struct.rc_header_s, %struct.gs_memory_s* }
%struct.pdf14_smaskcolor_s = type { %struct.gsicc_smask_s*, i32 }
%struct.pdf14_parent_color_s = type { i32, i32, i32, [64 x i8], [64 x i8], i8, i32, i32, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, %struct.pdf14_procs_s*, %struct.pdf14_nonseparable_blending_procs_s*, %struct.cmm_profile_s*, %struct.pdf14_parent_color_s* }
%struct.gc_struct_data_s = type { i16, i16, %struct.gs_memory_struct_type_s*, %struct.gc_ptr_element_s* }
%struct.gc_ptr_element_s = type { i16, i16 }
%struct.gdev_prn_start_render_params_s = type opaque
%struct.gx_page_queue_s = type opaque
%struct.gx_device_printer_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], %struct.gx_printer_device_procs_s, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s }
%struct.gx_printer_device_procs_s = type { {}*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }
%struct.bg_print_s = type { %struct.gx_semaphore_s*, %struct.gx_device_s*, i8*, i32, i32 }
%struct.gx_saved_pages_list_s = type { i32, i32, i32, i32, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_pages_list_element_s*, %struct.gs_memory_s* }
%struct.gx_saved_pages_list_element_s = type { i32, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_page_s* }
%struct.gx_saved_page_s = type { [32 x i8], %struct.gx_device_color_info_s, [4096 x i8], [4096 x i8], %struct.clist_io_procs_s*, i32, i64, %struct.gx_band_params_s, %struct.gs_memory_s*, i32, i8* }
%struct.gx_device_forward_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }
%struct.gs_pdf14trans_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s*, %struct.gs_pdf14trans_params_s }
%struct.gs_pdf14trans_params_s = type { i32, i32, i32, i32, i32, i32, %struct.gs_rect_s, i32, i32, i32, i32, [64 x float], float, %struct.gs_function_s*, [256 x i8], i32, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, i32, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, i32, i64, %struct.cmm_profile_s*, i32, i32 }
%struct.gs_function_s = type opaque
%struct.gx_device_clist_reader_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_device_buf_procs_s, %struct.gs_memory_s*, i8*, i32, %struct.gx_band_params_s, i32, i32, %struct.gx_bits_cache_chunk_s, %struct.gx_bits_cache_s, i32, i32, %struct.tile_hash*, i32, i32, %struct.gx_band_page_info_s, i32, i64, %struct.clist_icctable_s*, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_cache_s**, %struct.gx_render_plane_s, %struct.gx_placed_page_s*, %struct.gx_colors_usage_s*, i32, i8*, i32, %struct.clist_render_thread_control_s*, i8*, i32, i32, i32 }
%struct.gx_placed_page_s = type { %struct.gx_saved_page_s*, %struct.gs_int_point_s }
%struct.clist_render_thread_control_s = type { i32, %struct.gs_memory_s*, %struct.gx_semaphore_s*, %struct.gx_semaphore_s*, %struct.gx_device_s*, %struct.gx_device_s*, i32, i8*, %struct.gx_process_page_options_s*, i8* }
%struct.gs_pattern2_instance_s = type { %struct.rc_header_s, %struct.gs_pattern_type_s*, %struct.gs_state_s*, i64, %struct.gs_pattern2_template_s, i32 }
%struct.gs_pattern2_template_s = type { %struct.gs_pattern_type_s*, i32, %struct.gs_uid_s, i8*, %struct.gs_shading_s* }
%struct.gs_shading_s = type opaque
%struct._pat = type { %struct.gx_color_tile_s* }
%struct.gs_overprint_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s*, %struct.gs_overprint_params_s }
%struct.gs_overprint_params_s = type { i32, i32, i32, i64, i16, i32 }
%struct.gxdso_device_child_request_s = type { %struct.gx_device_s*, i32 }
%struct._devn = type { [64 x i16] }
%struct.gx_device_clist_common_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_device_buf_procs_s, %struct.gs_memory_s*, i8*, i32, %struct.gx_band_params_s, i32, i32, %struct.gx_bits_cache_chunk_s, %struct.gx_bits_cache_s, i32, i32, %struct.tile_hash*, i32, i32, %struct.gx_band_page_info_s, i32, i64, %struct.clist_icctable_s*, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_cache_s** }
%struct.gc_procs_common_s = type { i8* (i8*, %struct.gc_state_s*)*, void (%struct.gs_string_s*, %struct.gc_state_s*)*, void (%struct.gs_const_string_s*, %struct.gc_state_s*)*, void (%struct.gs_param_string_s*, %struct.gc_state_s*)* }
%struct.gs_string_s = type { i8*, i32 }
%struct.gx_device_pdf14_accum_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], %struct.gx_printer_device_procs_s, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }
%struct.gs_c_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32, %struct.gs_c_param_s*, %struct.gs_param_list_s*, i32, i32, i32 }
%struct.gs_c_param_s = type opaque
%struct.keyname_link_list_s = type { %struct.keyname_link_list_s*, i8* }

@pdf14_Gray_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @pdf14_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @pdf14_output_page, i32 (%struct.gx_device_s*)* @pdf14_close, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @pdf14_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @pdf14_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @pdf14_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @pdf14_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_discard_trans_layer, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevGray_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevGray_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @pdf14_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* @pdf14_copy_planes, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @pdf14_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str = private unnamed_addr constant [10 x i8] c"pdf14gray\00", align 1
@st_pdf14_device = internal constant %struct.gs_memory_struct_type_s { i32 5024, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @pdf14_device_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @pdf14_device_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* @gx_device_finalize, i8* null }, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c"DeviceRGB\00", align 1
@gray_pdf14_procs = internal constant %struct.pdf14_procs_s { void (i32, i64, %struct.pdf14_device_s*, i8*)* @pdf14_unpack_additive, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_put_image }, align 8
@gray_blending_procs = internal constant %struct.pdf14_nonseparable_blending_procs_s { void (i32, i8*, i8*, i8*)* @art_blend_luminosity_custom_8, void (i32, i8*, i8*, i8*)* @art_blend_saturation_custom_8 }, align 8
@gs_pdf14_Gray_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_Gray_procs, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 8, i8 -1, i32 0, i32 3, i32 1, i32 4, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @gray_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_RGB_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @pdf14_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @pdf14_output_page, i32 (%struct.gx_device_s*)* @pdf14_close, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @pdf14_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @pdf14_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @pdf14_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @pdf14_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_discard_trans_layer, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevRGB_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevRGB_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @pdf14_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* @pdf14_copy_planes, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @pdf14_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"pdf14RGB\00", align 1
@rgb_pdf14_procs = internal constant %struct.pdf14_procs_s { void (i32, i64, %struct.pdf14_device_s*, i8*)* @pdf14_unpack_additive, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_put_image }, align 8
@rgb_blending_procs = internal constant %struct.pdf14_nonseparable_blending_procs_s { void (i32, i8*, i8*, i8*)* @art_blend_luminosity_rgb_8, void (i32, i8*, i8*, i8*)* @art_blend_saturation_rgb_8 }, align 8
@gs_pdf14_RGB_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_RGB_procs, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_CMYK_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @pdf14_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @pdf14_output_page, i32 (%struct.gx_device_s*)* @pdf14_close, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @pdf14_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @pdf14_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @pdf14_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @pdf14_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_discard_trans_layer, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevCMYK_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevCMYK_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @pdf14_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* @pdf14_copy_planes, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @pdf14_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.3 = private unnamed_addr constant [10 x i8] c"pdf14cmyk\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"DeviceCMYK\00", align 1
@cmyk_pdf14_procs = internal constant %struct.pdf14_procs_s { void (i32, i64, %struct.pdf14_device_s*, i8*)* @pdf14_unpack_subtractive, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_put_image }, align 8
@cmyk_blending_procs = internal constant %struct.pdf14_nonseparable_blending_procs_s { void (i32, i8*, i8*, i8*)* @art_blend_luminosity_cmyk_8, void (i32, i8*, i8*, i8*)* @art_blend_saturation_cmyk_8 }, align 8
@gs_pdf14_CMYK_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_CMYK_procs, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 4, i32 4, i32 0, i16 32, i8 3, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_CMYKspot_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @pdf14_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @pdf14_output_page, i32 (%struct.gx_device_s*)* @pdf14_close, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @pdf14_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @pdf14_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @pdf14_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @pdf14_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_discard_trans_layer, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @pdf14_cmykspot_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @pdf14_cmykspot_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @pdf14_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* @pdf14_copy_planes, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @pdf14_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.5 = private unnamed_addr constant [14 x i8] c"pdf14cmykspot\00", align 1
@DeviceCMYKComponents = external global [0 x i8*], align 8
@cmykspot_pdf14_procs = internal constant %struct.pdf14_procs_s { void (i32, i64, %struct.pdf14_device_s*, i8*)* @pdf14_unpack_compressed, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_cmykspot_put_image }, align 8
@gs_pdf14_CMYKspot_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_CMYKspot_procs, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 64, i32 64, i32 0, i16 64, i8 63, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s { i32 8, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @DeviceCMYKComponents, i32 0, i32 0), i32 4, i32 0, i32 -1, %struct.gs_separations_s zeroinitializer, i32 0, [70 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], %struct.compressed_color_list_s* null, %struct.compressed_color_list_s* null, %struct.gs_separations_s zeroinitializer }, %struct.pdf14_procs_s* @cmykspot_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_custom_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @pdf14_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @pdf14_output_page, i32 (%struct.gx_device_s*)* @pdf14_close, i64 (%struct.gx_device_s*, i16*)* @gx_forward_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_forward_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @pdf14_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @pdf14_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @pdf14_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @pdf14_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_discard_trans_layer, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_forward_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_forward_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @gx_forward_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_forward_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @pdf14_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* @pdf14_copy_planes, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @pdf14_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.6 = private unnamed_addr constant [12 x i8] c"pdf14custom\00", align 1
@custom_pdf14_procs = internal constant %struct.pdf14_procs_s { void (i32, i64, %struct.pdf14_device_s*, i8*)* @pdf14_unpack_custom, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_custom_put_image }, align 8
@custom_blending_procs = internal constant %struct.pdf14_nonseparable_blending_procs_s { void (i32, i8*, i8*, i8*)* @art_blend_luminosity_custom_8, void (i32, i8*, i8*, i8*)* @art_blend_saturation_custom_8 }, align 8
@gs_pdf14_custom_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_custom_procs, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 64, i32 64, i32 0, i16 64, i8 63, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s { i32 8, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @DeviceCMYKComponents, i32 0, i32 0), i32 4, i32 0, i32 -1, %struct.gs_separations_s zeroinitializer, i32 0, [70 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], %struct.compressed_color_list_s* null, %struct.compressed_color_list_s* null, %struct.gs_separations_s zeroinitializer }, %struct.pdf14_procs_s* @custom_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @custom_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@.str.7 = private unnamed_addr constant [22 x i8] c"gx_device_pdf14_accum\00", align 1
@pdf14_accum_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 1, i16 0, %struct.gs_memory_struct_type_s* @st_device_printer, %struct.gc_ptr_element_s* getelementptr inbounds ([1 x %struct.gc_ptr_element_s], [1 x %struct.gc_ptr_element_s]* @pdf14_accum_enum_ptrs, i32 0, i32 0) }, align 8
@st_pdf14_accum = constant %struct.gs_memory_struct_type_s { i32 18480, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* @gx_device_finalize, i8* bitcast (%struct.gc_struct_data_s* @pdf14_accum_reloc_ptrs to i8*) }, align 8
@pdf14_accum_Gray_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @gdev_prn_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* null, i32 (%struct.gx_device_s*)* @gdev_prn_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_8bit_map_gray_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_8bit_map_color_gray, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @gdev_prn_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* @gx_default_get_profile, void (%struct.gx_device_s*, i32)* @gx_default_set_graphics_type_tag, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.8 = private unnamed_addr constant [17 x i8] c"pdf14-accum-Gray\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"DeviceGray\00", align 1
@pdf14_accum_Gray = constant { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* } { i32 18480, %struct.gx_device_procs_s* @pdf14_accum_Gray_procs, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_accum, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 1, i32 1, i32 1, i16 8, i8 0, i32 255, i32 0, i32 256, i32 0, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, [2 x float] zeroinitializer, [4 x float] zeroinitializer, i32 0, [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, [11240 x i8] zeroinitializer, { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* } { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)* @no_print_page, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_print_page_copies, %struct.gx_device_buf_procs_s { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)* @gx_default_create_buf_device, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)* @gx_default_size_buf_device, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)* @gx_default_setup_buf_device, void (%struct.gx_device_s*)* @gx_default_destroy_buf_device }, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)* @gx_default_get_space_params, i32 (%struct.gdev_prn_start_render_params_s*)* @gx_default_start_render_thread, i32 (%struct.gx_device_printer_s*)* @gx_default_open_render_device, i32 (%struct.gx_device_printer_s*)* @gx_default_close_render_device, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_buffer_page }, [4096 x i8] zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, %struct._IO_FILE* null, i64 0, i8* null, %struct.gs_memory_s* null, %struct.gs_memory_s* null, i32 (%struct.gx_device_s*, i32)* null, %struct.gx_page_queue_s* null, i32 0, %struct.gx_device_printer_s* null, i32 0, i32 0, %struct.bg_print_s zeroinitializer, i32 0, %struct.gx_saved_pages_list_s* null, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null }, align 8
@pdf14_accum_RGB_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @gdev_prn_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* null, i32 (%struct.gx_device_s*)* @gdev_prn_close, i64 (%struct.gx_device_s*, i16*)* @gx_default_rgb_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_rgb_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @gdev_prn_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* @gx_default_get_profile, void (%struct.gx_device_s*, i32)* @gx_default_set_graphics_type_tag, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.10 = private unnamed_addr constant [16 x i8] c"pdf14-accum-RGB\00", align 1
@pdf14_accum_RGB = constant { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* } { i32 18480, %struct.gx_device_procs_s* @pdf14_accum_RGB_procs, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_accum, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 0, i32 255, i32 1, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, [2 x float] zeroinitializer, [4 x float] zeroinitializer, i32 0, [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, [11240 x i8] zeroinitializer, { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* } { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)* @no_print_page, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_print_page_copies, %struct.gx_device_buf_procs_s { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)* @gx_default_create_buf_device, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)* @gx_default_size_buf_device, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)* @gx_default_setup_buf_device, void (%struct.gx_device_s*)* @gx_default_destroy_buf_device }, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)* @gx_default_get_space_params, i32 (%struct.gdev_prn_start_render_params_s*)* @gx_default_start_render_thread, i32 (%struct.gx_device_printer_s*)* @gx_default_open_render_device, i32 (%struct.gx_device_printer_s*)* @gx_default_close_render_device, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_buffer_page }, [4096 x i8] zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, %struct._IO_FILE* null, i64 0, i8* null, %struct.gs_memory_s* null, %struct.gs_memory_s* null, i32 (%struct.gx_device_s*, i32)* null, %struct.gx_page_queue_s* null, i32 0, %struct.gx_device_printer_s* null, i32 0, i32 0, %struct.bg_print_s zeroinitializer, i32 0, %struct.gx_saved_pages_list_s* null, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null }, align 8
@pdf14_accum_CMYK_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @gdev_prn_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* null, i32 (%struct.gx_device_s*)* @gdev_prn_close, i64 (%struct.gx_device_s*, i16*)* @cmyk_8bit_map_cmyk_color, i32 (%struct.gx_device_s*, i64, i16*)* @cmyk_8bit_map_color_cmyk, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gdev_prn_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @gdev_prn_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* @gx_default_get_profile, void (%struct.gx_device_s*, i32)* @gx_default_set_graphics_type_tag, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.11 = private unnamed_addr constant [17 x i8] c"pdf14-accum-CMYK\00", align 1
@pdf14_accum_CMYK = constant { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* } { i32 18480, %struct.gx_device_procs_s* @pdf14_accum_CMYK_procs, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_accum, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 4, i32 4, i32 0, i16 32, i8 3, i32 0, i32 255, i32 1, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, [2 x float] zeroinitializer, [4 x float] zeroinitializer, i32 0, [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, [11240 x i8] zeroinitializer, { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* } { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)* @no_print_page, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_print_page_copies, %struct.gx_device_buf_procs_s { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)* @gx_default_create_buf_device, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)* @gx_default_size_buf_device, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)* @gx_default_setup_buf_device, void (%struct.gx_device_s*)* @gx_default_destroy_buf_device }, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)* @gx_default_get_space_params, i32 (%struct.gdev_prn_start_render_params_s*)* @gx_default_start_render_thread, i32 (%struct.gx_device_printer_s*)* @gx_default_open_render_device, i32 (%struct.gx_device_printer_s*)* @gx_default_close_render_device, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_buffer_page }, [4096 x i8] zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, %struct._IO_FILE* null, i64 0, i8* null, %struct.gs_memory_s* null, %struct.gs_memory_s* null, i32 (%struct.gx_device_s*, i32)* null, %struct.gx_page_queue_s* null, i32 0, %struct.gx_device_printer_s* null, i32 0, i32 0, %struct.bg_print_s zeroinitializer, i32 0, %struct.gx_saved_pages_list_s* null, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null }, align 8
@.str.12 = private unnamed_addr constant [29 x i8] c"pdf14_get_buffer_information\00", align 1
@gs_composite_pdf14trans_type = constant %struct.gs_composite_type_s { i8 3, %struct.gs_composite_type_procs_s { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @c_pdf14trans_create_default_compositor, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)* @c_pdf14trans_equal, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)* @c_pdf14trans_write, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)* @c_pdf14trans_read, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)* @c_pdf14trans_adjust_ctm, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)* @c_pdf14trans_is_closing, i32 (%struct.gs_composite_s*, i8, i8)* @c_pdf14trans_is_friendly, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @c_pdf14trans_clist_write_update, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @c_pdf14trans_clist_read_update, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* @c_pdf14trans_get_cropping } }, align 8
@gs_composite_pdf14trans_no_clist_writer_type = constant %struct.gs_composite_type_s { i8 3, %struct.gs_composite_type_procs_s { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @c_pdf14trans_create_default_compositor, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)* @c_pdf14trans_equal, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)* @c_pdf14trans_write, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)* @c_pdf14trans_read, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)* @c_pdf14trans_adjust_ctm, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)* @c_pdf14trans_is_closing, i32 (%struct.gs_composite_s*, i8, i8)* @c_pdf14trans_is_friendly, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @gx_default_composite_clist_write_update, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @c_pdf14trans_clist_read_update, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* @c_pdf14trans_get_cropping } }, align 8
@.str.13 = private unnamed_addr constant [16 x i8] c"send_pdf14trans\00", align 1
@pdf14_clist_Gray_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* null, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_forward_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_forward_sync_output, i32 (%struct.gx_device_s*, i32, i32)* @gx_forward_output_page, i32 (%struct.gx_device_s*)* @gx_forward_close_device, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_forward_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @gx_forward_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @gx_forward_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* @gx_forward_get_bits, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_procs, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_device, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @gx_forward_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* @gx_forward_get_band, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_copy_rop, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @gx_forward_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* @gx_forward_draw_thin_line, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* @gx_default_image_data, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* @gx_default_end_image, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_strip_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_strip_copy_rop, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* @gx_forward_get_clipping_box, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* @gx_forward_get_bits_rectangle, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_clist_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_hardware_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_clist_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevGray_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevGray_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gx_forward_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @gx_forward_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @gx_forward_fillpage, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.14 = private unnamed_addr constant [15 x i8] c"pdf14clistgray\00", align 1
@pdf14_clist_Gray_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_clist_Gray_procs, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 8, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @gray_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_clist_RGB_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* null, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_forward_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_forward_sync_output, i32 (%struct.gx_device_s*, i32, i32)* @gx_forward_output_page, i32 (%struct.gx_device_s*)* @gx_forward_close_device, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_forward_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @gx_forward_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @gx_forward_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* @gx_forward_get_bits, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_procs, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_device, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @gx_forward_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* @gx_forward_get_band, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_copy_rop, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @gx_forward_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* @gx_forward_draw_thin_line, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* @gx_default_image_data, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* @gx_default_end_image, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_strip_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_strip_copy_rop, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* @gx_forward_get_clipping_box, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* @gx_forward_get_bits_rectangle, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_clist_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_hardware_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_clist_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevRGB_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevRGB_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gx_forward_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @gx_forward_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @gx_forward_fillpage, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.15 = private unnamed_addr constant [14 x i8] c"pdf14clistRGB\00", align 1
@pdf14_clist_RGB_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_clist_RGB_procs, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_clist_CMYK_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* null, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_forward_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_forward_sync_output, i32 (%struct.gx_device_s*, i32, i32)* @gx_forward_output_page, i32 (%struct.gx_device_s*)* @gx_forward_close_device, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_forward_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @gx_forward_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @gx_forward_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* @gx_forward_get_bits, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_procs, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_device, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @gx_forward_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* @gx_forward_get_band, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_copy_rop, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @gx_forward_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* @gx_forward_draw_thin_line, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* @gx_default_image_data, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* @gx_default_end_image, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_strip_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_strip_copy_rop, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* @gx_forward_get_clipping_box, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* @gx_forward_get_bits_rectangle, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_clist_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_hardware_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_clist_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @gx_default_DevCMYK_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @gx_default_DevCMYK_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gx_forward_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @gx_forward_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @gx_forward_fillpage, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.16 = private unnamed_addr constant [15 x i8] c"pdf14clistcmyk\00", align 1
@pdf14_clist_CMYK_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_clist_CMYK_procs, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 4, i32 4, i32 0, i16 32, i8 3, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s zeroinitializer, %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@pdf14_clist_CMYKspot_procs = internal constant %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* null, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_forward_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_forward_sync_output, i32 (%struct.gx_device_s*, i32, i32)* @gx_forward_output_page, i32 (%struct.gx_device_s*)* @gx_forward_close_device, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_forward_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @gx_forward_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @gx_forward_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* @gx_forward_get_bits, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_put_params, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_procs, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_xfont_device, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @gx_forward_copy_alpha, i32 (%struct.gx_device_s*, i32, i32*)* @gx_forward_get_band, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_copy_rop, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @pdf14_clist_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @gx_forward_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* @gx_forward_draw_thin_line, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* @gx_default_image_data, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* @gx_default_end_image, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_strip_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* @gx_forward_strip_copy_rop, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* @gx_forward_get_clipping_box, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @pdf14_clist_begin_typed_image, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* @gx_forward_get_bits_rectangle, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_clist_create_compositor, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @gx_forward_get_hardware_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* @pdf14_clist_text_begin, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_group, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_group, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* @pdf14_begin_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_end_transparency_mask, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* @pdf14_cmykspot_get_color_mapping_procs, i32 (%struct.gx_device_s*, i8*, i32, i32)* @pdf14_cmykspot_get_color_comp_index, i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color, i32 (%struct.gx_device_s*, i64, i16*)* @pdf14_decode_color, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gx_forward_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_forward_update_spot_equivalent_colors, %struct.gs_devn_params_s* (%struct.gx_device_s*)* @gx_forward_ret_devn_params, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @gx_forward_fillpage, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_push_transparency_state, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* @pdf14_pop_transparency_state, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @pdf14_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gx_forward_copy_alpha_hl_color, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.17 = private unnamed_addr constant [19 x i8] c"pdf14clistcmykspot\00", align 1
@pdf14_clist_CMYKspot_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_clist_CMYKspot_procs, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 64, i32 64, i32 0, i16 64, i8 63, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s { i32 8, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @DeviceCMYKComponents, i32 0, i32 0), i32 4, i32 0, i32 -1, %struct.gs_separations_s zeroinitializer, i32 0, [70 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], %struct.compressed_color_list_s* null, %struct.compressed_color_list_s* null, %struct.gs_separations_s zeroinitializer }, %struct.pdf14_procs_s* @cmykspot_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@.str.18 = private unnamed_addr constant [17 x i8] c"pdf14clistcustom\00", align 1
@pdf14_clist_custom_device = constant %struct.pdf14_device_s { i32 5024, %struct.gx_device_procs_s* @pdf14_clist_CMYKspot_procs, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_pdf14_device, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 64, i32 64, i32 0, i16 64, i8 63, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 612, i32 792, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 6.120000e+02, float 7.920000e+02], [4 x float] zeroinitializer, i32 0, [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] [float 7.200000e+01, float 7.200000e+01], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_s* null, %struct.gs_devn_params_s { i32 8, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @DeviceCMYKComponents, i32 0, i32 0), i32 4, i32 0, i32 -1, %struct.gs_separations_s zeroinitializer, i32 0, [70 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], %struct.compressed_color_list_s* null, %struct.compressed_color_list_s* null, %struct.gs_separations_s zeroinitializer }, %struct.pdf14_procs_s* @custom_pdf14_procs, %struct.pdf14_nonseparable_blending_procs_s* @custom_blending_procs, %struct.pdf14_ctx_s* null, %struct.pdf14_smaskcolor_s* null, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, %struct.gx_device_s* null, i32 0, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_device_color_info_s zeroinitializer, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, %struct.pdf14_parent_color_s* null }, align 8
@.str.19 = private unnamed_addr constant [6 x i8] c"%s_%d\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"PDF14NumSpotColors\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"PDF14SpotName_%d\00", align 1
@.str.22 = private unnamed_addr constant [27 x i8] c"put_param_pdf14_spot_names\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"PDF14CompressedColorList\00", align 1
@st_pdf14_ctx = internal constant %struct.gs_memory_struct_type_s { i32 56, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_ctx_reloc_ptrs to i8*) }, align 8
@.str.24 = private unnamed_addr constant [14 x i8] c"pdf14_ctx_new\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"pdf14_ctx\00", align 1
@pdf14_ctx_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 2, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([2 x %struct.gc_ptr_element_s], [2 x %struct.gc_ptr_element_s]* @pdf14_ctx_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_ctx_enum_ptrs = internal constant [2 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s zeroinitializer, %struct.gc_ptr_element_s { i16 0, i16 8 }], align 2
@st_pdf14_buf = internal constant %struct.gs_memory_struct_type_s { i32 152, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_buf_reloc_ptrs to i8*) }, align 8
@.str.26 = private unnamed_addr constant [14 x i8] c"pdf14_buf_new\00", align 1
@st_pdf14_clr = internal constant %struct.gs_memory_struct_type_s { i32 224, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_clr_reloc_ptrs to i8*) }, align 8
@.str.27 = private unnamed_addr constant [12 x i8] c"pdf_buf_new\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"pdf14_buf\00", align 1
@pdf14_buf_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 6, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([6 x %struct.gc_ptr_element_s], [6 x %struct.gc_ptr_element_s]* @pdf14_buf_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_buf_enum_ptrs = internal constant [6 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s zeroinitializer, %struct.gc_ptr_element_s { i16 0, i16 80 }, %struct.gc_ptr_element_s { i16 0, i16 8 }, %struct.gc_ptr_element_s { i16 0, i16 88 }, %struct.gc_ptr_element_s { i16 0, i16 112 }, %struct.gc_ptr_element_s { i16 0, i16 136 }], align 16
@.str.29 = private unnamed_addr constant [10 x i8] c"pdf14_clr\00", align 1
@pdf14_clr_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 1, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([1 x %struct.gc_ptr_element_s], [1 x %struct.gc_ptr_element_s]* @pdf14_clr_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_clr_enum_ptrs = internal constant [1 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s { i16 0, i16 216 }], align 2
@st_pdf14_mask = internal constant %struct.gs_memory_struct_type_s { i32 24, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_mask_reloc_ptrs to i8*) }, align 8
@.str.30 = private unnamed_addr constant [23 x i8] c"pdf14_mask_element_new\00", align 1
@.str.31 = private unnamed_addr constant [9 x i8] c"pdf_mask\00", align 1
@pdf14_mask_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 2, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([2 x %struct.gc_ptr_element_s], [2 x %struct.gc_ptr_element_s]* @pdf14_mask_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_mask_enum_ptrs = internal constant [2 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s zeroinitializer, %struct.gc_ptr_element_s { i16 0, i16 8 }], align 2
@st_pdf14_rcmask = internal constant %struct.gs_memory_struct_type_s { i32 40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_rcmask_reloc_ptrs to i8*) }, align 8
@.str.32 = private unnamed_addr constant [18 x i8] c"pdf14_maskbuf_new\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"pdf_rcmask\00", align 1
@pdf14_rcmask_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 1, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([1 x %struct.gc_ptr_element_s], [1 x %struct.gc_ptr_element_s]* @pdf14_rcmask_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_rcmask_enum_ptrs = internal constant [1 x %struct.gc_ptr_element_s] zeroinitializer, align 2
@.str.34 = private unnamed_addr constant [22 x i8] c"rc_pdf14_maskbuf_free\00", align 1
@.str.35 = private unnamed_addr constant [15 x i8] c"pdf14_buf_free\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"pdf14_ctx_free\00", align 1
@.str.37 = private unnamed_addr constant [24 x i8] c"pdf14_tile_pattern_fill\00", align 1
@.str.38 = private unnamed_addr constant [30 x i8] c"pdf14_push_transparency_group\00", align 1
@.str.39 = private unnamed_addr constant [17 x i8] c"./base/gdevp14.c\00", align 1
@.str.40 = private unnamed_addr constant [36 x i8] c"Knockout backdrop allocation failed\00", align 1
@.str.41 = private unnamed_addr constant [29 x i8] c"pdf14_pop_transparency_group\00", align 1
@.str.42 = private unnamed_addr constant [16 x i8] c"pdf14_fill_mask\00", align 1
@.str.43 = private unnamed_addr constant [27 x i8] c"pdf14_pattern_trans_render\00", align 1
@st_pdf14_smaskcolor = internal constant %struct.gs_memory_struct_type_s { i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @pdf14_smaskcolor_reloc_ptrs to i8*) }, align 8
@.str.44 = private unnamed_addr constant [28 x i8] c"pdf14_increment_smask_color\00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c"pdf14_smaskcolor\00", align 1
@pdf14_smaskcolor_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 1, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([1 x %struct.gc_ptr_element_s], [1 x %struct.gc_ptr_element_s]* @pdf14_smaskcolor_enum_ptrs, i32 0, i32 0) }, align 8
@pdf14_smaskcolor_enum_ptrs = internal constant [1 x %struct.gc_ptr_element_s] zeroinitializer, align 2
@.str.46 = private unnamed_addr constant [28 x i8] c"pdf14_decrement_smask_color\00", align 1
@.str.47 = private unnamed_addr constant [23 x i8] c"pdf14_free_smask_color\00", align 1
@__func__.pdf14_begin_transparency_group = private unnamed_addr constant [31 x i8] c"pdf14_begin_transparency_group\00", align 1
@.str.48 = private unnamed_addr constant [28 x i8] c"ICC data not found in clist\00", align 1
@__func__.pdf14_update_device_color_procs = private unnamed_addr constant [32 x i8] c"pdf14_update_device_color_procs\00", align 1
@pdf14_cmap_many_group = internal constant %struct.gx_color_map_procs_s { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_gray_direct_group, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_rgb_direct_group, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)* @pdf14_cmap_cmyk_direct_group, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_rgb_alpha_direct, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_separation_direct, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_devicen_direct, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_cmap_is_halftoned }, align 8
@gx_dc_type_data_pure = external constant %struct.gx_device_color_type_s, align 8
@gx_dc_type_data_devn = external constant %struct.gx_device_color_type_s, align 8
@.str.49 = private unnamed_addr constant [29 x i8] c"pdf14_end_transparency_group\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"pdf14_begin_transparency_mask\00", align 1
@.str.51 = private unnamed_addr constant [28 x i8] c"pdf14_end_transparency_mask\00", align 1
@.str.52 = private unnamed_addr constant [54 x i8] c"pdf14_pop_transparency_mask(tos->mask_stack->rc_mask)\00", align 1
@.str.53 = private unnamed_addr constant [28 x i8] c"pdf14_pop_transparency_mask\00", align 1
@.str.54 = private unnamed_addr constant [22 x i8] c"pdf14_free_mask_stack\00", align 1
@.str.55 = private unnamed_addr constant [26 x i8] c"pdf14_discard_trans_layer\00", align 1
@.str.56 = private unnamed_addr constant [23 x i8] c"pdf14_pop_parent_color\00", align 1
@.str.57 = private unnamed_addr constant [15 x i8] c"pdf14_clr_free\00", align 1
@.str.58 = private unnamed_addr constant [29 x i8] c"pdf14_pop_transparency_state\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"pdf14_device\00", align 1
@ptr_struct_procs = external constant %struct.gs_ptr_procs_s, align 8
@__func__.pdf14_put_image = private unnamed_addr constant [16 x i8] c"pdf14_put_image\00", align 1
@.str.60 = private unnamed_addr constant [34 x i8] c"PDF14 device push/pop out of sync\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@pdf14_DeviceCMYKspot_procs = internal constant %struct.gx_cm_color_map_procs_s { void (%struct.gx_device_s*, i16, i16*)* @pdf14_gray_cs_to_cmyk_cm, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)* @pdf14_rgb_cs_to_cmyk_cm, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)* @pdf14_cmyk_cs_to_cmyk_cm }, align 8
@.str.62 = private unnamed_addr constant [36 x i8] c"pdf14_cmykspot_get_color_comp_index\00", align 1
@st_device_printer = external constant %struct.gs_memory_struct_type_s, align 8
@pdf14_accum_enum_ptrs = internal constant [1 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s { i16 0, i16 18472 }], align 2
@.str.63 = private unnamed_addr constant [12 x i8] c"pdf14-accum\00", align 1
@pdf14_cmap_many = internal constant %struct.gx_color_map_procs_s { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_gray_direct, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_rgb_direct, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)* @pdf14_cmap_cmyk_direct, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_rgb_alpha_direct, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_separation_direct, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)* @pdf14_cmap_devicen_direct, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_cmap_is_halftoned }, align 8
@st_pdf14trans = internal constant %struct.gs_memory_struct_type_s { i32 744, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.65, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @st_pdf14trans_reloc_ptrs to i8*) }, align 8
@.str.64 = private unnamed_addr constant [21 x i8] c"gs_create_pdf14trans\00", align 1
@.str.65 = private unnamed_addr constant [16 x i8] c"gs_pdf14trans_t\00", align 1
@st_pdf14trans_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 2, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([2 x %struct.gc_ptr_element_s], [2 x %struct.gc_ptr_element_s]* @st_pdf14trans_enum_ptrs, i32 0, i32 0) }, align 8
@st_pdf14trans_enum_ptrs = internal constant [2 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s { i16 0, i16 376 }, %struct.gc_ptr_element_s { i16 0, i16 728 }], align 2
@.str.66 = private unnamed_addr constant [26 x i8] c"pdf14_clist_update_params\00", align 1
@.str.67 = private unnamed_addr constant [26 x i8] c"pdf14-clist_accum pop dev\00", align 1
@.str.68 = private unnamed_addr constant [22 x i8] c"popdevice pdf14-accum\00", align 1
@.str.69 = private unnamed_addr constant [35 x i8] c"convert_compressed_color_list_elem\00", align 1
@st_keyname_link_list = internal constant %struct.gs_memory_struct_type_s { i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.70, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @basic_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* null, i8* bitcast (%struct.gc_struct_data_s* @keyname_link_list_reloc_ptrs to i8*) }, align 8
@.str.70 = private unnamed_addr constant [18 x i8] c"keyname_link_list\00", align 1
@keyname_link_list_reloc_ptrs = internal constant %struct.gc_struct_data_s { i16 2, i16 0, %struct.gs_memory_struct_type_s* null, %struct.gc_ptr_element_s* getelementptr inbounds ([2 x %struct.gc_ptr_element_s], [2 x %struct.gc_ptr_element_s]* @keyname_link_list_enum_ptrs, i32 0, i32 0) }, align 8
@keyname_link_list_enum_ptrs = internal constant [2 x %struct.gc_ptr_element_s] [%struct.gc_ptr_element_s zeroinitializer, %struct.gc_ptr_element_s { i16 0, i16 8 }], align 2
@.str.71 = private unnamed_addr constant [15 x i8] c"PDF14SpotName_\00", align 1
@.str.72 = private unnamed_addr constant [27 x i8] c"get_param_spot_color_names\00", align 1
@.str.73 = private unnamed_addr constant [23 x i8] c"free_temp_keyname_list\00", align 1
@.str.74 = private unnamed_addr constant [14 x i8] c"pdf14_clr_new\00", align 1
@__func__.pdf14_update_device_color_procs_push_c = private unnamed_addr constant [39 x i8] c"pdf14_update_device_color_procs_push_c\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"Missing ICC data\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"ICC Number of colorants illegal\00", align 1
@.str.77 = private unnamed_addr constant [26 x i8] c"pdf14_create_clist_device\00", align 1
@.str.78 = private unnamed_addr constant [31 x i8] c"c_pdf14trans_clist_read_update\00", align 1

declare i32 @gx_default_install(%struct.gx_device_s*, %struct.gs_state_s*) #0

declare i32 @gx_default_begin_page(%struct.gx_device_s*, %struct.gs_state_s*) #0

declare i32 @gx_default_end_page(%struct.gx_device_s*, i32, %struct.gs_state_s*) #0

declare %struct.gs_ptr_procs_s* @basic_enum_ptrs(%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*) #0

declare void @basic_reloc_ptrs(i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*) #0

declare void @gx_device_finalize(%struct.gs_memory_s*, i8*) #0

; Function Attrs: nounwind uwtable
define internal i32 @no_print_page(%struct.gx_device_printer_s* %pdev, %struct._IO_FILE* %prn_stream) #1 {
entry:
  %pdev.addr = alloca %struct.gx_device_printer_s*, align 8
  %prn_stream.addr = alloca %struct._IO_FILE*, align 8
  store %struct.gx_device_printer_s* %pdev, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  store %struct._IO_FILE* %prn_stream, %struct._IO_FILE** %prn_stream.addr, align 8, !tbaa !1
  ret i32 -1
}

declare i32 @gx_default_print_page_copies(%struct.gx_device_printer_s*, %struct._IO_FILE*, i32) #0

declare i32 @gx_default_create_buf_device(%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*) #0

declare i32 @gx_default_size_buf_device(%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32) #0

declare i32 @gx_default_setup_buf_device(%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32) #0

declare void @gx_default_destroy_buf_device(%struct.gx_device_s*) #0

declare void @gx_default_get_space_params(%struct.gx_device_printer_s*, %struct.gdev_space_params_s*) #0

declare i32 @gx_default_start_render_thread(%struct.gdev_prn_start_render_params_s*) #0

declare i32 @gx_default_open_render_device(%struct.gx_device_printer_s*) #0

declare i32 @gx_default_close_render_device(%struct.gx_device_printer_s*) #0

declare i32 @gx_default_buffer_page(%struct.gx_device_printer_s*, %struct._IO_FILE*, i32) #0

; Function Attrs: nounwind uwtable
define i32 @pdf14_get_buffer_information(%struct.gx_device_s* %dev, %struct.gx_pattern_trans_s* %transbuff, %struct.gs_memory_s* %mem, i32 %free_device) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %transbuff.addr = alloca %struct.gx_pattern_trans_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %free_device.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %rowstride = alloca i32, align 4
  %planestride = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %buff_ptr_src = alloca i8*, align 8
  %buff_ptr_des = alloca i8*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_pattern_trans_s* %transbuff, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store i32 %free_device, i32* %free_device.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 47
  %10 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %cmp = icmp eq %struct.pdf14_ctx_s* %10, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %11, i32 0, i32 47
  %12 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %12, i32 0, i32 0
  %13 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %13, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %14 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %14, i32 0, i32 10
  %15 = bitcast %struct.gs_int_rect_s* %rect to i8*
  %16 = bitcast %struct.gs_int_rect_s* %rect2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 4, i1 false), !tbaa.struct !27
  %17 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %17, i32 0, i32 17
  %18 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %dirty3 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %18, i32 0, i32 14
  store %struct.gs_int_rect_s* %dirty, %struct.gs_int_rect_s** %dirty3, align 8, !tbaa !28
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 13
  %20 = load i32, i32* %width4, align 4, !tbaa !30
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %21 = load i32, i32* %x, align 4, !tbaa !31
  %cmp5 = icmp slt i32 %20, %21
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 13
  %23 = load i32, i32* %width6, align 4, !tbaa !30
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %q7 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x8 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q7, i32 0, i32 0
  %24 = load i32, i32* %x8, align 4, !tbaa !31
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %23, %cond.true ], [ %24, %cond.false ]
  store i32 %cond, i32* %x1, align 4, !tbaa !5
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height9 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 14
  %26 = load i32, i32* %height9, align 4, !tbaa !32
  %q10 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q10, i32 0, i32 1
  %27 = load i32, i32* %y, align 4, !tbaa !33
  %cmp11 = icmp slt i32 %26, %27
  br i1 %cmp11, label %cond.true.12, label %cond.false.14

cond.true.12:                                     ; preds = %cond.end
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height13 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 14
  %29 = load i32, i32* %height13, align 4, !tbaa !32
  br label %cond.end.17

cond.false.14:                                    ; preds = %cond.end
  %q15 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y16 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q15, i32 0, i32 1
  %30 = load i32, i32* %y16, align 4, !tbaa !33
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.14, %cond.true.12
  %cond18 = phi i32 [ %29, %cond.true.12 ], [ %30, %cond.false.14 ]
  store i32 %cond18, i32* %y1, align 4, !tbaa !5
  %31 = load i32, i32* %x1, align 4, !tbaa !5
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x19 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %32 = load i32, i32* %x19, align 4, !tbaa !34
  %sub = sub nsw i32 %31, %32
  store i32 %sub, i32* %width, align 4, !tbaa !5
  %33 = load i32, i32* %y1, align 4, !tbaa !5
  %p20 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y21 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p20, i32 0, i32 1
  %34 = load i32, i32* %y21, align 4, !tbaa !35
  %sub22 = sub nsw i32 %33, %34
  store i32 %sub22, i32* %height, align 4, !tbaa !5
  %35 = load i32, i32* %width, align 4, !tbaa !5
  %cmp23 = icmp sle i32 %35, 0
  br i1 %cmp23, label %if.then.27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.17
  %36 = load i32, i32* %height, align 4, !tbaa !5
  %cmp24 = icmp sle i32 %36, 0
  br i1 %cmp24, label %if.then.27, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false
  %37 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %37, i32 0, i32 15
  %38 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp26 = icmp eq i8* %38, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %lor.lhs.false.25, %lor.lhs.false, %cond.end.17
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.28:                                        ; preds = %lor.lhs.false.25
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %39, i32 0, i32 13
  %40 = load i32, i32* %n_chan, align 4, !tbaa !38
  %41 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %n_chan29 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %41, i32 0, i32 7
  store i32 %40, i32* %n_chan29, align 4, !tbaa !39
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_shape = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %42, i32 0, i32 8
  %43 = load i32, i32* %has_shape, align 4, !tbaa !40
  %44 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %has_shape30 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %44, i32 0, i32 8
  store i32 %43, i32* %has_shape30, align 4, !tbaa !41
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect31 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 10
  %q32 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect31, i32 0, i32 1
  %x33 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q32, i32 0, i32 0
  %46 = load i32, i32* %x33, align 4, !tbaa !42
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect34 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 10
  %p35 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect34, i32 0, i32 0
  %x36 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p35, i32 0, i32 0
  %48 = load i32, i32* %x36, align 4, !tbaa !43
  %sub37 = sub nsw i32 %46, %48
  %49 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %width38 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %49, i32 0, i32 9
  store i32 %sub37, i32* %width38, align 4, !tbaa !44
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect39 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 10
  %q40 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect39, i32 0, i32 1
  %y41 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q40, i32 0, i32 1
  %51 = load i32, i32* %y41, align 4, !tbaa !45
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect42 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %52, i32 0, i32 10
  %p43 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect42, i32 0, i32 0
  %y44 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p43, i32 0, i32 1
  %53 = load i32, i32* %y44, align 4, !tbaa !46
  %sub45 = sub nsw i32 %51, %53
  %54 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %height46 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %54, i32 0, i32 10
  store i32 %sub45, i32* %height46, align 4, !tbaa !47
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 52
  %56 = load i32, i32* %blend_mode, align 4, !tbaa !48
  %57 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %blending_mode = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %57, i32 0, i32 13
  store i32 %56, i32* %blending_mode, align 4, !tbaa !49
  %58 = load i32, i32* %free_device.addr, align 4, !tbaa !5
  %tobool = icmp ne i32 %58, 0
  br i1 %tobool, label %if.then.47, label %if.else.102

if.then.47:                                       ; preds = %if.end.28
  %59 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %pdev14 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %59, i32 0, i32 0
  store %struct.gx_device_s* null, %struct.gx_device_s** %pdev14, align 8, !tbaa !50
  %60 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %rect48 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %60, i32 0, i32 4
  %61 = bitcast %struct.gs_int_rect_s* %rect48 to i8*
  %62 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 4, i1 false), !tbaa.struct !27
  %63 = load i32, i32* %width, align 4, !tbaa !5
  %64 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %width49 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %64, i32 0, i32 9
  %65 = load i32, i32* %width49, align 4, !tbaa !44
  %cmp50 = icmp slt i32 %63, %65
  br i1 %cmp50, label %if.then.54, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %if.then.47
  %66 = load i32, i32* %height, align 4, !tbaa !5
  %67 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %height52 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %67, i32 0, i32 10
  %68 = load i32, i32* %height52, align 4, !tbaa !47
  %cmp53 = icmp slt i32 %66, %68
  br i1 %cmp53, label %if.then.54, label %if.else

if.then.54:                                       ; preds = %lor.lhs.false.51, %if.then.47
  %69 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %69) #2
  %70 = load i32, i32* %width, align 4, !tbaa !5
  %add = add nsw i32 %70, 3
  %and = and i32 %add, -4
  store i32 %and, i32* %rowstride, align 4, !tbaa !5
  %71 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %71) #2
  %72 = load i32, i32* %rowstride, align 4, !tbaa !5
  %73 = load i32, i32* %height, align 4, !tbaa !5
  %mul = mul nsw i32 %72, %73
  store i32 %mul, i32* %planestride, align 4, !tbaa !5
  %74 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %74) #2
  %75 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %75) #2
  %76 = bitcast i8** %buff_ptr_src to i8*
  call void @llvm.lifetime.start(i64 8, i8* %76) #2
  %77 = bitcast i8** %buff_ptr_des to i8*
  call void @llvm.lifetime.start(i64 8, i8* %77) #2
  %78 = load i32, i32* %planestride, align 4, !tbaa !5
  %79 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %planestride55 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %79, i32 0, i32 6
  store i32 %78, i32* %planestride55, align 4, !tbaa !51
  %80 = load i32, i32* %rowstride, align 4, !tbaa !5
  %81 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %rowstride56 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %81, i32 0, i32 5
  store i32 %80, i32* %rowstride56, align 4, !tbaa !52
  %82 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %82, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %83 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %84 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %85 = load i32, i32* %planestride, align 4, !tbaa !5
  %86 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan57 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %86, i32 0, i32 13
  %87 = load i32, i32* %n_chan57, align 4, !tbaa !38
  %mul58 = mul nsw i32 %85, %87
  %call = call i8* %83(%struct.gs_memory_s* %84, i32 %mul58, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0)) #7
  %88 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %transbytes = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %88, i32 0, i32 1
  store i8* %call, i8** %transbytes, align 8, !tbaa !56
  %89 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %90 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %mem59 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %90, i32 0, i32 2
  store %struct.gs_memory_s* %89, %struct.gs_memory_s** %mem59, align 8, !tbaa !57
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.88, %if.then.54
  %91 = load i32, i32* %j, align 4, !tbaa !5
  %92 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %n_chan60 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %92, i32 0, i32 7
  %93 = load i32, i32* %n_chan60, align 4, !tbaa !39
  %cmp61 = icmp slt i32 %91, %93
  br i1 %cmp61, label %for.body, label %for.end.90

for.body:                                         ; preds = %for.cond
  %94 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data62 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %94, i32 0, i32 15
  %95 = load i8*, i8** %data62, align 8, !tbaa !36
  %96 = load i32, i32* %j, align 4, !tbaa !5
  %97 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride63 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %97, i32 0, i32 12
  %98 = load i32, i32* %planestride63, align 4, !tbaa !58
  %mul64 = mul nsw i32 %96, %98
  %idx.ext = sext i32 %mul64 to i64
  %add.ptr = getelementptr inbounds i8, i8* %95, i64 %idx.ext
  %99 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride65 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %99, i32 0, i32 11
  %100 = load i32, i32* %rowstride65, align 4, !tbaa !59
  %p66 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y67 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p66, i32 0, i32 1
  %101 = load i32, i32* %y67, align 4, !tbaa !35
  %mul68 = mul nsw i32 %100, %101
  %idx.ext69 = sext i32 %mul68 to i64
  %add.ptr70 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext69
  %p71 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x72 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p71, i32 0, i32 0
  %102 = load i32, i32* %x72, align 4, !tbaa !34
  %idx.ext73 = sext i32 %102 to i64
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr70, i64 %idx.ext73
  store i8* %add.ptr74, i8** %buff_ptr_src, align 8, !tbaa !1
  %103 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %transbytes75 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %103, i32 0, i32 1
  %104 = load i8*, i8** %transbytes75, align 8, !tbaa !56
  %105 = load i32, i32* %j, align 4, !tbaa !5
  %106 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul76 = mul nsw i32 %105, %106
  %idx.ext77 = sext i32 %mul76 to i64
  %add.ptr78 = getelementptr inbounds i8, i8* %104, i64 %idx.ext77
  store i8* %add.ptr78, i8** %buff_ptr_des, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc, %for.body
  %107 = load i32, i32* %k, align 4, !tbaa !5
  %108 = load i32, i32* %height, align 4, !tbaa !5
  %cmp80 = icmp slt i32 %107, %108
  br i1 %cmp80, label %for.body.81, label %for.end

for.body.81:                                      ; preds = %for.cond.79
  %109 = load i8*, i8** %buff_ptr_des, align 8, !tbaa !1
  %110 = load i8*, i8** %buff_ptr_src, align 8, !tbaa !1
  %111 = load i32, i32* %rowstride, align 4, !tbaa !5
  %conv = sext i32 %111 to i64
  %call82 = call i8* @memcpy(i8* %109, i8* %110, i64 %conv) #8
  %112 = load i32, i32* %rowstride, align 4, !tbaa !5
  %113 = load i8*, i8** %buff_ptr_des, align 8, !tbaa !1
  %idx.ext83 = sext i32 %112 to i64
  %add.ptr84 = getelementptr inbounds i8, i8* %113, i64 %idx.ext83
  store i8* %add.ptr84, i8** %buff_ptr_des, align 8, !tbaa !1
  %114 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride85 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %114, i32 0, i32 11
  %115 = load i32, i32* %rowstride85, align 4, !tbaa !59
  %116 = load i8*, i8** %buff_ptr_src, align 8, !tbaa !1
  %idx.ext86 = sext i32 %115 to i64
  %add.ptr87 = getelementptr inbounds i8, i8* %116, i64 %idx.ext86
  store i8* %add.ptr87, i8** %buff_ptr_src, align 8, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %for.body.81
  %117 = load i32, i32* %k, align 4, !tbaa !5
  %inc = add nsw i32 %117, 1
  store i32 %inc, i32* %k, align 4, !tbaa !5
  br label %for.cond.79

for.end:                                          ; preds = %for.cond.79
  br label %for.inc.88

for.inc.88:                                       ; preds = %for.end
  %118 = load i32, i32* %j, align 4, !tbaa !5
  %inc89 = add nsw i32 %118, 1
  store i32 %inc89, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end.90:                                       ; preds = %for.cond
  %119 = bitcast i8** %buff_ptr_des to i8*
  call void @llvm.lifetime.end(i64 8, i8* %119) #2
  %120 = bitcast i8** %buff_ptr_src to i8*
  call void @llvm.lifetime.end(i64 8, i8* %120) #2
  %121 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %121) #2
  %122 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %122) #2
  %123 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #2
  %124 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %124) #2
  br label %if.end.99

if.else:                                          ; preds = %lor.lhs.false.51
  %125 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride91 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %125, i32 0, i32 12
  %126 = load i32, i32* %planestride91, align 4, !tbaa !58
  %127 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %planestride92 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %127, i32 0, i32 6
  store i32 %126, i32* %planestride92, align 4, !tbaa !51
  %128 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride93 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %128, i32 0, i32 11
  %129 = load i32, i32* %rowstride93, align 4, !tbaa !59
  %130 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %rowstride94 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %130, i32 0, i32 5
  store i32 %129, i32* %rowstride94, align 4, !tbaa !52
  %131 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data95 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %131, i32 0, i32 15
  %132 = load i8*, i8** %data95, align 8, !tbaa !36
  %133 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %transbytes96 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %133, i32 0, i32 1
  store i8* %132, i8** %transbytes96, align 8, !tbaa !56
  %134 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %134, i32 0, i32 3
  %135 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %136 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %mem97 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %136, i32 0, i32 2
  store %struct.gs_memory_s* %135, %struct.gs_memory_s** %mem97, align 8, !tbaa !57
  %137 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data98 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %137, i32 0, i32 15
  store i8* null, i8** %data98, align 8, !tbaa !36
  br label %if.end.99

if.end.99:                                        ; preds = %if.else, %for.end.90
  %138 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs100 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %138, i32 0, i32 42
  %close_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs100, i32 0, i32 4
  %139 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %close_device, align 8, !tbaa !62
  %140 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call101 = call i32 %139(%struct.gx_device_s* %140) #7
  br label %if.end.113

if.else.102:                                      ; preds = %if.end.28
  %141 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %142 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %pdev14103 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %142, i32 0, i32 0
  store %struct.gx_device_s* %141, %struct.gx_device_s** %pdev14103, align 8, !tbaa !50
  %143 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride104 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %143, i32 0, i32 12
  %144 = load i32, i32* %planestride104, align 4, !tbaa !58
  %145 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %planestride105 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %145, i32 0, i32 6
  store i32 %144, i32* %planestride105, align 4, !tbaa !51
  %146 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride106 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %146, i32 0, i32 11
  %147 = load i32, i32* %rowstride106, align 4, !tbaa !59
  %148 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %rowstride107 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %148, i32 0, i32 5
  store i32 %147, i32* %rowstride107, align 4, !tbaa !52
  %149 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data108 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %149, i32 0, i32 15
  %150 = load i8*, i8** %data108, align 8, !tbaa !36
  %151 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %transbytes109 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %151, i32 0, i32 1
  store i8* %150, i8** %transbytes109, align 8, !tbaa !56
  %152 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory110 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %152, i32 0, i32 3
  %153 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory110, align 8, !tbaa !60
  %154 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %mem111 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %154, i32 0, i32 2
  store %struct.gs_memory_s* %153, %struct.gs_memory_s** %mem111, align 8, !tbaa !57
  %155 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %transbuff.addr, align 8, !tbaa !1
  %rect112 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %155, i32 0, i32 4
  %156 = bitcast %struct.gs_int_rect_s* %rect112 to i8*
  %157 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* %157, i64 16, i32 4, i1 false), !tbaa.struct !27
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.102, %if.end.99
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.113, %if.then.27, %if.then
  %158 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #2
  %159 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %159) #2
  %160 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %160) #2
  %161 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %161) #2
  %162 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %162) #2
  %163 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %163) #2
  %164 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %164) #2
  %165 = load i32, i32* %retval
  ret i32 %165
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8*, i64) #3

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @pdf14_disable_device(%struct.gx_device_s* %dev) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_forward_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_forward_s*
  store %struct.gx_device_forward_s* %2, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %3, i32 0, i32 11
  %4 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !63
  %color_info1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 11
  %6 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  %7 = bitcast %struct.gx_device_color_info_s* %color_info1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 720, i32 8, i1 false), !tbaa.struct !65
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @pdf14_forward_device_procs(%struct.gx_device_s* %8) #7
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  store i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_forward_create_compositor, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %10 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_forward_device_procs(%struct.gx_device_s* %dev) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_forward_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_forward_s*
  store %struct.gx_device_forward_s* %2, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %3, i32 0, i32 42
  %4 = bitcast %struct.gx_device_procs_s* %procs to i8*
  %call = call i8* @memset(i8* %4, i32 0, i64 584) #8
  %5 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  call void @gx_device_forward_fill_in_procs(%struct.gx_device_forward_s* %5) #7
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 42
  %close_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs1, i32 0, i32 4
  store i32 (%struct.gx_device_s*)* @gx_forward_close_device, i32 (%struct.gx_device_s*)** %close_device, align 8, !tbaa !62
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 42
  %fill_rectangle = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs2, i32 0, i32 7
  store i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_forward_fill_rectangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %fill_rectangle, align 8, !tbaa !70
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 42
  %fill_rectangle_hl_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs3, i32 0, i32 54
  store i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @gx_forward_fill_rectangle_hl_color, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)** %fill_rectangle_hl_color, align 8, !tbaa !71
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs4 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 42
  %tile_rectangle = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs4, i32 0, i32 8
  store i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_tile_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)** %tile_rectangle, align 8, !tbaa !72
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs5 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 42
  %copy_mono = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs5, i32 0, i32 9
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @gx_forward_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)** %copy_mono, align 8, !tbaa !73
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %copy_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs6, i32 0, i32 10
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @gx_forward_copy_color, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)** %copy_color, align 8, !tbaa !74
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs7 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 42
  %get_page_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs7, i32 0, i32 19
  store %struct.gx_device_s* (%struct.gx_device_s*)* @gx_forward_get_page_device, %struct.gx_device_s* (%struct.gx_device_s*)** %get_page_device, align 8, !tbaa !75
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs8 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 42
  %strip_tile_rectangle = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs8, i32 0, i32 34
  store i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* @gx_forward_strip_tile_rectangle, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)** %strip_tile_rectangle, align 8, !tbaa !76
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs9 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 42
  %copy_alpha = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs9, i32 0, i32 21
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* @gx_forward_copy_alpha, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)** %copy_alpha, align 8, !tbaa !77
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %15, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 67
  store i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* @gx_forward_get_profile, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 42
  %set_graphics_type_tag = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs11, i32 0, i32 68
  store void (%struct.gx_device_s*, i32)* @gx_forward_set_graphics_type_tag, void (%struct.gx_device_s*, i32)** %set_graphics_type_tag, align 8, !tbaa !79
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 42
  %open_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs12, i32 0, i32 0
  store i32 (%struct.gx_device_s*)* @pdf14_forward_open_device, i32 (%struct.gx_device_s*)** %open_device, align 8, !tbaa !80
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs13 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 42
  %put_params = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs13, i32 0, i32 14
  store i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @pdf14_forward_put_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)** %put_params, align 8, !tbaa !81
  %19 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_forward_create_compositor(%struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_composite_s* %pct, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem, %struct.gx_device_s* %cdev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cdev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %ndev = alloca %struct.gx_device_s*, align 8
  %code = alloca i32, align 4
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %cdev, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_s** %ndev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %8, %struct.gx_device_s** %9, align 8, !tbaa !1
  %10 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %call = call i32 @gs_is_pdf14trans_compositor(%struct.gs_composite_s* %10) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %11 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %13 = bitcast %struct.gs_composite_s* %12 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %13, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %14 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %14, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %15 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  %cmp = icmp eq i32 %15, 0
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %17 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %18 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call2 = call i32 @gx_update_pdf14_compositor(%struct.gx_device_s* %16, %struct.gs_imager_state_s* %17, %struct.gs_pdf14trans_s* %18, %struct.gs_memory_s* %19) #7
  store i32 %call2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.1
  %20 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #2
  br label %cleanup.8

if.end.3:                                         ; preds = %entry
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %21, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  %22 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %24 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %25 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %26 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call4 = call i32 %22(%struct.gx_device_s* %23, %struct.gx_device_s** %ndev, %struct.gs_composite_s* %24, %struct.gs_imager_state_s* %25, %struct.gs_memory_s* %26, %struct.gx_device_s* %27) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %28 = load i32, i32* %code, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %28, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  %29 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %29, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.8

if.end.7:                                         ; preds = %if.end.3
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %31 = bitcast %struct.pdf14_device_s* %30 to %struct.gx_device_forward_s*
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %ndev, align 8, !tbaa !1
  call void @gx_device_set_target(%struct.gx_device_forward_s* %31, %struct.gx_device_s* %32) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.8

cleanup.8:                                        ; preds = %if.end.7, %if.then.6, %cleanup
  %33 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %33) #2
  %34 = bitcast %struct.gx_device_s** %ndev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  %36 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define i32 @gs_pdf14_device_color_mon_set(%struct.gx_device_s* %pdev, i32 %monitoring) #1 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %monitoring.addr = alloca i32, align 4
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %targ = alloca %struct.gx_device_s*, align 8
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %code = alloca i32, align 4
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store i32 %monitoring, i32* %monitoring.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %targ to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %targ, align 8, !tbaa !1
  %6 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %targ, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %9 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %targ, align 8, !tbaa !1
  %call = call i32 %9(%struct.gx_device_s* %10, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %11 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp eq i32 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %monitoring.addr, align 4, !tbaa !5
  %13 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %pageneutralcolor = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %13, i32 0, i32 7
  store i32 %12, i32* %pageneutralcolor, align 4, !tbaa !91
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %code, align 4, !tbaa !5
  %15 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #2
  %16 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #2
  %17 = bitcast %struct.gx_device_s** %targ to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_create_default_compositor(%struct.gs_composite_s* %pct, %struct.gx_device_s** %pp14dev, %struct.gx_device_s* %tdev, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem) #1 {
entry:
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %pp14dev.addr = alloca %struct.gx_device_s**, align 8
  %tdev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %p14dev = alloca %struct.gx_device_s*, align 8
  %code = alloca i32, align 4
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pp14dev, %struct.gx_device_s*** %pp14dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %tdev, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  store %struct.gx_device_s* null, %struct.gx_device_s** %p14dev, align 8, !tbaa !1
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %5 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %5, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %6 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  %10 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %call = call i32 @gs_pdf14_device_push(%struct.gs_memory_s* %7, %struct.gs_imager_state_s* %8, %struct.gx_device_s** %p14dev, %struct.gx_device_s* %9, %struct.gs_pdf14trans_s* %10) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %p14dev, align 8, !tbaa !1
  %12 = load %struct.gx_device_s**, %struct.gx_device_s*** %pp14dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %11, %struct.gx_device_s** %12, align 8, !tbaa !1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  %14 = load %struct.gx_device_s**, %struct.gx_device_s*** %pp14dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %13, %struct.gx_device_s** %14, align 8, !tbaa !1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %15 = load i32, i32* %code, align 4, !tbaa !5
  %16 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %16) #2
  %17 = bitcast %struct.gx_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_equal(%struct.gs_composite_s* %pct0, %struct.gs_composite_s* %pct1) #1 {
entry:
  %pct0.addr = alloca %struct.gs_composite_s*, align 8
  %pct1.addr = alloca %struct.gs_composite_s*, align 8
  store %struct.gs_composite_s* %pct0, %struct.gs_composite_s** %pct0.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %pct1, %struct.gs_composite_s** %pct1.addr, align 8, !tbaa !1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_write(%struct.gs_composite_s* %pct, i8* %data, i32* %psize, %struct.gx_device_clist_writer_s* %cdev) #1 {
entry:
  %retval = alloca i32, align 4
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %data.addr = alloca i8*, align 8
  %psize.addr = alloca i32*, align 8
  %cdev.addr = alloca %struct.gx_device_clist_writer_s*, align 8
  %pparams = alloca %struct.gs_pdf14trans_params_s*, align 8
  %need = alloca i32, align 4
  %avail = alloca i32, align 4
  %buf = alloca [361 x i8], align 16
  %pbuf = alloca i8*, align 8
  %opcode = alloca i32, align 4
  %mask_size = alloca i32, align 4
  %mask_id = alloca i32, align 4
  %code = alloca i32, align 4
  %found_icc = alloca i32, align 4
  %hashcode = alloca i64, align 8
  %icc_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %pdf14_needed = alloca i32, align 4
  %trans_group_level = alloca i32, align 4
  %smask_level = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %l = alloca i32, align 4
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32* %psize, i32** %psize.addr, align 8, !tbaa !1
  store %struct.gx_device_clist_writer_s* %cdev, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_params_s** %pparams to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %2, i32 0, i32 5
  store %struct.gs_pdf14trans_params_s* %params, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %3 = bitcast i32* %need to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load i32*, i32** %psize.addr, align 8, !tbaa !1
  %6 = load i32, i32* %5, align 4, !tbaa !5
  store i32 %6, i32* %avail, align 4, !tbaa !5
  %7 = bitcast [361 x i8]* %buf to i8*
  call void @llvm.lifetime.start(i64 361, i8* %7) #2
  %8 = bitcast i8** %pbuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %arraydecay = getelementptr inbounds [361 x i8], [361 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %pbuf, align 8, !tbaa !1
  %9 = bitcast i32* %opcode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %10, i32 0, i32 0
  %11 = load i32, i32* %pdf14_op, align 4, !tbaa !93
  store i32 %11, i32* %opcode, align 4, !tbaa !5
  %12 = bitcast i32* %mask_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 0, i32* %mask_size, align 4, !tbaa !5
  %13 = bitcast i32* %mask_id to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  store i32 0, i32* %mask_id, align 4, !tbaa !5
  %14 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %found_icc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast i64* %hashcode to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  store i64 0, i64* %hashcode, align 8, !tbaa !68
  %17 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %18) #2
  %19 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = bitcast i32* %pdf14_needed to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  %21 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_needed1 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %21, i32 0, i32 81
  %22 = load i32, i32* %pdf14_needed1, align 4, !tbaa !94
  store i32 %22, i32* %pdf14_needed, align 4, !tbaa !5
  %23 = bitcast i32* %trans_group_level to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #2
  %24 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_trans_group_level = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %24, i32 0, i32 82
  %25 = load i32, i32* %pdf14_trans_group_level, align 4, !tbaa !112
  store i32 %25, i32* %trans_group_level, align 4, !tbaa !5
  %26 = bitcast i32* %smask_level to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #2
  %27 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_smask_level = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %27, i32 0, i32 83
  %28 = load i32, i32* %pdf14_smask_level, align 4, !tbaa !113
  store i32 %28, i32* %smask_level, align 4, !tbaa !5
  %29 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %30 = bitcast %struct.gx_device_clist_writer_s* %29 to %struct.gx_device_s*
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %31 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %32 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %33 = bitcast %struct.gx_device_clist_writer_s* %32 to %struct.gx_device_s*
  %call = call i32 %31(%struct.gx_device_s* %33, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %34 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %34, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %35 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %35, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %36 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %36, %struct.cmm_profile_s** %icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  %37 = load i32, i32* %opcode, align 4, !tbaa !5
  %conv = trunc i32 %37 to i8
  %38 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv, i8* %38, align 1, !tbaa !66
  %39 = load i32, i32* %opcode, align 4, !tbaa !5
  switch i32 %39, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.24
    i32 4, label %sw.bb.31
    i32 3, label %sw.bb.39
    i32 5, label %sw.bb.108
    i32 6, label %sw.bb.194
    i32 7, label %sw.bb.204
    i32 8, label %sw.epilog
    i32 9, label %sw.epilog
    i32 10, label %sw.bb.309
    i32 11, label %sw.bb.310
  ]

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %trans_group_level, align 4, !tbaa !5
  %40 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_smask_level2 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %40, i32 0, i32 83
  store i32 0, i32* %pdf14_smask_level2, align 4, !tbaa !113
  %41 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %page_pdf14_needed = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %41, i32 0, i32 84
  store i32 0, i32* %page_pdf14_needed, align 4, !tbaa !114
  br label %do.body

do.body:                                          ; preds = %sw.bb
  %42 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %43 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %num_spot_colors = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %43, i32 0, i32 1
  %44 = bitcast i32* %num_spot_colors to i8*
  %call3 = call i8* @memcpy(i8* %42, i8* %44, i64 4) #8
  %45 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %add.ptr, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.4

do.body.4:                                        ; preds = %do.end
  %46 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %47 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %is_pattern = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %47, i32 0, i32 32
  %48 = bitcast i32* %is_pattern to i8*
  %call5 = call i8* @memcpy(i8* %46, i8* %48, i64 4) #8
  %49 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr6 = getelementptr inbounds i8, i8* %49, i64 4
  store i8* %add.ptr6, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.7

do.cond.7:                                        ; preds = %do.body.4
  br label %do.end.8

do.end.8:                                         ; preds = %do.cond.7
  %50 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %50, i32 0, i32 5
  %51 = load i32, i32* %data_cs, align 4, !tbaa !115
  %cmp9 = icmp eq i32 %51, 6
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.8
  %52 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %islab = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %52, i32 0, i32 2
  %53 = load i32, i32* %islab, align 4, !tbaa !119
  %tobool = icmp ne i32 %53, 0
  br i1 %tobool, label %if.then.11, label %if.end.23

if.then.11:                                       ; preds = %lor.lhs.false, %do.end.8
  %54 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %54, i32 0, i32 30
  %55 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile, align 8, !tbaa !120
  %hashcode12 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %55, i32 0, i32 7
  %56 = load i64, i64* %hashcode12, align 8, !tbaa !121
  %57 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %trans_dev_icc_hash = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %57, i32 0, i32 60
  store i64 %56, i64* %trans_dev_icc_hash, align 8, !tbaa !122
  %58 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %59 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile13 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %59, i32 0, i32 30
  %60 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile13, align 8, !tbaa !120
  %hashcode14 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %60, i32 0, i32 7
  %61 = load i64, i64* %hashcode14, align 8, !tbaa !121
  %call15 = call i32 @clist_icc_searchtable(%struct.gx_device_clist_writer_s* %58, i64 %61) #7
  store i32 %call15, i32* %found_icc, align 4, !tbaa !5
  %62 = load i32, i32* %found_icc, align 4, !tbaa !5
  %tobool16 = icmp ne i32 %62, 0
  br i1 %tobool16, label %if.end.22, label %if.then.17

if.then.17:                                       ; preds = %if.then.11
  %63 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %64 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile18 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %64, i32 0, i32 30
  %65 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile18, align 8, !tbaa !120
  %hashcode19 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %65, i32 0, i32 7
  %66 = load i64, i64* %hashcode19, align 8, !tbaa !121
  %67 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile20 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %67, i32 0, i32 30
  %68 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile20, align 8, !tbaa !120
  %call21 = call i32 @clist_icc_addentry(%struct.gx_device_clist_writer_s* %63, i64 %66, %struct.cmm_profile_s* %68) #7
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.17, %if.then.11
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %lor.lhs.false
  br label %sw.epilog

sw.bb.24:                                         ; preds = %if.end
  store i32 0, i32* %pdf14_needed, align 4, !tbaa !5
  store i32 0, i32* %trans_group_level, align 4, !tbaa !5
  store i32 0, i32* %smask_level, align 4, !tbaa !5
  br label %do.body.25

do.body.25:                                       ; preds = %sw.bb.24
  %69 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %70 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %is_pattern26 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %70, i32 0, i32 32
  %71 = bitcast i32* %is_pattern26 to i8*
  %call27 = call i8* @memcpy(i8* %69, i8* %71, i64 4) #8
  %72 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr28 = getelementptr inbounds i8, i8* %72, i64 4
  store i8* %add.ptr28, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.29

do.cond.29:                                       ; preds = %do.body.25
  br label %do.end.30

do.end.30:                                        ; preds = %do.cond.29
  br label %sw.epilog

sw.bb.31:                                         ; preds = %if.end
  %73 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %dec = add nsw i32 %73, -1
  store i32 %dec, i32* %trans_group_level, align 4, !tbaa !5
  %74 = load i32, i32* %smask_level, align 4, !tbaa !5
  %cmp32 = icmp eq i32 %74, 0
  br i1 %cmp32, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %sw.bb.31
  %75 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %cmp34 = icmp eq i32 %75, 0
  br i1 %cmp34, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %land.lhs.true
  %76 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %page_pdf14_needed37 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %76, i32 0, i32 84
  %77 = load i32, i32* %page_pdf14_needed37, align 4, !tbaa !114
  store i32 %77, i32* %pdf14_needed, align 4, !tbaa !5
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %land.lhs.true, %sw.bb.31
  br label %sw.epilog

sw.bb.39:                                         ; preds = %if.end
  store i32 1, i32* %pdf14_needed, align 4, !tbaa !5
  %78 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %inc = add nsw i32 %78, 1
  store i32 %inc, i32* %trans_group_level, align 4, !tbaa !5
  %79 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %call40 = call i32 @c_pdf14trans_write_ctm(i8** %pbuf, %struct.gs_pdf14trans_params_s* %79) #7
  store i32 %call40, i32* %code, align 4, !tbaa !5
  %80 = load i32, i32* %code, align 4, !tbaa !5
  %cmp41 = icmp slt i32 %80, 0
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %sw.bb.39
  %81 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %81, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.44:                                        ; preds = %sw.bb.39
  %82 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Isolated = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %82, i32 0, i32 3
  %83 = load i32, i32* %Isolated, align 4, !tbaa !123
  %and = and i32 %83, 1
  %84 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Knockout = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %84, i32 0, i32 4
  %85 = load i32, i32* %Knockout, align 4, !tbaa !124
  %and45 = and i32 %85, 1
  %shl = shl i32 %and45, 1
  %add = add nsw i32 %and, %shl
  %conv46 = trunc i32 %add to i8
  %86 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr47 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr47, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv46, i8* %86, align 1, !tbaa !66
  %87 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %87, i32 0, i32 15
  %88 = load i32, i32* %blend_mode, align 4, !tbaa !125
  %conv48 = trunc i32 %88 to i8
  %89 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr49 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %incdec.ptr49, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv48, i8* %89, align 1, !tbaa !66
  %90 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %90, i32 0, i32 28
  %91 = load i32, i32* %group_color, align 4, !tbaa !126
  %conv50 = trunc i32 %91 to i8
  %92 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr51 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr51, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv50, i8* %92, align 1, !tbaa !66
  br label %do.body.52

do.body.52:                                       ; preds = %if.end.44
  %93 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %94 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color_numcomps = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %94, i32 0, i32 27
  %95 = bitcast i32* %group_color_numcomps to i8*
  %call53 = call i8* @memcpy(i8* %93, i8* %95, i64 4) #8
  %96 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr54 = getelementptr inbounds i8, i8* %96, i64 4
  store i8* %add.ptr54, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.55

do.cond.55:                                       ; preds = %do.body.52
  br label %do.end.56

do.end.56:                                        ; preds = %do.cond.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %97 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %98 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %98, i32 0, i32 17
  %alpha = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %99 = bitcast float* %alpha to i8*
  %call58 = call i8* @memcpy(i8* %97, i8* %99, i64 4) #8
  %100 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr59 = getelementptr inbounds i8, i8* %100, i64 4
  store i8* %add.ptr59, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.60

do.cond.60:                                       ; preds = %do.body.57
  br label %do.end.61

do.end.61:                                        ; preds = %do.cond.60
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.61
  %101 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %102 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %102, i32 0, i32 18
  %alpha63 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %103 = bitcast float* %alpha63 to i8*
  %call64 = call i8* @memcpy(i8* %101, i8* %103, i64 4) #8
  %104 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr65 = getelementptr inbounds i8, i8* %104, i64 4
  store i8* %add.ptr65, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.66

do.cond.66:                                       ; preds = %do.body.62
  br label %do.end.67

do.end.67:                                        ; preds = %do.cond.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.67
  %105 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %106 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %bbox = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %106, i32 0, i32 6
  %107 = bitcast %struct.gs_rect_s* %bbox to i8*
  %call69 = call i8* @memcpy(i8* %105, i8* %107, i64 32) #8
  %108 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr70 = getelementptr inbounds i8, i8* %108, i64 32
  store i8* %add.ptr70, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.71

do.cond.71:                                       ; preds = %do.body.68
  br label %do.end.72

do.end.72:                                        ; preds = %do.cond.71
  %109 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %mask_id73 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %109, i32 0, i32 26
  %110 = load i32, i32* %mask_id73, align 4, !tbaa !127
  store i32 %110, i32* %mask_id, align 4, !tbaa !5
  br label %do.body.74

do.body.74:                                       ; preds = %do.end.72
  %111 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %112 = bitcast i32* %mask_id to i8*
  %call75 = call i8* @memcpy(i8* %111, i8* %112, i64 4) #8
  %113 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr76 = getelementptr inbounds i8, i8* %113, i64 4
  store i8* %add.ptr76, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.77

do.cond.77:                                       ; preds = %do.body.74
  br label %do.end.78

do.end.78:                                        ; preds = %do.cond.77
  %114 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color79 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %114, i32 0, i32 28
  %115 = load i32, i32* %group_color79, align 4, !tbaa !126
  %cmp80 = icmp eq i32 %115, 5
  br i1 %cmp80, label %if.then.82, label %if.else.101

if.then.82:                                       ; preds = %do.end.78
  %116 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile83 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %116, i32 0, i32 30
  %117 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile83, align 8, !tbaa !120
  %hashcode84 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %117, i32 0, i32 7
  %118 = load i64, i64* %hashcode84, align 8, !tbaa !121
  store i64 %118, i64* %hashcode, align 8, !tbaa !68
  %119 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %120 = load i64, i64* %hashcode, align 8, !tbaa !68
  %call85 = call i32 @clist_icc_searchtable(%struct.gx_device_clist_writer_s* %119, i64 %120) #7
  store i32 %call85, i32* %found_icc, align 4, !tbaa !5
  %121 = load i32, i32* %found_icc, align 4, !tbaa !5
  %tobool86 = icmp ne i32 %121, 0
  br i1 %tobool86, label %if.else, label %if.then.87

if.then.87:                                       ; preds = %if.then.82
  %122 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %123 = load i64, i64* %hashcode, align 8, !tbaa !68
  %124 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile88 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %124, i32 0, i32 30
  %125 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile88, align 8, !tbaa !120
  %call89 = call i32 @clist_icc_addentry(%struct.gx_device_clist_writer_s* %122, i64 %123, %struct.cmm_profile_s* %125) #7
  br label %do.body.90

do.body.90:                                       ; preds = %if.then.87
  %126 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %127 = bitcast i64* %hashcode to i8*
  %call91 = call i8* @memcpy(i8* %126, i8* %127, i64 8) #8
  %128 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr92 = getelementptr inbounds i8, i8* %128, i64 8
  store i8* %add.ptr92, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.93

do.cond.93:                                       ; preds = %do.body.90
  br label %do.end.94

do.end.94:                                        ; preds = %do.cond.93
  br label %if.end.100

if.else:                                          ; preds = %if.then.82
  br label %do.body.95

do.body.95:                                       ; preds = %if.else
  %129 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %130 = bitcast i64* %hashcode to i8*
  %call96 = call i8* @memcpy(i8* %129, i8* %130, i64 8) #8
  %131 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr97 = getelementptr inbounds i8, i8* %131, i64 8
  store i8* %add.ptr97, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.98

do.cond.98:                                       ; preds = %do.body.95
  br label %do.end.99

do.end.99:                                        ; preds = %do.cond.98
  br label %if.end.100

if.end.100:                                       ; preds = %do.end.99, %do.end.94
  br label %if.end.107

if.else.101:                                      ; preds = %do.end.78
  br label %do.body.102

do.body.102:                                      ; preds = %if.else.101
  %132 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %133 = bitcast i64* %hashcode to i8*
  %call103 = call i8* @memcpy(i8* %132, i8* %133, i64 8) #8
  %134 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr104 = getelementptr inbounds i8, i8* %134, i64 8
  store i8* %add.ptr104, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.105

do.cond.105:                                      ; preds = %do.body.102
  br label %do.end.106

do.end.106:                                       ; preds = %do.cond.105
  br label %if.end.107

if.end.107:                                       ; preds = %do.end.106, %if.end.100
  br label %sw.epilog

sw.bb.108:                                        ; preds = %if.end
  store i32 1, i32* %pdf14_needed, align 4, !tbaa !5
  %135 = load i32, i32* %smask_level, align 4, !tbaa !5
  %inc109 = add nsw i32 %135, 1
  store i32 %inc109, i32* %smask_level, align 4, !tbaa !5
  %136 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %call110 = call i32 @c_pdf14trans_write_ctm(i8** %pbuf, %struct.gs_pdf14trans_params_s* %136) #7
  store i32 %call110, i32* %code, align 4, !tbaa !5
  %137 = load i32, i32* %code, align 4, !tbaa !5
  %cmp111 = icmp slt i32 %137, 0
  br i1 %cmp111, label %if.then.113, label %if.end.114

if.then.113:                                      ; preds = %sw.bb.108
  %138 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %138, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.114:                                       ; preds = %sw.bb.108
  br label %do.body.115

do.body.115:                                      ; preds = %if.end.114
  %139 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %140 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %subtype = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %140, i32 0, i32 8
  %141 = bitcast i32* %subtype to i8*
  %call116 = call i8* @memcpy(i8* %139, i8* %141, i64 4) #8
  %142 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr117 = getelementptr inbounds i8, i8* %142, i64 4
  store i8* %add.ptr117, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.118

do.cond.118:                                      ; preds = %do.body.115
  br label %do.end.119

do.end.119:                                       ; preds = %do.cond.118
  %143 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color120 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %143, i32 0, i32 28
  %144 = load i32, i32* %group_color120, align 4, !tbaa !126
  %conv121 = trunc i32 %144 to i8
  %145 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr122 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr122, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv121, i8* %145, align 1, !tbaa !66
  br label %do.body.123

do.body.123:                                      ; preds = %do.end.119
  %146 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %147 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color_numcomps124 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %147, i32 0, i32 27
  %148 = bitcast i32* %group_color_numcomps124 to i8*
  %call125 = call i8* @memcpy(i8* %146, i8* %148, i64 4) #8
  %149 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr126 = getelementptr inbounds i8, i8* %149, i64 4
  store i8* %add.ptr126, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.127

do.cond.127:                                      ; preds = %do.body.123
  br label %do.end.128

do.end.128:                                       ; preds = %do.cond.127
  %150 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %replacing = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %150, i32 0, i32 21
  %151 = load i32, i32* %replacing, align 4, !tbaa !128
  %conv129 = trunc i32 %151 to i8
  %152 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr130 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr130, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv129, i8* %152, align 1, !tbaa !66
  %153 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %function_is_identity = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %153, i32 0, i32 10
  %154 = load i32, i32* %function_is_identity, align 4, !tbaa !129
  %conv131 = trunc i32 %154 to i8
  %155 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr132 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %incdec.ptr132, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv131, i8* %155, align 1, !tbaa !66
  %156 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Background_components = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %156, i32 0, i32 9
  %157 = load i32, i32* %Background_components, align 4, !tbaa !130
  %conv133 = trunc i32 %157 to i8
  %158 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr134 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %incdec.ptr134, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv133, i8* %158, align 1, !tbaa !66
  br label %do.body.135

do.body.135:                                      ; preds = %do.end.128
  %159 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %160 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %bbox136 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %160, i32 0, i32 6
  %161 = bitcast %struct.gs_rect_s* %bbox136 to i8*
  %call137 = call i8* @memcpy(i8* %159, i8* %161, i64 32) #8
  %162 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr138 = getelementptr inbounds i8, i8* %162, i64 32
  store i8* %add.ptr138, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.139

do.cond.139:                                      ; preds = %do.body.135
  br label %do.end.140

do.end.140:                                       ; preds = %do.cond.139
  %163 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %mask_id141 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %163, i32 0, i32 26
  %164 = load i32, i32* %mask_id141, align 4, !tbaa !127
  store i32 %164, i32* %mask_id, align 4, !tbaa !5
  br label %do.body.142

do.body.142:                                      ; preds = %do.end.140
  %165 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %166 = bitcast i32* %mask_id to i8*
  %call143 = call i8* @memcpy(i8* %165, i8* %166, i64 4) #8
  %167 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr144 = getelementptr inbounds i8, i8* %167, i64 4
  store i8* %add.ptr144, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.145

do.cond.145:                                      ; preds = %do.body.142
  br label %do.end.146

do.end.146:                                       ; preds = %do.cond.145
  %168 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Background_components147 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %168, i32 0, i32 9
  %169 = load i32, i32* %Background_components147, align 4, !tbaa !130
  %tobool148 = icmp ne i32 %169, 0
  br i1 %tobool148, label %if.then.149, label %if.end.159

if.then.149:                                      ; preds = %do.end.146
  %170 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start(i64 4, i8* %170) #2
  %171 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Background_components150 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %171, i32 0, i32 9
  %172 = load i32, i32* %Background_components150, align 4, !tbaa !130
  %conv151 = sext i32 %172 to i64
  %mul = mul i64 4, %conv151
  %conv152 = trunc i64 %mul to i32
  store i32 %conv152, i32* %l, align 4, !tbaa !5
  %173 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %174 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %Background = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %174, i32 0, i32 11
  %arraydecay153 = getelementptr inbounds [64 x float], [64 x float]* %Background, i32 0, i32 0
  %175 = bitcast float* %arraydecay153 to i8*
  %176 = load i32, i32* %l, align 4, !tbaa !5
  %conv154 = sext i32 %176 to i64
  %call155 = call i8* @memcpy(i8* %173, i8* %175, i64 %conv154) #8
  %177 = load i32, i32* %l, align 4, !tbaa !5
  %178 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %idx.ext = sext i32 %177 to i64
  %add.ptr156 = getelementptr inbounds i8, i8* %178, i64 %idx.ext
  store i8* %add.ptr156, i8** %pbuf, align 8, !tbaa !1
  %179 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %180 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %GrayBackground = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %180, i32 0, i32 12
  %181 = bitcast float* %GrayBackground to i8*
  %call157 = call i8* @memcpy(i8* %179, i8* %181, i64 4) #8
  %182 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr158 = getelementptr inbounds i8, i8* %182, i64 4
  store i8* %add.ptr158, i8** %pbuf, align 8, !tbaa !1
  %183 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end(i64 4, i8* %183) #2
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.149, %do.end.146
  %184 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %function_is_identity160 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %184, i32 0, i32 10
  %185 = load i32, i32* %function_is_identity160, align 4, !tbaa !129
  %tobool161 = icmp ne i32 %185, 0
  br i1 %tobool161, label %if.end.163, label %if.then.162

if.then.162:                                      ; preds = %if.end.159
  store i32 256, i32* %mask_size, align 4, !tbaa !5
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.162, %if.end.159
  %186 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %group_color164 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %186, i32 0, i32 28
  %187 = load i32, i32* %group_color164, align 4, !tbaa !126
  %cmp165 = icmp eq i32 %187, 5
  br i1 %cmp165, label %if.then.167, label %if.else.187

if.then.167:                                      ; preds = %if.end.163
  %188 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile168 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %188, i32 0, i32 30
  %189 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile168, align 8, !tbaa !120
  %hashcode169 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %189, i32 0, i32 7
  %190 = load i64, i64* %hashcode169, align 8, !tbaa !121
  store i64 %190, i64* %hashcode, align 8, !tbaa !68
  %191 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %192 = load i64, i64* %hashcode, align 8, !tbaa !68
  %call170 = call i32 @clist_icc_searchtable(%struct.gx_device_clist_writer_s* %191, i64 %192) #7
  store i32 %call170, i32* %found_icc, align 4, !tbaa !5
  %193 = load i32, i32* %found_icc, align 4, !tbaa !5
  %tobool171 = icmp ne i32 %193, 0
  br i1 %tobool171, label %if.else.180, label %if.then.172

if.then.172:                                      ; preds = %if.then.167
  %194 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %195 = load i64, i64* %hashcode, align 8, !tbaa !68
  %196 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %iccprofile173 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %196, i32 0, i32 30
  %197 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile173, align 8, !tbaa !120
  %call174 = call i32 @clist_icc_addentry(%struct.gx_device_clist_writer_s* %194, i64 %195, %struct.cmm_profile_s* %197) #7
  br label %do.body.175

do.body.175:                                      ; preds = %if.then.172
  %198 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %199 = bitcast i64* %hashcode to i8*
  %call176 = call i8* @memcpy(i8* %198, i8* %199, i64 8) #8
  %200 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr177 = getelementptr inbounds i8, i8* %200, i64 8
  store i8* %add.ptr177, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.178

do.cond.178:                                      ; preds = %do.body.175
  br label %do.end.179

do.end.179:                                       ; preds = %do.cond.178
  br label %if.end.186

if.else.180:                                      ; preds = %if.then.167
  br label %do.body.181

do.body.181:                                      ; preds = %if.else.180
  %201 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %202 = bitcast i64* %hashcode to i8*
  %call182 = call i8* @memcpy(i8* %201, i8* %202, i64 8) #8
  %203 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr183 = getelementptr inbounds i8, i8* %203, i64 8
  store i8* %add.ptr183, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.184

do.cond.184:                                      ; preds = %do.body.181
  br label %do.end.185

do.end.185:                                       ; preds = %do.cond.184
  br label %if.end.186

if.end.186:                                       ; preds = %do.end.185, %do.end.179
  br label %if.end.193

if.else.187:                                      ; preds = %if.end.163
  br label %do.body.188

do.body.188:                                      ; preds = %if.else.187
  %204 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %205 = bitcast i64* %hashcode to i8*
  %call189 = call i8* @memcpy(i8* %204, i8* %205, i64 8) #8
  %206 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr190 = getelementptr inbounds i8, i8* %206, i64 8
  store i8* %add.ptr190, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.191

do.cond.191:                                      ; preds = %do.body.188
  br label %do.end.192

do.end.192:                                       ; preds = %do.cond.191
  br label %if.end.193

if.end.193:                                       ; preds = %do.end.192, %if.end.186
  br label %sw.epilog

sw.bb.194:                                        ; preds = %if.end
  %207 = load i32, i32* %smask_level, align 4, !tbaa !5
  %dec195 = add nsw i32 %207, -1
  store i32 %dec195, i32* %smask_level, align 4, !tbaa !5
  %208 = load i32, i32* %smask_level, align 4, !tbaa !5
  %cmp196 = icmp eq i32 %208, 0
  br i1 %cmp196, label %land.lhs.true.198, label %if.end.203

land.lhs.true.198:                                ; preds = %sw.bb.194
  %209 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %cmp199 = icmp eq i32 %209, 0
  br i1 %cmp199, label %if.then.201, label %if.end.203

if.then.201:                                      ; preds = %land.lhs.true.198
  %210 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %page_pdf14_needed202 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %210, i32 0, i32 84
  %211 = load i32, i32* %page_pdf14_needed202, align 4, !tbaa !114
  store i32 %211, i32* %pdf14_needed, align 4, !tbaa !5
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.201, %land.lhs.true.198, %sw.bb.194
  br label %sw.epilog

sw.bb.204:                                        ; preds = %if.end
  %212 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %blend_mode205 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %212, i32 0, i32 15
  %213 = load i32, i32* %blend_mode205, align 4, !tbaa !125
  %cmp206 = icmp ne i32 %213, 0
  br i1 %cmp206, label %if.then.220, label %lor.lhs.false.208

lor.lhs.false.208:                                ; preds = %sw.bb.204
  %214 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %opacity209 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %214, i32 0, i32 17
  %alpha210 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity209, i32 0, i32 0
  %215 = load float, float* %alpha210, align 4, !tbaa !131
  %conv211 = fpext float %215 to double
  %cmp212 = fcmp une double %conv211, 1.000000e+00
  br i1 %cmp212, label %if.then.220, label %lor.lhs.false.214

lor.lhs.false.214:                                ; preds = %lor.lhs.false.208
  %216 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %shape215 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %216, i32 0, i32 18
  %alpha216 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape215, i32 0, i32 0
  %217 = load float, float* %alpha216, align 4, !tbaa !132
  %conv217 = fpext float %217 to double
  %cmp218 = fcmp une double %conv217, 1.000000e+00
  br i1 %cmp218, label %if.then.220, label %if.else.221

if.then.220:                                      ; preds = %lor.lhs.false.214, %lor.lhs.false.208, %sw.bb.204
  store i32 1, i32* %pdf14_needed, align 4, !tbaa !5
  br label %if.end.229

if.else.221:                                      ; preds = %lor.lhs.false.214
  %218 = load i32, i32* %smask_level, align 4, !tbaa !5
  %cmp222 = icmp eq i32 %218, 0
  br i1 %cmp222, label %land.lhs.true.224, label %if.end.228

land.lhs.true.224:                                ; preds = %if.else.221
  %219 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %cmp225 = icmp eq i32 %219, 0
  br i1 %cmp225, label %if.then.227, label %if.end.228

if.then.227:                                      ; preds = %land.lhs.true.224
  store i32 0, i32* %pdf14_needed, align 4, !tbaa !5
  br label %if.end.228

if.end.228:                                       ; preds = %if.then.227, %land.lhs.true.224, %if.else.221
  br label %if.end.229

if.end.229:                                       ; preds = %if.end.228, %if.then.220
  %220 = load i32, i32* %smask_level, align 4, !tbaa !5
  %cmp230 = icmp eq i32 %220, 0
  br i1 %cmp230, label %land.lhs.true.232, label %if.end.237

land.lhs.true.232:                                ; preds = %if.end.229
  %221 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %cmp233 = icmp eq i32 %221, 0
  br i1 %cmp233, label %if.then.235, label %if.end.237

if.then.235:                                      ; preds = %land.lhs.true.232
  %222 = load i32, i32* %pdf14_needed, align 4, !tbaa !5
  %223 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %page_pdf14_needed236 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %223, i32 0, i32 84
  store i32 %222, i32* %page_pdf14_needed236, align 4, !tbaa !114
  br label %if.end.237

if.end.237:                                       ; preds = %if.then.235, %land.lhs.true.232, %if.end.229
  %224 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %224, i32 0, i32 2
  %225 = load i32, i32* %changed, align 4, !tbaa !133
  %conv238 = trunc i32 %225 to i8
  %226 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr239 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %incdec.ptr239, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv238, i8* %226, align 1, !tbaa !66
  %227 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed240 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %227, i32 0, i32 2
  %228 = load i32, i32* %changed240, align 4, !tbaa !133
  %and241 = and i32 %228, 1
  %tobool242 = icmp ne i32 %and241, 0
  br i1 %tobool242, label %if.then.243, label %if.end.247

if.then.243:                                      ; preds = %if.end.237
  %229 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %blend_mode244 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %229, i32 0, i32 15
  %230 = load i32, i32* %blend_mode244, align 4, !tbaa !125
  %conv245 = trunc i32 %230 to i8
  %231 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr246 = getelementptr inbounds i8, i8* %231, i32 1
  store i8* %incdec.ptr246, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv245, i8* %231, align 1, !tbaa !66
  br label %if.end.247

if.end.247:                                       ; preds = %if.then.243, %if.end.237
  %232 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed248 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %232, i32 0, i32 2
  %233 = load i32, i32* %changed248, align 4, !tbaa !133
  %and249 = and i32 %233, 2
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %if.then.251, label %if.end.254

if.then.251:                                      ; preds = %if.end.247
  %234 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %text_knockout = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %234, i32 0, i32 16
  %235 = load i32, i32* %text_knockout, align 4, !tbaa !134
  %conv252 = trunc i32 %235 to i8
  %236 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr253 = getelementptr inbounds i8, i8* %236, i32 1
  store i8* %incdec.ptr253, i8** %pbuf, align 8, !tbaa !1
  store i8 %conv252, i8* %236, align 1, !tbaa !66
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.251, %if.end.247
  %237 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed255 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %237, i32 0, i32 2
  %238 = load i32, i32* %changed255, align 4, !tbaa !133
  %and256 = and i32 %238, 8
  %tobool257 = icmp ne i32 %and256, 0
  br i1 %tobool257, label %if.then.258, label %if.end.266

if.then.258:                                      ; preds = %if.end.254
  br label %do.body.259

do.body.259:                                      ; preds = %if.then.258
  %239 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %240 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %opacity260 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %240, i32 0, i32 17
  %alpha261 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity260, i32 0, i32 0
  %241 = bitcast float* %alpha261 to i8*
  %call262 = call i8* @memcpy(i8* %239, i8* %241, i64 4) #8
  %242 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr263 = getelementptr inbounds i8, i8* %242, i64 4
  store i8* %add.ptr263, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.264

do.cond.264:                                      ; preds = %do.body.259
  br label %do.end.265

do.end.265:                                       ; preds = %do.cond.264
  br label %if.end.266

if.end.266:                                       ; preds = %do.end.265, %if.end.254
  %243 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed267 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %243, i32 0, i32 2
  %244 = load i32, i32* %changed267, align 4, !tbaa !133
  %and268 = and i32 %244, 4
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.then.270, label %if.end.278

if.then.270:                                      ; preds = %if.end.266
  br label %do.body.271

do.body.271:                                      ; preds = %if.then.270
  %245 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %246 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %shape272 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %246, i32 0, i32 18
  %alpha273 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape272, i32 0, i32 0
  %247 = bitcast float* %alpha273 to i8*
  %call274 = call i8* @memcpy(i8* %245, i8* %247, i64 4) #8
  %248 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr275 = getelementptr inbounds i8, i8* %248, i64 4
  store i8* %add.ptr275, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.276

do.cond.276:                                      ; preds = %do.body.271
  br label %do.end.277

do.end.277:                                       ; preds = %do.cond.276
  br label %if.end.278

if.end.278:                                       ; preds = %do.end.277, %if.end.266
  %249 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed279 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %249, i32 0, i32 2
  %250 = load i32, i32* %changed279, align 4, !tbaa !133
  %and280 = and i32 %250, 16
  %tobool281 = icmp ne i32 %and280, 0
  br i1 %tobool281, label %if.then.282, label %if.end.288

if.then.282:                                      ; preds = %if.end.278
  br label %do.body.283

do.body.283:                                      ; preds = %if.then.282
  %251 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %252 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %overprint = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %252, i32 0, i32 22
  %253 = bitcast i32* %overprint to i8*
  %call284 = call i8* @memcpy(i8* %251, i8* %253, i64 4) #8
  %254 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr285 = getelementptr inbounds i8, i8* %254, i64 4
  store i8* %add.ptr285, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.286

do.cond.286:                                      ; preds = %do.body.283
  br label %do.end.287

do.end.287:                                       ; preds = %do.cond.286
  br label %if.end.288

if.end.288:                                       ; preds = %do.end.287, %if.end.278
  %255 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed289 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %255, i32 0, i32 2
  %256 = load i32, i32* %changed289, align 4, !tbaa !133
  %and290 = and i32 %256, 32
  %tobool291 = icmp ne i32 %and290, 0
  br i1 %tobool291, label %if.then.292, label %if.end.298

if.then.292:                                      ; preds = %if.end.288
  br label %do.body.293

do.body.293:                                      ; preds = %if.then.292
  %257 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %258 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %overprint_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %258, i32 0, i32 23
  %259 = bitcast i32* %overprint_mode to i8*
  %call294 = call i8* @memcpy(i8* %257, i8* %259, i64 4) #8
  %260 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr295 = getelementptr inbounds i8, i8* %260, i64 4
  store i8* %add.ptr295, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.296

do.cond.296:                                      ; preds = %do.body.293
  br label %do.end.297

do.end.297:                                       ; preds = %do.cond.296
  br label %if.end.298

if.end.298:                                       ; preds = %do.end.297, %if.end.288
  %261 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %changed299 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %261, i32 0, i32 2
  %262 = load i32, i32* %changed299, align 4, !tbaa !133
  %and300 = and i32 %262, 64
  %tobool301 = icmp ne i32 %and300, 0
  br i1 %tobool301, label %if.then.302, label %if.end.308

if.then.302:                                      ; preds = %if.end.298
  br label %do.body.303

do.body.303:                                      ; preds = %if.then.302
  %263 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %264 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %blendspot = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %264, i32 0, i32 24
  %265 = bitcast i32* %blendspot to i8*
  %call304 = call i8* @memcpy(i8* %263, i8* %265, i64 4) #8
  %266 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %add.ptr305 = getelementptr inbounds i8, i8* %266, i64 4
  store i8* %add.ptr305, i8** %pbuf, align 8, !tbaa !1
  br label %do.cond.306

do.cond.306:                                      ; preds = %do.body.303
  br label %do.end.307

do.end.307:                                       ; preds = %do.cond.306
  br label %if.end.308

if.end.308:                                       ; preds = %do.end.307, %if.end.298
  br label %sw.epilog

sw.bb.309:                                        ; preds = %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.310:                                        ; preds = %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %if.end, %if.end, %if.end.308, %if.end.203, %if.end.193, %if.end.107, %if.end.38, %do.end.30, %if.end.23, %sw.default
  %267 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %arraydecay311 = getelementptr inbounds [361 x i8], [361 x i8]* %buf, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %267 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay311 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %268 = load i32, i32* %mask_size, align 4, !tbaa !5
  %conv312 = sext i32 %268 to i64
  %add313 = add nsw i64 %sub.ptr.sub, %conv312
  %conv314 = trunc i64 %add313 to i32
  store i32 %conv314, i32* %need, align 4, !tbaa !5
  %269 = load i32, i32* %need, align 4, !tbaa !5
  %270 = load i32*, i32** %psize.addr, align 8, !tbaa !1
  store i32 %269, i32* %270, align 4, !tbaa !5
  %271 = load i32, i32* %need, align 4, !tbaa !5
  %272 = load i32, i32* %avail, align 4, !tbaa !5
  %cmp315 = icmp sgt i32 %271, %272
  br i1 %cmp315, label %if.then.317, label %if.end.321

if.then.317:                                      ; preds = %sw.epilog
  %273 = load i32, i32* %avail, align 4, !tbaa !5
  %tobool318 = icmp ne i32 %273, 0
  br i1 %tobool318, label %if.then.319, label %if.else.320

if.then.319:                                      ; preds = %if.then.317
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else.320:                                      ; preds = %if.then.317
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.321:                                       ; preds = %sw.epilog
  %274 = load i32, i32* %need, align 4, !tbaa !5
  %add322 = add nsw i32 %274, 3
  %conv323 = sext i32 %add322 to i64
  %cmp324 = icmp ugt i64 %conv323, 617
  br i1 %cmp324, label %if.then.326, label %if.end.327

if.then.326:                                      ; preds = %if.end.321
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.327:                                       ; preds = %if.end.321
  %275 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %arraydecay328 = getelementptr inbounds [361 x i8], [361 x i8]* %buf, i32 0, i32 0
  %276 = load i32, i32* %need, align 4, !tbaa !5
  %277 = load i32, i32* %mask_size, align 4, !tbaa !5
  %sub = sub nsw i32 %276, %277
  %conv329 = sext i32 %sub to i64
  %call330 = call i8* @memcpy(i8* %275, i8* %arraydecay328, i64 %conv329) #8
  %278 = load i32, i32* %mask_size, align 4, !tbaa !5
  %tobool331 = icmp ne i32 %278, 0
  br i1 %tobool331, label %if.then.332, label %if.end.340

if.then.332:                                      ; preds = %if.end.327
  %279 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %280 = load i32, i32* %need, align 4, !tbaa !5
  %idx.ext333 = sext i32 %280 to i64
  %add.ptr334 = getelementptr inbounds i8, i8* %279, i64 %idx.ext333
  %281 = load i32, i32* %mask_size, align 4, !tbaa !5
  %idx.ext335 = sext i32 %281 to i64
  %idx.neg = sub i64 0, %idx.ext335
  %add.ptr336 = getelementptr inbounds i8, i8* %add.ptr334, i64 %idx.neg
  %282 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams, align 8, !tbaa !1
  %transfer_fn = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %282, i32 0, i32 14
  %arraydecay337 = getelementptr inbounds [256 x i8], [256 x i8]* %transfer_fn, i32 0, i32 0
  %283 = load i32, i32* %mask_size, align 4, !tbaa !5
  %conv338 = sext i32 %283 to i64
  %call339 = call i8* @memcpy(i8* %add.ptr336, i8* %arraydecay337, i64 %conv338) #8
  br label %if.end.340

if.end.340:                                       ; preds = %if.then.332, %if.end.327
  br label %do.body.341

do.body.341:                                      ; preds = %if.end.340
  br label %do.cond.342

do.cond.342:                                      ; preds = %do.body.341
  br label %do.end.343

do.end.343:                                       ; preds = %do.cond.342
  %284 = load i32, i32* %pdf14_needed, align 4, !tbaa !5
  %285 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_needed344 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %285, i32 0, i32 81
  store i32 %284, i32* %pdf14_needed344, align 4, !tbaa !94
  %286 = load i32, i32* %trans_group_level, align 4, !tbaa !5
  %287 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_trans_group_level345 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %287, i32 0, i32 82
  store i32 %286, i32* %pdf14_trans_group_level345, align 4, !tbaa !112
  %288 = load i32, i32* %smask_level, align 4, !tbaa !5
  %289 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev.addr, align 8, !tbaa !1
  %pdf14_smask_level346 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %289, i32 0, i32 83
  store i32 %288, i32* %pdf14_smask_level346, align 4, !tbaa !113
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.343, %if.then.326, %if.else.320, %if.then.319, %sw.bb.310, %sw.bb.309, %if.then.113, %if.then.43, %if.then
  %290 = bitcast i32* %smask_level to i8*
  call void @llvm.lifetime.end(i64 4, i8* %290) #2
  %291 = bitcast i32* %trans_group_level to i8*
  call void @llvm.lifetime.end(i64 4, i8* %291) #2
  %292 = bitcast i32* %pdf14_needed to i8*
  call void @llvm.lifetime.end(i64 4, i8* %292) #2
  %293 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %293) #2
  %294 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %294) #2
  %295 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %295) #2
  %296 = bitcast i64* %hashcode to i8*
  call void @llvm.lifetime.end(i64 8, i8* %296) #2
  %297 = bitcast i32* %found_icc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %297) #2
  %298 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %298) #2
  %299 = bitcast i32* %mask_id to i8*
  call void @llvm.lifetime.end(i64 4, i8* %299) #2
  %300 = bitcast i32* %mask_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %300) #2
  %301 = bitcast i32* %opcode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %301) #2
  %302 = bitcast i8** %pbuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %302) #2
  %303 = bitcast [361 x i8]* %buf to i8*
  call void @llvm.lifetime.end(i64 361, i8* %303) #2
  %304 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.end(i64 4, i8* %304) #2
  %305 = bitcast i32* %need to i8*
  call void @llvm.lifetime.end(i64 4, i8* %305) #2
  %306 = bitcast %struct.gs_pdf14trans_params_s** %pparams to i8*
  call void @llvm.lifetime.end(i64 8, i8* %306) #2
  %307 = load i32, i32* %retval
  ret i32 %307
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_read(%struct.gs_composite_s** %ppct, i8* %data, i32 %size, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %ppct.addr = alloca %struct.gs_composite_s**, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %params = alloca %struct.gs_pdf14trans_params_s, align 8
  %start = alloca i8*, align 8
  %used = alloca i32, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.gs_composite_s** %ppct, %struct.gs_composite_s*** %ppct.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.start(i64 704, i8* %0) #2
  %1 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 704, i32 8, i1 false)
  %2 = bitcast i8** %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !1
  store i8* %3, i8** %start, align 8, !tbaa !1
  %4 = bitcast i32* %used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %6 = load i32, i32* %size.addr, align 4, !tbaa !5
  %cmp = icmp ult i32 %6, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %data.addr, align 8, !tbaa !1
  %8 = load i8, i8* %7, align 1, !tbaa !66
  %conv = zext i8 %8 to i32
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  store i32 %conv, i32* %pdf14_op, align 4, !tbaa !93
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 20
  %9 = bitcast %struct.gs_matrix_s* %ctm to i8*
  %call = call i8* @memset(i8* %9, i32 0, i64 24) #8
  %pdf14_op1 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %10 = load i32, i32* %pdf14_op1, align 4, !tbaa !93
  switch i32 %10, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.epilog
    i32 1, label %sw.bb.11
    i32 4, label %sw.bb.18
    i32 8, label %sw.epilog
    i32 9, label %sw.epilog
    i32 3, label %sw.bb.19
    i32 5, label %sw.bb.61
    i32 6, label %sw.epilog
    i32 10, label %sw.bb.130
    i32 11, label %sw.bb.131
    i32 7, label %sw.bb.132
  ]

sw.default:                                       ; preds = %do.end
  br label %sw.epilog

sw.bb:                                            ; preds = %do.end
  br label %do.body.2

do.body.2:                                        ; preds = %sw.bb
  %num_spot_colors = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 1
  %11 = bitcast i32* %num_spot_colors to i8*
  %12 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call3 = call i8* @memcpy(i8* %11, i8* %12, i64 4) #8
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 4
  store i8* %add.ptr, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.4

do.cond.4:                                        ; preds = %do.body.2
  br label %do.end.5

do.end.5:                                         ; preds = %do.cond.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %is_pattern = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 32
  %14 = bitcast i32* %is_pattern to i8*
  %15 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call7 = call i8* @memcpy(i8* %14, i8* %15, i64 4) #8
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 4
  store i8* %add.ptr8, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.9

do.cond.9:                                        ; preds = %do.body.6
  br label %do.end.10

do.end.10:                                        ; preds = %do.cond.9
  br label %sw.epilog

sw.bb.11:                                         ; preds = %do.end
  br label %do.body.12

do.body.12:                                       ; preds = %sw.bb.11
  %is_pattern13 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 32
  %17 = bitcast i32* %is_pattern13 to i8*
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call14 = call i8* @memcpy(i8* %17, i8* %18, i64 4) #8
  %19 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr15 = getelementptr inbounds i8, i8* %19, i64 4
  store i8* %add.ptr15, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.16

do.cond.16:                                       ; preds = %do.body.12
  br label %do.end.17

do.end.17:                                        ; preds = %do.cond.16
  br label %sw.epilog

sw.bb.18:                                         ; preds = %do.end
  %20 = load i32, i32* %code, align 4, !tbaa !5
  %add = add nsw i32 %20, 0
  store i32 %add, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.19:                                         ; preds = %do.end
  %ctm20 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 20
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call21 = call i8* @cmd_read_matrix(%struct.gs_matrix_s* %ctm20, i8* %21) #7
  store i8* %call21, i8** %data.addr, align 8, !tbaa !1
  %22 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %23 = load i8, i8* %22, align 1, !tbaa !66
  %conv22 = zext i8 %23 to i32
  %and = and i32 %conv22, 1
  %Isolated = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 3
  store i32 %and, i32* %Isolated, align 4, !tbaa !123
  %24 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr23 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr23, i8** %data.addr, align 8, !tbaa !1
  %25 = load i8, i8* %24, align 1, !tbaa !66
  %conv24 = zext i8 %25 to i32
  %shr = ashr i32 %conv24, 1
  %and25 = and i32 %shr, 1
  %Knockout = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 4
  store i32 %and25, i32* %Knockout, align 4, !tbaa !124
  %26 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr26 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr26, i8** %data.addr, align 8, !tbaa !1
  %27 = load i8, i8* %26, align 1, !tbaa !66
  %conv27 = zext i8 %27 to i32
  %blend_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 15
  store i32 %conv27, i32* %blend_mode, align 4, !tbaa !125
  %28 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr28 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr28, i8** %data.addr, align 8, !tbaa !1
  %29 = load i8, i8* %28, align 1, !tbaa !66
  %conv29 = zext i8 %29 to i32
  %group_color = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 28
  store i32 %conv29, i32* %group_color, align 4, !tbaa !126
  br label %do.body.30

do.body.30:                                       ; preds = %sw.bb.19
  %group_color_numcomps = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 27
  %30 = bitcast i32* %group_color_numcomps to i8*
  %31 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call31 = call i8* @memcpy(i8* %30, i8* %31, i64 4) #8
  %32 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr32 = getelementptr inbounds i8, i8* %32, i64 4
  store i8* %add.ptr32, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.33

do.cond.33:                                       ; preds = %do.body.30
  br label %do.end.34

do.end.34:                                        ; preds = %do.cond.33
  br label %do.body.35

do.body.35:                                       ; preds = %do.end.34
  %opacity = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 17
  %alpha = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %33 = bitcast float* %alpha to i8*
  %34 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call36 = call i8* @memcpy(i8* %33, i8* %34, i64 4) #8
  %35 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr37 = getelementptr inbounds i8, i8* %35, i64 4
  store i8* %add.ptr37, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.38

do.cond.38:                                       ; preds = %do.body.35
  br label %do.end.39

do.end.39:                                        ; preds = %do.cond.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %shape = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 18
  %alpha41 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %36 = bitcast float* %alpha41 to i8*
  %37 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call42 = call i8* @memcpy(i8* %36, i8* %37, i64 4) #8
  %38 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr43 = getelementptr inbounds i8, i8* %38, i64 4
  store i8* %add.ptr43, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.44

do.cond.44:                                       ; preds = %do.body.40
  br label %do.end.45

do.end.45:                                        ; preds = %do.cond.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %bbox = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 6
  %39 = bitcast %struct.gs_rect_s* %bbox to i8*
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call47 = call i8* @memcpy(i8* %39, i8* %40, i64 32) #8
  %41 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr48 = getelementptr inbounds i8, i8* %41, i64 32
  store i8* %add.ptr48, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.49

do.cond.49:                                       ; preds = %do.body.46
  br label %do.end.50

do.end.50:                                        ; preds = %do.cond.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %mask_id = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 26
  %42 = bitcast i32* %mask_id to i8*
  %43 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call52 = call i8* @memcpy(i8* %42, i8* %43, i64 4) #8
  %44 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr53 = getelementptr inbounds i8, i8* %44, i64 4
  store i8* %add.ptr53, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.54

do.cond.54:                                       ; preds = %do.body.51
  br label %do.end.55

do.end.55:                                        ; preds = %do.cond.54
  br label %do.body.56

do.body.56:                                       ; preds = %do.end.55
  %icc_hash = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 29
  %45 = bitcast i64* %icc_hash to i8*
  %46 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call57 = call i8* @memcpy(i8* %45, i8* %46, i64 8) #8
  %47 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr58 = getelementptr inbounds i8, i8* %47, i64 8
  store i8* %add.ptr58, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.59

do.cond.59:                                       ; preds = %do.body.56
  br label %do.end.60

do.end.60:                                        ; preds = %do.cond.59
  br label %sw.epilog

sw.bb.61:                                         ; preds = %do.end
  %ctm62 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 20
  %48 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call63 = call i8* @cmd_read_matrix(%struct.gs_matrix_s* %ctm62, i8* %48) #7
  store i8* %call63, i8** %data.addr, align 8, !tbaa !1
  br label %do.body.64

do.body.64:                                       ; preds = %sw.bb.61
  %subtype = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 8
  %49 = bitcast i32* %subtype to i8*
  %50 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call65 = call i8* @memcpy(i8* %49, i8* %50, i64 4) #8
  %51 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr66 = getelementptr inbounds i8, i8* %51, i64 4
  store i8* %add.ptr66, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.67

do.cond.67:                                       ; preds = %do.body.64
  br label %do.end.68

do.end.68:                                        ; preds = %do.cond.67
  %52 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr69 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr69, i8** %data.addr, align 8, !tbaa !1
  %53 = load i8, i8* %52, align 1, !tbaa !66
  %conv70 = zext i8 %53 to i32
  %group_color71 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 28
  store i32 %conv70, i32* %group_color71, align 4, !tbaa !126
  br label %do.body.72

do.body.72:                                       ; preds = %do.end.68
  %group_color_numcomps73 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 27
  %54 = bitcast i32* %group_color_numcomps73 to i8*
  %55 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call74 = call i8* @memcpy(i8* %54, i8* %55, i64 4) #8
  %56 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr75 = getelementptr inbounds i8, i8* %56, i64 4
  store i8* %add.ptr75, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.76

do.cond.76:                                       ; preds = %do.body.72
  br label %do.end.77

do.end.77:                                        ; preds = %do.cond.76
  %57 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr78 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr78, i8** %data.addr, align 8, !tbaa !1
  %58 = load i8, i8* %57, align 1, !tbaa !66
  %conv79 = zext i8 %58 to i32
  %replacing = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 21
  store i32 %conv79, i32* %replacing, align 4, !tbaa !128
  %59 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr80 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr80, i8** %data.addr, align 8, !tbaa !1
  %60 = load i8, i8* %59, align 1, !tbaa !66
  %conv81 = zext i8 %60 to i32
  %function_is_identity = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 10
  store i32 %conv81, i32* %function_is_identity, align 4, !tbaa !129
  %61 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr82 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr82, i8** %data.addr, align 8, !tbaa !1
  %62 = load i8, i8* %61, align 1, !tbaa !66
  %conv83 = zext i8 %62 to i32
  %Background_components = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 9
  store i32 %conv83, i32* %Background_components, align 4, !tbaa !130
  br label %do.body.84

do.body.84:                                       ; preds = %do.end.77
  %bbox85 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 6
  %63 = bitcast %struct.gs_rect_s* %bbox85 to i8*
  %64 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call86 = call i8* @memcpy(i8* %63, i8* %64, i64 32) #8
  %65 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr87 = getelementptr inbounds i8, i8* %65, i64 32
  store i8* %add.ptr87, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.88

do.cond.88:                                       ; preds = %do.body.84
  br label %do.end.89

do.end.89:                                        ; preds = %do.cond.88
  br label %do.body.90

do.body.90:                                       ; preds = %do.end.89
  %mask_id91 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 26
  %66 = bitcast i32* %mask_id91 to i8*
  %67 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call92 = call i8* @memcpy(i8* %66, i8* %67, i64 4) #8
  %68 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr93 = getelementptr inbounds i8, i8* %68, i64 4
  store i8* %add.ptr93, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.94

do.cond.94:                                       ; preds = %do.body.90
  br label %do.end.95

do.end.95:                                        ; preds = %do.cond.94
  %Background_components96 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 9
  %69 = load i32, i32* %Background_components96, align 4, !tbaa !130
  %tobool = icmp ne i32 %69, 0
  br i1 %tobool, label %if.then.97, label %if.end.106

if.then.97:                                       ; preds = %do.end.95
  %70 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start(i64 4, i8* %70) #2
  %Background_components98 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 9
  %71 = load i32, i32* %Background_components98, align 4, !tbaa !130
  %conv99 = sext i32 %71 to i64
  %mul = mul i64 4, %conv99
  %conv100 = trunc i64 %mul to i32
  store i32 %conv100, i32* %l, align 4, !tbaa !5
  %Background = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 11
  %arraydecay = getelementptr inbounds [64 x float], [64 x float]* %Background, i32 0, i32 0
  %72 = bitcast float* %arraydecay to i8*
  %73 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %74 = load i32, i32* %l, align 4, !tbaa !5
  %conv101 = sext i32 %74 to i64
  %call102 = call i8* @memcpy(i8* %72, i8* %73, i64 %conv101) #8
  %75 = load i32, i32* %l, align 4, !tbaa !5
  %76 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %idx.ext = sext i32 %75 to i64
  %add.ptr103 = getelementptr inbounds i8, i8* %76, i64 %idx.ext
  store i8* %add.ptr103, i8** %data.addr, align 8, !tbaa !1
  %GrayBackground = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 12
  %77 = bitcast float* %GrayBackground to i8*
  %78 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call104 = call i8* @memcpy(i8* %77, i8* %78, i64 4) #8
  %79 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr105 = getelementptr inbounds i8, i8* %79, i64 4
  store i8* %add.ptr105, i8** %data.addr, align 8, !tbaa !1
  %80 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end(i64 4, i8* %80) #2
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.97, %do.end.95
  br label %do.body.107

do.body.107:                                      ; preds = %if.end.106
  %icc_hash108 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 29
  %81 = bitcast i64* %icc_hash108 to i8*
  %82 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call109 = call i8* @memcpy(i8* %81, i8* %82, i64 8) #8
  %83 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr110 = getelementptr inbounds i8, i8* %83, i64 8
  store i8* %add.ptr110, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.111

do.cond.111:                                      ; preds = %do.body.107
  br label %do.end.112

do.end.112:                                       ; preds = %do.cond.111
  %function_is_identity113 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 10
  %84 = load i32, i32* %function_is_identity113, align 4, !tbaa !129
  %tobool114 = icmp ne i32 %84, 0
  br i1 %tobool114, label %if.then.115, label %if.else

if.then.115:                                      ; preds = %do.end.112
  %85 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %85) #2
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.115
  %86 = load i32, i32* %i, align 4, !tbaa !5
  %cmp116 = icmp slt i32 %86, 256
  br i1 %cmp116, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %87 = load i32, i32* %i, align 4, !tbaa !5
  %conv118 = sitofp i32 %87 to double
  %mul119 = fmul double %conv118, 1.000000e+00
  %add120 = fadd double %mul119, 5.000000e-01
  %call121 = call double @floor(double %add120) #9
  %conv122 = fptoui double %call121 to i8
  %88 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %88 to i64
  %transfer_fn = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 14
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %transfer_fn, i32 0, i64 %idxprom
  store i8 %conv122, i8* %arrayidx, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %89 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %89, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %90 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %90) #2
  br label %if.end.129

if.else:                                          ; preds = %do.end.112
  br label %do.body.123

do.body.123:                                      ; preds = %if.else
  %transfer_fn124 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 14
  %91 = bitcast [256 x i8]* %transfer_fn124 to i8*
  %92 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call125 = call i8* @memcpy(i8* %91, i8* %92, i64 256) #8
  %93 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr126 = getelementptr inbounds i8, i8* %93, i64 256
  store i8* %add.ptr126, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.127

do.cond.127:                                      ; preds = %do.body.123
  br label %do.end.128

do.end.128:                                       ; preds = %do.cond.127
  br label %if.end.129

if.end.129:                                       ; preds = %do.end.128, %for.end
  br label %sw.epilog

sw.bb.130:                                        ; preds = %do.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.131:                                        ; preds = %do.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.132:                                        ; preds = %do.end
  %94 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr133 = getelementptr inbounds i8, i8* %94, i32 1
  store i8* %incdec.ptr133, i8** %data.addr, align 8, !tbaa !1
  %95 = load i8, i8* %94, align 1, !tbaa !66
  %conv134 = zext i8 %95 to i32
  %changed = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  store i32 %conv134, i32* %changed, align 4, !tbaa !133
  %changed135 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %96 = load i32, i32* %changed135, align 4, !tbaa !133
  %and136 = and i32 %96, 1
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %if.then.138, label %if.end.142

if.then.138:                                      ; preds = %sw.bb.132
  %97 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr139 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr139, i8** %data.addr, align 8, !tbaa !1
  %98 = load i8, i8* %97, align 1, !tbaa !66
  %conv140 = zext i8 %98 to i32
  %blend_mode141 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 15
  store i32 %conv140, i32* %blend_mode141, align 4, !tbaa !125
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.138, %sw.bb.132
  %changed143 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %99 = load i32, i32* %changed143, align 4, !tbaa !133
  %and144 = and i32 %99, 2
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %if.then.146, label %if.end.149

if.then.146:                                      ; preds = %if.end.142
  %100 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %incdec.ptr147 = getelementptr inbounds i8, i8* %100, i32 1
  store i8* %incdec.ptr147, i8** %data.addr, align 8, !tbaa !1
  %101 = load i8, i8* %100, align 1, !tbaa !66
  %conv148 = zext i8 %101 to i32
  %text_knockout = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 16
  store i32 %conv148, i32* %text_knockout, align 4, !tbaa !134
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.146, %if.end.142
  %changed150 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %102 = load i32, i32* %changed150, align 4, !tbaa !133
  %and151 = and i32 %102, 8
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %if.then.153, label %if.end.161

if.then.153:                                      ; preds = %if.end.149
  br label %do.body.154

do.body.154:                                      ; preds = %if.then.153
  %opacity155 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 17
  %alpha156 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity155, i32 0, i32 0
  %103 = bitcast float* %alpha156 to i8*
  %104 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call157 = call i8* @memcpy(i8* %103, i8* %104, i64 4) #8
  %105 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr158 = getelementptr inbounds i8, i8* %105, i64 4
  store i8* %add.ptr158, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.159

do.cond.159:                                      ; preds = %do.body.154
  br label %do.end.160

do.end.160:                                       ; preds = %do.cond.159
  br label %if.end.161

if.end.161:                                       ; preds = %do.end.160, %if.end.149
  %changed162 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %106 = load i32, i32* %changed162, align 4, !tbaa !133
  %and163 = and i32 %106, 4
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.then.165, label %if.end.173

if.then.165:                                      ; preds = %if.end.161
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %shape167 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 18
  %alpha168 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape167, i32 0, i32 0
  %107 = bitcast float* %alpha168 to i8*
  %108 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call169 = call i8* @memcpy(i8* %107, i8* %108, i64 4) #8
  %109 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr170 = getelementptr inbounds i8, i8* %109, i64 4
  store i8* %add.ptr170, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.171

do.cond.171:                                      ; preds = %do.body.166
  br label %do.end.172

do.end.172:                                       ; preds = %do.cond.171
  br label %if.end.173

if.end.173:                                       ; preds = %do.end.172, %if.end.161
  %changed174 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %110 = load i32, i32* %changed174, align 4, !tbaa !133
  %and175 = and i32 %110, 16
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.183

if.then.177:                                      ; preds = %if.end.173
  br label %do.body.178

do.body.178:                                      ; preds = %if.then.177
  %overprint = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 22
  %111 = bitcast i32* %overprint to i8*
  %112 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call179 = call i8* @memcpy(i8* %111, i8* %112, i64 4) #8
  %113 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr180 = getelementptr inbounds i8, i8* %113, i64 4
  store i8* %add.ptr180, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.181

do.cond.181:                                      ; preds = %do.body.178
  br label %do.end.182

do.end.182:                                       ; preds = %do.cond.181
  br label %if.end.183

if.end.183:                                       ; preds = %do.end.182, %if.end.173
  %changed184 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %114 = load i32, i32* %changed184, align 4, !tbaa !133
  %and185 = and i32 %114, 32
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %if.then.187, label %if.end.193

if.then.187:                                      ; preds = %if.end.183
  br label %do.body.188

do.body.188:                                      ; preds = %if.then.187
  %overprint_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 23
  %115 = bitcast i32* %overprint_mode to i8*
  %116 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call189 = call i8* @memcpy(i8* %115, i8* %116, i64 4) #8
  %117 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr190 = getelementptr inbounds i8, i8* %117, i64 4
  store i8* %add.ptr190, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.191

do.cond.191:                                      ; preds = %do.body.188
  br label %do.end.192

do.end.192:                                       ; preds = %do.cond.191
  br label %if.end.193

if.end.193:                                       ; preds = %do.end.192, %if.end.183
  %changed194 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  %118 = load i32, i32* %changed194, align 4, !tbaa !133
  %and195 = and i32 %118, 64
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %if.then.197, label %if.end.203

if.then.197:                                      ; preds = %if.end.193
  br label %do.body.198

do.body.198:                                      ; preds = %if.then.197
  %blendspot = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 24
  %119 = bitcast i32* %blendspot to i8*
  %120 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call199 = call i8* @memcpy(i8* %119, i8* %120, i64 4) #8
  %121 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %add.ptr200 = getelementptr inbounds i8, i8* %121, i64 4
  store i8* %add.ptr200, i8** %data.addr, align 8, !tbaa !1
  br label %do.cond.201

do.cond.201:                                      ; preds = %do.body.198
  br label %do.end.202

do.end.202:                                       ; preds = %do.cond.201
  br label %if.end.203

if.end.203:                                       ; preds = %do.end.202, %if.end.193
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.203, %do.end, %do.end, %do.end, %do.end, %if.end.129, %do.end.60, %sw.bb.18, %do.end.17, %do.end.10, %sw.default
  %122 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppct.addr, align 8, !tbaa !1
  %123 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call204 = call i32 @gs_create_pdf14trans(%struct.gs_composite_s** %122, %struct.gs_pdf14trans_params_s* %params, %struct.gs_memory_s* %123) #7
  store i32 %call204, i32* %code, align 4, !tbaa !5
  %124 = load i32, i32* %code, align 4, !tbaa !5
  %cmp205 = icmp slt i32 %124, 0
  br i1 %cmp205, label %if.then.207, label %if.end.208

if.then.207:                                      ; preds = %sw.epilog
  %125 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %125, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.208:                                       ; preds = %sw.epilog
  %126 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %127 = load i8*, i8** %start, align 8, !tbaa !1
  %sub.ptr.lhs.cast = ptrtoint i8* %126 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %127 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv209 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv209, i32* %used, align 4, !tbaa !5
  br label %do.body.210

do.body.210:                                      ; preds = %if.end.208
  br label %do.cond.211

do.cond.211:                                      ; preds = %do.body.210
  br label %do.end.212

do.end.212:                                       ; preds = %do.cond.211
  %128 = load i32, i32* %used, align 4, !tbaa !5
  %add213 = add nsw i32 %128, 3
  %conv214 = sext i32 %add213 to i64
  %cmp215 = icmp ugt i64 %conv214, 617
  br i1 %cmp215, label %if.then.217, label %if.else.218

if.then.217:                                      ; preds = %do.end.212
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else.218:                                      ; preds = %do.end.212
  %129 = load i32, i32* %used, align 4, !tbaa !5
  store i32 %129, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else.218, %if.then.217, %if.then.207, %sw.bb.131, %sw.bb.130, %if.then
  %130 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #2
  %131 = bitcast i32* %used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %131) #2
  %132 = bitcast i8** %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %132) #2
  %133 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.end(i64 704, i8* %133) #2
  %134 = load i32, i32* %retval
  ret i32 %134
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_adjust_ctm(%struct.gs_composite_s* %pct0, i32 %x0, i32 %y0, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %pct0.addr = alloca %struct.gs_composite_s*, align 8
  %x0.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pct = alloca %struct.gs_pdf14trans_s*, align 8
  %mat = alloca %struct.gs_matrix_s, align 4
  store %struct.gs_composite_s* %pct0, %struct.gs_composite_s** %pct0.addr, align 8, !tbaa !1
  store i32 %x0, i32* %x0.addr, align 4, !tbaa !5
  store i32 %y0, i32* %y0.addr, align 4, !tbaa !5
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct0.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %3 = bitcast %struct.gs_matrix_s* %mat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %3) #2
  %4 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %4, i32 0, i32 5
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 20
  %5 = bitcast %struct.gs_matrix_s* %mat to i8*
  %6 = bitcast %struct.gs_matrix_s* %ctm to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 24, i32 4, i1 false), !tbaa.struct !135
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load i32, i32* %x0.addr, align 4, !tbaa !5
  %conv = sitofp i32 %7 to float
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mat, i32 0, i32 4
  %8 = load float, float* %tx, align 4, !tbaa !137
  %sub = fsub float %8, %conv
  store float %sub, float* %tx, align 4, !tbaa !137
  %9 = load i32, i32* %y0.addr, align 4, !tbaa !5
  %conv1 = sitofp i32 %9 to float
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mat, i32 0, i32 5
  %10 = load float, float* %ty, align 4, !tbaa !138
  %sub2 = fsub float %10, %conv1
  store float %sub2, float* %ty, align 4, !tbaa !138
  %11 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call = call i32 @gs_imager_setmatrix(%struct.gs_imager_state_s* %11, %struct.gs_matrix_s* %mat) #7
  %12 = bitcast %struct.gs_matrix_s* %mat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %12) #2
  %13 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_is_closing(%struct.gs_composite_s* %composite_action, %struct.gs_composite_s** %ppcte, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %composite_action.addr = alloca %struct.gs_composite_s*, align 8
  %ppcte.addr = alloca %struct.gs_composite_s**, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pct0 = alloca %struct.gs_pdf14trans_s*, align 8
  %op0 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %code = alloca i32, align 4
  store %struct.gs_composite_s* %composite_action, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  store %struct.gs_composite_s** %ppcte, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %3 = bitcast i32* %op0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %4, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %5 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  store i32 %5, i32* %op0, align 4, !tbaa !5
  %6 = load i32, i32* %op0, align 4, !tbaa !5
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb.1
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.6
    i32 5, label %sw.bb.11
    i32 8, label %sw.bb.12
    i32 9, label %sw.bb.13
    i32 10, label %sw.bb.14
    i32 11, label %sw.bb.15
    i32 6, label %sw.bb.16
    i32 7, label %sw.bb.21
  ]

sw.default:                                       ; preds = %entry
  store i32 -28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.1:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.2:                                          ; preds = %entry
  %7 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %8 = load %struct.gs_composite_s*, %struct.gs_composite_s** %7, align 8, !tbaa !1
  %cmp = icmp eq %struct.gs_composite_s* %8, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.2
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.else:                                          ; preds = %sw.bb.2
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %call = call i32 @find_opening_op(i32 0, %struct.gs_composite_s** %10, i32 1) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %11 = load i32, i32* %code, align 4, !tbaa !5
  %cmp3 = icmp eq i32 %11, 1
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.else
  store i32 5, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.else
  %12 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %12, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.4
  %13 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #2
  br label %cleanup.26

sw.bb.5:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.6:                                          ; preds = %entry
  %14 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %15 = load %struct.gs_composite_s*, %struct.gs_composite_s** %14, align 8, !tbaa !1
  %cmp7 = icmp eq %struct.gs_composite_s* %15, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %sw.bb.6
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.end.9:                                         ; preds = %sw.bb.6
  %16 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %call10 = call i32 @find_opening_op(i32 3, %struct.gs_composite_s** %16, i32 6) #7
  store i32 %call10, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.11:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.12:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.13:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.14:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.15:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.16:                                         ; preds = %entry
  %17 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %18 = load %struct.gs_composite_s*, %struct.gs_composite_s** %17, align 8, !tbaa !1
  %cmp17 = icmp eq %struct.gs_composite_s* %18, null
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %sw.bb.16
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.end.19:                                        ; preds = %sw.bb.16
  %19 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %call20 = call i32 @find_opening_op(i32 5, %struct.gs_composite_s** %19, i32 6) #7
  store i32 %call20, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

sw.bb.21:                                         ; preds = %entry
  %20 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %21 = load %struct.gs_composite_s*, %struct.gs_composite_s** %20, align 8, !tbaa !1
  %cmp22 = icmp eq %struct.gs_composite_s* %21, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %sw.bb.21
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.end.24:                                        ; preds = %sw.bb.21
  %22 = load %struct.gs_composite_s*, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  %23 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %call25 = call i32 @find_same_op(%struct.gs_composite_s* %22, i32 7, %struct.gs_composite_s** %23) #7
  store i32 %call25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

cleanup.26:                                       ; preds = %if.end.24, %if.then.23, %if.end.19, %if.then.18, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %if.end.9, %if.then.8, %sw.bb.5, %cleanup, %if.then, %sw.bb.1, %sw.bb, %sw.default
  %24 = bitcast i32* %op0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #2
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_is_friendly(%struct.gs_composite_s* %composite_action, i8 zeroext %cmd0, i8 zeroext %cmd1) #1 {
entry:
  %retval = alloca i32, align 4
  %composite_action.addr = alloca %struct.gs_composite_s*, align 8
  %cmd0.addr = alloca i8, align 1
  %cmd1.addr = alloca i8, align 1
  %pct0 = alloca %struct.gs_pdf14trans_s*, align 8
  %op0 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_composite_s* %composite_action, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  store i8 %cmd0, i8* %cmd0.addr, align 1, !tbaa !66
  store i8 %cmd1, i8* %cmd1.addr, align 1, !tbaa !66
  %0 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %3 = bitcast i32* %op0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %4, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %5 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  store i32 %5, i32* %op0, align 4, !tbaa !5
  %6 = load i32, i32* %op0, align 4, !tbaa !5
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %op0, align 4, !tbaa !5
  %cmp1 = icmp eq i32 %7, 4
  br i1 %cmp1, label %if.then, label %if.end.21

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load i8, i8* %cmd0.addr, align 1, !tbaa !66
  %conv = zext i8 %8 to i32
  %cmp2 = icmp eq i32 %conv, 223
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %9 = load i8, i8* %cmd1.addr, align 1, !tbaa !66
  %conv4 = zext i8 %9 to i32
  %cmp5 = icmp eq i32 %conv4, 2
  br i1 %cmp5, label %if.then.11, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %land.lhs.true
  %10 = load i8, i8* %cmd1.addr, align 1, !tbaa !66
  %conv8 = zext i8 %10 to i32
  %cmp9 = icmp eq i32 %conv8, 3
  br i1 %cmp9, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %lor.lhs.false.7, %land.lhs.true
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false.7, %if.then
  %11 = load i8, i8* %cmd0.addr, align 1, !tbaa !66
  %conv12 = zext i8 %11 to i32
  %cmp13 = icmp eq i32 %conv12, 6
  br i1 %cmp13, label %land.lhs.true.15, label %if.end.20

land.lhs.true.15:                                 ; preds = %if.end
  %12 = load i8, i8* %cmd1.addr, align 1, !tbaa !66
  %conv16 = zext i8 %12 to i32
  %shr = ashr i32 %conv16, 6
  %cmp17 = icmp eq i32 %shr, 2
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %land.lhs.true.15
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.20:                                        ; preds = %land.lhs.true.15, %if.end
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %lor.lhs.false
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.21, %if.then.19, %if.then.11
  %13 = bitcast i32* %op0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #2
  %14 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #2
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_clist_write_update(%struct.gs_composite_s* %pcte, %struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %pcte.addr = alloca %struct.gs_composite_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cdev = alloca %struct.gx_device_clist_writer_s*, align 8
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pdf14pct_noconst = alloca %struct.gs_pdf14trans_s*, align 8
  %pdf14pct_noconst9 = alloca %struct.gs_pdf14trans_s*, align 8
  store %struct.gs_composite_s* %pcte, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_clist_writer_s** %cdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %union.gx_device_clist_s*
  %writer = bitcast %union.gx_device_clist_s* %2 to %struct.gx_device_clist_writer_s*
  store %struct.gx_device_clist_writer_s* %writer, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_composite_s* %4 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %5, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %7 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %7, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %8 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  switch i32 %8, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.3
    i32 4, label %sw.bb.6
    i32 5, label %sw.bb.7
    i32 6, label %sw.bb.16
    i32 8, label %sw.bb.17
    i32 9, label %sw.bb.18
    i32 2, label %sw.bb.19
    i32 10, label %sw.bb.20
    i32 11, label %sw.bb.21
  ]

sw.bb:                                            ; preds = %entry
  %9 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %11 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %13 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %call = call i32 @gs_pdf14_clist_device_push(%struct.gs_memory_s* %9, %struct.gs_imager_state_s* %10, %struct.gx_device_s** %11, %struct.gx_device_s* %12, %struct.gs_pdf14trans_s* %13) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.1:                                          ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  %14 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %call2 = call i32 @clist_writer_check_empty_cropping_stack(%struct.gx_device_clist_writer_s* %14) #7
  store i32 %call2, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %15 = bitcast %struct.gs_pdf14trans_s** %pdf14pct_noconst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  %17 = bitcast %struct.gs_composite_s* %16 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %17, %struct.gs_pdf14trans_s** %pdf14pct_noconst, align 8, !tbaa !1
  %18 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %mask_id = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %18, i32 0, i32 110
  %19 = load i32, i32* %mask_id, align 4, !tbaa !139
  %20 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct_noconst, align 8, !tbaa !1
  %params4 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %20, i32 0, i32 5
  %mask_id5 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params4, i32 0, i32 26
  store i32 %19, i32* %mask_id5, align 4, !tbaa !140
  br label %do.body

do.body:                                          ; preds = %sw.bb.3
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %21 = bitcast %struct.gs_pdf14trans_s** %pdf14pct_noconst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #2
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %22 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %mask_id_count = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %22, i32 0, i32 109
  %23 = load i32, i32* %mask_id_count, align 4, !tbaa !141
  %inc = add i32 %23, 1
  store i32 %inc, i32* %mask_id_count, align 4, !tbaa !141
  %24 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %mask_id8 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %24, i32 0, i32 110
  store i32 %inc, i32* %mask_id8, align 4, !tbaa !139
  %25 = bitcast %struct.gs_pdf14trans_s** %pdf14pct_noconst9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #2
  %26 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  %27 = bitcast %struct.gs_composite_s* %26 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %27, %struct.gs_pdf14trans_s** %pdf14pct_noconst9, align 8, !tbaa !1
  %28 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %mask_id10 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %28, i32 0, i32 110
  %29 = load i32, i32* %mask_id10, align 4, !tbaa !139
  %30 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct_noconst9, align 8, !tbaa !1
  %params11 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %30, i32 0, i32 5
  %mask_id12 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params11, i32 0, i32 26
  store i32 %29, i32* %mask_id12, align 4, !tbaa !140
  br label %do.body.13

do.body.13:                                       ; preds = %sw.bb.7
  br label %do.cond.14

do.cond.14:                                       ; preds = %do.body.13
  br label %do.end.15

do.end.15:                                        ; preds = %do.cond.14
  %31 = bitcast %struct.gs_pdf14trans_s** %pdf14pct_noconst9 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #2
  br label %sw.epilog

sw.bb.16:                                         ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.17:                                         ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.18:                                         ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.19:                                         ; preds = %entry
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.20:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.21:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %do.end.15, %sw.bb.6, %do.end, %sw.bb.1
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %33 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %32, %struct.gx_device_s** %33, align 8, !tbaa !1
  %34 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %34, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  %35 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %35, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %sw.epilog
  %36 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %imager_state = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %36, i32 0, i32 80
  %37 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params22 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %37, i32 0, i32 5
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params22, i32 0, i32 20
  %call23 = call i32 @gs_imager_setmatrix(%struct.gs_imager_state_s* %imager_state, %struct.gs_matrix_s* %ctm) #7
  store i32 %call23, i32* %code, align 4, !tbaa !5
  %38 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  call void @cmd_clear_known(%struct.gx_device_clist_writer_s* %38, i32 2048) #7
  %39 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %39, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then, %sw.bb.21, %sw.bb.20, %sw.bb
  %40 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #2
  %41 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #2
  %42 = bitcast %struct.gx_device_clist_writer_s** %cdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #2
  %43 = load i32, i32* %retval
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_clist_read_update(%struct.gs_composite_s* %pcte, %struct.gx_device_s* %cdev, %struct.gx_device_s* %tdev, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem) #1 {
entry:
  %pcte.addr = alloca %struct.gs_composite_s*, align 8
  %cdev.addr = alloca %struct.gx_device_s*, align 8
  %tdev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %pclist_devn_params = alloca %struct.gs_devn_params_s*, align 8
  %pcrdev = alloca %struct.gx_device_clist_reader_s*, align 8
  %cl_icc_profile = alloca %struct.cmm_profile_s*, align 8
  %p14_icc_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %num_comp = alloca i32, align 4
  store %struct.gs_composite_s* %pcte, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %cdev, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %tdev, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_composite_s* %4 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %5, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %6 = bitcast %struct.gs_devn_params_s** %pclist_devn_params to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %9 = bitcast %struct.gx_device_s* %8 to %struct.gx_device_clist_reader_s*
  store %struct.gx_device_clist_reader_s* %9, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %10 = bitcast %struct.cmm_profile_s** %cl_icc_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast %struct.cmm_profile_s** %p14_icc_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %12) #2
  %13 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %15 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call = call i32 %15(%struct.gx_device_s* %16, %struct.cmm_dev_profile_s** %dev_profile) #7
  %17 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %17, %struct.cmm_profile_s** %cl_icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  %18 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %18, i32 0, i32 42
  %get_profile2 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs1, i32 0, i32 67
  %19 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile2, align 8, !tbaa !142
  %20 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %21 = bitcast %struct.pdf14_device_s* %20 to %struct.gx_device_s*
  %call3 = call i32 %19(%struct.gx_device_s* %21, %struct.cmm_dev_profile_s** %dev_profile) #7
  %22 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %22, %struct.cmm_profile_s** %p14_icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  %23 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %23, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %24 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  switch i32 %24, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.epilog
  ]

sw.bb:                                            ; preds = %entry
  %25 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %p14_icc_profile, align 8, !tbaa !1
  %lock = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %25, i32 0, i32 22
  %26 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock, align 8, !tbaa !143
  %native = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %26, i32 0, i32 1
  %call4 = call i32 @gp_monitor_enter(%union.gp_monitor* %native) #7
  br label %do.body

do.body:                                          ; preds = %sw.bb
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 39
  %28 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !144
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %28, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %29 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %30 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %cmp = icmp ne %struct.cmm_profile_s* %29, %30
  br i1 %cmp, label %if.then, label %if.end.67

if.then:                                          ; preds = %do.body
  br label %do.body.5

do.body.5:                                        ; preds = %if.then
  %31 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %31, null
  br i1 %tobool, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %do.body.5
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %32 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %32, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %33 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %33, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.8

do.body.8:                                        ; preds = %do.body.7
  br label %do.cond

do.cond:                                          ; preds = %do.body.8
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.cond.9

do.cond.9:                                        ; preds = %do.end
  br label %do.end.10

do.end.10:                                        ; preds = %do.cond.9
  br label %if.end

if.end:                                           ; preds = %do.end.10, %do.body.5
  br label %do.cond.11

do.cond.11:                                       ; preds = %if.end
  br label %do.end.12

do.end.12:                                        ; preds = %do.cond.11
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.12
  %34 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %34, i32 0, i32 39
  %35 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct14, align 8, !tbaa !144
  %device_profile15 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %35, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile15, i32 0, i64 0
  %36 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx16, align 8, !tbaa !1
  %tobool17 = icmp ne %struct.cmm_profile_s* %36, null
  br i1 %tobool17, label %if.then.18, label %if.end.61

if.then.18:                                       ; preds = %do.body.13
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  br label %do.body.20

do.body.20:                                       ; preds = %do.body.19
  br label %do.cond.21

do.cond.21:                                       ; preds = %do.body.20
  br label %do.end.22

do.end.22:                                        ; preds = %do.cond.21
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct23 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 39
  %38 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct23, align 8, !tbaa !144
  %device_profile24 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %38, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile24, i32 0, i64 0
  %39 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx25, align 8, !tbaa !1
  %rc26 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %39, i32 0, i32 18
  %ref_count27 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc26, i32 0, i32 0
  %40 = load i64, i64* %ref_count27, align 8, !tbaa !145
  %add = add nsw i64 %40, -1
  store i64 %add, i64* %ref_count27, align 8, !tbaa !145
  br label %do.cond.28

do.cond.28:                                       ; preds = %do.end.22
  br label %do.end.29

do.end.29:                                        ; preds = %do.cond.28
  %41 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct30 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %41, i32 0, i32 39
  %42 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct30, align 8, !tbaa !144
  %device_profile31 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %42, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile31, i32 0, i64 0
  %43 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx32, align 8, !tbaa !1
  %rc33 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %43, i32 0, i32 18
  %ref_count34 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc33, i32 0, i32 0
  %44 = load i64, i64* %ref_count34, align 8, !tbaa !145
  %tobool35 = icmp ne i64 %44, 0
  br i1 %tobool35, label %if.else, label %if.then.36

if.then.36:                                       ; preds = %do.end.29
  br label %do.body.37

do.body.37:                                       ; preds = %if.then.36
  br label %do.body.38

do.body.38:                                       ; preds = %do.body.37
  br label %do.cond.39

do.cond.39:                                       ; preds = %do.body.38
  br label %do.end.40

do.end.40:                                        ; preds = %do.cond.39
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct41 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 39
  %46 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct41, align 8, !tbaa !144
  %device_profile42 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %46, i32 0, i32 0
  %arrayidx43 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile42, i32 0, i64 0
  %47 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx43, align 8, !tbaa !1
  %rc44 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %47, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc44, i32 0, i32 2
  %48 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct45 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 39
  %50 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct45, align 8, !tbaa !144
  %device_profile46 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %50, i32 0, i32 0
  %arrayidx47 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile46, i32 0, i64 0
  %51 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx47, align 8, !tbaa !1
  %rc48 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %51, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc48, i32 0, i32 1
  %52 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct49 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 39
  %54 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct49, align 8, !tbaa !144
  %device_profile50 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %54, i32 0, i32 0
  %arrayidx51 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile50, i32 0, i64 0
  %55 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx51, align 8, !tbaa !1
  %56 = bitcast %struct.cmm_profile_s* %55 to i8*
  call void %48(%struct.gs_memory_s* %52, i8* %56, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.78, i32 0, i32 0)) #7
  br label %do.cond.52

do.cond.52:                                       ; preds = %do.end.40
  br label %do.end.53

do.end.53:                                        ; preds = %do.cond.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  br label %do.cond.55

do.cond.55:                                       ; preds = %do.body.54
  br label %do.end.56

do.end.56:                                        ; preds = %do.cond.55
  br label %if.end.60

if.else:                                          ; preds = %do.end.29
  br label %do.body.57

do.body.57:                                       ; preds = %if.else
  br label %do.cond.58

do.cond.58:                                       ; preds = %do.body.57
  br label %do.end.59

do.end.59:                                        ; preds = %do.cond.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59, %do.end.56
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %do.body.13
  br label %do.cond.62

do.cond.62:                                       ; preds = %if.end.61
  br label %do.end.63

do.end.63:                                        ; preds = %do.cond.62
  %57 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct64 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 39
  %59 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct64, align 8, !tbaa !144
  %device_profile65 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %59, i32 0, i32 0
  %arrayidx66 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile65, i32 0, i64 0
  store %struct.cmm_profile_s* %57, %struct.cmm_profile_s** %arrayidx66, align 8, !tbaa !1
  br label %if.end.67

if.end.67:                                        ; preds = %do.end.63, %do.body
  br label %do.cond.68

do.cond.68:                                       ; preds = %if.end.67
  br label %do.end.69

do.end.69:                                        ; preds = %do.cond.68
  %60 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %p14_icc_profile, align 8, !tbaa !1
  %lock70 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %60, i32 0, i32 22
  %61 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock70, align 8, !tbaa !143
  %native71 = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %61, i32 0, i32 1
  %call72 = call i32 @gp_monitor_leave(%union.gp_monitor* %native71) #7
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %procs73 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %62, i32 0, i32 42
  %ret_devn_params = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs73, i32 0, i32 60
  %63 = load %struct.gs_devn_params_s* (%struct.gx_device_s*)*, %struct.gs_devn_params_s* (%struct.gx_device_s*)** %ret_devn_params, align 8, !tbaa !148
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call74 = call %struct.gs_devn_params_s* %63(%struct.gx_device_s* %64) #7
  store %struct.gs_devn_params_s* %call74, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %65 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %cmp75 = icmp ne %struct.gs_devn_params_s* %65, null
  br i1 %cmp75, label %land.lhs.true, label %if.end.108

land.lhs.true:                                    ; preds = %do.end.69
  %66 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %page_spot_colors = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %66, i32 0, i32 4
  %67 = load i32, i32* %page_spot_colors, align 4, !tbaa !149
  %cmp76 = icmp ne i32 %67, 0
  br i1 %cmp76, label %if.then.77, label %if.end.108

if.then.77:                                       ; preds = %land.lhs.true
  %68 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %68) #2
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %70 = load i32, i32* %num_components, align 4, !tbaa !150
  store i32 %70, i32* %num_comp, align 4, !tbaa !5
  %71 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %page_spot_colors78 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %71, i32 0, i32 4
  %72 = load i32, i32* %page_spot_colors78, align 4, !tbaa !149
  %73 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %73, i32 0, i32 44
  %page_spot_colors79 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 4
  store i32 %72, i32* %page_spot_colors79, align 4, !tbaa !151
  %74 = load i32, i32* %num_comp, align 4, !tbaa !5
  %75 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params80 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %75, i32 0, i32 44
  %page_spot_colors81 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params80, i32 0, i32 4
  %76 = load i32, i32* %page_spot_colors81, align 4, !tbaa !151
  %add82 = add nsw i32 %76, 4
  %cmp83 = icmp slt i32 %74, %add82
  br i1 %cmp83, label %if.then.84, label %if.else.87

if.then.84:                                       ; preds = %if.then.77
  %77 = load i32, i32* %num_comp, align 4, !tbaa !5
  %78 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info85 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %78, i32 0, i32 11
  %num_components86 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info85, i32 0, i32 1
  store i32 %77, i32* %num_components86, align 4, !tbaa !150
  br label %if.end.94

if.else.87:                                       ; preds = %if.then.77
  %79 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params88 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %79, i32 0, i32 44
  %num_std_colorant_names = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params88, i32 0, i32 2
  %80 = load i32, i32* %num_std_colorant_names, align 4, !tbaa !152
  %81 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params89 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %81, i32 0, i32 44
  %page_spot_colors90 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params89, i32 0, i32 4
  %82 = load i32, i32* %page_spot_colors90, align 4, !tbaa !151
  %add91 = add nsw i32 %80, %82
  %83 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info92 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %83, i32 0, i32 11
  %num_components93 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info92, i32 0, i32 1
  store i32 %add91, i32* %num_components93, align 4, !tbaa !150
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.87, %if.then.84
  %84 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %85 = bitcast %struct.pdf14_device_s* %84 to %struct.gx_device_s*
  call void @devn_free_params(%struct.gx_device_s* %85) #7
  %86 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %pdf14_compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %86, i32 0, i32 9
  %87 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pdf14_compressed_color_list, align 8, !tbaa !153
  %88 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params95 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %88, i32 0, i32 44
  %compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params95, i32 0, i32 8
  store %struct.compressed_color_list_s* %87, %struct.compressed_color_list_s** %compressed_color_list, align 8, !tbaa !154
  %89 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params96 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %89, i32 0, i32 44
  %separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params96, i32 0, i32 5
  %90 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pclist_devn_params, align 8, !tbaa !1
  %pdf14_separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %90, i32 0, i32 10
  %91 = bitcast %struct.gs_separations_s* %separations to i8*
  %92 = bitcast %struct.gs_separations_s* %pdf14_separations to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 1032, i32 8, i1 false), !tbaa.struct !155
  %93 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %free_devicen = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %93, i32 0, i32 59
  store i32 0, i32* %free_devicen, align 4, !tbaa !156
  %94 = load i32, i32* %num_comp, align 4, !tbaa !5
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info97 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 11
  %num_components98 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info97, i32 0, i32 1
  %96 = load i32, i32* %num_components98, align 4, !tbaa !150
  %cmp99 = icmp ne i32 %94, %96
  br i1 %cmp99, label %if.then.100, label %if.end.107

if.then.100:                                      ; preds = %if.end.94
  %97 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %97, i32 0, i32 47
  %98 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %cmp101 = icmp ne %struct.pdf14_ctx_s* %98, null
  br i1 %cmp101, label %if.then.102, label %if.end.104

if.then.102:                                      ; preds = %if.then.100
  %99 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx103 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %99, i32 0, i32 47
  %100 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx103, align 8, !tbaa !7
  call void @pdf14_ctx_free(%struct.pdf14_ctx_s* %100) #7
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.102, %if.then.100
  %101 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  %procs105 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %101, i32 0, i32 42
  %open_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs105, i32 0, i32 0
  %102 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %open_device, align 8, !tbaa !80
  %103 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev.addr, align 8, !tbaa !1
  %call106 = call i32 %102(%struct.gx_device_s* %103) #7
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.104, %if.end.94
  %104 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %104) #2
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %land.lhs.true, %do.end.69
  %105 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %105, i32 0, i32 5
  %106 = load i32, i32* %data_cs, align 4, !tbaa !115
  %cmp109 = icmp eq i32 %106, 6
  br i1 %cmp109, label %if.then.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.108
  %107 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %islab = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %107, i32 0, i32 2
  %108 = load i32, i32* %islab, align 4, !tbaa !119
  %tobool110 = icmp ne i32 %108, 0
  br i1 %tobool110, label %if.then.111, label %if.end.256

if.then.111:                                      ; preds = %lor.lhs.false, %if.end.108
  %109 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %110 = load %struct.gx_device_clist_reader_s*, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %trans_dev_icc_hash = getelementptr inbounds %struct.gx_device_clist_reader_s, %struct.gx_device_clist_reader_s* %110, i32 0, i32 60
  %111 = load i64, i64* %trans_dev_icc_hash, align 8, !tbaa !157
  %call112 = call %struct.cmm_profile_s* @gsicc_read_serial_icc(%struct.gx_device_s* %109, i64 %111) #7
  store %struct.cmm_profile_s* %call112, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %112 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %113 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %dev = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %113, i32 0, i32 15
  store %struct.gx_device_s* %112, %struct.gx_device_s** %dev, align 8, !tbaa !160
  %114 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %p14_icc_profile, align 8, !tbaa !1
  %lock113 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %114, i32 0, i32 22
  %115 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock113, align 8, !tbaa !143
  %native114 = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %115, i32 0, i32 1
  %call115 = call i32 @gp_monitor_enter(%union.gp_monitor* %native114) #7
  br label %do.body.116

do.body.116:                                      ; preds = %if.then.111
  %116 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct117 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %116, i32 0, i32 39
  %117 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct117, align 8, !tbaa !144
  %device_profile118 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %117, i32 0, i32 0
  %arrayidx119 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile118, i32 0, i64 0
  %118 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx119, align 8, !tbaa !1
  %119 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %cmp120 = icmp ne %struct.cmm_profile_s* %118, %119
  br i1 %cmp120, label %if.then.121, label %if.end.195

if.then.121:                                      ; preds = %do.body.116
  br label %do.body.122

do.body.122:                                      ; preds = %if.then.121
  %120 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %tobool123 = icmp ne %struct.cmm_profile_s* %120, null
  br i1 %tobool123, label %if.then.124, label %if.end.134

if.then.124:                                      ; preds = %do.body.122
  br label %do.body.125

do.body.125:                                      ; preds = %if.then.124
  %121 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %rc126 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %121, i32 0, i32 18
  %ref_count127 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc126, i32 0, i32 0
  %122 = load i64, i64* %ref_count127, align 8, !tbaa !145
  %inc128 = add nsw i64 %122, 1
  store i64 %inc128, i64* %ref_count127, align 8, !tbaa !145
  br label %do.body.129

do.body.129:                                      ; preds = %do.body.125
  br label %do.cond.130

do.cond.130:                                      ; preds = %do.body.129
  br label %do.end.131

do.end.131:                                       ; preds = %do.cond.130
  br label %do.cond.132

do.cond.132:                                      ; preds = %do.end.131
  br label %do.end.133

do.end.133:                                       ; preds = %do.cond.132
  br label %if.end.134

if.end.134:                                       ; preds = %do.end.133, %do.body.122
  br label %do.cond.135

do.cond.135:                                      ; preds = %if.end.134
  br label %do.end.136

do.end.136:                                       ; preds = %do.cond.135
  br label %do.body.137

do.body.137:                                      ; preds = %do.end.136
  %123 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct138 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %123, i32 0, i32 39
  %124 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct138, align 8, !tbaa !144
  %device_profile139 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %124, i32 0, i32 0
  %arrayidx140 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile139, i32 0, i64 0
  %125 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx140, align 8, !tbaa !1
  %tobool141 = icmp ne %struct.cmm_profile_s* %125, null
  br i1 %tobool141, label %if.then.142, label %if.end.189

if.then.142:                                      ; preds = %do.body.137
  br label %do.body.143

do.body.143:                                      ; preds = %if.then.142
  br label %do.body.144

do.body.144:                                      ; preds = %do.body.143
  br label %do.cond.145

do.cond.145:                                      ; preds = %do.body.144
  br label %do.end.146

do.end.146:                                       ; preds = %do.cond.145
  %126 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct147 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %126, i32 0, i32 39
  %127 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct147, align 8, !tbaa !144
  %device_profile148 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %127, i32 0, i32 0
  %arrayidx149 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile148, i32 0, i64 0
  %128 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx149, align 8, !tbaa !1
  %rc150 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %128, i32 0, i32 18
  %ref_count151 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc150, i32 0, i32 0
  %129 = load i64, i64* %ref_count151, align 8, !tbaa !145
  %add152 = add nsw i64 %129, -1
  store i64 %add152, i64* %ref_count151, align 8, !tbaa !145
  br label %do.cond.153

do.cond.153:                                      ; preds = %do.end.146
  br label %do.end.154

do.end.154:                                       ; preds = %do.cond.153
  %130 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct155 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %130, i32 0, i32 39
  %131 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct155, align 8, !tbaa !144
  %device_profile156 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %131, i32 0, i32 0
  %arrayidx157 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile156, i32 0, i64 0
  %132 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx157, align 8, !tbaa !1
  %rc158 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %132, i32 0, i32 18
  %ref_count159 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc158, i32 0, i32 0
  %133 = load i64, i64* %ref_count159, align 8, !tbaa !145
  %tobool160 = icmp ne i64 %133, 0
  br i1 %tobool160, label %if.else.184, label %if.then.161

if.then.161:                                      ; preds = %do.end.154
  br label %do.body.162

do.body.162:                                      ; preds = %if.then.161
  br label %do.body.163

do.body.163:                                      ; preds = %do.body.162
  br label %do.cond.164

do.cond.164:                                      ; preds = %do.body.163
  br label %do.end.165

do.end.165:                                       ; preds = %do.cond.164
  %134 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct166 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %134, i32 0, i32 39
  %135 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct166, align 8, !tbaa !144
  %device_profile167 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %135, i32 0, i32 0
  %arrayidx168 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile167, i32 0, i64 0
  %136 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx168, align 8, !tbaa !1
  %rc169 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %136, i32 0, i32 18
  %free170 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc169, i32 0, i32 2
  %137 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free170, align 8, !tbaa !146
  %138 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct171 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %138, i32 0, i32 39
  %139 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct171, align 8, !tbaa !144
  %device_profile172 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %139, i32 0, i32 0
  %arrayidx173 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile172, i32 0, i64 0
  %140 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx173, align 8, !tbaa !1
  %rc174 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %140, i32 0, i32 18
  %memory175 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc174, i32 0, i32 1
  %141 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory175, align 8, !tbaa !147
  %142 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct176 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %142, i32 0, i32 39
  %143 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct176, align 8, !tbaa !144
  %device_profile177 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %143, i32 0, i32 0
  %arrayidx178 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile177, i32 0, i64 0
  %144 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx178, align 8, !tbaa !1
  %145 = bitcast %struct.cmm_profile_s* %144 to i8*
  call void %137(%struct.gs_memory_s* %141, i8* %145, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.78, i32 0, i32 0)) #7
  br label %do.cond.179

do.cond.179:                                      ; preds = %do.end.165
  br label %do.end.180

do.end.180:                                       ; preds = %do.cond.179
  br label %do.body.181

do.body.181:                                      ; preds = %do.end.180
  br label %do.cond.182

do.cond.182:                                      ; preds = %do.body.181
  br label %do.end.183

do.end.183:                                       ; preds = %do.cond.182
  br label %if.end.188

if.else.184:                                      ; preds = %do.end.154
  br label %do.body.185

do.body.185:                                      ; preds = %if.else.184
  br label %do.cond.186

do.cond.186:                                      ; preds = %do.body.185
  br label %do.end.187

do.end.187:                                       ; preds = %do.cond.186
  br label %if.end.188

if.end.188:                                       ; preds = %do.end.187, %do.end.183
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %do.body.137
  br label %do.cond.190

do.cond.190:                                      ; preds = %if.end.189
  br label %do.end.191

do.end.191:                                       ; preds = %do.cond.190
  %146 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cl_icc_profile, align 8, !tbaa !1
  %147 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct192 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %147, i32 0, i32 39
  %148 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct192, align 8, !tbaa !144
  %device_profile193 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %148, i32 0, i32 0
  %arrayidx194 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile193, i32 0, i64 0
  store %struct.cmm_profile_s* %146, %struct.cmm_profile_s** %arrayidx194, align 8, !tbaa !1
  br label %if.end.195

if.end.195:                                       ; preds = %do.end.191, %do.body.116
  br label %do.cond.196

do.cond.196:                                      ; preds = %if.end.195
  br label %do.end.197

do.end.197:                                       ; preds = %do.cond.196
  br label %do.body.198

do.body.198:                                      ; preds = %do.end.197
  %149 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct199 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %149, i32 0, i32 39
  %150 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct199, align 8, !tbaa !144
  %device_profile200 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %150, i32 0, i32 0
  %arrayidx201 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile200, i32 0, i64 0
  %151 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx201, align 8, !tbaa !1
  %tobool202 = icmp ne %struct.cmm_profile_s* %151, null
  br i1 %tobool202, label %if.then.203, label %if.end.250

if.then.203:                                      ; preds = %do.body.198
  br label %do.body.204

do.body.204:                                      ; preds = %if.then.203
  br label %do.body.205

do.body.205:                                      ; preds = %do.body.204
  br label %do.cond.206

do.cond.206:                                      ; preds = %do.body.205
  br label %do.end.207

do.end.207:                                       ; preds = %do.cond.206
  %152 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct208 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %152, i32 0, i32 39
  %153 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct208, align 8, !tbaa !144
  %device_profile209 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %153, i32 0, i32 0
  %arrayidx210 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile209, i32 0, i64 0
  %154 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx210, align 8, !tbaa !1
  %rc211 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %154, i32 0, i32 18
  %ref_count212 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc211, i32 0, i32 0
  %155 = load i64, i64* %ref_count212, align 8, !tbaa !145
  %add213 = add nsw i64 %155, -1
  store i64 %add213, i64* %ref_count212, align 8, !tbaa !145
  br label %do.cond.214

do.cond.214:                                      ; preds = %do.end.207
  br label %do.end.215

do.end.215:                                       ; preds = %do.cond.214
  %156 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct216 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %156, i32 0, i32 39
  %157 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct216, align 8, !tbaa !144
  %device_profile217 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %157, i32 0, i32 0
  %arrayidx218 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile217, i32 0, i64 0
  %158 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx218, align 8, !tbaa !1
  %rc219 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %158, i32 0, i32 18
  %ref_count220 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc219, i32 0, i32 0
  %159 = load i64, i64* %ref_count220, align 8, !tbaa !145
  %tobool221 = icmp ne i64 %159, 0
  br i1 %tobool221, label %if.else.245, label %if.then.222

if.then.222:                                      ; preds = %do.end.215
  br label %do.body.223

do.body.223:                                      ; preds = %if.then.222
  br label %do.body.224

do.body.224:                                      ; preds = %do.body.223
  br label %do.cond.225

do.cond.225:                                      ; preds = %do.body.224
  br label %do.end.226

do.end.226:                                       ; preds = %do.cond.225
  %160 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct227 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %160, i32 0, i32 39
  %161 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct227, align 8, !tbaa !144
  %device_profile228 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %161, i32 0, i32 0
  %arrayidx229 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile228, i32 0, i64 0
  %162 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx229, align 8, !tbaa !1
  %rc230 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %162, i32 0, i32 18
  %free231 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc230, i32 0, i32 2
  %163 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free231, align 8, !tbaa !146
  %164 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct232 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %164, i32 0, i32 39
  %165 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct232, align 8, !tbaa !144
  %device_profile233 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %165, i32 0, i32 0
  %arrayidx234 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile233, i32 0, i64 0
  %166 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx234, align 8, !tbaa !1
  %rc235 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %166, i32 0, i32 18
  %memory236 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc235, i32 0, i32 1
  %167 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory236, align 8, !tbaa !147
  %168 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct237 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %168, i32 0, i32 39
  %169 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct237, align 8, !tbaa !144
  %device_profile238 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %169, i32 0, i32 0
  %arrayidx239 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile238, i32 0, i64 0
  %170 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx239, align 8, !tbaa !1
  %171 = bitcast %struct.cmm_profile_s* %170 to i8*
  call void %163(%struct.gs_memory_s* %167, i8* %171, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.78, i32 0, i32 0)) #7
  br label %do.cond.240

do.cond.240:                                      ; preds = %do.end.226
  br label %do.end.241

do.end.241:                                       ; preds = %do.cond.240
  %172 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct242 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %172, i32 0, i32 39
  %173 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct242, align 8, !tbaa !144
  %device_profile243 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %173, i32 0, i32 0
  %arrayidx244 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile243, i32 0, i64 0
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %arrayidx244, align 8, !tbaa !1
  br label %if.end.249

if.else.245:                                      ; preds = %do.end.215
  br label %do.body.246

do.body.246:                                      ; preds = %if.else.245
  br label %do.cond.247

do.cond.247:                                      ; preds = %do.body.246
  br label %do.end.248

do.end.248:                                       ; preds = %do.cond.247
  br label %if.end.249

if.end.249:                                       ; preds = %do.end.248, %do.end.241
  br label %if.end.250

if.end.250:                                       ; preds = %if.end.249, %do.body.198
  br label %do.cond.251

do.cond.251:                                      ; preds = %if.end.250
  br label %do.end.252

do.end.252:                                       ; preds = %do.cond.251
  %174 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %p14_icc_profile, align 8, !tbaa !1
  %lock253 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %174, i32 0, i32 22
  %175 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock253, align 8, !tbaa !143
  %native254 = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %175, i32 0, i32 1
  %call255 = call i32 @gp_monitor_leave(%union.gp_monitor* %native254) #7
  br label %if.end.256

if.end.256:                                       ; preds = %do.end.252, %lor.lhs.false
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %entry, %if.end.256
  %176 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %176) #2
  %177 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %177) #2
  %178 = bitcast %struct.cmm_profile_s** %p14_icc_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %178) #2
  %179 = bitcast %struct.cmm_profile_s** %cl_icc_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %179) #2
  %180 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %180) #2
  %181 = bitcast %struct.gs_devn_params_s** %pclist_devn_params to i8*
  call void @llvm.lifetime.end(i64 8, i8* %181) #2
  %182 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %182) #2
  %183 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %183) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @c_pdf14trans_get_cropping(%struct.gs_composite_s* %pcte, i32* %ry, i32* %rheight, i32 %cropping_min, i32 %cropping_max) #1 {
entry:
  %retval = alloca i32, align 4
  %pcte.addr = alloca %struct.gs_composite_s*, align 8
  %ry.addr = alloca i32*, align 8
  %rheight.addr = alloca i32*, align 8
  %cropping_min.addr = alloca i32, align 4
  %cropping_max.addr = alloca i32, align 4
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  %rect = alloca %struct.gs_int_rect_s, align 4
  %rect17 = alloca %struct.gs_int_rect_s, align 4
  store %struct.gs_composite_s* %pcte, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  store i32* %ry, i32** %ry.addr, align 8, !tbaa !1
  store i32* %rheight, i32** %rheight.addr, align 8, !tbaa !1
  store i32 %cropping_min, i32* %cropping_min.addr, align 4, !tbaa !5
  store i32 %cropping_max, i32* %cropping_max.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %3 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %3, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %4 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  switch i32 %4, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.2
    i32 3, label %sw.bb.3
    i32 5, label %sw.bb.16
    i32 4, label %sw.bb.49
    i32 6, label %sw.bb.50
    i32 8, label %sw.bb.51
    i32 9, label %sw.bb.52
    i32 7, label %sw.bb.53
    i32 10, label %sw.bb.54
    i32 11, label %sw.bb.55
  ]

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.1:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.2:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.3:                                          ; preds = %entry
  %5 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #2
  %6 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params4 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %6, i32 0, i32 5
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params4, i32 0, i32 20
  %7 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params5 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %7, i32 0, i32 5
  %bbox = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params5, i32 0, i32 6
  %call = call i32 @pdf14_compute_group_device_int_rect(%struct.gs_matrix_s* %ctm, %struct.gs_rect_s* %bbox, %struct.gs_int_rect_s* %rect) #7
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 1
  %8 = load i32, i32* %y, align 4, !tbaa !35
  %9 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  %cmp = icmp sgt i32 %8, %9
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.3
  %p6 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p6, i32 0, i32 1
  %10 = load i32, i32* %y7, align 4, !tbaa !35
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.3
  %11 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ %11, %cond.false ]
  %12 = load i32*, i32** %ry.addr, align 8, !tbaa !1
  store i32 %cond, i32* %12, align 4, !tbaa !5
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y8 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 1
  %13 = load i32, i32* %y8, align 4, !tbaa !33
  %14 = load i32, i32* %cropping_max.addr, align 4, !tbaa !5
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %cond.true.10, label %cond.false.13

cond.true.10:                                     ; preds = %cond.end
  %q11 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y12 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q11, i32 0, i32 1
  %15 = load i32, i32* %y12, align 4, !tbaa !33
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.end
  %16 = load i32, i32* %cropping_max.addr, align 4, !tbaa !5
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.10
  %cond15 = phi i32 [ %15, %cond.true.10 ], [ %16, %cond.false.13 ]
  %17 = load i32*, i32** %ry.addr, align 8, !tbaa !1
  %18 = load i32, i32* %17, align 4, !tbaa !5
  %sub = sub nsw i32 %cond15, %18
  %19 = load i32*, i32** %rheight.addr, align 8, !tbaa !1
  store i32 %sub, i32* %19, align 4, !tbaa !5
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %20 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %20) #2
  br label %cleanup.56

sw.bb.16:                                         ; preds = %entry
  %21 = bitcast %struct.gs_int_rect_s* %rect17 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %21) #2
  %22 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params18 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %22, i32 0, i32 5
  %ctm19 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params18, i32 0, i32 20
  %23 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params20 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %23, i32 0, i32 5
  %bbox21 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params20, i32 0, i32 6
  %call22 = call i32 @pdf14_compute_group_device_int_rect(%struct.gs_matrix_s* %ctm19, %struct.gs_rect_s* %bbox21, %struct.gs_int_rect_s* %rect17) #7
  %24 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params23 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %24, i32 0, i32 5
  %GrayBackground = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params23, i32 0, i32 12
  %25 = load float, float* %GrayBackground, align 4, !tbaa !161
  %conv = fpext float %25 to double
  %cmp24 = fcmp oeq double %conv, 1.000000e+00
  br i1 %cmp24, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.16
  %26 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params26 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %26, i32 0, i32 5
  %mask_is_image = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params26, i32 0, i32 19
  %27 = load i32, i32* %mask_is_image, align 4, !tbaa !162
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %sw.bb.16
  %p27 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect17, i32 0, i32 0
  %y28 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p27, i32 0, i32 1
  %28 = load i32, i32* %y28, align 4, !tbaa !35
  %29 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  %cmp29 = icmp sgt i32 %28, %29
  br i1 %cmp29, label %cond.true.31, label %cond.false.34

cond.true.31:                                     ; preds = %if.then
  %p32 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect17, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p32, i32 0, i32 1
  %30 = load i32, i32* %y33, align 4, !tbaa !35
  br label %cond.end.35

cond.false.34:                                    ; preds = %if.then
  %31 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.34, %cond.true.31
  %cond36 = phi i32 [ %30, %cond.true.31 ], [ %31, %cond.false.34 ]
  %32 = load i32*, i32** %ry.addr, align 8, !tbaa !1
  store i32 %cond36, i32* %32, align 4, !tbaa !5
  %q37 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect17, i32 0, i32 1
  %y38 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q37, i32 0, i32 1
  %33 = load i32, i32* %y38, align 4, !tbaa !33
  %34 = load i32, i32* %cropping_max.addr, align 4, !tbaa !5
  %cmp39 = icmp slt i32 %33, %34
  br i1 %cmp39, label %cond.true.41, label %cond.false.44

cond.true.41:                                     ; preds = %cond.end.35
  %q42 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect17, i32 0, i32 1
  %y43 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q42, i32 0, i32 1
  %35 = load i32, i32* %y43, align 4, !tbaa !33
  br label %cond.end.45

cond.false.44:                                    ; preds = %cond.end.35
  %36 = load i32, i32* %cropping_max.addr, align 4, !tbaa !5
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.44, %cond.true.41
  %cond46 = phi i32 [ %35, %cond.true.41 ], [ %36, %cond.false.44 ]
  %37 = load i32*, i32** %ry.addr, align 8, !tbaa !1
  %38 = load i32, i32* %37, align 4, !tbaa !5
  %sub47 = sub nsw i32 %cond46, %38
  %39 = load i32*, i32** %rheight.addr, align 8, !tbaa !1
  store i32 %sub47, i32* %39, align 4, !tbaa !5
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %lor.lhs.false
  %40 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  %41 = load i32*, i32** %ry.addr, align 8, !tbaa !1
  store i32 %40, i32* %41, align 4, !tbaa !5
  %42 = load i32, i32* %cropping_max.addr, align 4, !tbaa !5
  %43 = load i32, i32* %cropping_min.addr, align 4, !tbaa !5
  %sub48 = sub nsw i32 %42, %43
  %44 = load i32*, i32** %rheight.addr, align 8, !tbaa !1
  store i32 %sub48, i32* %44, align 4, !tbaa !5
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else, %cond.end.45
  %45 = bitcast %struct.gs_int_rect_s* %rect17 to i8*
  call void @llvm.lifetime.end(i64 16, i8* %45) #2
  br label %cleanup.56

sw.bb.49:                                         ; preds = %entry
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.50:                                         ; preds = %entry
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.51:                                         ; preds = %entry
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.52:                                         ; preds = %entry
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.53:                                         ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.54:                                         ; preds = %entry
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.bb.55:                                         ; preds = %entry
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

sw.epilog:                                        ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56

cleanup.56:                                       ; preds = %sw.epilog, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %cleanup, %cond.end.14, %sw.bb.2, %sw.bb.1, %sw.bb
  %46 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #2
  %47 = load i32, i32* %retval
  ret i32 %47
}

declare i32 @gx_default_composite_clist_write_update(%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*) #0

; Function Attrs: nounwind uwtable
define i32 @gs_is_pdf14trans_compositor(%struct.gs_composite_s* %pct) #1 {
entry:
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %0 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %0, i32 0, i32 0
  %1 = load %struct.gs_composite_type_s*, %struct.gs_composite_type_s** %type, align 8, !tbaa !163
  %cmp = icmp eq %struct.gs_composite_type_s* %1, @gs_composite_pdf14trans_type
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %type1 = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %2, i32 0, i32 0
  %3 = load %struct.gs_composite_type_s*, %struct.gs_composite_type_s** %type1, align 8, !tbaa !163
  %cmp2 = icmp eq %struct.gs_composite_type_s* %3, @gs_composite_pdf14trans_no_clist_writer_type
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @send_pdf14trans(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pparams.addr = alloca %struct.gs_pdf14trans_params_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pct = alloca %struct.gs_composite_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_composite_s** %pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  store %struct.gs_composite_s* null, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %2, i32 0, i32 20
  %3 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %3, i32 0, i32 5
  %4 = bitcast %struct.gs_matrix_fixed_s* %ctm1 to %struct.gs_matrix_s*
  %5 = bitcast %struct.gs_matrix_s* %ctm to i8*
  %6 = bitcast %struct.gs_matrix_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 24, i32 4, i1 false), !tbaa.struct !135
  %7 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %8 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call = call i32 @gs_create_pdf14trans(%struct.gs_composite_s** %pct, %struct.gs_pdf14trans_params_s* %7, %struct.gs_memory_s* %8) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %9 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %9, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %10, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  %12 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %14 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %15 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %16 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %17 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call2 = call i32 %12(%struct.gx_device_s* %13, %struct.gx_device_s** %14, %struct.gs_composite_s* %15, %struct.gs_imager_state_s* %16, %struct.gs_memory_s* %17, %struct.gx_device_s* null) #7
  store i32 %call2, i32* %code, align 4, !tbaa !5
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %18, i32 0, i32 1
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %procs3 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %19, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs3, i32 0, i32 2
  %20 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %21 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory4 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %21, i32 0, i32 1
  %22 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory4, align 8, !tbaa !165
  %23 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %24 = bitcast %struct.gs_composite_s* %23 to i8*
  call void %20(%struct.gs_memory_s* %22, i8* %24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0)) #7
  %25 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %26 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #2
  %27 = bitcast %struct.gs_composite_s** %pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @gs_create_pdf14trans(%struct.gs_composite_s** %ppct, %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %ppct.addr = alloca %struct.gs_composite_s**, align 8
  %pparams.addr = alloca %struct.gs_pdf14trans_params_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_composite_s** %ppct, %struct.gs_composite_s*** %ppct.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %1, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %2 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %3 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call = call i8* %2(%struct.gs_memory_s* %3, %struct.gs_memory_struct_type_s* @st_pdf14trans, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.64, i32 0, i32 0)) #7
  %4 = bitcast i8* %call to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %4, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %5 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %cmp = icmp eq %struct.gs_pdf14trans_s* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %6, i32 0, i32 0
  store %struct.gs_composite_type_s* @gs_composite_pdf14trans_type, %struct.gs_composite_type_s** %type, align 8, !tbaa !168
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call1 = call i64 @gs_next_ids(%struct.gs_memory_s* %7, i32 1) #7
  %8 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %id = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %8, i32 0, i32 1
  store i64 %call1, i64* %id, align 8, !tbaa !169
  %9 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %9, i32 0, i32 5
  %10 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %11 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  %12 = bitcast %struct.gs_pdf14trans_params_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 704, i32 8, i1 false), !tbaa.struct !170
  %13 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %idle = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %13, i32 0, i32 2
  store i32 0, i32* %idle, align 4, !tbaa !172
  %14 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %15 = bitcast %struct.gs_pdf14trans_s* %14 to %struct.gs_composite_s*
  %16 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppct.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %15, %struct.gs_composite_s** %16, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define i32 @put_param_compressed_color_list_elem(%struct.gx_device_s* %pdev, %struct.gs_param_list_s* %plist, %struct.compressed_color_list_s** %pret_comp_list, i8* %keyname, i32 %num_comps) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pret_comp_list.addr = alloca %struct.compressed_color_list_s**, align 8
  %keyname.addr = alloca i8*, align 8
  %num_comps.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pdata = alloca i8*, align 8
  %str = alloca %struct.gs_param_string_s, align 8
  %pcomp_list = alloca %struct.compressed_color_list_s*, align 8
  %cleanup.dest.slot = alloca i32
  %buff = alloca [50 x i8], align 16
  %sub_list_ptr = alloca %struct.compressed_color_list_s*, align 8
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store %struct.compressed_color_list_s** %pret_comp_list, %struct.compressed_color_list_s*** %pret_comp_list.addr, align 8, !tbaa !1
  store i8* %keyname, i8** %keyname.addr, align 8, !tbaa !1
  store i32 %num_comps, i32* %num_comps.addr, align 4, !tbaa !5
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i8** %pdata to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = bitcast %struct.compressed_color_list_s** %pcomp_list to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %7 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %call = call i32 @param_read_string(%struct.gs_param_list_s* %6, i8* %7, %struct.gs_param_string_s* %str) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %8 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %8, label %sw.default [
    i32 0, label %sw.epilog
    i32 1, label %sw.bb
  ]

sw.default:                                       ; preds = %entry
  %9 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %9, i32 0, i32 0
  %10 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs, align 8, !tbaa !173
  %signal_error = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %10, i32 0, i32 7
  %11 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error, align 8, !tbaa !175
  %12 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %13 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %14 = load i32, i32* %code, align 4, !tbaa !5
  %call1 = call i32 %11(%struct.gs_param_list_s* %12, i8* %13, i32 %14) #7
  br label %sw.bb

sw.bb:                                            ; preds = %entry, %sw.default
  %15 = load %struct.compressed_color_list_s**, %struct.compressed_color_list_s*** %pret_comp_list.addr, align 8, !tbaa !1
  store %struct.compressed_color_list_s* null, %struct.compressed_color_list_s** %15, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %entry
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  %16 = load i8*, i8** %data, align 8, !tbaa !177
  store i8* %16, i8** %pdata, align 8, !tbaa !1
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 3
  %18 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %19 = load i32, i32* %num_comps.addr, align 4, !tbaa !5
  %call2 = call %struct.compressed_color_list_s* @alloc_compressed_color_list_elem(%struct.gs_memory_s* %18, i32 %19) #7
  store %struct.compressed_color_list_s* %call2, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  store i32 1, i32* %j, align 4, !tbaa !5
  %20 = load i32, i32* %j, align 4, !tbaa !5
  %dec = add nsw i32 %20, -1
  store i32 %dec, i32* %j, align 4, !tbaa !5
  %idxprom = sext i32 %20 to i64
  %21 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 %idxprom
  %22 = load i8, i8* %arrayidx, align 1, !tbaa !66
  %conv = zext i8 %22 to i32
  %23 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %num_sub_level_ptrs = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %23, i32 0, i32 2
  store i32 %conv, i32* %num_sub_level_ptrs, align 4, !tbaa !179
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %24 = load i32, i32* %j, align 4, !tbaa !5
  %cmp = icmp sge i32 %24, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %num_sub_level_ptrs4 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %25, i32 0, i32 2
  %26 = load i32, i32* %num_sub_level_ptrs4, align 4, !tbaa !179
  %shl = shl i32 %26, 8
  %27 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom5 = sext i32 %27 to i64
  %28 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds i8, i8* %28, i64 %idxprom5
  %29 = load i8, i8* %arrayidx6, align 1, !tbaa !66
  %conv7 = zext i8 %29 to i32
  %or = or i32 %shl, %conv7
  %30 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %num_sub_level_ptrs8 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %30, i32 0, i32 2
  store i32 %or, i32* %num_sub_level_ptrs8, align 4, !tbaa !179
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %j, align 4, !tbaa !5
  %dec9 = add nsw i32 %31, -1
  store i32 %dec9, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 2
  store i8* %add.ptr, i8** %pdata, align 8, !tbaa !1
  store i32 1, i32* %j, align 4, !tbaa !5
  %33 = load i32, i32* %j, align 4, !tbaa !5
  %dec10 = add nsw i32 %33, -1
  store i32 %dec10, i32* %j, align 4, !tbaa !5
  %idxprom11 = sext i32 %33 to i64
  %34 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx12 = getelementptr inbounds i8, i8* %34, i64 %idxprom11
  %35 = load i8, i8* %arrayidx12, align 1, !tbaa !66
  %conv13 = zext i8 %35 to i32
  %36 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %first_bit_map = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %36, i32 0, i32 3
  store i32 %conv13, i32* %first_bit_map, align 4, !tbaa !181
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.25, %for.end
  %37 = load i32, i32* %j, align 4, !tbaa !5
  %cmp15 = icmp sge i32 %37, 0
  br i1 %cmp15, label %for.body.17, label %for.end.27

for.body.17:                                      ; preds = %for.cond.14
  %38 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %first_bit_map18 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %38, i32 0, i32 3
  %39 = load i32, i32* %first_bit_map18, align 4, !tbaa !181
  %shl19 = shl i32 %39, 8
  %40 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom20 = sext i32 %40 to i64
  %41 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx21 = getelementptr inbounds i8, i8* %41, i64 %idxprom20
  %42 = load i8, i8* %arrayidx21, align 1, !tbaa !66
  %conv22 = zext i8 %42 to i32
  %or23 = or i32 %shl19, %conv22
  %43 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %first_bit_map24 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %43, i32 0, i32 3
  store i32 %or23, i32* %first_bit_map24, align 4, !tbaa !181
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.body.17
  %44 = load i32, i32* %j, align 4, !tbaa !5
  %dec26 = add nsw i32 %44, -1
  store i32 %dec26, i32* %j, align 4, !tbaa !5
  br label %for.cond.14

for.end.27:                                       ; preds = %for.cond.14
  %45 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr28 = getelementptr inbounds i8, i8* %45, i64 2
  store i8* %add.ptr28, i8** %pdata, align 8, !tbaa !1
  %46 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %first_bit_map29 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %46, i32 0, i32 3
  %47 = load i32, i32* %first_bit_map29, align 4, !tbaa !181
  store i32 %47, i32* %i, align 4, !tbaa !5
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.205, %for.end.27
  %48 = load i32, i32* %i, align 4, !tbaa !5
  %cmp31 = icmp slt i32 %48, 256
  br i1 %cmp31, label %for.body.33, label %for.end.206

for.body.33:                                      ; preds = %for.cond.30
  store i32 1, i32* %j, align 4, !tbaa !5
  %49 = load i32, i32* %j, align 4, !tbaa !5
  %dec34 = add nsw i32 %49, -1
  store i32 %dec34, i32* %j, align 4, !tbaa !5
  %idxprom35 = sext i32 %49 to i64
  %50 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx36 = getelementptr inbounds i8, i8* %50, i64 %idxprom35
  %51 = load i8, i8* %arrayidx36, align 1, !tbaa !66
  %conv37 = zext i8 %51 to i16
  %52 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom38 = sext i32 %52 to i64
  %53 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %53, i32 0, i32 4
  %comp_data = bitcast %union.anon.13* %u to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx39 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data, i32 0, i64 %idxprom38
  %num_comp = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx39, i32 0, i32 0
  store i16 %conv37, i16* %num_comp, align 2, !tbaa !182
  br label %for.cond.40

for.cond.40:                                      ; preds = %for.inc.61, %for.body.33
  %54 = load i32, i32* %j, align 4, !tbaa !5
  %cmp41 = icmp sge i32 %54, 0
  br i1 %cmp41, label %for.body.43, label %for.end.63

for.body.43:                                      ; preds = %for.cond.40
  %55 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom44 = sext i32 %55 to i64
  %56 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u45 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %56, i32 0, i32 4
  %comp_data46 = bitcast %union.anon.13* %u45 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx47 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data46, i32 0, i64 %idxprom44
  %num_comp48 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx47, i32 0, i32 0
  %57 = load i16, i16* %num_comp48, align 2, !tbaa !182
  %conv49 = sext i16 %57 to i32
  %shl50 = shl i32 %conv49, 8
  %58 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom51 = sext i32 %58 to i64
  %59 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx52 = getelementptr inbounds i8, i8* %59, i64 %idxprom51
  %60 = load i8, i8* %arrayidx52, align 1, !tbaa !66
  %conv53 = zext i8 %60 to i32
  %or54 = or i32 %shl50, %conv53
  %conv55 = trunc i32 %or54 to i16
  %61 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom56 = sext i32 %61 to i64
  %62 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u57 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %62, i32 0, i32 4
  %comp_data58 = bitcast %union.anon.13* %u57 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx59 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data58, i32 0, i64 %idxprom56
  %num_comp60 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx59, i32 0, i32 0
  store i16 %conv55, i16* %num_comp60, align 2, !tbaa !182
  br label %for.inc.61

for.inc.61:                                       ; preds = %for.body.43
  %63 = load i32, i32* %j, align 4, !tbaa !5
  %dec62 = add nsw i32 %63, -1
  store i32 %dec62, i32* %j, align 4, !tbaa !5
  br label %for.cond.40

for.end.63:                                       ; preds = %for.cond.40
  %64 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr64 = getelementptr inbounds i8, i8* %64, i64 2
  store i8* %add.ptr64, i8** %pdata, align 8, !tbaa !1
  store i32 1, i32* %j, align 4, !tbaa !5
  %65 = load i32, i32* %j, align 4, !tbaa !5
  %dec65 = add nsw i32 %65, -1
  store i32 %dec65, i32* %j, align 4, !tbaa !5
  %idxprom66 = sext i32 %65 to i64
  %66 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx67 = getelementptr inbounds i8, i8* %66, i64 %idxprom66
  %67 = load i8, i8* %arrayidx67, align 1, !tbaa !66
  %conv68 = zext i8 %67 to i16
  %68 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom69 = sext i32 %68 to i64
  %69 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u70 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %69, i32 0, i32 4
  %comp_data71 = bitcast %union.anon.13* %u70 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx72 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data71, i32 0, i64 %idxprom69
  %num_non_solid_comp = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx72, i32 0, i32 1
  store i16 %conv68, i16* %num_non_solid_comp, align 2, !tbaa !184
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.94, %for.end.63
  %70 = load i32, i32* %j, align 4, !tbaa !5
  %cmp74 = icmp sge i32 %70, 0
  br i1 %cmp74, label %for.body.76, label %for.end.96

for.body.76:                                      ; preds = %for.cond.73
  %71 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom77 = sext i32 %71 to i64
  %72 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u78 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %72, i32 0, i32 4
  %comp_data79 = bitcast %union.anon.13* %u78 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx80 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data79, i32 0, i64 %idxprom77
  %num_non_solid_comp81 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx80, i32 0, i32 1
  %73 = load i16, i16* %num_non_solid_comp81, align 2, !tbaa !184
  %conv82 = sext i16 %73 to i32
  %shl83 = shl i32 %conv82, 8
  %74 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom84 = sext i32 %74 to i64
  %75 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx85 = getelementptr inbounds i8, i8* %75, i64 %idxprom84
  %76 = load i8, i8* %arrayidx85, align 1, !tbaa !66
  %conv86 = zext i8 %76 to i32
  %or87 = or i32 %shl83, %conv86
  %conv88 = trunc i32 %or87 to i16
  %77 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom89 = sext i32 %77 to i64
  %78 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u90 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %78, i32 0, i32 4
  %comp_data91 = bitcast %union.anon.13* %u90 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx92 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data91, i32 0, i64 %idxprom89
  %num_non_solid_comp93 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx92, i32 0, i32 1
  store i16 %conv88, i16* %num_non_solid_comp93, align 2, !tbaa !184
  br label %for.inc.94

for.inc.94:                                       ; preds = %for.body.76
  %79 = load i32, i32* %j, align 4, !tbaa !5
  %dec95 = add nsw i32 %79, -1
  store i32 %dec95, i32* %j, align 4, !tbaa !5
  br label %for.cond.73

for.end.96:                                       ; preds = %for.cond.73
  %80 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr97 = getelementptr inbounds i8, i8* %80, i64 2
  store i8* %add.ptr97, i8** %pdata, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  %81 = load i32, i32* %j, align 4, !tbaa !5
  %dec98 = add nsw i32 %81, -1
  store i32 %dec98, i32* %j, align 4, !tbaa !5
  %idxprom99 = sext i32 %81 to i64
  %82 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx100 = getelementptr inbounds i8, i8* %82, i64 %idxprom99
  %83 = load i8, i8* %arrayidx100, align 1, !tbaa !66
  %conv101 = zext i8 %83 to i32
  %84 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom102 = sext i32 %84 to i64
  %85 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u103 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %85, i32 0, i32 4
  %comp_data104 = bitcast %union.anon.13* %u103 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx105 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data104, i32 0, i64 %idxprom102
  %solid_not_100 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx105, i32 0, i32 2
  store i32 %conv101, i32* %solid_not_100, align 4, !tbaa !185
  br label %for.cond.106

for.cond.106:                                     ; preds = %for.inc.125, %for.end.96
  %86 = load i32, i32* %j, align 4, !tbaa !5
  %cmp107 = icmp sge i32 %86, 0
  br i1 %cmp107, label %for.body.109, label %for.end.127

for.body.109:                                     ; preds = %for.cond.106
  %87 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom110 = sext i32 %87 to i64
  %88 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u111 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %88, i32 0, i32 4
  %comp_data112 = bitcast %union.anon.13* %u111 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx113 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data112, i32 0, i64 %idxprom110
  %solid_not_100114 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx113, i32 0, i32 2
  %89 = load i32, i32* %solid_not_100114, align 4, !tbaa !185
  %shl115 = shl i32 %89, 8
  %90 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom116 = sext i32 %90 to i64
  %91 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx117 = getelementptr inbounds i8, i8* %91, i64 %idxprom116
  %92 = load i8, i8* %arrayidx117, align 1, !tbaa !66
  %conv118 = zext i8 %92 to i32
  %or119 = or i32 %shl115, %conv118
  %93 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom120 = sext i32 %93 to i64
  %94 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u121 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %94, i32 0, i32 4
  %comp_data122 = bitcast %union.anon.13* %u121 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx123 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data122, i32 0, i64 %idxprom120
  %solid_not_100124 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx123, i32 0, i32 2
  store i32 %or119, i32* %solid_not_100124, align 4, !tbaa !185
  br label %for.inc.125

for.inc.125:                                      ; preds = %for.body.109
  %95 = load i32, i32* %j, align 4, !tbaa !5
  %dec126 = add nsw i32 %95, -1
  store i32 %dec126, i32* %j, align 4, !tbaa !5
  br label %for.cond.106

for.end.127:                                      ; preds = %for.cond.106
  %96 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr128 = getelementptr inbounds i8, i8* %96, i64 1
  store i8* %add.ptr128, i8** %pdata, align 8, !tbaa !1
  store i32 7, i32* %j, align 4, !tbaa !5
  %97 = load i32, i32* %j, align 4, !tbaa !5
  %dec129 = add nsw i32 %97, -1
  store i32 %dec129, i32* %j, align 4, !tbaa !5
  %idxprom130 = sext i32 %97 to i64
  %98 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx131 = getelementptr inbounds i8, i8* %98, i64 %idxprom130
  %99 = load i8, i8* %arrayidx131, align 1, !tbaa !66
  %conv132 = zext i8 %99 to i64
  %100 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom133 = sext i32 %100 to i64
  %101 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u134 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %101, i32 0, i32 4
  %comp_data135 = bitcast %union.anon.13* %u134 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx136 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data135, i32 0, i64 %idxprom133
  %colorants = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx136, i32 0, i32 3
  store i64 %conv132, i64* %colorants, align 8, !tbaa !186
  br label %for.cond.137

for.cond.137:                                     ; preds = %for.inc.156, %for.end.127
  %102 = load i32, i32* %j, align 4, !tbaa !5
  %cmp138 = icmp sge i32 %102, 0
  br i1 %cmp138, label %for.body.140, label %for.end.158

for.body.140:                                     ; preds = %for.cond.137
  %103 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom141 = sext i32 %103 to i64
  %104 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u142 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %104, i32 0, i32 4
  %comp_data143 = bitcast %union.anon.13* %u142 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx144 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data143, i32 0, i64 %idxprom141
  %colorants145 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx144, i32 0, i32 3
  %105 = load i64, i64* %colorants145, align 8, !tbaa !186
  %shl146 = shl i64 %105, 8
  %106 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom147 = sext i32 %106 to i64
  %107 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx148 = getelementptr inbounds i8, i8* %107, i64 %idxprom147
  %108 = load i8, i8* %arrayidx148, align 1, !tbaa !66
  %conv149 = zext i8 %108 to i64
  %or150 = or i64 %shl146, %conv149
  %109 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom151 = sext i32 %109 to i64
  %110 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u152 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %110, i32 0, i32 4
  %comp_data153 = bitcast %union.anon.13* %u152 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx154 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data153, i32 0, i64 %idxprom151
  %colorants155 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx154, i32 0, i32 3
  store i64 %or150, i64* %colorants155, align 8, !tbaa !186
  br label %for.inc.156

for.inc.156:                                      ; preds = %for.body.140
  %111 = load i32, i32* %j, align 4, !tbaa !5
  %dec157 = add nsw i32 %111, -1
  store i32 %dec157, i32* %j, align 4, !tbaa !5
  br label %for.cond.137

for.end.158:                                      ; preds = %for.cond.137
  %112 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr159 = getelementptr inbounds i8, i8* %112, i64 8
  store i8* %add.ptr159, i8** %pdata, align 8, !tbaa !1
  %113 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom160 = sext i32 %113 to i64
  %114 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u161 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %114, i32 0, i32 4
  %comp_data162 = bitcast %union.anon.13* %u161 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx163 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data162, i32 0, i64 %idxprom160
  %num_comp164 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx163, i32 0, i32 0
  %115 = load i16, i16* %num_comp164, align 2, !tbaa !182
  %conv165 = sext i16 %115 to i32
  %116 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom166 = sext i32 %116 to i64
  %117 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u167 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %117, i32 0, i32 4
  %comp_data168 = bitcast %union.anon.13* %u167 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx169 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data168, i32 0, i64 %idxprom166
  %num_non_solid_comp170 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx169, i32 0, i32 1
  %118 = load i16, i16* %num_non_solid_comp170, align 2, !tbaa !184
  %conv171 = sext i16 %118 to i32
  %cmp172 = icmp ne i32 %conv165, %conv171
  br i1 %cmp172, label %if.then, label %if.end

if.then:                                          ; preds = %for.end.158
  store i32 7, i32* %j, align 4, !tbaa !5
  %119 = load i32, i32* %j, align 4, !tbaa !5
  %dec174 = add nsw i32 %119, -1
  store i32 %dec174, i32* %j, align 4, !tbaa !5
  %idxprom175 = sext i32 %119 to i64
  %120 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx176 = getelementptr inbounds i8, i8* %120, i64 %idxprom175
  %121 = load i8, i8* %arrayidx176, align 1, !tbaa !66
  %conv177 = zext i8 %121 to i64
  %122 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom178 = sext i32 %122 to i64
  %123 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u179 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %123, i32 0, i32 4
  %comp_data180 = bitcast %union.anon.13* %u179 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx181 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data180, i32 0, i64 %idxprom178
  %solid_colorants = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx181, i32 0, i32 4
  store i64 %conv177, i64* %solid_colorants, align 8, !tbaa !187
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.inc.201, %if.then
  %124 = load i32, i32* %j, align 4, !tbaa !5
  %cmp183 = icmp sge i32 %124, 0
  br i1 %cmp183, label %for.body.185, label %for.end.203

for.body.185:                                     ; preds = %for.cond.182
  %125 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom186 = sext i32 %125 to i64
  %126 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u187 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %126, i32 0, i32 4
  %comp_data188 = bitcast %union.anon.13* %u187 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx189 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data188, i32 0, i64 %idxprom186
  %solid_colorants190 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx189, i32 0, i32 4
  %127 = load i64, i64* %solid_colorants190, align 8, !tbaa !187
  %shl191 = shl i64 %127, 8
  %128 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom192 = sext i32 %128 to i64
  %129 = load i8*, i8** %pdata, align 8, !tbaa !1
  %arrayidx193 = getelementptr inbounds i8, i8* %129, i64 %idxprom192
  %130 = load i8, i8* %arrayidx193, align 1, !tbaa !66
  %conv194 = zext i8 %130 to i64
  %or195 = or i64 %shl191, %conv194
  %131 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom196 = sext i32 %131 to i64
  %132 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u197 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %132, i32 0, i32 4
  %comp_data198 = bitcast %union.anon.13* %u197 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx199 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data198, i32 0, i64 %idxprom196
  %solid_colorants200 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx199, i32 0, i32 4
  store i64 %or195, i64* %solid_colorants200, align 8, !tbaa !187
  br label %for.inc.201

for.inc.201:                                      ; preds = %for.body.185
  %133 = load i32, i32* %j, align 4, !tbaa !5
  %dec202 = add nsw i32 %133, -1
  store i32 %dec202, i32* %j, align 4, !tbaa !5
  br label %for.cond.182

for.end.203:                                      ; preds = %for.cond.182
  %134 = load i8*, i8** %pdata, align 8, !tbaa !1
  %add.ptr204 = getelementptr inbounds i8, i8* %134, i64 8
  store i8* %add.ptr204, i8** %pdata, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %for.end.203, %for.end.158
  br label %for.inc.205

for.inc.205:                                      ; preds = %if.end
  %135 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %135, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond.30

for.end.206:                                      ; preds = %for.cond.30
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.207

for.cond.207:                                     ; preds = %for.inc.218, %for.end.206
  %136 = load i32, i32* %i, align 4, !tbaa !5
  %137 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %num_sub_level_ptrs208 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %137, i32 0, i32 2
  %138 = load i32, i32* %num_sub_level_ptrs208, align 4, !tbaa !179
  %cmp209 = icmp slt i32 %136, %138
  br i1 %cmp209, label %for.body.211, label %for.end.220

for.body.211:                                     ; preds = %for.cond.207
  %139 = bitcast [50 x i8]* %buff to i8*
  call void @llvm.lifetime.start(i64 50, i8* %139) #2
  %140 = bitcast %struct.compressed_color_list_s** %sub_list_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %140) #2
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %buff, i32 0, i32 0
  %141 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %142 = load i32, i32* %i, align 4, !tbaa !5
  %call212 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* %141, i32 %142) #7
  %143 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %144 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %arraydecay213 = getelementptr inbounds [50 x i8], [50 x i8]* %buff, i32 0, i32 0
  %145 = load i32, i32* %num_comps.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %145, 1
  %call214 = call i32 @put_param_compressed_color_list_elem(%struct.gx_device_s* %143, %struct.gs_param_list_s* %144, %struct.compressed_color_list_s** %sub_list_ptr, i8* %arraydecay213, i32 %sub) #7
  %146 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %sub_list_ptr, align 8, !tbaa !1
  %147 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom215 = sext i32 %147 to i64
  %148 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %u216 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %148, i32 0, i32 4
  %sub_level_ptrs = bitcast %union.anon.13* %u216 to [256 x %struct.compressed_color_list_s*]*
  %arrayidx217 = getelementptr inbounds [256 x %struct.compressed_color_list_s*], [256 x %struct.compressed_color_list_s*]* %sub_level_ptrs, i32 0, i64 %idxprom215
  store %struct.compressed_color_list_s* %146, %struct.compressed_color_list_s** %arrayidx217, align 8, !tbaa !1
  %149 = bitcast %struct.compressed_color_list_s** %sub_list_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %149) #2
  %150 = bitcast [50 x i8]* %buff to i8*
  call void @llvm.lifetime.end(i64 50, i8* %150) #2
  br label %for.inc.218

for.inc.218:                                      ; preds = %for.body.211
  %151 = load i32, i32* %i, align 4, !tbaa !5
  %inc219 = add nsw i32 %151, 1
  store i32 %inc219, i32* %i, align 4, !tbaa !5
  br label %for.cond.207

for.end.220:                                      ; preds = %for.cond.207
  %152 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list, align 8, !tbaa !1
  %153 = load %struct.compressed_color_list_s**, %struct.compressed_color_list_s*** %pret_comp_list.addr, align 8, !tbaa !1
  store %struct.compressed_color_list_s* %152, %struct.compressed_color_list_s** %153, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.220, %sw.bb
  %154 = bitcast %struct.compressed_color_list_s** %pcomp_list to i8*
  call void @llvm.lifetime.end(i64 8, i8* %154) #2
  %155 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.end(i64 16, i8* %155) #2
  %156 = bitcast i8** %pdata to i8*
  call void @llvm.lifetime.end(i64 8, i8* %156) #2
  %157 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %157) #2
  %158 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #2
  %159 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %159) #2
  %160 = load i32, i32* %retval
  ret i32 %160
}

declare i32 @param_read_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #0

declare %struct.compressed_color_list_s* @alloc_compressed_color_list_elem(%struct.gs_memory_s*, i32) #0

declare i32 @gs_sprintf(i8*, i8*, ...) #0

; Function Attrs: nounwind uwtable
define i32 @put_param_pdf14_spot_names(%struct.gx_device_s* %pdev, %struct.gs_separations_s* %pseparations, %struct.gs_param_list_s* %plist) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %pseparations.addr = alloca %struct.gs_separations_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %num_spot_colors = alloca i32, align 4
  %i = alloca i32, align 4
  %str = alloca %struct.gs_param_string_s, align 8
  %cleanup.dest.slot = alloca i32
  %buff = alloca [20 x i8], align 16
  %sep_name = alloca i8*, align 8
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_separations_s* %pseparations, %struct.gs_separations_s** %pseparations.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %num_spot_colors to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.start(i64 16, i8* %3) #2
  %4 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @param_read_int(%struct.gs_param_list_s* %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i32 0, i32 0), i32* %num_spot_colors) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %5 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %5, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb.2
  ]

sw.default:                                       ; preds = %entry
  %6 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %6, i32 0, i32 0
  %7 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs, align 8, !tbaa !173
  %signal_error = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %7, i32 0, i32 7
  %8 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error, align 8, !tbaa !175
  %9 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %10 = load i32, i32* %code, align 4, !tbaa !5
  %call1 = call i32 %8(%struct.gs_param_list_s* %9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i32 0, i32 0), i32 %10) #7
  br label %sw.epilog.25

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.2:                                          ; preds = %entry
  %11 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %cmp = icmp slt i32 %11, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.2
  %12 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %cmp3 = icmp sgt i32 %12, 64
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %sw.bb.2
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %14 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %13, %14
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = bitcast [20 x i8]* %buff to i8*
  call void @llvm.lifetime.start(i64 20, i8* %15) #2
  %16 = bitcast i8** %sep_name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %buff, i32 0, i32 0
  %17 = load i32, i32* %i, align 4, !tbaa !5
  %call5 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %arraydecay, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i32 %17) #7
  %18 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %arraydecay6 = getelementptr inbounds [20 x i8], [20 x i8]* %buff, i32 0, i32 0
  %call7 = call i32 @param_read_string(%struct.gs_param_list_s* %18, i8* %arraydecay6, %struct.gs_param_string_s* %str) #7
  store i32 %call7, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %19, label %sw.default.8 [
    i32 0, label %sw.bb.13
  ]

sw.default.8:                                     ; preds = %for.body
  %20 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs9 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %20, i32 0, i32 0
  %21 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs9, align 8, !tbaa !173
  %signal_error10 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %21, i32 0, i32 7
  %22 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error10, align 8, !tbaa !175
  %23 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [20 x i8], [20 x i8]* %buff, i32 0, i32 0
  %24 = load i32, i32* %code, align 4, !tbaa !5
  %call12 = call i32 %22(%struct.gs_param_list_s* %23, i8* %arraydecay11, i32 %24) #7
  br label %sw.epilog

sw.bb.13:                                         ; preds = %for.body
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 3
  %26 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %procs14 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %26, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs14, i32 0, i32 7
  %27 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %memory15 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %28, i32 0, i32 3
  %29 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory15, align 8, !tbaa !60
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 1
  %30 = load i32, i32* %size, align 4, !tbaa !188
  %call16 = call i8* %27(%struct.gs_memory_s* %29, i32 %30, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.22, i32 0, i32 0)) #7
  store i8* %call16, i8** %sep_name, align 8, !tbaa !1
  %31 = load i8*, i8** %sep_name, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  %32 = load i8*, i8** %data, align 8, !tbaa !177
  %size17 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 1
  %33 = load i32, i32* %size17, align 4, !tbaa !188
  %conv = zext i32 %33 to i64
  %call18 = call i8* @memcpy(i8* %31, i8* %32, i64 %conv) #8
  %size19 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 1
  %34 = load i32, i32* %size19, align 4, !tbaa !188
  %35 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %35 to i64
  %36 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations.addr, align 8, !tbaa !1
  %names = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %36, i32 0, i32 1
  %arrayidx = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names, i32 0, i64 %idxprom
  %size20 = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx, i32 0, i32 0
  store i32 %34, i32* %size20, align 4, !tbaa !189
  %37 = load i8*, i8** %sep_name, align 8, !tbaa !1
  %38 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom21 = sext i32 %38 to i64
  %39 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations.addr, align 8, !tbaa !1
  %names22 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %39, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names22, i32 0, i64 %idxprom21
  %data24 = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx23, i32 0, i32 1
  store i8* %37, i8** %data24, align 8, !tbaa !191
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.13, %sw.default.8
  %40 = bitcast i8** %sep_name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #2
  %41 = bitcast [20 x i8]* %buff to i8*
  call void @llvm.lifetime.end(i64 20, i8* %41) #2
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %42 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %43 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %44 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations.addr, align 8, !tbaa !1
  %num_separations = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %44, i32 0, i32 0
  store i32 %43, i32* %num_separations, align 4, !tbaa !192
  br label %sw.epilog.25

sw.epilog.25:                                     ; preds = %for.end, %sw.default
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog.25, %if.then, %sw.bb
  %45 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.end(i64 16, i8* %45) #2
  %46 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %46) #2
  %47 = bitcast i32* %num_spot_colors to i8*
  call void @llvm.lifetime.end(i64 4, i8* %47) #2
  %48 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #2
  %49 = load i32, i32* %retval
  ret i32 %49
}

declare i32 @param_read_int(%struct.gs_param_list_s*, i8*, i32*) #0

; Function Attrs: nounwind uwtable
define i32 @pdf14_put_devn_params(%struct.gx_device_s* %pdev, %struct.gs_devn_params_s* %pdevn_params, %struct.gs_param_list_s* %plist) #1 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %pdevn_params.addr = alloca %struct.gs_devn_params_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_devn_params_s* %pdevn_params, %struct.gs_devn_params_s** %pdevn_params.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %2 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %3 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params.addr, align 8, !tbaa !1
  %pdf14_compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %3, i32 0, i32 9
  %call = call i32 @put_param_compressed_color_list_elem(%struct.gx_device_s* %1, %struct.gs_param_list_s* %2, %struct.compressed_color_list_s** %pdf14_compressed_color_list, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i32 0, i32 0), i32 7) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %4 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp sge i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params.addr, align 8, !tbaa !1
  %pdf14_separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %6, i32 0, i32 10
  %7 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call1 = call i32 @put_param_pdf14_spot_names(%struct.gx_device_s* %5, %struct.gs_separations_s* %pdf14_separations, %struct.gs_param_list_s* %7) #7
  store i32 %call1, i32* %code, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %code, align 4, !tbaa !5
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #2
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_open(%struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %3) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  store i32 0, i32* %x, align 4, !tbaa !34
  %p1 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p1, i32 0, i32 1
  store i32 0, i32* %y, align 4, !tbaa !35
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %4, i32 0, i32 13
  %5 = load i32, i32* %width, align 4, !tbaa !193
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x2 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  store i32 %5, i32* %x2, align 4, !tbaa !31
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 14
  %7 = load i32, i32* %height, align 4, !tbaa !194
  %q3 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y4 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q3, i32 0, i32 1
  store i32 %7, i32* %y4, align 4, !tbaa !33
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %9 = load i32, i32* %num_components, align 4, !tbaa !195
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info5, i32 0, i32 2
  %11 = load i32, i32* %polarity, align 4, !tbaa !196
  %cmp = icmp ne i32 %11, 0
  %conv = zext i1 %cmp to i32
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call %struct.pdf14_ctx_s* @pdf14_ctx_new(%struct.gs_int_rect_s* %rect, i32 %9, i32 %conv, %struct.gx_device_s* %12) #7
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 47
  store %struct.pdf14_ctx_s* %call, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 47
  %15 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx6, align 8, !tbaa !7
  %cmp7 = icmp eq %struct.pdf14_ctx_s* %15, null
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %free_devicen = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 59
  store i32 1, i32* %free_devicen, align 4, !tbaa !156
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %17) #2
  %18 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_output_page(%struct.gx_device_s* %dev, i32 %num_copies, i32 %flush) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %num_copies.addr = alloca i32, align 4
  %flush.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %num_copies, i32* %num_copies.addr, align 4, !tbaa !5
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %3, i32 0, i32 43
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  %cmp = icmp ne %struct.gx_device_s* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 43
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %target1, align 8, !tbaa !82
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 42
  %output_page = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 3
  %7 = load i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32)** %output_page, align 8, !tbaa !197
  %8 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %8, i32 0, i32 43
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %target2, align 8, !tbaa !82
  %10 = load i32, i32* %num_copies.addr, align 4, !tbaa !5
  %11 = load i32, i32* %flush.addr, align 4, !tbaa !5
  %call = call i32 %7(%struct.gx_device_s* %9, i32 %10, i32 %11) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %12 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #2
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_close(%struct.gx_device_s* %dev) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %3, i32 0, i32 47
  %4 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %tobool = icmp ne %struct.pdf14_ctx_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 47
  %6 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  call void @pdf14_ctx_free(%struct.pdf14_ctx_s* %6) #7
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 47
  store %struct.pdf14_ctx_s* null, %struct.pdf14_ctx_s** %ctx2, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %8) #2
  ret i32 0
}

declare i64 @pdf14_encode_color(%struct.gx_device_s*, i16*) #0

declare i32 @pdf14_decode_color(%struct.gx_device_s*, i64, i16*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_fill_rectangle(%struct.gx_device_s* %dev, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !68
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %7 = load i32, i32* %x.addr, align 4, !tbaa !5
  %8 = load i32, i32* %y.addr, align 4, !tbaa !5
  %or = or i32 %7, %8
  %cmp = icmp slt i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %do.body.1
  %9 = load i32, i32* %x.addr, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %9, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %10 = load i32, i32* %x.addr, align 4, !tbaa !5
  %11 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %11, %10
  store i32 %add, i32* %w.addr, align 4, !tbaa !5
  store i32 0, i32* %x.addr, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %12 = load i32, i32* %y.addr, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %12, 0
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %13 = load i32, i32* %y.addr, align 4, !tbaa !5
  %14 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add6 = add nsw i32 %14, %13
  store i32 %add6, i32* %h.addr, align 4, !tbaa !5
  store i32 0, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %do.body.1
  br label %do.cond

do.cond:                                          ; preds = %if.end.8
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.9

do.body.9:                                        ; preds = %do.end
  %15 = load i32, i32* %w.addr, align 4, !tbaa !5
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 13
  %17 = load i32, i32* %width, align 4, !tbaa !193
  %18 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %17, %18
  %cmp10 = icmp sgt i32 %15, %sub
  br i1 %cmp10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %do.body.9
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %19, i32 0, i32 13
  %20 = load i32, i32* %width12, align 4, !tbaa !193
  %21 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub13 = sub nsw i32 %20, %21
  store i32 %sub13, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %do.body.9
  br label %do.cond.15

do.cond.15:                                       ; preds = %if.end.14
  br label %do.end.16

do.end.16:                                        ; preds = %do.cond.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %22 = load i32, i32* %h.addr, align 4, !tbaa !5
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %23, i32 0, i32 14
  %24 = load i32, i32* %height, align 4, !tbaa !194
  %25 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub18 = sub nsw i32 %24, %25
  %cmp19 = icmp sgt i32 %22, %sub18
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %do.body.17
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height21 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %26, i32 0, i32 14
  %27 = load i32, i32* %height21, align 4, !tbaa !194
  %28 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub22 = sub nsw i32 %27, %28
  store i32 %sub22, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %do.body.17
  br label %do.cond.24

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25

do.end.25:                                        ; preds = %do.cond.24
  br label %do.cond.26

do.cond.26:                                       ; preds = %do.end.25
  br label %do.end.27

do.end.27:                                        ; preds = %do.cond.26
  %29 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp28 = icmp sle i32 %29, 0
  br i1 %cmp28, label %if.then.30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.27
  %30 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp29 = icmp sle i32 %30, 0
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %lor.lhs.false, %do.end.27
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.31:                                        ; preds = %lor.lhs.false
  %31 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %31, i32 0, i32 3
  %32 = load i32, i32* %knockout, align 4, !tbaa !198
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %if.end.31
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %34 = load i32, i32* %x.addr, align 4, !tbaa !5
  %35 = load i32, i32* %y.addr, align 4, !tbaa !5
  %36 = load i32, i32* %w.addr, align 4, !tbaa !5
  %37 = load i32, i32* %h.addr, align 4, !tbaa !5
  %38 = load i64, i64* %color.addr, align 8, !tbaa !68
  %call = call i32 @pdf14_mark_fill_rectangle_ko_simple(%struct.gx_device_s* %33, i32 %34, i32 %35, i32 %36, i32 %37, i64 %38, %struct.gx_device_color_s* null, i32 0) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %if.end.31
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %40 = load i32, i32* %x.addr, align 4, !tbaa !5
  %41 = load i32, i32* %y.addr, align 4, !tbaa !5
  %42 = load i32, i32* %w.addr, align 4, !tbaa !5
  %43 = load i32, i32* %h.addr, align 4, !tbaa !5
  %44 = load i64, i64* %color.addr, align 8, !tbaa !68
  %call33 = call i32 @pdf14_mark_fill_rectangle(%struct.gx_device_s* %39, i32 %40, i32 %41, i32 %42, i32 %43, i64 %44, %struct.gx_device_color_s* null, i32 0) #7
  store i32 %call33, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then.32, %if.then.30
  %45 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #2
  %46 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #2
  %47 = load i32, i32* %retval
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_copy_mono(%struct.gx_device_s* %dev, i8* %base, i32 %sourcex, i32 %sraster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i64 %zero, i64 %one) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %base.addr = alloca i8*, align 8
  %sourcex.addr = alloca i32, align 4
  %sraster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %zero.addr = alloca i64, align 8
  %one.addr = alloca i64, align 8
  %sptr = alloca i8*, align 8
  %line = alloca i8*, align 8
  %sbit = alloca i32, align 4
  %first_bit = alloca i32, align 4
  %code = alloca i32, align 4
  %sbyte = alloca i32, align 4
  %bit = alloca i32, align 4
  %count = alloca i32, align 4
  %run_length = alloca i32, align 4
  %startx = alloca i32, align 4
  %current_bit = alloca i32, align 4
  %bit_value = alloca i32, align 4
  %current_color = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %base, i8** %base.addr, align 8, !tbaa !1
  store i32 %sourcex, i32* %sourcex.addr, align 4, !tbaa !5
  store i32 %sraster, i32* %sraster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %zero, i64* %zero.addr, align 8, !tbaa !68
  store i64 %one, i64* %one.addr, align 8, !tbaa !68
  %0 = bitcast i8** %sptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast i8** %line to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast i32* %sbit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %first_bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i32* %sbyte to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %run_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = bitcast i32* %startx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %current_bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %bit_value to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i64* %current_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %13 = load i32, i32* %x.addr, align 4, !tbaa !5
  %14 = load i32, i32* %y.addr, align 4, !tbaa !5
  %or = or i32 %13, %14
  %cmp = icmp slt i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %do.body.1
  %15 = load i32, i32* %x.addr, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %15, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %16 = load i32, i32* %x.addr, align 4, !tbaa !5
  %17 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %17, %16
  store i32 %add, i32* %w.addr, align 4, !tbaa !5
  %18 = load i32, i32* %x.addr, align 4, !tbaa !5
  %19 = load i32, i32* %sourcex.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %19, %18
  store i32 %sub, i32* %sourcex.addr, align 4, !tbaa !5
  store i32 0, i32* %x.addr, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %20 = load i32, i32* %y.addr, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %20, 0
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %21 = load i32, i32* %y.addr, align 4, !tbaa !5
  %22 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add6 = add nsw i32 %22, %21
  store i32 %add6, i32* %h.addr, align 4, !tbaa !5
  %23 = load i32, i32* %y.addr, align 4, !tbaa !5
  %24 = load i32, i32* %sraster.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %23, %24
  %25 = load i8*, i8** %base.addr, align 8, !tbaa !1
  %idx.ext = sext i32 %mul to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %idx.neg
  store i8* %add.ptr, i8** %base.addr, align 8, !tbaa !1
  store i64 0, i64* %id.addr, align 8, !tbaa !68
  store i32 0, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %do.body.1
  %26 = load i32, i32* %w.addr, align 4, !tbaa !5
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 13
  %28 = load i32, i32* %width, align 4, !tbaa !193
  %29 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub9 = sub nsw i32 %28, %29
  %cmp10 = icmp sgt i32 %26, %sub9
  br i1 %cmp10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.8
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 13
  %31 = load i32, i32* %width12, align 4, !tbaa !193
  %32 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub13 = sub nsw i32 %31, %32
  store i32 %sub13, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %if.end.8
  br label %do.cond

do.cond:                                          ; preds = %if.end.14
  br label %do.end

do.end:                                           ; preds = %do.cond
  %33 = load i32, i32* %h.addr, align 4, !tbaa !5
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %34, i32 0, i32 14
  %35 = load i32, i32* %height, align 4, !tbaa !194
  %36 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub15 = sub nsw i32 %35, %36
  %cmp16 = icmp sgt i32 %33, %sub15
  br i1 %cmp16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %do.end
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height18 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 14
  %38 = load i32, i32* %height18, align 4, !tbaa !194
  %39 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub19 = sub nsw i32 %38, %39
  store i32 %sub19, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %do.end
  %40 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp21 = icmp sle i32 %40, 0
  br i1 %cmp21, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.20
  %41 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp22 = icmp sle i32 %41, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %lor.lhs.false, %if.end.20
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.24:                                        ; preds = %lor.lhs.false
  br label %do.cond.25

do.cond.25:                                       ; preds = %if.end.24
  br label %do.end.26

do.end.26:                                        ; preds = %do.cond.25
  %42 = load i8*, i8** %base.addr, align 8, !tbaa !1
  %43 = load i32, i32* %sourcex.addr, align 4, !tbaa !5
  %shr = ashr i32 %43, 3
  %idx.ext27 = sext i32 %shr to i64
  %add.ptr28 = getelementptr inbounds i8, i8* %42, i64 %idx.ext27
  store i8* %add.ptr28, i8** %line, align 8, !tbaa !1
  %44 = load i32, i32* %sourcex.addr, align 4, !tbaa !5
  %and = and i32 %44, 7
  store i32 %and, i32* %sbit, align 4, !tbaa !5
  %45 = load i32, i32* %sbit, align 4, !tbaa !5
  %sub29 = sub nsw i32 7, %45
  store i32 %sub29, i32* %first_bit, align 4, !tbaa !5
  br label %while.cond

while.cond:                                       ; preds = %if.end.76, %do.end.26
  %46 = load i32, i32* %h.addr, align 4, !tbaa !5
  %dec = add nsw i32 %46, -1
  store i32 %dec, i32* %h.addr, align 4, !tbaa !5
  %cmp30 = icmp sgt i32 %46, 0
  br i1 %cmp30, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %47 = load i8*, i8** %line, align 8, !tbaa !1
  store i8* %47, i8** %sptr, align 8, !tbaa !1
  %48 = load i8*, i8** %sptr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr, i8** %sptr, align 8, !tbaa !1
  %49 = load i8, i8* %48, align 1, !tbaa !66
  %conv = zext i8 %49 to i32
  store i32 %conv, i32* %sbyte, align 4, !tbaa !5
  %50 = load i32, i32* %first_bit, align 4, !tbaa !5
  store i32 %50, i32* %bit, align 4, !tbaa !5
  %51 = load i32, i32* %w.addr, align 4, !tbaa !5
  store i32 %51, i32* %count, align 4, !tbaa !5
  store i32 0, i32* %run_length, align 4, !tbaa !5
  %52 = load i32, i32* %x.addr, align 4, !tbaa !5
  store i32 %52, i32* %startx, align 4, !tbaa !5
  store i32 0, i32* %current_bit, align 4, !tbaa !5
  %53 = load i64, i64* %zero.addr, align 8, !tbaa !68
  store i64 %53, i64* %current_color, align 8, !tbaa !68
  br label %do.body.31

do.body.31:                                       ; preds = %do.cond.59, %while.body
  %54 = load i32, i32* %sbyte, align 4, !tbaa !5
  %55 = load i32, i32* %bit, align 4, !tbaa !5
  %shr32 = ashr i32 %54, %55
  %and33 = and i32 %shr32, 1
  store i32 %and33, i32* %bit_value, align 4, !tbaa !5
  %56 = load i32, i32* %bit_value, align 4, !tbaa !5
  %57 = load i32, i32* %current_bit, align 4, !tbaa !5
  %cmp34 = icmp eq i32 %56, %57
  br i1 %cmp34, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %do.body.31
  %58 = load i32, i32* %run_length, align 4, !tbaa !5
  %inc = add nsw i32 %58, 1
  store i32 %inc, i32* %run_length, align 4, !tbaa !5
  br label %if.end.50

if.else:                                          ; preds = %do.body.31
  %59 = load i32, i32* %run_length, align 4, !tbaa !5
  %cmp37 = icmp ne i32 %59, 0
  br i1 %cmp37, label %if.then.39, label %if.end.49

if.then.39:                                       ; preds = %if.else
  %60 = load i64, i64* %current_color, align 8, !tbaa !68
  %cmp40 = icmp ne i64 %60, -1
  br i1 %cmp40, label %if.then.42, label %if.end.47

if.then.42:                                       ; preds = %if.then.39
  %61 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %61, i32 0, i32 42
  %fill_rectangle = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 7
  %62 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %fill_rectangle, align 8, !tbaa !70
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %64 = load i32, i32* %startx, align 4, !tbaa !5
  %65 = load i32, i32* %y.addr, align 4, !tbaa !5
  %66 = load i32, i32* %run_length, align 4, !tbaa !5
  %67 = load i64, i64* %current_color, align 8, !tbaa !68
  %call = call i32 %62(%struct.gx_device_s* %63, i32 %64, i32 %65, i32 %66, i32 1, i64 %67) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %68 = load i32, i32* %code, align 4, !tbaa !5
  %cmp43 = icmp slt i32 %68, 0
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.42
  %69 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %69, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.46:                                        ; preds = %if.then.42
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.39
  %70 = load i32, i32* %run_length, align 4, !tbaa !5
  %71 = load i32, i32* %startx, align 4, !tbaa !5
  %add48 = add nsw i32 %71, %70
  store i32 %add48, i32* %startx, align 4, !tbaa !5
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.47, %if.else
  store i32 1, i32* %run_length, align 4, !tbaa !5
  %72 = load i32, i32* %bit_value, align 4, !tbaa !5
  %tobool = icmp ne i32 %72, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.49
  %73 = load i64, i64* %one.addr, align 8, !tbaa !68
  br label %cond.end

cond.false:                                       ; preds = %if.end.49
  %74 = load i64, i64* %zero.addr, align 8, !tbaa !68
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %73, %cond.true ], [ %74, %cond.false ]
  store i64 %cond, i64* %current_color, align 8, !tbaa !68
  %75 = load i32, i32* %bit_value, align 4, !tbaa !5
  store i32 %75, i32* %current_bit, align 4, !tbaa !5
  br label %if.end.50

if.end.50:                                        ; preds = %cond.end, %if.then.36
  %76 = load i32, i32* %bit, align 4, !tbaa !5
  %cmp51 = icmp eq i32 %76, 0
  br i1 %cmp51, label %if.then.53, label %if.else.56

if.then.53:                                       ; preds = %if.end.50
  store i32 7, i32* %bit, align 4, !tbaa !5
  %77 = load i8*, i8** %sptr, align 8, !tbaa !1
  %incdec.ptr54 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr54, i8** %sptr, align 8, !tbaa !1
  %78 = load i8, i8* %77, align 1, !tbaa !66
  %conv55 = zext i8 %78 to i32
  store i32 %conv55, i32* %sbyte, align 4, !tbaa !5
  br label %if.end.58

if.else.56:                                       ; preds = %if.end.50
  %79 = load i32, i32* %bit, align 4, !tbaa !5
  %dec57 = add nsw i32 %79, -1
  store i32 %dec57, i32* %bit, align 4, !tbaa !5
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.56, %if.then.53
  br label %do.cond.59

do.cond.59:                                       ; preds = %if.end.58
  %80 = load i32, i32* %count, align 4, !tbaa !5
  %dec60 = add nsw i32 %80, -1
  store i32 %dec60, i32* %count, align 4, !tbaa !5
  %cmp61 = icmp sgt i32 %dec60, 0
  br i1 %cmp61, label %do.body.31, label %do.end.63

do.end.63:                                        ; preds = %do.cond.59
  %81 = load i32, i32* %run_length, align 4, !tbaa !5
  %cmp64 = icmp ne i32 %81, 0
  br i1 %cmp64, label %land.lhs.true, label %if.end.76

land.lhs.true:                                    ; preds = %do.end.63
  %82 = load i64, i64* %current_color, align 8, !tbaa !68
  %cmp66 = icmp ne i64 %82, -1
  br i1 %cmp66, label %if.then.68, label %if.end.76

if.then.68:                                       ; preds = %land.lhs.true
  %83 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs69 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %83, i32 0, i32 42
  %fill_rectangle70 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs69, i32 0, i32 7
  %84 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %fill_rectangle70, align 8, !tbaa !70
  %85 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %86 = load i32, i32* %startx, align 4, !tbaa !5
  %87 = load i32, i32* %y.addr, align 4, !tbaa !5
  %88 = load i32, i32* %run_length, align 4, !tbaa !5
  %89 = load i64, i64* %current_color, align 8, !tbaa !68
  %call71 = call i32 %84(%struct.gx_device_s* %85, i32 %86, i32 %87, i32 %88, i32 1, i64 %89) #7
  store i32 %call71, i32* %code, align 4, !tbaa !5
  %90 = load i32, i32* %code, align 4, !tbaa !5
  %cmp72 = icmp slt i32 %90, 0
  br i1 %cmp72, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.then.68
  %91 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %91, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.75:                                        ; preds = %if.then.68
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %land.lhs.true, %do.end.63
  %92 = load i32, i32* %sraster.addr, align 4, !tbaa !5
  %93 = load i8*, i8** %line, align 8, !tbaa !1
  %idx.ext77 = sext i32 %92 to i64
  %add.ptr78 = getelementptr inbounds i8, i8* %93, i64 %idx.ext77
  store i8* %add.ptr78, i8** %line, align 8, !tbaa !1
  %94 = load i32, i32* %y.addr, align 4, !tbaa !5
  %inc79 = add nsw i32 %94, 1
  store i32 %inc79, i32* %y.addr, align 4, !tbaa !5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then.74, %if.then.45, %if.then.23
  %95 = bitcast i64* %current_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  %96 = bitcast i32* %bit_value to i8*
  call void @llvm.lifetime.end(i64 4, i8* %96) #2
  %97 = bitcast i32* %current_bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %97) #2
  %98 = bitcast i32* %startx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %98) #2
  %99 = bitcast i32* %run_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %99) #2
  %100 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end(i64 4, i8* %100) #2
  %101 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %101) #2
  %102 = bitcast i32* %sbyte to i8*
  call void @llvm.lifetime.end(i64 4, i8* %102) #2
  %103 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %103) #2
  %104 = bitcast i32* %first_bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %104) #2
  %105 = bitcast i32* %sbit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %105) #2
  %106 = bitcast i8** %line to i8*
  call void @llvm.lifetime.end(i64 8, i8* %106) #2
  %107 = bitcast i8** %sptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %107) #2
  %108 = load i32, i32* %retval
  ret i32 %108
}

declare i32 @gx_forward_get_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_put_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %was_open = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast i32* %was_open to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %is_open = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 9
  %8 = load i32, i32* %is_open, align 4, !tbaa !199
  store i32 %8, i32* %was_open, align 4, !tbaa !5
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_s* %10, null
  br i1 %cmp, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %put_params = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 14
  %12 = load i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)** %put_params, align 8, !tbaa !81
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %14 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 %12(%struct.gx_device_s* %13, %struct.gs_param_list_s* %14) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %cmp1 = icmp sge i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end.9

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_decache_colors(%struct.gx_device_s* %15) #7
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %is_open2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 9
  %17 = load i32, i32* %is_open2, align 4, !tbaa !199
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.end.8, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call4 = call i32 @gs_closedevice(%struct.gx_device_s* %18) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %19, 0
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.3
  %20 = load i32, i32* %was_open, align 4, !tbaa !5
  %tobool7 = icmp ne i32 %20, 0
  %cond = select i1 %tobool7, i32 1, i32 0
  store i32 %cond, i32* %code, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then.3
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  call void @gs_pdf14_device_copy_params(%struct.gx_device_s* %21, %struct.gx_device_s* %22) #7
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %land.lhs.true, %entry
  %23 = load i32, i32* %code, align 4, !tbaa !5
  %24 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast i32* %was_open to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #2
  %27 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_copy_alpha(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %aa_raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color, i32 %depth) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %aa_raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %depth.addr = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %aa_raster, i32* %aa_raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !68
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %2 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %3 = load i32, i32* %aa_raster.addr, align 4, !tbaa !5
  %4 = load i64, i64* %id.addr, align 8, !tbaa !68
  %5 = load i32, i32* %x.addr, align 4, !tbaa !5
  %6 = load i32, i32* %y.addr, align 4, !tbaa !5
  %7 = load i32, i32* %w.addr, align 4, !tbaa !5
  %8 = load i32, i32* %h.addr, align 4, !tbaa !5
  %9 = load i64, i64* %color.addr, align 8, !tbaa !68
  %10 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %call = call i32 @pdf14_copy_alpha_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i64 %4, i32 %5, i32 %6, i32 %7, i32 %8, i64 %9, %struct.gx_device_color_s* null, i32 %10, i32 0) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_fill_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_fill_params_s* %params, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_fill_params_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %new_is = alloca %struct.gs_imager_state_s, align 8
  %code = alloca i32, align 4
  %pinst = alloca %struct.gs_pattern2_instance_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_fill_params_s* %params, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.start(i64 1616, i8* %0) #2
  %1 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  %3 = bitcast %struct.gs_imager_state_s* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 1616, i32 8, i1 false), !tbaa.struct !200
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store %struct.gs_pattern2_instance_s* null, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %6 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_color_s* %6, null
  br i1 %cmp, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s* %7) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call1 = call i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s* %8) #7
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call3 = call i32 @gx_pattern1_clist_has_trans(%struct.gx_device_color_s* %9) #7
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %lor.lhs.false, %if.then
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %11 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %12 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %14 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call6 = call i32 @pdf14_tile_pattern_fill(%struct.gx_device_s* %10, %struct.gs_imager_state_s* %new_is, %struct.gx_path_s* %11, %struct.gx_fill_params_s* %12, %struct.gx_device_color_s* %13, %struct.gx_clip_path_s* %14) #7
  store i32 %call6, i32* %code, align 4, !tbaa !5
  %trans_device = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device, align 8, !tbaa !201
  %has_transparency = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 0, i32* %has_transparency, align 4, !tbaa !202
  %15 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %land.lhs.true, %entry
  %16 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp8 = icmp ne %struct.gx_device_color_s* %16, null
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.16

land.lhs.true.9:                                  ; preds = %if.end.7
  %17 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call10 = call i32 @gx_dc_is_pattern2_color(%struct.gx_device_color_s* %17) #7
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.16

if.then.12:                                       ; preds = %land.lhs.true.9
  %18 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %ccolor = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %18, i32 0, i32 4
  %pattern = getelementptr inbounds %struct.gs_client_color_s, %struct.gs_client_color_s* %ccolor, i32 0, i32 0
  %19 = load %struct.gs_pattern_instance_s*, %struct.gs_pattern_instance_s** %pattern, align 8, !tbaa !203
  %20 = bitcast %struct.gs_pattern_instance_s* %19 to %struct.gs_pattern2_instance_s*
  store %struct.gs_pattern2_instance_s* %20, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %21 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %21, i32 0, i32 2
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %saved, align 8, !tbaa !209
  %has_transparency13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %22, i32 0, i32 19
  store i32 1, i32* %has_transparency13, align 4, !tbaa !213
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %24 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved14 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %24, i32 0, i32 2
  %25 = load %struct.gs_state_s*, %struct.gs_state_s** %saved14, align 8, !tbaa !209
  %trans_device15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %25, i32 0, i32 20
  store %struct.gx_device_s* %23, %struct.gx_device_s** %trans_device15, align 8, !tbaa !216
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.12, %land.lhs.true.9, %if.end.7
  %26 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @update_lop_for_pdf14(%struct.gs_imager_state_s* %new_is, %struct.gx_device_color_s* %26) #7
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %28 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %27, %struct.gs_imager_state_s* %28) #7
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %trans_device17 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* %29, %struct.gx_device_s** %trans_device17, align 8, !tbaa !201
  %has_transparency18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 1, i32* %has_transparency18, align 4, !tbaa !202
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %32 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %33 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %34 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call19 = call i32 @gx_default_fill_path(%struct.gx_device_s* %30, %struct.gs_imager_state_s* %new_is, %struct.gx_path_s* %31, %struct.gx_fill_params_s* %32, %struct.gx_device_color_s* %33, %struct.gx_clip_path_s* %34) #7
  store i32 %call19, i32* %code, align 4, !tbaa !5
  %trans_device20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device20, align 8, !tbaa !201
  %has_transparency21 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 0, i32* %has_transparency21, align 4, !tbaa !202
  %35 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %cmp22 = icmp ne %struct.gs_pattern2_instance_s* %35, null
  br i1 %cmp22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.16
  %36 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved24 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %36, i32 0, i32 2
  %37 = load %struct.gs_state_s*, %struct.gs_state_s** %saved24, align 8, !tbaa !209
  %trans_device25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %37, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device25, align 8, !tbaa !216
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.end.16
  %38 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %38, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.26, %if.then.5
  %39 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #2
  %40 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #2
  %41 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.end(i64 1616, i8* %41) #2
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_stroke_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_stroke_params_s* %params, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_stroke_params_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %new_is = alloca %struct.gs_imager_state_s, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_stroke_params_s* %params, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.start(i64 1616, i8* %0) #2
  %1 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  %3 = bitcast %struct.gs_imager_state_s* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 1616, i32 8, i1 false), !tbaa.struct !200
  %4 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @update_lop_for_pdf14(%struct.gs_imager_state_s* %new_is, %struct.gx_device_color_s* %4) #7
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %5, %struct.gs_imager_state_s* %6) #7
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %9 = load %struct.gx_stroke_params_s*, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  %10 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %11 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call = call i32 @gx_default_stroke_path(%struct.gx_device_s* %7, %struct.gs_imager_state_s* %new_is, %struct.gx_path_s* %8, %struct.gx_stroke_params_s* %9, %struct.gx_device_color_s* %10, %struct.gx_clip_path_s* %11) #7
  %12 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.end(i64 1616, i8* %12) #2
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_fill_mask(%struct.gx_device_s* %orig_dev, i8* %data, i32 %dx, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, %struct.gx_device_color_s* %pdcolor, i32 %depth, i32 %lop, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %orig_dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %dx.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %depth.addr = alloca i32, align 4
  %lop.addr = alloca i32, align 4
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %dev = alloca %struct.gx_device_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %cdev = alloca %struct.gx_device_clip_s, align 8
  %ptile = alloca %struct.gx_color_tile_s*, align 8
  %code = alloca i32, align 4
  %group_rect = alloca %struct.gs_int_rect_s, align 4
  %fill_trans_buffer = alloca %struct.gx_pattern_trans_s*, align 8
  %has_pattern_trans = alloca i32, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %orig_dev, %struct.gx_device_s** %orig_dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %dx, i32* %dx.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  store i32 %lop, i32* %lop.addr, align 4, !tbaa !5
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %orig_dev.addr, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s* %2 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %3, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_clip_s* %cdev to i8*
  call void @llvm.lifetime.start(i64 1856, i8* %4) #2
  %5 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store %struct.gx_color_tile_s* null, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %7 = bitcast %struct.gs_int_rect_s* %group_rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store %struct.gx_pattern_trans_s* null, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %9 = bitcast i32* %has_pattern_trans to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 0, i32* %has_pattern_trans, align 4, !tbaa !5
  %10 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_color_s* %11, null
  br i1 %cmp, label %land.lhs.true, label %if.end.44

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s* %12) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.44

if.then:                                          ; preds = %land.lhs.true
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call1 = call i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s* %13) #7
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.43

if.then.3:                                        ; preds = %if.then
  %14 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %14, i32 0, i32 1
  %pattern = bitcast %union._c* %colors to %struct._pat*
  %p_tile = getelementptr inbounds %struct._pat, %struct._pat* %pattern, i32 0, i32 0
  %15 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %15, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %16 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %16, i32 0, i32 9
  %17 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans, align 8, !tbaa !219
  %n_chan = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %17, i32 0, i32 7
  %18 = load i32, i32* %n_chan, align 4, !tbaa !39
  %sub = sub nsw i32 %18, 1
  %cmp4 = icmp slt i32 %sub, 4
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.3
  %19 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans6 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %19, i32 0, i32 9
  %20 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans6, align 8, !tbaa !219
  %blending_procs = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %20, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs, align 8, !tbaa !221
  %21 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans7 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %21, i32 0, i32 9
  %22 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans7, align 8, !tbaa !219
  %is_additive = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %22, i32 0, i32 12
  store i32 1, i32* %is_additive, align 4, !tbaa !222
  br label %if.end

if.else:                                          ; preds = %if.then.3
  %23 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans8 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %23, i32 0, i32 9
  %24 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans8, align 8, !tbaa !219
  %blending_procs9 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %24, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs9, align 8, !tbaa !221
  %25 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans10 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %25, i32 0, i32 9
  %26 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans10, align 8, !tbaa !219
  %is_additive11 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %26, i32 0, i32 12
  store i32 0, i32* %is_additive11, align 4, !tbaa !222
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  %27 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @gx_set_pattern_procs_trans(%struct.gx_device_color_s* %27) #7
  %28 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %has_overlap = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %28, i32 0, i32 12
  %29 = load i8, i8* %has_overlap, align 1, !tbaa !223
  %tobool12 = icmp ne i8 %29, 0
  br i1 %tobool12, label %if.then.13, label %if.else.15

if.then.13:                                       ; preds = %if.end
  %30 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans14 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %30, i32 0, i32 9
  %31 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans14, align 8, !tbaa !219
  %pat_trans_fill = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %31, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_blend, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill, align 8, !tbaa !224
  br label %if.end.18

if.else.15:                                       ; preds = %if.end
  %32 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans16 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %32, i32 0, i32 9
  %33 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans16, align 8, !tbaa !219
  %pat_trans_fill17 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %33, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_simple, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill17, align 8, !tbaa !224
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.13
  %34 = load i32, i32* %x.addr, align 4, !tbaa !5
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %group_rect, i32 0, i32 0
  %x19 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  store i32 %34, i32* %x19, align 4, !tbaa !34
  %35 = load i32, i32* %y.addr, align 4, !tbaa !5
  %cmp20 = icmp sgt i32 0, %35
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  br label %cond.end

cond.false:                                       ; preds = %if.end.18
  %36 = load i32, i32* %y.addr, align 4, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %36, %cond.false ]
  %p21 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %group_rect, i32 0, i32 0
  %y22 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p21, i32 0, i32 1
  store i32 %cond, i32* %y22, align 4, !tbaa !35
  %37 = load i32, i32* %x.addr, align 4, !tbaa !5
  %38 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %37, %38
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %group_rect, i32 0, i32 1
  %x23 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  store i32 %add, i32* %x23, align 4, !tbaa !31
  %39 = load i32, i32* %y.addr, align 4, !tbaa !5
  %40 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add24 = add nsw i32 %39, %40
  %q25 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %group_rect, i32 0, i32 1
  %y26 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q25, i32 0, i32 1
  store i32 %add24, i32* %y26, align 4, !tbaa !33
  %41 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp27 = icmp sle i32 %41, 0
  br i1 %cmp27, label %if.end.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %42 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp28 = icmp sle i32 %42, 0
  br i1 %cmp28, label %if.end.42, label %if.then.29

if.then.29:                                       ; preds = %lor.lhs.false
  %43 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %43, i32 0, i32 47
  %44 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %45 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans30 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %45, i32 0, i32 9
  %46 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans30, align 8, !tbaa !219
  %blending_mode = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %46, i32 0, i32 13
  %47 = load i32, i32* %blending_mode, align 4, !tbaa !49
  %48 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans31 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %48, i32 0, i32 9
  %49 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans31, align 8, !tbaa !219
  %n_chan32 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %49, i32 0, i32 7
  %50 = load i32, i32* %n_chan32, align 4, !tbaa !39
  %sub33 = sub nsw i32 %50, 1
  %call34 = call i32 @pdf14_push_transparency_group(%struct.pdf14_ctx_s* %44, %struct.gs_int_rect_s* %group_rect, i32 1, i32 0, i8 zeroext -1, i8 zeroext -1, i32 %47, i32 0, i32 0, i32 %sub33, i32 0, %struct.cmm_profile_s* null, %struct.cmm_profile_s* null, %struct.gs_imager_state_s* null, %struct.gx_device_s* null) #7
  store i32 %call34, i32* %code, align 4, !tbaa !5
  %51 = load i32, i32* %code, align 4, !tbaa !5
  %cmp35 = icmp slt i32 %51, 0
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.then.29
  %52 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %52, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.37:                                        ; preds = %if.then.29
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 3
  %54 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  %call38 = call %struct.gx_pattern_trans_s* @new_pattern_trans_buff(%struct.gs_memory_s* %54) #7
  store %struct.gx_pattern_trans_s* %call38, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %56 = bitcast %struct.pdf14_device_s* %55 to %struct.gx_device_s*
  %57 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %call39 = call i32 @pdf14_get_buffer_information(%struct.gx_device_s* %56, %struct.gx_pattern_trans_s* %57, %struct.gs_memory_s* null, i32 0) #7
  %58 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %59 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans40 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %59, i32 0, i32 9
  %60 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans40, align 8, !tbaa !219
  %fill_trans_buffer41 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %60, i32 0, i32 3
  store %struct.gx_pattern_trans_s* %58, %struct.gx_pattern_trans_s** %fill_trans_buffer41, align 8, !tbaa !226
  store i32 1, i32* %has_pattern_trans, align 4, !tbaa !5
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.37, %lor.lhs.false, %cond.end
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true, %entry
  %61 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %cmp45 = icmp ne %struct.gx_clip_path_s* %61, null
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %if.end.44
  %62 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %orig_dev.addr, align 8, !tbaa !1
  call void @gx_make_clip_device_on_stack(%struct.gx_device_clip_s* %cdev, %struct.gx_clip_path_s* %62, %struct.gx_device_s* %63) #7
  %64 = bitcast %struct.gx_device_clip_s* %cdev to %struct.gx_device_s*
  store %struct.gx_device_s* %64, %struct.gx_device_s** %dev, align 8, !tbaa !1
  br label %if.end.48

if.else.47:                                       ; preds = %if.end.44
  %65 = load %struct.gx_device_s*, %struct.gx_device_s** %orig_dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %65, %struct.gx_device_s** %dev, align 8, !tbaa !1
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.47, %if.then.46
  %66 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %cmp49 = icmp sgt i32 %66, 1
  br i1 %cmp49, label %if.then.50, label %if.else.53

if.then.50:                                       ; preds = %if.end.48
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %67, i32 0, i32 42
  %copy_alpha = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 21
  %68 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)** %copy_alpha, align 8, !tbaa !77
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %70 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %71 = load i32, i32* %dx.addr, align 4, !tbaa !5
  %72 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %73 = load i64, i64* %id.addr, align 8, !tbaa !68
  %74 = load i32, i32* %x.addr, align 4, !tbaa !5
  %75 = load i32, i32* %y.addr, align 4, !tbaa !5
  %76 = load i32, i32* %w.addr, align 4, !tbaa !5
  %77 = load i32, i32* %h.addr, align 4, !tbaa !5
  %78 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors51 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %78, i32 0, i32 1
  %pure = bitcast %union._c* %colors51 to i64*
  %79 = load i64, i64* %pure, align 8, !tbaa !68
  %80 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %call52 = call i32 %68(%struct.gx_device_s* %69, i8* %70, i32 %71, i32 %72, i64 %73, i32 %74, i32 %75, i32 %76, i32 %77, i64 %79, i32 %80) #7
  store i32 %call52, i32* %code, align 4, !tbaa !5
  br label %if.end.55

if.else.53:                                       ; preds = %if.end.48
  %81 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %81, i32 0, i32 0
  %82 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  %fill_masked = getelementptr inbounds %struct.gx_device_color_type_s, %struct.gx_device_color_type_s* %82, i32 0, i32 6
  %83 = load i32 (%struct.gx_device_color_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_color_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)** %fill_masked, align 8, !tbaa !228
  %84 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %85 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %86 = load i32, i32* %dx.addr, align 4, !tbaa !5
  %87 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %88 = load i64, i64* %id.addr, align 8, !tbaa !68
  %89 = load i32, i32* %x.addr, align 4, !tbaa !5
  %90 = load i32, i32* %y.addr, align 4, !tbaa !5
  %91 = load i32, i32* %w.addr, align 4, !tbaa !5
  %92 = load i32, i32* %h.addr, align 4, !tbaa !5
  %93 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %94 = load i32, i32* %lop.addr, align 4, !tbaa !5
  %call54 = call i32 %83(%struct.gx_device_color_s* %84, i8* %85, i32 %86, i32 %87, i64 %88, i32 %89, i32 %90, i32 %91, i32 %92, %struct.gx_device_s* %93, i32 %94, i32 0) #7
  store i32 %call54, i32* %code, align 4, !tbaa !5
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.53, %if.then.50
  %95 = load i32, i32* %has_pattern_trans, align 4, !tbaa !5
  %tobool56 = icmp ne i32 %95, 0
  br i1 %tobool56, label %if.then.57, label %if.end.75

if.then.57:                                       ; preds = %if.end.55
  %96 = load i32, i32* %code, align 4, !tbaa !5
  %cmp58 = icmp sge i32 %96, 0
  br i1 %cmp58, label %if.then.59, label %if.end.62

if.then.59:                                       ; preds = %if.then.57
  %97 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %procs60 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %97, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs60, i32 0, i32 67
  %98 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %99 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %call61 = call i32 %98(%struct.gx_device_s* %99, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call61, i32* %code, align 4, !tbaa !5
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.59, %if.then.57
  %100 = load i32, i32* %code, align 4, !tbaa !5
  %cmp63 = icmp sge i32 %100, 0
  br i1 %cmp63, label %if.then.64, label %if.end.67

if.then.64:                                       ; preds = %if.end.62
  %101 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx65 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %101, i32 0, i32 47
  %102 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx65, align 8, !tbaa !7
  %103 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %103, i32 0, i32 46
  %104 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %105 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %105, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %106 = load i32, i32* %num_components, align 4, !tbaa !150
  %107 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %107, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %108 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %109 = load %struct.gx_device_s*, %struct.gx_device_s** %orig_dev.addr, align 8, !tbaa !1
  %call66 = call i32 @pdf14_pop_transparency_group(%struct.gs_imager_state_s* null, %struct.pdf14_ctx_s* %102, %struct.pdf14_nonseparable_blending_procs_s* %104, i32 %106, %struct.cmm_profile_s* %108, %struct.gx_device_s* %109) #7
  store i32 %call66, i32* %code, align 4, !tbaa !5
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %if.end.62
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %memory68 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %110, i32 0, i32 3
  %111 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory68, align 8, !tbaa !225
  %procs69 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %111, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs69, i32 0, i32 2
  %112 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %113 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %memory70 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %113, i32 0, i32 3
  %114 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory70, align 8, !tbaa !225
  %115 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans71 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %115, i32 0, i32 9
  %116 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans71, align 8, !tbaa !219
  %fill_trans_buffer72 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %116, i32 0, i32 3
  %117 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer72, align 8, !tbaa !226
  %118 = bitcast %struct.gx_pattern_trans_s* %117 to i8*
  call void %112(%struct.gs_memory_s* %114, i8* %118, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i32 0, i32 0)) #7
  %119 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans73 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %119, i32 0, i32 9
  %120 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans73, align 8, !tbaa !219
  %fill_trans_buffer74 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %120, i32 0, i32 3
  store %struct.gx_pattern_trans_s* null, %struct.gx_pattern_trans_s** %fill_trans_buffer74, align 8, !tbaa !226
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.67, %if.end.55
  %121 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %121, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.75, %if.then.36
  %122 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %122) #2
  %123 = bitcast i32* %has_pattern_trans to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #2
  %124 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %124) #2
  %125 = bitcast %struct.gs_int_rect_s* %group_rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %125) #2
  %126 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %126) #2
  %127 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %127) #2
  %128 = bitcast %struct.gx_device_clip_s* %cdev to i8*
  call void @llvm.lifetime.end(i64 1856, i8* %128) #2
  %129 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %129) #2
  %130 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %130) #2
  %131 = load i32, i32* %retval
  ret i32 %131
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_begin_typed_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_matrix_s* %pmat, %struct.gs_image_common_s* %pic, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gx_image_enum_common_s** %pinfo) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pic.addr = alloca %struct.gs_image_common_s*, align 8
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %pim = alloca %struct.gs_image1_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  store %struct.gs_image_common_s* %pic, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_image_common_s* %1 to %struct.gs_image1_s*
  store %struct.gs_image1_s* %2, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %ImageMask = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %4, i32 0, i32 10
  %5 = load i32, i32* %ImageMask, align 4, !tbaa !231
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %6 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_color_s* %6, null
  br i1 %cmp, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s* %7) #7
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then.2, label %if.end.10

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call3 = call i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s* %8) #7
  %cmp4 = icmp ne i8* %call3, null
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.then.2
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 42
  %begin_image = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 31
  %10 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)** %begin_image, align 8, !tbaa !233
  %cmp6 = icmp ne i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* %10, @gx_default_begin_image
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.5
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %13 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %14 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %15 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %16 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %17 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %18 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %19 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call8 = call i32 @pdf14_patt_trans_image_fill(%struct.gx_device_s* %11, %struct.gs_imager_state_s* %12, %struct.gs_matrix_s* %13, %struct.gs_image_common_s* %14, %struct.gs_int_rect_s* %15, %struct.gx_device_color_s* %16, %struct.gx_clip_path_s* %17, %struct.gs_memory_s* %18, %struct.gx_image_enum_common_s** %19) #7
  store i32 %call8, i32* %code, align 4, !tbaa !5
  %20 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %20, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then.5
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %land.lhs.true, %if.then
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %21, %struct.gs_imager_state_s* %22) #7
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %24 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %25 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %26 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %27 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %28 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %29 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %30 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %31 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call12 = call i32 @gx_default_begin_typed_image(%struct.gx_device_s* %23, %struct.gs_imager_state_s* %24, %struct.gs_matrix_s* %25, %struct.gs_image_common_s* %26, %struct.gs_int_rect_s* %27, %struct.gx_device_color_s* %28, %struct.gx_clip_path_s* %29, %struct.gs_memory_s* %30, %struct.gx_image_enum_common_s** %31) #7
  store i32 %call12, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.11, %if.then.7
  %32 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %32) #2
  %33 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #2
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_create_compositor(%struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_composite_s* %pct, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem, %struct.gx_device_s* %cdev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cdev.addr = alloca %struct.gx_device_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  %op_pct = alloca %struct.gs_overprint_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %cdev, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %3 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %call = call i32 @gs_is_pdf14trans_compositor(%struct.gs_composite_s* %3) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %6 = bitcast %struct.gs_composite_s* %5 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %6, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %8 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %7, %struct.gx_device_s** %8, align 8, !tbaa !1
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 58
  store %struct.gx_device_s* %9, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %13 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %14 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call1 = call i32 @gx_update_pdf14_compositor(%struct.gx_device_s* %11, %struct.gs_imager_state_s* %12, %struct.gs_pdf14trans_s* %13, %struct.gs_memory_s* %14) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %15 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %15) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %16 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %call2 = call i32 @gs_is_overprint_compositor(%struct.gs_composite_s* %16) #7
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.else.15

if.then.4:                                        ; preds = %if.else
  %17 = bitcast %struct.gs_overprint_s** %op_pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %19 = bitcast %struct.gs_composite_s* %18 to %struct.gs_overprint_s*
  store %struct.gs_overprint_s* %19, %struct.gs_overprint_s** %op_pct, align 8, !tbaa !1
  %20 = load %struct.gs_overprint_s*, %struct.gs_overprint_s** %op_pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_overprint_s, %struct.gs_overprint_s* %20, i32 0, i32 5
  %blendspot = getelementptr inbounds %struct.gs_overprint_params_s, %struct.gs_overprint_params_s* %params, i32 0, i32 5
  %21 = load i32, i32* %blendspot, align 4, !tbaa !235
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blendspot5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 56
  store i32 %21, i32* %blendspot5, align 4, !tbaa !238
  %23 = load %struct.gs_overprint_s*, %struct.gs_overprint_s** %op_pct, align 8, !tbaa !1
  %params6 = getelementptr inbounds %struct.gs_overprint_s, %struct.gs_overprint_s* %23, i32 0, i32 5
  %retain_any_comps = getelementptr inbounds %struct.gs_overprint_params_s, %struct.gs_overprint_params_s* %params6, i32 0, i32 0
  %24 = load i32, i32* %retain_any_comps, align 4, !tbaa !239
  %tobool7 = icmp ne i32 %24, 0
  br i1 %tobool7, label %land.lhs.true, label %if.else.13

land.lhs.true:                                    ; preds = %if.then.4
  %25 = load %struct.gs_overprint_s*, %struct.gs_overprint_s** %op_pct, align 8, !tbaa !1
  %params8 = getelementptr inbounds %struct.gs_overprint_s, %struct.gs_overprint_s* %25, i32 0, i32 5
  %retain_spot_comps = getelementptr inbounds %struct.gs_overprint_params_s, %struct.gs_overprint_params_s* %params8, i32 0, i32 1
  %26 = load i32, i32* %retain_spot_comps, align 4, !tbaa !240
  %tobool9 = icmp ne i32 %26, 0
  br i1 %tobool9, label %if.else.13, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true
  %27 = load %struct.gs_overprint_s*, %struct.gs_overprint_s** %op_pct, align 8, !tbaa !1
  %params11 = getelementptr inbounds %struct.gs_overprint_s, %struct.gs_overprint_s* %27, i32 0, i32 5
  %drawn_comps = getelementptr inbounds %struct.gs_overprint_params_s, %struct.gs_overprint_params_s* %params11, i32 0, i32 3
  %28 = load i64, i64* %drawn_comps, align 8, !tbaa !241
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %drawn_comps12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 57
  store i64 %28, i64* %drawn_comps12, align 8, !tbaa !242
  br label %if.end

if.else.13:                                       ; preds = %land.lhs.true, %if.then.4
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %31 = load i32, i32* %num_components, align 4, !tbaa !150
  %sh_prom = zext i32 %31 to i64
  %shl = shl i64 1, %sh_prom
  %sub = sub i64 %shl, 1
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %drawn_comps14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %32, i32 0, i32 57
  store i64 %sub, i64* %drawn_comps14, align 8, !tbaa !242
  br label %if.end

if.end:                                           ; preds = %if.else.13, %if.then.10
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %34 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %33, %struct.gx_device_s** %34, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %35 = bitcast %struct.gs_overprint_s** %op_pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  br label %cleanup

if.else.15:                                       ; preds = %if.else
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %37 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %38 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %39 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %40 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call16 = call i32 @gx_no_create_compositor(%struct.gx_device_s* %36, %struct.gx_device_s** %37, %struct.gs_composite_s* %38, %struct.gs_imager_state_s* %39, %struct.gs_memory_s* %40, %struct.gx_device_s* %41) #7
  store i32 %call16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else.15, %if.end, %if.then
  %42 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #2
  %43 = load i32, i32* %retval
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_text_begin(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_text_params_s* %text, %struct.gs_font_s* %font, %struct.gx_path_s* %path, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %memory, %struct.gs_text_enum_s** %ppenum) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %text.addr = alloca %struct.gs_text_params_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %path.addr = alloca %struct.gx_path_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %ppenum.addr = alloca %struct.gs_text_enum_s**, align 8
  %code = alloca i32, align 4
  %penum = alloca %struct.gs_text_enum_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_text_params_s* %text, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %path, %struct.gx_path_s** %path.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s** %ppenum, %struct.gs_text_enum_s*** %ppenum.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct.gs_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %3 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %2, %struct.gs_imager_state_s* %3) #7
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %6 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %7 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %path.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %10 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %11 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call = call i32 @gx_default_text_begin(%struct.gx_device_s* %4, %struct.gs_imager_state_s* %5, %struct.gs_text_params_s* %6, %struct.gs_font_s* %7, %struct.gx_path_s* %8, %struct.gx_device_color_s* %9, %struct.gx_clip_path_s* %10, %struct.gs_memory_s* %11, %struct.gs_text_enum_s** %penum) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %12 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %13 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %14 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %penum, align 8, !tbaa !1
  %15 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppenum.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %14, %struct.gs_text_enum_s** %15, align 8, !tbaa !1
  %16 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast %struct.gs_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #2
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_begin_transparency_group(%struct.gx_device_s* %dev, %struct.gs_transparency_group_params_s* %ptgp, %struct.gs_rect_s* %pbbox, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %ptgp.addr = alloca %struct.gs_transparency_group_params_s*, align 8
  %pbbox.addr = alloca %struct.gs_rect_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %alpha = alloca double, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %code = alloca i32, align 4
  %isolated = alloca i32, align 4
  %sep_target = alloca i32, align 4
  %group_color_numcomps = alloca i32, align 4
  %group_color = alloca i32, align 4
  %group_profile = alloca %struct.cmm_profile_s*, align 8
  %tos_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cm_back_drop = alloca i32, align 4
  %new_icc = alloca i32, align 4
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp39 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pcrdev = alloca %struct.gx_device_clist_reader_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_transparency_group_params_s* %ptgp, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  store %struct.gs_rect_s* %pbbox, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast double* %alpha to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %4, i32 0, i32 13
  %alpha1 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %5 = load float, float* %alpha1, align 4, !tbaa !243
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 14
  %alpha2 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %7 = load float, float* %alpha2, align 4, !tbaa !244
  %mul = fmul float %5, %7
  %conv = fpext float %mul to double
  store double %conv, double* %alpha, align 8, !tbaa !171
  %8 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %isolated to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %Isolated = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %11, i32 0, i32 1
  %12 = load i32, i32* %Isolated, align 4, !tbaa !245
  store i32 %12, i32* %isolated, align 4, !tbaa !5
  %13 = bitcast i32* %sep_target to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %group_color_numcomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %group_color to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast %struct.cmm_profile_s** %group_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %17 = bitcast %struct.cmm_profile_s** %tos_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %18) #2
  %19 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = bitcast i32* %cm_back_drop to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  store i32 0, i32* %cm_back_drop, align 4, !tbaa !5
  %21 = bitcast i32* %new_icc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #2
  store i32 0, i32* %new_icc, align 4, !tbaa !5
  %22 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #2
  %23 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i64 1) to i64), i64 ptrtoint ([14 x i8]* @.str.5 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %call = call i64 @strlen(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)) #10
  store i64 %call, i64* %__s2_len, align 8, !tbaa !68
  %24 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp = icmp ult i64 %24, 4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %25 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #2
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 2
  %27 = load i8*, i8** %dname, align 8, !tbaa !247
  store i8* %27, i8** %__s1, align 8, !tbaa !1
  %28 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %29, i64 0
  %30 = load i8, i8* %arrayidx, align 1, !tbaa !66
  %conv6 = zext i8 %30 to i32
  %31 = load i8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), align 1, !tbaa !66
  %conv7 = zext i8 %31 to i32
  %sub = sub nsw i32 %conv6, %conv7
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %32 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp8 = icmp ugt i64 %32, 0
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.38

land.lhs.true.10:                                 ; preds = %cond.true
  %33 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp11 = icmp eq i32 %33, 0
  br i1 %cmp11, label %if.then, label %if.end.38

if.then:                                          ; preds = %land.lhs.true.10
  %34 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx13, align 1, !tbaa !66
  %conv14 = zext i8 %35 to i32
  %36 = load i8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i64 1), align 1, !tbaa !66
  %conv15 = zext i8 %36 to i32
  %sub16 = sub nsw i32 %conv14, %conv15
  store i32 %sub16, i32* %__result, align 4, !tbaa !5
  %37 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp17 = icmp ugt i64 %37, 1
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.37

land.lhs.true.19:                                 ; preds = %if.then
  %38 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp20 = icmp eq i32 %38, 0
  br i1 %cmp20, label %if.then.22, label %if.end.37

if.then.22:                                       ; preds = %land.lhs.true.19
  %39 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx23 = getelementptr inbounds i8, i8* %39, i64 2
  %40 = load i8, i8* %arrayidx23, align 1, !tbaa !66
  %conv24 = zext i8 %40 to i32
  %41 = load i8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i64 2), align 1, !tbaa !66
  %conv25 = zext i8 %41 to i32
  %sub26 = sub nsw i32 %conv24, %conv25
  store i32 %sub26, i32* %__result, align 4, !tbaa !5
  %42 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp27 = icmp ugt i64 %42, 2
  br i1 %cmp27, label %land.lhs.true.29, label %if.end

land.lhs.true.29:                                 ; preds = %if.then.22
  %43 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp30 = icmp eq i32 %43, 0
  br i1 %cmp30, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %land.lhs.true.29
  %44 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx33 = getelementptr inbounds i8, i8* %44, i64 3
  %45 = load i8, i8* %arrayidx33, align 1, !tbaa !66
  %conv34 = zext i8 %45 to i32
  %46 = load i8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i64 3), align 1, !tbaa !66
  %conv35 = zext i8 %46 to i32
  %sub36 = sub nsw i32 %conv34, %conv35
  store i32 %sub36, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.32, %land.lhs.true.29, %if.then.22
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %land.lhs.true.19, %if.then
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %land.lhs.true.10, %cond.true
  %47 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %47, i32* %tmp39, !tbaa !5
  %48 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #2
  %49 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = load i32, i32* %tmp39, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %51 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname40 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %51, i32 0, i32 2
  %52 = load i8*, i8** %dname40, align 8, !tbaa !247
  %call41 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)) #8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.38
  %cond = phi i32 [ %50, %if.end.38 ], [ %call41, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %53 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #2
  %54 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #2
  %55 = load i32, i32* %tmp, !tbaa !5
  %cmp42 = icmp eq i32 %55, 0
  br i1 %cmp42, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %56, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 65
  %57 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call44 = call i32 %57(%struct.gx_device_s* %58, i32 11, i8* null, i32 0) #7
  %tobool = icmp ne i32 %call44, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %59 = phi i1 [ true, %cond.end ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %59 to i32
  store i32 %lor.ext, i32* %sep_target, align 4, !tbaa !5
  %60 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs45 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %60, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs45, i32 0, i32 67
  %61 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call46 = call i32 %61(%struct.gx_device_s* %62, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call46, i32* %code, align 4, !tbaa !5
  %63 = load i32, i32* %code, align 4, !tbaa !5
  %cmp47 = icmp slt i32 %63, 0
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %lor.end
  %64 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %64, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.165

if.end.50:                                        ; preds = %lor.end
  %65 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %65, %struct.cmm_profile_s** %tos_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  %66 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %67 = load %struct.gs_rect_s*, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  %68 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call51 = call i32 @compute_group_device_int_rect(%struct.pdf14_device_s* %66, %struct.gs_int_rect_s* %rect, %struct.gs_rect_s* %67, %struct.gs_imager_state_s* %68) #7
  store i32 %call51, i32* %code, align 4, !tbaa !5
  %69 = load i32, i32* %code, align 4, !tbaa !5
  %cmp52 = icmp slt i32 %69, 0
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.end.50
  %70 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %70, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.165

if.end.55:                                        ; preds = %if.end.50
  br label %do.body

do.body:                                          ; preds = %if.end.55
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %71 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %group_color56 = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %71, i32 0, i32 7
  %72 = load i32, i32* %group_color56, align 4, !tbaa !249
  %cmp57 = icmp eq i32 %72, 6
  br i1 %cmp57, label %if.then.59, label %if.else.71

if.then.59:                                       ; preds = %do.end
  %73 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %73, i32 0, i32 47
  %74 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %74, i32 0, i32 0
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %tobool60 = icmp ne %struct.pdf14_buf_s* %75, null
  br i1 %tobool60, label %if.then.61, label %if.else

if.then.61:                                       ; preds = %if.then.59
  %76 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx62 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %76, i32 0, i32 47
  %77 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx62, align 8, !tbaa !7
  %stack63 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %77, i32 0, i32 0
  %78 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack63, align 8, !tbaa !23
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %78, i32 0, i32 13
  %79 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub64 = sub nsw i32 %79, 1
  store i32 %sub64, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.65

if.else:                                          ; preds = %if.then.59
  %80 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %80, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %81 = load i32, i32* %num_components, align 4, !tbaa !150
  store i32 %81, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.65

if.end.65:                                        ; preds = %if.else, %if.then.61
  %82 = load i32, i32* %group_color_numcomps, align 4, !tbaa !5
  %cmp66 = icmp slt i32 %82, 5
  br i1 %cmp66, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %if.end.65
  store i32 5, i32* %group_color, align 4, !tbaa !66
  %83 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile, align 8, !tbaa !1
  store %struct.cmm_profile_s* %83, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  br label %if.end.70

if.else.69:                                       ; preds = %if.end.65
  store i32 4, i32* %group_color, align 4, !tbaa !66
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.69, %if.then.68
  br label %if.end.74

if.else.71:                                       ; preds = %do.end
  %84 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %group_color_numcomps72 = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %84, i32 0, i32 6
  %85 = load i32, i32* %group_color_numcomps72, align 4, !tbaa !250
  store i32 %85, i32* %group_color_numcomps, align 4, !tbaa !5
  %86 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %group_color73 = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %86, i32 0, i32 7
  %87 = load i32, i32* %group_color73, align 4, !tbaa !249
  store i32 %87, i32* %group_color, align 4, !tbaa !66
  %88 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %iccprofile = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %88, i32 0, i32 9
  %89 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile, align 8, !tbaa !251
  store %struct.cmm_profile_s* %89, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.end.70
  %90 = load i32, i32* %sep_target, align 4, !tbaa !5
  %tobool75 = icmp ne i32 %90, 0
  br i1 %tobool75, label %if.else.112, label %if.then.76

if.then.76:                                       ; preds = %if.end.74
  %91 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %cmp77 = icmp eq %struct.cmm_profile_s* %91, null
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.92

land.lhs.true.79:                                 ; preds = %if.then.76
  %92 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %92, i32 0, i32 58
  %93 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %cmp80 = icmp ne %struct.gx_device_s* %93, null
  br i1 %cmp80, label %if.then.82, label %if.end.92

if.then.82:                                       ; preds = %land.lhs.true.79
  %94 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %94) #2
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device84 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 58
  %96 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device84, align 8, !tbaa !234
  %97 = bitcast %struct.gx_device_s* %96 to %struct.gx_device_clist_reader_s*
  store %struct.gx_device_clist_reader_s* %97, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %98 = load %struct.gx_device_clist_reader_s*, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %99 = bitcast %struct.gx_device_clist_reader_s* %98 to %struct.gx_device_s*
  %100 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %icc_hashcode = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %100, i32 0, i32 8
  %101 = load i64, i64* %icc_hashcode, align 8, !tbaa !252
  %call85 = call %struct.cmm_profile_s* @gsicc_read_serial_icc(%struct.gx_device_s* %99, i64 %101) #7
  store %struct.cmm_profile_s* %call85, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %102 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %cmp86 = icmp eq %struct.cmm_profile_s* %102, null
  br i1 %cmp86, label %if.then.88, label %if.end.90

if.then.88:                                       ; preds = %if.then.82
  %call89 = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.pdf14_begin_transparency_group, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 3785, i32 0, i32 -1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48, i32 0, i32 0)) #7
  store i32 %call89, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.90:                                        ; preds = %if.then.82
  %103 = load %struct.gx_device_clist_reader_s*, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %104 = bitcast %struct.gx_device_clist_reader_s* %103 to %struct.gx_device_s*
  %105 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %dev91 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %105, i32 0, i32 15
  store %struct.gx_device_s* %104, %struct.gx_device_s** %dev91, align 8, !tbaa !160
  store i32 1, i32* %new_icc, align 4, !tbaa !5
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.90, %if.then.88
  %106 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %106) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.165 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.92

if.end.92:                                        ; preds = %cleanup.cont, %land.lhs.true.79, %if.then.76
  %107 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %cmp93 = icmp ne %struct.cmm_profile_s* %107, null
  br i1 %cmp93, label %if.then.95, label %if.end.106

if.then.95:                                       ; preds = %if.end.92
  %108 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %hash_is_valid = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %108, i32 0, i32 8
  %109 = load i32, i32* %hash_is_valid, align 4, !tbaa !253
  %tobool96 = icmp ne i32 %109, 0
  br i1 %tobool96, label %if.end.99, label %if.then.97

if.then.97:                                       ; preds = %if.then.95
  %110 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %buffer = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %110, i32 0, i32 14
  %111 = load i8*, i8** %buffer, align 8, !tbaa !254
  %112 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %112, i32 0, i32 7
  %113 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %buffer_size = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %113, i32 0, i32 11
  %114 = load i32, i32* %buffer_size, align 4, !tbaa !255
  call void @gsicc_get_icc_buff_hash(i8* %111, i64* %hashcode, i32 %114) #7
  %115 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %hash_is_valid98 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %115, i32 0, i32 8
  store i32 1, i32* %hash_is_valid98, align 4, !tbaa !253
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.97, %if.then.95
  %116 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %hashcode100 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %116, i32 0, i32 7
  %117 = load i64, i64* %hashcode100, align 8, !tbaa !121
  %118 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile, align 8, !tbaa !1
  %hashcode101 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %118, i32 0, i32 7
  %119 = load i64, i64* %hashcode101, align 8, !tbaa !121
  %cmp102 = icmp ne i64 %117, %119
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %if.end.99
  store i32 1, i32* %cm_back_drop, align 4, !tbaa !5
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.104, %if.end.99
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.end.92
  %120 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %121 = load i32, i32* %group_color, align 4, !tbaa !66
  %122 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %icc_hashcode107 = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %122, i32 0, i32 8
  %123 = load i64, i64* %icc_hashcode107, align 8, !tbaa !252
  %124 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %125 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %call108 = call i32 @pdf14_update_device_color_procs(%struct.gx_device_s* %120, i32 %121, i64 %123, %struct.gs_imager_state_s* %124, %struct.cmm_profile_s* %125) #7
  store i32 %call108, i32* %code, align 4, !tbaa !5
  br label %do.body.109

do.body.109:                                      ; preds = %if.end.106
  br label %do.cond.110

do.cond.110:                                      ; preds = %do.body.109
  br label %do.end.111

do.end.111:                                       ; preds = %do.cond.110
  br label %if.end.115

if.else.112:                                      ; preds = %if.end.74
  store i32 0, i32* %code, align 4, !tbaa !5
  %126 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info113 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %126, i32 0, i32 11
  %num_components114 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info113, i32 0, i32 1
  %127 = load i32, i32* %num_components114, align 4, !tbaa !150
  store i32 %127, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.112, %do.end.111
  %128 = load i32, i32* %code, align 4, !tbaa !5
  %cmp116 = icmp slt i32 %128, 0
  br i1 %cmp116, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.end.115
  %129 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %129, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.165

if.end.119:                                       ; preds = %if.end.115
  %130 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx120 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %130, i32 0, i32 47
  %131 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx120, align 8, !tbaa !7
  %132 = load i32, i32* %isolated, align 4, !tbaa !5
  %133 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %Knockout = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %133, i32 0, i32 2
  %134 = load i32, i32* %Knockout, align 4, !tbaa !256
  %135 = load double, double* %alpha, align 8, !tbaa !171
  %mul121 = fmul double 2.550000e+02, %135
  %add = fadd double %mul121, 5.000000e-01
  %call122 = call double @floor(double %add) #9
  %conv123 = fptoui double %call122 to i8
  %136 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape124 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %136, i32 0, i32 14
  %alpha125 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape124, i32 0, i32 0
  %137 = load float, float* %alpha125, align 4, !tbaa !244
  %mul126 = fmul float 2.550000e+02, %137
  %conv127 = fpext float %mul126 to double
  %add128 = fadd double %conv127, 5.000000e-01
  %call129 = call double @floor(double %add128) #9
  %conv130 = fptoui double %call129 to i8
  %138 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %138, i32 0, i32 12
  %139 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %140 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %idle = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %140, i32 0, i32 4
  %141 = load i32, i32* %idle, align 4, !tbaa !258
  %142 = load %struct.gs_transparency_group_params_s*, %struct.gs_transparency_group_params_s** %ptgp.addr, align 8, !tbaa !1
  %mask_id = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %142, i32 0, i32 5
  %143 = load i32, i32* %mask_id, align 4, !tbaa !259
  %144 = load i32, i32* %group_color_numcomps, align 4, !tbaa !5
  %145 = load i32, i32* %cm_back_drop, align 4, !tbaa !5
  %146 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %147 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile, align 8, !tbaa !1
  %148 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %149 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call131 = call i32 @pdf14_push_transparency_group(%struct.pdf14_ctx_s* %131, %struct.gs_int_rect_s* %rect, i32 %132, i32 %134, i8 zeroext %conv123, i8 zeroext %conv130, i32 %139, i32 %141, i32 %143, i32 %144, i32 %145, %struct.cmm_profile_s* %146, %struct.cmm_profile_s* %147, %struct.gs_imager_state_s* %148, %struct.gx_device_s* %149) #7
  store i32 %call131, i32* %code, align 4, !tbaa !5
  %150 = load i32, i32* %new_icc, align 4, !tbaa !5
  %tobool132 = icmp ne i32 %150, 0
  br i1 %tobool132, label %if.then.133, label %if.end.164

if.then.133:                                      ; preds = %if.end.119
  br label %do.body.134

do.body.134:                                      ; preds = %if.then.133
  %151 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %tobool135 = icmp ne %struct.cmm_profile_s* %151, null
  br i1 %tobool135, label %if.then.136, label %if.end.161

if.then.136:                                      ; preds = %do.body.134
  br label %do.body.137

do.body.137:                                      ; preds = %if.then.136
  br label %do.body.138

do.body.138:                                      ; preds = %do.body.137
  br label %do.cond.139

do.cond.139:                                      ; preds = %do.body.138
  br label %do.end.140

do.end.140:                                       ; preds = %do.cond.139
  %152 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %152, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %153 = load i64, i64* %ref_count, align 8, !tbaa !145
  %add141 = add nsw i64 %153, -1
  store i64 %add141, i64* %ref_count, align 8, !tbaa !145
  br label %do.cond.142

do.cond.142:                                      ; preds = %do.end.140
  br label %do.end.143

do.end.143:                                       ; preds = %do.cond.142
  %154 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc144 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %154, i32 0, i32 18
  %ref_count145 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc144, i32 0, i32 0
  %155 = load i64, i64* %ref_count145, align 8, !tbaa !145
  %tobool146 = icmp ne i64 %155, 0
  br i1 %tobool146, label %if.else.156, label %if.then.147

if.then.147:                                      ; preds = %do.end.143
  br label %do.body.148

do.body.148:                                      ; preds = %if.then.147
  br label %do.body.149

do.body.149:                                      ; preds = %do.body.148
  br label %do.cond.150

do.cond.150:                                      ; preds = %do.body.149
  br label %do.end.151

do.end.151:                                       ; preds = %do.cond.150
  %156 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc152 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %156, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc152, i32 0, i32 2
  %157 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %158 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc153 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %158, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc153, i32 0, i32 1
  %159 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %160 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %161 = bitcast %struct.cmm_profile_s* %160 to i8*
  call void %157(%struct.gs_memory_s* %159, i8* %161, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.pdf14_begin_transparency_group, i32 0, i32 0)) #7
  br label %do.cond.154

do.cond.154:                                      ; preds = %do.end.151
  br label %do.end.155

do.end.155:                                       ; preds = %do.cond.154
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  br label %if.end.160

if.else.156:                                      ; preds = %do.end.143
  br label %do.body.157

do.body.157:                                      ; preds = %if.else.156
  br label %do.cond.158

do.cond.158:                                      ; preds = %do.body.157
  br label %do.end.159

do.end.159:                                       ; preds = %do.cond.158
  br label %if.end.160

if.end.160:                                       ; preds = %do.end.159, %do.end.155
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %do.body.134
  br label %do.cond.162

do.cond.162:                                      ; preds = %if.end.161
  br label %do.end.163

do.end.163:                                       ; preds = %do.cond.162
  br label %if.end.164

if.end.164:                                       ; preds = %do.end.163, %if.end.119
  %162 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %162, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.165

cleanup.165:                                      ; preds = %if.end.164, %if.then.118, %cleanup, %if.then.54, %if.then.49
  %163 = bitcast i32* %new_icc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %163) #2
  %164 = bitcast i32* %cm_back_drop to i8*
  call void @llvm.lifetime.end(i64 4, i8* %164) #2
  %165 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %165) #2
  %166 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %166) #2
  %167 = bitcast %struct.cmm_profile_s** %tos_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %167) #2
  %168 = bitcast %struct.cmm_profile_s** %group_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %168) #2
  %169 = bitcast i32* %group_color to i8*
  call void @llvm.lifetime.end(i64 4, i8* %169) #2
  %170 = bitcast i32* %group_color_numcomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %170) #2
  %171 = bitcast i32* %sep_target to i8*
  call void @llvm.lifetime.end(i64 4, i8* %171) #2
  %172 = bitcast i32* %isolated to i8*
  call void @llvm.lifetime.end(i64 4, i8* %172) #2
  %173 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %173) #2
  %174 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %174) #2
  %175 = bitcast double* %alpha to i8*
  call void @llvm.lifetime.end(i64 8, i8* %175) #2
  %176 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %176) #2
  %177 = load i32, i32* %retval
  ret i32 %177
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_end_transparency_group(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %code = alloca i32, align 4
  %parent_color = alloca %struct.pdf14_parent_color_s*, align 8
  %group_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.cmm_profile_s** %group_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %6) #2
  %7 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %9 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 %9(%struct.gx_device_s* %10, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %11 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %12, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %13 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %13, %struct.cmm_profile_s** %group_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  br label %do.cond.2

do.cond.2:                                        ; preds = %do.body.1
  br label %do.end.3

do.end.3:                                         ; preds = %do.cond.2
  br label %do.body.4

do.body.4:                                        ; preds = %do.end.3
  br label %do.cond.5

do.cond.5:                                        ; preds = %do.body.4
  br label %do.end.6

do.end.6:                                         ; preds = %do.cond.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  br label %do.cond.8

do.cond.8:                                        ; preds = %do.body.7
  br label %do.end.9

do.end.9:                                         ; preds = %do.cond.8
  br label %do.body.10

do.body.10:                                       ; preds = %do.end.9
  br label %do.cond.11

do.cond.11:                                       ; preds = %do.body.10
  br label %do.end.12

do.end.12:                                        ; preds = %do.cond.11
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.12
  br label %do.cond.14

do.cond.14:                                       ; preds = %do.body.13
  br label %do.end.15

do.end.15:                                        ; preds = %do.cond.14
  %14 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 47
  %16 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 46
  %18 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %20 = load i32, i32* %num_components, align 4, !tbaa !150
  %21 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %23 = bitcast %struct.pdf14_device_s* %22 to %struct.gx_device_s*
  %call16 = call i32 @pdf14_pop_transparency_group(%struct.gs_imager_state_s* %14, %struct.pdf14_ctx_s* %16, %struct.pdf14_nonseparable_blending_procs_s* %18, i32 %20, %struct.cmm_profile_s* %21, %struct.gx_device_s* %23) #7
  store i32 %call16, i32* %code, align 4, !tbaa !5
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %24, i32 0, i32 47
  %25 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx17, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %25, i32 0, i32 0
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 22
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  store %struct.pdf14_parent_color_s* %27, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %28 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %28, i32 0, i32 9
  %29 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %cmp18 = icmp eq %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %29, null
  br i1 %cmp18, label %land.lhs.true, label %if.then.20

land.lhs.true:                                    ; preds = %do.end.15
  %30 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %30, i32 0, i32 12
  %31 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %cmp19 = icmp eq i32 (%struct.gx_device_s*, i8*, i32, i32)* %31, null
  br i1 %cmp19, label %if.end.122, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true, %do.end.15
  %32 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %32, i32 0, i32 8
  %33 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !264
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs21 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %34, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %33, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs21, align 8, !tbaa !265
  %35 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %35, %struct.gx_device_s* %36) #7
  %37 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs22 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %37, i32 0, i32 9
  %38 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs22, align 8, !tbaa !261
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs23 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %39, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs23, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %38, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %40 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index24 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %40, i32 0, i32 12
  %41 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index24, align 8, !tbaa !263
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs25, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %41, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %43 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %polarity = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %43, i32 0, i32 2
  %44 = load i32, i32* %polarity, align 4, !tbaa !268
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info26 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 11
  %polarity27 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info26, i32 0, i32 2
  store i32 %44, i32* %polarity27, align 4, !tbaa !196
  %46 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %num_components28 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %46, i32 0, i32 0
  %47 = load i32, i32* %num_components28, align 4, !tbaa !269
  %48 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info29 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %48, i32 0, i32 11
  %num_components30 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info29, i32 0, i32 1
  store i32 %47, i32* %num_components30, align 4, !tbaa !150
  %49 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %49, i32 0, i32 14
  %50 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %51 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs31 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %51, i32 0, i32 46
  store %struct.pdf14_nonseparable_blending_procs_s* %50, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs31, align 8, !tbaa !230
  %52 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %52, i32 0, i32 1
  %53 = load i32, i32* %isadditive, align 4, !tbaa !271
  %54 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx32 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %54, i32 0, i32 47
  %55 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx32, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %55, i32 0, i32 4
  store i32 %53, i32* %additive, align 4, !tbaa !272
  %56 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %unpack_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %56, i32 0, i32 13
  %57 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %unpack_procs, align 8, !tbaa !273
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 45
  store %struct.pdf14_procs_s* %57, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %59 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %depth = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %59, i32 0, i32 5
  %60 = load i8, i8* %depth, align 1, !tbaa !275
  %conv = zext i8 %60 to i16
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info33 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 11
  %depth34 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info33, i32 0, i32 3
  store i16 %conv, i16* %depth34, align 2, !tbaa !276
  %62 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_color = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %62, i32 0, i32 7
  %63 = load i32, i32* %max_color, align 4, !tbaa !277
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 11
  %max_color36 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info35, i32 0, i32 6
  store i32 %63, i32* %max_color36, align 4, !tbaa !278
  %65 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_gray = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %65, i32 0, i32 6
  %66 = load i32, i32* %max_gray, align 4, !tbaa !279
  %67 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info37 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %67, i32 0, i32 11
  %max_gray38 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info37, i32 0, i32 5
  store i32 %66, i32* %max_gray38, align 4, !tbaa !280
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info39 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 11
  %comp_bits = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info39, i32 0, i32 12
  %69 = bitcast [64 x i8]* %comp_bits to i8*
  %70 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_bits40 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %70, i32 0, i32 4
  %71 = bitcast [64 x i8]* %comp_bits40 to i8*
  %call41 = call i8* @memcpy(i8* %69, i8* %71, i64 64) #8
  %72 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info42 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %72, i32 0, i32 11
  %comp_shift = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info42, i32 0, i32 11
  %73 = bitcast [64 x i8]* %comp_shift to i8*
  %74 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_shift43 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %74, i32 0, i32 3
  %75 = bitcast [64 x i8]* %comp_shift43 to i8*
  %call44 = call i8* @memcpy(i8* %73, i8* %75, i64 64) #8
  %76 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %get_cmap_procs45 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %76, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs45, align 8, !tbaa !264
  %77 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index46 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %77, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index46, align 8, !tbaa !263
  %78 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs47 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %78, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs47, align 8, !tbaa !261
  %79 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %79, i32 0, i32 15
  %80 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %cmp48 = icmp ne %struct.cmm_profile_s* %80, null
  br i1 %cmp48, label %if.then.50, label %if.end.121

if.then.50:                                       ; preds = %if.then.20
  br label %do.body.51

do.body.51:                                       ; preds = %if.then.50
  %81 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %81, null
  br i1 %tobool, label %if.then.52, label %if.end.75

if.then.52:                                       ; preds = %do.body.51
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.body.53
  br label %do.cond.55

do.cond.55:                                       ; preds = %do.body.54
  br label %do.end.56

do.end.56:                                        ; preds = %do.cond.55
  %82 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %82, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %83 = load i64, i64* %ref_count, align 8, !tbaa !145
  %add = add nsw i64 %83, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !145
  br label %do.cond.57

do.cond.57:                                       ; preds = %do.end.56
  br label %do.end.58

do.end.58:                                        ; preds = %do.cond.57
  %84 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc59 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %84, i32 0, i32 18
  %ref_count60 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc59, i32 0, i32 0
  %85 = load i64, i64* %ref_count60, align 8, !tbaa !145
  %tobool61 = icmp ne i64 %85, 0
  br i1 %tobool61, label %if.else, label %if.then.62

if.then.62:                                       ; preds = %do.end.58
  br label %do.body.63

do.body.63:                                       ; preds = %if.then.62
  br label %do.body.64

do.body.64:                                       ; preds = %do.body.63
  br label %do.cond.65

do.cond.65:                                       ; preds = %do.body.64
  br label %do.end.66

do.end.66:                                        ; preds = %do.cond.65
  %86 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc67 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %86, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc67, i32 0, i32 2
  %87 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %88 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %rc68 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %88, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc68, i32 0, i32 1
  %89 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %90 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  %91 = bitcast %struct.cmm_profile_s* %90 to i8*
  call void %87(%struct.gs_memory_s* %89, i8* %91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i32 0, i32 0)) #7
  br label %do.cond.69

do.cond.69:                                       ; preds = %do.end.66
  br label %do.end.70

do.end.70:                                        ; preds = %do.cond.69
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %group_profile, align 8, !tbaa !1
  br label %if.end.74

if.else:                                          ; preds = %do.end.58
  br label %do.body.71

do.body.71:                                       ; preds = %if.else
  br label %do.cond.72

do.cond.72:                                       ; preds = %do.body.71
  br label %do.end.73

do.end.73:                                        ; preds = %do.cond.72
  br label %if.end.74

if.end.74:                                        ; preds = %do.end.73, %do.end.70
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %do.body.51
  br label %do.cond.76

do.cond.76:                                       ; preds = %if.end.75
  br label %do.end.77

do.end.77:                                        ; preds = %do.cond.76
  %92 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile78 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %92, i32 0, i32 15
  %93 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile78, align 8, !tbaa !281
  %94 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %94, i32 0, i32 39
  %95 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %95, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  store %struct.cmm_profile_s* %93, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.77
  %96 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile80 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %96, i32 0, i32 15
  %97 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile80, align 8, !tbaa !281
  %tobool81 = icmp ne %struct.cmm_profile_s* %97, null
  br i1 %tobool81, label %if.then.82, label %if.end.117

if.then.82:                                       ; preds = %do.body.79
  br label %do.body.83

do.body.83:                                       ; preds = %if.then.82
  br label %do.body.84

do.body.84:                                       ; preds = %do.body.83
  br label %do.cond.85

do.cond.85:                                       ; preds = %do.body.84
  br label %do.end.86

do.end.86:                                        ; preds = %do.cond.85
  %98 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile87 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %98, i32 0, i32 15
  %99 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile87, align 8, !tbaa !281
  %rc88 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %99, i32 0, i32 18
  %ref_count89 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc88, i32 0, i32 0
  %100 = load i64, i64* %ref_count89, align 8, !tbaa !145
  %add90 = add nsw i64 %100, -1
  store i64 %add90, i64* %ref_count89, align 8, !tbaa !145
  br label %do.cond.91

do.cond.91:                                       ; preds = %do.end.86
  br label %do.end.92

do.end.92:                                        ; preds = %do.cond.91
  %101 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile93 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %101, i32 0, i32 15
  %102 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile93, align 8, !tbaa !281
  %rc94 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %102, i32 0, i32 18
  %ref_count95 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc94, i32 0, i32 0
  %103 = load i64, i64* %ref_count95, align 8, !tbaa !145
  %tobool96 = icmp ne i64 %103, 0
  br i1 %tobool96, label %if.else.112, label %if.then.97

if.then.97:                                       ; preds = %do.end.92
  br label %do.body.98

do.body.98:                                       ; preds = %if.then.97
  br label %do.body.99

do.body.99:                                       ; preds = %do.body.98
  br label %do.cond.100

do.cond.100:                                      ; preds = %do.body.99
  br label %do.end.101

do.end.101:                                       ; preds = %do.cond.100
  %104 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile102 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %104, i32 0, i32 15
  %105 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile102, align 8, !tbaa !281
  %rc103 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %105, i32 0, i32 18
  %free104 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc103, i32 0, i32 2
  %106 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free104, align 8, !tbaa !146
  %107 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile105 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %107, i32 0, i32 15
  %108 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile105, align 8, !tbaa !281
  %rc106 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %108, i32 0, i32 18
  %memory107 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc106, i32 0, i32 1
  %109 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory107, align 8, !tbaa !147
  %110 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile108 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %110, i32 0, i32 15
  %111 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile108, align 8, !tbaa !281
  %112 = bitcast %struct.cmm_profile_s* %111 to i8*
  call void %106(%struct.gs_memory_s* %109, i8* %112, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i32 0, i32 0)) #7
  br label %do.cond.109

do.cond.109:                                      ; preds = %do.end.101
  br label %do.end.110

do.end.110:                                       ; preds = %do.cond.109
  %113 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile111 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %113, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile111, align 8, !tbaa !281
  br label %if.end.116

if.else.112:                                      ; preds = %do.end.92
  br label %do.body.113

do.body.113:                                      ; preds = %if.else.112
  br label %do.cond.114

do.cond.114:                                      ; preds = %do.body.113
  br label %do.end.115

do.end.115:                                       ; preds = %do.cond.114
  br label %if.end.116

if.end.116:                                       ; preds = %do.end.115, %do.end.110
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %do.body.79
  br label %do.cond.118

do.cond.118:                                      ; preds = %if.end.117
  br label %do.end.119

do.end.119:                                       ; preds = %do.cond.118
  %114 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile120 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %114, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile120, align 8, !tbaa !281
  br label %if.end.121

if.end.121:                                       ; preds = %do.end.119, %if.then.20
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %land.lhs.true
  br label %do.body.123

do.body.123:                                      ; preds = %if.end.122
  br label %do.cond.124

do.cond.124:                                      ; preds = %do.body.123
  br label %do.end.125

do.end.125:                                       ; preds = %do.cond.124
  %115 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %115, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.125, %if.then
  %116 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %116) #2
  %117 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %117) #2
  %118 = bitcast %struct.cmm_profile_s** %group_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %118) #2
  %119 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %119) #2
  %120 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %120) #2
  %121 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %121) #2
  %122 = load i32, i32* %retval
  ret i32 %122
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_begin_transparency_mask(%struct.gx_device_s* %dev, %struct.gx_transparency_mask_params_s* %ptmp, %struct.gs_rect_s* %pbbox, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %ptmp.addr = alloca %struct.gx_transparency_mask_params_s*, align 8
  %pbbox.addr = alloca %struct.gs_rect_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %bg_alpha = alloca i8, align 1
  %transfer_fn = alloca i8*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %code = alloca i32, align 4
  %group_color_numcomps = alloca i32, align 4
  %group_color = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_transparency_mask_params_s* %ptmp, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  store %struct.gs_rect_s* %pbbox, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 1, i8* %bg_alpha) #2
  store i8 0, i8* %bg_alpha, align 1, !tbaa !66
  %3 = bitcast i8** %transfer_fn to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %memory = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 2
  %6 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !283
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %6, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %7 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %8 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %8, i32 0, i32 47
  %9 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  %memory2 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %9, i32 0, i32 2
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory2, align 8, !tbaa !283
  %call = call i8* %7(%struct.gs_memory_s* %10, i32 256, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #7
  store i8* %call, i8** %transfer_fn, align 8, !tbaa !1
  %11 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %11) #2
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast i32* %group_color_numcomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %group_color to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = load i8*, i8** %transfer_fn, align 8, !tbaa !1
  %cmp = icmp eq i8* %15, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %17 = load %struct.gs_rect_s*, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call3 = call i32 @compute_group_device_int_rect(%struct.pdf14_device_s* %16, %struct.gs_int_rect_s* %rect, %struct.gs_rect_s* %17, %struct.gs_imager_state_s* %18) #7
  store i32 %call3, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %19, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %20 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %20, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %if.end
  %21 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %Background_components = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %21, i32 0, i32 3
  %22 = load i32, i32* %Background_components, align 4, !tbaa !284
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end.6
  %23 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %GrayBackground = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %23, i32 0, i32 5
  %24 = load float, float* %GrayBackground, align 4, !tbaa !286
  %mul = fmul float 2.550000e+02, %24
  %conv = fpext float %mul to double
  %add = fadd double %conv, 5.000000e-01
  %conv8 = fptosi double %add to i32
  %conv9 = trunc i32 %conv8 to i8
  store i8 %conv9, i8* %bg_alpha, align 1, !tbaa !66
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.end.6
  br label %do.body

do.body:                                          ; preds = %if.end.10
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %25 = load i8*, i8** %transfer_fn, align 8, !tbaa !1
  %26 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %transfer_fn11 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %26, i32 0, i32 10
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %transfer_fn11, i32 0, i32 0
  %call12 = call i8* @memcpy(i8* %25, i8* %arraydecay, i64 256) #8
  %27 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %group_color13 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %27, i32 0, i32 2
  %28 = load i32, i32* %group_color13, align 4, !tbaa !287
  %cmp14 = icmp eq i32 %28, 6
  br i1 %cmp14, label %if.then.16, label %if.else.25

if.then.16:                                       ; preds = %do.end
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 47
  %30 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx17, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %30, i32 0, i32 0
  %31 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %tobool18 = icmp ne %struct.pdf14_buf_s* %31, null
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.then.16
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx20 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %32, i32 0, i32 47
  %33 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx20, align 8, !tbaa !7
  %stack21 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %33, i32 0, i32 0
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack21, align 8, !tbaa !23
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 13
  %35 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub = sub nsw i32 %35, 1
  store i32 %sub, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.22

if.else:                                          ; preds = %if.then.16
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %37 = load i32, i32* %num_components, align 4, !tbaa !150
  store i32 %37, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.19
  %38 = load i32, i32* %group_color_numcomps, align 4, !tbaa !5
  switch i32 %38, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.23
    i32 4, label %sw.bb.24
  ]

sw.bb:                                            ; preds = %if.end.22
  store i32 0, i32* %group_color, align 4, !tbaa !66
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end.22
  store i32 1, i32* %group_color, align 4, !tbaa !66
  br label %sw.epilog

sw.bb.24:                                         ; preds = %if.end.22
  store i32 2, i32* %group_color, align 4, !tbaa !66
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.22
  store i32 4, i32* %group_color, align 4, !tbaa !66
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.24, %sw.bb.23, %sw.bb
  br label %if.end.28

if.else.25:                                       ; preds = %do.end
  %39 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %group_color26 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %39, i32 0, i32 2
  %40 = load i32, i32* %group_color26, align 4, !tbaa !287
  store i32 %40, i32* %group_color, align 4, !tbaa !66
  %41 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %group_color_numcomps27 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %41, i32 0, i32 1
  %42 = load i32, i32* %group_color_numcomps27, align 4, !tbaa !288
  store i32 %42, i32* %group_color_numcomps, align 4, !tbaa !5
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %sw.epilog
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %44 = load i32, i32* %group_color, align 4, !tbaa !66
  %45 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %icc_hashcode = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %45, i32 0, i32 11
  %46 = load i64, i64* %icc_hashcode, align 8, !tbaa !289
  %47 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %48 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %iccprofile = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %48, i32 0, i32 12
  %49 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile, align 8, !tbaa !290
  %call29 = call i32 @pdf14_update_device_color_procs(%struct.gx_device_s* %43, i32 %44, i64 %46, %struct.gs_imager_state_s* %47, %struct.cmm_profile_s* %49) #7
  store i32 %call29, i32* %code, align 4, !tbaa !5
  %50 = load i32, i32* %code, align 4, !tbaa !5
  %cmp30 = icmp slt i32 %50, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.28
  %51 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %51, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.33:                                        ; preds = %if.end.28
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx34 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 47
  %53 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx34, align 8, !tbaa !7
  %54 = load i8, i8* %bg_alpha, align 1, !tbaa !66
  %55 = load i8*, i8** %transfer_fn, align 8, !tbaa !1
  %56 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %idle = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %56, i32 0, i32 7
  %57 = load i32, i32* %idle, align 4, !tbaa !291
  %58 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %replacing = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %58, i32 0, i32 8
  %59 = load i32, i32* %replacing, align 4, !tbaa !292
  %60 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %mask_id = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %60, i32 0, i32 9
  %61 = load i32, i32* %mask_id, align 4, !tbaa !293
  %62 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %subtype = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %62, i32 0, i32 0
  %63 = load i32, i32* %subtype, align 4, !tbaa !294
  %64 = load i32, i32* %group_color_numcomps, align 4, !tbaa !5
  %65 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %Background_components35 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %65, i32 0, i32 3
  %66 = load i32, i32* %Background_components35, align 4, !tbaa !284
  %67 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %Background = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %67, i32 0, i32 4
  %arraydecay36 = getelementptr inbounds [64 x float], [64 x float]* %Background, i32 0, i32 0
  %68 = load %struct.gx_transparency_mask_params_s*, %struct.gx_transparency_mask_params_s** %ptmp.addr, align 8, !tbaa !1
  %GrayBackground37 = getelementptr inbounds %struct.gx_transparency_mask_params_s, %struct.gx_transparency_mask_params_s* %68, i32 0, i32 5
  %69 = load float, float* %GrayBackground37, align 4, !tbaa !286
  %call38 = call i32 @pdf14_push_transparency_mask(%struct.pdf14_ctx_s* %53, %struct.gs_int_rect_s* %rect, i8 zeroext %54, i8* %55, i32 %57, i32 %59, i32 %61, i32 %63, i32 %64, i32 %66, float* %arraydecay36, float %69) #7
  store i32 %call38, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.33, %if.then.32, %if.then.5, %if.then
  %70 = bitcast i32* %group_color to i8*
  call void @llvm.lifetime.end(i64 4, i8* %70) #2
  %71 = bitcast i32* %group_color_numcomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %71) #2
  %72 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %72) #2
  %73 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %73) #2
  %74 = bitcast i8** %transfer_fn to i8*
  call void @llvm.lifetime.end(i64 8, i8* %74) #2
  call void @llvm.lifetime.end(i64 1, i8* %bg_alpha) #2
  %75 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #2
  %76 = load i32, i32* %retval
  ret i32 %76
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_end_transparency_mask(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %parent_color = alloca %struct.pdf14_parent_color_s*, align 8
  %ok = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 47
  %6 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %7 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_pop_transparency_mask(%struct.pdf14_ctx_s* %6, %struct.gs_imager_state_s* %7, %struct.gx_device_s* %8) #7
  store i32 %call, i32* %ok, align 4, !tbaa !5
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 47
  %10 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %10, i32 0, i32 0
  %11 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %cmp = icmp ne %struct.pdf14_buf_s* %11, null
  br i1 %cmp, label %if.then, label %if.end.127

if.then:                                          ; preds = %do.end
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 47
  %13 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx2, align 8, !tbaa !7
  %stack3 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %13, i32 0, i32 0
  %14 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack3, align 8, !tbaa !23
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %14, i32 0, i32 22
  %15 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  store %struct.pdf14_parent_color_s* %15, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %16 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %16, i32 0, i32 9
  %17 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %cmp4 = icmp eq %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %17, null
  br i1 %cmp4, label %land.lhs.true, label %if.then.6

land.lhs.true:                                    ; preds = %if.then
  %18 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %18, i32 0, i32 12
  %19 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %cmp5 = icmp eq i32 (%struct.gx_device_s*, i8*, i32, i32)* %19, null
  br i1 %cmp5, label %if.end.126, label %if.then.6

if.then.6:                                        ; preds = %land.lhs.true, %if.then
  %20 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %20, i32 0, i32 8
  %21 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !264
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs7 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %22, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %21, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs7, align 8, !tbaa !265
  %23 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %23, %struct.gx_device_s* %24) #7
  %25 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs8 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %25, i32 0, i32 9
  %26 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs8, align 8, !tbaa !261
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %26, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %28 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index9 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %28, i32 0, i32 12
  %29 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index9, align 8, !tbaa !263
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %29, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %31 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %polarity = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %31, i32 0, i32 2
  %32 = load i32, i32* %polarity, align 4, !tbaa !268
  %33 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %33, i32 0, i32 11
  %polarity11 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 2
  store i32 %32, i32* %polarity11, align 4, !tbaa !196
  %34 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %num_components = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %34, i32 0, i32 0
  %35 = load i32, i32* %num_components, align 4, !tbaa !269
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 11
  %num_components13 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info12, i32 0, i32 1
  store i32 %35, i32* %num_components13, align 4, !tbaa !150
  %37 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %depth = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %37, i32 0, i32 5
  %38 = load i8, i8* %depth, align 1, !tbaa !275
  %conv = zext i8 %38 to i16
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %39, i32 0, i32 11
  %depth15 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info14, i32 0, i32 3
  store i16 %conv, i16* %depth15, align 2, !tbaa !276
  %40 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %40, i32 0, i32 14
  %41 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 46
  store %struct.pdf14_nonseparable_blending_procs_s* %41, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %43 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %43, i32 0, i32 1
  %44 = load i32, i32* %isadditive, align 4, !tbaa !271
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 47
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx16, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %46, i32 0, i32 4
  store i32 %44, i32* %additive, align 4, !tbaa !272
  %47 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %unpack_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %47, i32 0, i32 13
  %48 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %unpack_procs, align 8, !tbaa !273
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 45
  store %struct.pdf14_procs_s* %48, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %50 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_color = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %50, i32 0, i32 7
  %51 = load i32, i32* %max_color, align 4, !tbaa !277
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 11
  %max_color18 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info17, i32 0, i32 6
  store i32 %51, i32* %max_color18, align 4, !tbaa !278
  %53 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_gray = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %53, i32 0, i32 6
  %54 = load i32, i32* %max_gray, align 4, !tbaa !279
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info19 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 11
  %max_gray20 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info19, i32 0, i32 5
  store i32 %54, i32* %max_gray20, align 4, !tbaa !280
  %56 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %get_cmap_procs21 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %56, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs21, align 8, !tbaa !264
  %57 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index22 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %57, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index22, align 8, !tbaa !263
  %58 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs23 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %58, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs23, align 8, !tbaa !261
  %59 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %encode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %59, i32 0, i32 10
  %60 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode, align 8, !tbaa !295
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs24 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs24, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %60, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %62 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %decode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %62, i32 0, i32 11
  %63 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode, align 8, !tbaa !297
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs25, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %63, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !298
  %65 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info26 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %65, i32 0, i32 11
  %comp_bits = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info26, i32 0, i32 12
  %66 = bitcast [64 x i8]* %comp_bits to i8*
  %67 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_bits27 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %67, i32 0, i32 4
  %68 = bitcast [64 x i8]* %comp_bits27 to i8*
  %call28 = call i8* @memcpy(i8* %66, i8* %68, i64 64) #8
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info29 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 11
  %comp_shift = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info29, i32 0, i32 11
  %70 = bitcast [64 x i8]* %comp_shift to i8*
  %71 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_shift30 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %71, i32 0, i32 3
  %72 = bitcast [64 x i8]* %comp_shift30 to i8*
  %call31 = call i8* @memcpy(i8* %70, i8* %72, i64 64) #8
  %73 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %73, i32 0, i32 15
  %74 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %cmp32 = icmp ne %struct.cmm_profile_s* %74, null
  br i1 %cmp32, label %if.then.34, label %if.end.125

if.then.34:                                       ; preds = %if.then.6
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.34
  %75 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %75, i32 0, i32 39
  %76 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %76, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %77 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %77, null
  br i1 %tobool, label %if.then.36, label %if.end.76

if.then.36:                                       ; preds = %do.body.35
  br label %do.body.37

do.body.37:                                       ; preds = %if.then.36
  br label %do.body.38

do.body.38:                                       ; preds = %do.body.37
  br label %do.cond.39

do.cond.39:                                       ; preds = %do.body.38
  br label %do.end.40

do.end.40:                                        ; preds = %do.cond.39
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct41 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %78, i32 0, i32 39
  %79 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct41, align 8, !tbaa !282
  %device_profile42 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %79, i32 0, i32 0
  %arrayidx43 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile42, i32 0, i64 0
  %80 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx43, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %80, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %81 = load i64, i64* %ref_count, align 8, !tbaa !145
  %add = add nsw i64 %81, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !145
  br label %do.cond.44

do.cond.44:                                       ; preds = %do.end.40
  br label %do.end.45

do.end.45:                                        ; preds = %do.cond.44
  %82 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct46 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %82, i32 0, i32 39
  %83 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct46, align 8, !tbaa !282
  %device_profile47 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %83, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile47, i32 0, i64 0
  %84 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx48, align 8, !tbaa !1
  %rc49 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %84, i32 0, i32 18
  %ref_count50 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc49, i32 0, i32 0
  %85 = load i64, i64* %ref_count50, align 8, !tbaa !145
  %tobool51 = icmp ne i64 %85, 0
  br i1 %tobool51, label %if.else, label %if.then.52

if.then.52:                                       ; preds = %do.end.45
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.body.53
  br label %do.cond.55

do.cond.55:                                       ; preds = %do.body.54
  br label %do.end.56

do.end.56:                                        ; preds = %do.cond.55
  %86 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct57 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %86, i32 0, i32 39
  %87 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct57, align 8, !tbaa !282
  %device_profile58 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %87, i32 0, i32 0
  %arrayidx59 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile58, i32 0, i64 0
  %88 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx59, align 8, !tbaa !1
  %rc60 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %88, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc60, i32 0, i32 2
  %89 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %90 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct61 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %90, i32 0, i32 39
  %91 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct61, align 8, !tbaa !282
  %device_profile62 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %91, i32 0, i32 0
  %arrayidx63 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile62, i32 0, i64 0
  %92 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx63, align 8, !tbaa !1
  %rc64 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %92, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc64, i32 0, i32 1
  %93 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %94 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct65 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %94, i32 0, i32 39
  %95 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct65, align 8, !tbaa !282
  %device_profile66 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %95, i32 0, i32 0
  %arrayidx67 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile66, i32 0, i64 0
  %96 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx67, align 8, !tbaa !1
  %97 = bitcast %struct.cmm_profile_s* %96 to i8*
  call void %89(%struct.gs_memory_s* %93, i8* %97, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.51, i32 0, i32 0)) #7
  br label %do.cond.68

do.cond.68:                                       ; preds = %do.end.56
  br label %do.end.69

do.end.69:                                        ; preds = %do.cond.68
  %98 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct70 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %98, i32 0, i32 39
  %99 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct70, align 8, !tbaa !282
  %device_profile71 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %99, i32 0, i32 0
  %arrayidx72 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile71, i32 0, i64 0
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %arrayidx72, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %do.end.45
  br label %do.body.73

do.body.73:                                       ; preds = %if.else
  br label %do.cond.74

do.cond.74:                                       ; preds = %do.body.73
  br label %do.end.75

do.end.75:                                        ; preds = %do.cond.74
  br label %if.end

if.end:                                           ; preds = %do.end.75, %do.end.69
  br label %if.end.76

if.end.76:                                        ; preds = %if.end, %do.body.35
  br label %do.cond.77

do.cond.77:                                       ; preds = %if.end.76
  br label %do.end.78

do.end.78:                                        ; preds = %do.cond.77
  %100 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile79 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %100, i32 0, i32 15
  %101 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile79, align 8, !tbaa !281
  %102 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct80 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %102, i32 0, i32 39
  %103 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct80, align 8, !tbaa !282
  %device_profile81 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %103, i32 0, i32 0
  %arrayidx82 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile81, i32 0, i64 0
  store %struct.cmm_profile_s* %101, %struct.cmm_profile_s** %arrayidx82, align 8, !tbaa !1
  br label %do.body.83

do.body.83:                                       ; preds = %do.end.78
  %104 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile84 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %104, i32 0, i32 15
  %105 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile84, align 8, !tbaa !281
  %tobool85 = icmp ne %struct.cmm_profile_s* %105, null
  br i1 %tobool85, label %if.then.86, label %if.end.121

if.then.86:                                       ; preds = %do.body.83
  br label %do.body.87

do.body.87:                                       ; preds = %if.then.86
  br label %do.body.88

do.body.88:                                       ; preds = %do.body.87
  br label %do.cond.89

do.cond.89:                                       ; preds = %do.body.88
  br label %do.end.90

do.end.90:                                        ; preds = %do.cond.89
  %106 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile91 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %106, i32 0, i32 15
  %107 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile91, align 8, !tbaa !281
  %rc92 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %107, i32 0, i32 18
  %ref_count93 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc92, i32 0, i32 0
  %108 = load i64, i64* %ref_count93, align 8, !tbaa !145
  %add94 = add nsw i64 %108, -1
  store i64 %add94, i64* %ref_count93, align 8, !tbaa !145
  br label %do.cond.95

do.cond.95:                                       ; preds = %do.end.90
  br label %do.end.96

do.end.96:                                        ; preds = %do.cond.95
  %109 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile97 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %109, i32 0, i32 15
  %110 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile97, align 8, !tbaa !281
  %rc98 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %110, i32 0, i32 18
  %ref_count99 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc98, i32 0, i32 0
  %111 = load i64, i64* %ref_count99, align 8, !tbaa !145
  %tobool100 = icmp ne i64 %111, 0
  br i1 %tobool100, label %if.else.116, label %if.then.101

if.then.101:                                      ; preds = %do.end.96
  br label %do.body.102

do.body.102:                                      ; preds = %if.then.101
  br label %do.body.103

do.body.103:                                      ; preds = %do.body.102
  br label %do.cond.104

do.cond.104:                                      ; preds = %do.body.103
  br label %do.end.105

do.end.105:                                       ; preds = %do.cond.104
  %112 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile106 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %112, i32 0, i32 15
  %113 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile106, align 8, !tbaa !281
  %rc107 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %113, i32 0, i32 18
  %free108 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc107, i32 0, i32 2
  %114 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free108, align 8, !tbaa !146
  %115 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile109 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %115, i32 0, i32 15
  %116 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile109, align 8, !tbaa !281
  %rc110 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %116, i32 0, i32 18
  %memory111 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc110, i32 0, i32 1
  %117 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory111, align 8, !tbaa !147
  %118 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile112 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %118, i32 0, i32 15
  %119 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile112, align 8, !tbaa !281
  %120 = bitcast %struct.cmm_profile_s* %119 to i8*
  call void %114(%struct.gs_memory_s* %117, i8* %120, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.51, i32 0, i32 0)) #7
  br label %do.cond.113

do.cond.113:                                      ; preds = %do.end.105
  br label %do.end.114

do.end.114:                                       ; preds = %do.cond.113
  %121 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile115 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %121, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile115, align 8, !tbaa !281
  br label %if.end.120

if.else.116:                                      ; preds = %do.end.96
  br label %do.body.117

do.body.117:                                      ; preds = %if.else.116
  br label %do.cond.118

do.cond.118:                                      ; preds = %do.body.117
  br label %do.end.119

do.end.119:                                       ; preds = %do.cond.118
  br label %if.end.120

if.end.120:                                       ; preds = %do.end.119, %do.end.114
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %do.body.83
  br label %do.cond.122

do.cond.122:                                      ; preds = %if.end.121
  br label %do.end.123

do.end.123:                                       ; preds = %do.cond.122
  %122 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile124 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %122, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile124, align 8, !tbaa !281
  br label %if.end.125

if.end.125:                                       ; preds = %do.end.123, %if.then.6
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %land.lhs.true
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %do.end
  %123 = load i32, i32* %ok, align 4, !tbaa !5
  %124 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.end(i64 4, i8* %124) #2
  %125 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %125) #2
  %126 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %126) #2
  ret i32 %123
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_discard_trans_layer(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %ctx = alloca %struct.pdf14_ctx_s*, align 8
  %smaskcolor = alloca %struct.pdf14_smaskcolor_s*, align 8
  %group_procs = alloca %struct.pdf14_parent_color_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %next = alloca %struct.pdf14_buf_s*, align 8
  %procs12 = alloca %struct.pdf14_parent_color_s*, align 8
  %prev_procs = alloca %struct.pdf14_parent_color_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  store %struct.pdf14_ctx_s* %5, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_smaskcolor_s** %smaskcolor to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 48
  %8 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor2, align 8, !tbaa !299
  store %struct.pdf14_smaskcolor_s* %8, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %9 = bitcast %struct.pdf14_parent_color_s** %group_procs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 70
  %11 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  store %struct.pdf14_parent_color_s* %11, %struct.pdf14_parent_color_s** %group_procs, align 8, !tbaa !1
  %12 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf14_smaskcolor_s* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %ref_count = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %13, i32 0, i32 1
  store i32 1, i32* %ref_count, align 4, !tbaa !301
  %14 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_decrement_smask_color(%struct.gs_imager_state_s* %14, %struct.gx_device_s* %15) #7
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 48
  store %struct.pdf14_smaskcolor_s* null, %struct.pdf14_smaskcolor_s** %smaskcolor3, align 8, !tbaa !299
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %group_procs, align 8, !tbaa !1
  %cmp4 = icmp ne %struct.pdf14_parent_color_s* %17, null
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.5
  %18 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %group_procs, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %18, i32 0, i32 16
  %19 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %previous, align 8, !tbaa !303
  %cmp6 = icmp ne %struct.pdf14_parent_color_s* %19, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %21 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_pop_parent_color(%struct.gx_device_s* %20, %struct.gs_imager_state_s* %21) #7
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 3
  %23 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %23, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %24 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory7 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 3
  %26 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory7, align 8, !tbaa !60
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %group_procs, align 8, !tbaa !1
  %28 = bitcast %struct.pdf14_parent_color_s* %27 to i8*
  call void %24(%struct.gs_memory_s* %26, i8* %28, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs8 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 70
  store %struct.pdf14_parent_color_s* null, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs8, align 8, !tbaa !300
  br label %if.end.9

if.end.9:                                         ; preds = %while.end, %if.end
  %30 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %cmp10 = icmp ne %struct.pdf14_ctx_s* %30, null
  br i1 %cmp10, label %if.then.11, label %if.end.60

if.then.11:                                       ; preds = %if.end.9
  %31 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #2
  %32 = bitcast %struct.pdf14_buf_s** %next to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #2
  %33 = bitcast %struct.pdf14_parent_color_s** %procs12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %33) #2
  %34 = bitcast %struct.pdf14_parent_color_s** %prev_procs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #2
  %35 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %35, i32 0, i32 1
  %36 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %cmp13 = icmp ne %struct.pdf14_mask_s* %36, null
  br i1 %cmp13, label %if.then.14, label %if.end.23

if.then.14:                                       ; preds = %if.then.11
  %37 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack15 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %37, i32 0, i32 1
  %38 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack15, align 8, !tbaa !304
  %39 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory16 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %39, i32 0, i32 2
  %40 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory16, align 8, !tbaa !283
  call void @pdf14_free_mask_stack(%struct.pdf14_mask_s* %38, %struct.gs_memory_s* %40) #7
  %41 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory17 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %41, i32 0, i32 2
  %42 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory17, align 8, !tbaa !283
  %procs18 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %42, i32 0, i32 1
  %free_object19 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs18, i32 0, i32 2
  %43 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object19, align 8, !tbaa !166
  %44 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory20 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %44, i32 0, i32 2
  %45 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory20, align 8, !tbaa !283
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack21 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %46, i32 0, i32 1
  %47 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack21, align 8, !tbaa !304
  %48 = bitcast %struct.pdf14_mask_s* %47 to i8*
  call void %43(%struct.gs_memory_s* %45, i8* %48, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %49 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack22 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %49, i32 0, i32 1
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack22, align 8, !tbaa !304
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.14, %if.then.11
  %50 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %50, i32 0, i32 0
  %51 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %51, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %for.inc.54, %if.end.23
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp24 = icmp ne %struct.pdf14_buf_s* %52, null
  br i1 %cmp24, label %for.body, label %for.end.55

for.body:                                         ; preds = %for.cond
  %53 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %53, i32 0, i32 0
  %54 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %54, %struct.pdf14_buf_s** %next, align 8, !tbaa !1
  %55 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory25 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %55, i32 0, i32 2
  %56 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory25, align 8, !tbaa !283
  %procs26 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %56, i32 0, i32 1
  %free_object27 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs26, i32 0, i32 2
  %57 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object27, align 8, !tbaa !166
  %58 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory28 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %58, i32 0, i32 2
  %59 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory28, align 8, !tbaa !283
  %60 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %transfer_fn = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %60, i32 0, i32 16
  %61 = load i8*, i8** %transfer_fn, align 8, !tbaa !306
  call void %57(%struct.gs_memory_s* %59, i8* %61, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %62 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory29 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %62, i32 0, i32 2
  %63 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory29, align 8, !tbaa !283
  %procs30 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %63, i32 0, i32 1
  %free_object31 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs30, i32 0, i32 2
  %64 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object31, align 8, !tbaa !166
  %65 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory32 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %65, i32 0, i32 2
  %66 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory32, align 8, !tbaa !283
  %67 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %67, i32 0, i32 15
  %68 = load i8*, i8** %data, align 8, !tbaa !36
  call void %64(%struct.gs_memory_s* %66, i8* %68, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %69 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory33 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %69, i32 0, i32 2
  %70 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory33, align 8, !tbaa !283
  %procs34 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %70, i32 0, i32 1
  %free_object35 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs34, i32 0, i32 2
  %71 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object35, align 8, !tbaa !166
  %72 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory36 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %72, i32 0, i32 2
  %73 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory36, align 8, !tbaa !283
  %74 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %74, i32 0, i32 1
  %75 = load i8*, i8** %backdrop, align 8, !tbaa !307
  call void %71(%struct.gs_memory_s* %73, i8* %75, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %76 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory37 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %76, i32 0, i32 2
  %77 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory37, align 8, !tbaa !283
  %procs38 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %77, i32 0, i32 1
  %free_object39 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs38, i32 0, i32 2
  %78 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object39, align 8, !tbaa !166
  %79 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory40 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %79, i32 0, i32 2
  %80 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory40, align 8, !tbaa !283
  %81 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack41 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %81, i32 0, i32 18
  %82 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack41, align 8, !tbaa !308
  %83 = bitcast %struct.pdf14_mask_s* %82 to i8*
  call void %78(%struct.gs_memory_s* %80, i8* %83, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %84 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %84, i32 0, i32 22
  %85 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  store %struct.pdf14_parent_color_s* %85, %struct.pdf14_parent_color_s** %procs12, align 8, !tbaa !1
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc, %for.body
  %86 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %procs12, align 8, !tbaa !1
  %cmp43 = icmp ne %struct.pdf14_parent_color_s* %86, null
  br i1 %cmp43, label %for.body.44, label %for.end

for.body.44:                                      ; preds = %for.cond.42
  %87 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %procs12, align 8, !tbaa !1
  %previous45 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %87, i32 0, i32 16
  %88 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %previous45, align 8, !tbaa !303
  store %struct.pdf14_parent_color_s* %88, %struct.pdf14_parent_color_s** %prev_procs, align 8, !tbaa !1
  %89 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory46 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %89, i32 0, i32 2
  %90 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory46, align 8, !tbaa !283
  %procs47 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %90, i32 0, i32 1
  %free_object48 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs47, i32 0, i32 2
  %91 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object48, align 8, !tbaa !166
  %92 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory49 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %92, i32 0, i32 2
  %93 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory49, align 8, !tbaa !283
  %94 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %procs12, align 8, !tbaa !1
  %95 = bitcast %struct.pdf14_parent_color_s* %94 to i8*
  call void %91(%struct.gs_memory_s* %93, i8* %95, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  br label %for.inc

for.inc:                                          ; preds = %for.body.44
  %96 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %prev_procs, align 8, !tbaa !1
  store %struct.pdf14_parent_color_s* %96, %struct.pdf14_parent_color_s** %procs12, align 8, !tbaa !1
  br label %for.cond.42

for.end:                                          ; preds = %for.cond.42
  %97 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory50 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %97, i32 0, i32 2
  %98 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory50, align 8, !tbaa !283
  %procs51 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %98, i32 0, i32 1
  %free_object52 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs51, i32 0, i32 2
  %99 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object52, align 8, !tbaa !166
  %100 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory53 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %100, i32 0, i32 2
  %101 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory53, align 8, !tbaa !283
  %102 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %103 = bitcast %struct.pdf14_buf_s* %102 to i8*
  call void %99(%struct.gs_memory_s* %101, i8* %103, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  br label %for.inc.54

for.inc.54:                                       ; preds = %for.end
  %104 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %next, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %104, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %for.cond

for.end.55:                                       ; preds = %for.cond
  %105 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory56 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %105, i32 0, i32 2
  %106 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory56, align 8, !tbaa !283
  %procs57 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %106, i32 0, i32 1
  %free_object58 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs57, i32 0, i32 2
  %107 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object58, align 8, !tbaa !166
  %108 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory59 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %108, i32 0, i32 2
  %109 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory59, align 8, !tbaa !283
  %110 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %111 = bitcast %struct.pdf14_ctx_s* %110 to i8*
  call void %107(%struct.gs_memory_s* %109, i8* %111, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i32 0, i32 0)) #7
  %112 = bitcast %struct.pdf14_parent_color_s** %prev_procs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %112) #2
  %113 = bitcast %struct.pdf14_parent_color_s** %procs12 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = bitcast %struct.pdf14_buf_s** %next to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #2
  %115 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #2
  br label %if.end.60

if.end.60:                                        ; preds = %for.end.55, %if.end.9
  %116 = bitcast %struct.pdf14_parent_color_s** %group_procs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %116) #2
  %117 = bitcast %struct.pdf14_smaskcolor_s** %smaskcolor to i8*
  call void @llvm.lifetime.end(i64 8, i8* %117) #2
  %118 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.end(i64 8, i8* %118) #2
  %119 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %119) #2
  ret i32 0
}

declare %struct.gx_cm_color_map_procs_s* @gx_default_DevGray_get_color_mapping_procs(%struct.gx_device_s*) #0

declare i32 @gx_default_DevGray_get_color_comp_index(%struct.gx_device_s*, i8*, i32, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_fill_rectangle_hl_color(%struct.gx_device_s* %dev, %struct.gs_fixed_rect_s* %rect, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %rect.addr = alloca %struct.gs_fixed_rect_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_fixed_rect_s* %rect, %struct.gs_fixed_rect_s** %rect.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %rect.addr, align 8, !tbaa !1
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %8, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4, !tbaa !309
  %shr = ashr i32 %9, 8
  store i32 %shr, i32* %x, align 4, !tbaa !5
  %10 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %rect.addr, align 8, !tbaa !1
  %p2 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %11, i32 0, i32 0
  %y3 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p2, i32 0, i32 1
  %12 = load i32, i32* %y3, align 4, !tbaa !311
  %shr4 = ashr i32 %12, 8
  store i32 %shr4, i32* %y, align 4, !tbaa !5
  %13 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %rect.addr, align 8, !tbaa !1
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %14, i32 0, i32 1
  %x5 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %15 = load i32, i32* %x5, align 4, !tbaa !312
  %shr6 = ashr i32 %15, 8
  %16 = load i32, i32* %x, align 4, !tbaa !5
  %sub = sub nsw i32 %shr6, %16
  store i32 %sub, i32* %w, align 4, !tbaa !5
  %17 = bitcast i32* %h to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %rect.addr, align 8, !tbaa !1
  %q7 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %y8 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q7, i32 0, i32 1
  %19 = load i32, i32* %y8, align 4, !tbaa !313
  %shr9 = ashr i32 %19, 8
  %20 = load i32, i32* %y, align 4, !tbaa !5
  %sub10 = sub nsw i32 %shr9, %20
  store i32 %sub10, i32* %h, align 4, !tbaa !5
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.11

do.body.11:                                       ; preds = %do.body
  %21 = load i32, i32* %x, align 4, !tbaa !5
  %22 = load i32, i32* %y, align 4, !tbaa !5
  %or = or i32 %21, %22
  %cmp = icmp slt i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %do.body.11
  %23 = load i32, i32* %x, align 4, !tbaa !5
  %cmp12 = icmp slt i32 %23, 0
  br i1 %cmp12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.then
  %24 = load i32, i32* %x, align 4, !tbaa !5
  %25 = load i32, i32* %w, align 4, !tbaa !5
  %add = add nsw i32 %25, %24
  store i32 %add, i32* %w, align 4, !tbaa !5
  store i32 0, i32* %x, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.13, %if.then
  %26 = load i32, i32* %y, align 4, !tbaa !5
  %cmp14 = icmp slt i32 %26, 0
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.end
  %27 = load i32, i32* %y, align 4, !tbaa !5
  %28 = load i32, i32* %h, align 4, !tbaa !5
  %add16 = add nsw i32 %28, %27
  store i32 %add16, i32* %h, align 4, !tbaa !5
  store i32 0, i32* %y, align 4, !tbaa !5
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.15, %if.end
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %do.body.11
  br label %do.cond

do.cond:                                          ; preds = %if.end.18
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.19

do.body.19:                                       ; preds = %do.end
  %29 = load i32, i32* %w, align 4, !tbaa !5
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 13
  %31 = load i32, i32* %width, align 4, !tbaa !193
  %32 = load i32, i32* %x, align 4, !tbaa !5
  %sub20 = sub nsw i32 %31, %32
  %cmp21 = icmp sgt i32 %29, %sub20
  br i1 %cmp21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %do.body.19
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width23 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %33, i32 0, i32 13
  %34 = load i32, i32* %width23, align 4, !tbaa !193
  %35 = load i32, i32* %x, align 4, !tbaa !5
  %sub24 = sub nsw i32 %34, %35
  store i32 %sub24, i32* %w, align 4, !tbaa !5
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %do.body.19
  br label %do.cond.26

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27

do.end.27:                                        ; preds = %do.cond.26
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %36 = load i32, i32* %h, align 4, !tbaa !5
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 14
  %38 = load i32, i32* %height, align 4, !tbaa !194
  %39 = load i32, i32* %y, align 4, !tbaa !5
  %sub29 = sub nsw i32 %38, %39
  %cmp30 = icmp sgt i32 %36, %sub29
  br i1 %cmp30, label %if.then.31, label %if.end.34

if.then.31:                                       ; preds = %do.body.28
  %40 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height32 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %40, i32 0, i32 14
  %41 = load i32, i32* %height32, align 4, !tbaa !194
  %42 = load i32, i32* %y, align 4, !tbaa !5
  %sub33 = sub nsw i32 %41, %42
  store i32 %sub33, i32* %h, align 4, !tbaa !5
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.31, %do.body.28
  br label %do.cond.35

do.cond.35:                                       ; preds = %if.end.34
  br label %do.end.36

do.end.36:                                        ; preds = %do.cond.35
  br label %do.cond.37

do.cond.37:                                       ; preds = %do.end.36
  br label %do.end.38

do.end.38:                                        ; preds = %do.cond.37
  %43 = load i32, i32* %w, align 4, !tbaa !5
  %cmp39 = icmp sle i32 %43, 0
  br i1 %cmp39, label %if.then.41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.38
  %44 = load i32, i32* %h, align 4, !tbaa !5
  %cmp40 = icmp sle i32 %44, 0
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %lor.lhs.false, %do.end.38
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.42:                                        ; preds = %lor.lhs.false
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 3
  %46 = load i32, i32* %knockout, align 4, !tbaa !198
  %tobool = icmp ne i32 %46, 0
  br i1 %tobool, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %if.end.42
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %48 = load i32, i32* %x, align 4, !tbaa !5
  %49 = load i32, i32* %y, align 4, !tbaa !5
  %50 = load i32, i32* %w, align 4, !tbaa !5
  %51 = load i32, i32* %h, align 4, !tbaa !5
  %52 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_mark_fill_rectangle_ko_simple(%struct.gx_device_s* %47, i32 %48, i32 %49, i32 %50, i32 %51, i64 0, %struct.gx_device_color_s* %52, i32 1) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %if.end.42
  %53 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %54 = load i32, i32* %x, align 4, !tbaa !5
  %55 = load i32, i32* %y, align 4, !tbaa !5
  %56 = load i32, i32* %w, align 4, !tbaa !5
  %57 = load i32, i32* %h, align 4, !tbaa !5
  %58 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call44 = call i32 @pdf14_mark_fill_rectangle(%struct.gx_device_s* %53, i32 %54, i32 %55, i32 %56, i32 %57, i64 0, %struct.gx_device_color_s* %58, i32 1) #7
  store i32 %call44, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then.43, %if.then.41
  %59 = bitcast i32* %h to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #2
  %60 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #2
  %61 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #2
  %62 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #2
  %63 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #2
  %64 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = load i32, i32* %retval
  ret i32 %65
}

declare i32 @gx_forward_update_spot_equivalent_colors(%struct.gx_device_s*, %struct.gs_state_s*) #0

; Function Attrs: nounwind uwtable
define internal %struct.gs_devn_params_s* @pdf14_ret_devn_params(%struct.gx_device_s* %pdev) #1 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %3 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %3, i32 0, i32 44
  %4 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %4) #2
  ret %struct.gs_devn_params_s* %devn_params
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_push_transparency_state(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %ctx = alloca %struct.pdf14_ctx_s*, align 8
  %new_mask = alloca %struct.pdf14_mask_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  store %struct.pdf14_ctx_s* %5, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_mask_s** %new_mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %7, i32 0, i32 1
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %cmp = icmp ne %struct.pdf14_mask_s* %8, null
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %do.end
  %9 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %9, i32 0, i32 2
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !283
  %call = call %struct.pdf14_mask_s* @pdf14_mask_element_new(%struct.gs_memory_s* %10) #7
  store %struct.pdf14_mask_s* %call, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %11 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack2 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %11, i32 0, i32 1
  %12 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack2, align 8, !tbaa !304
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %12, i32 0, i32 0
  %13 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %14 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %rc_mask3 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %14, i32 0, i32 0
  store %struct.pdf14_rcmask_s* %13, %struct.pdf14_rcmask_s** %rc_mask3, align 8, !tbaa !314
  br label %do.body.4

do.body.4:                                        ; preds = %if.then
  %15 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %rc_mask5 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %15, i32 0, i32 0
  %16 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask5, align 8, !tbaa !314
  %tobool = icmp ne %struct.pdf14_rcmask_s* %16, null
  br i1 %tobool, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %do.body.4
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %17 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %rc_mask8 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %17, i32 0, i32 0
  %18 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask8, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %18, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %19 = load i64, i64* %ref_count, align 8, !tbaa !316
  %inc = add nsw i64 %19, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !316
  br label %do.body.9

do.body.9:                                        ; preds = %do.body.7
  br label %do.cond.10

do.cond.10:                                       ; preds = %do.body.9
  br label %do.end.11

do.end.11:                                        ; preds = %do.cond.10
  br label %do.cond.12

do.cond.12:                                       ; preds = %do.end.11
  br label %do.end.13

do.end.13:                                        ; preds = %do.cond.12
  br label %if.end

if.end:                                           ; preds = %do.end.13, %do.body.4
  br label %do.cond.14

do.cond.14:                                       ; preds = %if.end
  br label %do.end.15

do.end.15:                                        ; preds = %do.cond.14
  %20 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack16 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %20, i32 0, i32 1
  %21 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack16, align 8, !tbaa !304
  %22 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %22, i32 0, i32 1
  store %struct.pdf14_mask_s* %21, %struct.pdf14_mask_s** %previous, align 8, !tbaa !318
  %23 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %new_mask, align 8, !tbaa !1
  %24 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack17 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %24, i32 0, i32 1
  store %struct.pdf14_mask_s* %23, %struct.pdf14_mask_s** %mask_stack17, align 8, !tbaa !304
  br label %if.end.18

if.end.18:                                        ; preds = %do.end.15, %do.end
  %25 = bitcast %struct.pdf14_mask_s** %new_mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #2
  %26 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #2
  %27 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_pop_transparency_state(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %ctx = alloca %struct.pdf14_ctx_s*, align 8
  %old_mask = alloca %struct.pdf14_mask_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  store %struct.pdf14_ctx_s* %5, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_mask_s** %old_mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %7, i32 0, i32 1
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %cmp = icmp ne %struct.pdf14_mask_s* %8, null
  br i1 %cmp, label %if.then, label %if.end.55

if.then:                                          ; preds = %do.end
  %9 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack2 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %9, i32 0, i32 1
  %10 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack2, align 8, !tbaa !304
  store %struct.pdf14_mask_s* %10, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %11 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack3 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %11, i32 0, i32 1
  %12 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack3, align 8, !tbaa !304
  %previous = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %12, i32 0, i32 1
  %13 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %previous, align 8, !tbaa !318
  %14 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack4 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %14, i32 0, i32 1
  store %struct.pdf14_mask_s* %13, %struct.pdf14_mask_s** %mask_stack4, align 8, !tbaa !304
  %15 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %15, i32 0, i32 0
  %16 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %tobool = icmp ne %struct.pdf14_rcmask_s* %16, null
  br i1 %tobool, label %if.then.5, label %if.end.40

if.then.5:                                        ; preds = %if.then
  br label %do.body.6

do.body.6:                                        ; preds = %if.then.5
  %17 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask7 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %17, i32 0, i32 0
  %18 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask7, align 8, !tbaa !314
  %tobool8 = icmp ne %struct.pdf14_rcmask_s* %18, null
  br i1 %tobool8, label %if.then.9, label %if.end.37

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.body.10
  br label %do.cond.12

do.cond.12:                                       ; preds = %do.body.11
  br label %do.end.13

do.end.13:                                        ; preds = %do.cond.12
  %19 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask14 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %19, i32 0, i32 0
  %20 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask14, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %20, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %21 = load i64, i64* %ref_count, align 8, !tbaa !316
  %add = add nsw i64 %21, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !316
  br label %do.cond.15

do.cond.15:                                       ; preds = %do.end.13
  br label %do.end.16

do.end.16:                                        ; preds = %do.cond.15
  %22 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask17 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %22, i32 0, i32 0
  %23 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask17, align 8, !tbaa !314
  %rc18 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %23, i32 0, i32 1
  %ref_count19 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc18, i32 0, i32 0
  %24 = load i64, i64* %ref_count19, align 8, !tbaa !316
  %tobool20 = icmp ne i64 %24, 0
  br i1 %tobool20, label %if.else, label %if.then.21

if.then.21:                                       ; preds = %do.end.16
  br label %do.body.22

do.body.22:                                       ; preds = %if.then.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.body.22
  br label %do.cond.24

do.cond.24:                                       ; preds = %do.body.23
  br label %do.end.25

do.end.25:                                        ; preds = %do.cond.24
  %25 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask26 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %25, i32 0, i32 0
  %26 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask26, align 8, !tbaa !314
  %rc27 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %26, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc27, i32 0, i32 2
  %27 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  %28 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask28 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %28, i32 0, i32 0
  %29 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask28, align 8, !tbaa !314
  %rc29 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %29, i32 0, i32 1
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc29, i32 0, i32 1
  %30 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !320
  %31 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask30 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %31, i32 0, i32 0
  %32 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask30, align 8, !tbaa !314
  %33 = bitcast %struct.pdf14_rcmask_s* %32 to i8*
  call void %27(%struct.gs_memory_s* %30, i8* %33, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.58, i32 0, i32 0)) #7
  br label %do.cond.31

do.cond.31:                                       ; preds = %do.end.25
  br label %do.end.32

do.end.32:                                        ; preds = %do.cond.31
  %34 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %rc_mask33 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %34, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask33, align 8, !tbaa !314
  br label %if.end

if.else:                                          ; preds = %do.end.16
  br label %do.body.34

do.body.34:                                       ; preds = %if.else
  br label %do.cond.35

do.cond.35:                                       ; preds = %do.body.34
  br label %do.end.36

do.end.36:                                        ; preds = %do.cond.35
  br label %if.end

if.end:                                           ; preds = %do.end.36, %do.end.32
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %do.body.6
  br label %do.cond.38

do.cond.38:                                       ; preds = %if.end.37
  br label %do.end.39

do.end.39:                                        ; preds = %do.cond.38
  br label %if.end.40

if.end.40:                                        ; preds = %do.end.39, %if.then
  %35 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %memory41 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %35, i32 0, i32 2
  %36 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory41, align 8, !tbaa !321
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %36, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %37 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %38 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %memory42 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %38, i32 0, i32 2
  %39 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory42, align 8, !tbaa !321
  %40 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %41 = bitcast %struct.pdf14_mask_s* %40 to i8*
  call void %37(%struct.gs_memory_s* %39, i8* %41, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.58, i32 0, i32 0)) #7
  %42 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %smask_depth = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %42, i32 0, i32 6
  %43 = load i32, i32* %smask_depth, align 4, !tbaa !322
  %cmp43 = icmp sgt i32 %43, 0
  br i1 %cmp43, label %if.then.44, label %if.end.54

if.then.44:                                       ; preds = %if.end.40
  %44 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %44, i32 0, i32 0
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %cmp45 = icmp ne %struct.pdf14_buf_s* %45, null
  br i1 %cmp45, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %if.then.44
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %stack46 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %46, i32 0, i32 0
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack46, align 8, !tbaa !23
  %mask_stack47 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 18
  %48 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack47, align 8, !tbaa !308
  %cmp48 = icmp ne %struct.pdf14_mask_s* %48, null
  br i1 %cmp48, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %land.lhs.true
  %49 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %mask_stack50 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %49, i32 0, i32 1
  %50 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack50, align 8, !tbaa !304
  %51 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !1
  %stack51 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %51, i32 0, i32 0
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack51, align 8, !tbaa !23
  %mask_stack52 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %52, i32 0, i32 18
  store %struct.pdf14_mask_s* %50, %struct.pdf14_mask_s** %mask_stack52, align 8, !tbaa !308
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %land.lhs.true, %if.then.44
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.end.40
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %do.end
  %53 = bitcast %struct.pdf14_mask_s** %old_mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #2
  %54 = bitcast %struct.pdf14_ctx_s** %ctx to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #2
  %55 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #2
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_dev_spec_op(%struct.gx_device_s* %pdev, i32 %dev_spec_op, i8* %data, i32 %size) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %dev_spec_op.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %dev = alloca %struct.pdf14_device_s*, align 8
  %d = alloca %struct.gxdso_device_child_request_s*, align 8
  %cleanup.dest.slot = alloca i32
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %code = alloca i32, align 4
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store i32 %dev_spec_op, i32* %dev_spec_op.addr, align 4, !tbaa !5
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  %0 = load i32, i32* %dev_spec_op.addr, align 4, !tbaa !5
  %cmp = icmp eq i32 %0, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %dev_spec_op.addr, align 4, !tbaa !5
  %cmp1 = icmp eq i32 %1, 9
  br i1 %cmp1, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.end
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %cmp3 = icmp ne i8* %2, null
  br i1 %cmp3, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.then.2
  %3 = load i32, i32* %size.addr, align 4, !tbaa !5
  %conv = sext i32 %3 to i64
  %cmp4 = icmp eq i64 %conv, 8
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %land.lhs.true
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %5 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %6 = bitcast i8* %5 to %struct.gx_device_s**
  store %struct.gx_device_s* %4, %struct.gx_device_s** %6, align 8, !tbaa !1
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %land.lhs.true, %if.then.2
  store i32 1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %7 = load i32, i32* %dev_spec_op.addr, align 4, !tbaa !5
  %cmp9 = icmp eq i32 %7, 10
  br i1 %cmp9, label %if.then.11, label %if.end.19

if.then.11:                                       ; preds = %if.end.8
  %8 = bitcast %struct.pdf14_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %10 = bitcast %struct.gx_device_s* %9 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %10, %struct.pdf14_device_s** %dev, align 8, !tbaa !1
  %11 = bitcast %struct.gxdso_device_child_request_s** %d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %13 = bitcast i8* %12 to %struct.gxdso_device_child_request_s*
  store %struct.gxdso_device_child_request_s* %13, %struct.gxdso_device_child_request_s** %d, align 8, !tbaa !1
  %14 = load %struct.gxdso_device_child_request_s*, %struct.gxdso_device_child_request_s** %d, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.gxdso_device_child_request_s, %struct.gxdso_device_child_request_s* %14, i32 0, i32 0
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !323
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %cmp12 = icmp eq %struct.gx_device_s* %15, %16
  br i1 %cmp12, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.then.11
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev, align 8, !tbaa !1
  %target15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 43
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %target15, align 8, !tbaa !82
  %19 = load %struct.gxdso_device_child_request_s*, %struct.gxdso_device_child_request_s** %d, align 8, !tbaa !1
  %target16 = getelementptr inbounds %struct.gxdso_device_child_request_s, %struct.gxdso_device_child_request_s* %19, i32 0, i32 0
  store %struct.gx_device_s* %18, %struct.gx_device_s** %target16, align 8, !tbaa !323
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.17:                                        ; preds = %if.then.11
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.17, %if.then.14
  %20 = bitcast %struct.gxdso_device_child_request_s** %d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #2
  %21 = bitcast %struct.pdf14_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.19

if.end.19:                                        ; preds = %cleanup.cont, %if.end.8
  %22 = load i32, i32* %dev_spec_op.addr, align 4, !tbaa !5
  %cmp20 = icmp eq i32 %22, 11
  br i1 %cmp20, label %if.then.22, label %if.end.28

if.then.22:                                       ; preds = %if.end.19
  %23 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #2
  %24 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #2
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %26 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call = call i32 %26(%struct.gx_device_s* %27, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %28 = load i32, i32* %code, align 4, !tbaa !5
  %cmp23 = icmp eq i32 %28, 0
  br i1 %cmp23, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %supports_devn = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %29, i32 0, i32 9
  %30 = load i32, i32* %supports_devn, align 4, !tbaa !325
  store i32 %30, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.else:                                          ; preds = %if.then.22
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

cleanup.26:                                       ; preds = %if.else, %if.then.25
  %31 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %31) #2
  %32 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  br label %return

if.end.28:                                        ; preds = %if.end.19
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %34 = load i32, i32* %dev_spec_op.addr, align 4, !tbaa !5
  %35 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %36 = load i32, i32* %size.addr, align 4, !tbaa !5
  %call29 = call i32 @gx_default_dev_spec_op(%struct.gx_device_s* %33, i32 %34, i8* %35, i32 %36) #7
  store i32 %call29, i32* %retval
  br label %return

return:                                           ; preds = %if.end.28, %cleanup.26, %cleanup, %if.end.7, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_copy_planes(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i32 %plane_height) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %plane_height.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %num_planes = alloca i32, align 4
  %dptr = alloca i8*, align 8
  %yinc = alloca i32, align 4
  %xinc = alloca i32, align 4
  %pi = alloca i32, align 4
  %dcolor = alloca %struct.gx_device_color_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i32 %plane_height, i32* %plane_height.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast i32* %num_planes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %9 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %9, i32* %num_planes, align 4, !tbaa !5
  %10 = bitcast i8** %dptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %12 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8* %add.ptr, i8** %dptr, align 8, !tbaa !1
  %13 = bitcast i32* %yinc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %xinc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %pi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast %struct.gx_device_color_s* %dcolor to i8*
  call void @llvm.lifetime.start(i64 656, i8* %16) #2
  %17 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %18 = load i32, i32* %x.addr, align 4, !tbaa !5
  %19 = load i32, i32* %y.addr, align 4, !tbaa !5
  %or = or i32 %18, %19
  %cmp = icmp slt i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %do.body.1
  %20 = load i32, i32* %x.addr, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %20, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %21 = load i32, i32* %x.addr, align 4, !tbaa !5
  %22 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %22, %21
  store i32 %add, i32* %w.addr, align 4, !tbaa !5
  store i32 0, i32* %x.addr, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %23 = load i32, i32* %y.addr, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %23, 0
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %24 = load i32, i32* %y.addr, align 4, !tbaa !5
  %25 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add6 = add nsw i32 %25, %24
  store i32 %add6, i32* %h.addr, align 4, !tbaa !5
  store i32 0, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %do.body.1
  br label %do.cond

do.cond:                                          ; preds = %if.end.8
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.9

do.body.9:                                        ; preds = %do.end
  %26 = load i32, i32* %w.addr, align 4, !tbaa !5
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 13
  %28 = load i32, i32* %width, align 4, !tbaa !193
  %29 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %28, %29
  %cmp10 = icmp sgt i32 %26, %sub
  br i1 %cmp10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %do.body.9
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 13
  %31 = load i32, i32* %width12, align 4, !tbaa !193
  %32 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub13 = sub nsw i32 %31, %32
  store i32 %sub13, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %do.body.9
  br label %do.cond.15

do.cond.15:                                       ; preds = %if.end.14
  br label %do.end.16

do.end.16:                                        ; preds = %do.cond.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %33 = load i32, i32* %h.addr, align 4, !tbaa !5
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %34, i32 0, i32 14
  %35 = load i32, i32* %height, align 4, !tbaa !194
  %36 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub18 = sub nsw i32 %35, %36
  %cmp19 = icmp sgt i32 %33, %sub18
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %do.body.17
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height21 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 14
  %38 = load i32, i32* %height21, align 4, !tbaa !194
  %39 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub22 = sub nsw i32 %38, %39
  store i32 %sub22, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %do.body.17
  br label %do.cond.24

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25

do.end.25:                                        ; preds = %do.cond.24
  br label %do.cond.26

do.cond.26:                                       ; preds = %do.end.25
  br label %do.end.27

do.end.27:                                        ; preds = %do.cond.26
  %40 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp28 = icmp sle i32 %40, 0
  br i1 %cmp28, label %if.then.30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.27
  %41 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp29 = icmp sle i32 %41, 0
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %lor.lhs.false, %do.end.27
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.31:                                        ; preds = %lor.lhs.false
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %dcolor, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_devn, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  store i32 0, i32* %yinc, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.62, %if.end.31
  %42 = load i32, i32* %yinc, align 4, !tbaa !5
  %43 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp32 = icmp slt i32 %42, %43
  br i1 %cmp32, label %for.body, label %for.end.64

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %xinc, align 4, !tbaa !5
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc.54, %for.body
  %44 = load i32, i32* %xinc, align 4, !tbaa !5
  %45 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp34 = icmp slt i32 %44, %45
  br i1 %cmp34, label %for.body.35, label %for.end.56

for.body.35:                                      ; preds = %for.cond.33
  store i32 0, i32* %pi, align 4, !tbaa !5
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc, %for.body.35
  %46 = load i32, i32* %pi, align 4, !tbaa !5
  %47 = load i32, i32* %num_planes, align 4, !tbaa !5
  %cmp37 = icmp slt i32 %46, %47
  br i1 %cmp37, label %for.body.38, label %for.end

for.body.38:                                      ; preds = %for.cond.36
  %48 = load i8*, i8** %dptr, align 8, !tbaa !1
  %49 = load i32, i32* %plane_height.addr, align 4, !tbaa !5
  %50 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %49, %50
  %51 = load i32, i32* %pi, align 4, !tbaa !5
  %mul39 = mul nsw i32 %mul, %51
  %idx.ext40 = sext i32 %mul39 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %48, i64 %idx.ext40
  %52 = load i8, i8* %add.ptr41, align 1, !tbaa !66
  %conv = zext i8 %52 to i32
  %shl = shl i32 %conv, 8
  %conv42 = trunc i32 %shl to i16
  %53 = load i32, i32* %pi, align 4, !tbaa !5
  %idxprom = sext i32 %53 to i64
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %dcolor, i32 0, i32 1
  %devn = bitcast %union._c* %colors to %struct._devn*
  %values = getelementptr inbounds %struct._devn, %struct._devn* %devn, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %values, i32 0, i64 %idxprom
  store i16 %conv42, i16* %arrayidx, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body.38
  %54 = load i32, i32* %pi, align 4, !tbaa !5
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %pi, align 4, !tbaa !5
  br label %for.cond.36

for.end:                                          ; preds = %for.cond.36
  %55 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %55, i32 0, i32 3
  %56 = load i32, i32* %knockout, align 4, !tbaa !198
  %tobool = icmp ne i32 %56, 0
  br i1 %tobool, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %for.end
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %58 = load i32, i32* %x.addr, align 4, !tbaa !5
  %59 = load i32, i32* %xinc, align 4, !tbaa !5
  %add44 = add nsw i32 %58, %59
  %60 = load i32, i32* %y.addr, align 4, !tbaa !5
  %61 = load i32, i32* %yinc, align 4, !tbaa !5
  %add45 = add nsw i32 %60, %61
  %call = call i32 @pdf14_mark_fill_rectangle_ko_simple(%struct.gx_device_s* %57, i32 %add44, i32 %add45, i32 1, i32 1, i64 0, %struct.gx_device_color_s* %dcolor, i32 1) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  br label %if.end.49

if.else:                                          ; preds = %for.end
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %63 = load i32, i32* %x.addr, align 4, !tbaa !5
  %64 = load i32, i32* %xinc, align 4, !tbaa !5
  %add46 = add nsw i32 %63, %64
  %65 = load i32, i32* %y.addr, align 4, !tbaa !5
  %66 = load i32, i32* %yinc, align 4, !tbaa !5
  %add47 = add nsw i32 %65, %66
  %call48 = call i32 @pdf14_mark_fill_rectangle(%struct.gx_device_s* %62, i32 %add46, i32 %add47, i32 1, i32 1, i64 0, %struct.gx_device_color_s* %dcolor, i32 1) #7
  store i32 %call48, i32* %code, align 4, !tbaa !5
  br label %if.end.49

if.end.49:                                        ; preds = %if.else, %if.then.43
  %67 = load i32, i32* %code, align 4, !tbaa !5
  %cmp50 = icmp slt i32 %67, 0
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  %68 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %68, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.53:                                        ; preds = %if.end.49
  %69 = load i8*, i8** %dptr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr, i8** %dptr, align 8, !tbaa !1
  br label %for.inc.54

for.inc.54:                                       ; preds = %if.end.53
  %70 = load i32, i32* %xinc, align 4, !tbaa !5
  %inc55 = add nsw i32 %70, 1
  store i32 %inc55, i32* %xinc, align 4, !tbaa !5
  br label %for.cond.33

for.end.56:                                       ; preds = %for.cond.33
  %71 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %72 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %73 = load i32, i32* %yinc, align 4, !tbaa !5
  %mul57 = mul nsw i32 %72, %73
  %idx.ext58 = sext i32 %mul57 to i64
  %add.ptr59 = getelementptr inbounds i8, i8* %71, i64 %idx.ext58
  %74 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %idx.ext60 = sext i32 %74 to i64
  %add.ptr61 = getelementptr inbounds i8, i8* %add.ptr59, i64 %idx.ext60
  store i8* %add.ptr61, i8** %dptr, align 8, !tbaa !1
  br label %for.inc.62

for.inc.62:                                       ; preds = %for.end.56
  %75 = load i32, i32* %yinc, align 4, !tbaa !5
  %inc63 = add nsw i32 %75, 1
  store i32 %inc63, i32* %yinc, align 4, !tbaa !5
  br label %for.cond

for.end.64:                                       ; preds = %for.cond
  %76 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %76, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.64, %if.then.52, %if.then.30
  %77 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %77) #2
  %78 = bitcast %struct.gx_device_color_s* %dcolor to i8*
  call void @llvm.lifetime.end(i64 656, i8* %78) #2
  %79 = bitcast i32* %pi to i8*
  call void @llvm.lifetime.end(i64 4, i8* %79) #2
  %80 = bitcast i32* %xinc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %80) #2
  %81 = bitcast i32* %yinc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %81) #2
  %82 = bitcast i8** %dptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %82) #2
  %83 = bitcast i32* %num_planes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #2
  %84 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %84) #2
  %85 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %85) #2
  %86 = load i32, i32* %retval
  ret i32 %86
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_copy_alpha_hl_color(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %aa_raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, %struct.gx_device_color_s* %pdcolor, i32 %depth) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %aa_raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %depth.addr = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %aa_raster, i32* %aa_raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %2 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %3 = load i32, i32* %aa_raster.addr, align 4, !tbaa !5
  %4 = load i64, i64* %id.addr, align 8, !tbaa !68
  %5 = load i32, i32* %x.addr, align 4, !tbaa !5
  %6 = load i32, i32* %y.addr, align 4, !tbaa !5
  %7 = load i32, i32* %w.addr, align 4, !tbaa !5
  %8 = load i32, i32* %h.addr, align 4, !tbaa !5
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %10 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %call = call i32 @pdf14_copy_alpha_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i64 %4, i32 %5, i32 %6, i32 %7, i32 %8, i64 0, %struct.gx_device_color_s* %9, i32 %10, i32 1) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_ctx_s* @pdf14_ctx_new(%struct.gs_int_rect_s* %rect, i32 %n_chan, i32 %additive, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca %struct.pdf14_ctx_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %n_chan.addr = alloca i32, align 4
  %additive.addr = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %result = alloca %struct.pdf14_ctx_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %memory = alloca %struct.gs_memory_s*, align 8
  %has_tags = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  store i32 %n_chan, i32* %n_chan.addr, align 4, !tbaa !5
  store i32 %additive, i32* %additive.addr, align 4, !tbaa !5
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_ctx_s** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast %struct.gs_memory_s** %memory to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %3, i32 0, i32 3
  %4 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory1, align 8, !tbaa !60
  store %struct.gs_memory_s* %4, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %5 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 40
  %7 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %7, 128
  store i32 %and, i32* %has_tags, align 4, !tbaa !5
  %8 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %8, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %9 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %call = call i8* %9(%struct.gs_memory_s* %10, %struct.gs_memory_struct_type_s* @st_pdf14_ctx, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0)) #7
  %11 = bitcast i8* %call to %struct.pdf14_ctx_s*
  store %struct.pdf14_ctx_s* %11, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %12 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %cmp = icmp eq %struct.pdf14_ctx_s* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  store %struct.pdf14_ctx_s* %13, %struct.pdf14_ctx_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %14 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %15 = load i32, i32* %has_tags, align 4, !tbaa !5
  %16 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %add = add nsw i32 %16, 1
  %17 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %call2 = call %struct.pdf14_buf_s* @pdf14_buf_new(%struct.gs_int_rect_s* %14, i32 %15, i32 0, i32 0, i32 0, i32 %add, %struct.gs_memory_s* %17) #7
  store %struct.pdf14_buf_s* %call2, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %18 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp3 = icmp eq %struct.pdf14_buf_s* %18, null
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %procs5 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %19, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs5, i32 0, i32 2
  %20 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %21 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %22 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %23 = bitcast %struct.pdf14_ctx_s* %22 to i8*
  call void %20(%struct.gs_memory_s* %21, i8* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0)) #7
  store %struct.pdf14_ctx_s* null, %struct.pdf14_ctx_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.6
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %24 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %24, i32 0, i32 15
  %25 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp7 = icmp ne i8* %25, null
  br i1 %cmp7, label %if.then.8, label %if.end.20

if.then.8:                                        ; preds = %do.end
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags9 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 9
  %27 = load i32, i32* %has_tags9, align 4, !tbaa !327
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.then.8
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data11 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %28, i32 0, i32 15
  %29 = load i8*, i8** %data11, align 8, !tbaa !36
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 12
  %31 = load i32, i32* %planestride, align 4, !tbaa !58
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_planes = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 14
  %33 = load i32, i32* %n_planes, align 4, !tbaa !328
  %sub = sub nsw i32 %33, 1
  %mul = mul nsw i32 %31, %sub
  %conv = sext i32 %mul to i64
  %call12 = call i8* @memset(i8* %29, i32 0, i64 %conv) #8
  br label %if.end.19

if.else:                                          ; preds = %if.then.8
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data13 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 15
  %35 = load i8*, i8** %data13, align 8, !tbaa !36
  %36 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride14 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %36, i32 0, i32 12
  %37 = load i32, i32* %planestride14, align 4, !tbaa !58
  %38 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_planes15 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %38, i32 0, i32 14
  %39 = load i32, i32* %n_planes15, align 4, !tbaa !328
  %mul16 = mul nsw i32 %37, %39
  %conv17 = sext i32 %mul16 to i64
  %call18 = call i8* @memset(i8* %35, i32 0, i64 %conv17) #8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.10
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %do.end
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 0
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %41 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %42 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %42, i32 0, i32 0
  store %struct.pdf14_buf_s* %41, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %43 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %call21 = call %struct.pdf14_mask_s* @pdf14_mask_element_new(%struct.gs_memory_s* %43) #7
  %44 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %44, i32 0, i32 1
  store %struct.pdf14_mask_s* %call21, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %45 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %call22 = call %struct.pdf14_rcmask_s* @pdf14_rcmask_new(%struct.gs_memory_s* %45) #7
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %mask_stack23 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %46, i32 0, i32 1
  %47 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack23, align 8, !tbaa !304
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %47, i32 0, i32 0
  store %struct.pdf14_rcmask_s* %call22, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %48 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %49 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %n_chan24 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %49, i32 0, i32 5
  store i32 %48, i32* %n_chan24, align 4, !tbaa !329
  %50 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !1
  %51 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %memory25 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %51, i32 0, i32 2
  store %struct.gs_memory_s* %50, %struct.gs_memory_s** %memory25, align 8, !tbaa !283
  %52 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %rect26 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %52, i32 0, i32 3
  %53 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %54 = bitcast %struct.gs_int_rect_s* %rect26 to i8*
  %55 = bitcast %struct.gs_int_rect_s* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 16, i32 4, i1 false), !tbaa.struct !27
  %56 = load i32, i32* %additive.addr, align 4, !tbaa !5
  %57 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %additive27 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %57, i32 0, i32 4
  store i32 %56, i32* %additive27, align 4, !tbaa !272
  %58 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %smask_depth = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %58, i32 0, i32 6
  store i32 0, i32* %smask_depth, align 4, !tbaa !322
  %59 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  %smask_blend = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %59, i32 0, i32 7
  store i32 0, i32* %smask_blend, align 4, !tbaa !330
  %60 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %result, align 8, !tbaa !1
  store %struct.pdf14_ctx_s* %60, %struct.pdf14_ctx_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.20, %if.then.4, %if.then
  %61 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #2
  %62 = bitcast %struct.gs_memory_s** %memory to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #2
  %63 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #2
  %64 = bitcast %struct.pdf14_ctx_s** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %retval
  ret %struct.pdf14_ctx_s* %65
}

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_buf_s* @pdf14_buf_new(%struct.gs_int_rect_s* %rect, i32 %has_tags, i32 %has_alpha_g, i32 %has_shape, i32 %idle, i32 %n_chan, %struct.gs_memory_s* %memory) #1 {
entry:
  %retval = alloca %struct.pdf14_buf_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %has_tags.addr = alloca i32, align 4
  %has_alpha_g.addr = alloca i32, align 4
  %has_shape.addr = alloca i32, align 4
  %idle.addr = alloca i32, align 4
  %n_chan.addr = alloca i32, align 4
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %result = alloca %struct.pdf14_buf_s*, align 8
  %new_parent_color = alloca %struct.pdf14_parent_color_s*, align 8
  %rowstride = alloca i32, align 4
  %height = alloca i32, align 4
  %n_planes = alloca i32, align 4
  %planestride = alloca i32, align 4
  %dsize = alloca double, align 8
  %cleanup.dest.slot = alloca i32
  %alpha_g_plane = alloca i32, align 4
  %tags_plane = alloca i32, align 4
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  store i32 %has_tags, i32* %has_tags.addr, align 4, !tbaa !5
  store i32 %has_alpha_g, i32* %has_alpha_g.addr, align 4, !tbaa !5
  store i32 %has_shape, i32* %has_shape.addr, align 4, !tbaa !5
  store i32 %idle, i32* %idle.addr, align 4, !tbaa !5
  store i32 %n_chan, i32* %n_chan.addr, align 4, !tbaa !5
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_parent_color_s** %new_parent_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %3, i32 0, i32 1
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %4 = load i32, i32* %x, align 4, !tbaa !31
  %5 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %5, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %6 = load i32, i32* %x1, align 4, !tbaa !34
  %sub = sub nsw i32 %4, %6
  %add = add nsw i32 %sub, 3
  %and = and i32 %add, -4
  store i32 %and, i32* %rowstride, align 4, !tbaa !5
  %7 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q2 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %8, i32 0, i32 1
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q2, i32 0, i32 1
  %9 = load i32, i32* %y, align 4, !tbaa !33
  %10 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p3 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %10, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p3, i32 0, i32 1
  %11 = load i32, i32* %y4, align 4, !tbaa !35
  %sub5 = sub nsw i32 %9, %11
  store i32 %sub5, i32* %height, align 4, !tbaa !5
  %12 = bitcast i32* %n_planes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %14 = load i32, i32* %has_shape.addr, align 4, !tbaa !5
  %tobool = icmp ne i32 %14, 0
  %cond = select i1 %tobool, i32 1, i32 0
  %add6 = add nsw i32 %13, %cond
  %15 = load i32, i32* %has_alpha_g.addr, align 4, !tbaa !5
  %tobool7 = icmp ne i32 %15, 0
  %cond8 = select i1 %tobool7, i32 1, i32 0
  %add9 = add nsw i32 %add6, %cond8
  %16 = load i32, i32* %has_tags.addr, align 4, !tbaa !5
  %tobool10 = icmp ne i32 %16, 0
  %cond11 = select i1 %tobool10, i32 1, i32 0
  %add12 = add nsw i32 %add9, %cond11
  store i32 %add12, i32* %n_planes, align 4, !tbaa !5
  %17 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = bitcast double* %dsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #2
  %19 = load i32, i32* %rowstride, align 4, !tbaa !5
  %conv = sitofp i32 %19 to double
  %20 = load i32, i32* %height, align 4, !tbaa !5
  %conv13 = sitofp i32 %20 to double
  %mul = fmul double %conv, %conv13
  %21 = load i32, i32* %n_planes, align 4, !tbaa !5
  %conv14 = sitofp i32 %21 to double
  %mul15 = fmul double %mul, %conv14
  store double %mul15, double* %dsize, align 8, !tbaa !171
  %22 = load double, double* %dsize, align 8, !tbaa !171
  %cmp = fcmp ogt double %22, 0x41EFFFFFFFE00000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %23 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %23, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %24 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %25 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call = call i8* %24(%struct.gs_memory_s* %25, %struct.gs_memory_struct_type_s* @st_pdf14_buf, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)) #7
  %26 = bitcast i8* %call to %struct.pdf14_buf_s*
  store %struct.pdf14_buf_s* %26, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %27 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %cmp17 = icmp eq %struct.pdf14_buf_s* %27, null
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %28, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.20:                                        ; preds = %if.end
  %29 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %backdrop = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %29, i32 0, i32 1
  store i8* null, i8** %backdrop, align 8, !tbaa !307
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 0
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %31 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %isolated = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %31, i32 0, i32 2
  store i32 0, i32* %isolated, align 4, !tbaa !331
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 3
  store i32 0, i32* %knockout, align 4, !tbaa !198
  %33 = load i32, i32* %has_alpha_g.addr, align 4, !tbaa !5
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %has_alpha_g21 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 7
  store i32 %33, i32* %has_alpha_g21, align 4, !tbaa !332
  %35 = load i32, i32* %has_shape.addr, align 4, !tbaa !5
  %36 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %has_shape22 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %36, i32 0, i32 8
  store i32 %35, i32* %has_shape22, align 4, !tbaa !40
  %37 = load i32, i32* %has_tags.addr, align 4, !tbaa !5
  %38 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %has_tags23 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %38, i32 0, i32 9
  store i32 %37, i32* %has_tags23, align 4, !tbaa !327
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %rect24 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %39, i32 0, i32 10
  %40 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %41 = bitcast %struct.gs_int_rect_s* %rect24 to i8*
  %42 = bitcast %struct.gs_int_rect_s* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 4, i1 false), !tbaa.struct !27
  %43 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %44 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %n_chan25 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %44, i32 0, i32 13
  store i32 %43, i32* %n_chan25, align 4, !tbaa !38
  %45 = load i32, i32* %n_planes, align 4, !tbaa !5
  %46 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %n_planes26 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %46, i32 0, i32 14
  store i32 %45, i32* %n_planes26, align 4, !tbaa !328
  %47 = load i32, i32* %rowstride, align 4, !tbaa !5
  %48 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %rowstride27 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %48, i32 0, i32 11
  store i32 %47, i32* %rowstride27, align 4, !tbaa !59
  %49 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %transfer_fn = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %49, i32 0, i32 16
  store i8* null, i8** %transfer_fn, align 8, !tbaa !306
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 18
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !308
  %51 = load i32, i32* %idle.addr, align 4, !tbaa !5
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %idle28 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %52, i32 0, i32 19
  store i32 %51, i32* %idle28, align 4, !tbaa !333
  %53 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %mask_id = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %53, i32 0, i32 21
  store i32 0, i32* %mask_id, align 4, !tbaa !334
  %54 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs29 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %54, i32 0, i32 1
  %alloc_struct30 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs29, i32 0, i32 8
  %55 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct30, align 8, !tbaa !167
  %56 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call31 = call i8* %55(%struct.gs_memory_s* %56, %struct.gs_memory_struct_type_s* @st_pdf14_clr, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)) #7
  %57 = bitcast i8* %call31 to %struct.pdf14_parent_color_s*
  store %struct.pdf14_parent_color_s* %57, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %58 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %59 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %59, i32 0, i32 22
  store %struct.pdf14_parent_color_s* %58, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  %60 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs32 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %60, i32 0, i32 22
  %61 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs32, align 8, !tbaa !260
  %get_cmap_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %61, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !264
  %62 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs33 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %62, i32 0, i32 22
  %63 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs33, align 8, !tbaa !260
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %63, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %64 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs34 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %64, i32 0, i32 22
  %65 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs34, align 8, !tbaa !260
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %65, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %66 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs35 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %66, i32 0, i32 22
  %67 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs35, align 8, !tbaa !260
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %67, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %68 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs36 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %68, i32 0, i32 22
  %69 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs36, align 8, !tbaa !260
  %previous = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %69, i32 0, i32 16
  store %struct.pdf14_parent_color_s* null, %struct.pdf14_parent_color_s** %previous, align 8, !tbaa !303
  %70 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs37 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %70, i32 0, i32 22
  %71 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs37, align 8, !tbaa !260
  %encode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %71, i32 0, i32 10
  store i64 (%struct.gx_device_s*, i16*)* null, i64 (%struct.gx_device_s*, i16*)** %encode, align 8, !tbaa !295
  %72 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %parent_color_info_procs38 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %72, i32 0, i32 22
  %73 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs38, align 8, !tbaa !260
  %decode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %73, i32 0, i32 11
  store i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)** %decode, align 8, !tbaa !297
  %74 = load i32, i32* %height, align 4, !tbaa !5
  %cmp39 = icmp sle i32 %74, 0
  br i1 %cmp39, label %if.then.41, label %if.else

if.then.41:                                       ; preds = %if.end.20
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %planestride42 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 12
  store i32 0, i32* %planestride42, align 4, !tbaa !58
  %76 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %76, i32 0, i32 15
  store i8* null, i8** %data, align 8, !tbaa !36
  br label %if.end.80

if.else:                                          ; preds = %if.end.20
  %77 = load i32, i32* %rowstride, align 4, !tbaa !5
  %78 = load i32, i32* %height, align 4, !tbaa !5
  %mul43 = mul nsw i32 %77, %78
  store i32 %mul43, i32* %planestride, align 4, !tbaa !5
  %79 = load i32, i32* %planestride, align 4, !tbaa !5
  %80 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %planestride44 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %80, i32 0, i32 12
  store i32 %79, i32* %planestride44, align 4, !tbaa !58
  %81 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs45 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %81, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs45, i32 0, i32 7
  %82 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %83 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %84 = load i32, i32* %planestride, align 4, !tbaa !5
  %85 = load i32, i32* %n_planes, align 4, !tbaa !5
  %mul46 = mul nsw i32 %84, %85
  %call47 = call i8* %82(%struct.gs_memory_s* %83, i32 %mul46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)) #7
  %86 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %data48 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %86, i32 0, i32 15
  store i8* %call47, i8** %data48, align 8, !tbaa !36
  %87 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %data49 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %87, i32 0, i32 15
  %88 = load i8*, i8** %data49, align 8, !tbaa !36
  %cmp50 = icmp eq i8* %88, null
  br i1 %cmp50, label %if.then.52, label %if.end.54

if.then.52:                                       ; preds = %if.else
  %89 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs53 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %89, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs53, i32 0, i32 2
  %90 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %91 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %92 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %93 = bitcast %struct.pdf14_buf_s* %92 to i8*
  call void %90(%struct.gs_memory_s* %91, i8* %93, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0)) #7
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.54:                                        ; preds = %if.else
  %94 = load i32, i32* %has_alpha_g.addr, align 4, !tbaa !5
  %tobool55 = icmp ne i32 %94, 0
  br i1 %tobool55, label %if.then.56, label %if.end.64

if.then.56:                                       ; preds = %if.end.54
  %95 = bitcast i32* %alpha_g_plane to i8*
  call void @llvm.lifetime.start(i64 4, i8* %95) #2
  %96 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %97 = load i32, i32* %has_shape.addr, align 4, !tbaa !5
  %tobool57 = icmp ne i32 %97, 0
  %cond58 = select i1 %tobool57, i32 1, i32 0
  %add59 = add nsw i32 %96, %cond58
  store i32 %add59, i32* %alpha_g_plane, align 4, !tbaa !5
  %98 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %data60 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %98, i32 0, i32 15
  %99 = load i8*, i8** %data60, align 8, !tbaa !36
  %100 = load i32, i32* %alpha_g_plane, align 4, !tbaa !5
  %101 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul61 = mul nsw i32 %100, %101
  %idx.ext = sext i32 %mul61 to i64
  %add.ptr = getelementptr inbounds i8, i8* %99, i64 %idx.ext
  %102 = load i32, i32* %planestride, align 4, !tbaa !5
  %conv62 = sext i32 %102 to i64
  %call63 = call i8* @memset(i8* %add.ptr, i32 0, i64 %conv62) #8
  %103 = bitcast i32* %alpha_g_plane to i8*
  call void @llvm.lifetime.end(i64 4, i8* %103) #2
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.56, %if.end.54
  %104 = load i32, i32* %has_tags.addr, align 4, !tbaa !5
  %tobool65 = icmp ne i32 %104, 0
  br i1 %tobool65, label %if.then.66, label %if.end.79

if.then.66:                                       ; preds = %if.end.64
  %105 = bitcast i32* %tags_plane to i8*
  call void @llvm.lifetime.start(i64 4, i8* %105) #2
  %106 = load i32, i32* %n_chan.addr, align 4, !tbaa !5
  %107 = load i32, i32* %has_shape.addr, align 4, !tbaa !5
  %tobool67 = icmp ne i32 %107, 0
  %cond68 = select i1 %tobool67, i32 1, i32 0
  %add69 = add nsw i32 %106, %cond68
  %108 = load i32, i32* %has_alpha_g.addr, align 4, !tbaa !5
  %tobool70 = icmp ne i32 %108, 0
  %cond71 = select i1 %tobool70, i32 1, i32 0
  %add72 = add nsw i32 %add69, %cond71
  store i32 %add72, i32* %tags_plane, align 4, !tbaa !5
  %109 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %data73 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %109, i32 0, i32 15
  %110 = load i8*, i8** %data73, align 8, !tbaa !36
  %111 = load i32, i32* %tags_plane, align 4, !tbaa !5
  %112 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul74 = mul nsw i32 %111, %112
  %idx.ext75 = sext i32 %mul74 to i64
  %add.ptr76 = getelementptr inbounds i8, i8* %110, i64 %idx.ext75
  %113 = load i32, i32* %planestride, align 4, !tbaa !5
  %conv77 = sext i32 %113 to i64
  %call78 = call i8* @memset(i8* %add.ptr76, i32 8, i64 %conv77) #8
  %114 = bitcast i32* %tags_plane to i8*
  call void @llvm.lifetime.end(i64 4, i8* %114) #2
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.66, %if.end.64
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %if.then.41
  %115 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q81 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %115, i32 0, i32 1
  %x82 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q81, i32 0, i32 0
  %116 = load i32, i32* %x82, align 4, !tbaa !31
  %117 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %117, i32 0, i32 17
  %p83 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x84 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p83, i32 0, i32 0
  store i32 %116, i32* %x84, align 4, !tbaa !335
  %118 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q85 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %118, i32 0, i32 1
  %y86 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q85, i32 0, i32 1
  %119 = load i32, i32* %y86, align 4, !tbaa !33
  %120 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %dirty87 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %120, i32 0, i32 17
  %p88 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty87, i32 0, i32 0
  %y89 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p88, i32 0, i32 1
  store i32 %119, i32* %y89, align 4, !tbaa !336
  %121 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p90 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %121, i32 0, i32 0
  %x91 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p90, i32 0, i32 0
  %122 = load i32, i32* %x91, align 4, !tbaa !34
  %123 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %dirty92 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %123, i32 0, i32 17
  %q93 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty92, i32 0, i32 1
  %x94 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q93, i32 0, i32 0
  store i32 %122, i32* %x94, align 4, !tbaa !337
  %124 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p95 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %124, i32 0, i32 0
  %y96 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p95, i32 0, i32 1
  %125 = load i32, i32* %y96, align 4, !tbaa !35
  %126 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  %dirty97 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %126, i32 0, i32 17
  %q98 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty97, i32 0, i32 1
  %y99 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q98, i32 0, i32 1
  store i32 %125, i32* %y99, align 4, !tbaa !338
  %127 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %result, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %127, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.80, %if.then.52, %if.then.19, %if.then
  %128 = bitcast double* %dsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %128) #2
  %129 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %129) #2
  %130 = bitcast i32* %n_planes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #2
  %131 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %131) #2
  %132 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %132) #2
  %133 = bitcast %struct.pdf14_parent_color_s** %new_parent_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %133) #2
  %134 = bitcast %struct.pdf14_buf_s** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %134) #2
  %135 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %retval
  ret %struct.pdf14_buf_s* %135
}

; Function Attrs: nounwind
declare i8* @memset(i8*, i32, i64) #3

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_mask_s* @pdf14_mask_element_new(%struct.gs_memory_s* %memory) #1 {
entry:
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %result = alloca %struct.pdf14_mask_s*, align 8
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_mask_s** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %1, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %2 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %3 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call = call i8* %2(%struct.gs_memory_s* %3, %struct.gs_memory_struct_type_s* @st_pdf14_mask, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i32 0, i32 0)) #7
  %4 = bitcast i8* %call to %struct.pdf14_mask_s*
  store %struct.pdf14_mask_s* %4, %struct.pdf14_mask_s** %result, align 8, !tbaa !1
  %5 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %result, align 8, !tbaa !1
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %5, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %6 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %result, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %6, i32 0, i32 1
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %previous, align 8, !tbaa !318
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %result, align 8, !tbaa !1
  %memory1 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %8, i32 0, i32 2
  store %struct.gs_memory_s* %7, %struct.gs_memory_s** %memory1, align 8, !tbaa !321
  %9 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %result, align 8, !tbaa !1
  %10 = bitcast %struct.pdf14_mask_s** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #2
  ret %struct.pdf14_mask_s* %9
}

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_rcmask_s* @pdf14_rcmask_new(%struct.gs_memory_s* %memory) #1 {
entry:
  %retval = alloca %struct.pdf14_rcmask_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %result = alloca %struct.pdf14_rcmask_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_rcmask_s** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %1, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %2 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %3 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call = call i8* %2(%struct.gs_memory_s* %3, %struct.gs_memory_struct_type_s* @st_pdf14_rcmask, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i32 0, i32 0)) #7
  %4 = bitcast i8* %call to %struct.pdf14_rcmask_s*
  store %struct.pdf14_rcmask_s* %4, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %5 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %cmp = icmp eq %struct.pdf14_rcmask_s* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %6, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  store i64 1, i64* %ref_count, align 8, !tbaa !316
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %8 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %rc1 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %8, i32 0, i32 1
  %memory2 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc1, i32 0, i32 1
  store %struct.gs_memory_s* %7, %struct.gs_memory_s** %memory2, align 8, !tbaa !320
  %9 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %rc3 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %9, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc3, i32 0, i32 2
  store void (%struct.gs_memory_s*, i8*, i8*)* @rc_pdf14_maskbuf_free, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  br label %do.body.4

do.body.4:                                        ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %do.body.4
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.cond.5

do.cond.5:                                        ; preds = %do.end
  br label %do.end.6

do.end.6:                                         ; preds = %do.cond.5
  %10 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %mask_buf = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %10, i32 0, i32 0
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %mask_buf, align 8, !tbaa !339
  %11 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %12 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  %memory7 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %12, i32 0, i32 2
  store %struct.gs_memory_s* %11, %struct.gs_memory_s** %memory7, align 8, !tbaa !340
  %13 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %result, align 8, !tbaa !1
  store %struct.pdf14_rcmask_s* %13, %struct.pdf14_rcmask_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.6, %if.then
  %14 = bitcast %struct.pdf14_rcmask_s** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #2
  %15 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %retval
  ret %struct.pdf14_rcmask_s* %15
}

; Function Attrs: nounwind uwtable
define internal void @rc_pdf14_maskbuf_free(%struct.gs_memory_s* %mem, i8* %ptr_in, i8* %cname) #1 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %ptr_in.addr = alloca i8*, align 8
  %cname.addr = alloca i8*, align 8
  %rcmask = alloca %struct.pdf14_rcmask_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store i8* %ptr_in, i8** %ptr_in.addr, align 8, !tbaa !1
  store i8* %cname, i8** %cname.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_rcmask_s** %rcmask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load i8*, i8** %ptr_in.addr, align 8, !tbaa !1
  %2 = bitcast i8* %1 to %struct.pdf14_rcmask_s*
  store %struct.pdf14_rcmask_s* %2, %struct.pdf14_rcmask_s** %rcmask, align 8, !tbaa !1
  %3 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rcmask, align 8, !tbaa !1
  %mask_buf = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %3, i32 0, i32 0
  %4 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %mask_buf, align 8, !tbaa !339
  %cmp = icmp ne %struct.pdf14_buf_s* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rcmask, align 8, !tbaa !1
  %mask_buf1 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %mask_buf1, align 8, !tbaa !339
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  call void @pdf14_buf_free(%struct.pdf14_buf_s* %6, %struct.gs_memory_s* %7) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %8, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %9 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %11 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rcmask, align 8, !tbaa !1
  %12 = bitcast %struct.pdf14_rcmask_s* %11 to i8*
  call void %9(%struct.gs_memory_s* %10, i8* %12, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.34, i32 0, i32 0)) #7
  %13 = bitcast %struct.pdf14_rcmask_s** %rcmask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_buf_free(%struct.pdf14_buf_s* %buf, %struct.gs_memory_s* %memory) #1 {
entry:
  %buf.addr = alloca %struct.pdf14_buf_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  store %struct.pdf14_buf_s* %buf, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %0 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %0, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %1 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %2 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %3 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %3, i32 0, i32 18
  %4 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !308
  %5 = bitcast %struct.pdf14_mask_s* %4 to i8*
  call void %1(%struct.gs_memory_s* %2, i8* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %6 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs1 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %6, i32 0, i32 1
  %free_object2 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs1, i32 0, i32 2
  %7 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object2, align 8, !tbaa !166
  %8 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %9 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %transfer_fn = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %9, i32 0, i32 16
  %10 = load i8*, i8** %transfer_fn, align 8, !tbaa !306
  call void %7(%struct.gs_memory_s* %8, i8* %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %11 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs3 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %11, i32 0, i32 1
  %free_object4 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs3, i32 0, i32 2
  %12 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object4, align 8, !tbaa !166
  %13 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %14 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %14, i32 0, i32 15
  %15 = load i8*, i8** %data, align 8, !tbaa !36
  call void %12(%struct.gs_memory_s* %13, i8* %15, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %16 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs5 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %16, i32 0, i32 1
  %free_object6 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs5, i32 0, i32 2
  %17 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object6, align 8, !tbaa !166
  %18 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %19 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %19, i32 0, i32 22
  %20 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  %21 = bitcast %struct.pdf14_parent_color_s* %20 to i8*
  call void %17(%struct.gs_memory_s* %18, i8* %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %22 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs7 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %22, i32 0, i32 1
  %free_object8 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs7, i32 0, i32 2
  %23 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object8, align 8, !tbaa !166
  %24 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %25 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %backdrop = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %25, i32 0, i32 1
  %26 = load i8*, i8** %backdrop, align 8, !tbaa !307
  call void %23(%struct.gs_memory_s* %24, i8* %26, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %27 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs9 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %27, i32 0, i32 1
  %free_object10 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs9, i32 0, i32 2
  %28 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object10, align 8, !tbaa !166
  %29 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf.addr, align 8, !tbaa !1
  %31 = bitcast %struct.pdf14_buf_s* %30 to i8*
  call void %28(%struct.gs_memory_s* %29, i8* %31, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_ctx_free(%struct.pdf14_ctx_s* %ctx) #1 {
entry:
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %next = alloca %struct.pdf14_buf_s*, align 8
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_buf_s** %next to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %2, i32 0, i32 1
  %3 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %tobool = icmp ne %struct.pdf14_mask_s* %3, null
  br i1 %tobool, label %if.then, label %if.end.41

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %4 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack1 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %4, i32 0, i32 1
  %5 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack1, align 8, !tbaa !304
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %tobool2 = icmp ne %struct.pdf14_rcmask_s* %6, null
  br i1 %tobool2, label %if.then.3, label %if.end.35

if.then.3:                                        ; preds = %do.body
  br label %do.body.4

do.body.4:                                        ; preds = %if.then.3
  br label %do.body.5

do.body.5:                                        ; preds = %do.body.4
  br label %do.cond

do.cond:                                          ; preds = %do.body.5
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack6 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %7, i32 0, i32 1
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack6, align 8, !tbaa !304
  %rc_mask7 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %8, i32 0, i32 0
  %9 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask7, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %9, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %10 = load i64, i64* %ref_count, align 8, !tbaa !316
  %add = add nsw i64 %10, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !316
  br label %do.cond.8

do.cond.8:                                        ; preds = %do.end
  br label %do.end.9

do.end.9:                                         ; preds = %do.cond.8
  %11 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack10 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %11, i32 0, i32 1
  %12 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack10, align 8, !tbaa !304
  %rc_mask11 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %12, i32 0, i32 0
  %13 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask11, align 8, !tbaa !314
  %rc12 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %13, i32 0, i32 1
  %ref_count13 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc12, i32 0, i32 0
  %14 = load i64, i64* %ref_count13, align 8, !tbaa !316
  %tobool14 = icmp ne i64 %14, 0
  br i1 %tobool14, label %if.else, label %if.then.15

if.then.15:                                       ; preds = %do.end.9
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.body.16
  br label %do.cond.18

do.cond.18:                                       ; preds = %do.body.17
  br label %do.end.19

do.end.19:                                        ; preds = %do.cond.18
  %15 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack20 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %15, i32 0, i32 1
  %16 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack20, align 8, !tbaa !304
  %rc_mask21 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %16, i32 0, i32 0
  %17 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask21, align 8, !tbaa !314
  %rc22 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %17, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc22, i32 0, i32 2
  %18 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  %19 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack23 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %19, i32 0, i32 1
  %20 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack23, align 8, !tbaa !304
  %rc_mask24 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %20, i32 0, i32 0
  %21 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask24, align 8, !tbaa !314
  %rc25 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %21, i32 0, i32 1
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc25, i32 0, i32 1
  %22 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !320
  %23 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack26 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %23, i32 0, i32 1
  %24 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack26, align 8, !tbaa !304
  %rc_mask27 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %24, i32 0, i32 0
  %25 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask27, align 8, !tbaa !314
  %26 = bitcast %struct.pdf14_rcmask_s* %25 to i8*
  call void %18(%struct.gs_memory_s* %22, i8* %26, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0)) #7
  br label %do.cond.28

do.cond.28:                                       ; preds = %do.end.19
  br label %do.end.29

do.end.29:                                        ; preds = %do.cond.28
  %27 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack30 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %27, i32 0, i32 1
  %28 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack30, align 8, !tbaa !304
  %rc_mask31 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %28, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask31, align 8, !tbaa !314
  br label %if.end

if.else:                                          ; preds = %do.end.9
  br label %do.body.32

do.body.32:                                       ; preds = %if.else
  br label %do.cond.33

do.cond.33:                                       ; preds = %do.body.32
  br label %do.end.34

do.end.34:                                        ; preds = %do.cond.33
  br label %if.end

if.end:                                           ; preds = %do.end.34, %do.end.29
  br label %if.end.35

if.end.35:                                        ; preds = %if.end, %do.body
  br label %do.cond.36

do.cond.36:                                       ; preds = %if.end.35
  br label %do.end.37

do.end.37:                                        ; preds = %do.cond.36
  %29 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory38 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %29, i32 0, i32 2
  %30 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory38, align 8, !tbaa !283
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %30, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %31 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %32 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory39 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %32, i32 0, i32 2
  %33 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory39, align 8, !tbaa !283
  %34 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack40 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %34, i32 0, i32 1
  %35 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack40, align 8, !tbaa !304
  %36 = bitcast %struct.pdf14_mask_s* %35 to i8*
  call void %31(%struct.gs_memory_s* %33, i8* %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0)) #7
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.37, %entry
  %37 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %37, i32 0, i32 0
  %38 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %38, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.41
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf14_buf_s* %39, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 0
  %41 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %41, %struct.pdf14_buf_s** %next, align 8, !tbaa !1
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %43 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory42 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %43, i32 0, i32 2
  %44 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory42, align 8, !tbaa !283
  call void @pdf14_buf_free(%struct.pdf14_buf_s* %42, %struct.gs_memory_s* %44) #7
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %next, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %45, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory43 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %46, i32 0, i32 2
  %47 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory43, align 8, !tbaa !283
  %procs44 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %47, i32 0, i32 1
  %free_object45 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs44, i32 0, i32 2
  %48 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object45, align 8, !tbaa !166
  %49 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory46 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %49, i32 0, i32 2
  %50 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory46, align 8, !tbaa !283
  %51 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %52 = bitcast %struct.pdf14_ctx_s* %51 to i8*
  call void %48(%struct.gs_memory_s* %50, i8* %52, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0)) #7
  %53 = bitcast %struct.pdf14_buf_s** %next to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #2
  %54 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_mark_fill_rectangle_ko_simple(%struct.gx_device_s* %dev, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color, %struct.gx_device_color_s* %pdc, i32 %devn) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %devn.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %line = alloca i8*, align 8
  %dst_ptr = alloca i8*, align 8
  %src = alloca [67 x i8], align 16
  %dst = alloca [67 x i8], align 16
  %rowstride = alloca i32, align 4
  %planestride = alloca i32, align 4
  %num_chan = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %shape_off = alloca i32, align 4
  %has_shape = alloca i32, align 4
  %has_alpha_g = alloca i32, align 4
  %alpha_g_off = alloca i32, align 4
  %tag_off = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %additive = alloca i32, align 4
  %curr_tag = alloca i32, align 4
  %mask = alloca i64, align 8
  %shift = alloca i32, align 4
  %shape = alloca i8, align 1
  %src_alpha = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  %tmp = alloca i32, align 4
  %tmp322 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !68
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store i32 %devn, i32* %devn.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i8** %line to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.start(i64 67, i8* %12) #2
  %13 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.start(i64 67, i8* %13) #2
  %14 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %15, i32 0, i32 11
  %16 = load i32, i32* %rowstride1, align 4, !tbaa !59
  store i32 %16, i32* %rowstride, align 4, !tbaa !5
  %17 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %18, i32 0, i32 12
  %19 = load i32, i32* %planestride2, align 4, !tbaa !58
  store i32 %19, i32* %planestride, align 4, !tbaa !5
  %20 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  %21 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %21, i32 0, i32 13
  %22 = load i32, i32* %n_chan, align 4, !tbaa !38
  store i32 %22, i32* %num_chan, align 4, !tbaa !5
  %23 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #2
  %24 = load i32, i32* %num_chan, align 4, !tbaa !5
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  %25 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %25) #2
  %26 = load i32, i32* %num_chan, align 4, !tbaa !5
  %27 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul = mul nsw i32 %26, %27
  store i32 %mul, i32* %shape_off, align 4, !tbaa !5
  %28 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_shape3 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %29, i32 0, i32 8
  %30 = load i32, i32* %has_shape3, align 4, !tbaa !40
  store i32 %30, i32* %has_shape, align 4, !tbaa !5
  %31 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #2
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_alpha_g4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 7
  %33 = load i32, i32* %has_alpha_g4, align 4, !tbaa !332
  store i32 %33, i32* %has_alpha_g, align 4, !tbaa !5
  %34 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #2
  %35 = load i32, i32* %shape_off, align 4, !tbaa !5
  %36 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool = icmp ne i32 %36, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %37 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %37, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %35, %cond
  store i32 %add, i32* %alpha_g_off, align 4, !tbaa !5
  %38 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #2
  %39 = load i32, i32* %shape_off, align 4, !tbaa !5
  %40 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool5 = icmp ne i32 %40, 0
  br i1 %tobool5, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %cond.end
  %41 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end.8

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.6
  %cond9 = phi i32 [ %41, %cond.true.6 ], [ 0, %cond.false.7 ]
  %add10 = add nsw i32 %39, %cond9
  %42 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool11 = icmp ne i32 %42, 0
  br i1 %tobool11, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.end.8
  %43 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.end.8
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.12
  %cond15 = phi i32 [ %43, %cond.true.12 ], [ 0, %cond.false.13 ]
  %add16 = add nsw i32 %add10, %cond15
  store i32 %add16, i32* %tag_off, align 4, !tbaa !5
  %44 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #2
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags17 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 9
  %46 = load i32, i32* %has_tags17, align 4, !tbaa !327
  store i32 %46, i32* %has_tags, align 4, !tbaa !5
  %47 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %47) #2
  %48 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %48, i32 0, i32 47
  %49 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx18, align 8, !tbaa !7
  %additive19 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %49, i32 0, i32 4
  %50 = load i32, i32* %additive19, align 4, !tbaa !272
  store i32 %50, i32* %additive, align 4, !tbaa !5
  %51 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.start(i64 4, i8* %51) #2
  %52 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %52, i32 0, i32 40
  %53 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %53, -129
  store i32 %and, i32* %curr_tag, align 4, !tbaa !66
  %54 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %54) #2
  store i64 255, i64* %mask, align 8, !tbaa !68
  %55 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %55) #2
  store i32 8, i32* %shift, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %shape) #2
  store i8 0, i8* %shape, align 1, !tbaa !66
  call void @llvm.lifetime.start(i64 1, i8* %src_alpha) #2
  %56 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %56, i32 0, i32 15
  %57 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp = icmp eq i8* %57, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.14
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.end.14
  %58 = load i32, i32* %devn.addr, align 4, !tbaa !5
  %tobool20 = icmp ne i32 %58, 0
  br i1 %tobool20, label %if.then.21, label %if.else.52

if.then.21:                                       ; preds = %if.end
  %59 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool22 = icmp ne i32 %59, 0
  br i1 %tobool22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %if.then.21
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.23
  %60 = load i32, i32* %j, align 4, !tbaa !5
  %61 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp24 = icmp slt i32 %60, %61
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %62 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom = sext i32 %62 to i64
  %63 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %63, i32 0, i32 1
  %devn25 = bitcast %union._c* %colors to %struct._devn*
  %values = getelementptr inbounds %struct._devn, %struct._devn* %devn25, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %values, i32 0, i64 %idxprom
  %64 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv = zext i16 %64 to i32
  %65 = load i32, i32* %shift, align 4, !tbaa !5
  %shr = ashr i32 %conv, %65
  %conv26 = sext i32 %shr to i64
  %66 = load i64, i64* %mask, align 8, !tbaa !68
  %and27 = and i64 %conv26, %66
  %conv28 = trunc i64 %and27 to i8
  %67 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom29 = sext i32 %67 to i64
  %arrayidx30 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom29
  store i8 %conv28, i8* %arrayidx30, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %68 = load i32, i32* %j, align 4, !tbaa !5
  %inc = add nsw i32 %68, 1
  store i32 %inc, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.51

if.else:                                          ; preds = %if.then.21
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.48, %if.else
  %69 = load i32, i32* %j, align 4, !tbaa !5
  %70 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp32 = icmp slt i32 %69, %70
  br i1 %cmp32, label %for.body.34, label %for.end.50

for.body.34:                                      ; preds = %for.cond.31
  %71 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom35 = sext i32 %71 to i64
  %72 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors36 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %72, i32 0, i32 1
  %devn37 = bitcast %union._c* %colors36 to %struct._devn*
  %values38 = getelementptr inbounds %struct._devn, %struct._devn* %devn37, i32 0, i32 0
  %arrayidx39 = getelementptr inbounds [64 x i16], [64 x i16]* %values38, i32 0, i64 %idxprom35
  %73 = load i16, i16* %arrayidx39, align 2, !tbaa !67
  %conv40 = zext i16 %73 to i32
  %74 = load i32, i32* %shift, align 4, !tbaa !5
  %shr41 = ashr i32 %conv40, %74
  %conv42 = sext i32 %shr41 to i64
  %75 = load i64, i64* %mask, align 8, !tbaa !68
  %and43 = and i64 %conv42, %75
  %sub44 = sub i64 255, %and43
  %conv45 = trunc i64 %sub44 to i8
  %76 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom46 = sext i32 %76 to i64
  %arrayidx47 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom46
  store i8 %conv45, i8* %arrayidx47, align 1, !tbaa !66
  br label %for.inc.48

for.inc.48:                                       ; preds = %for.body.34
  %77 = load i32, i32* %j, align 4, !tbaa !5
  %inc49 = add nsw i32 %77, 1
  store i32 %inc49, i32* %j, align 4, !tbaa !5
  br label %for.cond.31

for.end.50:                                       ; preds = %for.cond.31
  br label %if.end.51

if.end.51:                                        ; preds = %for.end.50, %for.end
  br label %if.end.53

if.else.52:                                       ; preds = %if.end
  %78 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %78, i32 0, i32 45
  %79 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %unpack_color = getelementptr inbounds %struct.pdf14_procs_s, %struct.pdf14_procs_s* %79, i32 0, i32 0
  %80 = load void (i32, i64, %struct.pdf14_device_s*, i8*)*, void (i32, i64, %struct.pdf14_device_s*, i8*)** %unpack_color, align 8, !tbaa !341
  %81 = load i32, i32* %num_comp, align 4, !tbaa !5
  %82 = load i64, i64* %color.addr, align 8, !tbaa !68
  %83 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  call void %80(i32 %81, i64 %82, %struct.pdf14_device_s* %83, i8* %arraydecay) #7
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.52, %if.end.51
  %84 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %84, i32 0, i32 51
  %85 = load float, float* %alpha, align 4, !tbaa !343
  %mul54 = fmul float 2.550000e+02, %85
  %conv55 = fpext float %mul54 to double
  %add56 = fadd double %conv55, 5.000000e-01
  %call = call double @floor(double %add56) #9
  %conv57 = fptoui double %call to i8
  %86 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom58 = sext i32 %86 to i64
  %arrayidx59 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom58
  store i8 %conv57, i8* %arrayidx59, align 1, !tbaa !66
  store i8 %conv57, i8* %src_alpha, align 1, !tbaa !66
  %87 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool60 = icmp ne i32 %87, 0
  br i1 %tobool60, label %if.then.61, label %if.else.68

if.then.61:                                       ; preds = %if.end.53
  %88 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %shape62 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %88, i32 0, i32 50
  %89 = load float, float* %shape62, align 4, !tbaa !344
  %mul63 = fmul float 2.550000e+02, %89
  %conv64 = fpext float %mul63 to double
  %add65 = fadd double %conv64, 5.000000e-01
  %call66 = call double @floor(double %add65) #9
  %conv67 = fptoui double %call66 to i8
  store i8 %conv67, i8* %shape, align 1, !tbaa !66
  br label %if.end.69

if.else.68:                                       ; preds = %if.end.53
  store i32 0, i32* %shape_off, align 4, !tbaa !5
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.68, %if.then.61
  %90 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool70 = icmp ne i32 %90, 0
  br i1 %tobool70, label %if.then.71, label %if.else.76

if.then.71:                                       ; preds = %if.end.69
  %91 = load i64, i64* %color.addr, align 8, !tbaa !68
  %92 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul72 = mul nsw i32 %92, 8
  %sh_prom = zext i32 %mul72 to i64
  %shr73 = lshr i64 %91, %sh_prom
  %and74 = and i64 %shr73, 255
  %conv75 = trunc i64 %and74 to i32
  store i32 %conv75, i32* %curr_tag, align 4, !tbaa !66
  br label %if.end.77

if.else.76:                                       ; preds = %if.end.69
  store i32 0, i32* %tag_off, align 4, !tbaa !5
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.76, %if.then.71
  %93 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool78 = icmp ne i32 %93, 0
  br i1 %tobool78, label %if.end.80, label %if.then.79

if.then.79:                                       ; preds = %if.end.77
  store i32 0, i32* %alpha_g_off, align 4, !tbaa !5
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %if.end.77
  %94 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv81 = zext i8 %94 to i32
  %sub82 = sub nsw i32 255, %conv81
  %conv83 = trunc i32 %sub82 to i8
  store i8 %conv83, i8* %src_alpha, align 1, !tbaa !66
  %95 = load i8, i8* %shape, align 1, !tbaa !66
  %conv84 = zext i8 %95 to i32
  %sub85 = sub nsw i32 255, %conv84
  %conv86 = trunc i32 %sub85 to i8
  store i8 %conv86, i8* %shape, align 1, !tbaa !66
  %96 = load i32, i32* %x.addr, align 4, !tbaa !5
  %97 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %97, i32 0, i32 10
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x87 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %98 = load i32, i32* %x87, align 4, !tbaa !43
  %cmp88 = icmp slt i32 %96, %98
  br i1 %cmp88, label %if.then.90, label %if.end.99

if.then.90:                                       ; preds = %if.end.80
  %99 = load i32, i32* %x.addr, align 4, !tbaa !5
  %100 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect91 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %100, i32 0, i32 10
  %p92 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect91, i32 0, i32 0
  %x93 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p92, i32 0, i32 0
  %101 = load i32, i32* %x93, align 4, !tbaa !43
  %sub94 = sub nsw i32 %99, %101
  %102 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add95 = add nsw i32 %102, %sub94
  store i32 %add95, i32* %w.addr, align 4, !tbaa !5
  %103 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect96 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %103, i32 0, i32 10
  %p97 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect96, i32 0, i32 0
  %x98 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p97, i32 0, i32 0
  %104 = load i32, i32* %x98, align 4, !tbaa !43
  store i32 %104, i32* %x.addr, align 4, !tbaa !5
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.90, %if.end.80
  %105 = load i32, i32* %y.addr, align 4, !tbaa !5
  %106 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect100 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %106, i32 0, i32 10
  %p101 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect100, i32 0, i32 0
  %y102 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p101, i32 0, i32 1
  %107 = load i32, i32* %y102, align 4, !tbaa !46
  %cmp103 = icmp slt i32 %105, %107
  br i1 %cmp103, label %if.then.105, label %if.end.114

if.then.105:                                      ; preds = %if.end.99
  %108 = load i32, i32* %y.addr, align 4, !tbaa !5
  %109 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect106 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %109, i32 0, i32 10
  %p107 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect106, i32 0, i32 0
  %y108 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p107, i32 0, i32 1
  %110 = load i32, i32* %y108, align 4, !tbaa !46
  %sub109 = sub nsw i32 %108, %110
  %111 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add110 = add nsw i32 %111, %sub109
  store i32 %add110, i32* %h.addr, align 4, !tbaa !5
  %112 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect111 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %112, i32 0, i32 10
  %p112 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect111, i32 0, i32 0
  %y113 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p112, i32 0, i32 1
  %113 = load i32, i32* %y113, align 4, !tbaa !46
  store i32 %113, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.105, %if.end.99
  %114 = load i32, i32* %x.addr, align 4, !tbaa !5
  %115 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add115 = add nsw i32 %114, %115
  %116 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect116 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %116, i32 0, i32 10
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect116, i32 0, i32 1
  %x117 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %117 = load i32, i32* %x117, align 4, !tbaa !42
  %cmp118 = icmp sgt i32 %add115, %117
  br i1 %cmp118, label %if.then.120, label %if.end.125

if.then.120:                                      ; preds = %if.end.114
  %118 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect121 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %118, i32 0, i32 10
  %q122 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect121, i32 0, i32 1
  %x123 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q122, i32 0, i32 0
  %119 = load i32, i32* %x123, align 4, !tbaa !42
  %120 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub124 = sub nsw i32 %119, %120
  store i32 %sub124, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.120, %if.end.114
  %121 = load i32, i32* %y.addr, align 4, !tbaa !5
  %122 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add126 = add nsw i32 %121, %122
  %123 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect127 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %123, i32 0, i32 10
  %q128 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect127, i32 0, i32 1
  %y129 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q128, i32 0, i32 1
  %124 = load i32, i32* %y129, align 4, !tbaa !45
  %cmp130 = icmp sgt i32 %add126, %124
  br i1 %cmp130, label %if.then.132, label %if.end.137

if.then.132:                                      ; preds = %if.end.125
  %125 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect133 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %125, i32 0, i32 10
  %q134 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect133, i32 0, i32 1
  %y135 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q134, i32 0, i32 1
  %126 = load i32, i32* %y135, align 4, !tbaa !45
  %127 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub136 = sub nsw i32 %126, %127
  store i32 %sub136, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.132, %if.end.125
  %128 = load i32, i32* %x.addr, align 4, !tbaa !5
  %129 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %129, i32 0, i32 17
  %p138 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x139 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p138, i32 0, i32 0
  %130 = load i32, i32* %x139, align 4, !tbaa !335
  %cmp140 = icmp slt i32 %128, %130
  br i1 %cmp140, label %if.then.142, label %if.end.146

if.then.142:                                      ; preds = %if.end.137
  %131 = load i32, i32* %x.addr, align 4, !tbaa !5
  %132 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty143 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %132, i32 0, i32 17
  %p144 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty143, i32 0, i32 0
  %x145 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p144, i32 0, i32 0
  store i32 %131, i32* %x145, align 4, !tbaa !335
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.142, %if.end.137
  %133 = load i32, i32* %y.addr, align 4, !tbaa !5
  %134 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty147 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %134, i32 0, i32 17
  %p148 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty147, i32 0, i32 0
  %y149 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p148, i32 0, i32 1
  %135 = load i32, i32* %y149, align 4, !tbaa !336
  %cmp150 = icmp slt i32 %133, %135
  br i1 %cmp150, label %if.then.152, label %if.end.156

if.then.152:                                      ; preds = %if.end.146
  %136 = load i32, i32* %y.addr, align 4, !tbaa !5
  %137 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty153 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %137, i32 0, i32 17
  %p154 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty153, i32 0, i32 0
  %y155 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p154, i32 0, i32 1
  store i32 %136, i32* %y155, align 4, !tbaa !336
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.152, %if.end.146
  %138 = load i32, i32* %x.addr, align 4, !tbaa !5
  %139 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add157 = add nsw i32 %138, %139
  %140 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty158 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %140, i32 0, i32 17
  %q159 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty158, i32 0, i32 1
  %x160 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q159, i32 0, i32 0
  %141 = load i32, i32* %x160, align 4, !tbaa !337
  %cmp161 = icmp sgt i32 %add157, %141
  br i1 %cmp161, label %if.then.163, label %if.end.168

if.then.163:                                      ; preds = %if.end.156
  %142 = load i32, i32* %x.addr, align 4, !tbaa !5
  %143 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add164 = add nsw i32 %142, %143
  %144 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty165 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %144, i32 0, i32 17
  %q166 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty165, i32 0, i32 1
  %x167 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q166, i32 0, i32 0
  store i32 %add164, i32* %x167, align 4, !tbaa !337
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.163, %if.end.156
  %145 = load i32, i32* %y.addr, align 4, !tbaa !5
  %146 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add169 = add nsw i32 %145, %146
  %147 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty170 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %147, i32 0, i32 17
  %q171 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty170, i32 0, i32 1
  %y172 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q171, i32 0, i32 1
  %148 = load i32, i32* %y172, align 4, !tbaa !338
  %cmp173 = icmp sgt i32 %add169, %148
  br i1 %cmp173, label %if.then.175, label %if.end.180

if.then.175:                                      ; preds = %if.end.168
  %149 = load i32, i32* %y.addr, align 4, !tbaa !5
  %150 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add176 = add nsw i32 %149, %150
  %151 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty177 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %151, i32 0, i32 17
  %q178 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty177, i32 0, i32 1
  %y179 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q178, i32 0, i32 1
  store i32 %add176, i32* %y179, align 4, !tbaa !338
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.175, %if.end.168
  %152 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data181 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %152, i32 0, i32 15
  %153 = load i8*, i8** %data181, align 8, !tbaa !36
  %154 = load i32, i32* %x.addr, align 4, !tbaa !5
  %155 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect182 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %155, i32 0, i32 10
  %p183 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect182, i32 0, i32 0
  %x184 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p183, i32 0, i32 0
  %156 = load i32, i32* %x184, align 4, !tbaa !43
  %sub185 = sub nsw i32 %154, %156
  %idx.ext = sext i32 %sub185 to i64
  %add.ptr = getelementptr inbounds i8, i8* %153, i64 %idx.ext
  %157 = load i32, i32* %y.addr, align 4, !tbaa !5
  %158 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect186 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %158, i32 0, i32 10
  %p187 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect186, i32 0, i32 0
  %y188 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p187, i32 0, i32 1
  %159 = load i32, i32* %y188, align 4, !tbaa !46
  %sub189 = sub nsw i32 %157, %159
  %160 = load i32, i32* %rowstride, align 4, !tbaa !5
  %mul190 = mul nsw i32 %sub189, %160
  %idx.ext191 = sext i32 %mul190 to i64
  %add.ptr192 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext191
  store i8* %add.ptr192, i8** %line, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.193

for.cond.193:                                     ; preds = %for.inc.343, %if.end.180
  %161 = load i32, i32* %j, align 4, !tbaa !5
  %162 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp194 = icmp slt i32 %161, %162
  br i1 %cmp194, label %for.body.196, label %for.end.345

for.body.196:                                     ; preds = %for.cond.193
  %163 = load i8*, i8** %line, align 8, !tbaa !1
  store i8* %163, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.197

for.cond.197:                                     ; preds = %for.inc.338, %for.body.196
  %164 = load i32, i32* %i, align 4, !tbaa !5
  %165 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp198 = icmp slt i32 %164, %165
  br i1 %cmp198, label %for.body.200, label %for.end.340

for.body.200:                                     ; preds = %for.cond.197
  %166 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool201 = icmp ne i32 %166, 0
  br i1 %tobool201, label %if.then.202, label %if.else.215

if.then.202:                                      ; preds = %for.body.200
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.203

for.cond.203:                                     ; preds = %for.inc.212, %if.then.202
  %167 = load i32, i32* %k, align 4, !tbaa !5
  %168 = load i32, i32* %num_chan, align 4, !tbaa !5
  %cmp204 = icmp slt i32 %167, %168
  br i1 %cmp204, label %for.body.206, label %for.end.214

for.body.206:                                     ; preds = %for.cond.203
  %169 = load i32, i32* %k, align 4, !tbaa !5
  %170 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul207 = mul nsw i32 %169, %170
  %idxprom208 = sext i32 %mul207 to i64
  %171 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx209 = getelementptr inbounds i8, i8* %171, i64 %idxprom208
  %172 = load i8, i8* %arrayidx209, align 1, !tbaa !66
  %173 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom210 = sext i32 %173 to i64
  %arrayidx211 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom210
  store i8 %172, i8* %arrayidx211, align 1, !tbaa !66
  br label %for.inc.212

for.inc.212:                                      ; preds = %for.body.206
  %174 = load i32, i32* %k, align 4, !tbaa !5
  %inc213 = add nsw i32 %174, 1
  store i32 %inc213, i32* %k, align 4, !tbaa !5
  br label %for.cond.203

for.end.214:                                      ; preds = %for.cond.203
  br label %if.end.236

if.else.215:                                      ; preds = %for.body.200
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.216

for.cond.216:                                     ; preds = %for.inc.228, %if.else.215
  %175 = load i32, i32* %k, align 4, !tbaa !5
  %176 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp217 = icmp slt i32 %175, %176
  br i1 %cmp217, label %for.body.219, label %for.end.230

for.body.219:                                     ; preds = %for.cond.216
  %177 = load i32, i32* %k, align 4, !tbaa !5
  %178 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul220 = mul nsw i32 %177, %178
  %idxprom221 = sext i32 %mul220 to i64
  %179 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx222 = getelementptr inbounds i8, i8* %179, i64 %idxprom221
  %180 = load i8, i8* %arrayidx222, align 1, !tbaa !66
  %conv223 = zext i8 %180 to i32
  %sub224 = sub nsw i32 255, %conv223
  %conv225 = trunc i32 %sub224 to i8
  %181 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom226 = sext i32 %181 to i64
  %arrayidx227 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom226
  store i8 %conv225, i8* %arrayidx227, align 1, !tbaa !66
  br label %for.inc.228

for.inc.228:                                      ; preds = %for.body.219
  %182 = load i32, i32* %k, align 4, !tbaa !5
  %inc229 = add nsw i32 %182, 1
  store i32 %inc229, i32* %k, align 4, !tbaa !5
  br label %for.cond.216

for.end.230:                                      ; preds = %for.cond.216
  %183 = load i32, i32* %num_comp, align 4, !tbaa !5
  %184 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul231 = mul nsw i32 %183, %184
  %idxprom232 = sext i32 %mul231 to i64
  %185 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx233 = getelementptr inbounds i8, i8* %185, i64 %idxprom232
  %186 = load i8, i8* %arrayidx233, align 1, !tbaa !66
  %187 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom234 = sext i32 %187 to i64
  %arrayidx235 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom234
  store i8 %186, i8* %arrayidx235, align 1, !tbaa !66
  br label %if.end.236

if.end.236:                                       ; preds = %for.end.230, %for.end.214
  %188 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %188, i32 0, i32 2
  %189 = load i32, i32* %isolated, align 4, !tbaa !331
  %tobool237 = icmp ne i32 %189, 0
  br i1 %tobool237, label %if.then.238, label %if.else.241

if.then.238:                                      ; preds = %if.end.236
  %arraydecay239 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %arraydecay240 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %190 = load i32, i32* %num_comp, align 4, !tbaa !5
  call void @art_pdf_knockoutisolated_group_8(i8* %arraydecay239, i8* %arraydecay240, i32 %190) #7
  br label %if.end.259

if.else.241:                                      ; preds = %if.end.236
  %arraydecay242 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %191 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool243 = icmp ne i32 %191, 0
  br i1 %tobool243, label %cond.true.244, label %cond.false.247

cond.true.244:                                    ; preds = %if.else.241
  %192 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %193 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idx.ext245 = sext i32 %193 to i64
  %add.ptr246 = getelementptr inbounds i8, i8* %192, i64 %idx.ext245
  br label %cond.end.248

cond.false.247:                                   ; preds = %if.else.241
  br label %cond.end.248

cond.end.248:                                     ; preds = %cond.false.247, %cond.true.244
  %cond249 = phi i8* [ %add.ptr246, %cond.true.244 ], [ null, %cond.false.247 ]
  %194 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool250 = icmp ne i32 %194, 0
  br i1 %tobool250, label %cond.true.251, label %cond.false.254

cond.true.251:                                    ; preds = %cond.end.248
  %195 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %196 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idx.ext252 = sext i32 %196 to i64
  %add.ptr253 = getelementptr inbounds i8, i8* %195, i64 %idx.ext252
  br label %cond.end.255

cond.false.254:                                   ; preds = %cond.end.248
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.false.254, %cond.true.251
  %cond256 = phi i8* [ %add.ptr253, %cond.true.251 ], [ null, %cond.false.254 ]
  %arraydecay257 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %197 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv258 = trunc i32 %197 to i8
  %198 = load i32, i32* %num_comp, align 4, !tbaa !5
  call void @art_pdf_composite_knockout_simple_8(i8* %arraydecay242, i8* %cond249, i8* %cond256, i8* %arraydecay257, i8 zeroext %conv258, i32 %198, i8 zeroext -1) #7
  br label %if.end.259

if.end.259:                                       ; preds = %cond.end.255, %if.then.238
  %199 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool260 = icmp ne i32 %199, 0
  br i1 %tobool260, label %if.then.261, label %if.else.274

if.then.261:                                      ; preds = %if.end.259
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.262

for.cond.262:                                     ; preds = %for.inc.271, %if.then.261
  %200 = load i32, i32* %k, align 4, !tbaa !5
  %201 = load i32, i32* %num_chan, align 4, !tbaa !5
  %cmp263 = icmp slt i32 %200, %201
  br i1 %cmp263, label %for.body.265, label %for.end.273

for.body.265:                                     ; preds = %for.cond.262
  %202 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom266 = sext i32 %202 to i64
  %arrayidx267 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom266
  %203 = load i8, i8* %arrayidx267, align 1, !tbaa !66
  %204 = load i32, i32* %k, align 4, !tbaa !5
  %205 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul268 = mul nsw i32 %204, %205
  %idxprom269 = sext i32 %mul268 to i64
  %206 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx270 = getelementptr inbounds i8, i8* %206, i64 %idxprom269
  store i8 %203, i8* %arrayidx270, align 1, !tbaa !66
  br label %for.inc.271

for.inc.271:                                      ; preds = %for.body.265
  %207 = load i32, i32* %k, align 4, !tbaa !5
  %inc272 = add nsw i32 %207, 1
  store i32 %inc272, i32* %k, align 4, !tbaa !5
  br label %for.cond.262

for.end.273:                                      ; preds = %for.cond.262
  br label %if.end.295

if.else.274:                                      ; preds = %if.end.259
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.275

for.cond.275:                                     ; preds = %for.inc.287, %if.else.274
  %208 = load i32, i32* %k, align 4, !tbaa !5
  %209 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp276 = icmp slt i32 %208, %209
  br i1 %cmp276, label %for.body.278, label %for.end.289

for.body.278:                                     ; preds = %for.cond.275
  %210 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom279 = sext i32 %210 to i64
  %arrayidx280 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom279
  %211 = load i8, i8* %arrayidx280, align 1, !tbaa !66
  %conv281 = zext i8 %211 to i32
  %sub282 = sub nsw i32 255, %conv281
  %conv283 = trunc i32 %sub282 to i8
  %212 = load i32, i32* %k, align 4, !tbaa !5
  %213 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul284 = mul nsw i32 %212, %213
  %idxprom285 = sext i32 %mul284 to i64
  %214 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx286 = getelementptr inbounds i8, i8* %214, i64 %idxprom285
  store i8 %conv283, i8* %arrayidx286, align 1, !tbaa !66
  br label %for.inc.287

for.inc.287:                                      ; preds = %for.body.278
  %215 = load i32, i32* %k, align 4, !tbaa !5
  %inc288 = add nsw i32 %215, 1
  store i32 %inc288, i32* %k, align 4, !tbaa !5
  br label %for.cond.275

for.end.289:                                      ; preds = %for.cond.275
  %216 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom290 = sext i32 %216 to i64
  %arrayidx291 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom290
  %217 = load i8, i8* %arrayidx291, align 1, !tbaa !66
  %218 = load i32, i32* %num_comp, align 4, !tbaa !5
  %219 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul292 = mul nsw i32 %218, %219
  %idxprom293 = sext i32 %mul292 to i64
  %220 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx294 = getelementptr inbounds i8, i8* %220, i64 %idxprom293
  store i8 %217, i8* %arrayidx294, align 1, !tbaa !66
  br label %if.end.295

if.end.295:                                       ; preds = %for.end.289, %for.end.273
  %221 = load i32, i32* %tag_off, align 4, !tbaa !5
  %tobool296 = icmp ne i32 %221, 0
  br i1 %tobool296, label %if.then.297, label %if.end.301

if.then.297:                                      ; preds = %if.end.295
  %222 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv298 = trunc i32 %222 to i8
  %223 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom299 = sext i32 %223 to i64
  %224 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx300 = getelementptr inbounds i8, i8* %224, i64 %idxprom299
  store i8 %conv298, i8* %arrayidx300, align 1, !tbaa !66
  br label %if.end.301

if.end.301:                                       ; preds = %if.then.297, %if.end.295
  %225 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %tobool302 = icmp ne i32 %225, 0
  br i1 %tobool302, label %if.then.303, label %if.end.318

if.then.303:                                      ; preds = %if.end.301
  %226 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %226) #2
  %227 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom304 = sext i32 %227 to i64
  %228 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx305 = getelementptr inbounds i8, i8* %228, i64 %idxprom304
  %229 = load i8, i8* %arrayidx305, align 1, !tbaa !66
  %conv306 = zext i8 %229 to i32
  %sub307 = sub nsw i32 255, %conv306
  %230 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv308 = zext i8 %230 to i32
  %mul309 = mul nsw i32 %sub307, %conv308
  %add310 = add nsw i32 %mul309, 128
  store i32 %add310, i32* %tmp, align 4, !tbaa !5
  %231 = load i32, i32* %tmp, align 4, !tbaa !5
  %232 = load i32, i32* %tmp, align 4, !tbaa !5
  %shr311 = ashr i32 %232, 8
  %add312 = add nsw i32 %231, %shr311
  %shr313 = ashr i32 %add312, 8
  %sub314 = sub nsw i32 255, %shr313
  %conv315 = trunc i32 %sub314 to i8
  %233 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom316 = sext i32 %233 to i64
  %234 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx317 = getelementptr inbounds i8, i8* %234, i64 %idxprom316
  store i8 %conv315, i8* %arrayidx317, align 1, !tbaa !66
  %235 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %235) #2
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.303, %if.end.301
  %236 = load i32, i32* %shape_off, align 4, !tbaa !5
  %tobool319 = icmp ne i32 %236, 0
  br i1 %tobool319, label %if.then.320, label %if.end.337

if.then.320:                                      ; preds = %if.end.318
  %237 = bitcast i32* %tmp322 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %237) #2
  %238 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom323 = sext i32 %238 to i64
  %239 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx324 = getelementptr inbounds i8, i8* %239, i64 %idxprom323
  %240 = load i8, i8* %arrayidx324, align 1, !tbaa !66
  %conv325 = zext i8 %240 to i32
  %sub326 = sub nsw i32 255, %conv325
  %241 = load i8, i8* %shape, align 1, !tbaa !66
  %conv327 = zext i8 %241 to i32
  %mul328 = mul nsw i32 %sub326, %conv327
  %add329 = add nsw i32 %mul328, 128
  store i32 %add329, i32* %tmp322, align 4, !tbaa !5
  %242 = load i32, i32* %tmp322, align 4, !tbaa !5
  %243 = load i32, i32* %tmp322, align 4, !tbaa !5
  %shr330 = ashr i32 %243, 8
  %add331 = add nsw i32 %242, %shr330
  %shr332 = ashr i32 %add331, 8
  %sub333 = sub nsw i32 255, %shr332
  %conv334 = trunc i32 %sub333 to i8
  %244 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom335 = sext i32 %244 to i64
  %245 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx336 = getelementptr inbounds i8, i8* %245, i64 %idxprom335
  store i8 %conv334, i8* %arrayidx336, align 1, !tbaa !66
  %246 = bitcast i32* %tmp322 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %246) #2
  br label %if.end.337

if.end.337:                                       ; preds = %if.then.320, %if.end.318
  %247 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %247, i32 1
  store i8* %incdec.ptr, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.338

for.inc.338:                                      ; preds = %if.end.337
  %248 = load i32, i32* %i, align 4, !tbaa !5
  %inc339 = add nsw i32 %248, 1
  store i32 %inc339, i32* %i, align 4, !tbaa !5
  br label %for.cond.197

for.end.340:                                      ; preds = %for.cond.197
  %249 = load i32, i32* %rowstride, align 4, !tbaa !5
  %250 = load i8*, i8** %line, align 8, !tbaa !1
  %idx.ext341 = sext i32 %249 to i64
  %add.ptr342 = getelementptr inbounds i8, i8* %250, i64 %idx.ext341
  store i8* %add.ptr342, i8** %line, align 8, !tbaa !1
  br label %for.inc.343

for.inc.343:                                      ; preds = %for.end.340
  %251 = load i32, i32* %j, align 4, !tbaa !5
  %inc344 = add nsw i32 %251, 1
  store i32 %inc344, i32* %j, align 4, !tbaa !5
  br label %for.cond.193

for.end.345:                                      ; preds = %for.cond.193
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.345, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %src_alpha) #2
  call void @llvm.lifetime.end(i64 1, i8* %shape) #2
  %252 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %252) #2
  %253 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %253) #2
  %254 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.end(i64 4, i8* %254) #2
  %255 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %255) #2
  %256 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %256) #2
  %257 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %257) #2
  %258 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %258) #2
  %259 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.end(i64 4, i8* %259) #2
  %260 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %260) #2
  %261 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %261) #2
  %262 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %262) #2
  %263 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.end(i64 4, i8* %263) #2
  %264 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %264) #2
  %265 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %265) #2
  %266 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.end(i64 67, i8* %266) #2
  %267 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.end(i64 67, i8* %267) #2
  %268 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %268) #2
  %269 = bitcast i8** %line to i8*
  call void @llvm.lifetime.end(i64 8, i8* %269) #2
  %270 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %270) #2
  %271 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %271) #2
  %272 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %272) #2
  %273 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %273) #2
  %274 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %274) #2
  %275 = load i32, i32* %retval
  ret i32 %275
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_mark_fill_rectangle(%struct.gx_device_s* %dev, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color, %struct.gx_device_color_s* %pdc, i32 %devn) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %devn.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %dst_ptr = alloca i8*, align 8
  %src = alloca [67 x i8], align 16
  %dst = alloca [67 x i8], align 16
  %blend_mode = alloca i32, align 4
  %additive = alloca i32, align 4
  %rowstride = alloca i32, align 4
  %planestride = alloca i32, align 4
  %curr_tag = alloca i32, align 4
  %has_alpha_g = alloca i32, align 4
  %has_shape = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %num_chan = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %shape_off = alloca i32, align 4
  %alpha_g_off = alloca i32, align 4
  %tag_off = alloca i32, align 4
  %overprint = alloca i32, align 4
  %blendspot = alloca i32, align 4
  %drawn_comps = alloca i64, align 8
  %comps = alloca i64, align 8
  %shape = alloca i8, align 1
  %src_alpha = alloca i8, align 1
  %mask = alloca i64, align 8
  %shift = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %tmp = alloca i32, align 4
  %tmp249 = alloca i32, align 4
  %temp = alloca i32, align 4
  %tmp447 = alloca i32, align 4
  %tmp466 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !68
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store i32 %devn, i32* %devn.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.start(i64 67, i8* %11) #2
  %12 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.start(i64 67, i8* %12) #2
  %13 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_mode1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 52
  %15 = load i32, i32* %blend_mode1, align 4, !tbaa !48
  store i32 %15, i32* %blend_mode, align 4, !tbaa !66
  %16 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 47
  %18 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx2, align 8, !tbaa !7
  %additive3 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %18, i32 0, i32 4
  %19 = load i32, i32* %additive3, align 4, !tbaa !272
  store i32 %19, i32* %additive, align 4, !tbaa !5
  %20 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  %21 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %21, i32 0, i32 11
  %22 = load i32, i32* %rowstride4, align 4, !tbaa !59
  store i32 %22, i32* %rowstride, align 4, !tbaa !5
  %23 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #2
  %24 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride5 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %24, i32 0, i32 12
  %25 = load i32, i32* %planestride5, align 4, !tbaa !58
  store i32 %25, i32* %planestride, align 4, !tbaa !5
  %26 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #2
  store i32 0, i32* %curr_tag, align 4, !tbaa !66
  %27 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.start(i64 4, i8* %27) #2
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_alpha_g6 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %28, i32 0, i32 7
  %29 = load i32, i32* %has_alpha_g6, align 4, !tbaa !332
  store i32 %29, i32* %has_alpha_g, align 4, !tbaa !5
  %30 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %30) #2
  %31 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_shape7 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %31, i32 0, i32 8
  %32 = load i32, i32* %has_shape7, align 4, !tbaa !40
  store i32 %32, i32* %has_shape, align 4, !tbaa !5
  %33 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %33) #2
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags8 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 9
  %35 = load i32, i32* %has_tags8, align 4, !tbaa !327
  store i32 %35, i32* %has_tags, align 4, !tbaa !5
  %36 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.start(i64 4, i8* %36) #2
  %37 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %37, i32 0, i32 13
  %38 = load i32, i32* %n_chan, align 4, !tbaa !38
  store i32 %38, i32* %num_chan, align 4, !tbaa !5
  %39 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %39) #2
  %40 = load i32, i32* %num_chan, align 4, !tbaa !5
  %sub = sub nsw i32 %40, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  %41 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %41) #2
  %42 = load i32, i32* %num_chan, align 4, !tbaa !5
  %43 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul = mul nsw i32 %42, %43
  store i32 %mul, i32* %shape_off, align 4, !tbaa !5
  %44 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #2
  %45 = load i32, i32* %shape_off, align 4, !tbaa !5
  %46 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool = icmp ne i32 %46, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %47 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %47, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %45, %cond
  store i32 %add, i32* %alpha_g_off, align 4, !tbaa !5
  %48 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %48) #2
  %49 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %50 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool9 = icmp ne i32 %50, 0
  br i1 %tobool9, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.end
  %51 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end.12

cond.false.11:                                    ; preds = %cond.end
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.10
  %cond13 = phi i32 [ %51, %cond.true.10 ], [ 0, %cond.false.11 ]
  %add14 = add nsw i32 %49, %cond13
  store i32 %add14, i32* %tag_off, align 4, !tbaa !5
  %52 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.start(i64 4, i8* %52) #2
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %overprint15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 54
  %54 = load i32, i32* %overprint15, align 4, !tbaa !345
  store i32 %54, i32* %overprint, align 4, !tbaa !5
  %55 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.start(i64 4, i8* %55) #2
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blendspot16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %56, i32 0, i32 56
  %57 = load i32, i32* %blendspot16, align 4, !tbaa !238
  store i32 %57, i32* %blendspot, align 4, !tbaa !5
  %58 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %58) #2
  %59 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %drawn_comps17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %59, i32 0, i32 57
  %60 = load i64, i64* %drawn_comps17, align 8, !tbaa !242
  store i64 %60, i64* %drawn_comps, align 8, !tbaa !68
  %61 = bitcast i64* %comps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %61) #2
  call void @llvm.lifetime.start(i64 1, i8* %shape) #2
  store i8 0, i8* %shape, align 1, !tbaa !66
  call void @llvm.lifetime.start(i64 1, i8* %src_alpha) #2
  %62 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %62) #2
  store i64 255, i64* %mask, align 8, !tbaa !68
  %63 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %63) #2
  store i32 8, i32* %shift, align 4, !tbaa !5
  %64 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %64, i32 0, i32 15
  %65 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp = icmp eq i8* %65, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.12
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.end.12
  %66 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool18 = icmp ne i32 %66, 0
  br i1 %tobool18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end
  %67 = load i64, i64* %color.addr, align 8, !tbaa !68
  %68 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul20 = mul nsw i32 %68, 8
  %sh_prom = zext i32 %mul20 to i64
  %shr = lshr i64 %67, %sh_prom
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %curr_tag, align 4, !tbaa !66
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end
  %69 = load i32, i32* %devn.addr, align 4, !tbaa !5
  %tobool22 = icmp ne i32 %69, 0
  br i1 %tobool22, label %if.then.23, label %if.else.57

if.then.23:                                       ; preds = %if.end.21
  %70 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool24 = icmp ne i32 %70, 0
  br i1 %tobool24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.23
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.25
  %71 = load i32, i32* %j, align 4, !tbaa !5
  %72 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp26 = icmp slt i32 %71, %72
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %73 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom = sext i32 %73 to i64
  %74 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %74, i32 0, i32 1
  %devn28 = bitcast %union._c* %colors to %struct._devn*
  %values = getelementptr inbounds %struct._devn, %struct._devn* %devn28, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %values, i32 0, i64 %idxprom
  %75 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv29 = zext i16 %75 to i32
  %shr30 = ashr i32 %conv29, 8
  %conv31 = sext i32 %shr30 to i64
  %and32 = and i64 %conv31, 255
  %conv33 = trunc i64 %and32 to i8
  %76 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom34 = sext i32 %76 to i64
  %arrayidx35 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom34
  store i8 %conv33, i8* %arrayidx35, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %77 = load i32, i32* %j, align 4, !tbaa !5
  %inc = add nsw i32 %77, 1
  store i32 %inc, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.56

if.else:                                          ; preds = %if.then.23
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.53, %if.else
  %78 = load i32, i32* %j, align 4, !tbaa !5
  %79 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp37 = icmp slt i32 %78, %79
  br i1 %cmp37, label %for.body.39, label %for.end.55

for.body.39:                                      ; preds = %for.cond.36
  %80 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom40 = sext i32 %80 to i64
  %81 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors41 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %81, i32 0, i32 1
  %devn42 = bitcast %union._c* %colors41 to %struct._devn*
  %values43 = getelementptr inbounds %struct._devn, %struct._devn* %devn42, i32 0, i32 0
  %arrayidx44 = getelementptr inbounds [64 x i16], [64 x i16]* %values43, i32 0, i64 %idxprom40
  %82 = load i16, i16* %arrayidx44, align 2, !tbaa !67
  %conv45 = zext i16 %82 to i32
  %shr46 = ashr i32 %conv45, 8
  %conv47 = sext i32 %shr46 to i64
  %and48 = and i64 %conv47, 255
  %sub49 = sub i64 255, %and48
  %conv50 = trunc i64 %sub49 to i8
  %83 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom51 = sext i32 %83 to i64
  %arrayidx52 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom51
  store i8 %conv50, i8* %arrayidx52, align 1, !tbaa !66
  br label %for.inc.53

for.inc.53:                                       ; preds = %for.body.39
  %84 = load i32, i32* %j, align 4, !tbaa !5
  %inc54 = add nsw i32 %84, 1
  store i32 %inc54, i32* %j, align 4, !tbaa !5
  br label %for.cond.36

for.end.55:                                       ; preds = %for.cond.36
  br label %if.end.56

if.end.56:                                        ; preds = %for.end.55, %for.end
  br label %if.end.58

if.else.57:                                       ; preds = %if.end.21
  %85 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %85, i32 0, i32 45
  %86 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %unpack_color = getelementptr inbounds %struct.pdf14_procs_s, %struct.pdf14_procs_s* %86, i32 0, i32 0
  %87 = load void (i32, i64, %struct.pdf14_device_s*, i8*)*, void (i32, i64, %struct.pdf14_device_s*, i8*)** %unpack_color, align 8, !tbaa !341
  %88 = load i32, i32* %num_comp, align 4, !tbaa !5
  %89 = load i64, i64* %color.addr, align 8, !tbaa !68
  %90 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  call void %87(i32 %88, i64 %89, %struct.pdf14_device_s* %90, i8* %arraydecay) #7
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.57, %if.end.56
  %91 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %91, i32 0, i32 51
  %92 = load float, float* %alpha, align 4, !tbaa !343
  %mul59 = fmul float 2.550000e+02, %92
  %conv60 = fpext float %mul59 to double
  %add61 = fadd double %conv60, 5.000000e-01
  %call = call double @floor(double %add61) #9
  %conv62 = fptoui double %call to i8
  %93 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom63 = sext i32 %93 to i64
  %arrayidx64 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom63
  store i8 %conv62, i8* %arrayidx64, align 1, !tbaa !66
  store i8 %conv62, i8* %src_alpha, align 1, !tbaa !66
  %94 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool65 = icmp ne i32 %94, 0
  br i1 %tobool65, label %if.then.66, label %if.end.73

if.then.66:                                       ; preds = %if.end.58
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %shape67 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 50
  %96 = load float, float* %shape67, align 4, !tbaa !344
  %mul68 = fmul float 2.550000e+02, %96
  %conv69 = fpext float %mul68 to double
  %add70 = fadd double %conv69, 5.000000e-01
  %call71 = call double @floor(double %add70) #9
  %conv72 = fptoui double %call71 to i8
  store i8 %conv72, i8* %shape, align 1, !tbaa !66
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.66, %if.end.58
  %97 = load i32, i32* %x.addr, align 4, !tbaa !5
  %98 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %98, i32 0, i32 10
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x74 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %99 = load i32, i32* %x74, align 4, !tbaa !43
  %cmp75 = icmp slt i32 %97, %99
  br i1 %cmp75, label %if.then.77, label %if.end.86

if.then.77:                                       ; preds = %if.end.73
  %100 = load i32, i32* %x.addr, align 4, !tbaa !5
  %101 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect78 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %101, i32 0, i32 10
  %p79 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect78, i32 0, i32 0
  %x80 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p79, i32 0, i32 0
  %102 = load i32, i32* %x80, align 4, !tbaa !43
  %sub81 = sub nsw i32 %100, %102
  %103 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add82 = add nsw i32 %103, %sub81
  store i32 %add82, i32* %w.addr, align 4, !tbaa !5
  %104 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect83 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %104, i32 0, i32 10
  %p84 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect83, i32 0, i32 0
  %x85 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p84, i32 0, i32 0
  %105 = load i32, i32* %x85, align 4, !tbaa !43
  store i32 %105, i32* %x.addr, align 4, !tbaa !5
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.77, %if.end.73
  %106 = load i32, i32* %y.addr, align 4, !tbaa !5
  %107 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect87 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %107, i32 0, i32 10
  %p88 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect87, i32 0, i32 0
  %y89 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p88, i32 0, i32 1
  %108 = load i32, i32* %y89, align 4, !tbaa !46
  %cmp90 = icmp slt i32 %106, %108
  br i1 %cmp90, label %if.then.92, label %if.end.101

if.then.92:                                       ; preds = %if.end.86
  %109 = load i32, i32* %y.addr, align 4, !tbaa !5
  %110 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect93 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %110, i32 0, i32 10
  %p94 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect93, i32 0, i32 0
  %y95 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p94, i32 0, i32 1
  %111 = load i32, i32* %y95, align 4, !tbaa !46
  %sub96 = sub nsw i32 %109, %111
  %112 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add97 = add nsw i32 %112, %sub96
  store i32 %add97, i32* %h.addr, align 4, !tbaa !5
  %113 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect98 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %113, i32 0, i32 10
  %p99 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect98, i32 0, i32 0
  %y100 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p99, i32 0, i32 1
  %114 = load i32, i32* %y100, align 4, !tbaa !46
  store i32 %114, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.92, %if.end.86
  %115 = load i32, i32* %x.addr, align 4, !tbaa !5
  %116 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add102 = add nsw i32 %115, %116
  %117 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect103 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %117, i32 0, i32 10
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect103, i32 0, i32 1
  %x104 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %118 = load i32, i32* %x104, align 4, !tbaa !42
  %cmp105 = icmp sgt i32 %add102, %118
  br i1 %cmp105, label %if.then.107, label %if.end.112

if.then.107:                                      ; preds = %if.end.101
  %119 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect108 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %119, i32 0, i32 10
  %q109 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect108, i32 0, i32 1
  %x110 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q109, i32 0, i32 0
  %120 = load i32, i32* %x110, align 4, !tbaa !42
  %121 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub111 = sub nsw i32 %120, %121
  store i32 %sub111, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.107, %if.end.101
  %122 = load i32, i32* %y.addr, align 4, !tbaa !5
  %123 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add113 = add nsw i32 %122, %123
  %124 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect114 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %124, i32 0, i32 10
  %q115 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect114, i32 0, i32 1
  %y116 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q115, i32 0, i32 1
  %125 = load i32, i32* %y116, align 4, !tbaa !45
  %cmp117 = icmp sgt i32 %add113, %125
  br i1 %cmp117, label %if.then.119, label %if.end.124

if.then.119:                                      ; preds = %if.end.112
  %126 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect120 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %126, i32 0, i32 10
  %q121 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect120, i32 0, i32 1
  %y122 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q121, i32 0, i32 1
  %127 = load i32, i32* %y122, align 4, !tbaa !45
  %128 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub123 = sub nsw i32 %127, %128
  store i32 %sub123, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.119, %if.end.112
  %129 = load i32, i32* %x.addr, align 4, !tbaa !5
  %130 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %130, i32 0, i32 17
  %p125 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x126 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p125, i32 0, i32 0
  %131 = load i32, i32* %x126, align 4, !tbaa !335
  %cmp127 = icmp slt i32 %129, %131
  br i1 %cmp127, label %if.then.129, label %if.end.133

if.then.129:                                      ; preds = %if.end.124
  %132 = load i32, i32* %x.addr, align 4, !tbaa !5
  %133 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty130 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %133, i32 0, i32 17
  %p131 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty130, i32 0, i32 0
  %x132 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p131, i32 0, i32 0
  store i32 %132, i32* %x132, align 4, !tbaa !335
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.129, %if.end.124
  %134 = load i32, i32* %y.addr, align 4, !tbaa !5
  %135 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty134 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %135, i32 0, i32 17
  %p135 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty134, i32 0, i32 0
  %y136 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p135, i32 0, i32 1
  %136 = load i32, i32* %y136, align 4, !tbaa !336
  %cmp137 = icmp slt i32 %134, %136
  br i1 %cmp137, label %if.then.139, label %if.end.143

if.then.139:                                      ; preds = %if.end.133
  %137 = load i32, i32* %y.addr, align 4, !tbaa !5
  %138 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty140 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %138, i32 0, i32 17
  %p141 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty140, i32 0, i32 0
  %y142 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p141, i32 0, i32 1
  store i32 %137, i32* %y142, align 4, !tbaa !336
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.139, %if.end.133
  %139 = load i32, i32* %x.addr, align 4, !tbaa !5
  %140 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add144 = add nsw i32 %139, %140
  %141 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty145 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %141, i32 0, i32 17
  %q146 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty145, i32 0, i32 1
  %x147 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q146, i32 0, i32 0
  %142 = load i32, i32* %x147, align 4, !tbaa !337
  %cmp148 = icmp sgt i32 %add144, %142
  br i1 %cmp148, label %if.then.150, label %if.end.155

if.then.150:                                      ; preds = %if.end.143
  %143 = load i32, i32* %x.addr, align 4, !tbaa !5
  %144 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add151 = add nsw i32 %143, %144
  %145 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty152 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %145, i32 0, i32 17
  %q153 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty152, i32 0, i32 1
  %x154 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q153, i32 0, i32 0
  store i32 %add151, i32* %x154, align 4, !tbaa !337
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.150, %if.end.143
  %146 = load i32, i32* %y.addr, align 4, !tbaa !5
  %147 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add156 = add nsw i32 %146, %147
  %148 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty157 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %148, i32 0, i32 17
  %q158 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty157, i32 0, i32 1
  %y159 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q158, i32 0, i32 1
  %149 = load i32, i32* %y159, align 4, !tbaa !338
  %cmp160 = icmp sgt i32 %add156, %149
  br i1 %cmp160, label %if.then.162, label %if.end.167

if.then.162:                                      ; preds = %if.end.155
  %150 = load i32, i32* %y.addr, align 4, !tbaa !5
  %151 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add163 = add nsw i32 %150, %151
  %152 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty164 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %152, i32 0, i32 17
  %q165 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty164, i32 0, i32 1
  %y166 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q165, i32 0, i32 1
  store i32 %add163, i32* %y166, align 4, !tbaa !338
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.162, %if.end.155
  %153 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data168 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %153, i32 0, i32 15
  %154 = load i8*, i8** %data168, align 8, !tbaa !36
  %155 = load i32, i32* %x.addr, align 4, !tbaa !5
  %156 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect169 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %156, i32 0, i32 10
  %p170 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect169, i32 0, i32 0
  %x171 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p170, i32 0, i32 0
  %157 = load i32, i32* %x171, align 4, !tbaa !43
  %sub172 = sub nsw i32 %155, %157
  %idx.ext = sext i32 %sub172 to i64
  %add.ptr = getelementptr inbounds i8, i8* %154, i64 %idx.ext
  %158 = load i32, i32* %y.addr, align 4, !tbaa !5
  %159 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect173 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %159, i32 0, i32 10
  %p174 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect173, i32 0, i32 0
  %y175 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p174, i32 0, i32 1
  %160 = load i32, i32* %y175, align 4, !tbaa !46
  %sub176 = sub nsw i32 %158, %160
  %161 = load i32, i32* %rowstride, align 4, !tbaa !5
  %mul177 = mul nsw i32 %sub176, %161
  %idx.ext178 = sext i32 %mul177 to i64
  %add.ptr179 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext178
  store i8* %add.ptr179, i8** %dst_ptr, align 8, !tbaa !1
  %162 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv180 = zext i8 %162 to i32
  %sub181 = sub nsw i32 255, %conv180
  %conv182 = trunc i32 %sub181 to i8
  store i8 %conv182, i8* %src_alpha, align 1, !tbaa !66
  %163 = load i8, i8* %shape, align 1, !tbaa !66
  %conv183 = zext i8 %163 to i32
  %sub184 = sub nsw i32 255, %conv183
  %conv185 = trunc i32 %sub184 to i8
  store i8 %conv185, i8* %shape, align 1, !tbaa !66
  %164 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool186 = icmp ne i32 %164, 0
  br i1 %tobool186, label %if.end.188, label %if.then.187

if.then.187:                                      ; preds = %if.end.167
  store i32 0, i32* %alpha_g_off, align 4, !tbaa !5
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.187, %if.end.167
  %165 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool189 = icmp ne i32 %165, 0
  br i1 %tobool189, label %if.end.191, label %if.then.190

if.then.190:                                      ; preds = %if.end.188
  store i32 0, i32* %shape_off, align 4, !tbaa !5
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.190, %if.end.188
  %166 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool192 = icmp ne i32 %166, 0
  br i1 %tobool192, label %if.end.194, label %if.then.193

if.then.193:                                      ; preds = %if.end.191
  store i32 0, i32* %tag_off, align 4, !tbaa !5
  br label %if.end.194

if.end.194:                                       ; preds = %if.then.193, %if.end.191
  %167 = load i32, i32* %w.addr, align 4, !tbaa !5
  %168 = load i32, i32* %rowstride, align 4, !tbaa !5
  %sub195 = sub nsw i32 %168, %167
  store i32 %sub195, i32* %rowstride, align 4, !tbaa !5
  %169 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp196 = icmp eq i32 %169, 1
  br i1 %cmp196, label %land.lhs.true, label %if.else.293

land.lhs.true:                                    ; preds = %if.end.194
  %170 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool198 = icmp ne i32 %170, 0
  br i1 %tobool198, label %if.then.199, label %if.else.293

if.then.199:                                      ; preds = %land.lhs.true
  %171 = load i32, i32* %h.addr, align 4, !tbaa !5
  store i32 %171, i32* %j, align 4, !tbaa !5
  br label %for.cond.200

for.cond.200:                                     ; preds = %for.inc.290, %if.then.199
  %172 = load i32, i32* %j, align 4, !tbaa !5
  %cmp201 = icmp sgt i32 %172, 0
  br i1 %cmp201, label %for.body.203, label %for.end.292

for.body.203:                                     ; preds = %for.cond.200
  %173 = load i32, i32* %w.addr, align 4, !tbaa !5
  store i32 %173, i32* %i, align 4, !tbaa !5
  br label %for.cond.204

for.cond.204:                                     ; preds = %for.inc.286, %for.body.203
  %174 = load i32, i32* %i, align 4, !tbaa !5
  %cmp205 = icmp sgt i32 %174, 0
  br i1 %cmp205, label %for.body.207, label %for.end.287

for.body.207:                                     ; preds = %for.cond.204
  %arrayidx208 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 1
  %175 = load i8, i8* %arrayidx208, align 1, !tbaa !66
  %conv209 = zext i8 %175 to i32
  %cmp210 = icmp eq i32 %conv209, 0
  br i1 %cmp210, label %if.then.212, label %if.else.213

if.then.212:                                      ; preds = %for.body.207
  br label %if.end.228

if.else.213:                                      ; preds = %for.body.207
  %176 = load i32, i32* %planestride, align 4, !tbaa !5
  %idxprom214 = sext i32 %176 to i64
  %177 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx215 = getelementptr inbounds i8, i8* %177, i64 %idxprom214
  %178 = load i8, i8* %arrayidx215, align 1, !tbaa !66
  %conv216 = zext i8 %178 to i32
  %cmp217 = icmp eq i32 %conv216, 0
  br i1 %cmp217, label %if.then.219, label %if.else.225

if.then.219:                                      ; preds = %if.else.213
  %arrayidx220 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 0
  %179 = load i8, i8* %arrayidx220, align 1, !tbaa !66
  %180 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx221 = getelementptr inbounds i8, i8* %180, i64 0
  store i8 %179, i8* %arrayidx221, align 1, !tbaa !66
  %arrayidx222 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 1
  %181 = load i8, i8* %arrayidx222, align 1, !tbaa !66
  %182 = load i32, i32* %planestride, align 4, !tbaa !5
  %idxprom223 = sext i32 %182 to i64
  %183 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx224 = getelementptr inbounds i8, i8* %183, i64 %idxprom223
  store i8 %181, i8* %arrayidx224, align 1, !tbaa !66
  br label %if.end.227

if.else.225:                                      ; preds = %if.else.213
  %184 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arraydecay226 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %185 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %186 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %186, i32 0, i32 46
  %187 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %188 = load i32, i32* %planestride, align 4, !tbaa !5
  call void @art_pdf_composite_pixel_alpha_8_fast_mono(i8* %184, i8* %arraydecay226, i32 %185, %struct.pdf14_nonseparable_blending_procs_s* %187, i32 %188) #7
  br label %if.end.227

if.end.227:                                       ; preds = %if.else.225, %if.then.219
  br label %if.end.228

if.end.228:                                       ; preds = %if.end.227, %if.then.212
  %189 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %tobool229 = icmp ne i32 %189, 0
  br i1 %tobool229, label %if.then.230, label %if.end.245

if.then.230:                                      ; preds = %if.end.228
  %190 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %190) #2
  %191 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom231 = sext i32 %191 to i64
  %192 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx232 = getelementptr inbounds i8, i8* %192, i64 %idxprom231
  %193 = load i8, i8* %arrayidx232, align 1, !tbaa !66
  %conv233 = zext i8 %193 to i32
  %sub234 = sub nsw i32 255, %conv233
  %194 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv235 = zext i8 %194 to i32
  %mul236 = mul nsw i32 %sub234, %conv235
  %add237 = add nsw i32 %mul236, 128
  store i32 %add237, i32* %tmp, align 4, !tbaa !5
  %195 = load i32, i32* %tmp, align 4, !tbaa !5
  %196 = load i32, i32* %tmp, align 4, !tbaa !5
  %shr238 = ashr i32 %196, 8
  %add239 = add nsw i32 %195, %shr238
  %shr240 = ashr i32 %add239, 8
  %sub241 = sub nsw i32 255, %shr240
  %conv242 = trunc i32 %sub241 to i8
  %197 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom243 = sext i32 %197 to i64
  %198 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx244 = getelementptr inbounds i8, i8* %198, i64 %idxprom243
  store i8 %conv242, i8* %arrayidx244, align 1, !tbaa !66
  %199 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %199) #2
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.230, %if.end.228
  %200 = load i32, i32* %shape_off, align 4, !tbaa !5
  %tobool246 = icmp ne i32 %200, 0
  br i1 %tobool246, label %if.then.247, label %if.end.264

if.then.247:                                      ; preds = %if.end.245
  %201 = bitcast i32* %tmp249 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %201) #2
  %202 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom250 = sext i32 %202 to i64
  %203 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx251 = getelementptr inbounds i8, i8* %203, i64 %idxprom250
  %204 = load i8, i8* %arrayidx251, align 1, !tbaa !66
  %conv252 = zext i8 %204 to i32
  %sub253 = sub nsw i32 255, %conv252
  %205 = load i8, i8* %shape, align 1, !tbaa !66
  %conv254 = zext i8 %205 to i32
  %mul255 = mul nsw i32 %sub253, %conv254
  %add256 = add nsw i32 %mul255, 128
  store i32 %add256, i32* %tmp249, align 4, !tbaa !5
  %206 = load i32, i32* %tmp249, align 4, !tbaa !5
  %207 = load i32, i32* %tmp249, align 4, !tbaa !5
  %shr257 = ashr i32 %207, 8
  %add258 = add nsw i32 %206, %shr257
  %shr259 = ashr i32 %add258, 8
  %sub260 = sub nsw i32 255, %shr259
  %conv261 = trunc i32 %sub260 to i8
  %208 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom262 = sext i32 %208 to i64
  %209 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx263 = getelementptr inbounds i8, i8* %209, i64 %idxprom262
  store i8 %conv261, i8* %arrayidx263, align 1, !tbaa !66
  %210 = bitcast i32* %tmp249 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %210) #2
  br label %if.end.264

if.end.264:                                       ; preds = %if.then.247, %if.end.245
  %211 = load i32, i32* %tag_off, align 4, !tbaa !5
  %tobool265 = icmp ne i32 %211, 0
  br i1 %tobool265, label %if.then.266, label %if.end.285

if.then.266:                                      ; preds = %if.end.264
  %212 = load i32, i32* %planestride, align 4, !tbaa !5
  %idxprom267 = sext i32 %212 to i64
  %213 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx268 = getelementptr inbounds i8, i8* %213, i64 %idxprom267
  %214 = load i8, i8* %arrayidx268, align 1, !tbaa !66
  %conv269 = zext i8 %214 to i32
  %cmp270 = icmp eq i32 %conv269, 255
  br i1 %cmp270, label %if.then.272, label %if.else.276

if.then.272:                                      ; preds = %if.then.266
  %215 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv273 = trunc i32 %215 to i8
  %216 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom274 = sext i32 %216 to i64
  %217 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx275 = getelementptr inbounds i8, i8* %217, i64 %idxprom274
  store i8 %conv273, i8* %arrayidx275, align 1, !tbaa !66
  br label %if.end.284

if.else.276:                                      ; preds = %if.then.266
  %218 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom277 = sext i32 %218 to i64
  %219 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx278 = getelementptr inbounds i8, i8* %219, i64 %idxprom277
  %220 = load i8, i8* %arrayidx278, align 1, !tbaa !66
  %conv279 = zext i8 %220 to i32
  %221 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %or = or i32 %conv279, %221
  %and280 = and i32 %or, -9
  %conv281 = trunc i32 %and280 to i8
  %222 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom282 = sext i32 %222 to i64
  %223 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx283 = getelementptr inbounds i8, i8* %223, i64 %idxprom282
  store i8 %conv281, i8* %arrayidx283, align 1, !tbaa !66
  br label %if.end.284

if.end.284:                                       ; preds = %if.else.276, %if.then.272
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.284, %if.end.264
  %224 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.286

for.inc.286:                                      ; preds = %if.end.285
  %225 = load i32, i32* %i, align 4, !tbaa !5
  %dec = add nsw i32 %225, -1
  store i32 %dec, i32* %i, align 4, !tbaa !5
  br label %for.cond.204

for.end.287:                                      ; preds = %for.cond.204
  %226 = load i32, i32* %rowstride, align 4, !tbaa !5
  %227 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %idx.ext288 = sext i32 %226 to i64
  %add.ptr289 = getelementptr inbounds i8, i8* %227, i64 %idx.ext288
  store i8* %add.ptr289, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.290

for.inc.290:                                      ; preds = %for.end.287
  %228 = load i32, i32* %j, align 4, !tbaa !5
  %dec291 = add nsw i32 %228, -1
  store i32 %dec291, i32* %j, align 4, !tbaa !5
  br label %for.cond.200

for.end.292:                                      ; preds = %for.cond.200
  br label %if.end.513

if.else.293:                                      ; preds = %land.lhs.true, %if.end.194
  %229 = load i32, i32* %h.addr, align 4, !tbaa !5
  store i32 %229, i32* %j, align 4, !tbaa !5
  br label %for.cond.294

for.cond.294:                                     ; preds = %for.inc.510, %if.else.293
  %230 = load i32, i32* %j, align 4, !tbaa !5
  %cmp295 = icmp sgt i32 %230, 0
  br i1 %cmp295, label %for.body.297, label %for.end.512

for.body.297:                                     ; preds = %for.cond.294
  %231 = load i32, i32* %w.addr, align 4, !tbaa !5
  store i32 %231, i32* %i, align 4, !tbaa !5
  br label %for.cond.298

for.cond.298:                                     ; preds = %for.inc.505, %for.body.297
  %232 = load i32, i32* %i, align 4, !tbaa !5
  %cmp299 = icmp sgt i32 %232, 0
  br i1 %cmp299, label %for.body.301, label %for.end.507

for.body.301:                                     ; preds = %for.cond.298
  %233 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool302 = icmp ne i32 %233, 0
  br i1 %tobool302, label %if.then.303, label %if.else.335

if.then.303:                                      ; preds = %for.body.301
  %234 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom304 = sext i32 %234 to i64
  %arrayidx305 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom304
  %235 = load i8, i8* %arrayidx305, align 1, !tbaa !66
  %conv306 = zext i8 %235 to i32
  %cmp307 = icmp eq i32 %conv306, 0
  br i1 %cmp307, label %if.then.309, label %if.else.310

if.then.309:                                      ; preds = %if.then.303
  br label %if.end.334

if.else.310:                                      ; preds = %if.then.303
  %236 = load i32, i32* %num_comp, align 4, !tbaa !5
  %237 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul311 = mul nsw i32 %236, %237
  %idxprom312 = sext i32 %mul311 to i64
  %238 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx313 = getelementptr inbounds i8, i8* %238, i64 %idxprom312
  %239 = load i8, i8* %arrayidx313, align 1, !tbaa !66
  %conv314 = zext i8 %239 to i32
  %cmp315 = icmp eq i32 %conv314, 0
  br i1 %cmp315, label %if.then.317, label %if.else.330

if.then.317:                                      ; preds = %if.else.310
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.318

for.cond.318:                                     ; preds = %for.inc.327, %if.then.317
  %240 = load i32, i32* %k, align 4, !tbaa !5
  %241 = load i32, i32* %num_chan, align 4, !tbaa !5
  %cmp319 = icmp slt i32 %240, %241
  br i1 %cmp319, label %for.body.321, label %for.end.329

for.body.321:                                     ; preds = %for.cond.318
  %242 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom322 = sext i32 %242 to i64
  %arrayidx323 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom322
  %243 = load i8, i8* %arrayidx323, align 1, !tbaa !66
  %244 = load i32, i32* %k, align 4, !tbaa !5
  %245 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul324 = mul nsw i32 %244, %245
  %idxprom325 = sext i32 %mul324 to i64
  %246 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx326 = getelementptr inbounds i8, i8* %246, i64 %idxprom325
  store i8 %243, i8* %arrayidx326, align 1, !tbaa !66
  br label %for.inc.327

for.inc.327:                                      ; preds = %for.body.321
  %247 = load i32, i32* %k, align 4, !tbaa !5
  %inc328 = add nsw i32 %247, 1
  store i32 %inc328, i32* %k, align 4, !tbaa !5
  br label %for.cond.318

for.end.329:                                      ; preds = %for.cond.318
  br label %if.end.333

if.else.330:                                      ; preds = %if.else.310
  %248 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arraydecay331 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %249 = load i32, i32* %num_comp, align 4, !tbaa !5
  %250 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %251 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs332 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %251, i32 0, i32 46
  %252 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs332, align 8, !tbaa !230
  %253 = load i32, i32* %planestride, align 4, !tbaa !5
  call void @art_pdf_composite_pixel_alpha_8_fast(i8* %248, i8* %arraydecay331, i32 %249, i32 %250, %struct.pdf14_nonseparable_blending_procs_s* %252, i32 %253) #7
  br label %if.end.333

if.end.333:                                       ; preds = %if.else.330, %for.end.329
  br label %if.end.334

if.end.334:                                       ; preds = %if.end.333, %if.then.309
  br label %if.end.443

if.else.335:                                      ; preds = %for.body.301
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.336

for.cond.336:                                     ; preds = %for.inc.348, %if.else.335
  %254 = load i32, i32* %k, align 4, !tbaa !5
  %255 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp337 = icmp slt i32 %254, %255
  br i1 %cmp337, label %for.body.339, label %for.end.350

for.body.339:                                     ; preds = %for.cond.336
  %256 = load i32, i32* %k, align 4, !tbaa !5
  %257 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul340 = mul nsw i32 %256, %257
  %idxprom341 = sext i32 %mul340 to i64
  %258 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx342 = getelementptr inbounds i8, i8* %258, i64 %idxprom341
  %259 = load i8, i8* %arrayidx342, align 1, !tbaa !66
  %conv343 = zext i8 %259 to i32
  %sub344 = sub nsw i32 255, %conv343
  %conv345 = trunc i32 %sub344 to i8
  %260 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom346 = sext i32 %260 to i64
  %arrayidx347 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom346
  store i8 %conv345, i8* %arrayidx347, align 1, !tbaa !66
  br label %for.inc.348

for.inc.348:                                      ; preds = %for.body.339
  %261 = load i32, i32* %k, align 4, !tbaa !5
  %inc349 = add nsw i32 %261, 1
  store i32 %inc349, i32* %k, align 4, !tbaa !5
  br label %for.cond.336

for.end.350:                                      ; preds = %for.cond.336
  %262 = load i32, i32* %num_comp, align 4, !tbaa !5
  %263 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul351 = mul nsw i32 %262, %263
  %idxprom352 = sext i32 %mul351 to i64
  %264 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx353 = getelementptr inbounds i8, i8* %264, i64 %idxprom352
  %265 = load i8, i8* %arrayidx353, align 1, !tbaa !66
  %266 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom354 = sext i32 %266 to i64
  %arrayidx355 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom354
  store i8 %265, i8* %arrayidx355, align 1, !tbaa !66
  %arraydecay356 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %arraydecay357 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %267 = load i32, i32* %num_comp, align 4, !tbaa !5
  %268 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %269 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs358 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %269, i32 0, i32 46
  %270 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs358, align 8, !tbaa !230
  call void @art_pdf_composite_pixel_alpha_8(i8* %arraydecay356, i8* %arraydecay357, i32 %267, i32 %268, %struct.pdf14_nonseparable_blending_procs_s* %270) #7
  %271 = load i32, i32* %overprint, align 4, !tbaa !5
  %tobool359 = icmp ne i32 %271, 0
  br i1 %tobool359, label %land.lhs.true.360, label %if.else.421

land.lhs.true.360:                                ; preds = %for.end.350
  %272 = load i32, i32* %num_comp, align 4, !tbaa !5
  %273 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul361 = mul nsw i32 %272, %273
  %idxprom362 = sext i32 %mul361 to i64
  %274 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx363 = getelementptr inbounds i8, i8* %274, i64 %idxprom362
  %275 = load i8, i8* %arrayidx363, align 1, !tbaa !66
  %conv364 = zext i8 %275 to i32
  %cmp365 = icmp ne i32 %conv364, 0
  br i1 %cmp365, label %if.then.367, label %if.else.421

if.then.367:                                      ; preds = %land.lhs.true.360
  %276 = load i32, i32* %blendspot, align 4, !tbaa !5
  %tobool368 = icmp ne i32 %276, 0
  br i1 %tobool368, label %if.then.369, label %if.else.393

if.then.369:                                      ; preds = %if.then.367
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.370

for.cond.370:                                     ; preds = %for.inc.390, %if.then.369
  %277 = load i32, i32* %k, align 4, !tbaa !5
  %278 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp371 = icmp slt i32 %277, %278
  br i1 %cmp371, label %for.body.373, label %for.end.392

for.body.373:                                     ; preds = %for.cond.370
  %279 = bitcast i32* %temp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %279) #2
  %280 = load i32, i32* %k, align 4, !tbaa !5
  %281 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul375 = mul nsw i32 %280, %281
  %idxprom376 = sext i32 %mul375 to i64
  %282 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx377 = getelementptr inbounds i8, i8* %282, i64 %idxprom376
  %283 = load i8, i8* %arrayidx377, align 1, !tbaa !66
  %conv378 = zext i8 %283 to i32
  %sub379 = sub nsw i32 255, %conv378
  %284 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom380 = sext i32 %284 to i64
  %arrayidx381 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom380
  %285 = load i8, i8* %arrayidx381, align 1, !tbaa !66
  %conv382 = zext i8 %285 to i32
  %mul383 = mul nsw i32 %sub379, %conv382
  store i32 %mul383, i32* %temp, align 4, !tbaa !5
  %286 = load i32, i32* %temp, align 4, !tbaa !5
  %shr384 = ashr i32 %286, 8
  store i32 %shr384, i32* %temp, align 4, !tbaa !5
  %287 = load i32, i32* %temp, align 4, !tbaa !5
  %sub385 = sub nsw i32 255, %287
  %conv386 = trunc i32 %sub385 to i8
  %288 = load i32, i32* %k, align 4, !tbaa !5
  %289 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul387 = mul nsw i32 %288, %289
  %idxprom388 = sext i32 %mul387 to i64
  %290 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx389 = getelementptr inbounds i8, i8* %290, i64 %idxprom388
  store i8 %conv386, i8* %arrayidx389, align 1, !tbaa !66
  %291 = bitcast i32* %temp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %291) #2
  br label %for.inc.390

for.inc.390:                                      ; preds = %for.body.373
  %292 = load i32, i32* %k, align 4, !tbaa !5
  %inc391 = add nsw i32 %292, 1
  store i32 %inc391, i32* %k, align 4, !tbaa !5
  br label %for.cond.370

for.end.392:                                      ; preds = %for.cond.370
  br label %if.end.415

if.else.393:                                      ; preds = %if.then.367
  store i32 0, i32* %k, align 4, !tbaa !5
  %293 = load i64, i64* %drawn_comps, align 8, !tbaa !68
  store i64 %293, i64* %comps, align 8, !tbaa !68
  br label %for.cond.394

for.cond.394:                                     ; preds = %for.inc.411, %if.else.393
  %294 = load i64, i64* %comps, align 8, !tbaa !68
  %cmp395 = icmp ne i64 %294, 0
  br i1 %cmp395, label %for.body.397, label %for.end.414

for.body.397:                                     ; preds = %for.cond.394
  %295 = load i64, i64* %comps, align 8, !tbaa !68
  %and398 = and i64 %295, 1
  %cmp399 = icmp ne i64 %and398, 0
  br i1 %cmp399, label %if.then.401, label %if.end.410

if.then.401:                                      ; preds = %for.body.397
  %296 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom402 = sext i32 %296 to i64
  %arrayidx403 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom402
  %297 = load i8, i8* %arrayidx403, align 1, !tbaa !66
  %conv404 = zext i8 %297 to i32
  %sub405 = sub nsw i32 255, %conv404
  %conv406 = trunc i32 %sub405 to i8
  %298 = load i32, i32* %k, align 4, !tbaa !5
  %299 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul407 = mul nsw i32 %298, %299
  %idxprom408 = sext i32 %mul407 to i64
  %300 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx409 = getelementptr inbounds i8, i8* %300, i64 %idxprom408
  store i8 %conv406, i8* %arrayidx409, align 1, !tbaa !66
  br label %if.end.410

if.end.410:                                       ; preds = %if.then.401, %for.body.397
  br label %for.inc.411

for.inc.411:                                      ; preds = %if.end.410
  %301 = load i32, i32* %k, align 4, !tbaa !5
  %inc412 = add nsw i32 %301, 1
  store i32 %inc412, i32* %k, align 4, !tbaa !5
  %302 = load i64, i64* %comps, align 8, !tbaa !68
  %shr413 = lshr i64 %302, 1
  store i64 %shr413, i64* %comps, align 8, !tbaa !68
  br label %for.cond.394

for.end.414:                                      ; preds = %for.cond.394
  br label %if.end.415

if.end.415:                                       ; preds = %for.end.414, %for.end.392
  %303 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom416 = sext i32 %303 to i64
  %arrayidx417 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom416
  %304 = load i8, i8* %arrayidx417, align 1, !tbaa !66
  %305 = load i32, i32* %num_comp, align 4, !tbaa !5
  %306 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul418 = mul nsw i32 %305, %306
  %idxprom419 = sext i32 %mul418 to i64
  %307 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx420 = getelementptr inbounds i8, i8* %307, i64 %idxprom419
  store i8 %304, i8* %arrayidx420, align 1, !tbaa !66
  br label %if.end.442

if.else.421:                                      ; preds = %land.lhs.true.360, %for.end.350
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.422

for.cond.422:                                     ; preds = %for.inc.434, %if.else.421
  %308 = load i32, i32* %k, align 4, !tbaa !5
  %309 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp423 = icmp slt i32 %308, %309
  br i1 %cmp423, label %for.body.425, label %for.end.436

for.body.425:                                     ; preds = %for.cond.422
  %310 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom426 = sext i32 %310 to i64
  %arrayidx427 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom426
  %311 = load i8, i8* %arrayidx427, align 1, !tbaa !66
  %conv428 = zext i8 %311 to i32
  %sub429 = sub nsw i32 255, %conv428
  %conv430 = trunc i32 %sub429 to i8
  %312 = load i32, i32* %k, align 4, !tbaa !5
  %313 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul431 = mul nsw i32 %312, %313
  %idxprom432 = sext i32 %mul431 to i64
  %314 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx433 = getelementptr inbounds i8, i8* %314, i64 %idxprom432
  store i8 %conv430, i8* %arrayidx433, align 1, !tbaa !66
  br label %for.inc.434

for.inc.434:                                      ; preds = %for.body.425
  %315 = load i32, i32* %k, align 4, !tbaa !5
  %inc435 = add nsw i32 %315, 1
  store i32 %inc435, i32* %k, align 4, !tbaa !5
  br label %for.cond.422

for.end.436:                                      ; preds = %for.cond.422
  %316 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom437 = sext i32 %316 to i64
  %arrayidx438 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom437
  %317 = load i8, i8* %arrayidx438, align 1, !tbaa !66
  %318 = load i32, i32* %num_comp, align 4, !tbaa !5
  %319 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul439 = mul nsw i32 %318, %319
  %idxprom440 = sext i32 %mul439 to i64
  %320 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx441 = getelementptr inbounds i8, i8* %320, i64 %idxprom440
  store i8 %317, i8* %arrayidx441, align 1, !tbaa !66
  br label %if.end.442

if.end.442:                                       ; preds = %for.end.436, %if.end.415
  br label %if.end.443

if.end.443:                                       ; preds = %if.end.442, %if.end.334
  %321 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %tobool444 = icmp ne i32 %321, 0
  br i1 %tobool444, label %if.then.445, label %if.end.462

if.then.445:                                      ; preds = %if.end.443
  %322 = bitcast i32* %tmp447 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %322) #2
  %323 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom448 = sext i32 %323 to i64
  %324 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx449 = getelementptr inbounds i8, i8* %324, i64 %idxprom448
  %325 = load i8, i8* %arrayidx449, align 1, !tbaa !66
  %conv450 = zext i8 %325 to i32
  %sub451 = sub nsw i32 255, %conv450
  %326 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv452 = zext i8 %326 to i32
  %mul453 = mul nsw i32 %sub451, %conv452
  %add454 = add nsw i32 %mul453, 128
  store i32 %add454, i32* %tmp447, align 4, !tbaa !5
  %327 = load i32, i32* %tmp447, align 4, !tbaa !5
  %328 = load i32, i32* %tmp447, align 4, !tbaa !5
  %shr455 = ashr i32 %328, 8
  %add456 = add nsw i32 %327, %shr455
  %shr457 = ashr i32 %add456, 8
  %sub458 = sub nsw i32 255, %shr457
  %conv459 = trunc i32 %sub458 to i8
  %329 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom460 = sext i32 %329 to i64
  %330 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx461 = getelementptr inbounds i8, i8* %330, i64 %idxprom460
  store i8 %conv459, i8* %arrayidx461, align 1, !tbaa !66
  %331 = bitcast i32* %tmp447 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %331) #2
  br label %if.end.462

if.end.462:                                       ; preds = %if.then.445, %if.end.443
  %332 = load i32, i32* %shape_off, align 4, !tbaa !5
  %tobool463 = icmp ne i32 %332, 0
  br i1 %tobool463, label %if.then.464, label %if.end.481

if.then.464:                                      ; preds = %if.end.462
  %333 = bitcast i32* %tmp466 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %333) #2
  %334 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom467 = sext i32 %334 to i64
  %335 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx468 = getelementptr inbounds i8, i8* %335, i64 %idxprom467
  %336 = load i8, i8* %arrayidx468, align 1, !tbaa !66
  %conv469 = zext i8 %336 to i32
  %sub470 = sub nsw i32 255, %conv469
  %337 = load i8, i8* %shape, align 1, !tbaa !66
  %conv471 = zext i8 %337 to i32
  %mul472 = mul nsw i32 %sub470, %conv471
  %add473 = add nsw i32 %mul472, 128
  store i32 %add473, i32* %tmp466, align 4, !tbaa !5
  %338 = load i32, i32* %tmp466, align 4, !tbaa !5
  %339 = load i32, i32* %tmp466, align 4, !tbaa !5
  %shr474 = ashr i32 %339, 8
  %add475 = add nsw i32 %338, %shr474
  %shr476 = ashr i32 %add475, 8
  %sub477 = sub nsw i32 255, %shr476
  %conv478 = trunc i32 %sub477 to i8
  %340 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom479 = sext i32 %340 to i64
  %341 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx480 = getelementptr inbounds i8, i8* %341, i64 %idxprom479
  store i8 %conv478, i8* %arrayidx480, align 1, !tbaa !66
  %342 = bitcast i32* %tmp466 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %342) #2
  br label %if.end.481

if.end.481:                                       ; preds = %if.then.464, %if.end.462
  %343 = load i32, i32* %tag_off, align 4, !tbaa !5
  %tobool482 = icmp ne i32 %343, 0
  br i1 %tobool482, label %if.then.483, label %if.end.503

if.then.483:                                      ; preds = %if.end.481
  %344 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom484 = sext i32 %344 to i64
  %arrayidx485 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom484
  %345 = load i8, i8* %arrayidx485, align 1, !tbaa !66
  %conv486 = zext i8 %345 to i32
  %cmp487 = icmp eq i32 %conv486, 255
  br i1 %cmp487, label %if.then.489, label %if.else.493

if.then.489:                                      ; preds = %if.then.483
  %346 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv490 = trunc i32 %346 to i8
  %347 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom491 = sext i32 %347 to i64
  %348 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx492 = getelementptr inbounds i8, i8* %348, i64 %idxprom491
  store i8 %conv490, i8* %arrayidx492, align 1, !tbaa !66
  br label %if.end.502

if.else.493:                                      ; preds = %if.then.483
  %349 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom494 = sext i32 %349 to i64
  %350 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx495 = getelementptr inbounds i8, i8* %350, i64 %idxprom494
  %351 = load i8, i8* %arrayidx495, align 1, !tbaa !66
  %conv496 = zext i8 %351 to i32
  %352 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %or497 = or i32 %conv496, %352
  %and498 = and i32 %or497, -9
  %conv499 = trunc i32 %and498 to i8
  %353 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom500 = sext i32 %353 to i64
  %354 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx501 = getelementptr inbounds i8, i8* %354, i64 %idxprom500
  store i8 %conv499, i8* %arrayidx501, align 1, !tbaa !66
  br label %if.end.502

if.end.502:                                       ; preds = %if.else.493, %if.then.489
  br label %if.end.503

if.end.503:                                       ; preds = %if.end.502, %if.end.481
  %355 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %incdec.ptr504 = getelementptr inbounds i8, i8* %355, i32 1
  store i8* %incdec.ptr504, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.505

for.inc.505:                                      ; preds = %if.end.503
  %356 = load i32, i32* %i, align 4, !tbaa !5
  %dec506 = add nsw i32 %356, -1
  store i32 %dec506, i32* %i, align 4, !tbaa !5
  br label %for.cond.298

for.end.507:                                      ; preds = %for.cond.298
  %357 = load i32, i32* %rowstride, align 4, !tbaa !5
  %358 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %idx.ext508 = sext i32 %357 to i64
  %add.ptr509 = getelementptr inbounds i8, i8* %358, i64 %idx.ext508
  store i8* %add.ptr509, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.510

for.inc.510:                                      ; preds = %for.end.507
  %359 = load i32, i32* %j, align 4, !tbaa !5
  %dec511 = add nsw i32 %359, -1
  store i32 %dec511, i32* %j, align 4, !tbaa !5
  br label %for.cond.294

for.end.512:                                      ; preds = %for.cond.294
  br label %if.end.513

if.end.513:                                       ; preds = %for.end.512, %for.end.292
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.513, %if.then
  %360 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %360) #2
  %361 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %361) #2
  call void @llvm.lifetime.end(i64 1, i8* %src_alpha) #2
  call void @llvm.lifetime.end(i64 1, i8* %shape) #2
  %362 = bitcast i64* %comps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %362) #2
  %363 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %363) #2
  %364 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.end(i64 4, i8* %364) #2
  %365 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.end(i64 4, i8* %365) #2
  %366 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %366) #2
  %367 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %367) #2
  %368 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %368) #2
  %369 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %369) #2
  %370 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.end(i64 4, i8* %370) #2
  %371 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %371) #2
  %372 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %372) #2
  %373 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.end(i64 4, i8* %373) #2
  %374 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.end(i64 4, i8* %374) #2
  %375 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %375) #2
  %376 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %376) #2
  %377 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %377) #2
  %378 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %378) #2
  %379 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.end(i64 67, i8* %379) #2
  %380 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.end(i64 67, i8* %380) #2
  %381 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %381) #2
  %382 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %382) #2
  %383 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %383) #2
  %384 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %384) #2
  %385 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %385) #2
  %386 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %386) #2
  %387 = load i32, i32* %retval
  ret i32 %387
}

; Function Attrs: nounwind readnone
declare double @floor(double) #4

declare void @art_pdf_knockoutisolated_group_8(i8*, i8*, i32) #0

declare void @art_pdf_composite_knockout_simple_8(i8*, i8*, i8*, i8*, i8 zeroext, i32, i8 zeroext) #0

declare void @art_pdf_composite_pixel_alpha_8_fast_mono(i8*, i8*, i32, %struct.pdf14_nonseparable_blending_procs_s*, i32) #0

declare void @art_pdf_composite_pixel_alpha_8_fast(i8*, i8*, i32, i32, %struct.pdf14_nonseparable_blending_procs_s*, i32) #0

declare void @art_pdf_composite_pixel_alpha_8(i8*, i8*, i32, i32, %struct.pdf14_nonseparable_blending_procs_s*) #0

declare void @gx_device_decache_colors(%struct.gx_device_s*) #0

declare i32 @gs_closedevice(%struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal void @gs_pdf14_device_copy_params(%struct.gx_device_s* %dev, %struct.gx_device_s* %target) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %profile_targ = alloca %struct.cmm_dev_profile_s*, align 8
  %profile_dev14 = alloca %struct.cmm_dev_profile_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %0 = bitcast %struct.cmm_dev_profile_s** %profile_targ to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.cmm_dev_profile_s** %profile_dev14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 13
  %3 = load i32, i32* %width, align 4, !tbaa !193
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %4, i32 0, i32 13
  store i32 %3, i32* %width1, align 4, !tbaa !193
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 14
  %6 = load i32, i32* %height, align 4, !tbaa !194
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 14
  store i32 %6, i32* %height2, align 4, !tbaa !194
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 19
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i32 0
  %9 = bitcast float* %arraydecay to i8*
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %MediaSize3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 19
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize3, i32 0, i32 0
  %11 = bitcast float* %arraydecay4 to i8*
  %call = call i8* @memcpy(i8* %9, i8* %11, i64 8) #8
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %ImagingBBox = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 20
  %arraydecay5 = getelementptr inbounds [4 x float], [4 x float]* %ImagingBBox, i32 0, i32 0
  %13 = bitcast float* %arraydecay5 to i8*
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %ImagingBBox6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 20
  %arraydecay7 = getelementptr inbounds [4 x float], [4 x float]* %ImagingBBox6, i32 0, i32 0
  %15 = bitcast float* %arraydecay7 to i8*
  %call8 = call i8* @memcpy(i8* %13, i8* %15, i64 16) #8
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %ImagingBBox_set = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 21
  %17 = load i32, i32* %ImagingBBox_set, align 4, !tbaa !346
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %ImagingBBox_set9 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 21
  store i32 %17, i32* %ImagingBBox_set9, align 4, !tbaa !346
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %19, i32 0, i32 22
  %arraydecay10 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i32 0
  %20 = bitcast float* %arraydecay10 to i8*
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %HWResolution11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %21, i32 0, i32 22
  %arraydecay12 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution11, i32 0, i32 0
  %22 = bitcast float* %arraydecay12 to i8*
  %call13 = call i8* @memcpy(i8* %20, i8* %22, i64 8) #8
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MarginsHWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %23, i32 0, i32 23
  %arraydecay14 = getelementptr inbounds [2 x float], [2 x float]* %MarginsHWResolution, i32 0, i32 0
  %24 = bitcast float* %arraydecay14 to i8*
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %MarginsHWResolution15 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 23
  %arraydecay16 = getelementptr inbounds [2 x float], [2 x float]* %MarginsHWResolution15, i32 0, i32 0
  %26 = bitcast float* %arraydecay16 to i8*
  %call17 = call i8* @memcpy(i8* %24, i8* %26, i64 8) #8
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %Margins = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 24
  %arraydecay18 = getelementptr inbounds [2 x float], [2 x float]* %Margins, i32 0, i32 0
  %28 = bitcast float* %arraydecay18 to i8*
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %Margins19 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %29, i32 0, i32 24
  %arraydecay20 = getelementptr inbounds [2 x float], [2 x float]* %Margins19, i32 0, i32 0
  %30 = bitcast float* %arraydecay20 to i8*
  %call21 = call i8* @memcpy(i8* %28, i8* %30, i64 8) #8
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWMargins = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %31, i32 0, i32 25
  %arraydecay22 = getelementptr inbounds [4 x float], [4 x float]* %HWMargins, i32 0, i32 0
  %32 = bitcast float* %arraydecay22 to i8*
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %HWMargins23 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %33, i32 0, i32 25
  %arraydecay24 = getelementptr inbounds [4 x float], [4 x float]* %HWMargins23, i32 0, i32 0
  %34 = bitcast float* %arraydecay24 to i8*
  %call25 = call i8* @memcpy(i8* %32, i8* %34, i64 16) #8
  %35 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %PageCount = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %35, i32 0, i32 26
  %36 = load i64, i64* %PageCount, align 8, !tbaa !347
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %PageCount26 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 26
  store i64 %36, i64* %PageCount26, align 8, !tbaa !347
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %MaxPatternBitmap = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %38, i32 0, i32 36
  %39 = load i32, i32* %MaxPatternBitmap, align 4, !tbaa !348
  %40 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MaxPatternBitmap27 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %40, i32 0, i32 36
  store i32 %39, i32* %MaxPatternBitmap27, align 4, !tbaa !348
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %space_params = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 38
  %42 = bitcast %struct.gdev_space_params_s* %space_params to i8*
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params28 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %43, i32 0, i32 38
  %44 = bitcast %struct.gdev_space_params_s* %space_params28 to i8*
  %call29 = call i8* @memcpy(i8* %42, i8* %44, i64 40) #8
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 39
  %46 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %cmp = icmp eq %struct.cmm_dev_profile_s* %46, null
  br i1 %cmp, label %if.then, label %if.end.69

if.then:                                          ; preds = %entry
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %47, i32 0, i32 3
  %48 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %call30 = call %struct.cmm_dev_profile_s* @gsicc_new_device_profile_array(%struct.gs_memory_s* %48) #7
  %49 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct31 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %49, i32 0, i32 39
  store %struct.cmm_dev_profile_s* %call30, %struct.cmm_dev_profile_s** %icc_struct31, align 8, !tbaa !282
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct32 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %50, i32 0, i32 39
  %51 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct32, align 8, !tbaa !282
  store %struct.cmm_dev_profile_s* %51, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %52 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %52, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %53 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call33 = call i32 %53(%struct.gx_device_s* %54, %struct.cmm_dev_profile_s** %profile_targ) #7
  %55 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %55, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %56 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %57 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %device_profile34 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %57, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile34, i32 0, i64 0
  store %struct.cmm_profile_s* %56, %struct.cmm_profile_s** %arrayidx35, align 8, !tbaa !1
  %58 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %devicegraytok = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %58, i32 0, i32 5
  %59 = load i32, i32* %devicegraytok, align 4, !tbaa !349
  %60 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct36 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %60, i32 0, i32 39
  %61 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct36, align 8, !tbaa !282
  %devicegraytok37 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %61, i32 0, i32 5
  store i32 %59, i32* %devicegraytok37, align 4, !tbaa !349
  %62 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %graydetection = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %62, i32 0, i32 6
  %63 = load i32, i32* %graydetection, align 4, !tbaa !350
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct38 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %64, i32 0, i32 39
  %65 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct38, align 8, !tbaa !282
  %graydetection39 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %65, i32 0, i32 6
  store i32 %63, i32* %graydetection39, align 4, !tbaa !350
  %66 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %pageneutralcolor = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %66, i32 0, i32 7
  %67 = load i32, i32* %pageneutralcolor, align 4, !tbaa !91
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct40 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %68, i32 0, i32 39
  %69 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct40, align 8, !tbaa !282
  %pageneutralcolor41 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %69, i32 0, i32 7
  store i32 %67, i32* %pageneutralcolor41, align 4, !tbaa !91
  %70 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %supports_devn = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %70, i32 0, i32 9
  %71 = load i32, i32* %supports_devn, align 4, !tbaa !325
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct42 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %72, i32 0, i32 39
  %73 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct42, align 8, !tbaa !282
  %supports_devn43 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %73, i32 0, i32 9
  store i32 %71, i32* %supports_devn43, align 4, !tbaa !325
  %74 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %usefastcolor = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %74, i32 0, i32 8
  %75 = load i32, i32* %usefastcolor, align 4, !tbaa !351
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct44 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %76, i32 0, i32 39
  %77 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct44, align 8, !tbaa !282
  %usefastcolor45 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %77, i32 0, i32 8
  store i32 %75, i32* %usefastcolor45, align 4, !tbaa !351
  %78 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %device_profile46 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %78, i32 0, i32 0
  %arrayidx47 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile46, i32 0, i64 0
  %79 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx47, align 8, !tbaa !1
  %lock = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %79, i32 0, i32 22
  %80 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock, align 8, !tbaa !143
  %native = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %80, i32 0, i32 1
  %call48 = call i32 @gp_monitor_enter(%union.gp_monitor* %native) #7
  br label %do.body

do.body:                                          ; preds = %if.then
  %81 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %device_profile49 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %81, i32 0, i32 0
  %arrayidx50 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile49, i32 0, i64 0
  %82 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx50, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %82, null
  br i1 %tobool, label %if.then.51, label %if.end

if.then.51:                                       ; preds = %do.body
  br label %do.body.52

do.body.52:                                       ; preds = %if.then.51
  %83 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %device_profile53 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %83, i32 0, i32 0
  %arrayidx54 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile53, i32 0, i64 0
  %84 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx54, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %84, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %85 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %85, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.55

do.body.55:                                       ; preds = %do.body.52
  br label %do.cond

do.cond:                                          ; preds = %do.body.55
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.cond.56

do.cond.56:                                       ; preds = %do.end
  br label %do.end.57

do.end.57:                                        ; preds = %do.cond.56
  br label %if.end

if.end:                                           ; preds = %do.end.57, %do.body
  br label %do.cond.58

do.cond.58:                                       ; preds = %if.end
  br label %do.end.59

do.end.59:                                        ; preds = %do.cond.58
  %86 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %device_profile60 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %86, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile60, i32 0, i64 0
  %87 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx61, align 8, !tbaa !1
  %lock62 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %87, i32 0, i32 22
  %88 = load %struct.gx_monitor_s*, %struct.gx_monitor_s** %lock62, align 8, !tbaa !143
  %native63 = getelementptr inbounds %struct.gx_monitor_s, %struct.gx_monitor_s* %88, i32 0, i32 1
  %call64 = call i32 @gp_monitor_leave(%union.gp_monitor* %native63) #7
  %89 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %rendercond = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %89, i32 0, i32 4
  %arrayidx65 = getelementptr inbounds [4 x %struct.gsicc_rendering_param_s], [4 x %struct.gsicc_rendering_param_s]* %rendercond, i32 0, i64 0
  %90 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %rendercond66 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %90, i32 0, i32 4
  %arrayidx67 = getelementptr inbounds [4 x %struct.gsicc_rendering_param_s], [4 x %struct.gsicc_rendering_param_s]* %rendercond66, i32 0, i64 0
  %91 = bitcast %struct.gsicc_rendering_param_s* %arrayidx65 to i8*
  %92 = bitcast %struct.gsicc_rendering_param_s* %arrayidx67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 24, i32 4, i1 false), !tbaa.struct !352
  %93 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_targ, align 8, !tbaa !1
  %sim_overprint = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %93, i32 0, i32 10
  %94 = load i32, i32* %sim_overprint, align 4, !tbaa !353
  %95 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %profile_dev14, align 8, !tbaa !1
  %sim_overprint68 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %95, i32 0, i32 10
  store i32 %94, i32* %sim_overprint68, align 4, !tbaa !353
  br label %if.end.69

if.end.69:                                        ; preds = %do.end.59, %entry
  %96 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %96, i32 0, i32 40
  %97 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %98 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %graphics_type_tag70 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %98, i32 0, i32 40
  store i32 %97, i32* %graphics_type_tag70, align 4, !tbaa !326
  %99 = bitcast %struct.cmm_dev_profile_s** %profile_dev14 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %99) #2
  %100 = bitcast %struct.cmm_dev_profile_s** %profile_targ to i8*
  call void @llvm.lifetime.end(i64 8, i8* %100) #2
  ret void
}

declare %struct.cmm_dev_profile_s* @gsicc_new_device_profile_array(%struct.gs_memory_s*) #0

declare i32 @gp_monitor_enter(%union.gp_monitor*) #0

declare i32 @gp_monitor_leave(%union.gp_monitor*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_copy_alpha_color(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %aa_raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color, %struct.gx_device_color_s* %pdc, i32 %depth, i32 %devn) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %aa_raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %depth.addr = alloca i32, align 4
  %devn.addr = alloca i32, align 4
  %aa_row = alloca i8*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %line = alloca i8*, align 8
  %dst_ptr = alloca i8*, align 8
  %src = alloca [67 x i8], align 16
  %dst = alloca [67 x i8], align 16
  %blend_mode = alloca i32, align 4
  %additive = alloca i32, align 4
  %rowstride = alloca i32, align 4
  %planestride = alloca i32, align 4
  %curr_tag = alloca i32, align 4
  %has_alpha_g = alloca i32, align 4
  %has_shape = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %knockout = alloca i32, align 4
  %num_chan = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %shape_off = alloca i32, align 4
  %alpha_g_off = alloca i32, align 4
  %tag_off = alloca i32, align 4
  %overprint = alloca i32, align 4
  %blendspot = alloca i32, align 4
  %drawn_comps = alloca i64, align 8
  %comps = alloca i64, align 8
  %shape = alloca i8, align 1
  %src_alpha = alloca i8, align 1
  %alpha2_aa = alloca i32, align 4
  %alpha_aa = alloca i32, align 4
  %sx = alloca i32, align 4
  %alpha_aa_act = alloca i32, align 4
  %xoff = alloca i32, align 4
  %mask = alloca i64, align 8
  %shift = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %tmp = alloca i32, align 4
  %temp = alloca i32, align 4
  %tmp415 = alloca i32, align 4
  %tmp437 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %aa_raster, i32* %aa_raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !68
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !68
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  store i32 %devn, i32* %devn.addr, align 4, !tbaa !5
  %0 = bitcast i8** %aa_row to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s* %2 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %3, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 47
  %6 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %6, i32 0, i32 0
  %7 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %7, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %8 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i8** %line to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.start(i64 67, i8* %13) #2
  %14 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.start(i64 67, i8* %14) #2
  %15 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_mode1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 52
  %17 = load i32, i32* %blend_mode1, align 4, !tbaa !48
  store i32 %17, i32* %blend_mode, align 4, !tbaa !66
  %18 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 47
  %20 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx2, align 8, !tbaa !7
  %additive3 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %20, i32 0, i32 4
  %21 = load i32, i32* %additive3, align 4, !tbaa !272
  store i32 %21, i32* %additive, align 4, !tbaa !5
  %22 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #2
  %23 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %23, i32 0, i32 11
  %24 = load i32, i32* %rowstride4, align 4, !tbaa !59
  store i32 %24, i32* %rowstride, align 4, !tbaa !5
  %25 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %25) #2
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride5 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 12
  %27 = load i32, i32* %planestride5, align 4, !tbaa !58
  store i32 %27, i32* %planestride, align 4, !tbaa !5
  %28 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  store i32 0, i32* %curr_tag, align 4, !tbaa !66
  %29 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #2
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_alpha_g6 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 7
  %31 = load i32, i32* %has_alpha_g6, align 4, !tbaa !332
  store i32 %31, i32* %has_alpha_g, align 4, !tbaa !5
  %32 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %32) #2
  %33 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_shape7 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %33, i32 0, i32 8
  %34 = load i32, i32* %has_shape7, align 4, !tbaa !40
  store i32 %34, i32* %has_shape, align 4, !tbaa !5
  %35 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %35) #2
  %36 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags8 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %36, i32 0, i32 9
  %37 = load i32, i32* %has_tags8, align 4, !tbaa !327
  store i32 %37, i32* %has_tags, align 4, !tbaa !5
  %38 = bitcast i32* %knockout to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #2
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout9 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %39, i32 0, i32 3
  %40 = load i32, i32* %knockout9, align 4, !tbaa !198
  store i32 %40, i32* %knockout, align 4, !tbaa !5
  %41 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.start(i64 4, i8* %41) #2
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %42, i32 0, i32 13
  %43 = load i32, i32* %n_chan, align 4, !tbaa !38
  store i32 %43, i32* %num_chan, align 4, !tbaa !5
  %44 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #2
  %45 = load i32, i32* %num_chan, align 4, !tbaa !5
  %sub = sub nsw i32 %45, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  %46 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %46) #2
  %47 = load i32, i32* %num_chan, align 4, !tbaa !5
  %48 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul = mul nsw i32 %47, %48
  store i32 %mul, i32* %shape_off, align 4, !tbaa !5
  %49 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %49) #2
  %50 = load i32, i32* %shape_off, align 4, !tbaa !5
  %51 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %52 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %52, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %50, %cond
  store i32 %add, i32* %alpha_g_off, align 4, !tbaa !5
  %53 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.start(i64 4, i8* %53) #2
  %54 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %55 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool10 = icmp ne i32 %55, 0
  br i1 %tobool10, label %cond.true.11, label %cond.false.12

cond.true.11:                                     ; preds = %cond.end
  %56 = load i32, i32* %planestride, align 4, !tbaa !5
  br label %cond.end.13

cond.false.12:                                    ; preds = %cond.end
  br label %cond.end.13

cond.end.13:                                      ; preds = %cond.false.12, %cond.true.11
  %cond14 = phi i32 [ %56, %cond.true.11 ], [ 0, %cond.false.12 ]
  %add15 = add nsw i32 %54, %cond14
  store i32 %add15, i32* %tag_off, align 4, !tbaa !5
  %57 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.start(i64 4, i8* %57) #2
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %overprint16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 54
  %59 = load i32, i32* %overprint16, align 4, !tbaa !345
  store i32 %59, i32* %overprint, align 4, !tbaa !5
  %60 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.start(i64 4, i8* %60) #2
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blendspot17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 56
  %62 = load i32, i32* %blendspot17, align 4, !tbaa !238
  store i32 %62, i32* %blendspot, align 4, !tbaa !5
  %63 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %63) #2
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %drawn_comps18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 57
  %65 = load i64, i64* %drawn_comps18, align 8, !tbaa !242
  store i64 %65, i64* %drawn_comps, align 8, !tbaa !68
  %66 = bitcast i64* %comps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %66) #2
  call void @llvm.lifetime.start(i64 1, i8* %shape) #2
  store i8 0, i8* %shape, align 1, !tbaa !66
  call void @llvm.lifetime.start(i64 1, i8* %src_alpha) #2
  %67 = bitcast i32* %alpha2_aa to i8*
  call void @llvm.lifetime.start(i64 4, i8* %67) #2
  %68 = bitcast i32* %alpha_aa to i8*
  call void @llvm.lifetime.start(i64 4, i8* %68) #2
  %69 = bitcast i32* %sx to i8*
  call void @llvm.lifetime.start(i64 4, i8* %69) #2
  %70 = bitcast i32* %alpha_aa_act to i8*
  call void @llvm.lifetime.start(i64 4, i8* %70) #2
  %71 = bitcast i32* %xoff to i8*
  call void @llvm.lifetime.start(i64 4, i8* %71) #2
  %72 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %72) #2
  store i64 255, i64* %mask, align 8, !tbaa !68
  %73 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %73) #2
  store i32 8, i32* %shift, align 4, !tbaa !5
  %74 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data19 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %74, i32 0, i32 15
  %75 = load i8*, i8** %data19, align 8, !tbaa !36
  %cmp = icmp eq i8* %75, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.13
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.end.13
  %76 = load i8*, i8** %data.addr, align 8, !tbaa !1
  store i8* %76, i8** %aa_row, align 8, !tbaa !1
  %77 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool20 = icmp ne i32 %77, 0
  br i1 %tobool20, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %if.end
  %78 = load i64, i64* %color.addr, align 8, !tbaa !68
  %79 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul22 = mul nsw i32 %79, 8
  %sh_prom = zext i32 %mul22 to i64
  %shr = lshr i64 %78, %sh_prom
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %curr_tag, align 4, !tbaa !66
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.21, %if.end
  %80 = load i32, i32* %devn.addr, align 4, !tbaa !5
  %tobool24 = icmp ne i32 %80, 0
  br i1 %tobool24, label %if.then.25, label %if.else.59

if.then.25:                                       ; preds = %if.end.23
  %81 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool26 = icmp ne i32 %81, 0
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then.25
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.27
  %82 = load i32, i32* %j, align 4, !tbaa !5
  %83 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp28 = icmp slt i32 %82, %83
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %84 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom = sext i32 %84 to i64
  %85 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %85, i32 0, i32 1
  %devn30 = bitcast %union._c* %colors to %struct._devn*
  %values = getelementptr inbounds %struct._devn, %struct._devn* %devn30, i32 0, i32 0
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %values, i32 0, i64 %idxprom
  %86 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv31 = zext i16 %86 to i32
  %87 = load i32, i32* %shift, align 4, !tbaa !5
  %shr32 = ashr i32 %conv31, %87
  %conv33 = sext i32 %shr32 to i64
  %88 = load i64, i64* %mask, align 8, !tbaa !68
  %and34 = and i64 %conv33, %88
  %conv35 = trunc i64 %and34 to i8
  %89 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom36 = sext i32 %89 to i64
  %arrayidx37 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom36
  store i8 %conv35, i8* %arrayidx37, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %90 = load i32, i32* %j, align 4, !tbaa !5
  %inc = add nsw i32 %90, 1
  store i32 %inc, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.58

if.else:                                          ; preds = %if.then.25
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.55, %if.else
  %91 = load i32, i32* %j, align 4, !tbaa !5
  %92 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp39 = icmp slt i32 %91, %92
  br i1 %cmp39, label %for.body.41, label %for.end.57

for.body.41:                                      ; preds = %for.cond.38
  %93 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom42 = sext i32 %93 to i64
  %94 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors43 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %94, i32 0, i32 1
  %devn44 = bitcast %union._c* %colors43 to %struct._devn*
  %values45 = getelementptr inbounds %struct._devn, %struct._devn* %devn44, i32 0, i32 0
  %arrayidx46 = getelementptr inbounds [64 x i16], [64 x i16]* %values45, i32 0, i64 %idxprom42
  %95 = load i16, i16* %arrayidx46, align 2, !tbaa !67
  %conv47 = zext i16 %95 to i32
  %96 = load i32, i32* %shift, align 4, !tbaa !5
  %shr48 = ashr i32 %conv47, %96
  %conv49 = sext i32 %shr48 to i64
  %97 = load i64, i64* %mask, align 8, !tbaa !68
  %and50 = and i64 %conv49, %97
  %sub51 = sub i64 255, %and50
  %conv52 = trunc i64 %sub51 to i8
  %98 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom53 = sext i32 %98 to i64
  %arrayidx54 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom53
  store i8 %conv52, i8* %arrayidx54, align 1, !tbaa !66
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.body.41
  %99 = load i32, i32* %j, align 4, !tbaa !5
  %inc56 = add nsw i32 %99, 1
  store i32 %inc56, i32* %j, align 4, !tbaa !5
  br label %for.cond.38

for.end.57:                                       ; preds = %for.cond.38
  br label %if.end.58

if.end.58:                                        ; preds = %for.end.57, %for.end
  br label %if.end.60

if.else.59:                                       ; preds = %if.end.23
  %100 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %100, i32 0, i32 45
  %101 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %unpack_color = getelementptr inbounds %struct.pdf14_procs_s, %struct.pdf14_procs_s* %101, i32 0, i32 0
  %102 = load void (i32, i64, %struct.pdf14_device_s*, i8*)*, void (i32, i64, %struct.pdf14_device_s*, i8*)** %unpack_color, align 8, !tbaa !341
  %103 = load i32, i32* %num_comp, align 4, !tbaa !5
  %104 = load i64, i64* %color.addr, align 8, !tbaa !68
  %105 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  call void %102(i32 %103, i64 %104, %struct.pdf14_device_s* %105, i8* %arraydecay) #7
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.59, %if.end.58
  %106 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %106, i32 0, i32 51
  %107 = load float, float* %alpha, align 4, !tbaa !343
  %mul61 = fmul float 2.550000e+02, %107
  %conv62 = fpext float %mul61 to double
  %add63 = fadd double %conv62, 5.000000e-01
  %call = call double @floor(double %add63) #9
  %conv64 = fptoui double %call to i8
  %108 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom65 = sext i32 %108 to i64
  %arrayidx66 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom65
  store i8 %conv64, i8* %arrayidx66, align 1, !tbaa !66
  store i8 %conv64, i8* %src_alpha, align 1, !tbaa !66
  %109 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool67 = icmp ne i32 %109, 0
  br i1 %tobool67, label %if.then.68, label %if.end.75

if.then.68:                                       ; preds = %if.end.60
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %shape69 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %110, i32 0, i32 50
  %111 = load float, float* %shape69, align 4, !tbaa !344
  %mul70 = fmul float 2.550000e+02, %111
  %conv71 = fpext float %mul70 to double
  %add72 = fadd double %conv71, 5.000000e-01
  %call73 = call double @floor(double %add72) #9
  %conv74 = fptoui double %call73 to i8
  store i8 %conv74, i8* %shape, align 1, !tbaa !66
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.68, %if.end.60
  %112 = load i32, i32* %x.addr, align 4, !tbaa !5
  %113 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %113, i32 0, i32 10
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x76 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %114 = load i32, i32* %x76, align 4, !tbaa !43
  %cmp77 = icmp slt i32 %112, %114
  br i1 %cmp77, label %if.then.79, label %if.else.93

if.then.79:                                       ; preds = %if.end.75
  %115 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %116 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect80 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %116, i32 0, i32 10
  %p81 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect80, i32 0, i32 0
  %x82 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p81, i32 0, i32 0
  %117 = load i32, i32* %x82, align 4, !tbaa !43
  %add83 = add nsw i32 %115, %117
  %118 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub84 = sub nsw i32 %add83, %118
  store i32 %sub84, i32* %xoff, align 4, !tbaa !5
  %119 = load i32, i32* %x.addr, align 4, !tbaa !5
  %120 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect85 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %120, i32 0, i32 10
  %p86 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect85, i32 0, i32 0
  %x87 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p86, i32 0, i32 0
  %121 = load i32, i32* %x87, align 4, !tbaa !43
  %sub88 = sub nsw i32 %119, %121
  %122 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add89 = add nsw i32 %122, %sub88
  store i32 %add89, i32* %w.addr, align 4, !tbaa !5
  %123 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect90 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %123, i32 0, i32 10
  %p91 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect90, i32 0, i32 0
  %x92 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p91, i32 0, i32 0
  %124 = load i32, i32* %x92, align 4, !tbaa !43
  store i32 %124, i32* %x.addr, align 4, !tbaa !5
  br label %if.end.94

if.else.93:                                       ; preds = %if.end.75
  %125 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %125, i32* %xoff, align 4, !tbaa !5
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.93, %if.then.79
  %126 = load i32, i32* %y.addr, align 4, !tbaa !5
  %127 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect95 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %127, i32 0, i32 10
  %p96 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect95, i32 0, i32 0
  %y97 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p96, i32 0, i32 1
  %128 = load i32, i32* %y97, align 4, !tbaa !46
  %cmp98 = icmp slt i32 %126, %128
  br i1 %cmp98, label %if.then.100, label %if.end.114

if.then.100:                                      ; preds = %if.end.94
  %129 = load i32, i32* %y.addr, align 4, !tbaa !5
  %130 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect101 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %130, i32 0, i32 10
  %p102 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect101, i32 0, i32 0
  %y103 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p102, i32 0, i32 1
  %131 = load i32, i32* %y103, align 4, !tbaa !46
  %sub104 = sub nsw i32 %129, %131
  %132 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add105 = add nsw i32 %132, %sub104
  store i32 %add105, i32* %h.addr, align 4, !tbaa !5
  %133 = load i32, i32* %y.addr, align 4, !tbaa !5
  %134 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect106 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %134, i32 0, i32 10
  %p107 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect106, i32 0, i32 0
  %y108 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p107, i32 0, i32 1
  %135 = load i32, i32* %y108, align 4, !tbaa !46
  %sub109 = sub nsw i32 %133, %135
  %136 = load i32, i32* %aa_raster.addr, align 4, !tbaa !5
  %mul110 = mul nsw i32 %sub109, %136
  %137 = load i8*, i8** %aa_row, align 8, !tbaa !1
  %idx.ext = sext i32 %mul110 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %137, i64 %idx.neg
  store i8* %add.ptr, i8** %aa_row, align 8, !tbaa !1
  %138 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect111 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %138, i32 0, i32 10
  %p112 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect111, i32 0, i32 0
  %y113 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p112, i32 0, i32 1
  %139 = load i32, i32* %y113, align 4, !tbaa !46
  store i32 %139, i32* %y.addr, align 4, !tbaa !5
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.100, %if.end.94
  %140 = load i32, i32* %x.addr, align 4, !tbaa !5
  %141 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add115 = add nsw i32 %140, %141
  %142 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect116 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %142, i32 0, i32 10
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect116, i32 0, i32 1
  %x117 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %143 = load i32, i32* %x117, align 4, !tbaa !42
  %cmp118 = icmp sgt i32 %add115, %143
  br i1 %cmp118, label %if.then.120, label %if.end.125

if.then.120:                                      ; preds = %if.end.114
  %144 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect121 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %144, i32 0, i32 10
  %q122 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect121, i32 0, i32 1
  %x123 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q122, i32 0, i32 0
  %145 = load i32, i32* %x123, align 4, !tbaa !42
  %146 = load i32, i32* %x.addr, align 4, !tbaa !5
  %sub124 = sub nsw i32 %145, %146
  store i32 %sub124, i32* %w.addr, align 4, !tbaa !5
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.120, %if.end.114
  %147 = load i32, i32* %y.addr, align 4, !tbaa !5
  %148 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add126 = add nsw i32 %147, %148
  %149 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect127 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %149, i32 0, i32 10
  %q128 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect127, i32 0, i32 1
  %y129 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q128, i32 0, i32 1
  %150 = load i32, i32* %y129, align 4, !tbaa !45
  %cmp130 = icmp sgt i32 %add126, %150
  br i1 %cmp130, label %if.then.132, label %if.end.137

if.then.132:                                      ; preds = %if.end.125
  %151 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect133 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %151, i32 0, i32 10
  %q134 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect133, i32 0, i32 1
  %y135 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q134, i32 0, i32 1
  %152 = load i32, i32* %y135, align 4, !tbaa !45
  %153 = load i32, i32* %y.addr, align 4, !tbaa !5
  %sub136 = sub nsw i32 %152, %153
  store i32 %sub136, i32* %h.addr, align 4, !tbaa !5
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.132, %if.end.125
  %154 = load i32, i32* %x.addr, align 4, !tbaa !5
  %155 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %155, i32 0, i32 17
  %p138 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x139 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p138, i32 0, i32 0
  %156 = load i32, i32* %x139, align 4, !tbaa !335
  %cmp140 = icmp slt i32 %154, %156
  br i1 %cmp140, label %if.then.142, label %if.end.146

if.then.142:                                      ; preds = %if.end.137
  %157 = load i32, i32* %x.addr, align 4, !tbaa !5
  %158 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty143 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %158, i32 0, i32 17
  %p144 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty143, i32 0, i32 0
  %x145 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p144, i32 0, i32 0
  store i32 %157, i32* %x145, align 4, !tbaa !335
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.142, %if.end.137
  %159 = load i32, i32* %y.addr, align 4, !tbaa !5
  %160 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty147 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %160, i32 0, i32 17
  %p148 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty147, i32 0, i32 0
  %y149 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p148, i32 0, i32 1
  %161 = load i32, i32* %y149, align 4, !tbaa !336
  %cmp150 = icmp slt i32 %159, %161
  br i1 %cmp150, label %if.then.152, label %if.end.156

if.then.152:                                      ; preds = %if.end.146
  %162 = load i32, i32* %y.addr, align 4, !tbaa !5
  %163 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty153 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %163, i32 0, i32 17
  %p154 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty153, i32 0, i32 0
  %y155 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p154, i32 0, i32 1
  store i32 %162, i32* %y155, align 4, !tbaa !336
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.152, %if.end.146
  %164 = load i32, i32* %x.addr, align 4, !tbaa !5
  %165 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add157 = add nsw i32 %164, %165
  %166 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty158 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %166, i32 0, i32 17
  %q159 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty158, i32 0, i32 1
  %x160 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q159, i32 0, i32 0
  %167 = load i32, i32* %x160, align 4, !tbaa !337
  %cmp161 = icmp sgt i32 %add157, %167
  br i1 %cmp161, label %if.then.163, label %if.end.168

if.then.163:                                      ; preds = %if.end.156
  %168 = load i32, i32* %x.addr, align 4, !tbaa !5
  %169 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add164 = add nsw i32 %168, %169
  %170 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty165 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %170, i32 0, i32 17
  %q166 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty165, i32 0, i32 1
  %x167 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q166, i32 0, i32 0
  store i32 %add164, i32* %x167, align 4, !tbaa !337
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.163, %if.end.156
  %171 = load i32, i32* %y.addr, align 4, !tbaa !5
  %172 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add169 = add nsw i32 %171, %172
  %173 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty170 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %173, i32 0, i32 17
  %q171 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty170, i32 0, i32 1
  %y172 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q171, i32 0, i32 1
  %174 = load i32, i32* %y172, align 4, !tbaa !338
  %cmp173 = icmp sgt i32 %add169, %174
  br i1 %cmp173, label %if.then.175, label %if.end.180

if.then.175:                                      ; preds = %if.end.168
  %175 = load i32, i32* %y.addr, align 4, !tbaa !5
  %176 = load i32, i32* %h.addr, align 4, !tbaa !5
  %add176 = add nsw i32 %175, %176
  %177 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty177 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %177, i32 0, i32 17
  %q178 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty177, i32 0, i32 1
  %y179 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q178, i32 0, i32 1
  store i32 %add176, i32* %y179, align 4, !tbaa !338
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.175, %if.end.168
  %178 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data181 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %178, i32 0, i32 15
  %179 = load i8*, i8** %data181, align 8, !tbaa !36
  %180 = load i32, i32* %x.addr, align 4, !tbaa !5
  %181 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect182 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %181, i32 0, i32 10
  %p183 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect182, i32 0, i32 0
  %x184 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p183, i32 0, i32 0
  %182 = load i32, i32* %x184, align 4, !tbaa !43
  %sub185 = sub nsw i32 %180, %182
  %idx.ext186 = sext i32 %sub185 to i64
  %add.ptr187 = getelementptr inbounds i8, i8* %179, i64 %idx.ext186
  %183 = load i32, i32* %y.addr, align 4, !tbaa !5
  %184 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect188 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %184, i32 0, i32 10
  %p189 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect188, i32 0, i32 0
  %y190 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p189, i32 0, i32 1
  %185 = load i32, i32* %y190, align 4, !tbaa !46
  %sub191 = sub nsw i32 %183, %185
  %186 = load i32, i32* %rowstride, align 4, !tbaa !5
  %mul192 = mul nsw i32 %sub191, %186
  %idx.ext193 = sext i32 %mul192 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %add.ptr187, i64 %idx.ext193
  store i8* %add.ptr194, i8** %line, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.195

for.cond.195:                                     ; preds = %for.inc.482, %if.end.180
  %187 = load i32, i32* %j, align 4, !tbaa !5
  %188 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp196 = icmp slt i32 %187, %188
  br i1 %cmp196, label %for.body.198, label %for.end.486

for.body.198:                                     ; preds = %for.cond.195
  %189 = load i8*, i8** %line, align 8, !tbaa !1
  store i8* %189, i8** %dst_ptr, align 8, !tbaa !1
  %190 = load i32, i32* %xoff, align 4, !tbaa !5
  store i32 %190, i32* %sx, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.476, %for.body.198
  %191 = load i32, i32* %i, align 4, !tbaa !5
  %192 = load i32, i32* %w.addr, align 4, !tbaa !5
  %cmp200 = icmp slt i32 %191, %192
  br i1 %cmp200, label %for.body.202, label %for.end.479

for.body.202:                                     ; preds = %for.cond.199
  %193 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool203 = icmp ne i32 %193, 0
  br i1 %tobool203, label %if.then.204, label %if.else.217

if.then.204:                                      ; preds = %for.body.202
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.205

for.cond.205:                                     ; preds = %for.inc.214, %if.then.204
  %194 = load i32, i32* %k, align 4, !tbaa !5
  %195 = load i32, i32* %num_chan, align 4, !tbaa !5
  %cmp206 = icmp slt i32 %194, %195
  br i1 %cmp206, label %for.body.208, label %for.end.216

for.body.208:                                     ; preds = %for.cond.205
  %196 = load i32, i32* %k, align 4, !tbaa !5
  %197 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul209 = mul nsw i32 %196, %197
  %idxprom210 = sext i32 %mul209 to i64
  %198 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx211 = getelementptr inbounds i8, i8* %198, i64 %idxprom210
  %199 = load i8, i8* %arrayidx211, align 1, !tbaa !66
  %200 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom212 = sext i32 %200 to i64
  %arrayidx213 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom212
  store i8 %199, i8* %arrayidx213, align 1, !tbaa !66
  br label %for.inc.214

for.inc.214:                                      ; preds = %for.body.208
  %201 = load i32, i32* %k, align 4, !tbaa !5
  %inc215 = add nsw i32 %201, 1
  store i32 %inc215, i32* %k, align 4, !tbaa !5
  br label %for.cond.205

for.end.216:                                      ; preds = %for.cond.205
  br label %if.end.238

if.else.217:                                      ; preds = %for.body.202
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.218

for.cond.218:                                     ; preds = %for.inc.230, %if.else.217
  %202 = load i32, i32* %k, align 4, !tbaa !5
  %203 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp219 = icmp slt i32 %202, %203
  br i1 %cmp219, label %for.body.221, label %for.end.232

for.body.221:                                     ; preds = %for.cond.218
  %204 = load i32, i32* %k, align 4, !tbaa !5
  %205 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul222 = mul nsw i32 %204, %205
  %idxprom223 = sext i32 %mul222 to i64
  %206 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx224 = getelementptr inbounds i8, i8* %206, i64 %idxprom223
  %207 = load i8, i8* %arrayidx224, align 1, !tbaa !66
  %conv225 = zext i8 %207 to i32
  %sub226 = sub nsw i32 255, %conv225
  %conv227 = trunc i32 %sub226 to i8
  %208 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom228 = sext i32 %208 to i64
  %arrayidx229 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom228
  store i8 %conv227, i8* %arrayidx229, align 1, !tbaa !66
  br label %for.inc.230

for.inc.230:                                      ; preds = %for.body.221
  %209 = load i32, i32* %k, align 4, !tbaa !5
  %inc231 = add nsw i32 %209, 1
  store i32 %inc231, i32* %k, align 4, !tbaa !5
  br label %for.cond.218

for.end.232:                                      ; preds = %for.cond.218
  %210 = load i32, i32* %num_comp, align 4, !tbaa !5
  %211 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul233 = mul nsw i32 %210, %211
  %idxprom234 = sext i32 %mul233 to i64
  %212 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx235 = getelementptr inbounds i8, i8* %212, i64 %idxprom234
  %213 = load i8, i8* %arrayidx235, align 1, !tbaa !66
  %214 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom236 = sext i32 %214 to i64
  %arrayidx237 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom236
  store i8 %213, i8* %arrayidx237, align 1, !tbaa !66
  br label %if.end.238

if.end.238:                                       ; preds = %for.end.232, %for.end.216
  %215 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %cmp239 = icmp eq i32 %215, 2
  br i1 %cmp239, label %if.then.241, label %if.else.251

if.then.241:                                      ; preds = %if.end.238
  %216 = load i32, i32* %sx, align 4, !tbaa !5
  %shr242 = ashr i32 %216, 2
  %idxprom243 = sext i32 %shr242 to i64
  %217 = load i8*, i8** %aa_row, align 8, !tbaa !1
  %arrayidx244 = getelementptr inbounds i8, i8* %217, i64 %idxprom243
  %218 = load i8, i8* %arrayidx244, align 1, !tbaa !66
  %conv245 = zext i8 %218 to i32
  %219 = load i32, i32* %sx, align 4, !tbaa !5
  %and246 = and i32 %219, 3
  %sub247 = sub nsw i32 3, %and246
  %shl = shl i32 %sub247, 1
  %shr248 = ashr i32 %conv245, %shl
  %and249 = and i32 %shr248, 3
  %mul250 = mul nsw i32 %and249, 5
  store i32 %mul250, i32* %alpha_aa, align 4, !tbaa !5
  br label %if.end.264

if.else.251:                                      ; preds = %if.end.238
  %220 = load i32, i32* %sx, align 4, !tbaa !5
  %shr252 = ashr i32 %220, 1
  %idxprom253 = sext i32 %shr252 to i64
  %221 = load i8*, i8** %aa_row, align 8, !tbaa !1
  %arrayidx254 = getelementptr inbounds i8, i8* %221, i64 %idxprom253
  %222 = load i8, i8* %arrayidx254, align 1, !tbaa !66
  %conv255 = zext i8 %222 to i32
  store i32 %conv255, i32* %alpha2_aa, align 4, !tbaa !5
  %223 = load i32, i32* %sx, align 4, !tbaa !5
  %and256 = and i32 %223, 1
  %tobool257 = icmp ne i32 %and256, 0
  br i1 %tobool257, label %cond.true.258, label %cond.false.260

cond.true.258:                                    ; preds = %if.else.251
  %224 = load i32, i32* %alpha2_aa, align 4, !tbaa !5
  %and259 = and i32 %224, 15
  br label %cond.end.262

cond.false.260:                                   ; preds = %if.else.251
  %225 = load i32, i32* %alpha2_aa, align 4, !tbaa !5
  %shr261 = ashr i32 %225, 4
  br label %cond.end.262

cond.end.262:                                     ; preds = %cond.false.260, %cond.true.258
  %cond263 = phi i32 [ %and259, %cond.true.258 ], [ %shr261, %cond.false.260 ]
  store i32 %cond263, i32* %alpha_aa, align 4, !tbaa !5
  br label %if.end.264

if.end.264:                                       ; preds = %cond.end.262, %if.then.241
  %226 = load i32, i32* %alpha_aa, align 4, !tbaa !5
  %cmp265 = icmp ne i32 %226, 0
  br i1 %cmp265, label %if.then.267, label %if.end.475

if.then.267:                                      ; preds = %if.end.264
  %227 = load i32, i32* %alpha_aa, align 4, !tbaa !5
  %cmp268 = icmp eq i32 %227, 15
  br i1 %cmp268, label %if.else.286, label %if.then.270

if.then.270:                                      ; preds = %if.then.267
  %228 = load i32, i32* %alpha_aa, align 4, !tbaa !5
  %mul271 = mul nsw i32 255, %228
  %div = sdiv i32 %mul271, 15
  store i32 %div, i32* %alpha_aa_act, align 4, !tbaa !5
  %229 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv272 = zext i8 %229 to i32
  %cmp273 = icmp ne i32 %conv272, 255
  br i1 %cmp273, label %if.then.275, label %if.end.282

if.then.275:                                      ; preds = %if.then.270
  %230 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %230) #2
  %231 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %conv276 = zext i8 %231 to i32
  %232 = load i32, i32* %alpha_aa_act, align 4, !tbaa !5
  %mul277 = mul nsw i32 %conv276, %232
  %add278 = add nsw i32 %mul277, 128
  store i32 %add278, i32* %tmp, align 4, !tbaa !5
  %233 = load i32, i32* %tmp, align 4, !tbaa !5
  %234 = load i32, i32* %tmp, align 4, !tbaa !5
  %shr279 = ashr i32 %234, 8
  %add280 = add nsw i32 %233, %shr279
  %shr281 = ashr i32 %add280, 8
  store i32 %shr281, i32* %alpha_aa_act, align 4, !tbaa !5
  %235 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %235) #2
  br label %if.end.282

if.end.282:                                       ; preds = %if.then.275, %if.then.270
  %236 = load i32, i32* %alpha_aa_act, align 4, !tbaa !5
  %conv283 = trunc i32 %236 to i8
  %237 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom284 = sext i32 %237 to i64
  %arrayidx285 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom284
  store i8 %conv283, i8* %arrayidx285, align 1, !tbaa !66
  br label %if.end.289

if.else.286:                                      ; preds = %if.then.267
  %238 = load i8, i8* %src_alpha, align 1, !tbaa !66
  %239 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom287 = sext i32 %239 to i64
  %arrayidx288 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom287
  store i8 %238, i8* %arrayidx288, align 1, !tbaa !66
  br label %if.end.289

if.end.289:                                       ; preds = %if.else.286, %if.end.282
  %240 = load i32, i32* %knockout, align 4, !tbaa !5
  %tobool290 = icmp ne i32 %240, 0
  br i1 %tobool290, label %if.then.291, label %if.else.315

if.then.291:                                      ; preds = %if.end.289
  %241 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool292 = icmp ne i32 %241, 0
  br i1 %tobool292, label %if.then.293, label %if.else.311

if.then.293:                                      ; preds = %if.then.291
  %arraydecay294 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %242 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool295 = icmp ne i32 %242, 0
  br i1 %tobool295, label %cond.true.296, label %cond.false.299

cond.true.296:                                    ; preds = %if.then.293
  %243 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %244 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idx.ext297 = sext i32 %244 to i64
  %add.ptr298 = getelementptr inbounds i8, i8* %243, i64 %idx.ext297
  br label %cond.end.300

cond.false.299:                                   ; preds = %if.then.293
  br label %cond.end.300

cond.end.300:                                     ; preds = %cond.false.299, %cond.true.296
  %cond301 = phi i8* [ %add.ptr298, %cond.true.296 ], [ null, %cond.false.299 ]
  %245 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool302 = icmp ne i32 %245, 0
  br i1 %tobool302, label %cond.true.303, label %cond.false.306

cond.true.303:                                    ; preds = %cond.end.300
  %246 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %247 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idx.ext304 = sext i32 %247 to i64
  %add.ptr305 = getelementptr inbounds i8, i8* %246, i64 %idx.ext304
  br label %cond.end.307

cond.false.306:                                   ; preds = %cond.end.300
  br label %cond.end.307

cond.end.307:                                     ; preds = %cond.false.306, %cond.true.303
  %cond308 = phi i8* [ %add.ptr305, %cond.true.303 ], [ null, %cond.false.306 ]
  %arraydecay309 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %248 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv310 = trunc i32 %248 to i8
  %249 = load i32, i32* %num_comp, align 4, !tbaa !5
  call void @art_pdf_composite_knockout_simple_8(i8* %arraydecay294, i8* %cond301, i8* %cond308, i8* %arraydecay309, i8 zeroext %conv310, i32 %249, i8 zeroext -1) #7
  br label %if.end.314

if.else.311:                                      ; preds = %if.then.291
  %arraydecay312 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %arraydecay313 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %250 = load i32, i32* %num_comp, align 4, !tbaa !5
  call void @art_pdf_knockoutisolated_group_8(i8* %arraydecay312, i8* %arraydecay313, i32 %250) #7
  br label %if.end.314

if.end.314:                                       ; preds = %if.else.311, %cond.end.307
  br label %if.end.318

if.else.315:                                      ; preds = %if.end.289
  %arraydecay316 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i32 0
  %arraydecay317 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i32 0
  %251 = load i32, i32* %num_comp, align 4, !tbaa !5
  %252 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %253 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %253, i32 0, i32 46
  %254 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  call void @art_pdf_composite_pixel_alpha_8(i8* %arraydecay316, i8* %arraydecay317, i32 %251, i32 %252, %struct.pdf14_nonseparable_blending_procs_s* %254) #7
  br label %if.end.318

if.end.318:                                       ; preds = %if.else.315, %if.end.314
  %255 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool319 = icmp ne i32 %255, 0
  br i1 %tobool319, label %if.then.320, label %if.else.333

if.then.320:                                      ; preds = %if.end.318
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.321

for.cond.321:                                     ; preds = %for.inc.330, %if.then.320
  %256 = load i32, i32* %k, align 4, !tbaa !5
  %257 = load i32, i32* %num_chan, align 4, !tbaa !5
  %cmp322 = icmp slt i32 %256, %257
  br i1 %cmp322, label %for.body.324, label %for.end.332

for.body.324:                                     ; preds = %for.cond.321
  %258 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom325 = sext i32 %258 to i64
  %arrayidx326 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom325
  %259 = load i8, i8* %arrayidx326, align 1, !tbaa !66
  %260 = load i32, i32* %k, align 4, !tbaa !5
  %261 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul327 = mul nsw i32 %260, %261
  %idxprom328 = sext i32 %mul327 to i64
  %262 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx329 = getelementptr inbounds i8, i8* %262, i64 %idxprom328
  store i8 %259, i8* %arrayidx329, align 1, !tbaa !66
  br label %for.inc.330

for.inc.330:                                      ; preds = %for.body.324
  %263 = load i32, i32* %k, align 4, !tbaa !5
  %inc331 = add nsw i32 %263, 1
  store i32 %inc331, i32* %k, align 4, !tbaa !5
  br label %for.cond.321

for.end.332:                                      ; preds = %for.cond.321
  br label %if.end.411

if.else.333:                                      ; preds = %if.end.318
  %264 = load i32, i32* %overprint, align 4, !tbaa !5
  %tobool334 = icmp ne i32 %264, 0
  br i1 %tobool334, label %if.then.335, label %if.else.389

if.then.335:                                      ; preds = %if.else.333
  %265 = load i32, i32* %blendspot, align 4, !tbaa !5
  %tobool336 = icmp ne i32 %265, 0
  br i1 %tobool336, label %if.then.337, label %if.else.361

if.then.337:                                      ; preds = %if.then.335
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.338

for.cond.338:                                     ; preds = %for.inc.358, %if.then.337
  %266 = load i32, i32* %k, align 4, !tbaa !5
  %267 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp339 = icmp slt i32 %266, %267
  br i1 %cmp339, label %for.body.341, label %for.end.360

for.body.341:                                     ; preds = %for.cond.338
  %268 = bitcast i32* %temp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %268) #2
  %269 = load i32, i32* %k, align 4, !tbaa !5
  %270 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul343 = mul nsw i32 %269, %270
  %idxprom344 = sext i32 %mul343 to i64
  %271 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx345 = getelementptr inbounds i8, i8* %271, i64 %idxprom344
  %272 = load i8, i8* %arrayidx345, align 1, !tbaa !66
  %conv346 = zext i8 %272 to i32
  %sub347 = sub nsw i32 255, %conv346
  %273 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom348 = sext i32 %273 to i64
  %arrayidx349 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom348
  %274 = load i8, i8* %arrayidx349, align 1, !tbaa !66
  %conv350 = zext i8 %274 to i32
  %mul351 = mul nsw i32 %sub347, %conv350
  store i32 %mul351, i32* %temp, align 4, !tbaa !5
  %275 = load i32, i32* %temp, align 4, !tbaa !5
  %shr352 = ashr i32 %275, 8
  store i32 %shr352, i32* %temp, align 4, !tbaa !5
  %276 = load i32, i32* %temp, align 4, !tbaa !5
  %sub353 = sub nsw i32 255, %276
  %conv354 = trunc i32 %sub353 to i8
  %277 = load i32, i32* %k, align 4, !tbaa !5
  %278 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul355 = mul nsw i32 %277, %278
  %idxprom356 = sext i32 %mul355 to i64
  %279 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx357 = getelementptr inbounds i8, i8* %279, i64 %idxprom356
  store i8 %conv354, i8* %arrayidx357, align 1, !tbaa !66
  %280 = bitcast i32* %temp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %280) #2
  br label %for.inc.358

for.inc.358:                                      ; preds = %for.body.341
  %281 = load i32, i32* %k, align 4, !tbaa !5
  %inc359 = add nsw i32 %281, 1
  store i32 %inc359, i32* %k, align 4, !tbaa !5
  br label %for.cond.338

for.end.360:                                      ; preds = %for.cond.338
  br label %if.end.383

if.else.361:                                      ; preds = %if.then.335
  store i32 0, i32* %k, align 4, !tbaa !5
  %282 = load i64, i64* %drawn_comps, align 8, !tbaa !68
  store i64 %282, i64* %comps, align 8, !tbaa !68
  br label %for.cond.362

for.cond.362:                                     ; preds = %for.inc.379, %if.else.361
  %283 = load i64, i64* %comps, align 8, !tbaa !68
  %cmp363 = icmp ne i64 %283, 0
  br i1 %cmp363, label %for.body.365, label %for.end.382

for.body.365:                                     ; preds = %for.cond.362
  %284 = load i64, i64* %comps, align 8, !tbaa !68
  %and366 = and i64 %284, 1
  %cmp367 = icmp ne i64 %and366, 0
  br i1 %cmp367, label %if.then.369, label %if.end.378

if.then.369:                                      ; preds = %for.body.365
  %285 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom370 = sext i32 %285 to i64
  %arrayidx371 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom370
  %286 = load i8, i8* %arrayidx371, align 1, !tbaa !66
  %conv372 = zext i8 %286 to i32
  %sub373 = sub nsw i32 255, %conv372
  %conv374 = trunc i32 %sub373 to i8
  %287 = load i32, i32* %k, align 4, !tbaa !5
  %288 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul375 = mul nsw i32 %287, %288
  %idxprom376 = sext i32 %mul375 to i64
  %289 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx377 = getelementptr inbounds i8, i8* %289, i64 %idxprom376
  store i8 %conv374, i8* %arrayidx377, align 1, !tbaa !66
  br label %if.end.378

if.end.378:                                       ; preds = %if.then.369, %for.body.365
  br label %for.inc.379

for.inc.379:                                      ; preds = %if.end.378
  %290 = load i32, i32* %k, align 4, !tbaa !5
  %inc380 = add nsw i32 %290, 1
  store i32 %inc380, i32* %k, align 4, !tbaa !5
  %291 = load i64, i64* %comps, align 8, !tbaa !68
  %shr381 = lshr i64 %291, 1
  store i64 %shr381, i64* %comps, align 8, !tbaa !68
  br label %for.cond.362

for.end.382:                                      ; preds = %for.cond.362
  br label %if.end.383

if.end.383:                                       ; preds = %for.end.382, %for.end.360
  %292 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom384 = sext i32 %292 to i64
  %arrayidx385 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom384
  %293 = load i8, i8* %arrayidx385, align 1, !tbaa !66
  %294 = load i32, i32* %num_comp, align 4, !tbaa !5
  %295 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul386 = mul nsw i32 %294, %295
  %idxprom387 = sext i32 %mul386 to i64
  %296 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx388 = getelementptr inbounds i8, i8* %296, i64 %idxprom387
  store i8 %293, i8* %arrayidx388, align 1, !tbaa !66
  br label %if.end.410

if.else.389:                                      ; preds = %if.else.333
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.390

for.cond.390:                                     ; preds = %for.inc.402, %if.else.389
  %297 = load i32, i32* %k, align 4, !tbaa !5
  %298 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp391 = icmp slt i32 %297, %298
  br i1 %cmp391, label %for.body.393, label %for.end.404

for.body.393:                                     ; preds = %for.cond.390
  %299 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom394 = sext i32 %299 to i64
  %arrayidx395 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom394
  %300 = load i8, i8* %arrayidx395, align 1, !tbaa !66
  %conv396 = zext i8 %300 to i32
  %sub397 = sub nsw i32 255, %conv396
  %conv398 = trunc i32 %sub397 to i8
  %301 = load i32, i32* %k, align 4, !tbaa !5
  %302 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul399 = mul nsw i32 %301, %302
  %idxprom400 = sext i32 %mul399 to i64
  %303 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx401 = getelementptr inbounds i8, i8* %303, i64 %idxprom400
  store i8 %conv398, i8* %arrayidx401, align 1, !tbaa !66
  br label %for.inc.402

for.inc.402:                                      ; preds = %for.body.393
  %304 = load i32, i32* %k, align 4, !tbaa !5
  %inc403 = add nsw i32 %304, 1
  store i32 %inc403, i32* %k, align 4, !tbaa !5
  br label %for.cond.390

for.end.404:                                      ; preds = %for.cond.390
  %305 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom405 = sext i32 %305 to i64
  %arrayidx406 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom405
  %306 = load i8, i8* %arrayidx406, align 1, !tbaa !66
  %307 = load i32, i32* %num_comp, align 4, !tbaa !5
  %308 = load i32, i32* %planestride, align 4, !tbaa !5
  %mul407 = mul nsw i32 %307, %308
  %idxprom408 = sext i32 %mul407 to i64
  %309 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx409 = getelementptr inbounds i8, i8* %309, i64 %idxprom408
  store i8 %306, i8* %arrayidx409, align 1, !tbaa !66
  br label %if.end.410

if.end.410:                                       ; preds = %for.end.404, %if.end.383
  br label %if.end.411

if.end.411:                                       ; preds = %if.end.410, %for.end.332
  %310 = load i32, i32* %has_alpha_g, align 4, !tbaa !5
  %tobool412 = icmp ne i32 %310, 0
  br i1 %tobool412, label %if.then.413, label %if.end.433

if.then.413:                                      ; preds = %if.end.411
  %311 = bitcast i32* %tmp415 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %311) #2
  %312 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom416 = sext i32 %312 to i64
  %313 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx417 = getelementptr inbounds i8, i8* %313, i64 %idxprom416
  %314 = load i8, i8* %arrayidx417, align 1, !tbaa !66
  %conv418 = zext i8 %314 to i32
  %sub419 = sub nsw i32 255, %conv418
  %315 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom420 = sext i32 %315 to i64
  %arrayidx421 = getelementptr inbounds [67 x i8], [67 x i8]* %src, i32 0, i64 %idxprom420
  %316 = load i8, i8* %arrayidx421, align 1, !tbaa !66
  %conv422 = zext i8 %316 to i32
  %sub423 = sub nsw i32 255, %conv422
  %mul424 = mul nsw i32 %sub419, %sub423
  %add425 = add nsw i32 %mul424, 128
  store i32 %add425, i32* %tmp415, align 4, !tbaa !5
  %317 = load i32, i32* %tmp415, align 4, !tbaa !5
  %318 = load i32, i32* %tmp415, align 4, !tbaa !5
  %shr426 = ashr i32 %318, 8
  %add427 = add nsw i32 %317, %shr426
  %shr428 = ashr i32 %add427, 8
  %sub429 = sub nsw i32 255, %shr428
  %conv430 = trunc i32 %sub429 to i8
  %319 = load i32, i32* %alpha_g_off, align 4, !tbaa !5
  %idxprom431 = sext i32 %319 to i64
  %320 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx432 = getelementptr inbounds i8, i8* %320, i64 %idxprom431
  store i8 %conv430, i8* %arrayidx432, align 1, !tbaa !66
  %321 = bitcast i32* %tmp415 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %321) #2
  br label %if.end.433

if.end.433:                                       ; preds = %if.then.413, %if.end.411
  %322 = load i32, i32* %has_shape, align 4, !tbaa !5
  %tobool434 = icmp ne i32 %322, 0
  br i1 %tobool434, label %if.then.435, label %if.end.453

if.then.435:                                      ; preds = %if.end.433
  %323 = bitcast i32* %tmp437 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %323) #2
  %324 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom438 = sext i32 %324 to i64
  %325 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx439 = getelementptr inbounds i8, i8* %325, i64 %idxprom438
  %326 = load i8, i8* %arrayidx439, align 1, !tbaa !66
  %conv440 = zext i8 %326 to i32
  %sub441 = sub nsw i32 255, %conv440
  %327 = load i8, i8* %shape, align 1, !tbaa !66
  %conv442 = zext i8 %327 to i32
  %sub443 = sub nsw i32 255, %conv442
  %mul444 = mul nsw i32 %sub441, %sub443
  %add445 = add nsw i32 %mul444, 128
  store i32 %add445, i32* %tmp437, align 4, !tbaa !5
  %328 = load i32, i32* %tmp437, align 4, !tbaa !5
  %329 = load i32, i32* %tmp437, align 4, !tbaa !5
  %shr446 = ashr i32 %329, 8
  %add447 = add nsw i32 %328, %shr446
  %shr448 = ashr i32 %add447, 8
  %sub449 = sub nsw i32 255, %shr448
  %conv450 = trunc i32 %sub449 to i8
  %330 = load i32, i32* %shape_off, align 4, !tbaa !5
  %idxprom451 = sext i32 %330 to i64
  %331 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx452 = getelementptr inbounds i8, i8* %331, i64 %idxprom451
  store i8 %conv450, i8* %arrayidx452, align 1, !tbaa !66
  %332 = bitcast i32* %tmp437 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %332) #2
  br label %if.end.453

if.end.453:                                       ; preds = %if.then.435, %if.end.433
  %333 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool454 = icmp ne i32 %333, 0
  br i1 %tobool454, label %if.then.455, label %if.end.474

if.then.455:                                      ; preds = %if.end.453
  %334 = load i32, i32* %num_comp, align 4, !tbaa !5
  %idxprom456 = sext i32 %334 to i64
  %arrayidx457 = getelementptr inbounds [67 x i8], [67 x i8]* %dst, i32 0, i64 %idxprom456
  %335 = load i8, i8* %arrayidx457, align 1, !tbaa !66
  %conv458 = zext i8 %335 to i32
  %cmp459 = icmp eq i32 %conv458, 255
  br i1 %cmp459, label %if.then.461, label %if.else.465

if.then.461:                                      ; preds = %if.then.455
  %336 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %conv462 = trunc i32 %336 to i8
  %337 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom463 = sext i32 %337 to i64
  %338 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx464 = getelementptr inbounds i8, i8* %338, i64 %idxprom463
  store i8 %conv462, i8* %arrayidx464, align 1, !tbaa !66
  br label %if.end.473

if.else.465:                                      ; preds = %if.then.455
  %339 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom466 = sext i32 %339 to i64
  %340 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx467 = getelementptr inbounds i8, i8* %340, i64 %idxprom466
  %341 = load i8, i8* %arrayidx467, align 1, !tbaa !66
  %conv468 = zext i8 %341 to i32
  %342 = load i32, i32* %curr_tag, align 4, !tbaa !66
  %or = or i32 %conv468, %342
  %and469 = and i32 %or, -9
  %conv470 = trunc i32 %and469 to i8
  %343 = load i32, i32* %tag_off, align 4, !tbaa !5
  %idxprom471 = sext i32 %343 to i64
  %344 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx472 = getelementptr inbounds i8, i8* %344, i64 %idxprom471
  store i8 %conv470, i8* %arrayidx472, align 1, !tbaa !66
  br label %if.end.473

if.end.473:                                       ; preds = %if.else.465, %if.then.461
  br label %if.end.474

if.end.474:                                       ; preds = %if.end.473, %if.end.453
  br label %if.end.475

if.end.475:                                       ; preds = %if.end.474, %if.end.264
  %345 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %345, i32 1
  store i8* %incdec.ptr, i8** %dst_ptr, align 8, !tbaa !1
  br label %for.inc.476

for.inc.476:                                      ; preds = %if.end.475
  %346 = load i32, i32* %i, align 4, !tbaa !5
  %inc477 = add nsw i32 %346, 1
  store i32 %inc477, i32* %i, align 4, !tbaa !5
  %347 = load i32, i32* %sx, align 4, !tbaa !5
  %inc478 = add nsw i32 %347, 1
  store i32 %inc478, i32* %sx, align 4, !tbaa !5
  br label %for.cond.199

for.end.479:                                      ; preds = %for.cond.199
  %348 = load i32, i32* %rowstride, align 4, !tbaa !5
  %349 = load i8*, i8** %line, align 8, !tbaa !1
  %idx.ext480 = sext i32 %348 to i64
  %add.ptr481 = getelementptr inbounds i8, i8* %349, i64 %idx.ext480
  store i8* %add.ptr481, i8** %line, align 8, !tbaa !1
  br label %for.inc.482

for.inc.482:                                      ; preds = %for.end.479
  %350 = load i32, i32* %j, align 4, !tbaa !5
  %inc483 = add nsw i32 %350, 1
  store i32 %inc483, i32* %j, align 4, !tbaa !5
  %351 = load i32, i32* %aa_raster.addr, align 4, !tbaa !5
  %352 = load i8*, i8** %aa_row, align 8, !tbaa !1
  %idx.ext484 = sext i32 %351 to i64
  %add.ptr485 = getelementptr inbounds i8, i8* %352, i64 %idx.ext484
  store i8* %add.ptr485, i8** %aa_row, align 8, !tbaa !1
  br label %for.cond.195

for.end.486:                                      ; preds = %for.cond.195
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.486, %if.then
  %353 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %353) #2
  %354 = bitcast i64* %mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %354) #2
  %355 = bitcast i32* %xoff to i8*
  call void @llvm.lifetime.end(i64 4, i8* %355) #2
  %356 = bitcast i32* %alpha_aa_act to i8*
  call void @llvm.lifetime.end(i64 4, i8* %356) #2
  %357 = bitcast i32* %sx to i8*
  call void @llvm.lifetime.end(i64 4, i8* %357) #2
  %358 = bitcast i32* %alpha_aa to i8*
  call void @llvm.lifetime.end(i64 4, i8* %358) #2
  %359 = bitcast i32* %alpha2_aa to i8*
  call void @llvm.lifetime.end(i64 4, i8* %359) #2
  call void @llvm.lifetime.end(i64 1, i8* %src_alpha) #2
  call void @llvm.lifetime.end(i64 1, i8* %shape) #2
  %360 = bitcast i64* %comps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %360) #2
  %361 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %361) #2
  %362 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.end(i64 4, i8* %362) #2
  %363 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.end(i64 4, i8* %363) #2
  %364 = bitcast i32* %tag_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %364) #2
  %365 = bitcast i32* %alpha_g_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %365) #2
  %366 = bitcast i32* %shape_off to i8*
  call void @llvm.lifetime.end(i64 4, i8* %366) #2
  %367 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %367) #2
  %368 = bitcast i32* %num_chan to i8*
  call void @llvm.lifetime.end(i64 4, i8* %368) #2
  %369 = bitcast i32* %knockout to i8*
  call void @llvm.lifetime.end(i64 4, i8* %369) #2
  %370 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %370) #2
  %371 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %371) #2
  %372 = bitcast i32* %has_alpha_g to i8*
  call void @llvm.lifetime.end(i64 4, i8* %372) #2
  %373 = bitcast i32* %curr_tag to i8*
  call void @llvm.lifetime.end(i64 4, i8* %373) #2
  %374 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %374) #2
  %375 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %375) #2
  %376 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %376) #2
  %377 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %377) #2
  %378 = bitcast [67 x i8]* %dst to i8*
  call void @llvm.lifetime.end(i64 67, i8* %378) #2
  %379 = bitcast [67 x i8]* %src to i8*
  call void @llvm.lifetime.end(i64 67, i8* %379) #2
  %380 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %380) #2
  %381 = bitcast i8** %line to i8*
  call void @llvm.lifetime.end(i64 8, i8* %381) #2
  %382 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %382) #2
  %383 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %383) #2
  %384 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %384) #2
  %385 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %385) #2
  %386 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %386) #2
  %387 = bitcast i8** %aa_row to i8*
  call void @llvm.lifetime.end(i64 8, i8* %387) #2
  %388 = load i32, i32* %retval
  ret i32 %388
}

declare i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s*) #0

declare i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s*) #0

declare i32 @gx_pattern1_clist_has_trans(%struct.gx_device_color_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_tile_pattern_fill(%struct.gx_device_s* %pdev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_fill_params_s* %params, %struct.gx_device_color_s* %pdevc, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_fill_params_s*, align 8
  %pdevc.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %code = alloca i32, align 4
  %pis_noconst = alloca %struct.gs_imager_state_s*, align 8
  %clip_box = alloca %struct.gs_fixed_rect_s, align 4
  %outer_box = alloca %struct.gs_fixed_rect_s, align 4
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %curr_clip_rect = alloca %struct.gx_clip_rect_s*, align 8
  %ptile = alloca %struct.gx_color_tile_s*, align 8
  %k = alloca i32, align 4
  %fill_trans_buffer = alloca %struct.gx_pattern_trans_s*, align 8
  %phase = alloca %struct.gs_int_point_s, align 4
  %n_chan_tile = alloca i32, align 4
  %cpath_intersection = alloca %struct.gx_clip_path_s, align 8
  %path_ttrans = alloca %struct.gx_path_s, align 8
  %blend_mode = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %dev = alloca %struct.gx_device_s*, align 8
  %clipdev = alloca %struct.gx_device_clip_s, align 8
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_fill_params_s* %params, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdevc, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct.gs_imager_state_s** %pis_noconst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %2, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %3 = bitcast %struct.gs_fixed_rect_s* %clip_box to i8*
  call void @llvm.lifetime.start(i64 16, i8* %3) #2
  %4 = bitcast %struct.gs_fixed_rect_s* %outer_box to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %7 = bitcast %struct.gx_device_s* %6 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %7, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %8 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast %struct.gx_clip_rect_s** %curr_clip_rect to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  store %struct.gx_color_tile_s* null, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %11 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  store %struct.gx_pattern_trans_s* null, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %13 = bitcast %struct.gs_int_point_s* %phase to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = bitcast i32* %n_chan_tile to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast %struct.gx_clip_path_s* %cpath_intersection to i8*
  call void @llvm.lifetime.start(i64 304, i8* %15) #2
  %16 = bitcast %struct.gx_path_s* %path_ttrans to i8*
  call void @llvm.lifetime.start(i64 128, i8* %16) #2
  %17 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_clip_path_s* %18, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %19 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %20 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %20, i32 0, i32 1
  %21 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !354
  %call = call i32 @gx_cpath_init_local_shared_nested(%struct.gx_clip_path_s* %cpath_intersection, %struct.gx_clip_path_s* %19, %struct.gs_memory_s* %21, i32 1) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 42
  %get_clipping_box = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 36
  %23 = load void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)** %get_clipping_box, align 8, !tbaa !358
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  call void %23(%struct.gx_device_s* %24, %struct.gs_fixed_rect_s* %clip_box) #7
  %25 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %memory1 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %25, i32 0, i32 1
  %26 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory1, align 8, !tbaa !354
  %call2 = call i32 @gx_cpath_init_local_shared(%struct.gx_clip_path_s* %cpath_intersection, %struct.gx_clip_path_s* null, %struct.gs_memory_s* %26) #7
  %call3 = call i32 @gx_cpath_from_rectangle(%struct.gx_clip_path_s* %cpath_intersection, %struct.gs_fixed_rect_s* %clip_box) #7
  store i32 %call3, i32* %code, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %27 = load i32, i32* %code, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %27, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %28 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %if.end
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %cmp7 = icmp ne %struct.gx_path_s* %29, null
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end.6
  %30 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %31 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %rule = getelementptr inbounds %struct.gx_fill_params_s, %struct.gx_fill_params_s* %31, i32 0, i32 0
  %32 = load i32, i32* %rule, align 4, !tbaa !359
  %33 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %34 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %call9 = call i32 @gx_cpath_intersect_with_params(%struct.gx_clip_path_s* %cpath_intersection, %struct.gx_path_s* %30, i32 %32, %struct.gs_imager_state_s* %33, %struct.gx_fill_params_s* %34) #7
  store i32 %call9, i32* %code, align 4, !tbaa !5
  %35 = load i32, i32* %code, align 4, !tbaa !5
  %cmp10 = icmp slt i32 %35, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.8
  %36 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %36, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.12:                                        ; preds = %if.then.8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end.6
  %37 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %37, i32 0, i32 1
  %pattern = bitcast %union._c* %colors to %struct._pat*
  %p_tile = getelementptr inbounds %struct._pat, %struct._pat* %pattern, i32 0, i32 0
  %38 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %38, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %39 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %39, i32 0, i32 9
  %40 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans, align 8, !tbaa !219
  %cmp14 = icmp ne %struct.gx_pattern_trans_s* %40, null
  br i1 %cmp14, label %if.then.15, label %if.end.61

if.then.15:                                       ; preds = %if.end.13
  %outer_box16 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 4
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box16, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %41 = load i32, i32* %x, align 4, !tbaa !361
  %cmp17 = icmp slt i32 %41, 0
  br i1 %cmp17, label %if.then.33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.15
  %outer_box18 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 4
  %p19 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box18, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p19, i32 0, i32 1
  %42 = load i32, i32* %y, align 4, !tbaa !366
  %cmp20 = icmp slt i32 %42, 0
  br i1 %cmp20, label %if.then.33, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false
  %outer_box22 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 4
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box22, i32 0, i32 1
  %x23 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %43 = load i32, i32* %x23, align 4, !tbaa !367
  %44 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans24 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %44, i32 0, i32 9
  %45 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans24, align 8, !tbaa !219
  %width = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %45, i32 0, i32 9
  %46 = load i32, i32* %width, align 4, !tbaa !44
  %shl = shl i32 %46, 8
  %cmp25 = icmp sgt i32 %43, %shl
  br i1 %cmp25, label %if.then.33, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.21
  %outer_box27 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 4
  %q28 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box27, i32 0, i32 1
  %y29 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q28, i32 0, i32 1
  %47 = load i32, i32* %y29, align 4, !tbaa !368
  %48 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans30 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %48, i32 0, i32 9
  %49 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans30, align 8, !tbaa !219
  %height = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %49, i32 0, i32 10
  %50 = load i32, i32* %height, align 4, !tbaa !47
  %shl31 = shl i32 %50, 8
  %cmp32 = icmp sgt i32 %47, %shl31
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %lor.lhs.false.26, %lor.lhs.false.21, %lor.lhs.false, %if.then.15
  br label %if.end.60

if.else.34:                                       ; preds = %lor.lhs.false.26
  %51 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %memory35 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %51, i32 0, i32 1
  %52 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory35, align 8, !tbaa !354
  %call36 = call i32 @gx_path_init_local_shared(%struct.gx_path_s* %path_ttrans, %struct.gx_path_s* null, %struct.gs_memory_s* %52) #7
  %53 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans37 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %53, i32 0, i32 9
  %54 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans37, align 8, !tbaa !219
  %rect38 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %54, i32 0, i32 4
  %p39 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect38, i32 0, i32 0
  %x40 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p39, i32 0, i32 0
  %55 = load i32, i32* %x40, align 4, !tbaa !369
  %shl41 = shl i32 %55, 8
  %56 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans42 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %56, i32 0, i32 9
  %57 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans42, align 8, !tbaa !219
  %rect43 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %57, i32 0, i32 4
  %p44 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect43, i32 0, i32 0
  %y45 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p44, i32 0, i32 1
  %58 = load i32, i32* %y45, align 4, !tbaa !370
  %shl46 = shl i32 %58, 8
  %59 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans47 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %59, i32 0, i32 9
  %60 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans47, align 8, !tbaa !219
  %rect48 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %60, i32 0, i32 4
  %q49 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect48, i32 0, i32 1
  %x50 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q49, i32 0, i32 0
  %61 = load i32, i32* %x50, align 4, !tbaa !371
  %shl51 = shl i32 %61, 8
  %62 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans52 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %62, i32 0, i32 9
  %63 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans52, align 8, !tbaa !219
  %rect53 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %63, i32 0, i32 4
  %q54 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect53, i32 0, i32 1
  %y55 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q54, i32 0, i32 1
  %64 = load i32, i32* %y55, align 4, !tbaa !372
  %shl56 = shl i32 %64, 8
  %call57 = call i32 @gx_path_add_rectangle(%struct.gx_path_s* %path_ttrans, i32 %shl41, i32 %shl46, i32 %shl51, i32 %shl56) #7
  %65 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %rule58 = getelementptr inbounds %struct.gx_fill_params_s, %struct.gx_fill_params_s* %65, i32 0, i32 0
  %66 = load i32, i32* %rule58, align 4, !tbaa !359
  %67 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %call59 = call i32 @gx_cpath_intersect(%struct.gx_clip_path_s* %cpath_intersection, %struct.gx_path_s* %path_ttrans, i32 %66, %struct.gs_imager_state_s* %67) #7
  store i32 %call59, i32* %code, align 4, !tbaa !5
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.34, %if.then.33
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end.13
  %68 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %cmp62 = icmp ne %struct.gx_path_s* %68, null
  br i1 %cmp62, label %land.lhs.true, label %if.end.206

land.lhs.true:                                    ; preds = %if.end.61
  %69 = load i32, i32* %code, align 4, !tbaa !5
  %cmp63 = icmp sge i32 %69, 0
  br i1 %cmp63, label %if.then.64, label %if.end.206

if.then.64:                                       ; preds = %land.lhs.true
  %call65 = call i32 @gx_cpath_outer_box(%struct.gx_clip_path_s* %cpath_intersection, %struct.gs_fixed_rect_s* %outer_box) #7
  %p66 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box, i32 0, i32 0
  %x67 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p66, i32 0, i32 0
  %70 = load i32, i32* %x67, align 4, !tbaa !309
  %shr = ashr i32 %70, 8
  %p68 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x69 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p68, i32 0, i32 0
  store i32 %shr, i32* %x69, align 4, !tbaa !34
  %p70 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box, i32 0, i32 0
  %y71 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p70, i32 0, i32 1
  %71 = load i32, i32* %y71, align 4, !tbaa !311
  %shr72 = ashr i32 %71, 8
  %p73 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y74 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p73, i32 0, i32 1
  store i32 %shr72, i32* %y74, align 4, !tbaa !35
  %q75 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box, i32 0, i32 1
  %x76 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q75, i32 0, i32 0
  %72 = load i32, i32* %x76, align 4, !tbaa !312
  %add = add nsw i32 %72, 255
  %shr77 = ashr i32 %add, 8
  %q78 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x79 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q78, i32 0, i32 0
  store i32 %shr77, i32* %x79, align 4, !tbaa !31
  %q80 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer_box, i32 0, i32 1
  %y81 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q80, i32 0, i32 1
  %73 = load i32, i32* %y81, align 4, !tbaa !313
  %add82 = add nsw i32 %73, 255
  %shr83 = ashr i32 %add82, 8
  %q84 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y85 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q84, i32 0, i32 1
  store i32 %shr83, i32* %y85, align 4, !tbaa !33
  %74 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %colors86 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %74, i32 0, i32 1
  %pattern87 = bitcast %union._c* %colors86 to %struct._pat*
  %p_tile88 = getelementptr inbounds %struct._pat, %struct._pat* %pattern87, i32 0, i32 0
  %75 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile88, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %75, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %76 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %cdev = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %76, i32 0, i32 10
  %77 = load %union.gx_device_clist_s*, %union.gx_device_clist_s** %cdev, align 8, !tbaa !373
  %cmp89 = icmp eq %union.gx_device_clist_s* %77, null
  br i1 %cmp89, label %if.then.90, label %if.else.97

if.then.90:                                       ; preds = %if.then.64
  %78 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans91 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %78, i32 0, i32 9
  %79 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans91, align 8, !tbaa !219
  %n_chan = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %79, i32 0, i32 7
  %80 = load i32, i32* %n_chan, align 4, !tbaa !39
  store i32 %80, i32* %n_chan_tile, align 4, !tbaa !5
  %81 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans92 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %81, i32 0, i32 9
  %82 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans92, align 8, !tbaa !219
  %blending_mode = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %82, i32 0, i32 13
  %83 = load i32, i32* %blending_mode, align 4, !tbaa !49
  store i32 %83, i32* %blend_mode, align 4, !tbaa !66
  %84 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %84, i32 0, i32 47
  %85 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %86 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %87 = load i32, i32* %n_chan_tile, align 4, !tbaa !5
  %sub = sub nsw i32 %87, 1
  %88 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %89 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call93 = call i32 @pdf14_push_transparency_group(%struct.pdf14_ctx_s* %85, %struct.gs_int_rect_s* %rect, i32 1, i32 0, i8 zeroext -1, i8 zeroext -1, i32 %86, i32 0, i32 0, i32 %sub, i32 0, %struct.cmm_profile_s* null, %struct.cmm_profile_s* null, %struct.gs_imager_state_s* %88, %struct.gx_device_s* %89) #7
  store i32 %call93, i32* %code, align 4, !tbaa !5
  %90 = load i32, i32* %code, align 4, !tbaa !5
  %cmp94 = icmp slt i32 %90, 0
  br i1 %cmp94, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %if.then.90
  %91 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %91, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.96:                                        ; preds = %if.then.90
  br label %if.end.101

if.else.97:                                       ; preds = %if.then.64
  %92 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %cdev98 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %92, i32 0, i32 10
  %93 = load %union.gx_device_clist_s*, %union.gx_device_clist_s** %cdev98, align 8, !tbaa !373
  %common = bitcast %union.gx_device_clist_s* %93 to %struct.gx_device_clist_common_s*
  %color_info = getelementptr inbounds %struct.gx_device_clist_common_s, %struct.gx_device_clist_common_s* %common, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %94 = load i32, i32* %num_components, align 4, !tbaa !374
  %add99 = add nsw i32 %94, 1
  store i32 %add99, i32* %n_chan_tile, align 4, !tbaa !5
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blend_mode100 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 52
  %96 = load i32, i32* %blend_mode100, align 4, !tbaa !48
  store i32 %96, i32* %blend_mode, align 4, !tbaa !66
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.97, %if.end.96
  %97 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %cdev102 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %97, i32 0, i32 10
  %98 = load %union.gx_device_clist_s*, %union.gx_device_clist_s** %cdev102, align 8, !tbaa !373
  %cmp103 = icmp eq %union.gx_device_clist_s* %98, null
  br i1 %cmp103, label %if.then.104, label %if.end.116

if.then.104:                                      ; preds = %if.end.101
  %99 = load i32, i32* %n_chan_tile, align 4, !tbaa !5
  %sub105 = sub nsw i32 %99, 1
  %cmp106 = icmp slt i32 %sub105, 4
  br i1 %cmp106, label %if.then.107, label %if.else.110

if.then.107:                                      ; preds = %if.then.104
  %100 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans108 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %100, i32 0, i32 9
  %101 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans108, align 8, !tbaa !219
  %blending_procs = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %101, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs, align 8, !tbaa !221
  %102 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans109 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %102, i32 0, i32 9
  %103 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans109, align 8, !tbaa !219
  %is_additive = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %103, i32 0, i32 12
  store i32 1, i32* %is_additive, align 4, !tbaa !222
  br label %if.end.115

if.else.110:                                      ; preds = %if.then.104
  %104 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans111 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %104, i32 0, i32 9
  %105 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans111, align 8, !tbaa !219
  %blending_procs112 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %105, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs112, align 8, !tbaa !221
  %106 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans113 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %106, i32 0, i32 9
  %107 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans113, align 8, !tbaa !219
  %is_additive114 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %107, i32 0, i32 12
  store i32 0, i32* %is_additive114, align 4, !tbaa !222
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.110, %if.then.107
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %if.end.101
  %108 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %cdev117 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %108, i32 0, i32 10
  %109 = load %union.gx_device_clist_s*, %union.gx_device_clist_s** %cdev117, align 8, !tbaa !373
  %cmp118 = icmp eq %union.gx_device_clist_s* %109, null
  br i1 %cmp118, label %if.then.119, label %if.else.173

if.then.119:                                      ; preds = %if.end.116
  %110 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory120 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %110, i32 0, i32 1
  %111 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory120, align 8, !tbaa !165
  %call121 = call %struct.gx_pattern_trans_s* @new_pattern_trans_buff(%struct.gs_memory_s* %111) #7
  store %struct.gx_pattern_trans_s* %call121, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %112 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %113 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %call122 = call i32 @pdf14_get_buffer_information(%struct.gx_device_s* %112, %struct.gx_pattern_trans_s* %113, %struct.gs_memory_s* null, i32 0) #7
  %114 = load i32, i32* %blend_mode, align 4, !tbaa !66
  %115 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %blending_mode123 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %115, i32 0, i32 13
  store i32 %114, i32* %blending_mode123, align 4, !tbaa !49
  %116 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %has_overlap = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %116, i32 0, i32 12
  %117 = load i8, i8* %has_overlap, align 1, !tbaa !223
  %tobool = icmp ne i8 %117, 0
  br i1 %tobool, label %if.then.124, label %if.else.126

if.then.124:                                      ; preds = %if.then.119
  %118 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans125 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %118, i32 0, i32 9
  %119 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans125, align 8, !tbaa !219
  %pat_trans_fill = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %119, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_blend, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill, align 8, !tbaa !224
  br label %if.end.129

if.else.126:                                      ; preds = %if.then.119
  %120 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans127 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %120, i32 0, i32 9
  %121 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans127, align 8, !tbaa !219
  %pat_trans_fill128 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %121, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_simple, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill128, align 8, !tbaa !224
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.124
  %122 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %phase130 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %122, i32 0, i32 2
  %x131 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase130, i32 0, i32 0
  %123 = load i32, i32* %x131, align 4, !tbaa !376
  %x132 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase, i32 0, i32 0
  store i32 %123, i32* %x132, align 4, !tbaa !377
  %124 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %phase133 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %124, i32 0, i32 2
  %y134 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase133, i32 0, i32 1
  %125 = load i32, i32* %y134, align 4, !tbaa !378
  %y135 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase, i32 0, i32 1
  store i32 %125, i32* %y135, align 4, !tbaa !379
  %rect_list = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %126 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list, align 8, !tbaa !380
  %list = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %126, i32 0, i32 1
  %head = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list, i32 0, i32 1
  %127 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %head, align 8, !tbaa !381
  %cmp136 = icmp ne %struct.gx_clip_rect_s* %127, null
  br i1 %cmp136, label %if.then.137, label %if.else.146

if.then.137:                                      ; preds = %if.end.129
  %rect_list138 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %128 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list138, align 8, !tbaa !380
  %list139 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %128, i32 0, i32 1
  %head140 = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list139, i32 0, i32 1
  %129 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %head140, align 8, !tbaa !381
  %next = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %129, i32 0, i32 0
  %130 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %next, align 8, !tbaa !382
  store %struct.gx_clip_rect_s* %130, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.137
  %131 = load i32, i32* %k, align 4, !tbaa !5
  %rect_list141 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %132 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list141, align 8, !tbaa !380
  %list142 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %132, i32 0, i32 1
  %count = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list142, i32 0, i32 6
  %133 = load i32, i32* %count, align 4, !tbaa !383
  %cmp143 = icmp slt i32 %131, %133
  br i1 %cmp143, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %134 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  %xmin = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %134, i32 0, i32 4
  %135 = load i32, i32* %xmin, align 4, !tbaa !384
  %136 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  %ymin = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %136, i32 0, i32 2
  %137 = load i32, i32* %ymin, align 4, !tbaa !385
  %138 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  %xmax = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %138, i32 0, i32 5
  %139 = load i32, i32* %xmax, align 4, !tbaa !386
  %140 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  %ymax = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %140, i32 0, i32 3
  %141 = load i32, i32* %ymax, align 4, !tbaa !387
  %142 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %143 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %144 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %145 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %146 = bitcast %struct.gs_int_point_s* %phase to i64*
  %147 = load i64, i64* %146, align 4
  %call144 = call i32 @gx_trans_pattern_fill_rect(i32 %135, i32 %137, i32 %139, i32 %141, %struct.gx_color_tile_s* %142, %struct.gx_pattern_trans_s* %143, i64 %147, %struct.gx_device_s* %144, %struct.gx_device_color_s* %145) #7
  %148 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  %next145 = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %148, i32 0, i32 0
  %149 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %next145, align 8, !tbaa !382
  store %struct.gx_clip_rect_s* %149, %struct.gx_clip_rect_s** %curr_clip_rect, align 8, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %150 = load i32, i32* %k, align 4, !tbaa !5
  %inc = add nsw i32 %150, 1
  store i32 %inc, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.172

if.else.146:                                      ; preds = %if.end.129
  %rect_list147 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %151 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list147, align 8, !tbaa !380
  %list148 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %151, i32 0, i32 1
  %count149 = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list148, i32 0, i32 6
  %152 = load i32, i32* %count149, align 4, !tbaa !383
  %cmp150 = icmp eq i32 %152, 1
  br i1 %cmp150, label %if.then.151, label %if.end.171

if.then.151:                                      ; preds = %if.else.146
  br label %do.body.152

do.body.152:                                      ; preds = %if.then.151
  br label %do.cond.153

do.cond.153:                                      ; preds = %do.body.152
  br label %do.end.154

do.end.154:                                       ; preds = %do.cond.153
  %rect_list155 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %153 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list155, align 8, !tbaa !380
  %list156 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %153, i32 0, i32 1
  %single = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list156, i32 0, i32 0
  %xmin157 = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %single, i32 0, i32 4
  %154 = load i32, i32* %xmin157, align 4, !tbaa !388
  %rect_list158 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %155 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list158, align 8, !tbaa !380
  %list159 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %155, i32 0, i32 1
  %single160 = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list159, i32 0, i32 0
  %ymin161 = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %single160, i32 0, i32 2
  %156 = load i32, i32* %ymin161, align 4, !tbaa !389
  %rect_list162 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %157 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list162, align 8, !tbaa !380
  %list163 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %157, i32 0, i32 1
  %single164 = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list163, i32 0, i32 0
  %xmax165 = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %single164, i32 0, i32 5
  %158 = load i32, i32* %xmax165, align 4, !tbaa !390
  %rect_list166 = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %cpath_intersection, i32 0, i32 5
  %159 = load %struct.gx_clip_rect_list_s*, %struct.gx_clip_rect_list_s** %rect_list166, align 8, !tbaa !380
  %list167 = getelementptr inbounds %struct.gx_clip_rect_list_s, %struct.gx_clip_rect_list_s* %159, i32 0, i32 1
  %single168 = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %list167, i32 0, i32 0
  %ymax169 = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %single168, i32 0, i32 3
  %160 = load i32, i32* %ymax169, align 4, !tbaa !391
  %161 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %162 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %163 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %164 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %165 = bitcast %struct.gs_int_point_s* %phase to i64*
  %166 = load i64, i64* %165, align 4
  %call170 = call i32 @gx_trans_pattern_fill_rect(i32 %154, i32 %156, i32 %158, i32 %160, %struct.gx_color_tile_s* %161, %struct.gx_pattern_trans_s* %162, i64 %166, %struct.gx_device_s* %163, %struct.gx_device_color_s* %164) #7
  br label %if.end.171

if.end.171:                                       ; preds = %do.end.154, %if.else.146
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %for.end
  br label %if.end.189

if.else.173:                                      ; preds = %if.end.116
  %167 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %167) #2
  %168 = bitcast %struct.gx_device_clip_s* %clipdev to i8*
  call void @llvm.lifetime.start(i64 1856, i8* %168) #2
  %169 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  call void @gx_make_clip_device_on_stack(%struct.gx_device_clip_s* %clipdev, %struct.gx_clip_path_s* %cpath_intersection, %struct.gx_device_s* %169) #7
  %170 = bitcast %struct.gx_device_clip_s* %clipdev to %struct.gx_device_s*
  store %struct.gx_device_s* %170, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %171 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %phase174 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %171, i32 0, i32 2
  %x175 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase174, i32 0, i32 0
  %172 = load i32, i32* %x175, align 4, !tbaa !376
  %x176 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase, i32 0, i32 0
  store i32 %172, i32* %x176, align 4, !tbaa !377
  %173 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %phase177 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %173, i32 0, i32 2
  %y178 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase177, i32 0, i32 1
  %174 = load i32, i32* %y178, align 4, !tbaa !378
  %y179 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %phase, i32 0, i32 1
  store i32 %174, i32* %y179, align 4, !tbaa !379
  %p180 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x181 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p180, i32 0, i32 0
  %175 = load i32, i32* %x181, align 4, !tbaa !34
  %p182 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y183 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p182, i32 0, i32 1
  %176 = load i32, i32* %y183, align 4, !tbaa !35
  %q184 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x185 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q184, i32 0, i32 0
  %177 = load i32, i32* %x185, align 4, !tbaa !31
  %q186 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y187 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q186, i32 0, i32 1
  %178 = load i32, i32* %y187, align 4, !tbaa !33
  %179 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %180 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %181 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %182 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %183 = bitcast %struct.gs_int_point_s* %phase to i64*
  %184 = load i64, i64* %183, align 4
  %call188 = call i32 @gx_trans_pattern_fill_rect(i32 %175, i32 %176, i32 %177, i32 %178, %struct.gx_color_tile_s* %179, %struct.gx_pattern_trans_s* %180, i64 %184, %struct.gx_device_s* %181, %struct.gx_device_color_s* %182) #7
  %185 = bitcast %struct.gx_device_clip_s* %clipdev to i8*
  call void @llvm.lifetime.end(i64 1856, i8* %185) #2
  %186 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %186) #2
  br label %if.end.189

if.end.189:                                       ; preds = %if.else.173, %if.end.172
  %187 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %cmp190 = icmp ne %struct.gx_pattern_trans_s* %187, null
  br i1 %cmp190, label %if.then.191, label %if.end.197

if.then.191:                                      ; preds = %if.end.189
  %188 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory192 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %188, i32 0, i32 1
  %189 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory192, align 8, !tbaa !165
  %procs193 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %189, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs193, i32 0, i32 2
  %190 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %191 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory194 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %191, i32 0, i32 1
  %192 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory194, align 8, !tbaa !165
  %193 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %194 = bitcast %struct.gx_pattern_trans_s* %193 to i8*
  call void %190(%struct.gs_memory_s* %192, i8* %194, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.37, i32 0, i32 0)) #7
  %195 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans195 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %195, i32 0, i32 9
  %196 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans195, align 8, !tbaa !219
  %fill_trans_buffer196 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %196, i32 0, i32 3
  store %struct.gx_pattern_trans_s* null, %struct.gx_pattern_trans_s** %fill_trans_buffer196, align 8, !tbaa !226
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.191, %if.end.189
  %197 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %cdev198 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %197, i32 0, i32 10
  %198 = load %union.gx_device_clist_s*, %union.gx_device_clist_s** %cdev198, align 8, !tbaa !373
  %cmp199 = icmp eq %union.gx_device_clist_s* %198, null
  br i1 %cmp199, label %if.then.200, label %if.end.205

if.then.200:                                      ; preds = %if.end.197
  %199 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %200 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx201 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %200, i32 0, i32 47
  %201 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx201, align 8, !tbaa !7
  %202 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %202, i32 0, i32 46
  %203 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %204 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info202 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %204, i32 0, i32 11
  %num_components203 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info202, i32 0, i32 1
  %205 = load i32, i32* %num_components203, align 4, !tbaa !150
  %206 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %206, i32 0, i32 39
  %207 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !144
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %207, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %208 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %209 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call204 = call i32 @pdf14_pop_transparency_group(%struct.gs_imager_state_s* %199, %struct.pdf14_ctx_s* %201, %struct.pdf14_nonseparable_blending_procs_s* %203, i32 %205, %struct.cmm_profile_s* %208, %struct.gx_device_s* %209) #7
  store i32 %call204, i32* %code, align 4, !tbaa !5
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.200, %if.end.197
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %land.lhs.true, %if.end.61
  %210 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %210, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.206, %if.then.95, %if.then.11, %if.then.5
  %211 = bitcast i32* %blend_mode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %211) #2
  %212 = bitcast %struct.gx_path_s* %path_ttrans to i8*
  call void @llvm.lifetime.end(i64 128, i8* %212) #2
  %213 = bitcast %struct.gx_clip_path_s* %cpath_intersection to i8*
  call void @llvm.lifetime.end(i64 304, i8* %213) #2
  %214 = bitcast i32* %n_chan_tile to i8*
  call void @llvm.lifetime.end(i64 4, i8* %214) #2
  %215 = bitcast %struct.gs_int_point_s* %phase to i8*
  call void @llvm.lifetime.end(i64 8, i8* %215) #2
  %216 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %216) #2
  %217 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %217) #2
  %218 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %218) #2
  %219 = bitcast %struct.gx_clip_rect_s** %curr_clip_rect to i8*
  call void @llvm.lifetime.end(i64 8, i8* %219) #2
  %220 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %220) #2
  %221 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %221) #2
  %222 = bitcast %struct.gs_fixed_rect_s* %outer_box to i8*
  call void @llvm.lifetime.end(i64 16, i8* %222) #2
  %223 = bitcast %struct.gs_fixed_rect_s* %clip_box to i8*
  call void @llvm.lifetime.end(i64 16, i8* %223) #2
  %224 = bitcast %struct.gs_imager_state_s** %pis_noconst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %224) #2
  %225 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %225) #2
  %226 = load i32, i32* %retval
  ret i32 %226
}

declare i32 @gx_dc_is_pattern2_color(%struct.gx_device_color_s*) #0

; Function Attrs: nounwind uwtable
define internal void @update_lop_for_pdf14(%struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdcolor) #1 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %hastrans = alloca i32, align 4
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %0 = bitcast i32* %hastrans to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %hastrans, align 4, !tbaa !5
  %1 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_color_s* %1, null
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %2 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s* %2) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %3 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call1 = call i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s* %3) #7
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %hastrans, align 4, !tbaa !5
  br label %if.end.7

if.else:                                          ; preds = %land.lhs.true, %if.then
  %4 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call4 = call i32 @gx_dc_is_pattern2_color(%struct.gx_device_color_s* %4) #7
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.else
  store i32 1, i32* %hastrans, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then.3
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %entry
  %5 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %5, i32 0, i32 11
  %6 = load i16, i16* %alpha, align 2, !tbaa !392
  %conv = zext i16 %6 to i32
  %cmp9 = icmp ne i32 %conv, 65535
  br i1 %cmp9, label %if.then.33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.8
  %7 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %7, i32 0, i32 12
  %8 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %cmp11 = icmp ne i32 %8, 0
  br i1 %cmp11, label %land.lhs.true.13, label %lor.lhs.false.21

land.lhs.true.13:                                 ; preds = %lor.lhs.false
  %9 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode14 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %9, i32 0, i32 12
  %10 = load i32, i32* %blend_mode14, align 4, !tbaa !257
  %cmp15 = icmp ne i32 %10, 4
  br i1 %cmp15, label %land.lhs.true.17, label %lor.lhs.false.21

land.lhs.true.17:                                 ; preds = %land.lhs.true.13
  %11 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %11, i32 0, i32 12
  %12 = load i32, i32* %blend_mode18, align 4, !tbaa !257
  %cmp19 = icmp ne i32 %12, 5
  br i1 %cmp19, label %if.then.33, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %land.lhs.true.17, %land.lhs.true.13, %lor.lhs.false
  %13 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %13, i32 0, i32 13
  %alpha22 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %14 = load float, float* %alpha22, align 4, !tbaa !243
  %conv23 = fpext float %14 to double
  %cmp24 = fcmp une double %conv23, 1.000000e+00
  br i1 %cmp24, label %if.then.33, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.21
  %15 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %15, i32 0, i32 14
  %alpha27 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %16 = load float, float* %alpha27, align 4, !tbaa !244
  %conv28 = fpext float %16 to double
  %cmp29 = fcmp une double %conv28, 1.000000e+00
  br i1 %cmp29, label %if.then.33, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.26
  %17 = load i32, i32* %hastrans, align 4, !tbaa !5
  %tobool32 = icmp ne i32 %17, 0
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.31, %lor.lhs.false.26, %lor.lhs.false.21, %land.lhs.true.17, %if.end.8
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %log_op = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %18, i32 0, i32 10
  %19 = load i32, i32* %log_op, align 4, !tbaa !393
  %or = or i32 %19, 1024
  store i32 %or, i32* %log_op, align 4, !tbaa !393
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %lor.lhs.false.31
  %20 = bitcast i32* %hastrans to i8*
  call void @llvm.lifetime.end(i64 4, i8* %20) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_set_marking_params(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %3, i32 0, i32 13
  %alpha = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %4 = load float, float* %alpha, align 4, !tbaa !243
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %opacity1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 49
  store float %4, float* %opacity1, align 4, !tbaa !394
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 14
  %alpha2 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %7 = load float, float* %alpha2, align 4, !tbaa !244
  %8 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %shape3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %8, i32 0, i32 50
  store float %7, float* %shape3, align 4, !tbaa !344
  %9 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity4 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %9, i32 0, i32 13
  %alpha5 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity4, i32 0, i32 0
  %10 = load float, float* %alpha5, align 4, !tbaa !243
  %11 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape6 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %11, i32 0, i32 14
  %alpha7 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape6, i32 0, i32 0
  %12 = load float, float* %alpha7, align 4, !tbaa !244
  %mul = fmul float %10, %12
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %alpha8 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 51
  store float %mul, float* %alpha8, align 4, !tbaa !343
  %14 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %14, i32 0, i32 12
  %15 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_mode9 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 52
  store i32 %15, i32* %blend_mode9, align 4, !tbaa !48
  %17 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %17, i32 0, i32 21
  %18 = load i32, i32* %overprint, align 4, !tbaa !395
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %overprint10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 54
  store i32 %18, i32* %overprint10, align 4, !tbaa !345
  %20 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %20, i32 0, i32 22
  %21 = load i32, i32* %overprint_mode, align 4, !tbaa !396
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %overprint_mode11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 55
  store i32 %21, i32* %overprint_mode11, align 4, !tbaa !397
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %23 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #2
  ret void
}

declare i32 @gx_default_fill_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #0

declare i32 @gx_cpath_init_local_shared_nested(%struct.gx_clip_path_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, i32) #0

declare i32 @gx_cpath_init_local_shared(%struct.gx_clip_path_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*) #0

declare i32 @gx_cpath_from_rectangle(%struct.gx_clip_path_s*, %struct.gs_fixed_rect_s*) #0

declare i32 @gx_cpath_intersect_with_params(%struct.gx_clip_path_s*, %struct.gx_path_s*, i32, %struct.gs_imager_state_s*, %struct.gx_fill_params_s*) #0

declare i32 @gx_path_init_local_shared(%struct.gx_path_s*, %struct.gx_path_s*, %struct.gs_memory_s*) #0

declare i32 @gx_path_add_rectangle(%struct.gx_path_s*, i32, i32, i32, i32) #0

declare i32 @gx_cpath_intersect(%struct.gx_clip_path_s*, %struct.gx_path_s*, i32, %struct.gs_imager_state_s*) #0

declare i32 @gx_cpath_outer_box(%struct.gx_clip_path_s*, %struct.gs_fixed_rect_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_push_transparency_group(%struct.pdf14_ctx_s* %ctx, %struct.gs_int_rect_s* %rect, i32 %isolated, i32 %knockout, i8 zeroext %alpha, i8 zeroext %shape, i32 %blend_mode, i32 %idle, i32 %mask_id, i32 %numcomps, i32 %cm_back_drop, %struct.cmm_profile_s* %group_profile, %struct.cmm_profile_s* %tos_profile, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %isolated.addr = alloca i32, align 4
  %knockout.addr = alloca i32, align 4
  %alpha.addr = alloca i8, align 1
  %shape.addr = alloca i8, align 1
  %blend_mode.addr = alloca i32, align 4
  %idle.addr = alloca i32, align 4
  %mask_id.addr = alloca i32, align 4
  %numcomps.addr = alloca i32, align 4
  %cm_back_drop.addr = alloca i32, align 4
  %group_profile.addr = alloca %struct.cmm_profile_s*, align 8
  %tos_profile.addr = alloca %struct.cmm_profile_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %tos = alloca %struct.pdf14_buf_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %backdrop = alloca %struct.pdf14_buf_s*, align 8
  %has_shape = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %check = alloca %struct.pdf14_buf_s*, align 8
  %child = alloca %struct.pdf14_buf_s*, align 8
  %prev_knockout_profile = alloca %struct.cmm_profile_s*, align 8
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  store i32 %isolated, i32* %isolated.addr, align 4, !tbaa !5
  store i32 %knockout, i32* %knockout.addr, align 4, !tbaa !5
  store i8 %alpha, i8* %alpha.addr, align 1, !tbaa !66
  store i8 %shape, i8* %shape.addr, align 1, !tbaa !66
  store i32 %blend_mode, i32* %blend_mode.addr, align 4, !tbaa !66
  store i32 %idle, i32* %idle.addr, align 4, !tbaa !5
  store i32 %mask_id, i32* %mask_id.addr, align 4, !tbaa !5
  store i32 %numcomps, i32* %numcomps.addr, align 4, !tbaa !5
  store i32 %cm_back_drop, i32* %cm_back_drop.addr, align 4, !tbaa !5
  store %struct.cmm_profile_s* %group_profile, %struct.cmm_profile_s** %group_profile.addr, align 8, !tbaa !1
  store %struct.cmm_profile_s* %tos_profile, %struct.cmm_profile_s** %tos_profile.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %1, i32 0, i32 0
  %2 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %2, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.pdf14_buf_s** %backdrop to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %has_shape1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %7, i32 0, i32 8
  %8 = load i32, i32* %has_shape1, align 4, !tbaa !40
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.end
  %9 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %knockout2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %9, i32 0, i32 3
  %10 = load i32, i32* %knockout2, align 4, !tbaa !198
  %tobool3 = icmp ne i32 %10, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.end
  %11 = phi i1 [ true, %do.end ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %11 to i32
  store i32 %lor.ext, i32* %has_shape, align 4, !tbaa !5
  %12 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %has_tags4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %12, i32 0, i32 9
  %13 = load i32, i32* %has_tags4, align 4, !tbaa !327
  store i32 %13, i32* %has_tags, align 4, !tbaa !5
  %14 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %15 = load i32, i32* %has_tags, align 4, !tbaa !5
  %16 = load i32, i32* %isolated.addr, align 4, !tbaa !5
  %tobool5 = icmp ne i32 %16, 0
  %lnot = xor i1 %tobool5, true
  %lnot.ext = zext i1 %lnot to i32
  %17 = load i32, i32* %has_shape, align 4, !tbaa !5
  %18 = load i32, i32* %idle.addr, align 4, !tbaa !5
  %19 = load i32, i32* %numcomps.addr, align 4, !tbaa !5
  %add = add nsw i32 %19, 1
  %20 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %20, i32 0, i32 2
  %21 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !283
  %call = call %struct.pdf14_buf_s* @pdf14_buf_new(%struct.gs_int_rect_s* %14, i32 %15, i32 %lnot.ext, i32 %17, i32 %18, i32 %add, %struct.gs_memory_s* %21) #7
  store %struct.pdf14_buf_s* %call, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %do.body.6

do.body.6:                                        ; preds = %lor.end
  br label %do.cond.7

do.cond.7:                                        ; preds = %do.body.6
  br label %do.end.8

do.end.8:                                         ; preds = %do.cond.7
  %22 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp = icmp eq %struct.pdf14_buf_s* %22, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end.8
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end.8
  %23 = load i32, i32* %isolated.addr, align 4, !tbaa !5
  %24 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated9 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %24, i32 0, i32 2
  store i32 %23, i32* %isolated9, align 4, !tbaa !331
  %25 = load i32, i32* %knockout.addr, align 4, !tbaa !5
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout10 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 3
  store i32 %25, i32* %knockout10, align 4, !tbaa !198
  %27 = load i8, i8* %alpha.addr, align 1, !tbaa !66
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %alpha11 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %28, i32 0, i32 4
  store i8 %27, i8* %alpha11, align 1, !tbaa !398
  %29 = load i8, i8* %shape.addr, align 1, !tbaa !66
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %shape12 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 5
  store i8 %29, i8* %shape12, align 1, !tbaa !399
  %31 = load i32, i32* %blend_mode.addr, align 4, !tbaa !66
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %blend_mode13 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 6
  store i32 %31, i32* %blend_mode13, align 4, !tbaa !400
  %33 = load i32, i32* %mask_id.addr, align 4, !tbaa !5
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_id14 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 21
  store i32 %33, i32* %mask_id14, align 4, !tbaa !334
  %35 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %35, i32 0, i32 1
  %36 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %37 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack15 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %37, i32 0, i32 18
  store %struct.pdf14_mask_s* %36, %struct.pdf14_mask_s** %mask_stack15, align 8, !tbaa !308
  %38 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack16 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %38, i32 0, i32 1
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack16, align 8, !tbaa !304
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 0
  store %struct.pdf14_buf_s* %39, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %41 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %42 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack17 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %42, i32 0, i32 0
  store %struct.pdf14_buf_s* %41, %struct.pdf14_buf_s** %stack17, align 8, !tbaa !23
  %43 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %43, i32 0, i32 15
  %44 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp18 = icmp eq i8* %44, null
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.20:                                        ; preds = %if.end
  %45 = load i32, i32* %idle.addr, align 4, !tbaa !5
  %tobool21 = icmp ne i32 %45, 0
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.20
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.23:                                        ; preds = %if.end.20
  %46 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %call24 = call %struct.pdf14_buf_s* @pdf14_find_backdrop_buf(%struct.pdf14_ctx_s* %46) #7
  store %struct.pdf14_buf_s* %call24, %struct.pdf14_buf_s** %backdrop, align 8, !tbaa !1
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %backdrop, align 8, !tbaa !1
  %cmp25 = icmp eq %struct.pdf14_buf_s* %47, null
  br i1 %cmp25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %if.end.23
  %48 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data27 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %48, i32 0, i32 15
  %49 = load i8*, i8** %data27, align 8, !tbaa !36
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 12
  %51 = load i32, i32* %planestride, align 4, !tbaa !58
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %52, i32 0, i32 13
  %53 = load i32, i32* %n_chan, align 4, !tbaa !38
  %54 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_shape28 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %54, i32 0, i32 8
  %55 = load i32, i32* %has_shape28, align 4, !tbaa !40
  %tobool29 = icmp ne i32 %55, 0
  %cond = select i1 %tobool29, i32 1, i32 0
  %add30 = add nsw i32 %53, %cond
  %56 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_alpha_g = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %56, i32 0, i32 7
  %57 = load i32, i32* %has_alpha_g, align 4, !tbaa !332
  %tobool31 = icmp ne i32 %57, 0
  %cond32 = select i1 %tobool31, i32 1, i32 0
  %add33 = add nsw i32 %add30, %cond32
  %58 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags34 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %58, i32 0, i32 9
  %59 = load i32, i32* %has_tags34, align 4, !tbaa !327
  %tobool35 = icmp ne i32 %59, 0
  %cond36 = select i1 %tobool35, i32 1, i32 0
  %add37 = add nsw i32 %add33, %cond36
  %mul = mul nsw i32 %51, %add37
  %conv = sext i32 %mul to i64
  %call38 = call i8* @memset(i8* %49, i32 0, i64 %conv) #8
  br label %if.end.49

if.else:                                          ; preds = %if.end.23
  %60 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout39 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %60, i32 0, i32 3
  %61 = load i32, i32* %knockout39, align 4, !tbaa !198
  %tobool40 = icmp ne i32 %61, 0
  br i1 %tobool40, label %if.end.48, label %if.then.41

if.then.41:                                       ; preds = %if.else
  %62 = load i32, i32* %cm_back_drop.addr, align 4, !tbaa !5
  %tobool42 = icmp ne i32 %62, 0
  br i1 %tobool42, label %if.else.44, label %if.then.43

if.then.43:                                       ; preds = %if.then.41
  %63 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %64 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  call void @pdf14_preserve_backdrop(%struct.pdf14_buf_s* %63, %struct.pdf14_buf_s* %64, i32 0) #7
  br label %if.end.47

if.else.44:                                       ; preds = %if.then.41
  %65 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %66 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile.addr, align 8, !tbaa !1
  %67 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %68 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile.addr, align 8, !tbaa !1
  %69 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory45 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %69, i32 0, i32 2
  %70 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory45, align 8, !tbaa !283
  %71 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call46 = call i32 @pdf14_preserve_backdrop_cm(%struct.pdf14_buf_s* %65, %struct.cmm_profile_s* %66, %struct.pdf14_buf_s* %67, %struct.cmm_profile_s* %68, %struct.gs_memory_s* %70, %struct.gs_imager_state_s* %71, %struct.gx_device_s* %72, i32 0) #7
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.else
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.then.26
  %73 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout50 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %73, i32 0, i32 3
  %74 = load i32, i32* %knockout50, align 4, !tbaa !198
  %tobool51 = icmp ne i32 %74, 0
  br i1 %tobool51, label %if.then.52, label %if.end.115

if.then.52:                                       ; preds = %if.end.49
  %75 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory53 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %75, i32 0, i32 2
  %76 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory53, align 8, !tbaa !283
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %76, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %77 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %78 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory54 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %78, i32 0, i32 2
  %79 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory54, align 8, !tbaa !283
  %80 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride55 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %80, i32 0, i32 12
  %81 = load i32, i32* %planestride55, align 4, !tbaa !58
  %82 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan56 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %82, i32 0, i32 13
  %83 = load i32, i32* %n_chan56, align 4, !tbaa !38
  %mul57 = mul nsw i32 %81, %83
  %call58 = call i8* %77(%struct.gs_memory_s* %79, i32 %mul57, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i32 0, i32 0)) #7
  %84 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop59 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %84, i32 0, i32 1
  store i8* %call58, i8** %backdrop59, align 8, !tbaa !307
  %85 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop60 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %85, i32 0, i32 1
  %86 = load i8*, i8** %backdrop60, align 8, !tbaa !307
  %cmp61 = icmp eq i8* %86, null
  br i1 %cmp61, label %if.then.63, label %if.end.69

if.then.63:                                       ; preds = %if.then.52
  %87 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory64 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %87, i32 0, i32 2
  %88 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory64, align 8, !tbaa !283
  %procs65 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %88, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs65, i32 0, i32 2
  %89 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %90 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory66 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %90, i32 0, i32 2
  %91 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory66, align 8, !tbaa !283
  %92 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop67 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %92, i32 0, i32 1
  %93 = load i8*, i8** %backdrop67, align 8, !tbaa !307
  call void %89(%struct.gs_memory_s* %91, i8* %93, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i32 0, i32 0)) #7
  %call68 = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 888, i32 0, i32 -25, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.40, i32 0, i32 0)) #7
  store i32 %call68, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.69:                                        ; preds = %if.then.52
  %94 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated70 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %94, i32 0, i32 2
  %95 = load i32, i32* %isolated70, align 4, !tbaa !331
  %tobool71 = icmp ne i32 %95, 0
  br i1 %tobool71, label %if.then.72, label %if.else.79

if.then.72:                                       ; preds = %if.end.69
  %96 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop73 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %96, i32 0, i32 1
  %97 = load i8*, i8** %backdrop73, align 8, !tbaa !307
  %98 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride74 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %98, i32 0, i32 12
  %99 = load i32, i32* %planestride74, align 4, !tbaa !58
  %100 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan75 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %100, i32 0, i32 13
  %101 = load i32, i32* %n_chan75, align 4, !tbaa !38
  %mul76 = mul nsw i32 %99, %101
  %conv77 = sext i32 %mul76 to i64
  %call78 = call i8* @memset(i8* %97, i32 0, i64 %conv77) #8
  br label %if.end.114

if.else.79:                                       ; preds = %if.end.69
  %102 = bitcast %struct.pdf14_buf_s** %check to i8*
  call void @llvm.lifetime.start(i64 8, i8* %102) #2
  %103 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %103, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %104 = bitcast %struct.pdf14_buf_s** %child to i8*
  call void @llvm.lifetime.start(i64 8, i8* %104) #2
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %child, align 8, !tbaa !1
  %105 = bitcast %struct.cmm_profile_s** %prev_knockout_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %105) #2
  br label %while.cond

while.cond:                                       ; preds = %if.end.89, %if.else.79
  %106 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %cmp80 = icmp ne %struct.pdf14_buf_s* %106, null
  br i1 %cmp80, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %107 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %isolated82 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %107, i32 0, i32 2
  %108 = load i32, i32* %isolated82, align 4, !tbaa !331
  %tobool83 = icmp ne i32 %108, 0
  br i1 %tobool83, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %while.body
  br label %while.end

if.end.85:                                        ; preds = %while.body
  %109 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %knockout86 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %109, i32 0, i32 3
  %110 = load i32, i32* %knockout86, align 4, !tbaa !198
  %tobool87 = icmp ne i32 %110, 0
  br i1 %tobool87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.85
  br label %while.end

if.end.89:                                        ; preds = %if.end.85
  %111 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %111, %struct.pdf14_buf_s** %child, align 8, !tbaa !1
  %112 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %saved90 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %112, i32 0, i32 0
  %113 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved90, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %113, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %if.then.88, %if.then.84, %while.cond
  %114 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %cmp91 = icmp eq %struct.pdf14_buf_s* %114, null
  br i1 %cmp91, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %while.end
  %115 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile.addr, align 8, !tbaa !1
  store %struct.cmm_profile_s* %115, %struct.cmm_profile_s** %prev_knockout_profile, align 8, !tbaa !1
  %116 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  store %struct.pdf14_buf_s* %116, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  br label %if.end.100

if.else.94:                                       ; preds = %while.end
  %117 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %child, align 8, !tbaa !1
  %cmp95 = icmp eq %struct.pdf14_buf_s* %117, null
  br i1 %cmp95, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %if.else.94
  %118 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %tos_profile.addr, align 8, !tbaa !1
  store %struct.cmm_profile_s* %118, %struct.cmm_profile_s** %prev_knockout_profile, align 8, !tbaa !1
  br label %if.end.99

if.else.98:                                       ; preds = %if.else.94
  %119 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %child, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %119, i32 0, i32 22
  %120 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %120, i32 0, i32 15
  %121 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  store %struct.cmm_profile_s* %121, %struct.cmm_profile_s** %prev_knockout_profile, align 8, !tbaa !1
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.98, %if.then.97
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.93
  %122 = load i32, i32* %cm_back_drop.addr, align 4, !tbaa !5
  %tobool101 = icmp ne i32 %122, 0
  br i1 %tobool101, label %if.else.103, label %if.then.102

if.then.102:                                      ; preds = %if.end.100
  %123 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %124 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  call void @pdf14_preserve_backdrop(%struct.pdf14_buf_s* %123, %struct.pdf14_buf_s* %124, i32 0) #7
  br label %if.end.106

if.else.103:                                      ; preds = %if.end.100
  %125 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %126 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %group_profile.addr, align 8, !tbaa !1
  %127 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %check, align 8, !tbaa !1
  %128 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %prev_knockout_profile, align 8, !tbaa !1
  %129 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory104 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %129, i32 0, i32 2
  %130 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory104, align 8, !tbaa !283
  %131 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %132 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call105 = call i32 @pdf14_preserve_backdrop_cm(%struct.pdf14_buf_s* %125, %struct.cmm_profile_s* %126, %struct.pdf14_buf_s* %127, %struct.cmm_profile_s* %128, %struct.gs_memory_s* %130, %struct.gs_imager_state_s* %131, %struct.gx_device_s* %132, i32 0) #7
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  %133 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %backdrop107 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %133, i32 0, i32 1
  %134 = load i8*, i8** %backdrop107, align 8, !tbaa !307
  %135 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data108 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %135, i32 0, i32 15
  %136 = load i8*, i8** %data108, align 8, !tbaa !36
  %137 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride109 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %137, i32 0, i32 12
  %138 = load i32, i32* %planestride109, align 4, !tbaa !58
  %139 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan110 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %139, i32 0, i32 13
  %140 = load i32, i32* %n_chan110, align 4, !tbaa !38
  %mul111 = mul nsw i32 %138, %140
  %conv112 = sext i32 %mul111 to i64
  %call113 = call i8* @memcpy(i8* %134, i8* %136, i64 %conv112) #8
  %141 = bitcast %struct.cmm_profile_s** %prev_knockout_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %141) #2
  %142 = bitcast %struct.pdf14_buf_s** %child to i8*
  call void @llvm.lifetime.end(i64 8, i8* %142) #2
  %143 = bitcast %struct.pdf14_buf_s** %check to i8*
  call void @llvm.lifetime.end(i64 8, i8* %143) #2
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.106, %if.then.72
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.end.49
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.115, %if.then.63, %if.then.22, %if.then.19, %if.then
  %144 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %144) #2
  %145 = bitcast i32* %has_shape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %145) #2
  %146 = bitcast %struct.pdf14_buf_s** %backdrop to i8*
  call void @llvm.lifetime.end(i64 8, i8* %146) #2
  %147 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %147) #2
  %148 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %148) #2
  %149 = load i32, i32* %retval
  ret i32 %149
}

declare %struct.gx_pattern_trans_s* @new_pattern_trans_buff(%struct.gs_memory_s*) #0

declare void @tile_rect_trans_blend(i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*) #0

declare void @tile_rect_trans_simple(i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*) #0

declare i32 @gx_trans_pattern_fill_rect(i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*, i64, %struct.gx_device_s*, %struct.gx_device_color_s*) #0

declare void @gx_make_clip_device_on_stack(%struct.gx_device_clip_s*, %struct.gx_clip_path_s*, %struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_pop_transparency_group(%struct.gs_imager_state_s* %pis, %struct.pdf14_ctx_s* %ctx, %struct.pdf14_nonseparable_blending_procs_s* %pblend_procs, i32 %curr_num_color_comp, %struct.cmm_profile_s* %curr_icc_profile, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %pblend_procs.addr = alloca %struct.pdf14_nonseparable_blending_procs_s*, align 8
  %curr_num_color_comp.addr = alloca i32, align 4
  %curr_icc_profile.addr = alloca %struct.cmm_profile_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %tos = alloca %struct.pdf14_buf_s*, align 8
  %nos = alloca %struct.pdf14_buf_s*, align 8
  %mask_stack = alloca %struct.pdf14_mask_s*, align 8
  %maskbuf = alloca %struct.pdf14_buf_s*, align 8
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %new_data_buf = alloca i8*, align 8
  %num_noncolor_planes = alloca i32, align 4
  %new_num_planes = alloca i32, align 4
  %num_cols = alloca i32, align 4
  %num_rows = alloca i32, align 4
  %num_newcolor_planes = alloca i32, align 4
  %icc_match = alloca i32, align 4
  %rendering_params = alloca %struct.gsicc_rendering_param_s, align 4
  %icc_link = alloca %struct.gsicc_link_s*, align 8
  %input_buff_desc = alloca %struct.gsicc_bufferdesc_s, align 4
  %output_buff_desc = alloca %struct.gsicc_bufferdesc_s, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %overprint = alloca i32, align 4
  %drawn_comps = alloca i64, align 8
  %blendspot = alloca i32, align 4
  %nonicc_conversion = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  store %struct.pdf14_nonseparable_blending_procs_s* %pblend_procs, %struct.pdf14_nonseparable_blending_procs_s** %pblend_procs.addr, align 8, !tbaa !1
  store i32 %curr_num_color_comp, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  store %struct.cmm_profile_s* %curr_icc_profile, %struct.cmm_profile_s** %curr_icc_profile.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %1, i32 0, i32 0
  %2 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %2, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %nos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %4, i32 0, i32 0
  %5 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %5, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_mask_s** %mask_stack to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %7, i32 0, i32 18
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack1, align 8, !tbaa !308
  store %struct.pdf14_mask_s* %8, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !1
  %9 = bitcast %struct.pdf14_buf_s** %maskbuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast i32* %x0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i32* %y0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i8** %new_data_buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  store i8* null, i8** %new_data_buf, align 8, !tbaa !1
  %15 = bitcast i32* %num_noncolor_planes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast i32* %new_num_planes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  %17 = bitcast i32* %num_cols to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = bitcast i32* %num_rows to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = bitcast i32* %num_newcolor_planes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #2
  %20 = bitcast i32* %icc_match to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  %21 = bitcast %struct.gsicc_rendering_param_s* %rendering_params to i8*
  call void @llvm.lifetime.start(i64 24, i8* %21) #2
  %22 = bitcast %struct.gsicc_link_s** %icc_link to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #2
  %23 = bitcast %struct.gsicc_bufferdesc_s* %input_buff_desc to i8*
  call void @llvm.lifetime.start(i64 36, i8* %23) #2
  %24 = bitcast %struct.gsicc_bufferdesc_s* %output_buff_desc to i8*
  call void @llvm.lifetime.start(i64 36, i8* %24) #2
  %25 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #2
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %27 = bitcast %struct.gx_device_s* %26 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %27, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %28 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %overprint2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 54
  %30 = load i32, i32* %overprint2, align 4, !tbaa !345
  store i32 %30, i32* %overprint, align 4, !tbaa !5
  %31 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #2
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %drawn_comps3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %32, i32 0, i32 57
  %33 = load i64, i64* %drawn_comps3, align 8, !tbaa !242
  store i64 %33, i64* %drawn_comps, align 8, !tbaa !68
  %34 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #2
  %35 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blendspot4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %35, i32 0, i32 56
  %36 = load i32, i32* %blendspot4, align 4, !tbaa !238
  store i32 %36, i32* %blendspot, align 4, !tbaa !5
  %37 = bitcast i32* %nonicc_conversion to i8*
  call void @llvm.lifetime.start(i64 4, i8* %37) #2
  store i32 1, i32* %nonicc_conversion, align 4, !tbaa !5
  %38 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !1
  %cmp = icmp eq %struct.pdf14_mask_s* %38, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %39 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !1
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %39, i32 0, i32 0
  %40 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %mask_buf = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %40, i32 0, i32 0
  %41 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %mask_buf, align 8, !tbaa !339
  store %struct.pdf14_buf_s* %41, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %cmp5 = icmp eq %struct.pdf14_buf_s* %42, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.7:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.7
  %43 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %43, i32 0, i32 10
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %44 = load i32, i32* %x, align 4, !tbaa !43
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 17
  %p8 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x9 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p8, i32 0, i32 0
  %46 = load i32, i32* %x9, align 4, !tbaa !335
  %cmp10 = icmp sgt i32 %44, %46
  br i1 %cmp10, label %if.then.11, label %if.end.18

if.then.11:                                       ; preds = %do.body
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect12 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 10
  %p13 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect12, i32 0, i32 0
  %x14 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p13, i32 0, i32 0
  %48 = load i32, i32* %x14, align 4, !tbaa !43
  %49 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty15 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %49, i32 0, i32 17
  %p16 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty15, i32 0, i32 0
  %x17 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p16, i32 0, i32 0
  store i32 %48, i32* %x17, align 4, !tbaa !335
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.11, %do.body
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect19 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 10
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect19, i32 0, i32 1
  %x20 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %51 = load i32, i32* %x20, align 4, !tbaa !42
  %52 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty21 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %52, i32 0, i32 17
  %q22 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty21, i32 0, i32 1
  %x23 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q22, i32 0, i32 0
  %53 = load i32, i32* %x23, align 4, !tbaa !337
  %cmp24 = icmp slt i32 %51, %53
  br i1 %cmp24, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %if.end.18
  %54 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect26 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %54, i32 0, i32 10
  %q27 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect26, i32 0, i32 1
  %x28 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q27, i32 0, i32 0
  %55 = load i32, i32* %x28, align 4, !tbaa !42
  %56 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty29 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %56, i32 0, i32 17
  %q30 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty29, i32 0, i32 1
  %x31 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q30, i32 0, i32 0
  store i32 %55, i32* %x31, align 4, !tbaa !337
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.25, %if.end.18
  %57 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect33 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %57, i32 0, i32 10
  %p34 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect33, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p34, i32 0, i32 1
  %58 = load i32, i32* %y, align 4, !tbaa !46
  %59 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty35 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %59, i32 0, i32 17
  %p36 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty35, i32 0, i32 0
  %y37 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p36, i32 0, i32 1
  %60 = load i32, i32* %y37, align 4, !tbaa !336
  %cmp38 = icmp sgt i32 %58, %60
  br i1 %cmp38, label %if.then.39, label %if.end.46

if.then.39:                                       ; preds = %if.end.32
  %61 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect40 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %61, i32 0, i32 10
  %p41 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect40, i32 0, i32 0
  %y42 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p41, i32 0, i32 1
  %62 = load i32, i32* %y42, align 4, !tbaa !46
  %63 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty43 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %63, i32 0, i32 17
  %p44 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty43, i32 0, i32 0
  %y45 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p44, i32 0, i32 1
  store i32 %62, i32* %y45, align 4, !tbaa !336
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.39, %if.end.32
  %64 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect47 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %64, i32 0, i32 10
  %q48 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect47, i32 0, i32 1
  %y49 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q48, i32 0, i32 1
  %65 = load i32, i32* %y49, align 4, !tbaa !45
  %66 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty50 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %66, i32 0, i32 17
  %q51 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty50, i32 0, i32 1
  %y52 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q51, i32 0, i32 1
  %67 = load i32, i32* %y52, align 4, !tbaa !338
  %cmp53 = icmp slt i32 %65, %67
  br i1 %cmp53, label %if.then.54, label %if.end.61

if.then.54:                                       ; preds = %if.end.46
  %68 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect55 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %68, i32 0, i32 10
  %q56 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect55, i32 0, i32 1
  %y57 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q56, i32 0, i32 1
  %69 = load i32, i32* %y57, align 4, !tbaa !45
  %70 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty58 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %70, i32 0, i32 17
  %q59 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty58, i32 0, i32 1
  %y60 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q59, i32 0, i32 1
  store i32 %69, i32* %y60, align 4, !tbaa !338
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.54, %if.end.46
  br label %do.cond

do.cond:                                          ; preds = %if.end.61
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.62

do.body.62:                                       ; preds = %do.end
  %71 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect63 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %71, i32 0, i32 10
  %p64 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect63, i32 0, i32 0
  %x65 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p64, i32 0, i32 0
  %72 = load i32, i32* %x65, align 4, !tbaa !43
  %73 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty66 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %73, i32 0, i32 17
  %p67 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty66, i32 0, i32 0
  %x68 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p67, i32 0, i32 0
  %74 = load i32, i32* %x68, align 4, !tbaa !335
  %cmp69 = icmp sgt i32 %72, %74
  br i1 %cmp69, label %if.then.70, label %if.end.77

if.then.70:                                       ; preds = %do.body.62
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect71 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 10
  %p72 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect71, i32 0, i32 0
  %x73 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p72, i32 0, i32 0
  %76 = load i32, i32* %x73, align 4, !tbaa !43
  %77 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty74 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %77, i32 0, i32 17
  %p75 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty74, i32 0, i32 0
  %x76 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p75, i32 0, i32 0
  store i32 %76, i32* %x76, align 4, !tbaa !335
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.70, %do.body.62
  %78 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect78 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %78, i32 0, i32 10
  %q79 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect78, i32 0, i32 1
  %x80 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q79, i32 0, i32 0
  %79 = load i32, i32* %x80, align 4, !tbaa !42
  %80 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty81 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %80, i32 0, i32 17
  %q82 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty81, i32 0, i32 1
  %x83 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q82, i32 0, i32 0
  %81 = load i32, i32* %x83, align 4, !tbaa !337
  %cmp84 = icmp slt i32 %79, %81
  br i1 %cmp84, label %if.then.85, label %if.end.92

if.then.85:                                       ; preds = %if.end.77
  %82 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect86 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %82, i32 0, i32 10
  %q87 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect86, i32 0, i32 1
  %x88 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q87, i32 0, i32 0
  %83 = load i32, i32* %x88, align 4, !tbaa !42
  %84 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty89 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %84, i32 0, i32 17
  %q90 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty89, i32 0, i32 1
  %x91 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q90, i32 0, i32 0
  store i32 %83, i32* %x91, align 4, !tbaa !337
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.85, %if.end.77
  %85 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect93 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %85, i32 0, i32 10
  %p94 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect93, i32 0, i32 0
  %y95 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p94, i32 0, i32 1
  %86 = load i32, i32* %y95, align 4, !tbaa !46
  %87 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty96 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %87, i32 0, i32 17
  %p97 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty96, i32 0, i32 0
  %y98 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p97, i32 0, i32 1
  %88 = load i32, i32* %y98, align 4, !tbaa !336
  %cmp99 = icmp sgt i32 %86, %88
  br i1 %cmp99, label %if.then.100, label %if.end.107

if.then.100:                                      ; preds = %if.end.92
  %89 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect101 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %89, i32 0, i32 10
  %p102 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect101, i32 0, i32 0
  %y103 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p102, i32 0, i32 1
  %90 = load i32, i32* %y103, align 4, !tbaa !46
  %91 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty104 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %91, i32 0, i32 17
  %p105 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty104, i32 0, i32 0
  %y106 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p105, i32 0, i32 1
  store i32 %90, i32* %y106, align 4, !tbaa !336
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.100, %if.end.92
  %92 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect108 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %92, i32 0, i32 10
  %q109 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect108, i32 0, i32 1
  %y110 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q109, i32 0, i32 1
  %93 = load i32, i32* %y110, align 4, !tbaa !45
  %94 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty111 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %94, i32 0, i32 17
  %q112 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty111, i32 0, i32 1
  %y113 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q112, i32 0, i32 1
  %95 = load i32, i32* %y113, align 4, !tbaa !338
  %cmp114 = icmp slt i32 %93, %95
  br i1 %cmp114, label %if.then.115, label %if.end.122

if.then.115:                                      ; preds = %if.end.107
  %96 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect116 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %96, i32 0, i32 10
  %q117 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect116, i32 0, i32 1
  %y118 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q117, i32 0, i32 1
  %97 = load i32, i32* %y118, align 4, !tbaa !45
  %98 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %dirty119 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %98, i32 0, i32 17
  %q120 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty119, i32 0, i32 1
  %y121 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q120, i32 0, i32 1
  store i32 %97, i32* %y121, align 4, !tbaa !338
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.115, %if.end.107
  br label %do.cond.123

do.cond.123:                                      ; preds = %if.end.122
  br label %do.end.124

do.end.124:                                       ; preds = %do.cond.123
  %99 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty125 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %99, i32 0, i32 17
  %p126 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty125, i32 0, i32 0
  %y127 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p126, i32 0, i32 1
  %100 = load i32, i32* %y127, align 4, !tbaa !336
  %101 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect128 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %101, i32 0, i32 10
  %p129 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect128, i32 0, i32 0
  %y130 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p129, i32 0, i32 1
  %102 = load i32, i32* %y130, align 4, !tbaa !46
  %cmp131 = icmp sgt i32 %100, %102
  br i1 %cmp131, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.124
  %103 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty132 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %103, i32 0, i32 17
  %p133 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty132, i32 0, i32 0
  %y134 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p133, i32 0, i32 1
  %104 = load i32, i32* %y134, align 4, !tbaa !336
  br label %cond.end

cond.false:                                       ; preds = %do.end.124
  %105 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect135 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %105, i32 0, i32 10
  %p136 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect135, i32 0, i32 0
  %y137 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p136, i32 0, i32 1
  %106 = load i32, i32* %y137, align 4, !tbaa !46
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %104, %cond.true ], [ %106, %cond.false ]
  store i32 %cond, i32* %y0, align 4, !tbaa !5
  %107 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty138 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %107, i32 0, i32 17
  %q139 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty138, i32 0, i32 1
  %y140 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q139, i32 0, i32 1
  %108 = load i32, i32* %y140, align 4, !tbaa !338
  %109 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect141 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %109, i32 0, i32 10
  %q142 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect141, i32 0, i32 1
  %y143 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q142, i32 0, i32 1
  %110 = load i32, i32* %y143, align 4, !tbaa !45
  %cmp144 = icmp slt i32 %108, %110
  br i1 %cmp144, label %cond.true.145, label %cond.false.149

cond.true.145:                                    ; preds = %cond.end
  %111 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty146 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %111, i32 0, i32 17
  %q147 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty146, i32 0, i32 1
  %y148 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q147, i32 0, i32 1
  %112 = load i32, i32* %y148, align 4, !tbaa !338
  br label %cond.end.153

cond.false.149:                                   ; preds = %cond.end
  %113 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect150 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %113, i32 0, i32 10
  %q151 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect150, i32 0, i32 1
  %y152 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q151, i32 0, i32 1
  %114 = load i32, i32* %y152, align 4, !tbaa !45
  br label %cond.end.153

cond.end.153:                                     ; preds = %cond.false.149, %cond.true.145
  %cond154 = phi i32 [ %112, %cond.true.145 ], [ %114, %cond.false.149 ]
  store i32 %cond154, i32* %y1, align 4, !tbaa !5
  %115 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty155 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %115, i32 0, i32 17
  %p156 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty155, i32 0, i32 0
  %x157 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p156, i32 0, i32 0
  %116 = load i32, i32* %x157, align 4, !tbaa !335
  %117 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect158 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %117, i32 0, i32 10
  %p159 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect158, i32 0, i32 0
  %x160 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p159, i32 0, i32 0
  %118 = load i32, i32* %x160, align 4, !tbaa !43
  %cmp161 = icmp sgt i32 %116, %118
  br i1 %cmp161, label %cond.true.162, label %cond.false.166

cond.true.162:                                    ; preds = %cond.end.153
  %119 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty163 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %119, i32 0, i32 17
  %p164 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty163, i32 0, i32 0
  %x165 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p164, i32 0, i32 0
  %120 = load i32, i32* %x165, align 4, !tbaa !335
  br label %cond.end.170

cond.false.166:                                   ; preds = %cond.end.153
  %121 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect167 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %121, i32 0, i32 10
  %p168 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect167, i32 0, i32 0
  %x169 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p168, i32 0, i32 0
  %122 = load i32, i32* %x169, align 4, !tbaa !43
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.false.166, %cond.true.162
  %cond171 = phi i32 [ %120, %cond.true.162 ], [ %122, %cond.false.166 ]
  store i32 %cond171, i32* %x0, align 4, !tbaa !5
  %123 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty172 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %123, i32 0, i32 17
  %q173 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty172, i32 0, i32 1
  %x174 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q173, i32 0, i32 0
  %124 = load i32, i32* %x174, align 4, !tbaa !337
  %125 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect175 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %125, i32 0, i32 10
  %q176 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect175, i32 0, i32 1
  %x177 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q176, i32 0, i32 0
  %126 = load i32, i32* %x177, align 4, !tbaa !42
  %cmp178 = icmp slt i32 %124, %126
  br i1 %cmp178, label %cond.true.179, label %cond.false.183

cond.true.179:                                    ; preds = %cond.end.170
  %127 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %dirty180 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %127, i32 0, i32 17
  %q181 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty180, i32 0, i32 1
  %x182 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q181, i32 0, i32 0
  %128 = load i32, i32* %x182, align 4, !tbaa !337
  br label %cond.end.187

cond.false.183:                                   ; preds = %cond.end.170
  %129 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %rect184 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %129, i32 0, i32 10
  %q185 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect184, i32 0, i32 1
  %x186 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q185, i32 0, i32 0
  %130 = load i32, i32* %x186, align 4, !tbaa !42
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.false.183, %cond.true.179
  %cond188 = phi i32 [ %128, %cond.true.179 ], [ %130, %cond.false.183 ]
  store i32 %cond188, i32* %x1, align 4, !tbaa !5
  %131 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack189 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %131, i32 0, i32 1
  %132 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack189, align 8, !tbaa !304
  %tobool = icmp ne %struct.pdf14_mask_s* %132, null
  br i1 %tobool, label %if.then.190, label %if.end.243

if.then.190:                                      ; preds = %cond.end.187
  br label %do.body.191

do.body.191:                                      ; preds = %if.then.190
  %133 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack192 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %133, i32 0, i32 1
  %134 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack192, align 8, !tbaa !304
  %rc_mask193 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %134, i32 0, i32 0
  %135 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask193, align 8, !tbaa !314
  %tobool194 = icmp ne %struct.pdf14_rcmask_s* %135, null
  br i1 %tobool194, label %if.then.195, label %if.end.231

if.then.195:                                      ; preds = %do.body.191
  br label %do.body.196

do.body.196:                                      ; preds = %if.then.195
  br label %do.body.197

do.body.197:                                      ; preds = %do.body.196
  br label %do.cond.198

do.cond.198:                                      ; preds = %do.body.197
  br label %do.end.199

do.end.199:                                       ; preds = %do.cond.198
  %136 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack200 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %136, i32 0, i32 1
  %137 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack200, align 8, !tbaa !304
  %rc_mask201 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %137, i32 0, i32 0
  %138 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask201, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %138, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %139 = load i64, i64* %ref_count, align 8, !tbaa !316
  %add = add nsw i64 %139, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !316
  br label %do.cond.202

do.cond.202:                                      ; preds = %do.end.199
  br label %do.end.203

do.end.203:                                       ; preds = %do.cond.202
  %140 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack204 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %140, i32 0, i32 1
  %141 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack204, align 8, !tbaa !304
  %rc_mask205 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %141, i32 0, i32 0
  %142 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask205, align 8, !tbaa !314
  %rc206 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %142, i32 0, i32 1
  %ref_count207 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc206, i32 0, i32 0
  %143 = load i64, i64* %ref_count207, align 8, !tbaa !316
  %tobool208 = icmp ne i64 %143, 0
  br i1 %tobool208, label %if.else.226, label %if.then.209

if.then.209:                                      ; preds = %do.end.203
  br label %do.body.210

do.body.210:                                      ; preds = %if.then.209
  br label %do.body.211

do.body.211:                                      ; preds = %do.body.210
  br label %do.cond.212

do.cond.212:                                      ; preds = %do.body.211
  br label %do.end.213

do.end.213:                                       ; preds = %do.cond.212
  %144 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack214 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %144, i32 0, i32 1
  %145 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack214, align 8, !tbaa !304
  %rc_mask215 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %145, i32 0, i32 0
  %146 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask215, align 8, !tbaa !314
  %rc216 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %146, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc216, i32 0, i32 2
  %147 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  %148 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack217 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %148, i32 0, i32 1
  %149 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack217, align 8, !tbaa !304
  %rc_mask218 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %149, i32 0, i32 0
  %150 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask218, align 8, !tbaa !314
  %rc219 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %150, i32 0, i32 1
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc219, i32 0, i32 1
  %151 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !320
  %152 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack220 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %152, i32 0, i32 1
  %153 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack220, align 8, !tbaa !304
  %rc_mask221 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %153, i32 0, i32 0
  %154 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask221, align 8, !tbaa !314
  %155 = bitcast %struct.pdf14_rcmask_s* %154 to i8*
  call void %147(%struct.gs_memory_s* %151, i8* %155, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i32 0, i32 0)) #7
  br label %do.cond.222

do.cond.222:                                      ; preds = %do.end.213
  br label %do.end.223

do.end.223:                                       ; preds = %do.cond.222
  %156 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack224 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %156, i32 0, i32 1
  %157 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack224, align 8, !tbaa !304
  %rc_mask225 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %157, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask225, align 8, !tbaa !314
  br label %if.end.230

if.else.226:                                      ; preds = %do.end.203
  br label %do.body.227

do.body.227:                                      ; preds = %if.else.226
  br label %do.cond.228

do.cond.228:                                      ; preds = %do.body.227
  br label %do.end.229

do.end.229:                                       ; preds = %do.cond.228
  br label %if.end.230

if.end.230:                                       ; preds = %do.end.229, %do.end.223
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.230, %do.body.191
  br label %do.cond.232

do.cond.232:                                      ; preds = %if.end.231
  br label %do.end.233

do.end.233:                                       ; preds = %do.cond.232
  %158 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack234 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %158, i32 0, i32 1
  %159 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack234, align 8, !tbaa !304
  %rc_mask235 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %159, i32 0, i32 0
  %160 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask235, align 8, !tbaa !314
  %cmp236 = icmp eq %struct.pdf14_rcmask_s* %160, null
  br i1 %cmp236, label %if.then.237, label %if.end.241

if.then.237:                                      ; preds = %do.end.233
  %161 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory238 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %161, i32 0, i32 2
  %162 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory238, align 8, !tbaa !283
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %162, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %163 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %164 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory239 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %164, i32 0, i32 2
  %165 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory239, align 8, !tbaa !283
  %166 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack240 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %166, i32 0, i32 1
  %167 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack240, align 8, !tbaa !304
  %168 = bitcast %struct.pdf14_mask_s* %167 to i8*
  call void %163(%struct.gs_memory_s* %165, i8* %168, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i32 0, i32 0)) #7
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.237, %do.end.233
  %169 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack242 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %169, i32 0, i32 1
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack242, align 8, !tbaa !304
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.241, %cond.end.187
  %170 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !1
  %171 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack244 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %171, i32 0, i32 1
  store %struct.pdf14_mask_s* %170, %struct.pdf14_mask_s** %mask_stack244, align 8, !tbaa !304
  %172 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack245 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %172, i32 0, i32 18
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack245, align 8, !tbaa !308
  %173 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %idle = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %173, i32 0, i32 19
  %174 = load i32, i32* %idle, align 4, !tbaa !333
  %tobool246 = icmp ne i32 %174, 0
  br i1 %tobool246, label %if.then.247, label %if.end.248

if.then.247:                                      ; preds = %if.end.243
  br label %exit

if.end.248:                                       ; preds = %if.end.243
  %175 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %cmp249 = icmp ne %struct.pdf14_buf_s* %175, null
  br i1 %cmp249, label %land.lhs.true, label %if.end.255

land.lhs.true:                                    ; preds = %if.end.248
  %176 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %176, i32 0, i32 15
  %177 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp250 = icmp eq i8* %177, null
  br i1 %cmp250, label %land.lhs.true.251, label %if.end.255

land.lhs.true.251:                                ; preds = %land.lhs.true
  %178 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %178, i32 0, i32 4
  %179 = load i8, i8* %alpha, align 1, !tbaa !398
  %conv = zext i8 %179 to i32
  %cmp252 = icmp eq i32 %conv, 255
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %land.lhs.true.251
  br label %exit

if.end.255:                                       ; preds = %land.lhs.true.251, %land.lhs.true, %if.end.248
  %180 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %180, i32 0, i32 22
  %181 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %181, i32 0, i32 15
  %182 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %cmp256 = icmp ne %struct.cmm_profile_s* %182, null
  br i1 %cmp256, label %if.then.258, label %if.else.264

if.then.258:                                      ; preds = %if.end.255
  %183 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs259 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %183, i32 0, i32 22
  %184 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs259, align 8, !tbaa !260
  %icc_profile260 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %184, i32 0, i32 15
  %185 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile260, align 8, !tbaa !281
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %185, i32 0, i32 7
  %186 = load i64, i64* %hashcode, align 8, !tbaa !121
  %187 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %curr_icc_profile.addr, align 8, !tbaa !1
  %hashcode261 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %187, i32 0, i32 7
  %188 = load i64, i64* %hashcode261, align 8, !tbaa !121
  %cmp262 = icmp ne i64 %186, %188
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %icc_match, align 4, !tbaa !5
  br label %if.end.265

if.else.264:                                      ; preds = %if.end.255
  store i32 0, i32* %icc_match, align 4, !tbaa !5
  br label %if.end.265

if.end.265:                                       ; preds = %if.else.264, %if.then.258
  %189 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs266 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %189, i32 0, i32 22
  %190 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs266, align 8, !tbaa !260
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %190, i32 0, i32 9
  %191 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %cmp267 = icmp ne %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %191, null
  br i1 %cmp267, label %land.lhs.true.269, label %lor.lhs.false

land.lhs.true.269:                                ; preds = %if.end.265
  %192 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs270 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %192, i32 0, i32 22
  %193 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs270, align 8, !tbaa !260
  %num_components = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %193, i32 0, i32 0
  %194 = load i32, i32* %num_components, align 4, !tbaa !269
  %195 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %cmp271 = icmp ne i32 %194, %195
  br i1 %cmp271, label %if.then.274, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.269, %if.end.265
  %196 = load i32, i32* %icc_match, align 4, !tbaa !5
  %tobool273 = icmp ne i32 %196, 0
  br i1 %tobool273, label %if.then.274, label %if.else.396

if.then.274:                                      ; preds = %lor.lhs.false, %land.lhs.true.269
  %197 = load i32, i32* %x0, align 4, !tbaa !5
  %198 = load i32, i32* %x1, align 4, !tbaa !5
  %cmp275 = icmp slt i32 %197, %198
  br i1 %cmp275, label %land.lhs.true.277, label %if.end.395

land.lhs.true.277:                                ; preds = %if.then.274
  %199 = load i32, i32* %y0, align 4, !tbaa !5
  %200 = load i32, i32* %y1, align 4, !tbaa !5
  %cmp278 = icmp slt i32 %199, %200
  br i1 %cmp278, label %if.then.280, label %if.end.395

if.then.280:                                      ; preds = %land.lhs.true.277
  %201 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_planes = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %201, i32 0, i32 14
  %202 = load i32, i32* %n_planes, align 4, !tbaa !328
  %203 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %202, %203
  store i32 %sub, i32* %num_noncolor_planes, align 4, !tbaa !5
  %204 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs281 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %204, i32 0, i32 22
  %205 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs281, align 8, !tbaa !260
  %num_components282 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %205, i32 0, i32 0
  %206 = load i32, i32* %num_components282, align 4, !tbaa !269
  store i32 %206, i32* %num_newcolor_planes, align 4, !tbaa !5
  %207 = load i32, i32* %num_noncolor_planes, align 4, !tbaa !5
  %208 = load i32, i32* %num_newcolor_planes, align 4, !tbaa !5
  %add283 = add nsw i32 %207, %208
  store i32 %add283, i32* %new_num_planes, align 4, !tbaa !5
  %209 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs284 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %209, i32 0, i32 22
  %210 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs284, align 8, !tbaa !260
  %icc_profile285 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %210, i32 0, i32 15
  %211 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile285, align 8, !tbaa !281
  %cmp286 = icmp ne %struct.cmm_profile_s* %211, null
  br i1 %cmp286, label %land.lhs.true.288, label %if.end.363

land.lhs.true.288:                                ; preds = %if.then.280
  %212 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %curr_icc_profile.addr, align 8, !tbaa !1
  %cmp289 = icmp ne %struct.cmm_profile_s* %212, null
  br i1 %cmp289, label %if.then.291, label %if.end.363

if.then.291:                                      ; preds = %land.lhs.true.288
  %black_point_comp = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 1
  store i32 1, i32* %black_point_comp, align 4, !tbaa !401
  %graphics_type_tag = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 3
  store i32 2, i32* %graphics_type_tag, align 4, !tbaa !402
  %override_icc = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 5
  store i32 0, i32* %override_icc, align 4, !tbaa !403
  %preserve_black = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 2
  store i32 8, i32* %preserve_black, align 4, !tbaa !404
  %rendering_intent = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 0
  store i32 0, i32* %rendering_intent, align 4, !tbaa !405
  %cmm = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 4
  store i32 0, i32* %cmm, align 4, !tbaa !406
  %213 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %214 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %215 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %curr_icc_profile.addr, align 8, !tbaa !1
  %216 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs292 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %216, i32 0, i32 22
  %217 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs292, align 8, !tbaa !260
  %icc_profile293 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %217, i32 0, i32 15
  %218 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile293, align 8, !tbaa !281
  %219 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory294 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %219, i32 0, i32 1
  %220 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory294, align 8, !tbaa !165
  %call = call %struct.gsicc_link_s* @gsicc_get_link_profile(%struct.gs_imager_state_s* %213, %struct.gx_device_s* %214, %struct.cmm_profile_s* %215, %struct.cmm_profile_s* %218, %struct.gsicc_rendering_param_s* %rendering_params, %struct.gs_memory_s* %220, i32 0) #7
  store %struct.gsicc_link_s* %call, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %221 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %cmp295 = icmp ne %struct.gsicc_link_s* %221, null
  br i1 %cmp295, label %if.then.297, label %if.end.362

if.then.297:                                      ; preds = %if.then.291
  store i32 0, i32* %nonicc_conversion, align 4, !tbaa !5
  %222 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %is_identity = getelementptr inbounds %struct.gsicc_link_s, %struct.gsicc_link_s* %222, i32 0, i32 10
  %223 = load i32, i32* %is_identity, align 4, !tbaa !407
  %tobool298 = icmp ne i32 %223, 0
  br i1 %tobool298, label %if.end.348, label %if.then.299

if.then.299:                                      ; preds = %if.then.297
  %224 = load i32, i32* %num_newcolor_planes, align 4, !tbaa !5
  %225 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %cmp300 = icmp ne i32 %224, %225
  br i1 %cmp300, label %if.then.302, label %if.else.322

if.then.302:                                      ; preds = %if.then.299
  %226 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory303 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %226, i32 0, i32 2
  %227 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory303, align 8, !tbaa !283
  %procs304 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %227, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs304, i32 0, i32 7
  %228 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %229 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory305 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %229, i32 0, i32 2
  %230 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory305, align 8, !tbaa !283
  %231 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %231, i32 0, i32 12
  %232 = load i32, i32* %planestride, align 4, !tbaa !58
  %233 = load i32, i32* %new_num_planes, align 4, !tbaa !5
  %mul = mul nsw i32 %232, %233
  %call306 = call i8* %228(%struct.gs_memory_s* %230, i32 %mul, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)) #7
  store i8* %call306, i8** %new_data_buf, align 8, !tbaa !1
  %234 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %cmp307 = icmp eq i8* %234, null
  br i1 %cmp307, label %if.then.309, label %if.end.310

if.then.309:                                      ; preds = %if.then.302
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.310:                                       ; preds = %if.then.302
  %235 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %236 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride311 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %236, i32 0, i32 12
  %237 = load i32, i32* %planestride311, align 4, !tbaa !58
  %238 = load i32, i32* %num_newcolor_planes, align 4, !tbaa !5
  %mul312 = mul nsw i32 %237, %238
  %idx.ext = sext i32 %mul312 to i64
  %add.ptr = getelementptr inbounds i8, i8* %235, i64 %idx.ext
  %239 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data313 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %239, i32 0, i32 15
  %240 = load i8*, i8** %data313, align 8, !tbaa !36
  %241 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride314 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %241, i32 0, i32 12
  %242 = load i32, i32* %planestride314, align 4, !tbaa !58
  %243 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %mul315 = mul nsw i32 %242, %243
  %idx.ext316 = sext i32 %mul315 to i64
  %add.ptr317 = getelementptr inbounds i8, i8* %240, i64 %idx.ext316
  %244 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride318 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %244, i32 0, i32 12
  %245 = load i32, i32* %planestride318, align 4, !tbaa !58
  %246 = load i32, i32* %num_noncolor_planes, align 4, !tbaa !5
  %mul319 = mul nsw i32 %245, %246
  %conv320 = sext i32 %mul319 to i64
  %call321 = call i8* @memcpy(i8* %add.ptr, i8* %add.ptr317, i64 %conv320) #8
  br label %if.end.324

if.else.322:                                      ; preds = %if.then.299
  %247 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data323 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %247, i32 0, i32 15
  %248 = load i8*, i8** %data323, align 8, !tbaa !36
  store i8* %248, i8** %new_data_buf, align 8, !tbaa !1
  br label %if.end.324

if.end.324:                                       ; preds = %if.else.322, %if.end.310
  %249 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect325 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %249, i32 0, i32 10
  %q326 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect325, i32 0, i32 1
  %y327 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q326, i32 0, i32 1
  %250 = load i32, i32* %y327, align 4, !tbaa !45
  %251 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect328 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %251, i32 0, i32 10
  %p329 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect328, i32 0, i32 0
  %y330 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p329, i32 0, i32 1
  %252 = load i32, i32* %y330, align 4, !tbaa !46
  %sub331 = sub nsw i32 %250, %252
  store i32 %sub331, i32* %num_rows, align 4, !tbaa !5
  %253 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect332 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %253, i32 0, i32 10
  %q333 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect332, i32 0, i32 1
  %x334 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q333, i32 0, i32 0
  %254 = load i32, i32* %x334, align 4, !tbaa !42
  %255 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect335 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %255, i32 0, i32 10
  %p336 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect335, i32 0, i32 0
  %x337 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p336, i32 0, i32 0
  %256 = load i32, i32* %x337, align 4, !tbaa !43
  %sub338 = sub nsw i32 %254, %256
  store i32 %sub338, i32* %num_cols, align 4, !tbaa !5
  %257 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %conv339 = trunc i32 %257 to i8
  %258 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride340 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %258, i32 0, i32 12
  %259 = load i32, i32* %planestride340, align 4, !tbaa !58
  %260 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %260, i32 0, i32 11
  %261 = load i32, i32* %rowstride, align 4, !tbaa !59
  %262 = load i32, i32* %num_rows, align 4, !tbaa !5
  %263 = load i32, i32* %num_cols, align 4, !tbaa !5
  call void @gsicc_init_buffer(%struct.gsicc_bufferdesc_s* %input_buff_desc, i8 zeroext %conv339, i8 zeroext 1, i32 0, i32 0, i32 1, i32 %259, i32 %261, i32 %262, i32 %263) #7
  %264 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs341 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %264, i32 0, i32 22
  %265 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs341, align 8, !tbaa !260
  %num_components342 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %265, i32 0, i32 0
  %266 = load i32, i32* %num_components342, align 4, !tbaa !269
  %conv343 = trunc i32 %266 to i8
  %267 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride344 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %267, i32 0, i32 12
  %268 = load i32, i32* %planestride344, align 4, !tbaa !58
  %269 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride345 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %269, i32 0, i32 11
  %270 = load i32, i32* %rowstride345, align 4, !tbaa !59
  %271 = load i32, i32* %num_rows, align 4, !tbaa !5
  %272 = load i32, i32* %num_cols, align 4, !tbaa !5
  call void @gsicc_init_buffer(%struct.gsicc_bufferdesc_s* %output_buff_desc, i8 zeroext %conv343, i8 zeroext 1, i32 0, i32 0, i32 1, i32 %268, i32 %270, i32 %271, i32 %272) #7
  %273 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %procs346 = getelementptr inbounds %struct.gsicc_link_s, %struct.gsicc_link_s* %273, i32 0, i32 1
  %map_buffer = getelementptr inbounds %struct.gscms_procs_s, %struct.gscms_procs_s* %procs346, i32 0, i32 0
  %274 = load void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)*, void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)** %map_buffer, align 8, !tbaa !411
  %275 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %276 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %277 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data347 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %277, i32 0, i32 15
  %278 = load i8*, i8** %data347, align 8, !tbaa !36
  %279 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  call void %274(%struct.gx_device_s* %275, %struct.gsicc_link_s* %276, %struct.gsicc_bufferdesc_s* %input_buff_desc, %struct.gsicc_bufferdesc_s* %output_buff_desc, i8* %278, i8* %279) #7
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.324, %if.then.297
  %280 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  call void @gsicc_release_link(%struct.gsicc_link_s* %280) #7
  %281 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %is_identity349 = getelementptr inbounds %struct.gsicc_link_s, %struct.gsicc_link_s* %281, i32 0, i32 10
  %282 = load i32, i32* %is_identity349, align 4, !tbaa !407
  %tobool350 = icmp ne i32 %282, 0
  br i1 %tobool350, label %if.end.361, label %land.lhs.true.351

land.lhs.true.351:                                ; preds = %if.end.348
  %283 = load i32, i32* %num_newcolor_planes, align 4, !tbaa !5
  %284 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %cmp352 = icmp ne i32 %283, %284
  br i1 %cmp352, label %if.then.354, label %if.end.361

if.then.354:                                      ; preds = %land.lhs.true.351
  %285 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory355 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %285, i32 0, i32 2
  %286 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory355, align 8, !tbaa !283
  %procs356 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %286, i32 0, i32 1
  %free_object357 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs356, i32 0, i32 2
  %287 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object357, align 8, !tbaa !166
  %288 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory358 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %288, i32 0, i32 2
  %289 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory358, align 8, !tbaa !283
  %290 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data359 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %290, i32 0, i32 15
  %291 = load i8*, i8** %data359, align 8, !tbaa !36
  call void %287(%struct.gs_memory_s* %289, i8* %291, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %292 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %293 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data360 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %293, i32 0, i32 15
  store i8* %292, i8** %data360, align 8, !tbaa !36
  br label %if.end.361

if.end.361:                                       ; preds = %if.then.354, %land.lhs.true.351, %if.end.348
  br label %if.end.362

if.end.362:                                       ; preds = %if.end.361, %if.then.291
  br label %if.end.363

if.end.363:                                       ; preds = %if.end.362, %land.lhs.true.288, %if.then.280
  %294 = load i32, i32* %nonicc_conversion, align 4, !tbaa !5
  %tobool364 = icmp ne i32 %294, 0
  br i1 %tobool364, label %if.then.365, label %if.end.387

if.then.365:                                      ; preds = %if.end.363
  %295 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory366 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %295, i32 0, i32 2
  %296 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory366, align 8, !tbaa !283
  %procs367 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %296, i32 0, i32 1
  %alloc_bytes368 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs367, i32 0, i32 7
  %297 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes368, align 8, !tbaa !53
  %298 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory369 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %298, i32 0, i32 2
  %299 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory369, align 8, !tbaa !283
  %300 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride370 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %300, i32 0, i32 12
  %301 = load i32, i32* %planestride370, align 4, !tbaa !58
  %302 = load i32, i32* %new_num_planes, align 4, !tbaa !5
  %mul371 = mul nsw i32 %301, %302
  %call372 = call i8* %297(%struct.gs_memory_s* %299, i32 %mul371, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)) #7
  store i8* %call372, i8** %new_data_buf, align 8, !tbaa !1
  %303 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %cmp373 = icmp eq i8* %303, null
  br i1 %cmp373, label %if.then.375, label %if.end.376

if.then.375:                                      ; preds = %if.then.365
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.376:                                       ; preds = %if.then.365
  %304 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data377 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %304, i32 0, i32 15
  %305 = load i8*, i8** %data377, align 8, !tbaa !36
  %306 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride378 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %306, i32 0, i32 11
  %307 = load i32, i32* %rowstride378, align 4, !tbaa !59
  %308 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride379 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %308, i32 0, i32 12
  %309 = load i32, i32* %planestride379, align 4, !tbaa !58
  %310 = load i32, i32* %curr_num_color_comp.addr, align 4, !tbaa !5
  %311 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect380 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %311, i32 0, i32 10
  %312 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %313 = load i32, i32* %num_newcolor_planes, align 4, !tbaa !5
  %314 = load i32, i32* %num_noncolor_planes, align 4, !tbaa !5
  %315 = bitcast %struct.gs_int_rect_s* %rect380 to { i64, i64 }*
  %316 = getelementptr { i64, i64 }, { i64, i64 }* %315, i32 0, i32 0
  %317 = load i64, i64* %316, align 1
  %318 = getelementptr { i64, i64 }, { i64, i64 }* %315, i32 0, i32 1
  %319 = load i64, i64* %318, align 1
  call void @gs_transform_color_buffer_generic(i8* %305, i32 %307, i32 %309, i32 %310, i64 %317, i64 %319, i8* %312, i32 %313, i32 %314) #7
  %320 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory381 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %320, i32 0, i32 2
  %321 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory381, align 8, !tbaa !283
  %procs382 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %321, i32 0, i32 1
  %free_object383 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs382, i32 0, i32 2
  %322 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object383, align 8, !tbaa !166
  %323 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory384 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %323, i32 0, i32 2
  %324 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory384, align 8, !tbaa !283
  %325 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data385 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %325, i32 0, i32 15
  %326 = load i8*, i8** %data385, align 8, !tbaa !36
  call void %322(%struct.gs_memory_s* %324, i8* %326, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0)) #7
  %327 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %328 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data386 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %328, i32 0, i32 15
  store i8* %327, i8** %data386, align 8, !tbaa !36
  br label %if.end.387

if.end.387:                                       ; preds = %if.end.376, %if.end.363
  %329 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %329, i32 0, i32 13
  %330 = load i32, i32* %n_chan, align 4, !tbaa !38
  %331 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_chan388 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %331, i32 0, i32 13
  store i32 %330, i32* %n_chan388, align 4, !tbaa !38
  %332 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %n_planes389 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %332, i32 0, i32 14
  %333 = load i32, i32* %n_planes389, align 4, !tbaa !328
  %334 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_planes390 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %334, i32 0, i32 14
  store i32 %333, i32* %n_planes390, align 4, !tbaa !328
  %335 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %336 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %337 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %338 = load i32, i32* %x0, align 4, !tbaa !5
  %339 = load i32, i32* %x1, align 4, !tbaa !5
  %340 = load i32, i32* %y0, align 4, !tbaa !5
  %341 = load i32, i32* %y1, align 4, !tbaa !5
  %342 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %n_chan391 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %342, i32 0, i32 13
  %343 = load i32, i32* %n_chan391, align 4, !tbaa !38
  %344 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs392 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %344, i32 0, i32 22
  %345 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs392, align 8, !tbaa !260
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %345, i32 0, i32 1
  %346 = load i32, i32* %isadditive, align 4, !tbaa !271
  %347 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %parent_color_info_procs393 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %347, i32 0, i32 22
  %348 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs393, align 8, !tbaa !260
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %348, i32 0, i32 14
  %349 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %350 = load i64, i64* %drawn_comps, align 8, !tbaa !68
  %351 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory394 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %351, i32 0, i32 2
  %352 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory394, align 8, !tbaa !283
  call void @pdf14_compose_group(%struct.pdf14_buf_s* %335, %struct.pdf14_buf_s* %336, %struct.pdf14_buf_s* %337, i32 %338, i32 %339, i32 %340, i32 %341, i32 %343, i32 %346, %struct.pdf14_nonseparable_blending_procs_s* %349, i32 0, i64 %350, i32 0, %struct.gs_memory_s* %352) #7
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.387, %land.lhs.true.277, %if.then.274
  br label %if.end.406

if.else.396:                                      ; preds = %lor.lhs.false
  %353 = load i32, i32* %x0, align 4, !tbaa !5
  %354 = load i32, i32* %x1, align 4, !tbaa !5
  %cmp397 = icmp slt i32 %353, %354
  br i1 %cmp397, label %land.lhs.true.399, label %if.end.405

land.lhs.true.399:                                ; preds = %if.else.396
  %355 = load i32, i32* %y0, align 4, !tbaa !5
  %356 = load i32, i32* %y1, align 4, !tbaa !5
  %cmp400 = icmp slt i32 %355, %356
  br i1 %cmp400, label %if.then.402, label %if.end.405

if.then.402:                                      ; preds = %land.lhs.true.399
  %357 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %358 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %359 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %360 = load i32, i32* %x0, align 4, !tbaa !5
  %361 = load i32, i32* %x1, align 4, !tbaa !5
  %362 = load i32, i32* %y0, align 4, !tbaa !5
  %363 = load i32, i32* %y1, align 4, !tbaa !5
  %364 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %n_chan403 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %364, i32 0, i32 13
  %365 = load i32, i32* %n_chan403, align 4, !tbaa !38
  %366 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %366, i32 0, i32 4
  %367 = load i32, i32* %additive, align 4, !tbaa !272
  %368 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %pblend_procs.addr, align 8, !tbaa !1
  %369 = load i32, i32* %overprint, align 4, !tbaa !5
  %370 = load i64, i64* %drawn_comps, align 8, !tbaa !68
  %371 = load i32, i32* %blendspot, align 4, !tbaa !5
  %372 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory404 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %372, i32 0, i32 2
  %373 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory404, align 8, !tbaa !283
  call void @pdf14_compose_group(%struct.pdf14_buf_s* %357, %struct.pdf14_buf_s* %358, %struct.pdf14_buf_s* %359, i32 %360, i32 %361, i32 %362, i32 %363, i32 %365, i32 %367, %struct.pdf14_nonseparable_blending_procs_s* %368, i32 %369, i64 %370, i32 %371, %struct.gs_memory_s* %373) #7
  br label %if.end.405

if.end.405:                                       ; preds = %if.then.402, %land.lhs.true.399, %if.else.396
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405, %if.end.395
  br label %exit

exit:                                             ; preds = %if.end.406, %if.then.254, %if.then.247
  %374 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %nos, align 8, !tbaa !1
  %375 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack407 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %375, i32 0, i32 0
  store %struct.pdf14_buf_s* %374, %struct.pdf14_buf_s** %stack407, align 8, !tbaa !23
  %376 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_depth = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %376, i32 0, i32 6
  %377 = load i32, i32* %smask_depth, align 4, !tbaa !322
  %cmp408 = icmp sgt i32 %377, 0
  br i1 %cmp408, label %land.lhs.true.410, label %if.end.414

land.lhs.true.410:                                ; preds = %exit
  %378 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %maskbuf, align 8, !tbaa !1
  %cmp411 = icmp ne %struct.pdf14_buf_s* %378, null
  br i1 %cmp411, label %if.then.413, label %if.end.414

if.then.413:                                      ; preds = %land.lhs.true.410
  %379 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_blend = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %379, i32 0, i32 7
  store i32 1, i32* %smask_blend, align 4, !tbaa !330
  br label %if.end.414

if.end.414:                                       ; preds = %if.then.413, %land.lhs.true.410, %exit
  br label %do.body.415

do.body.415:                                      ; preds = %if.end.414
  br label %do.cond.416

do.cond.416:                                      ; preds = %do.body.415
  br label %do.end.417

do.end.417:                                       ; preds = %do.cond.416
  %380 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %381 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory418 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %381, i32 0, i32 2
  %382 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory418, align 8, !tbaa !283
  call void @pdf14_buf_free(%struct.pdf14_buf_s* %380, %struct.gs_memory_s* %382) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.417, %if.then.375, %if.then.309, %if.then.6
  %383 = bitcast i32* %nonicc_conversion to i8*
  call void @llvm.lifetime.end(i64 4, i8* %383) #2
  %384 = bitcast i32* %blendspot to i8*
  call void @llvm.lifetime.end(i64 4, i8* %384) #2
  %385 = bitcast i64* %drawn_comps to i8*
  call void @llvm.lifetime.end(i64 8, i8* %385) #2
  %386 = bitcast i32* %overprint to i8*
  call void @llvm.lifetime.end(i64 4, i8* %386) #2
  %387 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %387) #2
  %388 = bitcast %struct.gsicc_bufferdesc_s* %output_buff_desc to i8*
  call void @llvm.lifetime.end(i64 36, i8* %388) #2
  %389 = bitcast %struct.gsicc_bufferdesc_s* %input_buff_desc to i8*
  call void @llvm.lifetime.end(i64 36, i8* %389) #2
  %390 = bitcast %struct.gsicc_link_s** %icc_link to i8*
  call void @llvm.lifetime.end(i64 8, i8* %390) #2
  %391 = bitcast %struct.gsicc_rendering_param_s* %rendering_params to i8*
  call void @llvm.lifetime.end(i64 24, i8* %391) #2
  %392 = bitcast i32* %icc_match to i8*
  call void @llvm.lifetime.end(i64 4, i8* %392) #2
  %393 = bitcast i32* %num_newcolor_planes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %393) #2
  %394 = bitcast i32* %num_rows to i8*
  call void @llvm.lifetime.end(i64 4, i8* %394) #2
  %395 = bitcast i32* %num_cols to i8*
  call void @llvm.lifetime.end(i64 4, i8* %395) #2
  %396 = bitcast i32* %new_num_planes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %396) #2
  %397 = bitcast i32* %num_noncolor_planes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %397) #2
  %398 = bitcast i8** %new_data_buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %398) #2
  %399 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %399) #2
  %400 = bitcast i32* %y0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %400) #2
  %401 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %401) #2
  %402 = bitcast i32* %x0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %402) #2
  %403 = bitcast %struct.pdf14_buf_s** %maskbuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %403) #2
  %404 = bitcast %struct.pdf14_mask_s** %mask_stack to i8*
  call void @llvm.lifetime.end(i64 8, i8* %404) #2
  %405 = bitcast %struct.pdf14_buf_s** %nos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %405) #2
  %406 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %406) #2
  %407 = load i32, i32* %retval
  ret i32 %407
}

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_buf_s* @pdf14_find_backdrop_buf(%struct.pdf14_ctx_s* %ctx) #1 {
entry:
  %retval = alloca %struct.pdf14_buf_s*, align 8
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %1, i32 0, i32 0
  %2 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %2, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %while.cond

while.cond:                                       ; preds = %if.end.34, %entry
  %3 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp = icmp ne %struct.pdf14_buf_s* %3, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %4, i32 0, i32 2
  %5 = load i32, i32* %isolated, align 4, !tbaa !331
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %while.body
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %6, i32 0, i32 3
  %7 = load i32, i32* %knockout, align 4, !tbaa !198
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %8, i32 0, i32 2
  %9 = load i32, i32* %isolated2, align 4, !tbaa !331
  %tobool3 = icmp ne i32 %9, 0
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %land.lhs.true
  %10 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %10, i32 0, i32 0
  %11 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %11, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %12 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved6 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %12, i32 0, i32 0
  %13 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved6, align 8, !tbaa !305
  %cmp7 = icmp ne %struct.pdf14_buf_s* %13, null
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.17

land.lhs.true.8:                                  ; preds = %if.end.5
  %14 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved9 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %14, i32 0, i32 0
  %15 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved9, align 8, !tbaa !305
  %knockout10 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %15, i32 0, i32 3
  %16 = load i32, i32* %knockout10, align 4, !tbaa !198
  %tobool11 = icmp ne i32 %16, 0
  br i1 %tobool11, label %land.lhs.true.12, label %if.end.17

land.lhs.true.12:                                 ; preds = %land.lhs.true.8
  %17 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved13 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %17, i32 0, i32 0
  %18 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved13, align 8, !tbaa !305
  %isolated14 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %18, i32 0, i32 2
  %19 = load i32, i32* %isolated14, align 4, !tbaa !331
  %tobool15 = icmp ne i32 %19, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %land.lhs.true.12
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.17:                                        ; preds = %land.lhs.true.12, %land.lhs.true.8, %if.end.5
  %20 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved18 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %20, i32 0, i32 0
  %21 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved18, align 8, !tbaa !305
  %cmp19 = icmp ne %struct.pdf14_buf_s* %21, null
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.29

land.lhs.true.20:                                 ; preds = %if.end.17
  %22 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved21 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %22, i32 0, i32 0
  %23 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved21, align 8, !tbaa !305
  %knockout22 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %23, i32 0, i32 3
  %24 = load i32, i32* %knockout22, align 4, !tbaa !198
  %tobool23 = icmp ne i32 %24, 0
  br i1 %tobool23, label %land.lhs.true.24, label %if.end.29

land.lhs.true.24:                                 ; preds = %land.lhs.true.20
  %25 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved25 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %25, i32 0, i32 0
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved25, align 8, !tbaa !305
  %isolated26 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 2
  %27 = load i32, i32* %isolated26, align 4, !tbaa !331
  %tobool27 = icmp ne i32 %27, 0
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %land.lhs.true.24
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.29:                                        ; preds = %land.lhs.true.24, %land.lhs.true.20, %if.end.17
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout30 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %28, i32 0, i32 3
  %29 = load i32, i32* %knockout30, align 4, !tbaa !198
  %tobool31 = icmp ne i32 %29, 0
  br i1 %tobool31, label %if.end.34, label %if.then.32

if.then.32:                                       ; preds = %if.end.29
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved33 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 0
  %31 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved33, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %31, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %if.end.29
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved35 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 0
  %33 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved35, align 8, !tbaa !305
  store %struct.pdf14_buf_s* %33, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then.32, %if.then.28, %if.then.16, %if.then.4, %if.then
  %34 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %retval
  ret %struct.pdf14_buf_s* %35
}

declare void @pdf14_preserve_backdrop(%struct.pdf14_buf_s*, %struct.pdf14_buf_s*, i32) #0

declare i32 @pdf14_preserve_backdrop_cm(%struct.pdf14_buf_s*, %struct.cmm_profile_s*, %struct.pdf14_buf_s*, %struct.cmm_profile_s*, %struct.gs_memory_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32) #0

declare i32 @gs_throw_imp(i8*, i8*, i32, i32, i32, i8*, ...) #0

declare %struct.gsicc_link_s* @gsicc_get_link_profile(%struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gsicc_rendering_param_s*, %struct.gs_memory_s*, i32) #0

declare void @gsicc_init_buffer(%struct.gsicc_bufferdesc_s*, i8 zeroext, i8 zeroext, i32, i32, i32, i32, i32, i32, i32) #0

declare void @gsicc_release_link(%struct.gsicc_link_s*) #0

declare void @gs_transform_color_buffer_generic(i8*, i32, i32, i32, i64, i64, i8*, i32, i32) #0

declare void @pdf14_compose_group(%struct.pdf14_buf_s*, %struct.pdf14_buf_s*, %struct.pdf14_buf_s*, i32, i32, i32, i32, i32, i32, %struct.pdf14_nonseparable_blending_procs_s*, i32, i64, i32, %struct.gs_memory_s*) #0

declare i32 @gx_default_stroke_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #0

declare void @gx_set_pattern_procs_trans(%struct.gx_device_color_s*) #0

declare i32 @gx_default_begin_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_patt_trans_image_fill(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_matrix_s* %pmat, %struct.gs_image_common_s* %pic, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gx_image_enum_common_s** %pinfo) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pic.addr = alloca %struct.gs_image_common_s*, align 8
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %pim = alloca %struct.gs_image1_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %ptile = alloca %struct.gx_color_tile_s*, align 8
  %code = alloca i32, align 4
  %group_rect = alloca %struct.gs_int_rect_s, align 4
  %penum = alloca %struct.gx_image_enum_s*, align 8
  %bbox_in = alloca %struct.gs_rect_s, align 8
  %bbox_out = alloca %struct.gs_rect_s, align 8
  %fill_trans_buffer = alloca %struct.gx_pattern_trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  store %struct.gs_image_common_s* %pic, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_image_common_s* %1 to %struct.gs_image1_s*
  store %struct.gs_image1_s* %2, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %5, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast %struct.gs_int_rect_s* %group_rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast %struct.gx_image_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast %struct.gs_rect_s* %bbox_in to i8*
  call void @llvm.lifetime.start(i64 32, i8* %10) #2
  %11 = bitcast %struct.gs_rect_s* %bbox_out to i8*
  call void @llvm.lifetime.start(i64 32, i8* %11) #2
  %12 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %13, i32 0, i32 1
  %pattern = bitcast %union._c* %colors to %struct._pat*
  %p_tile = getelementptr inbounds %struct._pat, %struct._pat* %pattern, i32 0, i32 0
  %14 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %14, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %15 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %15, i32 0, i32 9
  %16 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans, align 8, !tbaa !219
  %n_chan = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %16, i32 0, i32 7
  %17 = load i32, i32* %n_chan, align 4, !tbaa !39
  %sub = sub nsw i32 %17, 1
  %cmp = icmp slt i32 %sub, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %18 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans1 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %18, i32 0, i32 9
  %19 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans1, align 8, !tbaa !219
  %blending_procs = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %19, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs, align 8, !tbaa !221
  %20 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans2 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %20, i32 0, i32 9
  %21 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans2, align 8, !tbaa !219
  %is_additive = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %21, i32 0, i32 12
  store i32 1, i32* %is_additive, align 4, !tbaa !222
  br label %if.end

if.else:                                          ; preds = %entry
  %22 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans3 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %22, i32 0, i32 9
  %23 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans3, align 8, !tbaa !219
  %blending_procs4 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %23, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs4, align 8, !tbaa !221
  %24 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans5 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %24, i32 0, i32 9
  %25 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans5, align 8, !tbaa !219
  %is_additive6 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %25, i32 0, i32 12
  store i32 0, i32* %is_additive6, align 4, !tbaa !222
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %26 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %26, i32 0, i32 12
  %27 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %28 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans7 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %28, i32 0, i32 9
  %29 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans7, align 8, !tbaa !219
  %blending_mode = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %29, i32 0, i32 13
  store i32 %27, i32* %blending_mode, align 4, !tbaa !49
  %30 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %has_overlap = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %30, i32 0, i32 12
  %31 = load i8, i8* %has_overlap, align 1, !tbaa !223
  %tobool = icmp ne i8 %31, 0
  br i1 %tobool, label %if.then.8, label %if.else.10

if.then.8:                                        ; preds = %if.end
  %32 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans9 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %32, i32 0, i32 9
  %33 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans9, align 8, !tbaa !219
  %pat_trans_fill = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %33, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_blend, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill, align 8, !tbaa !224
  br label %if.end.13

if.else.10:                                       ; preds = %if.end
  %34 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans11 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %34, i32 0, i32 9
  %35 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans11, align 8, !tbaa !219
  %pat_trans_fill12 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %35, i32 0, i32 15
  store void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)* @tile_rect_trans_simple, void (i32, i32, i32, i32, i32, i32, %struct.gx_color_tile_s*, %struct.gx_pattern_trans_s*)** %pat_trans_fill12, align 8, !tbaa !224
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.10, %if.then.8
  %36 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @gx_set_pattern_procs_trans(%struct.gx_device_color_s* %36) #7
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %38 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %39 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %40 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %41 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %42 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %43 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %44 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %45 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call = call i32 @gx_default_begin_typed_image(%struct.gx_device_s* %37, %struct.gs_imager_state_s* %38, %struct.gs_matrix_s* %39, %struct.gs_image_common_s* %40, %struct.gs_int_rect_s* %41, %struct.gx_device_color_s* %42, %struct.gx_clip_path_s* %43, %struct.gs_memory_s* %44, %struct.gx_image_enum_common_s** %45) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %46 = load i32, i32* %code, align 4, !tbaa !5
  %cmp14 = icmp slt i32 %46, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  %47 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %47, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.16:                                        ; preds = %if.end.13
  %p = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !412
  %p17 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p17, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8, !tbaa !413
  %48 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Width = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %48, i32 0, i32 2
  %49 = load i32, i32* %Width, align 4, !tbaa !414
  %conv = sitofp i32 %49 to double
  %q = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 1
  %x18 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q, i32 0, i32 0
  store double %conv, double* %x18, align 8, !tbaa !415
  %50 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Height = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %50, i32 0, i32 3
  %51 = load i32, i32* %Height, align 4, !tbaa !416
  %conv19 = sitofp i32 %51 to double
  %q20 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 1
  %y21 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q20, i32 0, i32 1
  store double %conv19, double* %y21, align 8, !tbaa !417
  %52 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %52, i32 0, i32 1
  %call22 = call i32 @gs_bbox_transform_inverse(%struct.gs_rect_s* %bbox_in, %struct.gs_matrix_s* %ImageMatrix, %struct.gs_rect_s* %bbox_out) #7
  store i32 %call22, i32* %code, align 4, !tbaa !5
  %53 = load i32, i32* %code, align 4, !tbaa !5
  %cmp23 = icmp slt i32 %53, 0
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.16
  %54 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %54, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.26:                                        ; preds = %if.end.16
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %56 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call27 = call i32 @compute_group_device_int_rect(%struct.pdf14_device_s* %55, %struct.gs_int_rect_s* %group_rect, %struct.gs_rect_s* %bbox_out, %struct.gs_imager_state_s* %56) #7
  store i32 %call27, i32* %code, align 4, !tbaa !5
  %57 = load i32, i32* %code, align 4, !tbaa !5
  %cmp28 = icmp slt i32 %57, 0
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.26
  %58 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %58, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.31:                                        ; preds = %if.end.26
  %59 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Width32 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %59, i32 0, i32 2
  %60 = load i32, i32* %Width32, align 4, !tbaa !414
  %cmp33 = icmp eq i32 %60, 0
  br i1 %cmp33, label %if.end.50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.31
  %61 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Height35 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %61, i32 0, i32 3
  %62 = load i32, i32* %Height35, align 4, !tbaa !416
  %cmp36 = icmp eq i32 %62, 0
  br i1 %cmp36, label %if.end.50, label %if.then.38

if.then.38:                                       ; preds = %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.then.38
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %63 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %63, i32 0, i32 47
  %64 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %65 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode39 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %65, i32 0, i32 12
  %66 = load i32, i32* %blend_mode39, align 4, !tbaa !257
  %67 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans40 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %67, i32 0, i32 9
  %68 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans40, align 8, !tbaa !219
  %n_chan41 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %68, i32 0, i32 7
  %69 = load i32, i32* %n_chan41, align 4, !tbaa !39
  %sub42 = sub nsw i32 %69, 1
  %70 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %71 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call43 = call i32 @pdf14_push_transparency_group(%struct.pdf14_ctx_s* %64, %struct.gs_int_rect_s* %group_rect, i32 1, i32 0, i8 zeroext -1, i8 zeroext -1, i32 %66, i32 0, i32 0, i32 %sub42, i32 0, %struct.cmm_profile_s* null, %struct.cmm_profile_s* null, %struct.gs_imager_state_s* %70, %struct.gx_device_s* %71) #7
  store i32 %call43, i32* %code, align 4, !tbaa !5
  %72 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %72, i32 0, i32 1
  %73 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %call44 = call %struct.gx_pattern_trans_s* @new_pattern_trans_buff(%struct.gs_memory_s* %73) #7
  store %struct.gx_pattern_trans_s* %call44, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %74 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %75 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %call45 = call i32 @pdf14_get_buffer_information(%struct.gx_device_s* %74, %struct.gx_pattern_trans_s* %75, %struct.gs_memory_s* null, i32 0) #7
  %76 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !1
  %77 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans46 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %77, i32 0, i32 9
  %78 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans46, align 8, !tbaa !219
  %fill_trans_buffer47 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %78, i32 0, i32 3
  store %struct.gx_pattern_trans_s* %76, %struct.gx_pattern_trans_s** %fill_trans_buffer47, align 8, !tbaa !226
  %79 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %80 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %79, align 8, !tbaa !1
  %81 = bitcast %struct.gx_image_enum_common_s* %80 to %struct.gx_image_enum_s*
  store %struct.gx_image_enum_s* %81, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %82 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %render = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %82, i32 0, i32 29
  %83 = load i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %render, align 8, !tbaa !418
  %84 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans48 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %84, i32 0, i32 9
  %85 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans48, align 8, !tbaa !219
  %image_render = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %85, i32 0, i32 16
  store i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)* %83, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %image_render, align 8, !tbaa !430
  %86 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %render49 = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %86, i32 0, i32 29
  store i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)* @pdf14_pattern_trans_render, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %render49, align 8, !tbaa !418
  %87 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %trans_group_popped = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %87, i32 0, i32 16
  store i32 0, i32* %trans_group_popped, align 4, !tbaa !431
  br label %if.end.50

if.end.50:                                        ; preds = %do.end, %lor.lhs.false, %if.end.31
  %88 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %88, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.50, %if.then.30, %if.then.25, %if.then.15
  %89 = bitcast %struct.gx_pattern_trans_s** %fill_trans_buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %89) #2
  %90 = bitcast %struct.gs_rect_s* %bbox_out to i8*
  call void @llvm.lifetime.end(i64 32, i8* %90) #2
  %91 = bitcast %struct.gs_rect_s* %bbox_in to i8*
  call void @llvm.lifetime.end(i64 32, i8* %91) #2
  %92 = bitcast %struct.gx_image_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %92) #2
  %93 = bitcast %struct.gs_int_rect_s* %group_rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %93) #2
  %94 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  %95 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  %96 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %96) #2
  %97 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.end(i64 8, i8* %97) #2
  %98 = load i32, i32* %retval
  ret i32 %98
}

declare i32 @gx_default_begin_typed_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #0

declare i32 @gs_bbox_transform_inverse(%struct.gs_rect_s*, %struct.gs_matrix_s*, %struct.gs_rect_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @compute_group_device_int_rect(%struct.pdf14_device_s* %pdev, %struct.gs_int_rect_s* %rect, %struct.gs_rect_s* %pbbox, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.pdf14_device_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pbbox.addr = alloca %struct.gs_rect_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.pdf14_device_s* %pdev, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  store %struct.gs_rect_s* %pbbox, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %1, i32 0, i32 5
  %2 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %3 = load %struct.gs_rect_s*, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  %4 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_compute_group_device_int_rect(%struct.gs_matrix_s* %2, %struct.gs_rect_s* %3, %struct.gs_int_rect_s* %4) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %5 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %6, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 47
  %8 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %rect1 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %8, i32 0, i32 3
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect1, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %9 = load i32, i32* %x, align 4, !tbaa !432
  %10 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p2 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %10, i32 0, i32 0
  %x3 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p2, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4, !tbaa !34
  %cmp4 = icmp sgt i32 %9, %11
  br i1 %cmp4, label %if.then.5, label %if.end.12

if.then.5:                                        ; preds = %do.body
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 47
  %13 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx6, align 8, !tbaa !7
  %rect7 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %13, i32 0, i32 3
  %p8 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect7, i32 0, i32 0
  %x9 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p8, i32 0, i32 0
  %14 = load i32, i32* %x9, align 4, !tbaa !432
  %15 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p10 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %15, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p10, i32 0, i32 0
  store i32 %14, i32* %x11, align 4, !tbaa !34
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.5, %do.body
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx13 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 47
  %17 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx13, align 8, !tbaa !7
  %rect14 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %17, i32 0, i32 3
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect14, i32 0, i32 1
  %x15 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %18 = load i32, i32* %x15, align 4, !tbaa !433
  %19 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q16 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %19, i32 0, i32 1
  %x17 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q16, i32 0, i32 0
  %20 = load i32, i32* %x17, align 4, !tbaa !31
  %cmp18 = icmp slt i32 %18, %20
  br i1 %cmp18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %if.end.12
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx20 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 47
  %22 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx20, align 8, !tbaa !7
  %rect21 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %22, i32 0, i32 3
  %q22 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect21, i32 0, i32 1
  %x23 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q22, i32 0, i32 0
  %23 = load i32, i32* %x23, align 4, !tbaa !433
  %24 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q24 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %24, i32 0, i32 1
  %x25 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q24, i32 0, i32 0
  store i32 %23, i32* %x25, align 4, !tbaa !31
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.19, %if.end.12
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx27 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 47
  %26 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx27, align 8, !tbaa !7
  %rect28 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %26, i32 0, i32 3
  %p29 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect28, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p29, i32 0, i32 1
  %27 = load i32, i32* %y, align 4, !tbaa !434
  %28 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p30 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %28, i32 0, i32 0
  %y31 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p30, i32 0, i32 1
  %29 = load i32, i32* %y31, align 4, !tbaa !35
  %cmp32 = icmp sgt i32 %27, %29
  br i1 %cmp32, label %if.then.33, label %if.end.40

if.then.33:                                       ; preds = %if.end.26
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx34 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 47
  %31 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx34, align 8, !tbaa !7
  %rect35 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %31, i32 0, i32 3
  %p36 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect35, i32 0, i32 0
  %y37 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p36, i32 0, i32 1
  %32 = load i32, i32* %y37, align 4, !tbaa !434
  %33 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p38 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %33, i32 0, i32 0
  %y39 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p38, i32 0, i32 1
  store i32 %32, i32* %y39, align 4, !tbaa !35
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.33, %if.end.26
  %34 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx41 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %34, i32 0, i32 47
  %35 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx41, align 8, !tbaa !7
  %rect42 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %35, i32 0, i32 3
  %q43 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect42, i32 0, i32 1
  %y44 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q43, i32 0, i32 1
  %36 = load i32, i32* %y44, align 4, !tbaa !435
  %37 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q45 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %37, i32 0, i32 1
  %y46 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q45, i32 0, i32 1
  %38 = load i32, i32* %y46, align 4, !tbaa !33
  %cmp47 = icmp slt i32 %36, %38
  br i1 %cmp47, label %if.then.48, label %if.end.55

if.then.48:                                       ; preds = %if.end.40
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %ctx49 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %39, i32 0, i32 47
  %40 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx49, align 8, !tbaa !7
  %rect50 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %40, i32 0, i32 3
  %q51 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect50, i32 0, i32 1
  %y52 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q51, i32 0, i32 1
  %41 = load i32, i32* %y52, align 4, !tbaa !435
  %42 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q53 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %42, i32 0, i32 1
  %y54 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q53, i32 0, i32 1
  store i32 %41, i32* %y54, align 4, !tbaa !33
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.48, %if.end.40
  br label %do.cond

do.cond:                                          ; preds = %if.end.55
  br label %do.end

do.end:                                           ; preds = %do.cond
  %43 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q56 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %43, i32 0, i32 1
  %x57 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q56, i32 0, i32 0
  %44 = load i32, i32* %x57, align 4, !tbaa !31
  %45 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p58 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %45, i32 0, i32 0
  %x59 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p58, i32 0, i32 0
  %46 = load i32, i32* %x59, align 4, !tbaa !34
  %cmp60 = icmp slt i32 %44, %46
  br i1 %cmp60, label %if.then.61, label %if.end.66

if.then.61:                                       ; preds = %do.end
  %47 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p62 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %47, i32 0, i32 0
  %x63 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p62, i32 0, i32 0
  %48 = load i32, i32* %x63, align 4, !tbaa !34
  %49 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q64 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %49, i32 0, i32 1
  %x65 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q64, i32 0, i32 0
  store i32 %48, i32* %x65, align 4, !tbaa !31
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.61, %do.end
  %50 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q67 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %50, i32 0, i32 1
  %y68 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q67, i32 0, i32 1
  %51 = load i32, i32* %y68, align 4, !tbaa !33
  %52 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p69 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %52, i32 0, i32 0
  %y70 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p69, i32 0, i32 1
  %53 = load i32, i32* %y70, align 4, !tbaa !35
  %cmp71 = icmp slt i32 %51, %53
  br i1 %cmp71, label %if.then.72, label %if.end.77

if.then.72:                                       ; preds = %if.end.66
  %54 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p73 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %54, i32 0, i32 0
  %y74 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p73, i32 0, i32 1
  %55 = load i32, i32* %y74, align 4, !tbaa !35
  %56 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q75 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %56, i32 0, i32 1
  %y76 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q75, i32 0, i32 1
  store i32 %55, i32* %y76, align 4, !tbaa !33
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.72, %if.end.66
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.77, %if.then
  %57 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #2
  %58 = load i32, i32* %retval
  ret i32 %58
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_pattern_trans_render(%struct.gx_image_enum_s* %penum, i8* %buffer, i32 %data_x, i32 %w, i32 %h, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %penum.addr = alloca %struct.gx_image_enum_s*, align 8
  %buffer.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %code = alloca i32, align 4
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %pdcolor = alloca %struct.gx_device_color_s*, align 8
  %ptile = alloca %struct.gx_color_tile_s*, align 8
  %cleanup.dest.slot = alloca i32
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  store %struct.gx_image_enum_s* %penum, %struct.gx_image_enum_s** %penum.addr, align 8, !tbaa !1
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum.addr, align 8, !tbaa !1
  %pis1 = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %3, i32 0, i32 30
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis1, align 8, !tbaa !436
  store %struct.gs_imager_state_s* %4, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_color_s** %pdcolor to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum.addr, align 8, !tbaa !1
  %icolor1 = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %6, i32 0, i32 69
  %7 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %icolor1, align 8, !tbaa !437
  store %struct.gx_device_color_s* %7, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !1
  %8 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %9, i32 0, i32 1
  %pattern = bitcast %union._c* %colors to %struct._pat*
  %p_tile = getelementptr inbounds %struct._pat, %struct._pat* %pattern, i32 0, i32 0
  %10 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %10, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %11 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %11, i32 0, i32 9
  %12 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans, align 8, !tbaa !219
  %image_render = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %12, i32 0, i32 16
  %13 = load i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %image_render, align 8, !tbaa !430
  %14 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum.addr, align 8, !tbaa !1
  %15 = load i8*, i8** %buffer.addr, align 8, !tbaa !1
  %16 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %17 = load i32, i32* %w.addr, align 4, !tbaa !5
  %18 = load i32, i32* %h.addr, align 4, !tbaa !5
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 %13(%struct.gx_image_enum_s* %14, i8* %15, i32 %16, i32 %17, i32 %18, %struct.gx_device_s* %19) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %20 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %20, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %21 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

if.end:                                           ; preds = %entry
  %22 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp2 = icmp eq i32 %22, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end
  %23 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %trans_group_popped = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %23, i32 0, i32 16
  %24 = load i32, i32* %trans_group_popped, align 4, !tbaa !431
  %cmp3 = icmp eq i32 %24, 0
  br i1 %cmp3, label %if.then.4, label %if.end.23

if.then.4:                                        ; preds = %land.lhs.true
  %25 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %is_gstate = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %25, i32 0, i32 0
  %26 = load i32, i32* %is_gstate, align 4, !tbaa !438
  %tobool = icmp ne i32 %26, 0
  br i1 %tobool, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.4
  %27 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %28 = bitcast %struct.gs_imager_state_s* %27 to %struct.gs_state_s*
  %call6 = call i32 @gs_end_transparency_group(%struct.gs_state_s* %28) #7
  store i32 %call6, i32* %code, align 4, !tbaa !5
  br label %if.end.13

if.else:                                          ; preds = %if.then.4
  %29 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %29) #2
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %31 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call7 = call i32 %31(%struct.gx_device_s* %32, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call7, i32* %code, align 4, !tbaa !5
  %33 = load i32, i32* %code, align 4, !tbaa !5
  %cmp8 = icmp slt i32 %33, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.else
  %34 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %34, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.10:                                        ; preds = %if.else
  %35 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call11 = call %struct.pdf14_device_s* @find_pdf14_device(%struct.gx_device_s* %35) #7
  store %struct.pdf14_device_s* %call11, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %if.end.10
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 47
  %37 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %38 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %38, i32 0, i32 46
  %39 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %40 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %40, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %41 = load i32, i32* %num_components, align 4, !tbaa !150
  %42 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %42, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %43 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %45 = bitcast %struct.pdf14_device_s* %44 to %struct.gx_device_s*
  %call12 = call i32 @pdf14_pop_transparency_group(%struct.gs_imager_state_s* null, %struct.pdf14_ctx_s* %37, %struct.pdf14_nonseparable_blending_procs_s* %39, i32 %41, %struct.cmm_profile_s* %43, %struct.gx_device_s* %45) #7
  store i32 %call12, i32* %code, align 4, !tbaa !5
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then.9
  %46 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.13

if.end.13:                                        ; preds = %cleanup.cont, %if.then.5
  %47 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor, align 8, !tbaa !1
  %colors14 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %47, i32 0, i32 1
  %pattern15 = bitcast %union._c* %colors14 to %struct._pat*
  %p_tile16 = getelementptr inbounds %struct._pat, %struct._pat* %pattern15, i32 0, i32 0
  %48 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile16, align 8, !tbaa !217
  %trans_group_popped17 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %48, i32 0, i32 16
  store i32 1, i32* %trans_group_popped17, align 4, !tbaa !431
  %49 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %49, i32 0, i32 1
  %50 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %procs18 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %50, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs18, i32 0, i32 2
  %51 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %52 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %memory19 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %52, i32 0, i32 1
  %53 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory19, align 8, !tbaa !165
  %54 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans20 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %54, i32 0, i32 9
  %55 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans20, align 8, !tbaa !219
  %fill_trans_buffer = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %55, i32 0, i32 3
  %56 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %fill_trans_buffer, align 8, !tbaa !226
  %57 = bitcast %struct.gx_pattern_trans_s* %56 to i8*
  call void %51(%struct.gs_memory_s* %53, i8* %57, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i32 0, i32 0)) #7
  %58 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans21 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %58, i32 0, i32 9
  %59 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans21, align 8, !tbaa !219
  %fill_trans_buffer22 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %59, i32 0, i32 3
  store %struct.gx_pattern_trans_s* null, %struct.gx_pattern_trans_s** %fill_trans_buffer22, align 8, !tbaa !226
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.13, %land.lhs.true, %if.end
  %60 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %60, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24

cleanup.24:                                       ; preds = %if.end.23, %cleanup, %if.then
  %61 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #2
  %62 = bitcast %struct.gx_device_color_s** %pdcolor to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #2
  %63 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #2
  %64 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %65) #2
  %66 = load i32, i32* %retval
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_compute_group_device_int_rect(%struct.gs_matrix_s* %ctm, %struct.gs_rect_s* %pbbox, %struct.gs_int_rect_s* %rect) #1 {
entry:
  %retval = alloca i32, align 4
  %ctm.addr = alloca %struct.gs_matrix_s*, align 8
  %pbbox.addr = alloca %struct.gs_rect_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %dev_bbox = alloca %struct.gs_rect_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_matrix_s* %ctm, %struct.gs_matrix_s** %ctm.addr, align 8, !tbaa !1
  store %struct.gs_rect_s* %pbbox, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_rect_s* %dev_bbox to i8*
  call void @llvm.lifetime.start(i64 32, i8* %0) #2
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gs_rect_s*, %struct.gs_rect_s** %pbbox.addr, align 8, !tbaa !1
  %3 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %ctm.addr, align 8, !tbaa !1
  %call = call i32 @gs_bbox_transform(%struct.gs_rect_s* %2, %struct.gs_matrix_s* %3, %struct.gs_rect_s* %dev_bbox) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %4 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %5, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %p = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %dev_bbox, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  %6 = load double, double* %x, align 8, !tbaa !412
  %call1 = call double @floor(double %6) #9
  %conv = fptosi double %call1 to i32
  %7 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p2 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %7, i32 0, i32 0
  %x3 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p2, i32 0, i32 0
  store i32 %conv, i32* %x3, align 4, !tbaa !34
  %p4 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %dev_bbox, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p4, i32 0, i32 1
  %8 = load double, double* %y, align 8, !tbaa !413
  %call5 = call double @floor(double %8) #9
  %conv6 = fptosi double %call5 to i32
  %9 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %p7 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %9, i32 0, i32 0
  %y8 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p7, i32 0, i32 1
  store i32 %conv6, i32* %y8, align 4, !tbaa !35
  %q = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %dev_bbox, i32 0, i32 1
  %x9 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q, i32 0, i32 0
  %10 = load double, double* %x9, align 8, !tbaa !415
  %call10 = call double @ceil(double %10) #9
  %conv11 = fptosi double %call10 to i32
  %11 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q12 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %11, i32 0, i32 1
  %x13 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q12, i32 0, i32 0
  store i32 %conv11, i32* %x13, align 4, !tbaa !31
  %q14 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %dev_bbox, i32 0, i32 1
  %y15 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q14, i32 0, i32 1
  %12 = load double, double* %y15, align 8, !tbaa !417
  %call16 = call double @ceil(double %12) #9
  %conv17 = fptosi double %call16 to i32
  %13 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %q18 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %13, i32 0, i32 1
  %y19 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q18, i32 0, i32 1
  store i32 %conv17, i32* %y19, align 4, !tbaa !33
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %14 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #2
  %15 = bitcast %struct.gs_rect_s* %dev_bbox to i8*
  call void @llvm.lifetime.end(i64 32, i8* %15) #2
  %16 = load i32, i32* %retval
  ret i32 %16
}

declare i32 @gs_bbox_transform(%struct.gs_rect_s*, %struct.gs_matrix_s*, %struct.gs_rect_s*) #0

; Function Attrs: nounwind readnone
declare double @ceil(double) #4

declare i32 @gs_end_transparency_group(%struct.gs_state_s*) #0

; Function Attrs: nounwind uwtable
define internal %struct.pdf14_device_s* @find_pdf14_device(%struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca %struct.pdf14_device_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %1, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 65
  %2 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.pdf14_device_s** %pdev to i8*
  %call = call i32 %2(%struct.gx_device_s* %3, i32 9, i8* %4, i32 8) #7
  %cmp = icmp sle i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.pdf14_device_s* null, %struct.pdf14_device_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  store %struct.pdf14_device_s* %5, %struct.pdf14_device_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %retval
  ret %struct.pdf14_device_s* %7
}

; Function Attrs: nounwind uwtable
define internal i32 @gx_update_pdf14_compositor(%struct.gx_device_s* %pdev, %struct.gs_imager_state_s* %pis, %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_memory_s* %mem) #1 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %params = alloca %struct.gs_pdf14trans_params_s, align 8
  %code = alloca i32, align 4
  %new_is = alloca %struct.gs_imager_state_s, align 8
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.start(i64 704, i8* %3) #2
  %4 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params1 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %4, i32 0, i32 5
  %5 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  %6 = bitcast %struct.gs_pdf14trans_params_s* %params1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 704, i32 8, i1 false), !tbaa.struct !170
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %8 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %idle = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %8, i32 0, i32 2
  %9 = load i32, i32* %idle, align 4, !tbaa !172
  %idle2 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 25
  store i32 %9, i32* %idle2, align 4, !tbaa !439
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %10 = load i32, i32* %pdf14_op, align 4, !tbaa !93
  switch i32 %10, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb.3
    i32 1, label %sw.bb.10
    i32 3, label %sw.bb.23
    i32 4, label %sw.bb.25
    i32 5, label %sw.bb.27
    i32 6, label %sw.bb.29
    i32 7, label %sw.bb.31
    i32 8, label %sw.bb.33
    i32 9, label %sw.bb.35
    i32 10, label %sw.bb.37
    i32 11, label %sw.bb.39
  ]

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.bb:                                            ; preds = %entry
  %is_pattern = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 32
  %11 = load i32, i32* %is_pattern, align 4, !tbaa !440
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 52
  store i32 0, i32* %blend_mode, align 4, !tbaa !48
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 50
  store float 0.000000e+00, float* %shape, align 4, !tbaa !344
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 49
  store float 0.000000e+00, float* %opacity, align 4, !tbaa !394
  %15 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %16 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %18 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_recreate_device(%struct.gs_memory_s* %15, %struct.gs_imager_state_s* %16, %struct.gx_device_s* %17, %struct.gs_pdf14trans_s* %18) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %19 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call4 = call i32 @gx_abort_trans_device(%struct.gs_imager_state_s* %19, %struct.gx_device_s* %20) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %free_devicen = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 59
  %22 = load i32, i32* %free_devicen, align 4, !tbaa !156
  %tobool5 = icmp ne i32 %22, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %sw.bb.3
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  call void @devn_free_params(%struct.gx_device_s* %23) #7
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %sw.bb.3
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call8 = call i32 @pdf14_disable_device(%struct.gx_device_s* %24) #7
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call9 = call i32 @pdf14_close(%struct.gx_device_s* %25) #7
  br label %sw.epilog

sw.bb.10:                                         ; preds = %entry
  %is_pattern11 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 32
  %26 = load i32, i32* %is_pattern11, align 4, !tbaa !440
  %tobool12 = icmp ne i32 %26, 0
  br i1 %tobool12, label %if.end.22, label %if.then.13

if.then.13:                                       ; preds = %sw.bb.10
  br label %do.body

do.body:                                          ; preds = %if.then.13
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %save_get_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 60
  %28 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %save_get_cmap_procs, align 8, !tbaa !441
  %29 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %29, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %28, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %30 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %31 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %31, i32 0, i32 43
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %30, %struct.gx_device_s* %32) #7
  %33 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.start(i64 1616, i8* %33) #2
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %35 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  %36 = bitcast %struct.gs_imager_state_s* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 1616, i32 8, i1 false), !tbaa.struct !200
  %log_op = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 10
  store i32 252, i32* %log_op, align 4, !tbaa !393
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 45
  %38 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %put_image = getelementptr inbounds %struct.pdf14_procs_s, %struct.pdf14_procs_s* %38, i32 0, i32 1
  %39 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*)** %put_image, align 8, !tbaa !442
  %40 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %41 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %target14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %41, i32 0, i32 43
  %42 = load %struct.gx_device_s*, %struct.gx_device_s** %target14, align 8, !tbaa !82
  %call15 = call i32 %39(%struct.gx_device_s* %40, %struct.gs_imager_state_s* %new_is, %struct.gx_device_s* %42) #7
  store i32 %call15, i32* %code, align 4, !tbaa !5
  %43 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.end(i64 1616, i8* %43) #2
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %free_devicen16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 59
  %45 = load i32, i32* %free_devicen16, align 4, !tbaa !156
  %tobool17 = icmp ne i32 %45, 0
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %do.end
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  call void @devn_free_params(%struct.gx_device_s* %46) #7
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %do.end
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call20 = call i32 @pdf14_disable_device(%struct.gx_device_s* %47) #7
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call21 = call i32 @pdf14_close(%struct.gx_device_s* %48) #7
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.19, %sw.bb.10
  br label %sw.epilog

sw.bb.23:                                         ; preds = %entry
  %49 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call24 = call i32 @gx_begin_transparency_group(%struct.gs_imager_state_s* %49, %struct.gx_device_s* %50, %struct.gs_pdf14trans_params_s* %params) #7
  store i32 %call24, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.25:                                         ; preds = %entry
  %51 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %52 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call26 = call i32 @gx_end_transparency_group(%struct.gs_imager_state_s* %51, %struct.gx_device_s* %52) #7
  store i32 %call26, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.27:                                         ; preds = %entry
  %53 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call28 = call i32 @gx_begin_transparency_mask(%struct.gs_imager_state_s* %53, %struct.gx_device_s* %54, %struct.gs_pdf14trans_params_s* %params) #7
  store i32 %call28, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.29:                                         ; preds = %entry
  %55 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call30 = call i32 @gx_end_transparency_mask(%struct.gs_imager_state_s* %55, %struct.gx_device_s* %56, %struct.gs_pdf14trans_params_s* %params) #7
  store i32 %call30, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.31:                                         ; preds = %entry
  %57 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %59 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params32 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %59, i32 0, i32 5
  call void @pdf14_set_params(%struct.gs_imager_state_s* %57, %struct.gx_device_s* %58, %struct.gs_pdf14trans_params_s* %params32) #7
  br label %sw.epilog

sw.bb.33:                                         ; preds = %entry
  %60 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %61 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call34 = call i32 @gx_push_transparency_state(%struct.gs_imager_state_s* %60, %struct.gx_device_s* %61) #7
  store i32 %call34, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.35:                                         ; preds = %entry
  %62 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call36 = call i32 @gx_pop_transparency_state(%struct.gs_imager_state_s* %62, %struct.gx_device_s* %63) #7
  store i32 %call36, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.37:                                         ; preds = %entry
  %64 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %65 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call38 = call i32 @pdf14_increment_smask_color(%struct.gs_imager_state_s* %64, %struct.gx_device_s* %65) #7
  store i32 %call38, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.39:                                         ; preds = %entry
  %66 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call40 = call i32 @pdf14_decrement_smask_color(%struct.gs_imager_state_s* %66, %struct.gx_device_s* %67) #7
  store i32 %call40, i32* %code, align 4, !tbaa !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.39, %sw.bb.37, %sw.bb.35, %sw.bb.33, %sw.bb.31, %sw.bb.29, %sw.bb.27, %sw.bb.25, %sw.bb.23, %if.end.22, %if.end.7, %if.end, %sw.default
  %68 = load i32, i32* %code, align 4, !tbaa !5
  %69 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %69) #2
  %70 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.end(i64 704, i8* %70) #2
  %71 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %71) #2
  ret i32 %68
}

declare i32 @gs_is_overprint_compositor(%struct.gs_composite_s*) #0

declare i32 @gx_no_create_compositor(%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_recreate_device(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %target = alloca %struct.gx_device_s*, align 8
  %dev_proto = alloca %struct.pdf14_device_s*, align 8
  %temp_dev_proto = alloca %struct.pdf14_device_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target1, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %target, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.start(i64 5024, i8* %7) #2
  %8 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %11 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call = call i32 @get_pdf14_device_proto(%struct.gx_device_s* %9, %struct.pdf14_device_s** %dev_proto, %struct.pdf14_device_s* %temp_dev_proto, %struct.gs_imager_state_s* %10, %struct.gs_pdf14trans_s* %11) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %12 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %13 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 11
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %color_info2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 11
  %16 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  %17 = bitcast %struct.gx_device_color_info_s* %color_info2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 720, i32 8, i1 false), !tbaa.struct !65
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %pad = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 15
  %19 = load i32, i32* %pad, align 4, !tbaa !443
  %20 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pad3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %20, i32 0, i32 15
  store i32 %19, i32* %pad3, align 4, !tbaa !444
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %log2_align_mod = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %21, i32 0, i32 16
  %22 = load i32, i32* %log2_align_mod, align 4, !tbaa !445
  %23 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %log2_align_mod4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %23, i32 0, i32 16
  store i32 %22, i32* %log2_align_mod4, align 4, !tbaa !446
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %is_planar = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %24, i32 0, i32 17
  %25 = load i32, i32* %is_planar, align 4, !tbaa !447
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %is_planar5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 17
  store i32 %25, i32* %is_planar5, align 4, !tbaa !448
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 42
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %procs6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 42
  %29 = bitcast %struct.gx_device_procs_s* %procs to i8*
  %30 = bitcast %struct.gx_device_procs_s* %procs6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 584, i32 8, i1 false), !tbaa.struct !449
  %31 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %static_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %31, i32 0, i32 1
  %32 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs, align 8, !tbaa !450
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %static_procs7 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %33, i32 0, i32 1
  store %struct.gx_device_procs_s* %32, %struct.gx_device_procs_s** %static_procs7, align 8, !tbaa !451
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_set_procs(%struct.gx_device_s* %34) #7
  %35 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %35) #7
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @check_device_separable(%struct.gx_device_s* %36) #7
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs8 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 42
  %open_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs8, i32 0, i32 0
  %38 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %open_device, align 8, !tbaa !452
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call9 = call i32 %38(%struct.gx_device_s* %39) #7
  store i32 %call9, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %40 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #2
  %41 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.end(i64 5024, i8* %41) #2
  %42 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #2
  %43 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.end(i64 8, i8* %43) #2
  %44 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %44) #2
  %45 = load i32, i32* %retval
  ret i32 %45
}

declare i32 @gx_abort_trans_device(%struct.gs_imager_state_s*, %struct.gx_device_s*) #0

declare void @devn_free_params(%struct.gx_device_s*) #0

declare void @gx_set_cmap_procs(%struct.gs_imager_state_s*, %struct.gx_device_s*) #0

declare i32 @gx_begin_transparency_group(%struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_pdf14trans_params_s*) #0

declare i32 @gx_end_transparency_group(%struct.gs_imager_state_s*, %struct.gx_device_s*) #0

declare i32 @gx_begin_transparency_mask(%struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_pdf14trans_params_s*) #0

declare i32 @gx_end_transparency_mask(%struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_pdf14trans_params_s*) #0

; Function Attrs: nounwind uwtable
define internal void @pdf14_set_params(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, %struct.gs_pdf14trans_params_s* %pparams) #1 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pparams.addr = alloca %struct.gs_pdf14trans_params_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %3 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %3, i32 0, i32 2
  %4 = load i32, i32* %changed, align 4, !tbaa !133
  %and = and i32 %4, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %5, i32 0, i32 15
  %6 = load i32, i32* %blend_mode, align 4, !tbaa !125
  %7 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %7, i32 0, i32 12
  store i32 %6, i32* %blend_mode1, align 4, !tbaa !257
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %8 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed2 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %8, i32 0, i32 2
  %9 = load i32, i32* %changed2, align 4, !tbaa !133
  %and3 = and i32 %9, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %10 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %text_knockout = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %10, i32 0, i32 16
  %11 = load i32, i32* %text_knockout, align 4, !tbaa !134
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_knockout6 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %12, i32 0, i32 17
  store i32 %11, i32* %text_knockout6, align 4, !tbaa !453
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  %13 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed8 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %13, i32 0, i32 2
  %14 = load i32, i32* %changed8, align 4, !tbaa !133
  %and9 = and i32 %14, 4
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.7
  %15 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %15, i32 0, i32 18
  %alpha = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %16 = load float, float* %alpha, align 4, !tbaa !132
  %17 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape12 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %17, i32 0, i32 14
  %alpha13 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape12, i32 0, i32 0
  store float %16, float* %alpha13, align 4, !tbaa !244
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %if.end.7
  %18 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed15 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %18, i32 0, i32 2
  %19 = load i32, i32* %changed15, align 4, !tbaa !133
  %and16 = and i32 %19, 8
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.22

if.then.18:                                       ; preds = %if.end.14
  %20 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %20, i32 0, i32 17
  %alpha19 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %21 = load float, float* %alpha19, align 4, !tbaa !131
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %22, i32 0, i32 13
  %alpha21 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity20, i32 0, i32 0
  store float %21, float* %alpha21, align 4, !tbaa !243
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.18, %if.end.14
  %23 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed23 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %23, i32 0, i32 2
  %24 = load i32, i32* %changed23, align 4, !tbaa !133
  %and24 = and i32 %24, 16
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then.26, label %if.end.28

if.then.26:                                       ; preds = %if.end.22
  %25 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %overprint = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %25, i32 0, i32 22
  %26 = load i32, i32* %overprint, align 4, !tbaa !454
  %27 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint27 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %27, i32 0, i32 21
  store i32 %26, i32* %overprint27, align 4, !tbaa !395
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.26, %if.end.22
  %28 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed29 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %28, i32 0, i32 2
  %29 = load i32, i32* %changed29, align 4, !tbaa !133
  %and30 = and i32 %29, 32
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.end.28
  %30 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %overprint_mode = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %30, i32 0, i32 23
  %31 = load i32, i32* %overprint_mode, align 4, !tbaa !455
  %32 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint_mode33 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %32, i32 0, i32 22
  store i32 %31, i32* %overprint_mode33, align 4, !tbaa !396
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.end.28
  %33 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %changed35 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %33, i32 0, i32 2
  %34 = load i32, i32* %changed35, align 4, !tbaa !133
  %and36 = and i32 %34, 64
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %if.end.34
  %35 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %blendspot = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %35, i32 0, i32 24
  %36 = load i32, i32* %blendspot, align 4, !tbaa !456
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blendspot39 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 56
  store i32 %36, i32* %blendspot39, align 4, !tbaa !238
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %if.end.34
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %39 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %38, %struct.gs_imager_state_s* %39) #7
  %40 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #2
  ret void
}

declare i32 @gx_push_transparency_state(%struct.gs_imager_state_s*, %struct.gx_device_s*) #0

declare i32 @gx_pop_transparency_state(%struct.gs_imager_state_s*, %struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_increment_smask_color(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %result = alloca %struct.pdf14_smaskcolor_s*, align 8
  %smask_profiles = alloca %struct.gsicc_smask_s*, align 8
  %k = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pgs = alloca %struct.gs_state_s*, align 8
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %profile = alloca %struct.cmm_profile_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_smaskcolor_s** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.gsicc_smask_s** %smask_profiles to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %5, i32 0, i32 35
  %6 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !457
  %smask_profiles1 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %6, i32 0, i32 7
  %7 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles1, align 8, !tbaa !458
  store %struct.gsicc_smask_s* %7, %struct.gsicc_smask_s** %smask_profiles, align 8, !tbaa !1
  %8 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 48
  %10 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !299
  %cmp = icmp eq %struct.pdf14_smaskcolor_s* %10, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %11, i32 0, i32 35
  %12 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager2, align 8, !tbaa !457
  %smask_profiles3 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %12, i32 0, i32 7
  %13 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles3, align 8, !tbaa !458
  %cmp4 = icmp ne %struct.gsicc_smask_s* %13, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %14 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager6 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %14, i32 0, i32 35
  %15 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager6, align 8, !tbaa !457
  %smask_profiles7 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %15, i32 0, i32 7
  %16 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles7, align 8, !tbaa !458
  %swapped = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %16, i32 0, i32 4
  %17 = load i32, i32* %swapped, align 4, !tbaa !460
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true.5, %land.lhs.true, %entry
  %18 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor8 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %18, i32 0, i32 48
  %19 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor8, align 8, !tbaa !299
  %cmp9 = icmp ne %struct.pdf14_smaskcolor_s* %19, null
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %20 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %20, i32 0, i32 48
  %21 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor11, align 8, !tbaa !299
  %ref_count = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %21, i32 0, i32 1
  %22 = load i32, i32* %ref_count, align 4, !tbaa !301
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %ref_count, align 4, !tbaa !301
  br label %do.body

do.body:                                          ; preds = %if.then.10
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end.145

if.else:                                          ; preds = %if.end
  %23 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %23, i32 0, i32 3
  %24 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %24, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %25 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 3
  %27 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory12, align 8, !tbaa !225
  %call = call i8* %25(%struct.gs_memory_s* %27, %struct.gs_memory_struct_type_s* @st_pdf14_smaskcolor, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i32 0, i32 0)) #7
  %28 = bitcast i8* %call to %struct.pdf14_smaskcolor_s*
  store %struct.pdf14_smaskcolor_s* %28, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %29 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %cmp13 = icmp eq %struct.pdf14_smaskcolor_s* %29, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.else
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.15:                                        ; preds = %if.else
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 3
  %31 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory16, align 8, !tbaa !225
  %call17 = call %struct.gsicc_smask_s* @gsicc_new_iccsmask(%struct.gs_memory_s* %31) #7
  %32 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %32, i32 0, i32 0
  store %struct.gsicc_smask_s* %call17, %struct.gsicc_smask_s** %profiles, align 8, !tbaa !462
  %33 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles18 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %33, i32 0, i32 0
  %34 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles18, align 8, !tbaa !462
  %cmp19 = icmp eq %struct.gsicc_smask_s* %34, null
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.15
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.21:                                        ; preds = %if.end.15
  %35 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor22 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 48
  store %struct.pdf14_smaskcolor_s* %35, %struct.pdf14_smaskcolor_s** %smaskcolor22, align 8, !tbaa !299
  %37 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager23 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %37, i32 0, i32 35
  %38 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager23, align 8, !tbaa !457
  %default_gray = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %38, i32 0, i32 1
  %39 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_gray, align 8, !tbaa !463
  %40 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles24 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %40, i32 0, i32 0
  %41 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles24, align 8, !tbaa !462
  %smask_gray = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %41, i32 0, i32 0
  store %struct.cmm_profile_s* %39, %struct.cmm_profile_s** %smask_gray, align 8, !tbaa !464
  %42 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager25 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %42, i32 0, i32 35
  %43 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager25, align 8, !tbaa !457
  %default_rgb = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %43, i32 0, i32 2
  %44 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb, align 8, !tbaa !465
  %45 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles26 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %45, i32 0, i32 0
  %46 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles26, align 8, !tbaa !462
  %smask_rgb = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %46, i32 0, i32 1
  store %struct.cmm_profile_s* %44, %struct.cmm_profile_s** %smask_rgb, align 8, !tbaa !466
  %47 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager27 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %47, i32 0, i32 35
  %48 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager27, align 8, !tbaa !457
  %default_cmyk = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %48, i32 0, i32 3
  %49 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_cmyk, align 8, !tbaa !467
  %50 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles28 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %50, i32 0, i32 0
  %51 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles28, align 8, !tbaa !462
  %smask_cmyk = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %51, i32 0, i32 2
  store %struct.cmm_profile_s* %49, %struct.cmm_profile_s** %smask_cmyk, align 8, !tbaa !468
  %52 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles, align 8, !tbaa !1
  %smask_gray29 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %52, i32 0, i32 0
  %53 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_gray29, align 8, !tbaa !464
  %54 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager30 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %54, i32 0, i32 35
  %55 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager30, align 8, !tbaa !457
  %default_gray31 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %55, i32 0, i32 1
  store %struct.cmm_profile_s* %53, %struct.cmm_profile_s** %default_gray31, align 8, !tbaa !463
  %56 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles, align 8, !tbaa !1
  %smask_rgb32 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %56, i32 0, i32 1
  %57 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_rgb32, align 8, !tbaa !466
  %58 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager33 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %58, i32 0, i32 35
  %59 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager33, align 8, !tbaa !457
  %default_rgb34 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %59, i32 0, i32 2
  store %struct.cmm_profile_s* %57, %struct.cmm_profile_s** %default_rgb34, align 8, !tbaa !465
  %60 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles, align 8, !tbaa !1
  %smask_cmyk35 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %60, i32 0, i32 2
  %61 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_cmyk35, align 8, !tbaa !468
  %62 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager36 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %62, i32 0, i32 35
  %63 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager36, align 8, !tbaa !457
  %default_cmyk37 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %63, i32 0, i32 3
  store %struct.cmm_profile_s* %61, %struct.cmm_profile_s** %default_cmyk37, align 8, !tbaa !467
  %64 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager38 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %64, i32 0, i32 35
  %65 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager38, align 8, !tbaa !457
  %smask_profiles39 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %65, i32 0, i32 7
  %66 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles39, align 8, !tbaa !458
  %swapped40 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %66, i32 0, i32 4
  store i32 1, i32* %swapped40, align 4, !tbaa !460
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.21
  br label %do.cond.42

do.cond.42:                                       ; preds = %do.body.41
  br label %do.end.43

do.end.43:                                        ; preds = %do.cond.42
  %67 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor44 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %67, i32 0, i32 48
  %68 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor44, align 8, !tbaa !299
  %ref_count45 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %68, i32 0, i32 1
  store i32 1, i32* %ref_count45, align 4, !tbaa !301
  %69 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %is_gstate = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %69, i32 0, i32 0
  %70 = load i32, i32* %is_gstate, align 4, !tbaa !438
  %tobool46 = icmp ne i32 %70, 0
  br i1 %tobool46, label %if.then.47, label %if.end.144

if.then.47:                                       ; preds = %do.end.43
  %71 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %71) #2
  %72 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %73 = bitcast %struct.gs_imager_state_s* %72 to %struct.gs_state_s*
  store %struct.gs_state_s* %73, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.47
  %74 = load i32, i32* %k, align 4, !tbaa !5
  %cmp48 = icmp slt i32 %74, 2
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %75 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %75) #2
  %76 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %76 to i64
  %77 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %77, i32 0, i32 69
  %arrayidx = getelementptr inbounds [2 x %struct.anon.2], [2 x %struct.anon.2]* %color, i32 0, i64 %idxprom
  %color_space = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx, i32 0, i32 0
  %78 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %color_space, align 8, !tbaa !469
  store %struct.gs_color_space_s* %78, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %79 = bitcast %struct.cmm_profile_s** %profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %79) #2
  %80 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %80, i32 0, i32 6
  %81 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data, align 8, !tbaa !471
  store %struct.cmm_profile_s* %81, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %82 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %cmp49 = icmp ne %struct.cmm_profile_s* %82, null
  br i1 %cmp49, label %if.then.50, label %if.end.142

if.then.50:                                       ; preds = %for.body
  %83 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %83, i32 0, i32 5
  %84 = load i32, i32* %data_cs, align 4, !tbaa !115
  switch i32 %84, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.59
    i32 3, label %sw.bb.69
  ]

sw.bb:                                            ; preds = %if.then.50
  %85 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %85, i32 0, i32 7
  %86 = load i64, i64* %hashcode, align 8, !tbaa !121
  %87 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles51 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %87, i32 0, i32 0
  %88 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles51, align 8, !tbaa !462
  %smask_gray52 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %88, i32 0, i32 0
  %89 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_gray52, align 8, !tbaa !464
  %hashcode53 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %89, i32 0, i32 7
  %90 = load i64, i64* %hashcode53, align 8, !tbaa !121
  %cmp54 = icmp eq i64 %86, %90
  br i1 %cmp54, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %sw.bb
  %91 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager56 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %91, i32 0, i32 35
  %92 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager56, align 8, !tbaa !457
  %default_gray57 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %92, i32 0, i32 1
  %93 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_gray57, align 8, !tbaa !463
  store %struct.cmm_profile_s* %93, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %sw.bb
  br label %sw.epilog

sw.bb.59:                                         ; preds = %if.then.50
  %94 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode60 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %94, i32 0, i32 7
  %95 = load i64, i64* %hashcode60, align 8, !tbaa !121
  %96 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles61 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %96, i32 0, i32 0
  %97 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles61, align 8, !tbaa !462
  %smask_rgb62 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %97, i32 0, i32 1
  %98 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_rgb62, align 8, !tbaa !466
  %hashcode63 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %98, i32 0, i32 7
  %99 = load i64, i64* %hashcode63, align 8, !tbaa !121
  %cmp64 = icmp eq i64 %95, %99
  br i1 %cmp64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %sw.bb.59
  %100 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager66 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %100, i32 0, i32 35
  %101 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager66, align 8, !tbaa !457
  %default_rgb67 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %101, i32 0, i32 2
  %102 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb67, align 8, !tbaa !465
  store %struct.cmm_profile_s* %102, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %sw.bb.59
  br label %sw.epilog

sw.bb.69:                                         ; preds = %if.then.50
  %103 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode70 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %103, i32 0, i32 7
  %104 = load i64, i64* %hashcode70, align 8, !tbaa !121
  %105 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %result, align 8, !tbaa !1
  %profiles71 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %105, i32 0, i32 0
  %106 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles71, align 8, !tbaa !462
  %smask_cmyk72 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %106, i32 0, i32 2
  %107 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_cmyk72, align 8, !tbaa !468
  %hashcode73 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %107, i32 0, i32 7
  %108 = load i64, i64* %hashcode73, align 8, !tbaa !121
  %cmp74 = icmp eq i64 %104, %108
  br i1 %cmp74, label %if.then.75, label %if.end.78

if.then.75:                                       ; preds = %sw.bb.69
  %109 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager76 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %109, i32 0, i32 35
  %110 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager76, align 8, !tbaa !457
  %default_cmyk77 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %110, i32 0, i32 3
  %111 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_cmyk77, align 8, !tbaa !467
  store %struct.cmm_profile_s* %111, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.75, %sw.bb.69
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.50
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.78, %if.end.68, %if.end.58
  br label %do.body.79

do.body.79:                                       ; preds = %sw.epilog
  %112 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data80 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %112, i32 0, i32 6
  %113 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data80, align 8, !tbaa !471
  %114 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %cmp81 = icmp ne %struct.cmm_profile_s* %113, %114
  br i1 %cmp81, label %if.then.82, label %if.end.139

if.then.82:                                       ; preds = %do.body.79
  br label %do.body.83

do.body.83:                                       ; preds = %if.then.82
  %115 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %tobool84 = icmp ne %struct.cmm_profile_s* %115, null
  br i1 %tobool84, label %if.then.85, label %if.end.94

if.then.85:                                       ; preds = %do.body.83
  br label %do.body.86

do.body.86:                                       ; preds = %if.then.85
  %116 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %116, i32 0, i32 18
  %ref_count87 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %117 = load i64, i64* %ref_count87, align 8, !tbaa !145
  %inc88 = add nsw i64 %117, 1
  store i64 %inc88, i64* %ref_count87, align 8, !tbaa !145
  br label %do.body.89

do.body.89:                                       ; preds = %do.body.86
  br label %do.cond.90

do.cond.90:                                       ; preds = %do.body.89
  br label %do.end.91

do.end.91:                                        ; preds = %do.cond.90
  br label %do.cond.92

do.cond.92:                                       ; preds = %do.end.91
  br label %do.end.93

do.end.93:                                        ; preds = %do.cond.92
  br label %if.end.94

if.end.94:                                        ; preds = %do.end.93, %do.body.83
  br label %do.cond.95

do.cond.95:                                       ; preds = %if.end.94
  br label %do.end.96

do.end.96:                                        ; preds = %do.cond.95
  br label %do.body.97

do.body.97:                                       ; preds = %do.end.96
  %118 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data98 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %118, i32 0, i32 6
  %119 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data98, align 8, !tbaa !471
  %tobool99 = icmp ne %struct.cmm_profile_s* %119, null
  br i1 %tobool99, label %if.then.100, label %if.end.135

if.then.100:                                      ; preds = %do.body.97
  br label %do.body.101

do.body.101:                                      ; preds = %if.then.100
  br label %do.body.102

do.body.102:                                      ; preds = %do.body.101
  br label %do.cond.103

do.cond.103:                                      ; preds = %do.body.102
  br label %do.end.104

do.end.104:                                       ; preds = %do.cond.103
  %120 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data105 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %120, i32 0, i32 6
  %121 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data105, align 8, !tbaa !471
  %rc106 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %121, i32 0, i32 18
  %ref_count107 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc106, i32 0, i32 0
  %122 = load i64, i64* %ref_count107, align 8, !tbaa !145
  %add = add nsw i64 %122, -1
  store i64 %add, i64* %ref_count107, align 8, !tbaa !145
  br label %do.cond.108

do.cond.108:                                      ; preds = %do.end.104
  br label %do.end.109

do.end.109:                                       ; preds = %do.cond.108
  %123 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data110 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %123, i32 0, i32 6
  %124 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data110, align 8, !tbaa !471
  %rc111 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %124, i32 0, i32 18
  %ref_count112 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc111, i32 0, i32 0
  %125 = load i64, i64* %ref_count112, align 8, !tbaa !145
  %tobool113 = icmp ne i64 %125, 0
  br i1 %tobool113, label %if.else.130, label %if.then.114

if.then.114:                                      ; preds = %do.end.109
  br label %do.body.115

do.body.115:                                      ; preds = %if.then.114
  br label %do.body.116

do.body.116:                                      ; preds = %do.body.115
  br label %do.cond.117

do.cond.117:                                      ; preds = %do.body.116
  br label %do.end.118

do.end.118:                                       ; preds = %do.cond.117
  %126 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data119 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %126, i32 0, i32 6
  %127 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data119, align 8, !tbaa !471
  %rc120 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %127, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc120, i32 0, i32 2
  %128 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %129 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data121 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %129, i32 0, i32 6
  %130 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data121, align 8, !tbaa !471
  %rc122 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %130, i32 0, i32 18
  %memory123 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc122, i32 0, i32 1
  %131 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory123, align 8, !tbaa !147
  %132 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data124 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %132, i32 0, i32 6
  %133 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data124, align 8, !tbaa !471
  %134 = bitcast %struct.cmm_profile_s* %133 to i8*
  call void %128(%struct.gs_memory_s* %131, i8* %134, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i32 0, i32 0)) #7
  br label %do.cond.125

do.cond.125:                                      ; preds = %do.end.118
  br label %do.end.126

do.end.126:                                       ; preds = %do.cond.125
  br label %do.body.127

do.body.127:                                      ; preds = %do.end.126
  br label %do.cond.128

do.cond.128:                                      ; preds = %do.body.127
  br label %do.end.129

do.end.129:                                       ; preds = %do.cond.128
  br label %if.end.134

if.else.130:                                      ; preds = %do.end.109
  br label %do.body.131

do.body.131:                                      ; preds = %if.else.130
  br label %do.cond.132

do.cond.132:                                      ; preds = %do.body.131
  br label %do.end.133

do.end.133:                                       ; preds = %do.cond.132
  br label %if.end.134

if.end.134:                                       ; preds = %do.end.133, %do.end.129
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %do.body.97
  br label %do.cond.136

do.cond.136:                                      ; preds = %if.end.135
  br label %do.end.137

do.end.137:                                       ; preds = %do.cond.136
  %135 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %136 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data138 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %136, i32 0, i32 6
  store %struct.cmm_profile_s* %135, %struct.cmm_profile_s** %cmm_icc_profile_data138, align 8, !tbaa !471
  br label %if.end.139

if.end.139:                                       ; preds = %do.end.137, %do.body.79
  br label %do.cond.140

do.cond.140:                                      ; preds = %if.end.139
  br label %do.end.141

do.end.141:                                       ; preds = %do.cond.140
  br label %if.end.142

if.end.142:                                       ; preds = %do.end.141, %for.body
  %137 = bitcast %struct.cmm_profile_s** %profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %137) #2
  %138 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %138) #2
  br label %for.inc

for.inc:                                          ; preds = %if.end.142
  %139 = load i32, i32* %k, align 4, !tbaa !5
  %inc143 = add nsw i32 %139, 1
  store i32 %inc143, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %140 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %140) #2
  br label %if.end.144

if.end.144:                                       ; preds = %for.end, %do.end.43
  br label %if.end.145

if.end.145:                                       ; preds = %if.end.144, %do.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.145, %if.then.20, %if.then.14, %if.then
  %141 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %141) #2
  %142 = bitcast %struct.gsicc_smask_s** %smask_profiles to i8*
  call void @llvm.lifetime.end(i64 8, i8* %142) #2
  %143 = bitcast %struct.pdf14_smaskcolor_s** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %143) #2
  %144 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %144) #2
  %145 = load i32, i32* %retval
  ret i32 %145
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_decrement_smask_color(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %smaskcolor = alloca %struct.pdf14_smaskcolor_s*, align 8
  %icc_manager = alloca %struct.gsicc_manager_s*, align 8
  %k = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pgs = alloca %struct.gs_state_s*, align 8
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %profile = alloca %struct.cmm_profile_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_smaskcolor_s** %smaskcolor to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 48
  %5 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor1, align 8, !tbaa !299
  store %struct.pdf14_smaskcolor_s* %5, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %6 = bitcast %struct.gsicc_manager_s** %icc_manager to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %7, i32 0, i32 35
  %8 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager2, align 8, !tbaa !457
  store %struct.gsicc_manager_s* %8, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !1
  %9 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 48
  %11 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor3, align 8, !tbaa !299
  %cmp = icmp eq %struct.pdf14_smaskcolor_s* %11, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager4 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %12, i32 0, i32 35
  %13 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager4, align 8, !tbaa !457
  %smask_profiles = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %13, i32 0, i32 7
  %14 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles, align 8, !tbaa !458
  %cmp5 = icmp ne %struct.gsicc_smask_s* %14, null
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %15 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager7 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %15, i32 0, i32 35
  %16 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager7, align 8, !tbaa !457
  %smask_profiles8 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %16, i32 0, i32 7
  %17 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles8, align 8, !tbaa !458
  %swapped = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %17, i32 0, i32 4
  %18 = load i32, i32* %swapped, align 4, !tbaa !460
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.6
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true.6, %land.lhs.true, %entry
  %19 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %cmp9 = icmp ne %struct.pdf14_smaskcolor_s* %19, null
  br i1 %cmp9, label %if.then.10, label %if.end.121

if.then.10:                                       ; preds = %if.end
  %20 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %ref_count = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %20, i32 0, i32 1
  %21 = load i32, i32* %ref_count, align 4, !tbaa !301
  %dec = add nsw i32 %21, -1
  store i32 %dec, i32* %ref_count, align 4, !tbaa !301
  br label %do.body

do.body:                                          ; preds = %if.then.10
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %22 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %ref_count11 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %22, i32 0, i32 1
  %23 = load i32, i32* %ref_count11, align 4, !tbaa !301
  %cmp12 = icmp eq i32 %23, 0
  br i1 %cmp12, label %if.then.13, label %if.end.120

if.then.13:                                       ; preds = %do.end
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  br label %do.cond.15

do.cond.15:                                       ; preds = %do.body.14
  br label %do.end.16

do.end.16:                                        ; preds = %do.cond.15
  %24 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %is_gstate = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %24, i32 0, i32 0
  %25 = load i32, i32* %is_gstate, align 4, !tbaa !438
  %tobool17 = icmp ne i32 %25, 0
  br i1 %tobool17, label %if.then.18, label %if.end.108

if.then.18:                                       ; preds = %do.end.16
  %26 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #2
  %27 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %28 = bitcast %struct.gs_imager_state_s* %27 to %struct.gs_state_s*
  store %struct.gs_state_s* %28, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  br label %do.cond.20

do.cond.20:                                       ; preds = %do.body.19
  br label %do.end.21

do.end.21:                                        ; preds = %do.cond.20
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.21
  %29 = load i32, i32* %k, align 4, !tbaa !5
  %cmp22 = icmp slt i32 %29, 2
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %30) #2
  %31 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %31 to i64
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %pgs, align 8, !tbaa !1
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 69
  %arrayidx = getelementptr inbounds [2 x %struct.anon.2], [2 x %struct.anon.2]* %color, i32 0, i64 %idxprom
  %color_space = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx, i32 0, i32 0
  %33 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %color_space, align 8, !tbaa !469
  store %struct.gs_color_space_s* %33, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %34 = bitcast %struct.cmm_profile_s** %profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #2
  %35 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %35, i32 0, i32 6
  %36 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data, align 8, !tbaa !471
  store %struct.cmm_profile_s* %36, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %37 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %cmp23 = icmp ne %struct.cmm_profile_s* %37, null
  br i1 %cmp23, label %if.then.24, label %if.end.106

if.then.24:                                       ; preds = %for.body
  %38 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %38, i32 0, i32 5
  %39 = load i32, i32* %data_cs, align 4, !tbaa !115
  switch i32 %39, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.30
    i32 3, label %sw.bb.38
  ]

sw.bb:                                            ; preds = %if.then.24
  %40 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %40, i32 0, i32 7
  %41 = load i64, i64* %hashcode, align 8, !tbaa !121
  %42 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager25 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %42, i32 0, i32 35
  %43 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager25, align 8, !tbaa !457
  %default_gray = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %43, i32 0, i32 1
  %44 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_gray, align 8, !tbaa !463
  %hashcode26 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %44, i32 0, i32 7
  %45 = load i64, i64* %hashcode26, align 8, !tbaa !121
  %cmp27 = icmp eq i64 %41, %45
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %sw.bb
  %46 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %46, i32 0, i32 0
  %47 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles, align 8, !tbaa !462
  %smask_gray = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %47, i32 0, i32 0
  %48 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_gray, align 8, !tbaa !464
  store %struct.cmm_profile_s* %48, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %sw.bb
  br label %sw.epilog

sw.bb.30:                                         ; preds = %if.then.24
  %49 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode31 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %49, i32 0, i32 7
  %50 = load i64, i64* %hashcode31, align 8, !tbaa !121
  %51 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager32 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %51, i32 0, i32 35
  %52 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager32, align 8, !tbaa !457
  %default_rgb = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %52, i32 0, i32 2
  %53 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb, align 8, !tbaa !465
  %hashcode33 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %53, i32 0, i32 7
  %54 = load i64, i64* %hashcode33, align 8, !tbaa !121
  %cmp34 = icmp eq i64 %50, %54
  br i1 %cmp34, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %sw.bb.30
  %55 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles36 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %55, i32 0, i32 0
  %56 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles36, align 8, !tbaa !462
  %smask_rgb = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %56, i32 0, i32 1
  %57 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_rgb, align 8, !tbaa !466
  store %struct.cmm_profile_s* %57, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.35, %sw.bb.30
  br label %sw.epilog

sw.bb.38:                                         ; preds = %if.then.24
  %58 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %hashcode39 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %58, i32 0, i32 7
  %59 = load i64, i64* %hashcode39, align 8, !tbaa !121
  %60 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager40 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %60, i32 0, i32 35
  %61 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager40, align 8, !tbaa !457
  %default_cmyk = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %61, i32 0, i32 3
  %62 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_cmyk, align 8, !tbaa !467
  %hashcode41 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %62, i32 0, i32 7
  %63 = load i64, i64* %hashcode41, align 8, !tbaa !121
  %cmp42 = icmp eq i64 %59, %63
  br i1 %cmp42, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %sw.bb.38
  %64 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles44 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %64, i32 0, i32 0
  %65 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles44, align 8, !tbaa !462
  %smask_cmyk = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %65, i32 0, i32 2
  %66 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_cmyk, align 8, !tbaa !468
  store %struct.cmm_profile_s* %66, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %sw.bb.38
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.24
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.45, %if.end.37, %if.end.29
  br label %do.body.46

do.body.46:                                       ; preds = %sw.epilog
  %67 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data47 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %67, i32 0, i32 6
  %68 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data47, align 8, !tbaa !471
  %69 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %cmp48 = icmp ne %struct.cmm_profile_s* %68, %69
  br i1 %cmp48, label %if.then.49, label %if.end.103

if.then.49:                                       ; preds = %do.body.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %70 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %tobool51 = icmp ne %struct.cmm_profile_s* %70, null
  br i1 %tobool51, label %if.then.52, label %if.end.60

if.then.52:                                       ; preds = %do.body.50
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  %71 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %71, i32 0, i32 18
  %ref_count54 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %72 = load i64, i64* %ref_count54, align 8, !tbaa !145
  %inc = add nsw i64 %72, 1
  store i64 %inc, i64* %ref_count54, align 8, !tbaa !145
  br label %do.body.55

do.body.55:                                       ; preds = %do.body.53
  br label %do.cond.56

do.cond.56:                                       ; preds = %do.body.55
  br label %do.end.57

do.end.57:                                        ; preds = %do.cond.56
  br label %do.cond.58

do.cond.58:                                       ; preds = %do.end.57
  br label %do.end.59

do.end.59:                                        ; preds = %do.cond.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59, %do.body.50
  br label %do.cond.61

do.cond.61:                                       ; preds = %if.end.60
  br label %do.end.62

do.end.62:                                        ; preds = %do.cond.61
  br label %do.body.63

do.body.63:                                       ; preds = %do.end.62
  %73 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data64 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %73, i32 0, i32 6
  %74 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data64, align 8, !tbaa !471
  %tobool65 = icmp ne %struct.cmm_profile_s* %74, null
  br i1 %tobool65, label %if.then.66, label %if.end.99

if.then.66:                                       ; preds = %do.body.63
  br label %do.body.67

do.body.67:                                       ; preds = %if.then.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.body.67
  br label %do.cond.69

do.cond.69:                                       ; preds = %do.body.68
  br label %do.end.70

do.end.70:                                        ; preds = %do.cond.69
  %75 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data71 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %75, i32 0, i32 6
  %76 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data71, align 8, !tbaa !471
  %rc72 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %76, i32 0, i32 18
  %ref_count73 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc72, i32 0, i32 0
  %77 = load i64, i64* %ref_count73, align 8, !tbaa !145
  %add = add nsw i64 %77, -1
  store i64 %add, i64* %ref_count73, align 8, !tbaa !145
  br label %do.cond.74

do.cond.74:                                       ; preds = %do.end.70
  br label %do.end.75

do.end.75:                                        ; preds = %do.cond.74
  %78 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data76 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %78, i32 0, i32 6
  %79 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data76, align 8, !tbaa !471
  %rc77 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %79, i32 0, i32 18
  %ref_count78 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc77, i32 0, i32 0
  %80 = load i64, i64* %ref_count78, align 8, !tbaa !145
  %tobool79 = icmp ne i64 %80, 0
  br i1 %tobool79, label %if.else, label %if.then.80

if.then.80:                                       ; preds = %do.end.75
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.80
  br label %do.body.82

do.body.82:                                       ; preds = %do.body.81
  br label %do.cond.83

do.cond.83:                                       ; preds = %do.body.82
  br label %do.end.84

do.end.84:                                        ; preds = %do.cond.83
  %81 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data85 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %81, i32 0, i32 6
  %82 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data85, align 8, !tbaa !471
  %rc86 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %82, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc86, i32 0, i32 2
  %83 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %84 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data87 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %84, i32 0, i32 6
  %85 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data87, align 8, !tbaa !471
  %rc88 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %85, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc88, i32 0, i32 1
  %86 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %87 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data89 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %87, i32 0, i32 6
  %88 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data89, align 8, !tbaa !471
  %89 = bitcast %struct.cmm_profile_s* %88 to i8*
  call void %83(%struct.gs_memory_s* %86, i8* %89, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.46, i32 0, i32 0)) #7
  br label %do.cond.90

do.cond.90:                                       ; preds = %do.end.84
  br label %do.end.91

do.end.91:                                        ; preds = %do.cond.90
  br label %do.body.92

do.body.92:                                       ; preds = %do.end.91
  br label %do.cond.93

do.cond.93:                                       ; preds = %do.body.92
  br label %do.end.94

do.end.94:                                        ; preds = %do.cond.93
  br label %if.end.98

if.else:                                          ; preds = %do.end.75
  br label %do.body.95

do.body.95:                                       ; preds = %if.else
  br label %do.cond.96

do.cond.96:                                       ; preds = %do.body.95
  br label %do.end.97

do.end.97:                                        ; preds = %do.cond.96
  br label %if.end.98

if.end.98:                                        ; preds = %do.end.97, %do.end.94
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %do.body.63
  br label %do.cond.100

do.cond.100:                                      ; preds = %if.end.99
  br label %do.end.101

do.end.101:                                       ; preds = %do.cond.100
  %90 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %profile, align 8, !tbaa !1
  %91 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data102 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %91, i32 0, i32 6
  store %struct.cmm_profile_s* %90, %struct.cmm_profile_s** %cmm_icc_profile_data102, align 8, !tbaa !471
  br label %if.end.103

if.end.103:                                       ; preds = %do.end.101, %do.body.46
  br label %do.cond.104

do.cond.104:                                      ; preds = %if.end.103
  br label %do.end.105

do.end.105:                                       ; preds = %do.cond.104
  br label %if.end.106

if.end.106:                                       ; preds = %do.end.105, %for.body
  %92 = bitcast %struct.cmm_profile_s** %profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %92) #2
  %93 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %93) #2
  br label %for.inc

for.inc:                                          ; preds = %if.end.106
  %94 = load i32, i32* %k, align 4, !tbaa !5
  %inc107 = add nsw i32 %94, 1
  store i32 %inc107, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %95 = bitcast %struct.gs_state_s** %pgs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  br label %if.end.108

if.end.108:                                       ; preds = %for.end, %do.end.16
  %96 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles109 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %96, i32 0, i32 0
  %97 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles109, align 8, !tbaa !462
  %smask_gray110 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %97, i32 0, i32 0
  %98 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_gray110, align 8, !tbaa !464
  %99 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !1
  %default_gray111 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %99, i32 0, i32 1
  store %struct.cmm_profile_s* %98, %struct.cmm_profile_s** %default_gray111, align 8, !tbaa !463
  %100 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles112 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %100, i32 0, i32 0
  %101 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles112, align 8, !tbaa !462
  %smask_rgb113 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %101, i32 0, i32 1
  %102 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_rgb113, align 8, !tbaa !466
  %103 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !1
  %default_rgb114 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %103, i32 0, i32 2
  store %struct.cmm_profile_s* %102, %struct.cmm_profile_s** %default_rgb114, align 8, !tbaa !465
  %104 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !1
  %profiles115 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %104, i32 0, i32 0
  %105 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles115, align 8, !tbaa !462
  %smask_cmyk116 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %105, i32 0, i32 2
  %106 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %smask_cmyk116, align 8, !tbaa !468
  %107 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !1
  %default_cmyk117 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %107, i32 0, i32 3
  store %struct.cmm_profile_s* %106, %struct.cmm_profile_s** %default_cmyk117, align 8, !tbaa !467
  %108 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !1
  %smask_profiles118 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %108, i32 0, i32 7
  %109 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %smask_profiles118, align 8, !tbaa !458
  %swapped119 = getelementptr inbounds %struct.gsicc_smask_s, %struct.gsicc_smask_s* %109, i32 0, i32 4
  store i32 0, i32* %swapped119, align 4, !tbaa !460
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  call void @pdf14_free_smask_color(%struct.pdf14_device_s* %110) #7
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.108, %do.end
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.121, %if.then
  %111 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %111) #2
  %112 = bitcast %struct.gsicc_manager_s** %icc_manager to i8*
  call void @llvm.lifetime.end(i64 8, i8* %112) #2
  %113 = bitcast %struct.pdf14_smaskcolor_s** %smaskcolor to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #2
  %115 = load i32, i32* %retval
  ret i32 %115
}

; Function Attrs: nounwind uwtable
define internal i32 @get_pdf14_device_proto(%struct.gx_device_s* %dev, %struct.pdf14_device_s** %pdevproto, %struct.pdf14_device_s* %ptempdevproto, %struct.gs_imager_state_s* %pis, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdevproto.addr = alloca %struct.pdf14_device_s**, align 8
  %ptempdevproto.addr = alloca %struct.pdf14_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %dev_cs = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s** %pdevproto, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %ptempdevproto, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast i32* %dev_cs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_determine_default_blend_cs(%struct.gx_device_s* %1) #7
  store i32 %call, i32* %dev_cs, align 4, !tbaa !66
  %2 = load i32, i32* %dev_cs, align 4, !tbaa !66
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.7
    i32 2, label %sw.bb.8
    i32 3, label %sw.bb.9
    i32 4, label %sw.bb.27
  ]

sw.bb:                                            ; preds = %entry
  %3 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @gs_pdf14_Gray_device, %struct.pdf14_device_s** %3, align 8, !tbaa !1
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %5 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %6 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %5, align 8, !tbaa !1
  %7 = bitcast %struct.pdf14_device_s* %4 to i8*
  %8 = bitcast %struct.pdf14_device_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 11
  %max_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 0
  store i32 1, i32* %max_components, align 4, !tbaa !474
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 11
  %max_components2 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info1, i32 0, i32 0
  %11 = load i32, i32* %max_components2, align 4, !tbaa !474
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  store i32 %11, i32* %num_components, align 4, !tbaa !150
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info4, i32 0, i32 5
  store i32 255, i32* %max_gray, align 4, !tbaa !280
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 11
  %gray_index = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info5, i32 0, i32 4
  store i8 0, i8* %gray_index, align 1, !tbaa !475
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 11
  %dither_grays = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info6, i32 0, i32 7
  store i32 256, i32* %dither_grays, align 4, !tbaa !476
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %17 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %16, %struct.pdf14_device_s** %17, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %18 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @gs_pdf14_RGB_device, %struct.pdf14_device_s** %18, align 8, !tbaa !1
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %20 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %20, align 8, !tbaa !1
  %22 = bitcast %struct.pdf14_device_s* %19 to i8*
  %23 = bitcast %struct.pdf14_device_s* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %25 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %24, %struct.pdf14_device_s** %25, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.8:                                          ; preds = %entry
  %26 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @gs_pdf14_CMYK_device, %struct.pdf14_device_s** %26, align 8, !tbaa !1
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %28 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %28, align 8, !tbaa !1
  %30 = bitcast %struct.pdf14_device_s* %27 to i8*
  %31 = bitcast %struct.pdf14_device_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %33 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %32, %struct.pdf14_device_s** %33, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry
  %34 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @gs_pdf14_CMYKspot_device, %struct.pdf14_device_s** %34, align 8, !tbaa !1
  %35 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %35, i32 0, i32 5
  %num_spot_colors = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 1
  %36 = load i32, i32* %num_spot_colors, align 4, !tbaa !477
  %cmp = icmp sge i32 %36, 0
  br i1 %cmp, label %if.then, label %if.end.26

if.then:                                          ; preds = %sw.bb.9
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %38 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %38, align 8, !tbaa !1
  %40 = bitcast %struct.pdf14_device_s* %37 to i8*
  %41 = bitcast %struct.pdf14_device_s* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %42 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params10 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %42, i32 0, i32 5
  %num_spot_colors11 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params10, i32 0, i32 1
  %43 = load i32, i32* %num_spot_colors11, align 4, !tbaa !477
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 44
  %page_spot_colors = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 4
  store i32 %43, i32* %page_spot_colors, align 4, !tbaa !151
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %devn_params12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 44
  %num_std_colorant_names = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params12, i32 0, i32 2
  %46 = load i32, i32* %num_std_colorant_names, align 4, !tbaa !152
  %47 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params13 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %47, i32 0, i32 5
  %num_spot_colors14 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params13, i32 0, i32 1
  %48 = load i32, i32* %num_spot_colors14, align 4, !tbaa !477
  %add = add nsw i32 %46, %48
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 11
  %num_components16 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info15, i32 0, i32 1
  store i32 %add, i32* %num_components16, align 4, !tbaa !150
  %50 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %50, i32 0, i32 11
  %num_components18 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info17, i32 0, i32 1
  %51 = load i32, i32* %num_components18, align 4, !tbaa !150
  %cmp19 = icmp sgt i32 %51, 64
  br i1 %cmp19, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info21 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 11
  %num_components22 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info21, i32 0, i32 1
  store i32 64, i32* %num_components22, align 4, !tbaa !150
  br label %if.end

if.end:                                           ; preds = %if.then.20, %if.then
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info23 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 11
  %num_components24 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info23, i32 0, i32 1
  %54 = load i32, i32* %num_components24, align 4, !tbaa !150
  %mul = mul nsw i32 %54, 8
  %conv = trunc i32 %mul to i16
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info25, i32 0, i32 3
  store i16 %conv, i16* %depth, align 2, !tbaa !276
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %57 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %56, %struct.pdf14_device_s** %57, align 8, !tbaa !1
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %sw.bb.9
  br label %sw.epilog

sw.bb.27:                                         ; preds = %entry
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %59 = bitcast %struct.pdf14_device_s* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* bitcast (%struct.pdf14_device_s* @gs_pdf14_custom_device to i8*), i64 5024, i32 8, i1 false), !tbaa.struct !473
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info28 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %60, i32 0, i32 11
  %61 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info29 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %61, i32 0, i32 11
  %62 = bitcast %struct.gx_device_color_info_s* %color_info28 to i8*
  %63 = bitcast %struct.gx_device_color_info_s* %color_info29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 720, i32 8, i1 false), !tbaa.struct !65
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info30 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 11
  %num_components31 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info30, i32 0, i32 1
  %65 = load i32, i32* %num_components31, align 4, !tbaa !150
  %mul32 = mul nsw i32 %65, 8
  %conv33 = trunc i32 %mul32 to i16
  %66 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info34 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %66, i32 0, i32 11
  %depth35 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info34, i32 0, i32 3
  store i16 %conv33, i16* %depth35, align 2, !tbaa !276
  %67 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info36 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %67, i32 0, i32 11
  %max_gray37 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info36, i32 0, i32 5
  store i32 255, i32* %max_gray37, align 4, !tbaa !280
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info38 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info38, i32 0, i32 6
  store i32 255, i32* %max_color, align 4, !tbaa !278
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info39 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 11
  %dither_grays40 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info39, i32 0, i32 7
  store i32 256, i32* %dither_grays40, align 4, !tbaa !476
  %70 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info41 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %70, i32 0, i32 11
  %dither_colors = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info41, i32 0, i32 8
  store i32 256, i32* %dither_colors, align 4, !tbaa !478
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %72 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %71, %struct.pdf14_device_s** %72, align 8, !tbaa !1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %sw.bb.27, %if.end.26, %sw.bb.8, %sw.bb.7, %sw.bb
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default
  %73 = bitcast i32* %dev_cs to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #2
  %74 = load i32, i32* %retval
  ret i32 %74
}

declare void @gx_device_set_procs(%struct.gx_device_s*) #0

declare void @gx_device_fill_in_procs(%struct.gx_device_s*) #0

declare void @check_device_separable(%struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_determine_default_blend_cs(%struct.gx_device_s* %pdev) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %i = alloca i32, align 4
  %output_comp_num = alloca i32, align 4
  %num_cmyk_used = alloca i32, align 4
  %num_cmyk = alloca i32, align 4
  %pcomp_name = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %0, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 2
  %1 = load i32, i32* %polarity, align 4, !tbaa !479
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %color_info1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info1, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  %cmp2 = icmp eq i32 %3, 1
  br i1 %cmp2, label %if.then, label %if.else.7

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %4, i32 0, i32 11
  %num_components4 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  %5 = load i32, i32* %num_components4, align 4, !tbaa !195
  %cmp5 = icmp eq i32 %5, 1
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then
  store i32 1, i32* %retval
  br label %return

if.else.7:                                        ; preds = %lor.lhs.false
  %6 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %output_comp_num to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %num_cmyk_used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  store i32 0, i32* %num_cmyk_used, align 4, !tbaa !5
  %9 = bitcast i32* %num_cmyk to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 0, i32* %num_cmyk, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.7
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %cmp8 = icmp slt i32 %10, 4
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = bitcast i8** %pcomp_name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @DeviceCMYKComponents, i32 0, i64 %idxprom
  %13 = load i8*, i8** %arrayidx, align 8, !tbaa !1
  store i8* %13, i8** %pcomp_name, align 8, !tbaa !1
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 50
  %15 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !480
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %17 = load i8*, i8** %pcomp_name, align 8, !tbaa !1
  %18 = load i8*, i8** %pcomp_name, align 8, !tbaa !1
  %call = call i64 @strlen(i8* %18) #10
  %conv = trunc i64 %call to i32
  %call9 = call i32 %15(%struct.gx_device_s* %16, i8* %17, i32 %conv, i32 0) #7
  store i32 %call9, i32* %output_comp_num, align 4, !tbaa !5
  %19 = load i32, i32* %output_comp_num, align 4, !tbaa !5
  %cmp10 = icmp sge i32 %19, 0
  br i1 %cmp10, label %if.then.12, label %if.end.17

if.then.12:                                       ; preds = %for.body
  %20 = load i32, i32* %num_cmyk, align 4, !tbaa !5
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %num_cmyk, align 4, !tbaa !5
  %21 = load i32, i32* %output_comp_num, align 4, !tbaa !5
  %cmp13 = icmp ne i32 %21, 64
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %if.then.12
  %22 = load i32, i32* %num_cmyk_used, align 4, !tbaa !5
  %inc16 = add nsw i32 %22, 1
  store i32 %inc16, i32* %num_cmyk_used, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.15, %if.then.12
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %for.body
  %23 = bitcast i8** %pcomp_name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #2
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %inc18 = add nsw i32 %24, 1
  store i32 %inc18, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i32, i32* %num_cmyk_used, align 4, !tbaa !5
  %cmp19 = icmp eq i32 %25, 4
  br i1 %cmp19, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %for.end
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %color_info21 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %26, i32 0, i32 11
  %num_components22 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info21, i32 0, i32 1
  %27 = load i32, i32* %num_components22, align 4, !tbaa !195
  %cmp23 = icmp eq i32 %27, 4
  br i1 %cmp23, label %land.lhs.true.25, label %if.end.30

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %color_info26 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %28, i32 0, i32 11
  %max_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info26, i32 0, i32 0
  %29 = load i32, i32* %max_components, align 4, !tbaa !481
  %cmp27 = icmp eq i32 %29, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.30:                                        ; preds = %land.lhs.true.25, %land.lhs.true, %for.end
  %30 = load i32, i32* %num_cmyk, align 4, !tbaa !5
  %cmp31 = icmp ne i32 %30, 4
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.30
  store i32 4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %if.end.30
  store i32 3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.34, %if.then.33, %if.then.29
  %31 = bitcast i32* %num_cmyk to i8*
  call void @llvm.lifetime.end(i64 4, i8* %31) #2
  %32 = bitcast i32* %num_cmyk_used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %32) #2
  %33 = bitcast i32* %output_comp_num to i8*
  call void @llvm.lifetime.end(i64 4, i8* %33) #2
  %34 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %34) #2
  br label %return

return:                                           ; preds = %cleanup, %if.else, %if.then.6
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

declare %struct.gsicc_smask_s* @gsicc_new_iccsmask(%struct.gs_memory_s*) #0

; Function Attrs: nounwind uwtable
define internal void @pdf14_free_smask_color(%struct.pdf14_device_s* %pdev) #1 {
entry:
  %pdev.addr = alloca %struct.pdf14_device_s*, align 8
  store %struct.pdf14_device_s* %pdev, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %0 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %smaskcolor = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %0, i32 0, i32 48
  %1 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !299
  %cmp = icmp ne %struct.pdf14_smaskcolor_s* %1, null
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %2 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %smaskcolor1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %2, i32 0, i32 48
  %3 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor1, align 8, !tbaa !299
  %profiles = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %3, i32 0, i32 0
  %4 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles, align 8, !tbaa !462
  %cmp2 = icmp ne %struct.gsicc_smask_s* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 3
  %6 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %6, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %7 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %8 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %8, i32 0, i32 3
  %9 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory4, align 8, !tbaa !225
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %smaskcolor5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 48
  %11 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor5, align 8, !tbaa !299
  %profiles6 = getelementptr inbounds %struct.pdf14_smaskcolor_s, %struct.pdf14_smaskcolor_s* %11, i32 0, i32 0
  %12 = load %struct.gsicc_smask_s*, %struct.gsicc_smask_s** %profiles6, align 8, !tbaa !462
  %13 = bitcast %struct.gsicc_smask_s* %12 to i8*
  call void %7(%struct.gs_memory_s* %9, i8* %13, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.47, i32 0, i32 0)) #7
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory7 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 3
  %15 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory7, align 8, !tbaa !225
  %procs8 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %15, i32 0, i32 1
  %free_object9 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs8, i32 0, i32 2
  %16 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object9, align 8, !tbaa !166
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 3
  %18 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory10, align 8, !tbaa !225
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %smaskcolor11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 48
  %20 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor11, align 8, !tbaa !299
  %21 = bitcast %struct.pdf14_smaskcolor_s* %20 to i8*
  call void %16(%struct.gs_memory_s* %18, i8* %21, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.47, i32 0, i32 0)) #7
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %smaskcolor12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 48
  store %struct.pdf14_smaskcolor_s* null, %struct.pdf14_smaskcolor_s** %smaskcolor12, align 8, !tbaa !299
  br label %if.end.13

if.end.13:                                        ; preds = %if.end, %entry
  ret void
}

declare i32 @gx_default_text_begin(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**) #0

; Function Attrs: nounwind
declare i32 @strcmp(i8*, i8*) #3

declare void @gsicc_extract_profile(i32, %struct.cmm_dev_profile_s*, %struct.cmm_profile_s**, %struct.gsicc_rendering_param_s*) #0

declare %struct.cmm_profile_s* @gsicc_read_serial_icc(%struct.gx_device_s*, i64) #0

declare void @gsicc_get_icc_buff_hash(i8*, i64*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_update_device_color_procs(%struct.gx_device_s* %dev, i32 %group_color, i64 %icc_hashcode, %struct.gs_imager_state_s* %pis, %struct.cmm_profile_s* %iccprofile) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %group_color.addr = alloca i32, align 4
  %icc_hashcode.addr = alloca i64, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %iccprofile.addr = alloca %struct.cmm_profile_s*, align 8
  %pdevproto = alloca %struct.pdf14_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %new_14procs = alloca %struct.pdf14_procs_s*, align 8
  %parent_color_info = alloca %struct.pdf14_parent_color_s*, align 8
  %new_polarity = alloca i32, align 4
  %new_num_comps = alloca i32, align 4
  %new_additive = alloca i32, align 4
  %new_depth = alloca i8, align 1
  %pcrdev = alloca %struct.gx_device_clist_reader_s*, align 8
  %comp_bits = alloca [4 x i8], align 1
  %comp_shift = alloca [4 x i8], align 1
  %k = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %group_color, i32* %group_color.addr, align 4, !tbaa !66
  store i64 %icc_hashcode, i64* %icc_hashcode.addr, align 8, !tbaa !68
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.cmm_profile_s* %iccprofile, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdevproto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  store %struct.pdf14_device_s* null, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %1 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s* %2 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %3, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.pdf14_procs_s** %new_14procs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  store %struct.pdf14_procs_s* null, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  %5 = bitcast %struct.pdf14_parent_color_s** %parent_color_info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast i32* %new_polarity to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %new_num_comps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %new_additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  call void @llvm.lifetime.start(i64 1, i8* %new_depth) #2
  %9 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 4, i32 1, i1 false)
  %12 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 4, i32 1, i1 false)
  %14 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 40
  %17 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %17, 128
  store i32 %and, i32* %has_tags, align 4, !tbaa !5
  %18 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %18) #2
  %19 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %20, i32 0, i32 47
  %21 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %21, i32 0, i32 0
  %22 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %cmp = icmp ne %struct.pdf14_buf_s* %22, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %23 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %23, i32 0, i32 47
  %24 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx1, align 8, !tbaa !7
  %stack2 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %24, i32 0, i32 0
  %25 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack2, align 8, !tbaa !23
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %25, i32 0, i32 22
  %26 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  store %struct.pdf14_parent_color_s* %26, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 -21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %27, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* null, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !264
  %28 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %28, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %29 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %29, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %30 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  switch i32 %30, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.4
    i32 3, label %sw.bb.4
    i32 2, label %sw.bb.9
    i32 5, label %sw.bb.29
  ]

sw.bb:                                            ; preds = %do.end
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 1, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_Gray_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i8 8, i8* %new_depth, align 1, !tbaa !66
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 0
  store i8 8, i8* %arrayidx, align 1, !tbaa !66
  %arrayidx3 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 0
  store i8 0, i8* %arrayidx3, align 1, !tbaa !66
  br label %sw.epilog.97

sw.bb.4:                                          ; preds = %do.end, %do.end
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 3, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_RGB_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i8 24, i8* %new_depth, align 1, !tbaa !66
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.4
  %31 = load i32, i32* %k, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %31, 3
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %32 to i64
  %arrayidx6 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom
  store i8 8, i8* %arrayidx6, align 1, !tbaa !66
  %33 = load i32, i32* %k, align 4, !tbaa !5
  %sub = sub nsw i32 2, %33
  %mul = mul nsw i32 %sub, 8
  %conv = trunc i32 %mul to i8
  %34 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom7 = sext i32 %34 to i64
  %arrayidx8 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom7
  store i8 %conv, i8* %arrayidx8, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %k, align 4, !tbaa !5
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog.97

sw.bb.9:                                          ; preds = %do.end
  store i32 0, i32* %new_polarity, align 4, !tbaa !66
  store i32 4, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_CMYK_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 0, i32* %new_additive, align 4, !tbaa !5
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %36, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %37 = load i32, i32* %num_components, align 4, !tbaa !195
  %cmp10 = icmp sgt i32 %37, 4
  br i1 %cmp10, label %if.then.12, label %if.else.13

if.then.12:                                       ; preds = %sw.bb.9
  store %struct.pdf14_procs_s* @cmykspot_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  br label %if.end.14

if.else.13:                                       ; preds = %sw.bb.9
  store %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.13, %if.then.12
  store i8 32, i8* %new_depth, align 1, !tbaa !66
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.26, %if.end.14
  %38 = load i32, i32* %k, align 4, !tbaa !5
  %cmp16 = icmp slt i32 %38, 4
  br i1 %cmp16, label %for.body.18, label %for.end.28

for.body.18:                                      ; preds = %for.cond.15
  %39 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom19 = sext i32 %39 to i64
  %arrayidx20 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom19
  store i8 8, i8* %arrayidx20, align 1, !tbaa !66
  %40 = load i32, i32* %k, align 4, !tbaa !5
  %sub21 = sub nsw i32 3, %40
  %mul22 = mul nsw i32 %sub21, 8
  %conv23 = trunc i32 %mul22 to i8
  %41 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom24 = sext i32 %41 to i64
  %arrayidx25 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom24
  store i8 %conv23, i8* %arrayidx25, align 1, !tbaa !66
  br label %for.inc.26

for.inc.26:                                       ; preds = %for.body.18
  %42 = load i32, i32* %k, align 4, !tbaa !5
  %inc27 = add nsw i32 %42, 1
  store i32 %inc27, i32* %k, align 4, !tbaa !5
  br label %for.cond.15

for.end.28:                                       ; preds = %for.cond.15
  br label %sw.epilog.97

sw.bb.29:                                         ; preds = %do.end
  %43 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %cmp30 = icmp eq %struct.cmm_profile_s* %43, null
  br i1 %cmp30, label %land.lhs.true, label %if.else.42

land.lhs.true:                                    ; preds = %sw.bb.29
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 58
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %cmp32 = icmp ne %struct.gx_device_s* %45, null
  br i1 %cmp32, label %if.then.34, label %if.else.42

if.then.34:                                       ; preds = %land.lhs.true
  %46 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %46, i32 0, i32 58
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device35, align 8, !tbaa !234
  %48 = bitcast %struct.gx_device_s* %47 to %struct.gx_device_clist_reader_s*
  store %struct.gx_device_clist_reader_s* %48, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %49 = load %struct.gx_device_clist_reader_s*, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %50 = bitcast %struct.gx_device_clist_reader_s* %49 to %struct.gx_device_s*
  %51 = load i64, i64* %icc_hashcode.addr, align 8, !tbaa !68
  %call = call %struct.cmm_profile_s* @gsicc_read_serial_icc(%struct.gx_device_s* %50, i64 %51) #7
  store %struct.cmm_profile_s* %call, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %52 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %cmp36 = icmp eq %struct.cmm_profile_s* %52, null
  br i1 %cmp36, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %if.then.34
  %call39 = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.pdf14_update_device_color_procs, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 3989, i32 0, i32 -1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48, i32 0, i32 0)) #7
  store i32 %call39, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.40:                                        ; preds = %if.then.34
  %53 = load %struct.gx_device_clist_reader_s*, %struct.gx_device_clist_reader_s** %pcrdev, align 8, !tbaa !1
  %54 = bitcast %struct.gx_device_clist_reader_s* %53 to %struct.gx_device_s*
  %55 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %dev41 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %55, i32 0, i32 15
  store %struct.gx_device_s* %54, %struct.gx_device_s** %dev41, align 8, !tbaa !160
  br label %if.end.55

if.else.42:                                       ; preds = %land.lhs.true, %sw.bb.29
  br label %do.body.43

do.body.43:                                       ; preds = %if.else.42
  %56 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %56, null
  br i1 %tobool, label %if.then.44, label %if.end.52

if.then.44:                                       ; preds = %do.body.43
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %57 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %57, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %58 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc46 = add nsw i64 %58, 1
  store i64 %inc46, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.47

do.body.47:                                       ; preds = %do.body.45
  br label %do.cond.48

do.cond.48:                                       ; preds = %do.body.47
  br label %do.end.49

do.end.49:                                        ; preds = %do.cond.48
  br label %do.cond.50

do.cond.50:                                       ; preds = %do.end.49
  br label %do.end.51

do.end.51:                                        ; preds = %do.cond.50
  br label %if.end.52

if.end.52:                                        ; preds = %do.end.51, %do.body.43
  br label %do.cond.53

do.cond.53:                                       ; preds = %if.end.52
  br label %do.end.54

do.end.54:                                        ; preds = %do.cond.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %if.end.40
  %59 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %num_comps = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %59, i32 0, i32 0
  %60 = load i8, i8* %num_comps, align 1, !tbaa !482
  %conv56 = zext i8 %60 to i32
  store i32 %conv56, i32* %new_num_comps, align 4, !tbaa !5
  %61 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %mul57 = mul nsw i32 %61, 8
  %conv58 = trunc i32 %mul57 to i8
  store i8 %conv58, i8* %new_depth, align 1, !tbaa !66
  %62 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %cmp59 = icmp eq i32 %62, 4
  br i1 %cmp59, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %if.end.55
  store i32 0, i32* %new_additive, align 4, !tbaa !5
  store i32 0, i32* %new_polarity, align 4, !tbaa !66
  br label %if.end.63

if.else.62:                                       ; preds = %if.end.55
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.62, %if.then.61
  %63 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  switch i32 %63, label %sw.epilog [
    i32 1, label %sw.bb.64
    i32 3, label %sw.bb.67
    i32 4, label %sw.bb.82
  ]

sw.bb.64:                                         ; preds = %if.end.63
  store %struct.pdf14_device_s* @gs_pdf14_Gray_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  %arrayidx65 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 0
  store i8 8, i8* %arrayidx65, align 1, !tbaa !66
  %arrayidx66 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 0
  store i8 0, i8* %arrayidx66, align 1, !tbaa !66
  br label %sw.epilog

sw.bb.67:                                         ; preds = %if.end.63
  store %struct.pdf14_device_s* @gs_pdf14_RGB_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.68

for.cond.68:                                      ; preds = %for.inc.79, %sw.bb.67
  %64 = load i32, i32* %k, align 4, !tbaa !5
  %cmp69 = icmp slt i32 %64, 3
  br i1 %cmp69, label %for.body.71, label %for.end.81

for.body.71:                                      ; preds = %for.cond.68
  %65 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom72 = sext i32 %65 to i64
  %arrayidx73 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom72
  store i8 8, i8* %arrayidx73, align 1, !tbaa !66
  %66 = load i32, i32* %k, align 4, !tbaa !5
  %sub74 = sub nsw i32 2, %66
  %mul75 = mul nsw i32 %sub74, 8
  %conv76 = trunc i32 %mul75 to i8
  %67 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom77 = sext i32 %67 to i64
  %arrayidx78 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom77
  store i8 %conv76, i8* %arrayidx78, align 1, !tbaa !66
  br label %for.inc.79

for.inc.79:                                       ; preds = %for.body.71
  %68 = load i32, i32* %k, align 4, !tbaa !5
  %inc80 = add nsw i32 %68, 1
  store i32 %inc80, i32* %k, align 4, !tbaa !5
  br label %for.cond.68

for.end.81:                                       ; preds = %for.cond.68
  br label %sw.epilog

sw.bb.82:                                         ; preds = %if.end.63
  store %struct.pdf14_device_s* @gs_pdf14_CMYK_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.94, %sw.bb.82
  %69 = load i32, i32* %k, align 4, !tbaa !5
  %cmp84 = icmp slt i32 %69, 4
  br i1 %cmp84, label %for.body.86, label %for.end.96

for.body.86:                                      ; preds = %for.cond.83
  %70 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom87 = sext i32 %70 to i64
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom87
  store i8 8, i8* %arrayidx88, align 1, !tbaa !66
  %71 = load i32, i32* %k, align 4, !tbaa !5
  %sub89 = sub nsw i32 3, %71
  %mul90 = mul nsw i32 %sub89, 8
  %conv91 = trunc i32 %mul90 to i8
  %72 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom92 = sext i32 %72 to i64
  %arrayidx93 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom92
  store i8 %conv91, i8* %arrayidx93, align 1, !tbaa !66
  br label %for.inc.94

for.inc.94:                                       ; preds = %for.body.86
  %73 = load i32, i32* %k, align 4, !tbaa !5
  %inc95 = add nsw i32 %73, 1
  store i32 %inc95, i32* %k, align 4, !tbaa !5
  br label %for.cond.83

for.end.96:                                       ; preds = %for.cond.83
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.63, %for.end.96, %for.end.81, %sw.bb.64
  br label %sw.epilog.97

sw.default:                                       ; preds = %do.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog.97:                                     ; preds = %sw.epilog, %for.end.28, %for.end, %sw.bb
  br label %do.body.98

do.body.98:                                       ; preds = %sw.epilog.97
  br label %do.cond.99

do.cond.99:                                       ; preds = %do.body.98
  br label %do.end.100

do.end.100:                                       ; preds = %do.cond.99
  %74 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs101 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %74, i32 0, i32 38
  %75 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs101, align 8, !tbaa !265
  %76 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %get_cmap_procs102 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %76, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %75, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs102, align 8, !tbaa !264
  %77 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %77, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  %78 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %79 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %parent_color_mapping_procs103 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %79, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %78, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs103, align 8, !tbaa !261
  %80 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs104 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %80, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs104, i32 0, i32 50
  %81 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %82 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %parent_color_comp_index105 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %82, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %81, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index105, align 8, !tbaa !263
  %83 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %83, i32 0, i32 46
  %84 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %85 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %85, i32 0, i32 14
  store %struct.pdf14_nonseparable_blending_procs_s* %84, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %86 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info106 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %86, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info106, i32 0, i32 2
  %87 = load i32, i32* %polarity, align 4, !tbaa !196
  %88 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %polarity107 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %88, i32 0, i32 2
  store i32 %87, i32* %polarity107, align 4, !tbaa !268
  %89 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info108 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %89, i32 0, i32 11
  %num_components109 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info108, i32 0, i32 1
  %90 = load i32, i32* %num_components109, align 4, !tbaa !150
  %91 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %num_components110 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %91, i32 0, i32 0
  store i32 %90, i32* %num_components110, align 4, !tbaa !269
  %92 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx111 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %92, i32 0, i32 47
  %93 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx111, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %93, i32 0, i32 4
  %94 = load i32, i32* %additive, align 4, !tbaa !272
  %95 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %95, i32 0, i32 1
  store i32 %94, i32* %isadditive, align 4, !tbaa !271
  %96 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %96, i32 0, i32 45
  %97 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %98 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %unpack_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %98, i32 0, i32 13
  store %struct.pdf14_procs_s* %97, %struct.pdf14_procs_s** %unpack_procs, align 8, !tbaa !273
  %99 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info112 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %99, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info112, i32 0, i32 3
  %100 = load i16, i16* %depth, align 2, !tbaa !276
  %conv113 = trunc i16 %100 to i8
  %101 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %depth114 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %101, i32 0, i32 5
  store i8 %conv113, i8* %depth114, align 1, !tbaa !275
  %102 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %comp_bits115 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %102, i32 0, i32 4
  %103 = bitcast [64 x i8]* %comp_bits115 to i8*
  %104 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info116 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %104, i32 0, i32 11
  %comp_bits117 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info116, i32 0, i32 12
  %105 = bitcast [64 x i8]* %comp_bits117 to i8*
  %call118 = call i8* @memcpy(i8* %103, i8* %105, i64 64) #8
  %106 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %comp_shift119 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %106, i32 0, i32 3
  %107 = bitcast [64 x i8]* %comp_shift119 to i8*
  %108 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info120 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %108, i32 0, i32 11
  %comp_shift121 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info120, i32 0, i32 11
  %109 = bitcast [64 x i8]* %comp_shift121 to i8*
  %call122 = call i8* @memcpy(i8* %107, i8* %109, i64 64) #8
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info123 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %110, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info123, i32 0, i32 6
  %111 = load i32, i32* %max_color, align 4, !tbaa !278
  %112 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %max_color124 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %112, i32 0, i32 7
  store i32 %111, i32* %max_color124, align 4, !tbaa !277
  %113 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info125 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %113, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info125, i32 0, i32 5
  %114 = load i32, i32* %max_gray, align 4, !tbaa !280
  %115 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %max_gray126 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %115, i32 0, i32 6
  store i32 %114, i32* %max_gray126, align 4, !tbaa !279
  %116 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs127 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %116, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs127, i32 0, i32 51
  %117 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %118 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %encode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %118, i32 0, i32 10
  store i64 (%struct.gx_device_s*, i16*)* %117, i64 (%struct.gx_device_s*, i16*)** %encode, align 8, !tbaa !295
  %119 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs128 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %119, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs128, i32 0, i32 52
  %120 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !298
  %121 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %decode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %121, i32 0, i32 11
  store i32 (%struct.gx_device_s*, i64, i16*)* %120, i32 (%struct.gx_device_s*, i64, i16*)** %decode, align 8, !tbaa !297
  %122 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  %cmp129 = icmp eq i32 %122, 5
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.137

land.lhs.true.131:                                ; preds = %do.end.100
  %123 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %cmp132 = icmp ne %struct.cmm_profile_s* %123, null
  br i1 %cmp132, label %if.then.134, label %if.end.137

if.then.134:                                      ; preds = %land.lhs.true.131
  %124 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs135 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %124, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs135, i32 0, i32 67
  %125 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %126 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call136 = call i32 %125(%struct.gx_device_s* %126, %struct.cmm_dev_profile_s** %dev_profile) #7
  %127 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %128 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %128, i32 0, i32 15
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %127, %struct.cmm_profile_s** %icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.134, %land.lhs.true.131, %do.end.100
  %129 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs138 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %129, i32 0, i32 42
  %encode_color139 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs138, i32 0, i32 51
  %130 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color139, align 8, !tbaa !296
  %cmp140 = icmp eq i64 (%struct.gx_device_s*, i16*)* %130, @pdf14_compressed_encode_color
  br i1 %cmp140, label %land.lhs.true.142, label %if.end.159

land.lhs.true.142:                                ; preds = %if.end.137
  %131 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %cmp143 = icmp eq i32 %131, 1
  br i1 %cmp143, label %if.then.145, label %if.end.159

if.then.145:                                      ; preds = %land.lhs.true.142
  %132 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %132, i32 0, i32 1
  %133 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs, align 8, !tbaa !450
  %decode_color146 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %133, i32 0, i32 52
  %134 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color146, align 8, !tbaa !483
  %135 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs147 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %135, i32 0, i32 42
  %decode_color148 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs147, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %134, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color148, align 8, !tbaa !298
  %136 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool149 = icmp ne i32 %136, 0
  br i1 %tobool149, label %if.then.150, label %if.else.153

if.then.150:                                      ; preds = %if.then.145
  %137 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs151 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %137, i32 0, i32 42
  %encode_color152 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs151, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color_tag, i64 (%struct.gx_device_s*, i16*)** %encode_color152, align 8, !tbaa !296
  br label %if.end.158

if.else.153:                                      ; preds = %if.then.145
  %138 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs154 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %138, i32 0, i32 1
  %139 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs154, align 8, !tbaa !450
  %encode_color155 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %139, i32 0, i32 51
  %140 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color155, align 8, !tbaa !484
  %141 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs156 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %141, i32 0, i32 42
  %encode_color157 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs156, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %140, i64 (%struct.gx_device_s*, i16*)** %encode_color157, align 8, !tbaa !296
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.153, %if.then.150
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %land.lhs.true.142, %if.end.137
  %142 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs160 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %142, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_get_cmap_procs_group, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs160, align 8, !tbaa !265
  %143 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %144 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %143, %struct.gx_device_s* %144) #7
  %145 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs161 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %145, i32 0, i32 1
  %146 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs161, align 8, !tbaa !450
  %get_color_mapping_procs162 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %146, i32 0, i32 49
  %147 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs162, align 8, !tbaa !485
  %148 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs163 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %148, i32 0, i32 42
  %get_color_mapping_procs164 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs163, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %147, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs164, align 8, !tbaa !266
  %149 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs165 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %149, i32 0, i32 1
  %150 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs165, align 8, !tbaa !450
  %get_color_comp_index166 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %150, i32 0, i32 50
  %151 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index166, align 8, !tbaa !486
  %152 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs167 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %152, i32 0, i32 42
  %get_color_comp_index168 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs167, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %151, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index168, align 8, !tbaa !267
  %153 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %blend_procs169 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %153, i32 0, i32 46
  %154 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs169, align 8, !tbaa !230
  %155 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs170 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %155, i32 0, i32 46
  store %struct.pdf14_nonseparable_blending_procs_s* %154, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs170, align 8, !tbaa !230
  %156 = load i32, i32* %new_polarity, align 4, !tbaa !66
  %157 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info171 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %157, i32 0, i32 11
  %polarity172 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info171, i32 0, i32 2
  store i32 %156, i32* %polarity172, align 4, !tbaa !196
  %158 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %159 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info173 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %159, i32 0, i32 11
  %num_components174 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info173, i32 0, i32 1
  store i32 %158, i32* %num_components174, align 4, !tbaa !150
  %160 = load i32, i32* %new_additive, align 4, !tbaa !5
  %161 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx175 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %161, i32 0, i32 47
  %162 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx175, align 8, !tbaa !7
  %additive176 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %162, i32 0, i32 4
  store i32 %160, i32* %additive176, align 4, !tbaa !272
  %163 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  %164 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs177 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %164, i32 0, i32 45
  store %struct.pdf14_procs_s* %163, %struct.pdf14_procs_s** %pdf14_procs177, align 8, !tbaa !274
  %165 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool178 = icmp ne i32 %165, 0
  br i1 %tobool178, label %if.then.179, label %if.end.182

if.then.179:                                      ; preds = %if.end.159
  %166 = load i8, i8* %new_depth, align 1, !tbaa !66
  %conv180 = zext i8 %166 to i32
  %add = add nsw i32 %conv180, 8
  %conv181 = trunc i32 %add to i8
  store i8 %conv181, i8* %new_depth, align 1, !tbaa !66
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.179, %if.end.159
  %167 = load i8, i8* %new_depth, align 1, !tbaa !66
  %conv183 = zext i8 %167 to i16
  %168 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info184 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %168, i32 0, i32 11
  %depth185 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info184, i32 0, i32 3
  store i16 %conv183, i16* %depth185, align 2, !tbaa !276
  %169 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info186 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %169, i32 0, i32 11
  %comp_bits187 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info186, i32 0, i32 12
  %170 = bitcast [64 x i8]* %comp_bits187 to i8*
  %call188 = call i8* @memset(i8* %170, i32 0, i64 64) #8
  %171 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info189 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %171, i32 0, i32 11
  %comp_shift190 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info189, i32 0, i32 11
  %172 = bitcast [64 x i8]* %comp_shift190 to i8*
  %call191 = call i8* @memset(i8* %172, i32 0, i64 64) #8
  %173 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info192 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %173, i32 0, i32 11
  %comp_bits193 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info192, i32 0, i32 12
  %174 = bitcast [64 x i8]* %comp_bits193 to i8*
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i32 0
  %call194 = call i8* @memcpy(i8* %174, i8* %arraydecay, i64 4) #8
  %175 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info195 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %175, i32 0, i32 11
  %comp_shift196 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info195, i32 0, i32 11
  %176 = bitcast [64 x i8]* %comp_shift196 to i8*
  %arraydecay197 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i32 0
  %call198 = call i8* @memcpy(i8* %176, i8* %arraydecay197, i64 4) #8
  %177 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info199 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %177, i32 0, i32 11
  %max_color200 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info199, i32 0, i32 6
  store i32 255, i32* %max_color200, align 4, !tbaa !278
  %178 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info201 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %178, i32 0, i32 11
  %max_gray202 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info201, i32 0, i32 5
  store i32 255, i32* %max_gray202, align 4, !tbaa !280
  %179 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  %cmp203 = icmp eq i32 %179, 5
  br i1 %cmp203, label %land.lhs.true.205, label %if.end.227

land.lhs.true.205:                                ; preds = %if.end.182
  %180 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %cmp206 = icmp ne %struct.cmm_profile_s* %180, null
  br i1 %cmp206, label %if.then.208, label %if.end.227

if.then.208:                                      ; preds = %land.lhs.true.205
  %181 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile.addr, align 8, !tbaa !1
  %182 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %182, i32 0, i32 39
  %183 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %183, i32 0, i32 0
  %arrayidx209 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  store %struct.cmm_profile_s* %181, %struct.cmm_profile_s** %arrayidx209, align 8, !tbaa !1
  br label %do.body.210

do.body.210:                                      ; preds = %if.then.208
  %184 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %icc_profile211 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %184, i32 0, i32 15
  %185 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile211, align 8, !tbaa !281
  %tobool212 = icmp ne %struct.cmm_profile_s* %185, null
  br i1 %tobool212, label %if.then.213, label %if.end.224

if.then.213:                                      ; preds = %do.body.210
  br label %do.body.214

do.body.214:                                      ; preds = %if.then.213
  %186 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info, align 8, !tbaa !1
  %icc_profile215 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %186, i32 0, i32 15
  %187 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile215, align 8, !tbaa !281
  %rc216 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %187, i32 0, i32 18
  %ref_count217 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc216, i32 0, i32 0
  %188 = load i64, i64* %ref_count217, align 8, !tbaa !145
  %inc218 = add nsw i64 %188, 1
  store i64 %inc218, i64* %ref_count217, align 8, !tbaa !145
  br label %do.body.219

do.body.219:                                      ; preds = %do.body.214
  br label %do.cond.220

do.cond.220:                                      ; preds = %do.body.219
  br label %do.end.221

do.end.221:                                       ; preds = %do.cond.220
  br label %do.cond.222

do.cond.222:                                      ; preds = %do.end.221
  br label %do.end.223

do.end.223:                                       ; preds = %do.cond.222
  br label %if.end.224

if.end.224:                                       ; preds = %do.end.223, %do.body.210
  br label %do.cond.225

do.cond.225:                                      ; preds = %if.end.224
  br label %do.end.226

do.end.226:                                       ; preds = %do.cond.225
  br label %if.end.227

if.end.227:                                       ; preds = %do.end.226, %land.lhs.true.205, %if.end.182
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.227, %sw.default, %if.then.38, %if.else
  %189 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %189) #2
  %190 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %190) #2
  %191 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %191) #2
  %192 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %192) #2
  %193 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %193) #2
  %194 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %194) #2
  %195 = bitcast %struct.gx_device_clist_reader_s** %pcrdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %195) #2
  call void @llvm.lifetime.end(i64 1, i8* %new_depth) #2
  %196 = bitcast i32* %new_additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %196) #2
  %197 = bitcast i32* %new_num_comps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %197) #2
  %198 = bitcast i32* %new_polarity to i8*
  call void @llvm.lifetime.end(i64 4, i8* %198) #2
  %199 = bitcast %struct.pdf14_parent_color_s** %parent_color_info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %199) #2
  %200 = bitcast %struct.pdf14_procs_s** %new_14procs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %200) #2
  %201 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %201) #2
  %202 = bitcast %struct.pdf14_device_s** %pdevproto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %202) #2
  %203 = load i32, i32* %retval
  ret i32 %203
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare i64 @pdf14_compressed_encode_color(%struct.gx_device_s*, i16*) #0

declare i64 @pdf14_encode_color_tag(%struct.gx_device_s*, i16*) #0

; Function Attrs: nounwind uwtable
define internal %struct.gx_color_map_procs_s* @pdf14_get_cmap_procs_group(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  ret %struct.gx_color_map_procs_s* @pdf14_cmap_many_group
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_gray_direct_group(i16 signext %gray, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %gray.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %gray, i16* %gray.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %3, i32* %ncomps, align 4, !tbaa !5
  %4 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %4) #2
  %5 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %6 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %9, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %10, i32 0, i32 20
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %11, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %12, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 11
  %num_components4 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  %14 = load i32, i32* %num_components4, align 4, !tbaa !195
  store i32 %14, i32* %ncomps, align 4, !tbaa !5
  %15 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %15, 1
  br i1 %cmp5, label %if.then.6, label %if.else.13

if.then.6:                                        ; preds = %if.end
  %16 = load i16, i16* %gray.addr, align 2, !tbaa !67
  %conv = sext i16 %16 to i32
  %shl = shl i32 %conv, 1
  %17 = load i16, i16* %gray.addr, align 2, !tbaa !67
  %conv7 = sext i16 %17 to i32
  %shr = ashr i32 %conv7, 11
  %add = add nsw i32 %shl, %shr
  %conv8 = trunc i32 %add to i16
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 0
  store i16 %conv8, i16* %arrayidx, align 2, !tbaa !67
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 51
  %19 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call = call i64 %19(%struct.gx_device_s* %20, i16* %arraydecay) #7
  store i64 %call, i64* %color, align 8, !tbaa !68
  %21 = load i64, i64* %color, align 8, !tbaa !68
  %cmp9 = icmp ne i64 %21, -1
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.6
  %22 = load i64, i64* %color, align 8, !tbaa !68
  %23 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %23, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %22, i64* %pure, align 8, !tbaa !68
  %24 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %24, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.then.6
  br label %if.end.41

if.else.13:                                       ; preds = %if.end
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs14 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs14, i32 0, i32 49
  %26 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call15 = call %struct.gx_cm_color_map_procs_s* %26(%struct.gx_device_s* %27) #7
  %map_gray = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call15, i32 0, i32 0
  %28 = load void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, i16, i16*)** %map_gray, align 8, !tbaa !489
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %30 = load i16, i16* %gray.addr, align 2, !tbaa !67
  %arraydecay16 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %28(%struct.gx_device_s* %29, i16 signext %30, i16* %arraydecay16) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.13
  %31 = load i32, i32* %i, align 4, !tbaa !5
  %32 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp17 = icmp slt i32 %31, %32
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %33 to i64
  %arrayidx19 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %34 = load i16, i16* %arrayidx19, align 2, !tbaa !67
  %conv20 = sext i16 %34 to i32
  %shl21 = shl i32 %conv20, 1
  %35 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom22 = sext i32 %35 to i64
  %arrayidx23 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom22
  %36 = load i16, i16* %arrayidx23, align 2, !tbaa !67
  %conv24 = sext i16 %36 to i32
  %shr25 = ashr i32 %conv24, 11
  %add26 = add nsw i32 %shl21, %shr25
  %conv27 = trunc i32 %add26 to i16
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom28 = sext i32 %37 to i64
  %arrayidx29 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom28
  store i16 %conv27, i16* %arrayidx29, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs30 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %39, i32 0, i32 42
  %encode_color31 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs30, i32 0, i32 51
  %40 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color31, align 8, !tbaa !487
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay32 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call33 = call i64 %40(%struct.gx_device_s* %41, i16* %arraydecay32) #7
  store i64 %call33, i64* %color, align 8, !tbaa !68
  %42 = load i64, i64* %color, align 8, !tbaa !68
  %cmp34 = icmp ne i64 %42, -1
  br i1 %cmp34, label %if.then.36, label %if.end.40

if.then.36:                                       ; preds = %for.end
  %43 = load i64, i64* %color, align 8, !tbaa !68
  %44 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors37 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %44, i32 0, i32 1
  %pure38 = bitcast %union._c* %colors37 to i64*
  store i64 %43, i64* %pure38, align 8, !tbaa !68
  %45 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type39 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %45, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type39, align 8, !tbaa !227
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.36, %for.end
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.12
  %46 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #2
  %47 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #2
  %48 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %48) #2
  %49 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %49) #2
  %50 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %50) #2
  %51 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_rgb_direct_group(i16 signext %r, i16 signext %g, i16 signext %b, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %r.addr = alloca i16, align 2
  %g.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %r, i16* %r.addr, align 2, !tbaa !67
  store i16 %g, i16* %g.addr, align 2, !tbaa !67
  store i16 %b, i16* %b.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %3, i32* %ncomps, align 4, !tbaa !5
  %4 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %4) #2
  %5 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %6 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %9, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %10, i32 0, i32 20
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %11, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %12, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 11
  %num_components4 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  %14 = load i32, i32* %num_components4, align 4, !tbaa !195
  store i32 %14, i32* %ncomps, align 4, !tbaa !5
  %15 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %15, 3
  br i1 %cmp5, label %if.then.6, label %if.else.27

if.then.6:                                        ; preds = %if.end
  %16 = load i16, i16* %r.addr, align 2, !tbaa !67
  %conv = sext i16 %16 to i32
  %shl = shl i32 %conv, 1
  %17 = load i16, i16* %r.addr, align 2, !tbaa !67
  %conv7 = sext i16 %17 to i32
  %shr = ashr i32 %conv7, 11
  %add = add nsw i32 %shl, %shr
  %conv8 = trunc i32 %add to i16
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 0
  store i16 %conv8, i16* %arrayidx, align 2, !tbaa !67
  %18 = load i16, i16* %g.addr, align 2, !tbaa !67
  %conv9 = sext i16 %18 to i32
  %shl10 = shl i32 %conv9, 1
  %19 = load i16, i16* %g.addr, align 2, !tbaa !67
  %conv11 = sext i16 %19 to i32
  %shr12 = ashr i32 %conv11, 11
  %add13 = add nsw i32 %shl10, %shr12
  %conv14 = trunc i32 %add13 to i16
  %arrayidx15 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 1
  store i16 %conv14, i16* %arrayidx15, align 2, !tbaa !67
  %20 = load i16, i16* %b.addr, align 2, !tbaa !67
  %conv16 = sext i16 %20 to i32
  %shl17 = shl i32 %conv16, 1
  %21 = load i16, i16* %b.addr, align 2, !tbaa !67
  %conv18 = sext i16 %21 to i32
  %shr19 = ashr i32 %conv18, 11
  %add20 = add nsw i32 %shl17, %shr19
  %conv21 = trunc i32 %add20 to i16
  %arrayidx22 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 2
  store i16 %conv21, i16* %arrayidx22, align 2, !tbaa !67
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 51
  %23 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call = call i64 %23(%struct.gx_device_s* %24, i16* %arraydecay) #7
  store i64 %call, i64* %color, align 8, !tbaa !68
  %25 = load i64, i64* %color, align 8, !tbaa !68
  %cmp23 = icmp ne i64 %25, -1
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.6
  %26 = load i64, i64* %color, align 8, !tbaa !68
  %27 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %27, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %26, i64* %pure, align 8, !tbaa !68
  %28 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %28, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.then.6
  br label %if.end.55

if.else.27:                                       ; preds = %if.end
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs28 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %29, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs28, i32 0, i32 49
  %30 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call29 = call %struct.gx_cm_color_map_procs_s* %30(%struct.gx_device_s* %31) #7
  %map_rgb = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call29, i32 0, i32 1
  %32 = load void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)** %map_rgb, align 8, !tbaa !491
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %34 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %35 = load i16, i16* %r.addr, align 2, !tbaa !67
  %36 = load i16, i16* %g.addr, align 2, !tbaa !67
  %37 = load i16, i16* %b.addr, align 2, !tbaa !67
  %arraydecay30 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %32(%struct.gx_device_s* %33, %struct.gs_imager_state_s* %34, i16 signext %35, i16 signext %36, i16 signext %37, i16* %arraydecay30) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.27
  %38 = load i32, i32* %i, align 4, !tbaa !5
  %39 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp31 = icmp slt i32 %38, %39
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %40 to i64
  %arrayidx33 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %41 = load i16, i16* %arrayidx33, align 2, !tbaa !67
  %conv34 = sext i16 %41 to i32
  %shl35 = shl i32 %conv34, 1
  %42 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom36 = sext i32 %42 to i64
  %arrayidx37 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom36
  %43 = load i16, i16* %arrayidx37, align 2, !tbaa !67
  %conv38 = sext i16 %43 to i32
  %shr39 = ashr i32 %conv38, 11
  %add40 = add nsw i32 %shl35, %shr39
  %conv41 = trunc i32 %add40 to i16
  %44 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom42 = sext i32 %44 to i64
  %arrayidx43 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom42
  store i16 %conv41, i16* %arrayidx43, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %45 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %45, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs44 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %46, i32 0, i32 42
  %encode_color45 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs44, i32 0, i32 51
  %47 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color45, align 8, !tbaa !487
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay46 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call47 = call i64 %47(%struct.gx_device_s* %48, i16* %arraydecay46) #7
  store i64 %call47, i64* %color, align 8, !tbaa !68
  %49 = load i64, i64* %color, align 8, !tbaa !68
  %cmp48 = icmp ne i64 %49, -1
  br i1 %cmp48, label %if.then.50, label %if.end.54

if.then.50:                                       ; preds = %for.end
  %50 = load i64, i64* %color, align 8, !tbaa !68
  %51 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors51 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %51, i32 0, i32 1
  %pure52 = bitcast %union._c* %colors51 to i64*
  store i64 %50, i64* %pure52, align 8, !tbaa !68
  %52 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type53 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %52, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type53, align 8, !tbaa !227
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.50, %for.end
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.end.26
  %53 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #2
  %54 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #2
  %55 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %55) #2
  %56 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %56) #2
  %57 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #2
  %58 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_cmyk_direct_group(i16 signext %c, i16 signext %m, i16 signext %y, i16 signext %k, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select, %struct.gs_color_space_s* %pcs) #1 {
entry:
  %c.addr = alloca i16, align 2
  %m.addr = alloca i16, align 2
  %y.addr = alloca i16, align 2
  %k.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %pcs.addr = alloca %struct.gs_color_space_s*, align 8
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %c, i16* %c.addr, align 2, !tbaa !67
  store i16 %m, i16* %m.addr, align 2, !tbaa !67
  store i16 %y, i16* %y.addr, align 2, !tbaa !67
  store i16 %k, i16* %k.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  store %struct.gs_color_space_s* %pcs, %struct.gs_color_space_s** %pcs.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %3, i32* %ncomps, align 4, !tbaa !5
  %4 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %4) #2
  %5 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %6 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %9, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %10, i32 0, i32 20
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %11, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %12, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 11
  %num_components4 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  %14 = load i32, i32* %num_components4, align 4, !tbaa !195
  store i32 %14, i32* %ncomps, align 4, !tbaa !5
  %15 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %15, 4
  br i1 %cmp5, label %if.then.6, label %if.else.34

if.then.6:                                        ; preds = %if.end
  %16 = load i16, i16* %c.addr, align 2, !tbaa !67
  %conv = sext i16 %16 to i32
  %shl = shl i32 %conv, 1
  %17 = load i16, i16* %c.addr, align 2, !tbaa !67
  %conv7 = sext i16 %17 to i32
  %shr = ashr i32 %conv7, 11
  %add = add nsw i32 %shl, %shr
  %conv8 = trunc i32 %add to i16
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 0
  store i16 %conv8, i16* %arrayidx, align 2, !tbaa !67
  %18 = load i16, i16* %m.addr, align 2, !tbaa !67
  %conv9 = sext i16 %18 to i32
  %shl10 = shl i32 %conv9, 1
  %19 = load i16, i16* %m.addr, align 2, !tbaa !67
  %conv11 = sext i16 %19 to i32
  %shr12 = ashr i32 %conv11, 11
  %add13 = add nsw i32 %shl10, %shr12
  %conv14 = trunc i32 %add13 to i16
  %arrayidx15 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 1
  store i16 %conv14, i16* %arrayidx15, align 2, !tbaa !67
  %20 = load i16, i16* %y.addr, align 2, !tbaa !67
  %conv16 = sext i16 %20 to i32
  %shl17 = shl i32 %conv16, 1
  %21 = load i16, i16* %y.addr, align 2, !tbaa !67
  %conv18 = sext i16 %21 to i32
  %shr19 = ashr i32 %conv18, 11
  %add20 = add nsw i32 %shl17, %shr19
  %conv21 = trunc i32 %add20 to i16
  %arrayidx22 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 2
  store i16 %conv21, i16* %arrayidx22, align 2, !tbaa !67
  %22 = load i16, i16* %k.addr, align 2, !tbaa !67
  %conv23 = sext i16 %22 to i32
  %shl24 = shl i32 %conv23, 1
  %23 = load i16, i16* %k.addr, align 2, !tbaa !67
  %conv25 = sext i16 %23 to i32
  %shr26 = ashr i32 %conv25, 11
  %add27 = add nsw i32 %shl24, %shr26
  %conv28 = trunc i32 %add27 to i16
  %arrayidx29 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 3
  store i16 %conv28, i16* %arrayidx29, align 2, !tbaa !67
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %24, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 51
  %25 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call = call i64 %25(%struct.gx_device_s* %26, i16* %arraydecay) #7
  store i64 %call, i64* %color, align 8, !tbaa !68
  %27 = load i64, i64* %color, align 8, !tbaa !68
  %cmp30 = icmp ne i64 %27, -1
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.6
  %28 = load i64, i64* %color, align 8, !tbaa !68
  %29 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %29, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %28, i64* %pure, align 8, !tbaa !68
  %30 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %30, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.then.6
  br label %if.end.62

if.else.34:                                       ; preds = %if.end
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs35 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %31, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs35, i32 0, i32 49
  %32 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call36 = call %struct.gx_cm_color_map_procs_s* %32(%struct.gx_device_s* %33) #7
  %map_cmyk = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call36, i32 0, i32 2
  %34 = load void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)** %map_cmyk, align 8, !tbaa !492
  %35 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %36 = load i16, i16* %c.addr, align 2, !tbaa !67
  %37 = load i16, i16* %m.addr, align 2, !tbaa !67
  %38 = load i16, i16* %y.addr, align 2, !tbaa !67
  %39 = load i16, i16* %k.addr, align 2, !tbaa !67
  %arraydecay37 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %34(%struct.gx_device_s* %35, i16 signext %36, i16 signext %37, i16 signext %38, i16 signext %39, i16* %arraydecay37) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.34
  %40 = load i32, i32* %i, align 4, !tbaa !5
  %41 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp38 = icmp slt i32 %40, %41
  br i1 %cmp38, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %42 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %42 to i64
  %arrayidx40 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %43 = load i16, i16* %arrayidx40, align 2, !tbaa !67
  %conv41 = sext i16 %43 to i32
  %shl42 = shl i32 %conv41, 1
  %44 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom43 = sext i32 %44 to i64
  %arrayidx44 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom43
  %45 = load i16, i16* %arrayidx44, align 2, !tbaa !67
  %conv45 = sext i16 %45 to i32
  %shr46 = ashr i32 %conv45, 11
  %add47 = add nsw i32 %shl42, %shr46
  %conv48 = trunc i32 %add47 to i16
  %46 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom49 = sext i32 %46 to i64
  %arrayidx50 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom49
  store i16 %conv48, i16* %arrayidx50, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %47, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs51 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 42
  %encode_color52 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs51, i32 0, i32 51
  %49 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color52, align 8, !tbaa !487
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay53 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call54 = call i64 %49(%struct.gx_device_s* %50, i16* %arraydecay53) #7
  store i64 %call54, i64* %color, align 8, !tbaa !68
  %51 = load i64, i64* %color, align 8, !tbaa !68
  %cmp55 = icmp ne i64 %51, -1
  br i1 %cmp55, label %if.then.57, label %if.end.61

if.then.57:                                       ; preds = %for.end
  %52 = load i64, i64* %color, align 8, !tbaa !68
  %53 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors58 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %53, i32 0, i32 1
  %pure59 = bitcast %union._c* %colors58 to i64*
  store i64 %52, i64* %pure59, align 8, !tbaa !68
  %54 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type60 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %54, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type60, align 8, !tbaa !227
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.57, %for.end
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.33
  %55 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #2
  %56 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %56) #2
  %57 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %57) #2
  %58 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %58) #2
  %59 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #2
  %60 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_rgb_alpha_direct(i16 signext %r, i16 signext %g, i16 signext %b, i16 signext %alpha, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %r.addr = alloca i16, align 2
  %g.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  %alpha.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  %alpha_bias = alloca i16, align 2
  store i16 %r, i16* %r.addr, align 2, !tbaa !67
  store i16 %g, i16* %g.addr, align 2, !tbaa !67
  store i16 %b, i16* %b.addr, align 2, !tbaa !67
  store i16 %alpha, i16* %alpha.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %2) #2
  %3 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %3) #2
  %4 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 20
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %9, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %10, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %12 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %12, i32* %ncomps, align 4, !tbaa !5
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  %14 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call = call %struct.gx_cm_color_map_procs_s* %14(%struct.gx_device_s* %15) #7
  %map_rgb = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call, i32 0, i32 1
  %16 = load void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)** %map_rgb, align 8, !tbaa !491
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %19 = load i16, i16* %r.addr, align 2, !tbaa !67
  %20 = load i16, i16* %g.addr, align 2, !tbaa !67
  %21 = load i16, i16* %b.addr, align 2, !tbaa !67
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %16(%struct.gx_device_s* %17, %struct.gs_imager_state_s* %18, i16 signext %19, i16 signext %20, i16 signext %21, i16* %arraydecay) #7
  %22 = load i16, i16* %alpha.addr, align 2, !tbaa !67
  %conv = sext i16 %22 to i32
  %cmp3 = icmp ne i32 %conv, 32760
  br i1 %cmp3, label %if.then.5, label %if.end.16

if.then.5:                                        ; preds = %if.end
  %23 = bitcast i16* %alpha_bias to i8*
  call void @llvm.lifetime.start(i64 2, i8* %23) #2
  store i16 0, i16* %alpha_bias, align 2, !tbaa !67
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.5
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp6 = icmp slt i32 %24, %25
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %26 to i64
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %27 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv8 = sext i16 %27 to i64
  %28 = load i16, i16* %alpha.addr, align 2, !tbaa !67
  %conv9 = sext i16 %28 to i64
  %mul = mul nsw i64 %conv8, %conv9
  %conv10 = trunc i64 %mul to i16
  %conv11 = sext i16 %conv10 to i32
  %div = sdiv i32 %conv11, 32760
  %29 = load i16, i16* %alpha_bias, align 2, !tbaa !67
  %conv12 = sext i16 %29 to i32
  %add = add nsw i32 %div, %conv12
  %conv13 = trunc i32 %add to i16
  %30 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom14 = sext i32 %30 to i64
  %arrayidx15 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom14
  store i16 %conv13, i16* %arrayidx15, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = bitcast i16* %alpha_bias to i8*
  call void @llvm.lifetime.end(i64 2, i8* %32) #2
  br label %if.end.16

if.end.16:                                        ; preds = %for.end, %if.end
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.31, %if.end.16
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %34 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp18 = icmp slt i32 %33, %34
  br i1 %cmp18, label %for.body.20, label %for.end.33

for.body.20:                                      ; preds = %for.cond.17
  %35 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom21 = sext i32 %35 to i64
  %arrayidx22 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom21
  %36 = load i16, i16* %arrayidx22, align 2, !tbaa !67
  %conv23 = sext i16 %36 to i32
  %shl = shl i32 %conv23, 1
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom24 = sext i32 %37 to i64
  %arrayidx25 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom24
  %38 = load i16, i16* %arrayidx25, align 2, !tbaa !67
  %conv26 = sext i16 %38 to i32
  %shr = ashr i32 %conv26, 11
  %add27 = add nsw i32 %shl, %shr
  %conv28 = trunc i32 %add27 to i16
  %39 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom29 = sext i32 %39 to i64
  %arrayidx30 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom29
  store i16 %conv28, i16* %arrayidx30, align 2, !tbaa !67
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.body.20
  %40 = load i32, i32* %i, align 4, !tbaa !5
  %inc32 = add nsw i32 %40, 1
  store i32 %inc32, i32* %i, align 4, !tbaa !5
  br label %for.cond.17

for.end.33:                                       ; preds = %for.cond.17
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs34 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs34, i32 0, i32 51
  %42 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay35 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call36 = call i64 %42(%struct.gx_device_s* %43, i16* %arraydecay35) #7
  store i64 %call36, i64* %color, align 8, !tbaa !68
  %44 = load i64, i64* %color, align 8, !tbaa !68
  %cmp37 = icmp ne i64 %44, -1
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %for.end.33
  %45 = load i64, i64* %color, align 8, !tbaa !68
  %46 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %46, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %45, i64* %pure, align 8, !tbaa !68
  %47 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %47, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %for.end.33
  %48 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %48) #2
  %49 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %50) #2
  %51 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %51) #2
  %52 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_separation_direct(i16 signext %all, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %all.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %additive = alloca i32, align 4
  %comp_value = alloca i16, align 2
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  store i16 %all, i16* %all.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %3, i32* %ncomps, align 4, !tbaa !5
  %4 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info1, i32 0, i32 2
  %6 = load i32, i32* %polarity, align 4, !tbaa !479
  %cmp = icmp eq i32 %6, 1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %additive, align 4, !tbaa !5
  %7 = bitcast i16* %comp_value to i8*
  call void @llvm.lifetime.start(i64 2, i8* %7) #2
  %8 = load i16, i16* %all.addr, align 2, !tbaa !67
  store i16 %8, i16* %comp_value, align 2, !tbaa !67
  %9 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %9) #2
  %10 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %10) #2
  %11 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %color_component_map = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %12, i32 0, i32 50
  %sep_type = getelementptr inbounds %struct.gs_devicen_color_map_s, %struct.gs_devicen_color_map_s* %color_component_map, i32 0, i32 1
  %13 = load i32, i32* %sep_type, align 4, !tbaa !493
  %cmp2 = icmp eq i32 %13, 1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %14 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %15 = load i16, i16* %comp_value, align 2, !tbaa !67
  %conv5 = sext i16 %15 to i32
  %sub = sub nsw i32 32760, %conv5
  %conv6 = trunc i32 %sub to i16
  store i16 %conv6, i16* %comp_value, align 2, !tbaa !67
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %16 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %color_component_map7 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %16, i32 0, i32 50
  %num_colorants = getelementptr inbounds %struct.gs_devicen_color_map_s, %struct.gs_devicen_color_map_s* %color_component_map7, i32 0, i32 3
  %17 = load i32, i32* %num_colorants, align 4, !tbaa !494
  %sub8 = sub i32 %17, 1
  store i32 %sub8, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %cmp9 = icmp sge i32 %18, 0
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i16, i16* %comp_value, align 2, !tbaa !67
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  store i16 %19, i16* %arrayidx, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !tbaa !5
  %dec = add nsw i32 %21, -1
  store i32 %dec, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.12

if.else:                                          ; preds = %entry
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %color_component_map11 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %22, i32 0, i32 50
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void @map_components_to_colorants(i16* %comp_value, %struct.gs_devicen_color_map_s* %color_component_map11, i16* %arraydecay) #7
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %for.end
  %23 = load i32, i32* %additive, align 4, !tbaa !5
  %tobool13 = icmp ne i32 %23, 0
  br i1 %tobool13, label %if.then.14, label %if.else.62

if.then.14:                                       ; preds = %if.end.12
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.60, %if.then.14
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp16 = icmp slt i32 %24, %25
  br i1 %cmp16, label %for.body.18, label %for.end.61

for.body.18:                                      ; preds = %for.cond.15
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom19 = sext i32 %26 to i64
  %27 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %27, i32 0, i32 47
  %arrayidx20 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer, i32 0, i64 %idxprom19
  %28 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx20, align 8, !tbaa !1
  %proc = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %28, i32 0, i32 1
  %proc21 = bitcast {}** %proc to float (double, %struct.gx_transfer_map_s*)**
  %29 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc21, align 8, !tbaa !495
  %cmp22 = icmp eq float (double, %struct.gx_transfer_map_s*)* %29, @gs_identity_transfer
  br i1 %cmp22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.18
  %30 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom24 = sext i32 %30 to i64
  %arrayidx25 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom24
  %31 = load i16, i16* %arrayidx25, align 2, !tbaa !67
  %conv26 = sext i16 %31 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body.18
  %32 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom27 = sext i32 %32 to i64
  %arrayidx28 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom27
  %33 = load i16, i16* %arrayidx28, align 2, !tbaa !67
  %34 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom29 = sext i32 %34 to i64
  %35 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer30 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %35, i32 0, i32 47
  %arrayidx31 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer30, i32 0, i64 %idxprom29
  %36 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx31, align 8, !tbaa !1
  %values = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %36, i32 0, i32 4
  %arrayidx32 = getelementptr inbounds [256 x i16], [256 x i16]* %values, i32 0, i64 0
  %call = call signext i16 @gx_color_frac_map(i16 signext %33, i16* %arrayidx32) #7
  %conv33 = sext i16 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv26, %cond.true ], [ %conv33, %cond.false ]
  %shl = shl i32 %cond, 1
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom34 = sext i32 %37 to i64
  %38 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer35 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %38, i32 0, i32 47
  %arrayidx36 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer35, i32 0, i64 %idxprom34
  %39 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx36, align 8, !tbaa !1
  %proc37 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %39, i32 0, i32 1
  %proc38 = bitcast {}** %proc37 to float (double, %struct.gx_transfer_map_s*)**
  %40 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc38, align 8, !tbaa !495
  %cmp39 = icmp eq float (double, %struct.gx_transfer_map_s*)* %40, @gs_identity_transfer
  br i1 %cmp39, label %cond.true.41, label %cond.false.45

cond.true.41:                                     ; preds = %cond.end
  %41 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom42 = sext i32 %41 to i64
  %arrayidx43 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom42
  %42 = load i16, i16* %arrayidx43, align 2, !tbaa !67
  %conv44 = sext i16 %42 to i32
  br label %cond.end.55

cond.false.45:                                    ; preds = %cond.end
  %43 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom46 = sext i32 %43 to i64
  %arrayidx47 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom46
  %44 = load i16, i16* %arrayidx47, align 2, !tbaa !67
  %45 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom48 = sext i32 %45 to i64
  %46 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer49 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %46, i32 0, i32 47
  %arrayidx50 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer49, i32 0, i64 %idxprom48
  %47 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx50, align 8, !tbaa !1
  %values51 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %47, i32 0, i32 4
  %arrayidx52 = getelementptr inbounds [256 x i16], [256 x i16]* %values51, i32 0, i64 0
  %call53 = call signext i16 @gx_color_frac_map(i16 signext %44, i16* %arrayidx52) #7
  %conv54 = sext i16 %call53 to i32
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.45, %cond.true.41
  %cond56 = phi i32 [ %conv44, %cond.true.41 ], [ %conv54, %cond.false.45 ]
  %shr = ashr i32 %cond56, 11
  %add = add nsw i32 %shl, %shr
  %conv57 = trunc i32 %add to i16
  %48 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom58 = sext i32 %48 to i64
  %arrayidx59 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom58
  store i16 %conv57, i16* %arrayidx59, align 2, !tbaa !67
  br label %for.inc.60

for.inc.60:                                       ; preds = %cond.end.55
  %49 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond.15

for.end.61:                                       ; preds = %for.cond.15
  br label %if.end.136

if.else.62:                                       ; preds = %if.end.12
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.133, %if.else.62
  %50 = load i32, i32* %i, align 4, !tbaa !5
  %51 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp64 = icmp slt i32 %50, %51
  br i1 %cmp64, label %for.body.66, label %for.end.135

for.body.66:                                      ; preds = %for.cond.63
  %52 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom67 = sext i32 %52 to i64
  %53 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer68 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %53, i32 0, i32 47
  %arrayidx69 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer68, i32 0, i64 %idxprom67
  %54 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx69, align 8, !tbaa !1
  %proc70 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %54, i32 0, i32 1
  %proc71 = bitcast {}** %proc70 to float (double, %struct.gx_transfer_map_s*)**
  %55 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc71, align 8, !tbaa !495
  %cmp72 = icmp eq float (double, %struct.gx_transfer_map_s*)* %55, @gs_identity_transfer
  br i1 %cmp72, label %cond.true.74, label %cond.false.81

cond.true.74:                                     ; preds = %for.body.66
  %56 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom75 = sext i32 %56 to i64
  %arrayidx76 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom75
  %57 = load i16, i16* %arrayidx76, align 2, !tbaa !67
  %conv77 = sext i16 %57 to i32
  %sub78 = sub nsw i32 32760, %conv77
  %conv79 = trunc i32 %sub78 to i16
  %conv80 = sext i16 %conv79 to i32
  br label %cond.end.94

cond.false.81:                                    ; preds = %for.body.66
  %58 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom82 = sext i32 %58 to i64
  %arrayidx83 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom82
  %59 = load i16, i16* %arrayidx83, align 2, !tbaa !67
  %conv84 = sext i16 %59 to i32
  %sub85 = sub nsw i32 32760, %conv84
  %conv86 = trunc i32 %sub85 to i16
  %60 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom87 = sext i32 %60 to i64
  %61 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer88 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %61, i32 0, i32 47
  %arrayidx89 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer88, i32 0, i64 %idxprom87
  %62 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx89, align 8, !tbaa !1
  %values90 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %62, i32 0, i32 4
  %arrayidx91 = getelementptr inbounds [256 x i16], [256 x i16]* %values90, i32 0, i64 0
  %call92 = call signext i16 @gx_color_frac_map(i16 signext %conv86, i16* %arrayidx91) #7
  %conv93 = sext i16 %call92 to i32
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.81, %cond.true.74
  %cond95 = phi i32 [ %conv80, %cond.true.74 ], [ %conv93, %cond.false.81 ]
  %sub96 = sub nsw i32 32760, %cond95
  %shl97 = shl i32 %sub96, 1
  %63 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom98 = sext i32 %63 to i64
  %64 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer99 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %64, i32 0, i32 47
  %arrayidx100 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer99, i32 0, i64 %idxprom98
  %65 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx100, align 8, !tbaa !1
  %proc101 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %65, i32 0, i32 1
  %proc102 = bitcast {}** %proc101 to float (double, %struct.gx_transfer_map_s*)**
  %66 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc102, align 8, !tbaa !495
  %cmp103 = icmp eq float (double, %struct.gx_transfer_map_s*)* %66, @gs_identity_transfer
  br i1 %cmp103, label %cond.true.105, label %cond.false.112

cond.true.105:                                    ; preds = %cond.end.94
  %67 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom106 = sext i32 %67 to i64
  %arrayidx107 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom106
  %68 = load i16, i16* %arrayidx107, align 2, !tbaa !67
  %conv108 = sext i16 %68 to i32
  %sub109 = sub nsw i32 32760, %conv108
  %conv110 = trunc i32 %sub109 to i16
  %conv111 = sext i16 %conv110 to i32
  br label %cond.end.125

cond.false.112:                                   ; preds = %cond.end.94
  %69 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom113 = sext i32 %69 to i64
  %arrayidx114 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom113
  %70 = load i16, i16* %arrayidx114, align 2, !tbaa !67
  %conv115 = sext i16 %70 to i32
  %sub116 = sub nsw i32 32760, %conv115
  %conv117 = trunc i32 %sub116 to i16
  %71 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom118 = sext i32 %71 to i64
  %72 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer119 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %72, i32 0, i32 47
  %arrayidx120 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer119, i32 0, i64 %idxprom118
  %73 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx120, align 8, !tbaa !1
  %values121 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %73, i32 0, i32 4
  %arrayidx122 = getelementptr inbounds [256 x i16], [256 x i16]* %values121, i32 0, i64 0
  %call123 = call signext i16 @gx_color_frac_map(i16 signext %conv117, i16* %arrayidx122) #7
  %conv124 = sext i16 %call123 to i32
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.112, %cond.true.105
  %cond126 = phi i32 [ %conv111, %cond.true.105 ], [ %conv124, %cond.false.112 ]
  %sub127 = sub nsw i32 32760, %cond126
  %shr128 = ashr i32 %sub127, 11
  %add129 = add nsw i32 %shl97, %shr128
  %conv130 = trunc i32 %add129 to i16
  %74 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom131 = sext i32 %74 to i64
  %arrayidx132 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom131
  store i16 %conv130, i16* %arrayidx132, align 2, !tbaa !67
  br label %for.inc.133

for.inc.133:                                      ; preds = %cond.end.125
  %75 = load i32, i32* %i, align 4, !tbaa !5
  %inc134 = add nsw i32 %75, 1
  store i32 %inc134, i32* %i, align 4, !tbaa !5
  br label %for.cond.63

for.end.135:                                      ; preds = %for.cond.63
  br label %if.end.136

if.end.136:                                       ; preds = %for.end.135, %for.end.61
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %76, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 65
  %77 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call137 = call i32 %77(%struct.gx_device_s* %78, i32 11, i8* null, i32 0) #7
  %tobool138 = icmp ne i32 %call137, 0
  br i1 %tobool138, label %if.then.139, label %if.else.152

if.then.139:                                      ; preds = %if.end.136
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.140

for.cond.140:                                     ; preds = %for.inc.149, %if.then.139
  %79 = load i32, i32* %i, align 4, !tbaa !5
  %80 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp141 = icmp slt i32 %79, %80
  br i1 %cmp141, label %for.body.143, label %for.end.151

for.body.143:                                     ; preds = %for.cond.140
  %81 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom144 = sext i32 %81 to i64
  %arrayidx145 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom144
  %82 = load i16, i16* %arrayidx145, align 2, !tbaa !67
  %83 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom146 = sext i32 %83 to i64
  %84 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %84, i32 0, i32 1
  %devn = bitcast %union._c* %colors to %struct._devn*
  %values147 = getelementptr inbounds %struct._devn, %struct._devn* %devn, i32 0, i32 0
  %arrayidx148 = getelementptr inbounds [64 x i16], [64 x i16]* %values147, i32 0, i64 %idxprom146
  store i16 %82, i16* %arrayidx148, align 2, !tbaa !67
  br label %for.inc.149

for.inc.149:                                      ; preds = %for.body.143
  %85 = load i32, i32* %i, align 4, !tbaa !5
  %inc150 = add nsw i32 %85, 1
  store i32 %inc150, i32* %i, align 4, !tbaa !5
  br label %for.cond.140

for.end.151:                                      ; preds = %for.cond.140
  %86 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %86, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_devn, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.162

if.else.152:                                      ; preds = %if.end.136
  %87 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs153 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %87, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs153, i32 0, i32 51
  %88 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %89 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %arraydecay154 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call155 = call i64 %88(%struct.gx_device_s* %89, i16* %arraydecay154) #7
  store i64 %call155, i64* %color, align 8, !tbaa !68
  %90 = load i64, i64* %color, align 8, !tbaa !68
  %cmp156 = icmp ne i64 %90, -1
  br i1 %cmp156, label %if.then.158, label %if.end.161

if.then.158:                                      ; preds = %if.else.152
  %91 = load i64, i64* %color, align 8, !tbaa !68
  %92 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors159 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %92, i32 0, i32 1
  %pure = bitcast %union._c* %colors159 to i64*
  store i64 %91, i64* %pure, align 8, !tbaa !68
  %93 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type160 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %93, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type160, align 8, !tbaa !227
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.158, %if.else.152
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %for.end.151
  %94 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %94) #2
  %95 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %95) #2
  %96 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %96) #2
  %97 = bitcast i16* %comp_value to i8*
  call void @llvm.lifetime.end(i64 2, i8* %97) #2
  %98 = bitcast i32* %additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %98) #2
  %99 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %99) #2
  %100 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %100) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_devicen_direct(i16* %pcc, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %pcc.addr = alloca i16*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16* %pcc, i16** %pcc.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %2, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %3 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %3, i32* %ncomps, align 4, !tbaa !5
  %4 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %4) #2
  %5 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %5) #2
  %6 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %9, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %10, i32 0, i32 20
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %11, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %12, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 11
  %num_components4 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  %14 = load i32, i32* %num_components4, align 4, !tbaa !195
  store i32 %14, i32* %ncomps, align 4, !tbaa !5
  %15 = load i16*, i16** %pcc.addr, align 8, !tbaa !1
  %16 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %color_component_map = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %16, i32 0, i32 50
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void @map_components_to_colorants(i16* %15, %struct.gs_devicen_color_map_s* %color_component_map, i16* %arraydecay) #7
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info5 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info5, i32 0, i32 2
  %18 = load i32, i32* %polarity, align 4, !tbaa !479
  %cmp6 = icmp eq i32 %18, 1
  br i1 %cmp6, label %if.then.7, label %if.else.46

if.then.7:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.7
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %20 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp8 = icmp slt i32 %19, %20
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %21 to i64
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %22, i32 0, i32 47
  %arrayidx = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer, i32 0, i64 %idxprom
  %23 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx, align 8, !tbaa !1
  %proc = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %23, i32 0, i32 1
  %proc9 = bitcast {}** %proc to float (double, %struct.gx_transfer_map_s*)**
  %24 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc9, align 8, !tbaa !495
  %cmp10 = icmp eq float (double, %struct.gx_transfer_map_s*)* %24, @gs_identity_transfer
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom11 = sext i32 %25 to i64
  %arrayidx12 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom11
  %26 = load i16, i16* %arrayidx12, align 2, !tbaa !67
  %conv = sext i16 %26 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom13 = sext i32 %27 to i64
  %arrayidx14 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom13
  %28 = load i16, i16* %arrayidx14, align 2, !tbaa !67
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom15 = sext i32 %29 to i64
  %30 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer16 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %30, i32 0, i32 47
  %arrayidx17 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer16, i32 0, i64 %idxprom15
  %31 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx17, align 8, !tbaa !1
  %values = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %31, i32 0, i32 4
  %arrayidx18 = getelementptr inbounds [256 x i16], [256 x i16]* %values, i32 0, i64 0
  %call = call signext i16 @gx_color_frac_map(i16 signext %28, i16* %arrayidx18) #7
  %conv19 = sext i16 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv19, %cond.false ]
  %shl = shl i32 %cond, 1
  %32 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom20 = sext i32 %32 to i64
  %33 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer21 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %33, i32 0, i32 47
  %arrayidx22 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer21, i32 0, i64 %idxprom20
  %34 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx22, align 8, !tbaa !1
  %proc23 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %34, i32 0, i32 1
  %proc24 = bitcast {}** %proc23 to float (double, %struct.gx_transfer_map_s*)**
  %35 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc24, align 8, !tbaa !495
  %cmp25 = icmp eq float (double, %struct.gx_transfer_map_s*)* %35, @gs_identity_transfer
  br i1 %cmp25, label %cond.true.27, label %cond.false.31

cond.true.27:                                     ; preds = %cond.end
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom28 = sext i32 %36 to i64
  %arrayidx29 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom28
  %37 = load i16, i16* %arrayidx29, align 2, !tbaa !67
  %conv30 = sext i16 %37 to i32
  br label %cond.end.41

cond.false.31:                                    ; preds = %cond.end
  %38 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom32 = sext i32 %38 to i64
  %arrayidx33 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom32
  %39 = load i16, i16* %arrayidx33, align 2, !tbaa !67
  %40 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom34 = sext i32 %40 to i64
  %41 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer35 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %41, i32 0, i32 47
  %arrayidx36 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer35, i32 0, i64 %idxprom34
  %42 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx36, align 8, !tbaa !1
  %values37 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %42, i32 0, i32 4
  %arrayidx38 = getelementptr inbounds [256 x i16], [256 x i16]* %values37, i32 0, i64 0
  %call39 = call signext i16 @gx_color_frac_map(i16 signext %39, i16* %arrayidx38) #7
  %conv40 = sext i16 %call39 to i32
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.31, %cond.true.27
  %cond42 = phi i32 [ %conv30, %cond.true.27 ], [ %conv40, %cond.false.31 ]
  %shr = ashr i32 %cond42, 11
  %add = add nsw i32 %shl, %shr
  %conv43 = trunc i32 %add to i16
  %43 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom44 = sext i32 %43 to i64
  %arrayidx45 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom44
  store i16 %conv43, i16* %arrayidx45, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %cond.end.41
  %44 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.119

if.else.46:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.116, %if.else.46
  %45 = load i32, i32* %i, align 4, !tbaa !5
  %46 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp48 = icmp slt i32 %45, %46
  br i1 %cmp48, label %for.body.50, label %for.end.118

for.body.50:                                      ; preds = %for.cond.47
  %47 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom51 = sext i32 %47 to i64
  %48 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer52 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %48, i32 0, i32 47
  %arrayidx53 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer52, i32 0, i64 %idxprom51
  %49 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx53, align 8, !tbaa !1
  %proc54 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %49, i32 0, i32 1
  %proc55 = bitcast {}** %proc54 to float (double, %struct.gx_transfer_map_s*)**
  %50 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc55, align 8, !tbaa !495
  %cmp56 = icmp eq float (double, %struct.gx_transfer_map_s*)* %50, @gs_identity_transfer
  br i1 %cmp56, label %cond.true.58, label %cond.false.64

cond.true.58:                                     ; preds = %for.body.50
  %51 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom59 = sext i32 %51 to i64
  %arrayidx60 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom59
  %52 = load i16, i16* %arrayidx60, align 2, !tbaa !67
  %conv61 = sext i16 %52 to i32
  %sub = sub nsw i32 32760, %conv61
  %conv62 = trunc i32 %sub to i16
  %conv63 = sext i16 %conv62 to i32
  br label %cond.end.77

cond.false.64:                                    ; preds = %for.body.50
  %53 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom65 = sext i32 %53 to i64
  %arrayidx66 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom65
  %54 = load i16, i16* %arrayidx66, align 2, !tbaa !67
  %conv67 = sext i16 %54 to i32
  %sub68 = sub nsw i32 32760, %conv67
  %conv69 = trunc i32 %sub68 to i16
  %55 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom70 = sext i32 %55 to i64
  %56 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer71 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %56, i32 0, i32 47
  %arrayidx72 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer71, i32 0, i64 %idxprom70
  %57 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx72, align 8, !tbaa !1
  %values73 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %57, i32 0, i32 4
  %arrayidx74 = getelementptr inbounds [256 x i16], [256 x i16]* %values73, i32 0, i64 0
  %call75 = call signext i16 @gx_color_frac_map(i16 signext %conv69, i16* %arrayidx74) #7
  %conv76 = sext i16 %call75 to i32
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.64, %cond.true.58
  %cond78 = phi i32 [ %conv63, %cond.true.58 ], [ %conv76, %cond.false.64 ]
  %sub79 = sub nsw i32 32760, %cond78
  %shl80 = shl i32 %sub79, 1
  %58 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom81 = sext i32 %58 to i64
  %59 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer82 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %59, i32 0, i32 47
  %arrayidx83 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer82, i32 0, i64 %idxprom81
  %60 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx83, align 8, !tbaa !1
  %proc84 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %60, i32 0, i32 1
  %proc85 = bitcast {}** %proc84 to float (double, %struct.gx_transfer_map_s*)**
  %61 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc85, align 8, !tbaa !495
  %cmp86 = icmp eq float (double, %struct.gx_transfer_map_s*)* %61, @gs_identity_transfer
  br i1 %cmp86, label %cond.true.88, label %cond.false.95

cond.true.88:                                     ; preds = %cond.end.77
  %62 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom89 = sext i32 %62 to i64
  %arrayidx90 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom89
  %63 = load i16, i16* %arrayidx90, align 2, !tbaa !67
  %conv91 = sext i16 %63 to i32
  %sub92 = sub nsw i32 32760, %conv91
  %conv93 = trunc i32 %sub92 to i16
  %conv94 = sext i16 %conv93 to i32
  br label %cond.end.108

cond.false.95:                                    ; preds = %cond.end.77
  %64 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom96 = sext i32 %64 to i64
  %arrayidx97 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom96
  %65 = load i16, i16* %arrayidx97, align 2, !tbaa !67
  %conv98 = sext i16 %65 to i32
  %sub99 = sub nsw i32 32760, %conv98
  %conv100 = trunc i32 %sub99 to i16
  %66 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom101 = sext i32 %66 to i64
  %67 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %effective_transfer102 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %67, i32 0, i32 47
  %arrayidx103 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer102, i32 0, i64 %idxprom101
  %68 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx103, align 8, !tbaa !1
  %values104 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %68, i32 0, i32 4
  %arrayidx105 = getelementptr inbounds [256 x i16], [256 x i16]* %values104, i32 0, i64 0
  %call106 = call signext i16 @gx_color_frac_map(i16 signext %conv100, i16* %arrayidx105) #7
  %conv107 = sext i16 %call106 to i32
  br label %cond.end.108

cond.end.108:                                     ; preds = %cond.false.95, %cond.true.88
  %cond109 = phi i32 [ %conv94, %cond.true.88 ], [ %conv107, %cond.false.95 ]
  %sub110 = sub nsw i32 32760, %cond109
  %shr111 = ashr i32 %sub110, 11
  %add112 = add nsw i32 %shl80, %shr111
  %conv113 = trunc i32 %add112 to i16
  %69 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom114 = sext i32 %69 to i64
  %arrayidx115 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom114
  store i16 %conv113, i16* %arrayidx115, align 2, !tbaa !67
  br label %for.inc.116

for.inc.116:                                      ; preds = %cond.end.108
  %70 = load i32, i32* %i, align 4, !tbaa !5
  %inc117 = add nsw i32 %70, 1
  store i32 %inc117, i32* %i, align 4, !tbaa !5
  br label %for.cond.47

for.end.118:                                      ; preds = %for.cond.47
  br label %if.end.119

if.end.119:                                       ; preds = %for.end.118, %for.end
  %71 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %71, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 65
  %72 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %73 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call120 = call i32 %72(%struct.gx_device_s* %73, i32 11, i8* null, i32 0) #7
  %tobool = icmp ne i32 %call120, 0
  br i1 %tobool, label %if.then.121, label %if.else.134

if.then.121:                                      ; preds = %if.end.119
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.131, %if.then.121
  %74 = load i32, i32* %i, align 4, !tbaa !5
  %75 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp123 = icmp slt i32 %74, %75
  br i1 %cmp123, label %for.body.125, label %for.end.133

for.body.125:                                     ; preds = %for.cond.122
  %76 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom126 = sext i32 %76 to i64
  %arrayidx127 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom126
  %77 = load i16, i16* %arrayidx127, align 2, !tbaa !67
  %78 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom128 = sext i32 %78 to i64
  %79 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %79, i32 0, i32 1
  %devn = bitcast %union._c* %colors to %struct._devn*
  %values129 = getelementptr inbounds %struct._devn, %struct._devn* %devn, i32 0, i32 0
  %arrayidx130 = getelementptr inbounds [64 x i16], [64 x i16]* %values129, i32 0, i64 %idxprom128
  store i16 %77, i16* %arrayidx130, align 2, !tbaa !67
  br label %for.inc.131

for.inc.131:                                      ; preds = %for.body.125
  %80 = load i32, i32* %i, align 4, !tbaa !5
  %inc132 = add nsw i32 %80, 1
  store i32 %inc132, i32* %i, align 4, !tbaa !5
  br label %for.cond.122

for.end.133:                                      ; preds = %for.cond.122
  %81 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %81, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_devn, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.144

if.else.134:                                      ; preds = %if.end.119
  %82 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs135 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %82, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs135, i32 0, i32 51
  %83 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %84 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay136 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call137 = call i64 %83(%struct.gx_device_s* %84, i16* %arraydecay136) #7
  store i64 %call137, i64* %color, align 8, !tbaa !68
  %85 = load i64, i64* %color, align 8, !tbaa !68
  %cmp138 = icmp ne i64 %85, -1
  br i1 %cmp138, label %if.then.140, label %if.end.143

if.then.140:                                      ; preds = %if.else.134
  %86 = load i64, i64* %color, align 8, !tbaa !68
  %87 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors141 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %87, i32 0, i32 1
  %pure = bitcast %union._c* %colors141 to i64*
  store i64 %86, i64* %pure, align 8, !tbaa !68
  %88 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type142 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %88, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type142, align 8, !tbaa !227
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.140, %if.else.134
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %for.end.133
  %89 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %89) #2
  %90 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %90) #2
  %91 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %91) #2
  %92 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %92) #2
  %93 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #2
  %94 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_cmap_is_halftoned(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @map_components_to_colorants(i16* %pcc, %struct.gs_devicen_color_map_s* %pcolor_component_map, i16* %plist) #6 {
entry:
  %pcc.addr = alloca i16*, align 8
  %pcolor_component_map.addr = alloca %struct.gs_devicen_color_map_s*, align 8
  %plist.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %pos = alloca i32, align 4
  store i16* %pcc, i16** %pcc.addr, align 8, !tbaa !1
  store %struct.gs_devicen_color_map_s* %pcolor_component_map, %struct.gs_devicen_color_map_s** %pcolor_component_map.addr, align 8, !tbaa !1
  store i16* %plist, i16** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gs_devicen_color_map_s*, %struct.gs_devicen_color_map_s** %pcolor_component_map.addr, align 8, !tbaa !1
  %num_colorants = getelementptr inbounds %struct.gs_devicen_color_map_s, %struct.gs_devicen_color_map_s* %1, i32 0, i32 3
  %2 = load i32, i32* %num_colorants, align 4, !tbaa !498
  %sub = sub i32 %2, 1
  store i32 %sub, i32* %i, align 4, !tbaa !5
  %3 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !5
  %cmp = icmp sge i32 %4, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %5 to i64
  %6 = load i16*, i16** %plist.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i16, i16* %6, i64 %idxprom
  store i16 0, i16* %arrayidx, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !tbaa !5
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.gs_devicen_color_map_s*, %struct.gs_devicen_color_map_s** %pcolor_component_map.addr, align 8, !tbaa !1
  %num_components = getelementptr inbounds %struct.gs_devicen_color_map_s, %struct.gs_devicen_color_map_s* %8, i32 0, i32 2
  %9 = load i32, i32* %num_components, align 4, !tbaa !499
  %sub1 = sub i32 %9, 1
  store i32 %sub1, i32* %i, align 4, !tbaa !5
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.12, %for.end
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %cmp3 = icmp sge i32 %10, 0
  br i1 %cmp3, label %for.body.4, label %for.end.14

for.body.4:                                       ; preds = %for.cond.2
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom5 = sext i32 %11 to i64
  %12 = load %struct.gs_devicen_color_map_s*, %struct.gs_devicen_color_map_s** %pcolor_component_map.addr, align 8, !tbaa !1
  %color_map = getelementptr inbounds %struct.gs_devicen_color_map_s, %struct.gs_devicen_color_map_s* %12, i32 0, i32 5
  %arrayidx6 = getelementptr inbounds [64 x i32], [64 x i32]* %color_map, i32 0, i64 %idxprom5
  %13 = load i32, i32* %arrayidx6, align 4, !tbaa !5
  store i32 %13, i32* %pos, align 4, !tbaa !5
  %14 = load i32, i32* %pos, align 4, !tbaa !5
  %cmp7 = icmp sge i32 %14, 0
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.4
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %15 to i64
  %16 = load i16*, i16** %pcc.addr, align 8, !tbaa !1
  %arrayidx9 = getelementptr inbounds i16, i16* %16, i64 %idxprom8
  %17 = load i16, i16* %arrayidx9, align 2, !tbaa !67
  %18 = load i32, i32* %pos, align 4, !tbaa !5
  %idxprom10 = sext i32 %18 to i64
  %19 = load i16*, i16** %plist.addr, align 8, !tbaa !1
  %arrayidx11 = getelementptr inbounds i16, i16* %19, i64 %idxprom10
  store i16 %17, i16* %arrayidx11, align 2, !tbaa !67
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.4
  br label %for.inc.12

for.inc.12:                                       ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %dec13 = add nsw i32 %20, -1
  store i32 %dec13, i32* %i, align 4, !tbaa !5
  br label %for.cond.2

for.end.14:                                       ; preds = %for.cond.2
  %21 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.end(i64 4, i8* %21) #2
  %22 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #2
  ret void
}

declare float @gs_identity_transfer(double, %struct.gx_transfer_map_s*) #0

declare signext i16 @gx_color_frac_map(i16 signext, i16*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_push_transparency_mask(%struct.pdf14_ctx_s* %ctx, %struct.gs_int_rect_s* %rect, i8 zeroext %bg_alpha, i8* %transfer_fn, i32 %idle, i32 %replacing, i32 %mask_id, i32 %subtype, i32 %numcomps, i32 %Background_components, float* %Background, float %GrayBackground) #1 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %rect.addr = alloca %struct.gs_int_rect_s*, align 8
  %bg_alpha.addr = alloca i8, align 1
  %transfer_fn.addr = alloca i8*, align 8
  %idle.addr = alloca i32, align 4
  %replacing.addr = alloca i32, align 4
  %mask_id.addr = alloca i32, align 4
  %subtype.addr = alloca i32, align 4
  %numcomps.addr = alloca i32, align 4
  %Background_components.addr = alloca i32, align 4
  %Background.addr = alloca float*, align 8
  %GrayBackground.addr = alloca float, align 4
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %curr_ptr = alloca i8*, align 8
  %gray = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %rect, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  store i8 %bg_alpha, i8* %bg_alpha.addr, align 1, !tbaa !66
  store i8* %transfer_fn, i8** %transfer_fn.addr, align 8, !tbaa !1
  store i32 %idle, i32* %idle.addr, align 4, !tbaa !5
  store i32 %replacing, i32* %replacing.addr, align 4, !tbaa !5
  store i32 %mask_id, i32* %mask_id.addr, align 4, !tbaa !5
  store i32 %subtype, i32* %subtype.addr, align 4, !tbaa !66
  store i32 %numcomps, i32* %numcomps.addr, align 4, !tbaa !5
  store i32 %Background_components, i32* %Background_components.addr, align 4, !tbaa !5
  store float* %Background, float** %Background.addr, align 8, !tbaa !1
  store float %GrayBackground, float* %GrayBackground.addr, align 4, !tbaa !136
  %0 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast i8** %curr_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  call void @llvm.lifetime.start(i64 1, i8* %gray) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %2 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_depth = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %2, i32 0, i32 6
  %3 = load i32, i32* %smask_depth, align 4, !tbaa !322
  %add = add nsw i32 %3, 1
  store i32 %add, i32* %smask_depth, align 4, !tbaa !322
  %4 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %rect.addr, align 8, !tbaa !1
  %5 = load i32, i32* %idle.addr, align 4, !tbaa !5
  %6 = load i32, i32* %numcomps.addr, align 4, !tbaa !5
  %add1 = add nsw i32 %6, 1
  %7 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %7, i32 0, i32 2
  %8 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !283
  %call = call %struct.pdf14_buf_s* @pdf14_buf_new(%struct.gs_int_rect_s* %4, i32 0, i32 0, i32 0, i32 %5, i32 %add1, %struct.gs_memory_s* %8) #7
  store %struct.pdf14_buf_s* %call, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %9 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %cmp = icmp eq %struct.pdf14_buf_s* %9, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %10 = load i8, i8* %bg_alpha.addr, align 1, !tbaa !66
  %11 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %11, i32 0, i32 4
  store i8 %10, i8* %alpha, align 1, !tbaa !398
  %12 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %isolated = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %12, i32 0, i32 2
  store i32 1, i32* %isolated, align 4, !tbaa !331
  %13 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %knockout = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %13, i32 0, i32 3
  store i32 0, i32* %knockout, align 4, !tbaa !198
  %14 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %14, i32 0, i32 5
  store i8 -1, i8* %shape, align 1, !tbaa !399
  %15 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %15, i32 0, i32 6
  store i32 0, i32* %blend_mode, align 4, !tbaa !400
  %16 = load i8*, i8** %transfer_fn.addr, align 8, !tbaa !1
  %17 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %transfer_fn2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %17, i32 0, i32 16
  store i8* %16, i8** %transfer_fn2, align 8, !tbaa !306
  %18 = load i32, i32* %mask_id.addr, align 4, !tbaa !5
  %19 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_id3 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %19, i32 0, i32 21
  store i32 %18, i32* %mask_id3, align 4, !tbaa !334
  %20 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %20, i32 0, i32 1
  %21 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !304
  %22 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %22, i32 0, i32 18
  store %struct.pdf14_mask_s* %21, %struct.pdf14_mask_s** %mask_stack4, align 8, !tbaa !308
  %23 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack5 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %23, i32 0, i32 18
  %24 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack5, align 8, !tbaa !308
  %tobool = icmp ne %struct.pdf14_mask_s* %24, null
  br i1 %tobool, label %if.then.6, label %if.end.22

if.then.6:                                        ; preds = %if.end
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %25 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack8 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %25, i32 0, i32 18
  %26 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack8, align 8, !tbaa !308
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %26, i32 0, i32 0
  %27 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %tobool9 = icmp ne %struct.pdf14_rcmask_s* %27, null
  br i1 %tobool9, label %if.then.10, label %if.end.19

if.then.10:                                       ; preds = %do.body.7
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  %28 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %mask_stack12 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %28, i32 0, i32 18
  %29 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack12, align 8, !tbaa !308
  %rc_mask13 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %29, i32 0, i32 0
  %30 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask13, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %30, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %31 = load i64, i64* %ref_count, align 8, !tbaa !316
  %inc = add nsw i64 %31, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !316
  br label %do.body.14

do.body.14:                                       ; preds = %do.body.11
  br label %do.cond.15

do.cond.15:                                       ; preds = %do.body.14
  br label %do.end.16

do.end.16:                                        ; preds = %do.cond.15
  br label %do.cond.17

do.cond.17:                                       ; preds = %do.end.16
  br label %do.end.18

do.end.18:                                        ; preds = %do.cond.17
  br label %if.end.19

if.end.19:                                        ; preds = %do.end.18, %do.body.7
  br label %do.cond.20

do.cond.20:                                       ; preds = %if.end.19
  br label %do.end.21

do.end.21:                                        ; preds = %do.cond.20
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %if.end
  %32 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %32, i32 0, i32 0
  %33 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %34, i32 0, i32 0
  store %struct.pdf14_buf_s* %33, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %36 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack23 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %36, i32 0, i32 0
  store %struct.pdf14_buf_s* %35, %struct.pdf14_buf_s** %stack23, align 8, !tbaa !23
  %37 = load i32, i32* %subtype.addr, align 4, !tbaa !66
  %38 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %SMask_SubType = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %38, i32 0, i32 20
  store i32 %37, i32* %SMask_SubType, align 4, !tbaa !500
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %39, i32 0, i32 15
  %40 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp24 = icmp ne i8* %40, null
  br i1 %cmp24, label %if.then.25, label %if.end.48

if.then.25:                                       ; preds = %if.end.22
  %41 = load i32, i32* %Background_components.addr, align 4, !tbaa !5
  %tobool26 = icmp ne i32 %41, 0
  br i1 %tobool26, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.25
  %42 = load float, float* %GrayBackground.addr, align 4, !tbaa !136
  %conv = fpext float %42 to double
  %cmp27 = fcmp une double %conv, 0.000000e+00
  br i1 %cmp27, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %land.lhs.true
  %43 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data30 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %43, i32 0, i32 15
  %44 = load i8*, i8** %data30, align 8, !tbaa !36
  store i8* %44, i8** %curr_ptr, align 8, !tbaa !1
  %45 = load float, float* %GrayBackground.addr, align 4, !tbaa !136
  %conv31 = fpext float %45 to double
  %mul = fmul double 2.550000e+02, %conv31
  %conv32 = fptoui double %mul to i8
  store i8 %conv32, i8* %gray, align 1, !tbaa !66
  %46 = load i8*, i8** %curr_ptr, align 8, !tbaa !1
  %47 = load i8, i8* %gray, align 1, !tbaa !66
  %conv33 = zext i8 %47 to i32
  %48 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %48, i32 0, i32 12
  %49 = load i32, i32* %planestride, align 4, !tbaa !58
  %conv34 = sext i32 %49 to i64
  %call35 = call i8* @memset(i8* %46, i32 %conv33, i64 %conv34) #8
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride36 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 12
  %51 = load i32, i32* %planestride36, align 4, !tbaa !58
  %52 = load i8*, i8** %curr_ptr, align 8, !tbaa !1
  %idx.ext = sext i32 %51 to i64
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 %idx.ext
  store i8* %add.ptr, i8** %curr_ptr, align 8, !tbaa !1
  %53 = load i8*, i8** %curr_ptr, align 8, !tbaa !1
  %54 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride37 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %54, i32 0, i32 12
  %55 = load i32, i32* %planestride37, align 4, !tbaa !58
  %56 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %56, i32 0, i32 13
  %57 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub = sub nsw i32 %57, 1
  %mul38 = mul nsw i32 %55, %sub
  %conv39 = sext i32 %mul38 to i64
  %call40 = call i8* @memset(i8* %53, i32 255, i64 %conv39) #8
  br label %if.end.47

if.else:                                          ; preds = %land.lhs.true, %if.then.25
  %58 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data41 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %58, i32 0, i32 15
  %59 = load i8*, i8** %data41, align 8, !tbaa !36
  %60 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride42 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %60, i32 0, i32 12
  %61 = load i32, i32* %planestride42, align 4, !tbaa !58
  %62 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan43 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %62, i32 0, i32 13
  %63 = load i32, i32* %n_chan43, align 4, !tbaa !38
  %mul44 = mul nsw i32 %61, %63
  %conv45 = sext i32 %mul44 to i64
  %call46 = call i8* @memset(i8* %59, i32 0, i64 %conv45) #8
  br label %if.end.47

if.end.47:                                        ; preds = %if.else, %if.then.29
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.end.22
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.48, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %gray) #2
  %64 = bitcast i8** %curr_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #2
  %66 = load i32, i32* %retval
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_pop_transparency_mask(%struct.pdf14_ctx_s* %ctx, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.pdf14_ctx_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %tos = alloca %struct.pdf14_buf_s*, align 8
  %new_data_buf = alloca i8*, align 8
  %icc_match = alloca i32, align 4
  %des_profile = alloca %struct.cmm_profile_s*, align 8
  %src_profile = alloca %struct.cmm_profile_s*, align 8
  %rendering_params = alloca %struct.gsicc_rendering_param_s, align 4
  %icc_link = alloca %struct.gsicc_link_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf14_ctx_s* %ctx, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %1, i32 0, i32 0
  %2 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %2, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %3 = bitcast i8** %new_data_buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i32* %icc_match to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast %struct.cmm_profile_s** %des_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %parent_color_info_procs = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %6, i32 0, i32 22
  %7 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color_info_procs, align 8, !tbaa !260
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %7, i32 0, i32 15
  %8 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  store %struct.cmm_profile_s* %8, %struct.cmm_profile_s** %des_profile, align 8, !tbaa !1
  %9 = bitcast %struct.cmm_profile_s** %src_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast %struct.gsicc_rendering_param_s* %rendering_params to i8*
  call void @llvm.lifetime.start(i64 24, i8* %10) #2
  %11 = bitcast %struct.gsicc_link_s** %icc_link to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %12) #2
  %13 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %15 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 %15(%struct.gx_device_s* %16, %struct.cmm_dev_profile_s** %dev_profile) #7
  %17 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %17, %struct.cmm_profile_s** %src_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  %18 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_depth = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %18, i32 0, i32 6
  %19 = load i32, i32* %smask_depth, align 4, !tbaa !322
  %sub = sub nsw i32 %19, 1
  store i32 %sub, i32* %smask_depth, align 4, !tbaa !322
  %20 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %des_profile, align 8, !tbaa !1
  %cmp = icmp ne %struct.cmm_profile_s* %20, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %21 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %src_profile, align 8, !tbaa !1
  %cmp1 = icmp ne %struct.cmm_profile_s* %21, null
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %22 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %des_profile, align 8, !tbaa !1
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %22, i32 0, i32 7
  %23 = load i64, i64* %hashcode, align 8, !tbaa !121
  %24 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %src_profile, align 8, !tbaa !1
  %hashcode2 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %24, i32 0, i32 7
  %25 = load i64, i64* %hashcode2, align 8, !tbaa !121
  %cmp3 = icmp eq i64 %23, %25
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %icc_match, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 -1, i32* %icc_match, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %26 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %26, i32 0, i32 0
  %27 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %28 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %stack4 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %28, i32 0, i32 0
  store %struct.pdf14_buf_s* %27, %struct.pdf14_buf_s** %stack4, align 8, !tbaa !23
  %29 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %saved5 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %29, i32 0, i32 0
  store %struct.pdf14_buf_s* null, %struct.pdf14_buf_s** %saved5, align 8, !tbaa !305
  %30 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %30, i32 0, i32 18
  %31 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack, align 8, !tbaa !308
  %tobool = icmp ne %struct.pdf14_mask_s* %31, null
  br i1 %tobool, label %if.then.6, label %if.end.111

if.then.6:                                        ; preds = %do.end
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack8 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 18
  %33 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack8, align 8, !tbaa !308
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %33, i32 0, i32 0
  %34 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %tobool9 = icmp ne %struct.pdf14_rcmask_s* %34, null
  br i1 %tobool9, label %if.then.10, label %if.end.46

if.then.10:                                       ; preds = %do.body.7
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.body.11
  br label %do.cond.13

do.cond.13:                                       ; preds = %do.body.12
  br label %do.end.14

do.end.14:                                        ; preds = %do.cond.13
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack15 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %35, i32 0, i32 18
  %36 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack15, align 8, !tbaa !308
  %rc_mask16 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %36, i32 0, i32 0
  %37 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask16, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %37, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %38 = load i64, i64* %ref_count, align 8, !tbaa !316
  %add = add nsw i64 %38, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !316
  br label %do.cond.17

do.cond.17:                                       ; preds = %do.end.14
  br label %do.end.18

do.end.18:                                        ; preds = %do.cond.17
  %39 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack19 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %39, i32 0, i32 18
  %40 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack19, align 8, !tbaa !308
  %rc_mask20 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %40, i32 0, i32 0
  %41 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask20, align 8, !tbaa !314
  %rc21 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %41, i32 0, i32 1
  %ref_count22 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc21, i32 0, i32 0
  %42 = load i64, i64* %ref_count22, align 8, !tbaa !316
  %tobool23 = icmp ne i64 %42, 0
  br i1 %tobool23, label %if.else.41, label %if.then.24

if.then.24:                                       ; preds = %do.end.18
  br label %do.body.25

do.body.25:                                       ; preds = %if.then.24
  br label %do.body.26

do.body.26:                                       ; preds = %do.body.25
  br label %do.cond.27

do.cond.27:                                       ; preds = %do.body.26
  br label %do.end.28

do.end.28:                                        ; preds = %do.cond.27
  %43 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack29 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %43, i32 0, i32 18
  %44 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack29, align 8, !tbaa !308
  %rc_mask30 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %44, i32 0, i32 0
  %45 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask30, align 8, !tbaa !314
  %rc31 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %45, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc31, i32 0, i32 2
  %46 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack32 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 18
  %48 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack32, align 8, !tbaa !308
  %rc_mask33 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %48, i32 0, i32 0
  %49 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask33, align 8, !tbaa !314
  %rc34 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %49, i32 0, i32 1
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc34, i32 0, i32 1
  %50 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !320
  %51 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack35 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %51, i32 0, i32 18
  %52 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack35, align 8, !tbaa !308
  %rc_mask36 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %52, i32 0, i32 0
  %53 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask36, align 8, !tbaa !314
  %54 = bitcast %struct.pdf14_rcmask_s* %53 to i8*
  call void %46(%struct.gs_memory_s* %50, i8* %54, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.52, i32 0, i32 0)) #7
  br label %do.cond.37

do.cond.37:                                       ; preds = %do.end.28
  br label %do.end.38

do.end.38:                                        ; preds = %do.cond.37
  %55 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack39 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %55, i32 0, i32 18
  %56 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack39, align 8, !tbaa !308
  %rc_mask40 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %56, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask40, align 8, !tbaa !314
  br label %if.end.45

if.else.41:                                       ; preds = %do.end.18
  br label %do.body.42

do.body.42:                                       ; preds = %if.else.41
  br label %do.cond.43

do.cond.43:                                       ; preds = %do.body.42
  br label %do.end.44

do.end.44:                                        ; preds = %do.cond.43
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44, %do.end.38
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %do.body.7
  br label %do.cond.47

do.cond.47:                                       ; preds = %if.end.46
  br label %do.end.48

do.end.48:                                        ; preds = %do.cond.47
  %57 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack49 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %57, i32 0, i32 18
  %58 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack49, align 8, !tbaa !308
  %rc_mask50 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %58, i32 0, i32 0
  %59 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask50, align 8, !tbaa !314
  %tobool51 = icmp ne %struct.pdf14_rcmask_s* %59, null
  br i1 %tobool51, label %if.then.52, label %if.end.109

if.then.52:                                       ; preds = %do.end.48
  %60 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack53 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %60, i32 0, i32 18
  %61 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack53, align 8, !tbaa !308
  %rc_mask54 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %61, i32 0, i32 0
  %62 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask54, align 8, !tbaa !314
  %rc55 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %62, i32 0, i32 1
  %ref_count56 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc55, i32 0, i32 0
  %63 = load i64, i64* %ref_count56, align 8, !tbaa !316
  %cmp57 = icmp eq i64 %63, 1
  br i1 %cmp57, label %if.then.59, label %if.end.108

if.then.59:                                       ; preds = %if.then.52
  br label %do.body.60

do.body.60:                                       ; preds = %if.then.59
  %64 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack61 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %64, i32 0, i32 18
  %65 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack61, align 8, !tbaa !308
  %rc_mask62 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %65, i32 0, i32 0
  %66 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask62, align 8, !tbaa !314
  %tobool63 = icmp ne %struct.pdf14_rcmask_s* %66, null
  br i1 %tobool63, label %if.then.64, label %if.end.105

if.then.64:                                       ; preds = %do.body.60
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.body.65
  br label %do.cond.67

do.cond.67:                                       ; preds = %do.body.66
  br label %do.end.68

do.end.68:                                        ; preds = %do.cond.67
  %67 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack69 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %67, i32 0, i32 18
  %68 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack69, align 8, !tbaa !308
  %rc_mask70 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %68, i32 0, i32 0
  %69 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask70, align 8, !tbaa !314
  %rc71 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %69, i32 0, i32 1
  %ref_count72 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc71, i32 0, i32 0
  %70 = load i64, i64* %ref_count72, align 8, !tbaa !316
  %add73 = add nsw i64 %70, -1
  store i64 %add73, i64* %ref_count72, align 8, !tbaa !316
  br label %do.cond.74

do.cond.74:                                       ; preds = %do.end.68
  br label %do.end.75

do.end.75:                                        ; preds = %do.cond.74
  %71 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack76 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %71, i32 0, i32 18
  %72 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack76, align 8, !tbaa !308
  %rc_mask77 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %72, i32 0, i32 0
  %73 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask77, align 8, !tbaa !314
  %rc78 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %73, i32 0, i32 1
  %ref_count79 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc78, i32 0, i32 0
  %74 = load i64, i64* %ref_count79, align 8, !tbaa !316
  %tobool80 = icmp ne i64 %74, 0
  br i1 %tobool80, label %if.else.100, label %if.then.81

if.then.81:                                       ; preds = %do.end.75
  br label %do.body.82

do.body.82:                                       ; preds = %if.then.81
  br label %do.body.83

do.body.83:                                       ; preds = %do.body.82
  br label %do.cond.84

do.cond.84:                                       ; preds = %do.body.83
  br label %do.end.85

do.end.85:                                        ; preds = %do.cond.84
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack86 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 18
  %76 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack86, align 8, !tbaa !308
  %rc_mask87 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %76, i32 0, i32 0
  %77 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask87, align 8, !tbaa !314
  %rc88 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %77, i32 0, i32 1
  %free89 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc88, i32 0, i32 2
  %78 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free89, align 8, !tbaa !319
  %79 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack90 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %79, i32 0, i32 18
  %80 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack90, align 8, !tbaa !308
  %rc_mask91 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %80, i32 0, i32 0
  %81 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask91, align 8, !tbaa !314
  %rc92 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %81, i32 0, i32 1
  %memory93 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc92, i32 0, i32 1
  %82 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory93, align 8, !tbaa !320
  %83 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack94 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %83, i32 0, i32 18
  %84 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack94, align 8, !tbaa !308
  %rc_mask95 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %84, i32 0, i32 0
  %85 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask95, align 8, !tbaa !314
  %86 = bitcast %struct.pdf14_rcmask_s* %85 to i8*
  call void %78(%struct.gs_memory_s* %82, i8* %86, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.52, i32 0, i32 0)) #7
  br label %do.cond.96

do.cond.96:                                       ; preds = %do.end.85
  br label %do.end.97

do.end.97:                                        ; preds = %do.cond.96
  %87 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack98 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %87, i32 0, i32 18
  %88 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack98, align 8, !tbaa !308
  %rc_mask99 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %88, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask99, align 8, !tbaa !314
  br label %if.end.104

if.else.100:                                      ; preds = %do.end.75
  br label %do.body.101

do.body.101:                                      ; preds = %if.else.100
  br label %do.cond.102

do.cond.102:                                      ; preds = %do.body.101
  br label %do.end.103

do.end.103:                                       ; preds = %do.cond.102
  br label %if.end.104

if.end.104:                                       ; preds = %do.end.103, %do.end.97
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %do.body.60
  br label %do.cond.106

do.cond.106:                                      ; preds = %if.end.105
  br label %do.end.107

do.end.107:                                       ; preds = %do.cond.106
  br label %if.end.108

if.end.108:                                       ; preds = %do.end.107, %if.then.52
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %do.end.48
  %89 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %mask_stack110 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %89, i32 0, i32 18
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack110, align 8, !tbaa !308
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.109, %do.end
  %90 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %90, i32 0, i32 15
  %91 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp112 = icmp eq i8* %91, null
  br i1 %cmp112, label %if.then.114, label %if.else.146

if.then.114:                                      ; preds = %if.end.111
  %92 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %alpha = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %92, i32 0, i32 4
  %93 = load i8, i8* %alpha, align 1, !tbaa !398
  %conv115 = zext i8 %93 to i32
  %cmp116 = icmp eq i32 %conv115, 255
  br i1 %cmp116, label %if.then.118, label %if.else.128

if.then.118:                                      ; preds = %if.then.114
  %94 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %95 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory119 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %95, i32 0, i32 2
  %96 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory119, align 8, !tbaa !283
  call void @pdf14_buf_free(%struct.pdf14_buf_s* %94, %struct.gs_memory_s* %96) #7
  %97 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack120 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %97, i32 0, i32 1
  %98 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack120, align 8, !tbaa !304
  %cmp121 = icmp ne %struct.pdf14_mask_s* %98, null
  br i1 %cmp121, label %if.then.123, label %if.end.127

if.then.123:                                      ; preds = %if.then.118
  %99 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack124 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %99, i32 0, i32 1
  %100 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack124, align 8, !tbaa !304
  %101 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory125 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %101, i32 0, i32 2
  %102 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory125, align 8, !tbaa !283
  call void @pdf14_free_mask_stack(%struct.pdf14_mask_s* %100, %struct.gs_memory_s* %102) #7
  %103 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack126 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %103, i32 0, i32 1
  store %struct.pdf14_mask_s* null, %struct.pdf14_mask_s** %mask_stack126, align 8, !tbaa !304
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.123, %if.then.118
  br label %if.end.145

if.else.128:                                      ; preds = %if.then.114
  %104 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack129 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %104, i32 0, i32 1
  %105 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack129, align 8, !tbaa !304
  %cmp130 = icmp ne %struct.pdf14_mask_s* %105, null
  br i1 %cmp130, label %if.then.132, label %if.end.135

if.then.132:                                      ; preds = %if.else.128
  %106 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack133 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %106, i32 0, i32 1
  %107 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack133, align 8, !tbaa !304
  %108 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory134 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %108, i32 0, i32 2
  %109 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory134, align 8, !tbaa !283
  call void @pdf14_free_mask_stack(%struct.pdf14_mask_s* %107, %struct.gs_memory_s* %109) #7
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.132, %if.else.128
  %110 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory136 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %110, i32 0, i32 2
  %111 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory136, align 8, !tbaa !283
  %call137 = call %struct.pdf14_mask_s* @pdf14_mask_element_new(%struct.gs_memory_s* %111) #7
  %112 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack138 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %112, i32 0, i32 1
  store %struct.pdf14_mask_s* %call137, %struct.pdf14_mask_s** %mask_stack138, align 8, !tbaa !304
  %113 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory139 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %113, i32 0, i32 2
  %114 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory139, align 8, !tbaa !283
  %call140 = call %struct.pdf14_rcmask_s* @pdf14_rcmask_new(%struct.gs_memory_s* %114) #7
  %115 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack141 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %115, i32 0, i32 1
  %116 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack141, align 8, !tbaa !304
  %rc_mask142 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %116, i32 0, i32 0
  store %struct.pdf14_rcmask_s* %call140, %struct.pdf14_rcmask_s** %rc_mask142, align 8, !tbaa !314
  %117 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %118 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack143 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %118, i32 0, i32 1
  %119 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack143, align 8, !tbaa !304
  %rc_mask144 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %119, i32 0, i32 0
  %120 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask144, align 8, !tbaa !314
  %mask_buf = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %120, i32 0, i32 0
  store %struct.pdf14_buf_s* %117, %struct.pdf14_buf_s** %mask_buf, align 8, !tbaa !339
  br label %if.end.145

if.end.145:                                       ; preds = %if.end.135, %if.end.127
  %121 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_blend = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %121, i32 0, i32 7
  store i32 0, i32* %smask_blend, align 4, !tbaa !330
  br label %if.end.293

if.else.146:                                      ; preds = %if.end.111
  %122 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory147 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %122, i32 0, i32 2
  %123 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory147, align 8, !tbaa !283
  %procs148 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %123, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs148, i32 0, i32 7
  %124 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %125 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory149 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %125, i32 0, i32 2
  %126 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory149, align 8, !tbaa !283
  %127 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %127, i32 0, i32 12
  %128 = load i32, i32* %planestride, align 4, !tbaa !58
  %call150 = call i8* %124(%struct.gs_memory_s* %126, i32 %128, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i32 0, i32 0)) #7
  store i8* %call150, i8** %new_data_buf, align 8, !tbaa !1
  %129 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %cmp151 = icmp eq i8* %129, null
  br i1 %cmp151, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %if.else.146
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.154:                                       ; preds = %if.else.146
  %130 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %131 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride155 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %131, i32 0, i32 12
  %132 = load i32, i32* %planestride155, align 4, !tbaa !58
  %conv156 = sext i32 %132 to i64
  %call157 = call i8* @memset(i8* %130, i32 0, i64 %conv156) #8
  %133 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %SMask_SubType = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %133, i32 0, i32 20
  %134 = load i32, i32* %SMask_SubType, align 4, !tbaa !500
  %cmp158 = icmp eq i32 %134, 0
  br i1 %cmp158, label %if.then.160, label %if.else.173

if.then.160:                                      ; preds = %if.end.154
  %135 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %smask_blend161 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %135, i32 0, i32 7
  store i32 0, i32* %smask_blend161, align 4, !tbaa !330
  %136 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %136, i32 0, i32 10
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 1
  %137 = load i32, i32* %y, align 4, !tbaa !45
  %138 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect162 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %138, i32 0, i32 10
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect162, i32 0, i32 0
  %y163 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 1
  %139 = load i32, i32* %y163, align 4, !tbaa !46
  %sub164 = sub nsw i32 %137, %139
  %140 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect165 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %140, i32 0, i32 10
  %q166 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect165, i32 0, i32 1
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q166, i32 0, i32 0
  %141 = load i32, i32* %x, align 4, !tbaa !42
  %142 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect167 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %142, i32 0, i32 10
  %p168 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect167, i32 0, i32 0
  %x169 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p168, i32 0, i32 0
  %143 = load i32, i32* %x169, align 4, !tbaa !43
  %sub170 = sub nsw i32 %141, %143
  %144 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %144, i32 0, i32 11
  %145 = load i32, i32* %rowstride, align 4, !tbaa !59
  %146 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data171 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %146, i32 0, i32 15
  %147 = load i8*, i8** %data171, align 8, !tbaa !36
  %148 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride172 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %148, i32 0, i32 12
  %149 = load i32, i32* %planestride172, align 4, !tbaa !58
  %idx.ext = sext i32 %149 to i64
  %add.ptr = getelementptr inbounds i8, i8* %147, i64 %idx.ext
  %150 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  call void @smask_copy(i32 %sub164, i32 %sub170, i32 %145, i8* %add.ptr, i8* %150) #7
  br label %if.end.258

if.else.173:                                      ; preds = %if.end.154
  %151 = load i32, i32* %icc_match, align 4, !tbaa !5
  %cmp174 = icmp eq i32 %151, 1
  br i1 %cmp174, label %if.then.178, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.173
  %152 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %152, i32 0, i32 13
  %153 = load i32, i32* %n_chan, align 4, !tbaa !38
  %cmp176 = icmp eq i32 %153, 2
  br i1 %cmp176, label %if.then.178, label %if.else.212

if.then.178:                                      ; preds = %lor.lhs.false, %if.else.173
  %154 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data179 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %154, i32 0, i32 15
  %155 = load i8*, i8** %data179, align 8, !tbaa !36
  %156 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect180 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %156, i32 0, i32 10
  %q181 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect180, i32 0, i32 1
  %x182 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q181, i32 0, i32 0
  %157 = load i32, i32* %x182, align 4, !tbaa !42
  %158 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect183 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %158, i32 0, i32 10
  %p184 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect183, i32 0, i32 0
  %x185 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p184, i32 0, i32 0
  %159 = load i32, i32* %x185, align 4, !tbaa !43
  %sub186 = sub nsw i32 %157, %159
  %160 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect187 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %160, i32 0, i32 10
  %q188 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect187, i32 0, i32 1
  %y189 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q188, i32 0, i32 1
  %161 = load i32, i32* %y189, align 4, !tbaa !45
  %162 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect190 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %162, i32 0, i32 10
  %p191 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect190, i32 0, i32 0
  %y192 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p191, i32 0, i32 1
  %163 = load i32, i32* %y192, align 4, !tbaa !46
  %sub193 = sub nsw i32 %161, %163
  %164 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride194 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %164, i32 0, i32 11
  %165 = load i32, i32* %rowstride194, align 4, !tbaa !59
  %166 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride195 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %166, i32 0, i32 12
  %167 = load i32, i32* %planestride195, align 4, !tbaa !58
  call void @smask_blend(i8* %155, i32 %sub186, i32 %sub193, i32 %165, i32 %167) #7
  %168 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect196 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %168, i32 0, i32 10
  %q197 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect196, i32 0, i32 1
  %y198 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q197, i32 0, i32 1
  %169 = load i32, i32* %y198, align 4, !tbaa !45
  %170 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect199 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %170, i32 0, i32 10
  %p200 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect199, i32 0, i32 0
  %y201 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p200, i32 0, i32 1
  %171 = load i32, i32* %y201, align 4, !tbaa !46
  %sub202 = sub nsw i32 %169, %171
  %172 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect203 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %172, i32 0, i32 10
  %q204 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect203, i32 0, i32 1
  %x205 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q204, i32 0, i32 0
  %173 = load i32, i32* %x205, align 4, !tbaa !42
  %174 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect206 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %174, i32 0, i32 10
  %p207 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect206, i32 0, i32 0
  %x208 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p207, i32 0, i32 0
  %175 = load i32, i32* %x208, align 4, !tbaa !43
  %sub209 = sub nsw i32 %173, %175
  %176 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride210 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %176, i32 0, i32 11
  %177 = load i32, i32* %rowstride210, align 4, !tbaa !59
  %178 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data211 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %178, i32 0, i32 15
  %179 = load i8*, i8** %data211, align 8, !tbaa !36
  %180 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  call void @smask_copy(i32 %sub202, i32 %sub209, i32 %177, i8* %179, i8* %180) #7
  br label %if.end.257

if.else.212:                                      ; preds = %lor.lhs.false
  %181 = load i32, i32* %icc_match, align 4, !tbaa !5
  %cmp213 = icmp eq i32 %181, -1
  br i1 %cmp213, label %if.then.215, label %if.else.235

if.then.215:                                      ; preds = %if.else.212
  %182 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect216 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %182, i32 0, i32 10
  %q217 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect216, i32 0, i32 1
  %y218 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q217, i32 0, i32 1
  %183 = load i32, i32* %y218, align 4, !tbaa !45
  %184 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect219 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %184, i32 0, i32 10
  %p220 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect219, i32 0, i32 0
  %y221 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p220, i32 0, i32 1
  %185 = load i32, i32* %y221, align 4, !tbaa !46
  %sub222 = sub nsw i32 %183, %185
  %186 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect223 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %186, i32 0, i32 10
  %q224 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect223, i32 0, i32 1
  %x225 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q224, i32 0, i32 0
  %187 = load i32, i32* %x225, align 4, !tbaa !42
  %188 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect226 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %188, i32 0, i32 10
  %p227 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect226, i32 0, i32 0
  %x228 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p227, i32 0, i32 0
  %189 = load i32, i32* %x228, align 4, !tbaa !43
  %sub229 = sub nsw i32 %187, %189
  %190 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_chan230 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %190, i32 0, i32 13
  %191 = load i32, i32* %n_chan230, align 4, !tbaa !38
  %192 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride231 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %192, i32 0, i32 11
  %193 = load i32, i32* %rowstride231, align 4, !tbaa !59
  %194 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride232 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %194, i32 0, i32 12
  %195 = load i32, i32* %planestride232, align 4, !tbaa !58
  %196 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data233 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %196, i32 0, i32 15
  %197 = load i8*, i8** %data233, align 8, !tbaa !36
  %198 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %199 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %199, i32 0, i32 4
  %200 = load i32, i32* %additive, align 4, !tbaa !272
  %201 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %SMask_SubType234 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %201, i32 0, i32 20
  %202 = load i32, i32* %SMask_SubType234, align 4, !tbaa !500
  call void @smask_luminosity_mapping(i32 %sub222, i32 %sub229, i32 %191, i32 %193, i32 %195, i8* %197, i8* %198, i32 %200, i32 %202) #7
  br label %if.end.256

if.else.235:                                      ; preds = %if.else.212
  %black_point_comp = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 1
  store i32 0, i32* %black_point_comp, align 4, !tbaa !401
  %graphics_type_tag = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 3
  store i32 2, i32* %graphics_type_tag, align 4, !tbaa !402
  %override_icc = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 5
  store i32 0, i32* %override_icc, align 4, !tbaa !403
  %preserve_black = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 2
  store i32 8, i32* %preserve_black, align 4, !tbaa !404
  %rendering_intent = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 0
  store i32 0, i32* %rendering_intent, align 4, !tbaa !405
  %cmm = getelementptr inbounds %struct.gsicc_rendering_param_s, %struct.gsicc_rendering_param_s* %rendering_params, i32 0, i32 4
  store i32 0, i32* %cmm, align 4, !tbaa !406
  %203 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %204 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %205 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %des_profile, align 8, !tbaa !1
  %206 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %src_profile, align 8, !tbaa !1
  %207 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory236 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %207, i32 0, i32 1
  %208 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory236, align 8, !tbaa !165
  %call237 = call %struct.gsicc_link_s* @gsicc_get_link_profile(%struct.gs_imager_state_s* %203, %struct.gx_device_s* %204, %struct.cmm_profile_s* %205, %struct.cmm_profile_s* %206, %struct.gsicc_rendering_param_s* %rendering_params, %struct.gs_memory_s* %208, i32 0) #7
  store %struct.gsicc_link_s* %call237, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  %209 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %210 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect238 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %210, i32 0, i32 10
  %q239 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect238, i32 0, i32 1
  %y240 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q239, i32 0, i32 1
  %211 = load i32, i32* %y240, align 4, !tbaa !45
  %212 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect241 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %212, i32 0, i32 10
  %p242 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect241, i32 0, i32 0
  %y243 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p242, i32 0, i32 1
  %213 = load i32, i32* %y243, align 4, !tbaa !46
  %sub244 = sub nsw i32 %211, %213
  %214 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect245 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %214, i32 0, i32 10
  %q246 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect245, i32 0, i32 1
  %x247 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q246, i32 0, i32 0
  %215 = load i32, i32* %x247, align 4, !tbaa !42
  %216 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rect248 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %216, i32 0, i32 10
  %p249 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect248, i32 0, i32 0
  %x250 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p249, i32 0, i32 0
  %217 = load i32, i32* %x250, align 4, !tbaa !43
  %sub251 = sub nsw i32 %215, %217
  %218 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_chan252 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %218, i32 0, i32 13
  %219 = load i32, i32* %n_chan252, align 4, !tbaa !38
  %220 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %rowstride253 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %220, i32 0, i32 11
  %221 = load i32, i32* %rowstride253, align 4, !tbaa !59
  %222 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %planestride254 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %222, i32 0, i32 12
  %223 = load i32, i32* %planestride254, align 4, !tbaa !58
  %224 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data255 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %224, i32 0, i32 15
  %225 = load i8*, i8** %data255, align 8, !tbaa !36
  %226 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %227 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  call void @smask_icc(%struct.gx_device_s* %209, i32 %sub244, i32 %sub251, i32 %219, i32 %221, i32 %223, i8* %225, i8* %226, %struct.gsicc_link_s* %227) #7
  %228 = load %struct.gsicc_link_s*, %struct.gsicc_link_s** %icc_link, align 8, !tbaa !1
  call void @gsicc_release_link(%struct.gsicc_link_s* %228) #7
  br label %if.end.256

if.end.256:                                       ; preds = %if.else.235, %if.then.215
  br label %if.end.257

if.end.257:                                       ; preds = %if.end.256, %if.then.178
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %if.then.160
  %229 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory259 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %229, i32 0, i32 2
  %230 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory259, align 8, !tbaa !283
  %procs260 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %230, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs260, i32 0, i32 2
  %231 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %232 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory261 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %232, i32 0, i32 2
  %233 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory261, align 8, !tbaa !283
  %234 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data262 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %234, i32 0, i32 15
  %235 = load i8*, i8** %data262, align 8, !tbaa !36
  call void %231(%struct.gs_memory_s* %233, i8* %235, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i32 0, i32 0)) #7
  %236 = load i8*, i8** %new_data_buf, align 8, !tbaa !1
  %237 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %data263 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %237, i32 0, i32 15
  store i8* %236, i8** %data263, align 8, !tbaa !36
  %238 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_chan264 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %238, i32 0, i32 13
  store i32 1, i32* %n_chan264, align 4, !tbaa !38
  %239 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %n_planes = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %239, i32 0, i32 14
  store i32 1, i32* %n_planes, align 4, !tbaa !328
  %240 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack265 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %240, i32 0, i32 1
  %241 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack265, align 8, !tbaa !304
  %cmp266 = icmp ne %struct.pdf14_mask_s* %241, null
  br i1 %cmp266, label %if.then.268, label %if.end.271

if.then.268:                                      ; preds = %if.end.258
  %242 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack269 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %242, i32 0, i32 1
  %243 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack269, align 8, !tbaa !304
  %244 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory270 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %244, i32 0, i32 2
  %245 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory270, align 8, !tbaa !283
  call void @pdf14_free_mask_stack(%struct.pdf14_mask_s* %243, %struct.gs_memory_s* %245) #7
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.268, %if.end.258
  %246 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory272 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %246, i32 0, i32 2
  %247 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory272, align 8, !tbaa !283
  %call273 = call %struct.pdf14_mask_s* @pdf14_mask_element_new(%struct.gs_memory_s* %247) #7
  %248 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack274 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %248, i32 0, i32 1
  store %struct.pdf14_mask_s* %call273, %struct.pdf14_mask_s** %mask_stack274, align 8, !tbaa !304
  %249 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack275 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %249, i32 0, i32 1
  %250 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack275, align 8, !tbaa !304
  %cmp276 = icmp eq %struct.pdf14_mask_s* %250, null
  br i1 %cmp276, label %if.then.278, label %if.end.279

if.then.278:                                      ; preds = %if.end.271
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.279:                                       ; preds = %if.end.271
  %251 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %memory280 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %251, i32 0, i32 2
  %252 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory280, align 8, !tbaa !283
  %call281 = call %struct.pdf14_rcmask_s* @pdf14_rcmask_new(%struct.gs_memory_s* %252) #7
  %253 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack282 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %253, i32 0, i32 1
  %254 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack282, align 8, !tbaa !304
  %rc_mask283 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %254, i32 0, i32 0
  store %struct.pdf14_rcmask_s* %call281, %struct.pdf14_rcmask_s** %rc_mask283, align 8, !tbaa !314
  %255 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack284 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %255, i32 0, i32 1
  %256 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack284, align 8, !tbaa !304
  %rc_mask285 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %256, i32 0, i32 0
  %257 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask285, align 8, !tbaa !314
  %cmp286 = icmp eq %struct.pdf14_rcmask_s* %257, null
  br i1 %cmp286, label %if.then.288, label %if.end.289

if.then.288:                                      ; preds = %if.end.279
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.289:                                       ; preds = %if.end.279
  %258 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %tos, align 8, !tbaa !1
  %259 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx.addr, align 8, !tbaa !1
  %mask_stack290 = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %259, i32 0, i32 1
  %260 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack290, align 8, !tbaa !304
  %rc_mask291 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %260, i32 0, i32 0
  %261 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask291, align 8, !tbaa !314
  %mask_buf292 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %261, i32 0, i32 0
  store %struct.pdf14_buf_s* %258, %struct.pdf14_buf_s** %mask_buf292, align 8, !tbaa !339
  br label %if.end.293

if.end.293:                                       ; preds = %if.end.289, %if.end.145
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.293, %if.then.288, %if.then.278, %if.then.153
  %262 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %262) #2
  %263 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %263) #2
  %264 = bitcast %struct.gsicc_link_s** %icc_link to i8*
  call void @llvm.lifetime.end(i64 8, i8* %264) #2
  %265 = bitcast %struct.gsicc_rendering_param_s* %rendering_params to i8*
  call void @llvm.lifetime.end(i64 24, i8* %265) #2
  %266 = bitcast %struct.cmm_profile_s** %src_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %266) #2
  %267 = bitcast %struct.cmm_profile_s** %des_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %267) #2
  %268 = bitcast i32* %icc_match to i8*
  call void @llvm.lifetime.end(i64 4, i8* %268) #2
  %269 = bitcast i8** %new_data_buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %269) #2
  %270 = bitcast %struct.pdf14_buf_s** %tos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %270) #2
  %271 = load i32, i32* %retval
  ret i32 %271
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_free_mask_stack(%struct.pdf14_mask_s* %mask_stack, %struct.gs_memory_s* %memory) #1 {
entry:
  %mask_stack.addr = alloca %struct.pdf14_mask_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %curr_mask = alloca %struct.pdf14_mask_s*, align 8
  %old_mask = alloca %struct.pdf14_mask_s*, align 8
  store %struct.pdf14_mask_s* %mask_stack, %struct.pdf14_mask_s** %mask_stack.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %0 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack.addr, align 8, !tbaa !1
  %rc_mask = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %0, i32 0, i32 0
  %1 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask, align 8, !tbaa !314
  %cmp = icmp ne %struct.pdf14_rcmask_s* %1, null
  br i1 %cmp, label %if.then, label %if.else.35

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.pdf14_mask_s** %curr_mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack.addr, align 8, !tbaa !1
  store %struct.pdf14_mask_s* %3, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %4 = bitcast %struct.pdf14_mask_s** %old_mask to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  br label %while.cond

while.cond:                                       ; preds = %do.end.32, %if.then
  %5 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %cmp1 = icmp ne %struct.pdf14_mask_s* %5, null
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %6 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask2 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %6, i32 0, i32 0
  %7 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask2, align 8, !tbaa !314
  %tobool = icmp ne %struct.pdf14_rcmask_s* %7, null
  br i1 %tobool, label %if.then.3, label %if.end.30

if.then.3:                                        ; preds = %do.body
  br label %do.body.4

do.body.4:                                        ; preds = %if.then.3
  br label %do.body.5

do.body.5:                                        ; preds = %do.body.4
  br label %do.cond

do.cond:                                          ; preds = %do.body.5
  br label %do.end

do.end:                                           ; preds = %do.cond
  %8 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask6 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %8, i32 0, i32 0
  %9 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask6, align 8, !tbaa !314
  %rc = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %9, i32 0, i32 1
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %10 = load i64, i64* %ref_count, align 8, !tbaa !316
  %add = add nsw i64 %10, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !316
  br label %do.cond.7

do.cond.7:                                        ; preds = %do.end
  br label %do.end.8

do.end.8:                                         ; preds = %do.cond.7
  %11 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask9 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %11, i32 0, i32 0
  %12 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask9, align 8, !tbaa !314
  %rc10 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %12, i32 0, i32 1
  %ref_count11 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc10, i32 0, i32 0
  %13 = load i64, i64* %ref_count11, align 8, !tbaa !316
  %tobool12 = icmp ne i64 %13, 0
  br i1 %tobool12, label %if.else, label %if.then.13

if.then.13:                                       ; preds = %do.end.8
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  br label %do.body.15

do.body.15:                                       ; preds = %do.body.14
  br label %do.cond.16

do.cond.16:                                       ; preds = %do.body.15
  br label %do.end.17

do.end.17:                                        ; preds = %do.cond.16
  %14 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask18 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %14, i32 0, i32 0
  %15 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask18, align 8, !tbaa !314
  %rc19 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %15, i32 0, i32 1
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc19, i32 0, i32 2
  %16 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !319
  %17 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask20 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %17, i32 0, i32 0
  %18 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask20, align 8, !tbaa !314
  %rc21 = getelementptr inbounds %struct.pdf14_rcmask_s, %struct.pdf14_rcmask_s* %18, i32 0, i32 1
  %memory22 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc21, i32 0, i32 1
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory22, align 8, !tbaa !320
  %20 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask23 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %20, i32 0, i32 0
  %21 = load %struct.pdf14_rcmask_s*, %struct.pdf14_rcmask_s** %rc_mask23, align 8, !tbaa !314
  %22 = bitcast %struct.pdf14_rcmask_s* %21 to i8*
  call void %16(%struct.gs_memory_s* %19, i8* %22, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.54, i32 0, i32 0)) #7
  br label %do.cond.24

do.cond.24:                                       ; preds = %do.end.17
  br label %do.end.25

do.end.25:                                        ; preds = %do.cond.24
  %23 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %rc_mask26 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %23, i32 0, i32 0
  store %struct.pdf14_rcmask_s* null, %struct.pdf14_rcmask_s** %rc_mask26, align 8, !tbaa !314
  br label %if.end

if.else:                                          ; preds = %do.end.8
  br label %do.body.27

do.body.27:                                       ; preds = %if.else
  br label %do.cond.28

do.cond.28:                                       ; preds = %do.body.27
  br label %do.end.29

do.end.29:                                        ; preds = %do.cond.28
  br label %if.end

if.end:                                           ; preds = %do.end.29, %do.end.25
  br label %if.end.30

if.end.30:                                        ; preds = %if.end, %do.body
  br label %do.cond.31

do.cond.31:                                       ; preds = %if.end.30
  br label %do.end.32

do.end.32:                                        ; preds = %do.cond.31
  %24 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  store %struct.pdf14_mask_s* %24, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %25 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %25, i32 0, i32 1
  %26 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %previous, align 8, !tbaa !318
  store %struct.pdf14_mask_s* %26, %struct.pdf14_mask_s** %curr_mask, align 8, !tbaa !1
  %27 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %memory33 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %27, i32 0, i32 2
  %28 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory33, align 8, !tbaa !321
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %28, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %29 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %30 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %memory34 = getelementptr inbounds %struct.pdf14_mask_s, %struct.pdf14_mask_s* %30, i32 0, i32 2
  %31 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory34, align 8, !tbaa !321
  %32 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %old_mask, align 8, !tbaa !1
  %33 = bitcast %struct.pdf14_mask_s* %32 to i8*
  call void %29(%struct.gs_memory_s* %31, i8* %33, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.54, i32 0, i32 0)) #7
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %34 = bitcast %struct.pdf14_mask_s** %old_mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = bitcast %struct.pdf14_mask_s** %curr_mask to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  br label %if.end.38

if.else.35:                                       ; preds = %entry
  %36 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %procs36 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %36, i32 0, i32 1
  %free_object37 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs36, i32 0, i32 2
  %37 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object37, align 8, !tbaa !166
  %38 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %39 = load %struct.pdf14_mask_s*, %struct.pdf14_mask_s** %mask_stack.addr, align 8, !tbaa !1
  %40 = bitcast %struct.pdf14_mask_s* %39 to i8*
  call void %37(%struct.gs_memory_s* %38, i8* %40, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.54, i32 0, i32 0)) #7
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %while.end
  ret void
}

declare void @smask_copy(i32, i32, i32, i8*, i8*) #0

declare void @smask_blend(i8*, i32, i32, i32, i32) #0

declare void @smask_luminosity_mapping(i32, i32, i32, i32, i32, i8*, i8*, i32, i32) #0

declare void @smask_icc(%struct.gx_device_s*, i32, i32, i32, i32, i32, i8*, i8*, %struct.gsicc_link_s*) #0

; Function Attrs: nounwind uwtable
define internal void @pdf14_pop_parent_color(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %old_parent_color_info = alloca %struct.pdf14_parent_color_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_parent_color_s** %old_parent_color_info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 70
  %5 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  store %struct.pdf14_parent_color_s* %5, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %6 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %6, i32 0, i32 15
  %7 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %cmp = icmp ne %struct.cmm_profile_s* %7, null
  br i1 %cmp, label %if.then, label %if.end.34

if.then:                                          ; preds = %do.end
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %8 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile2 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %8, i32 0, i32 15
  %9 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile2, align 8, !tbaa !281
  %tobool = icmp ne %struct.cmm_profile_s* %9, null
  br i1 %tobool, label %if.then.3, label %if.end.31

if.then.3:                                        ; preds = %do.body.1
  br label %do.body.4

do.body.4:                                        ; preds = %if.then.3
  br label %do.body.5

do.body.5:                                        ; preds = %do.body.4
  br label %do.cond.6

do.cond.6:                                        ; preds = %do.body.5
  br label %do.end.7

do.end.7:                                         ; preds = %do.cond.6
  %10 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile8 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %10, i32 0, i32 15
  %11 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile8, align 8, !tbaa !281
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %11, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %12 = load i64, i64* %ref_count, align 8, !tbaa !145
  %add = add nsw i64 %12, -1
  store i64 %add, i64* %ref_count, align 8, !tbaa !145
  br label %do.cond.9

do.cond.9:                                        ; preds = %do.end.7
  br label %do.end.10

do.end.10:                                        ; preds = %do.cond.9
  %13 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile11 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %13, i32 0, i32 15
  %14 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile11, align 8, !tbaa !281
  %rc12 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %14, i32 0, i32 18
  %ref_count13 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc12, i32 0, i32 0
  %15 = load i64, i64* %ref_count13, align 8, !tbaa !145
  %tobool14 = icmp ne i64 %15, 0
  br i1 %tobool14, label %if.else, label %if.then.15

if.then.15:                                       ; preds = %do.end.10
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.body.16
  br label %do.cond.18

do.cond.18:                                       ; preds = %do.body.17
  br label %do.end.19

do.end.19:                                        ; preds = %do.cond.18
  %16 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile20 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %16, i32 0, i32 15
  %17 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile20, align 8, !tbaa !281
  %rc21 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %17, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc21, i32 0, i32 2
  %18 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %19 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile22 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %19, i32 0, i32 15
  %20 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile22, align 8, !tbaa !281
  %rc23 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %20, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc23, i32 0, i32 1
  %21 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %22 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile24 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %22, i32 0, i32 15
  %23 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile24, align 8, !tbaa !281
  %24 = bitcast %struct.cmm_profile_s* %23 to i8*
  call void %18(%struct.gs_memory_s* %21, i8* %24, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #7
  br label %do.cond.25

do.cond.25:                                       ; preds = %do.end.19
  br label %do.end.26

do.end.26:                                        ; preds = %do.cond.25
  %25 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %icc_profile27 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %25, i32 0, i32 15
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %icc_profile27, align 8, !tbaa !281
  br label %if.end

if.else:                                          ; preds = %do.end.10
  br label %do.body.28

do.body.28:                                       ; preds = %if.else
  br label %do.cond.29

do.cond.29:                                       ; preds = %do.body.28
  br label %do.end.30

do.end.30:                                        ; preds = %do.cond.29
  br label %if.end

if.end:                                           ; preds = %do.end.30, %do.end.26
  br label %if.end.31

if.end.31:                                        ; preds = %if.end, %do.body.1
  br label %do.cond.32

do.cond.32:                                       ; preds = %if.end.31
  br label %do.end.33

do.end.33:                                        ; preds = %do.cond.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %do.end
  %26 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %26, i32 0, i32 16
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %previous, align 8, !tbaa !303
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 70
  store %struct.pdf14_parent_color_s* %27, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs35, align 8, !tbaa !300
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory36 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %29, i32 0, i32 3
  %30 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory36, align 8, !tbaa !60
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %30, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %31 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory37 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %32, i32 0, i32 3
  %33 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory37, align 8, !tbaa !60
  %34 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %old_parent_color_info, align 8, !tbaa !1
  %35 = bitcast %struct.pdf14_parent_color_s* %34 to i8*
  call void %31(%struct.gs_memory_s* %33, i8* %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.57, i32 0, i32 0)) #7
  %36 = bitcast %struct.pdf14_parent_color_s** %old_parent_color_info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #2
  ret void
}

declare i32 @gx_default_dev_spec_op(%struct.gx_device_s*, i32, i8*, i32) #0

; Function Attrs: nounwind uwtable
define internal %struct.gs_ptr_procs_s* @pdf14_device_enum_ptrs(%struct.gs_memory_s* %mem, i8* %vptr, i32 %size, i32 %index, %struct.enum_ptr_s* %pep, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #1 {
entry:
  %retval = alloca %struct.gs_ptr_procs_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %pep.addr = alloca %struct.enum_ptr_s*, align 8
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store i32 %index, i32* %index.addr, align 4, !tbaa !5
  store %struct.enum_ptr_s* %pep, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %2 = bitcast i8* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = load i32, i32* %index.addr, align 4, !tbaa !5
  switch i32 %3, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.20
    i32 2, label %sw.bb.22
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.26
    i32 5, label %sw.bb.29
    i32 6, label %sw.bb.32
  ]

sw.default:                                       ; preds = %entry
  %4 = load i32, i32* %index.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %4, 7
  store i32 %sub, i32* %index.addr, align 4, !tbaa !5
  %5 = load i32, i32* %index.addr, align 4, !tbaa !5
  %6 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %6, i32 0, i32 44
  %separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 5
  %num_separations = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations, i32 0, i32 0
  %7 = load i32, i32* %num_separations, align 4, !tbaa !501
  %cmp = icmp slt i32 %5, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.default
  %8 = load i32, i32* %index.addr, align 4, !tbaa !5
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 44
  %separations2 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params1, i32 0, i32 5
  %names = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names, i32 0, i64 %idxprom
  %data = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx, i32 0, i32 1
  %10 = load i8*, i8** %data, align 8, !tbaa !191
  %11 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %11, i32 0, i32 0
  store i8* %10, i8** %ptr, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %sw.default
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 44
  %separations4 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params3, i32 0, i32 5
  %num_separations5 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations4, i32 0, i32 0
  %13 = load i32, i32* %num_separations5, align 4, !tbaa !501
  %14 = load i32, i32* %index.addr, align 4, !tbaa !5
  %sub6 = sub nsw i32 %14, %13
  store i32 %sub6, i32* %index.addr, align 4, !tbaa !5
  %15 = load i32, i32* %index.addr, align 4, !tbaa !5
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params7 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 44
  %pdf14_separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params7, i32 0, i32 10
  %num_separations8 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %pdf14_separations, i32 0, i32 0
  %17 = load i32, i32* %num_separations8, align 4, !tbaa !504
  %cmp9 = icmp slt i32 %15, %17
  br i1 %cmp9, label %if.then.10, label %if.end.18

if.then.10:                                       ; preds = %if.end
  %18 = load i32, i32* %index.addr, align 4, !tbaa !5
  %idxprom11 = sext i32 %18 to i64
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 44
  %pdf14_separations13 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params12, i32 0, i32 10
  %names14 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %pdf14_separations13, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names14, i32 0, i64 %idxprom11
  %data16 = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx15, i32 0, i32 1
  %20 = load i8*, i8** %data16, align 8, !tbaa !191
  %21 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr17 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %21, i32 0, i32 0
  store i8* %20, i8** %ptr17, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.18:                                        ; preds = %if.end
  store %struct.gs_ptr_procs_s* null, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb:                                            ; preds = %entry
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 47
  %23 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %24 = bitcast %struct.pdf14_ctx_s* %23 to i8*
  %25 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr19 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %25, i32 0, i32 0
  store i8* %24, i8** %ptr19, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.20:                                         ; preds = %entry
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 70
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  %28 = bitcast %struct.pdf14_parent_color_s* %27 to i8*
  %29 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr21 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %29, i32 0, i32 0
  store i8* %28, i8** %ptr21, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.22:                                         ; preds = %entry
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 48
  %31 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !299
  %32 = bitcast %struct.pdf14_smaskcolor_s* %31 to i8*
  %33 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr23 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %33, i32 0, i32 0
  store i8* %32, i8** %ptr23, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.24:                                         ; preds = %entry
  %34 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %34, i32 0, i32 43
  %35 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  %call = call %struct.gx_device_s* @gx_device_enum_ptr(%struct.gx_device_s* %35) #7
  %36 = bitcast %struct.gx_device_s* %call to i8*
  %37 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr25 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %37, i32 0, i32 0
  store i8* %36, i8** %ptr25, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.26:                                         ; preds = %entry
  %38 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params27 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %38, i32 0, i32 44
  %compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params27, i32 0, i32 8
  %39 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %compressed_color_list, align 8, !tbaa !154
  %40 = bitcast %struct.compressed_color_list_s* %39 to i8*
  %41 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr28 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %41, i32 0, i32 0
  store i8* %40, i8** %ptr28, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.29:                                         ; preds = %entry
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params30 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 44
  %pdf14_compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params30, i32 0, i32 9
  %43 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pdf14_compressed_color_list, align 8, !tbaa !505
  %44 = bitcast %struct.compressed_color_list_s* %43 to i8*
  %45 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr31 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %45, i32 0, i32 0
  store i8* %44, i8** %ptr31, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.32:                                         ; preds = %entry
  %46 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %46, i32 0, i32 58
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %call33 = call %struct.gx_device_s* @gx_device_enum_ptr(%struct.gx_device_s* %47) #7
  %48 = bitcast %struct.gx_device_s* %call33 to i8*
  %49 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %ptr34 = getelementptr inbounds %struct.enum_ptr_s, %struct.enum_ptr_s* %49, i32 0, i32 0
  store i8* %48, i8** %ptr34, align 8, !tbaa !502
  store %struct.gs_ptr_procs_s* @ptr_struct_procs, %struct.gs_ptr_procs_s** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.bb.32, %sw.bb.29, %sw.bb.26, %sw.bb.24, %sw.bb.22, %sw.bb.20, %sw.bb, %if.end.18, %if.then.10, %if.then
  %50 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %50) #2
  %51 = load %struct.gs_ptr_procs_s*, %struct.gs_ptr_procs_s** %retval
  ret %struct.gs_ptr_procs_s* %51
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_device_reloc_ptrs(i8* %vptr, i32 %size, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #1 {
entry:
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %i = alloca i32, align 4
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %2 = bitcast i8* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !5
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 44
  %separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 5
  %num_separations = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations, i32 0, i32 0
  %6 = load i32, i32* %num_separations, align 4, !tbaa !501
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %8 = bitcast %struct.gc_state_s* %7 to %struct.gc_procs_common_s**
  %9 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %8, align 8, !tbaa !1
  %reloc_struct_ptr = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %9, i32 0, i32 0
  %10 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr, align 8, !tbaa !506
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %11 to i64
  %12 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %13 = bitcast i8* %12 to %struct.pdf14_device_s*
  %devn_params1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 44
  %separations2 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params1, i32 0, i32 5
  %names = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names, i32 0, i64 %idxprom
  %data = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx, i32 0, i32 1
  %14 = load i8*, i8** %data, align 8, !tbaa !191
  %15 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call = call i8* %10(i8* %14, %struct.gc_state_s* %15) #7
  %16 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom3 = sext i32 %16 to i64
  %17 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %18 = bitcast i8* %17 to %struct.pdf14_device_s*
  %devn_params4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %18, i32 0, i32 44
  %separations5 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params4, i32 0, i32 5
  %names6 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %separations5, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names6, i32 0, i64 %idxprom3
  %data8 = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx7, i32 0, i32 1
  store i8* %call, i8** %data8, align 8, !tbaa !191
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %20) #2
  %21 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %22 = bitcast %struct.gc_state_s* %21 to %struct.gc_procs_common_s**
  %23 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %22, align 8, !tbaa !1
  %reloc_struct_ptr9 = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %23, i32 0, i32 0
  %24 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr9, align 8, !tbaa !506
  %25 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %26 = bitcast i8* %25 to %struct.pdf14_device_s*
  %devn_params10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 44
  %compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params10, i32 0, i32 8
  %27 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %compressed_color_list, align 8, !tbaa !154
  %28 = bitcast %struct.compressed_color_list_s* %27 to i8*
  %29 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call11 = call i8* %24(i8* %28, %struct.gc_state_s* %29) #7
  %30 = bitcast i8* %call11 to %struct.compressed_color_list_s*
  %31 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %32 = bitcast i8* %31 to %struct.pdf14_device_s*
  %devn_params12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %32, i32 0, i32 44
  %compressed_color_list13 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params12, i32 0, i32 8
  store %struct.compressed_color_list_s* %30, %struct.compressed_color_list_s** %compressed_color_list13, align 8, !tbaa !154
  %33 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %34 = bitcast %struct.gc_state_s* %33 to %struct.gc_procs_common_s**
  %35 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %34, align 8, !tbaa !1
  %reloc_struct_ptr14 = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %35, i32 0, i32 0
  %36 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr14, align 8, !tbaa !506
  %37 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %38 = bitcast i8* %37 to %struct.pdf14_device_s*
  %devn_params15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %38, i32 0, i32 44
  %pdf14_compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params15, i32 0, i32 9
  %39 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pdf14_compressed_color_list, align 8, !tbaa !505
  %40 = bitcast %struct.compressed_color_list_s* %39 to i8*
  %41 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call16 = call i8* %36(i8* %40, %struct.gc_state_s* %41) #7
  %42 = bitcast i8* %call16 to %struct.compressed_color_list_s*
  %43 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %44 = bitcast i8* %43 to %struct.pdf14_device_s*
  %devn_params17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 44
  %pdf14_compressed_color_list18 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params17, i32 0, i32 9
  store %struct.compressed_color_list_s* %42, %struct.compressed_color_list_s** %pdf14_compressed_color_list18, align 8, !tbaa !505
  %45 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %46 = bitcast %struct.gc_state_s* %45 to %struct.gc_procs_common_s**
  %47 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %46, align 8, !tbaa !1
  %reloc_struct_ptr19 = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %47, i32 0, i32 0
  %48 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr19, align 8, !tbaa !506
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 47
  %50 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %51 = bitcast %struct.pdf14_ctx_s* %50 to i8*
  %52 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call20 = call i8* %48(i8* %51, %struct.gc_state_s* %52) #7
  %53 = bitcast i8* %call20 to %struct.pdf14_ctx_s*
  %54 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx21 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %54, i32 0, i32 47
  store %struct.pdf14_ctx_s* %53, %struct.pdf14_ctx_s** %ctx21, align 8, !tbaa !7
  %55 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %56 = bitcast %struct.gc_state_s* %55 to %struct.gc_procs_common_s**
  %57 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %56, align 8, !tbaa !1
  %reloc_struct_ptr22 = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %57, i32 0, i32 0
  %58 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr22, align 8, !tbaa !506
  %59 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %59, i32 0, i32 48
  %60 = load %struct.pdf14_smaskcolor_s*, %struct.pdf14_smaskcolor_s** %smaskcolor, align 8, !tbaa !299
  %61 = bitcast %struct.pdf14_smaskcolor_s* %60 to i8*
  %62 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call23 = call i8* %58(i8* %61, %struct.gc_state_s* %62) #7
  %63 = bitcast i8* %call23 to %struct.pdf14_smaskcolor_s*
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %smaskcolor24 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 48
  store %struct.pdf14_smaskcolor_s* %63, %struct.pdf14_smaskcolor_s** %smaskcolor24, align 8, !tbaa !299
  %65 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %66 = bitcast %struct.gc_state_s* %65 to %struct.gc_procs_common_s**
  %67 = load %struct.gc_procs_common_s*, %struct.gc_procs_common_s** %66, align 8, !tbaa !1
  %reloc_struct_ptr25 = getelementptr inbounds %struct.gc_procs_common_s, %struct.gc_procs_common_s* %67, i32 0, i32 0
  %68 = load i8* (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)** %reloc_struct_ptr25, align 8, !tbaa !506
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 70
  %70 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  %71 = bitcast %struct.pdf14_parent_color_s* %70 to i8*
  %72 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call26 = call i8* %68(i8* %71, %struct.gc_state_s* %72) #7
  %73 = bitcast i8* %call26 to %struct.pdf14_parent_color_s*
  %74 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs27 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %74, i32 0, i32 70
  store %struct.pdf14_parent_color_s* %73, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs27, align 8, !tbaa !300
  %75 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %75, i32 0, i32 43
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  %77 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call28 = call %struct.gx_device_s* @gx_device_reloc_ptr(%struct.gx_device_s* %76, %struct.gc_state_s* %77) #7
  %78 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target29 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %78, i32 0, i32 43
  store %struct.gx_device_s* %call28, %struct.gx_device_s** %target29, align 8, !tbaa !82
  %79 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %79, i32 0, i32 58
  %80 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %81 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call30 = call %struct.gx_device_s* @gx_device_reloc_ptr(%struct.gx_device_s* %80, %struct.gc_state_s* %81) #7
  %82 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device31 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %82, i32 0, i32 58
  store %struct.gx_device_s* %call30, %struct.gx_device_s** %pclist_device31, align 8, !tbaa !234
  %83 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %83) #2
  ret void
}

declare %struct.gx_device_s* @gx_device_enum_ptr(%struct.gx_device_s*) #0

declare %struct.gx_device_s* @gx_device_reloc_ptr(%struct.gx_device_s*, %struct.gc_state_s*) #0

declare void @pdf14_unpack_additive(i32, i64, %struct.pdf14_device_s*, i8*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_put_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %target) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %code = alloca i32, align 4
  %image = alloca %struct.gs_image1_s, align 8
  %info = alloca %struct.gx_image_enum_common_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %y = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %linebuf = alloca i8*, align 8
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %bg = alloca i8, align 1
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %buf_ptr = alloca i8*, align 8
  %data_blended = alloca i32, align 4
  %num_rows_left = alloca i32, align 4
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %target_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  %alpha_offset = alloca i32, align 4
  %tag_offset = alloca i32, align 4
  %planes = alloca %struct.gx_image_plane_s, align 8
  %rows_used = alloca i32, align 4
  %k = alloca i32, align 4
  %x228 = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast %struct.gs_image1_s* %image to i8*
  call void @llvm.lifetime.start(i64 600, i8* %4) #2
  %5 = bitcast %struct.gx_image_enum_common_s** %info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 47
  %8 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %8, i32 0, i32 0
  %9 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %9, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %10 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %10) #2
  %11 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %11, i32 0, i32 10
  %12 = bitcast %struct.gs_int_rect_s* %rect to i8*
  %13 = bitcast %struct.gs_int_rect_s* %rect1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 4, i1 false), !tbaa.struct !27
  %14 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %16, i32 0, i32 13
  %17 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub = sub nsw i32 %17, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  %18 = bitcast i8** %linebuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #2
  %19 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  call void @llvm.lifetime.start(i64 1, i8* %bg) #2
  %20 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %20, i32 0, i32 47
  %21 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx2, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %21, i32 0, i32 4
  %22 = load i32, i32* %additive, align 4, !tbaa !272
  %tobool = icmp ne i32 %22, 0
  %cond = select i1 %tobool, i32 255, i32 0
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %bg, align 1, !tbaa !66
  %23 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #2
  %24 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #2
  %25 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %25) #2
  %26 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #2
  %27 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %27) #2
  %28 = bitcast i32* %data_blended to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  store i32 0, i32* %data_blended, align 4, !tbaa !5
  %29 = bitcast i32* %num_rows_left to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #2
  %30 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %30) #2
  %31 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #2
  %32 = bitcast %struct.cmm_dev_profile_s** %target_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #2
  %33 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %33, i32 0, i32 0
  %34 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %saved, align 8, !tbaa !305
  %cmp = icmp ne %struct.pdf14_buf_s* %34, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 1724, i32 0, i32 -1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.60, i32 0, i32 0)) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.4

do.body.4:                                        ; preds = %do.end
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %35, i32 0, i32 17
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %36 = load i32, i32* %x, align 4, !tbaa !335
  %p5 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x6 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p5, i32 0, i32 0
  %37 = load i32, i32* %x6, align 4, !tbaa !34
  %cmp7 = icmp sgt i32 %36, %37
  br i1 %cmp7, label %if.then.9, label %if.end.15

if.then.9:                                        ; preds = %do.body.4
  %38 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty10 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %38, i32 0, i32 17
  %p11 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty10, i32 0, i32 0
  %x12 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p11, i32 0, i32 0
  %39 = load i32, i32* %x12, align 4, !tbaa !335
  %p13 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x14 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p13, i32 0, i32 0
  store i32 %39, i32* %x14, align 4, !tbaa !34
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.9, %do.body.4
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty16 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 17
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty16, i32 0, i32 1
  %x17 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %41 = load i32, i32* %x17, align 4, !tbaa !337
  %q18 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x19 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q18, i32 0, i32 0
  %42 = load i32, i32* %x19, align 4, !tbaa !31
  %cmp20 = icmp slt i32 %41, %42
  br i1 %cmp20, label %if.then.22, label %if.end.28

if.then.22:                                       ; preds = %if.end.15
  %43 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty23 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %43, i32 0, i32 17
  %q24 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty23, i32 0, i32 1
  %x25 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q24, i32 0, i32 0
  %44 = load i32, i32* %x25, align 4, !tbaa !337
  %q26 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x27 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q26, i32 0, i32 0
  store i32 %44, i32* %x27, align 4, !tbaa !31
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.22, %if.end.15
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty29 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 17
  %p30 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty29, i32 0, i32 0
  %y31 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p30, i32 0, i32 1
  %46 = load i32, i32* %y31, align 4, !tbaa !336
  %p32 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p32, i32 0, i32 1
  %47 = load i32, i32* %y33, align 4, !tbaa !35
  %cmp34 = icmp sgt i32 %46, %47
  br i1 %cmp34, label %if.then.36, label %if.end.42

if.then.36:                                       ; preds = %if.end.28
  %48 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty37 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %48, i32 0, i32 17
  %p38 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty37, i32 0, i32 0
  %y39 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p38, i32 0, i32 1
  %49 = load i32, i32* %y39, align 4, !tbaa !336
  %p40 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y41 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p40, i32 0, i32 1
  store i32 %49, i32* %y41, align 4, !tbaa !35
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.36, %if.end.28
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty43 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 17
  %q44 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty43, i32 0, i32 1
  %y45 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q44, i32 0, i32 1
  %51 = load i32, i32* %y45, align 4, !tbaa !338
  %q46 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y47 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q46, i32 0, i32 1
  %52 = load i32, i32* %y47, align 4, !tbaa !33
  %cmp48 = icmp slt i32 %51, %52
  br i1 %cmp48, label %if.then.50, label %if.end.56

if.then.50:                                       ; preds = %if.end.42
  %53 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty51 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %53, i32 0, i32 17
  %q52 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty51, i32 0, i32 1
  %y53 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q52, i32 0, i32 1
  %54 = load i32, i32* %y53, align 4, !tbaa !338
  %q54 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y55 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q54, i32 0, i32 1
  store i32 %54, i32* %y55, align 4, !tbaa !33
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.50, %if.end.42
  br label %do.cond.57

do.cond.57:                                       ; preds = %if.end.56
  br label %do.end.58

do.end.58:                                        ; preds = %do.cond.57
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width59 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 13
  %56 = load i32, i32* %width59, align 4, !tbaa !30
  %q60 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x61 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q60, i32 0, i32 0
  %57 = load i32, i32* %x61, align 4, !tbaa !31
  %cmp62 = icmp slt i32 %56, %57
  br i1 %cmp62, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.58
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width64 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 13
  %59 = load i32, i32* %width64, align 4, !tbaa !30
  br label %cond.end

cond.false:                                       ; preds = %do.end.58
  %q65 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x66 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q65, i32 0, i32 0
  %60 = load i32, i32* %x66, align 4, !tbaa !31
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond67 = phi i32 [ %59, %cond.true ], [ %60, %cond.false ]
  store i32 %cond67, i32* %x1, align 4, !tbaa !5
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height68 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 14
  %62 = load i32, i32* %height68, align 4, !tbaa !32
  %q69 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y70 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q69, i32 0, i32 1
  %63 = load i32, i32* %y70, align 4, !tbaa !33
  %cmp71 = icmp slt i32 %62, %63
  br i1 %cmp71, label %cond.true.73, label %cond.false.75

cond.true.73:                                     ; preds = %cond.end
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height74 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 14
  %65 = load i32, i32* %height74, align 4, !tbaa !32
  br label %cond.end.78

cond.false.75:                                    ; preds = %cond.end
  %q76 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y77 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q76, i32 0, i32 1
  %66 = load i32, i32* %y77, align 4, !tbaa !33
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.false.75, %cond.true.73
  %cond79 = phi i32 [ %65, %cond.true.73 ], [ %66, %cond.false.75 ]
  store i32 %cond79, i32* %y1, align 4, !tbaa !5
  %67 = load i32, i32* %x1, align 4, !tbaa !5
  %p80 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x81 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p80, i32 0, i32 0
  %68 = load i32, i32* %x81, align 4, !tbaa !34
  %sub82 = sub nsw i32 %67, %68
  store i32 %sub82, i32* %width, align 4, !tbaa !5
  %69 = load i32, i32* %y1, align 4, !tbaa !5
  %p83 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y84 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p83, i32 0, i32 1
  %70 = load i32, i32* %y84, align 4, !tbaa !35
  %sub85 = sub nsw i32 %69, %70
  store i32 %sub85, i32* %height, align 4, !tbaa !5
  %71 = load i32, i32* %width, align 4, !tbaa !5
  %cmp86 = icmp sle i32 %71, 0
  br i1 %cmp86, label %if.then.93, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.78
  %72 = load i32, i32* %height, align 4, !tbaa !5
  %cmp88 = icmp sle i32 %72, 0
  br i1 %cmp88, label %if.then.93, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %lor.lhs.false
  %73 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %73, i32 0, i32 15
  %74 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp91 = icmp eq i8* %74, null
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %lor.lhs.false.90, %lor.lhs.false, %cond.end.78
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.94:                                        ; preds = %lor.lhs.false.90
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data95 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 15
  %76 = load i8*, i8** %data95, align 8, !tbaa !36
  %p96 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y97 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p96, i32 0, i32 1
  %77 = load i32, i32* %y97, align 4, !tbaa !35
  %78 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %78, i32 0, i32 11
  %79 = load i32, i32* %rowstride, align 4, !tbaa !59
  %mul = mul nsw i32 %77, %79
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %76, i64 %idx.ext
  %p98 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x99 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p98, i32 0, i32 0
  %80 = load i32, i32* %x99, align 4, !tbaa !34
  %idx.ext100 = sext i32 %80 to i64
  %add.ptr101 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext100
  store i8* %add.ptr101, i8** %buf_ptr, align 8, !tbaa !1
  %81 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %81, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %82 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %83 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call102 = call i32 %82(%struct.gx_device_s* %83, %struct.cmm_dev_profile_s** %target_profile) #7
  store i32 %call102, i32* %code, align 4, !tbaa !5
  %84 = load i32, i32* %code, align 4, !tbaa !5
  %cmp103 = icmp slt i32 %84, 0
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.94
  %85 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %85, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.106:                                       ; preds = %if.end.94
  %86 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %target_profile, align 8, !tbaa !1
  %cmp107 = icmp eq %struct.cmm_dev_profile_s* %86, null
  br i1 %cmp107, label %if.then.109, label %if.end.112

if.then.109:                                      ; preds = %if.end.106
  %call110 = call i8* @gs_errstr(i32 -100) #7
  %call111 = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 1748, i32 0, i32 -100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i8* %call110) #7
  store i32 %call111, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.112:                                       ; preds = %if.end.106
  %87 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs113 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %87, i32 0, i32 42
  %put_image = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs113, i32 0, i32 64
  %88 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)** %put_image, align 8, !tbaa !508
  %cmp114 = icmp ne i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* %88, null
  br i1 %cmp114, label %if.then.116, label %if.end.164

if.then.116:                                      ; preds = %if.end.112
  %89 = bitcast i32* %alpha_offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %89) #2
  %90 = load i32, i32* %num_comp, align 4, !tbaa !5
  store i32 %90, i32* %alpha_offset, align 4, !tbaa !5
  %91 = bitcast i32* %tag_offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %91) #2
  %92 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %92, i32 0, i32 9
  %93 = load i32, i32* %has_tags, align 4, !tbaa !327
  %tobool117 = icmp ne i32 %93, 0
  br i1 %tobool117, label %cond.true.118, label %cond.false.119

cond.true.118:                                    ; preds = %if.then.116
  %94 = load i32, i32* %num_comp, align 4, !tbaa !5
  %add = add nsw i32 %94, 1
  br label %cond.end.120

cond.false.119:                                   ; preds = %if.then.116
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.119, %cond.true.118
  %cond121 = phi i32 [ %add, %cond.true.118 ], [ 0, %cond.false.119 ]
  store i32 %cond121, i32* %tag_offset, align 4, !tbaa !5
  %95 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs122 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %95, i32 0, i32 42
  %put_image123 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs122, i32 0, i32 64
  %96 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)** %put_image123, align 8, !tbaa !508
  %97 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %98 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %99 = load i32, i32* %num_comp, align 4, !tbaa !5
  %p124 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x125 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p124, i32 0, i32 0
  %100 = load i32, i32* %x125, align 4, !tbaa !34
  %p126 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y127 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p126, i32 0, i32 1
  %101 = load i32, i32* %y127, align 4, !tbaa !35
  %102 = load i32, i32* %width, align 4, !tbaa !5
  %103 = load i32, i32* %height, align 4, !tbaa !5
  %104 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride128 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %104, i32 0, i32 11
  %105 = load i32, i32* %rowstride128, align 4, !tbaa !59
  %106 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %106, i32 0, i32 12
  %107 = load i32, i32* %planestride, align 4, !tbaa !58
  %108 = load i32, i32* %num_comp, align 4, !tbaa !5
  %109 = load i32, i32* %tag_offset, align 4, !tbaa !5
  %call129 = call i32 %96(%struct.gx_device_s* %97, i8* %98, i32 %99, i32 %100, i32 %101, i32 %102, i32 %103, i32 %105, i32 %107, i32 %108, i32 %109) #7
  store i32 %call129, i32* %code, align 4, !tbaa !5
  %110 = load i32, i32* %code, align 4, !tbaa !5
  %cmp130 = icmp eq i32 %110, 0
  br i1 %cmp130, label %if.then.132, label %if.end.144

if.then.132:                                      ; preds = %cond.end.120
  %111 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %112 = load i32, i32* %width, align 4, !tbaa !5
  %113 = load i32, i32* %height, align 4, !tbaa !5
  %114 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride133 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %114, i32 0, i32 11
  %115 = load i32, i32* %rowstride133, align 4, !tbaa !59
  %116 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride134 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %116, i32 0, i32 12
  %117 = load i32, i32* %planestride134, align 4, !tbaa !58
  %118 = load i32, i32* %num_comp, align 4, !tbaa !5
  %119 = load i8, i8* %bg, align 1, !tbaa !66
  call void @gx_blend_image_buffer(i8* %111, i32 %112, i32 %113, i32 %115, i32 %117, i32 %118, i8 zeroext %119) #7
  store i32 1, i32* %data_blended, align 4, !tbaa !5
  store i32 0, i32* %alpha_offset, align 4, !tbaa !5
  %120 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs135 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %120, i32 0, i32 42
  %put_image136 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs135, i32 0, i32 64
  %121 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)** %put_image136, align 8, !tbaa !508
  %122 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %123 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %124 = load i32, i32* %num_comp, align 4, !tbaa !5
  %p137 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x138 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p137, i32 0, i32 0
  %125 = load i32, i32* %x138, align 4, !tbaa !34
  %p139 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y140 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p139, i32 0, i32 1
  %126 = load i32, i32* %y140, align 4, !tbaa !35
  %127 = load i32, i32* %width, align 4, !tbaa !5
  %128 = load i32, i32* %height, align 4, !tbaa !5
  %129 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride141 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %129, i32 0, i32 11
  %130 = load i32, i32* %rowstride141, align 4, !tbaa !59
  %131 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride142 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %131, i32 0, i32 12
  %132 = load i32, i32* %planestride142, align 4, !tbaa !58
  %133 = load i32, i32* %alpha_offset, align 4, !tbaa !5
  %134 = load i32, i32* %tag_offset, align 4, !tbaa !5
  %call143 = call i32 %121(%struct.gx_device_s* %122, i8* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %130, i32 %132, i32 %133, i32 %134) #7
  store i32 %call143, i32* %code, align 4, !tbaa !5
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.132, %cond.end.120
  %135 = load i32, i32* %code, align 4, !tbaa !5
  %cmp145 = icmp sgt i32 %135, 0
  br i1 %cmp145, label %if.then.147, label %if.end.162

if.then.147:                                      ; preds = %if.end.144
  %136 = load i32, i32* %height, align 4, !tbaa !5
  %137 = load i32, i32* %code, align 4, !tbaa !5
  %sub148 = sub nsw i32 %136, %137
  store i32 %sub148, i32* %num_rows_left, align 4, !tbaa !5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.147
  %138 = load i32, i32* %num_rows_left, align 4, !tbaa !5
  %cmp149 = icmp sgt i32 %138, 0
  br i1 %cmp149, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %139 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs151 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %139, i32 0, i32 42
  %put_image152 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs151, i32 0, i32 64
  %140 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)** %put_image152, align 8, !tbaa !508
  %141 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %142 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %143 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_planes = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %143, i32 0, i32 14
  %144 = load i32, i32* %n_planes, align 4, !tbaa !328
  %p153 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x154 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p153, i32 0, i32 0
  %145 = load i32, i32* %x154, align 4, !tbaa !34
  %p155 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y156 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p155, i32 0, i32 1
  %146 = load i32, i32* %y156, align 4, !tbaa !35
  %147 = load i32, i32* %code, align 4, !tbaa !5
  %add157 = add nsw i32 %146, %147
  %148 = load i32, i32* %width, align 4, !tbaa !5
  %149 = load i32, i32* %num_rows_left, align 4, !tbaa !5
  %150 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride158 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %150, i32 0, i32 11
  %151 = load i32, i32* %rowstride158, align 4, !tbaa !59
  %152 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride159 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %152, i32 0, i32 12
  %153 = load i32, i32* %planestride159, align 4, !tbaa !58
  %154 = load i32, i32* %alpha_offset, align 4, !tbaa !5
  %155 = load i32, i32* %tag_offset, align 4, !tbaa !5
  %call160 = call i32 %140(%struct.gx_device_s* %141, i8* %142, i32 %144, i32 %145, i32 %add157, i32 %148, i32 %149, i32 %151, i32 %153, i32 %154, i32 %155) #7
  store i32 %call160, i32* %code, align 4, !tbaa !5
  %156 = load i32, i32* %num_rows_left, align 4, !tbaa !5
  %157 = load i32, i32* %code, align 4, !tbaa !5
  %sub161 = sub nsw i32 %156, %157
  store i32 %sub161, i32* %num_rows_left, align 4, !tbaa !5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.162:                                       ; preds = %if.end.144
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.162, %while.end
  %158 = bitcast i32* %tag_offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #2
  %159 = bitcast i32* %alpha_offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %159) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.267 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.164

if.end.164:                                       ; preds = %cleanup.cont, %if.end.112
  %160 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %160, i32 0, i32 1
  %161 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %call165 = call i32 @gs_cspace_build_ICC(%struct.gs_color_space_s** %pcs, i8* null, %struct.gs_memory_s* %161) #7
  store i32 %call165, i32* %code, align 4, !tbaa !5
  %162 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmp166 = icmp eq %struct.gs_color_space_s* %162, null
  br i1 %cmp166, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %if.end.164
  store i32 -25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.169:                                       ; preds = %if.end.164
  %163 = load i32, i32* %code, align 4, !tbaa !5
  %cmp170 = icmp slt i32 %163, 0
  br i1 %cmp170, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %if.end.169
  %164 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %164, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.173:                                       ; preds = %if.end.169
  %165 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs174 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %165, i32 0, i32 42
  %get_profile175 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs174, i32 0, i32 67
  %166 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile175, align 8, !tbaa !78
  %167 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call176 = call i32 %166(%struct.gx_device_s* %167, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call176, i32* %code, align 4, !tbaa !5
  %168 = load i32, i32* %code, align 4, !tbaa !5
  %cmp177 = icmp slt i32 %168, 0
  br i1 %cmp177, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %if.end.173
  %169 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @rc_decrement_only_cs(%struct.gs_color_space_s* %169, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %170 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %170, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.180:                                       ; preds = %if.end.173
  %171 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %172 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %172, i32 0, i32 6
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %171, %struct.cmm_profile_s** %cmm_icc_profile_data, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body.181

do.body.181:                                      ; preds = %if.end.180
  %173 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data182 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %173, i32 0, i32 6
  %174 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data182, align 8, !tbaa !471
  %tobool183 = icmp ne %struct.cmm_profile_s* %174, null
  br i1 %tobool183, label %if.then.184, label %if.end.192

if.then.184:                                      ; preds = %do.body.181
  br label %do.body.185

do.body.185:                                      ; preds = %if.then.184
  %175 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data186 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %175, i32 0, i32 6
  %176 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data186, align 8, !tbaa !471
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %176, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %177 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %177, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.187

do.body.187:                                      ; preds = %do.body.185
  br label %do.cond.188

do.cond.188:                                      ; preds = %do.body.187
  br label %do.end.189

do.end.189:                                       ; preds = %do.cond.188
  br label %do.cond.190

do.cond.190:                                      ; preds = %do.end.189
  br label %do.end.191

do.end.191:                                       ; preds = %do.cond.190
  br label %if.end.192

if.end.192:                                       ; preds = %do.end.191, %do.body.181
  br label %do.cond.193

do.cond.193:                                      ; preds = %if.end.192
  br label %do.end.194

do.end.194:                                       ; preds = %do.cond.193
  %178 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data195 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %178, i32 0, i32 6
  call void @gscms_set_icc_range(%struct.cmm_profile_s** %cmm_icc_profile_data195) #7
  %179 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @gs_image_t_init_adjust(%struct.gs_image1_s* %image, %struct.gs_color_space_s* %179, i32 0) #7
  %180 = load i32, i32* %width, align 4, !tbaa !5
  %conv196 = sitofp i32 %180 to float
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 1
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %ImageMatrix, i32 0, i32 0
  store float %conv196, float* %xx, align 4, !tbaa !509
  %181 = load i32, i32* %height, align 4, !tbaa !5
  %conv197 = sitofp i32 %181 to float
  %ImageMatrix198 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 1
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %ImageMatrix198, i32 0, i32 3
  store float %conv197, float* %yy, align 4, !tbaa !510
  %182 = load i32, i32* %width, align 4, !tbaa !5
  %Width = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 2
  store i32 %182, i32* %Width, align 4, !tbaa !414
  %183 = load i32, i32* %height, align 4, !tbaa !5
  %Height = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 3
  store i32 %183, i32* %Height, align 4, !tbaa !416
  %BitsPerComponent = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 4
  store i32 8, i32* %BitsPerComponent, align 4, !tbaa !511
  %184 = load i32, i32* %width, align 4, !tbaa !5
  %conv199 = sitofp i32 %184 to float
  %185 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %185, i32 0, i32 5
  %186 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %xx200 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %186, i32 0, i32 0
  store float %conv199, float* %xx200, align 4, !tbaa !512
  %187 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm201 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %187, i32 0, i32 5
  %188 = bitcast %struct.gs_matrix_fixed_s* %ctm201 to %struct.gs_matrix_s*
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %188, i32 0, i32 1
  store float 0.000000e+00, float* %xy, align 4, !tbaa !513
  %189 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm202 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %189, i32 0, i32 5
  %190 = bitcast %struct.gs_matrix_fixed_s* %ctm202 to %struct.gs_matrix_s*
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %190, i32 0, i32 2
  store float 0.000000e+00, float* %yx, align 4, !tbaa !514
  %191 = load i32, i32* %height, align 4, !tbaa !5
  %conv203 = sitofp i32 %191 to float
  %192 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm204 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %192, i32 0, i32 5
  %193 = bitcast %struct.gs_matrix_fixed_s* %ctm204 to %struct.gs_matrix_s*
  %yy205 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %193, i32 0, i32 3
  store float %conv203, float* %yy205, align 4, !tbaa !515
  %p206 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x207 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p206, i32 0, i32 0
  %194 = load i32, i32* %x207, align 4, !tbaa !34
  %conv208 = sitofp i32 %194 to float
  %195 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm209 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %195, i32 0, i32 5
  %196 = bitcast %struct.gs_matrix_fixed_s* %ctm209 to %struct.gs_matrix_s*
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %196, i32 0, i32 4
  store float %conv208, float* %tx, align 4, !tbaa !137
  %p210 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y211 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p210, i32 0, i32 1
  %197 = load i32, i32* %y211, align 4, !tbaa !35
  %conv212 = sitofp i32 %197 to float
  %198 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm213 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %198, i32 0, i32 5
  %199 = bitcast %struct.gs_matrix_fixed_s* %ctm213 to %struct.gs_matrix_s*
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %199, i32 0, i32 5
  store float %conv212, float* %ty, align 4, !tbaa !138
  %200 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs214 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %200, i32 0, i32 42
  %begin_typed_image = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs214, i32 0, i32 37
  %201 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)** %begin_typed_image, align 8, !tbaa !516
  %202 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %203 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %204 = bitcast %struct.gs_image1_s* %image to %struct.gs_image_common_s*
  %205 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory215 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %205, i32 0, i32 1
  %206 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory215, align 8, !tbaa !165
  %call216 = call i32 %201(%struct.gx_device_s* %202, %struct.gs_imager_state_s* %203, %struct.gs_matrix_s* null, %struct.gs_image_common_s* %204, %struct.gs_int_rect_s* null, %struct.gx_device_color_s* null, %struct.gx_clip_path_s* null, %struct.gs_memory_s* %206, %struct.gx_image_enum_common_s** %info) #7
  store i32 %call216, i32* %code, align 4, !tbaa !5
  %207 = load i32, i32* %code, align 4, !tbaa !5
  %cmp217 = icmp slt i32 %207, 0
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %do.end.194
  %208 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @rc_decrement_only_cs(%struct.gs_color_space_s* %208, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %209 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %209, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

if.end.220:                                       ; preds = %do.end.194
  %210 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory221 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %210, i32 0, i32 3
  %211 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory221, align 8, !tbaa !225
  %procs222 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %211, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs222, i32 0, i32 7
  %212 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %213 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory223 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %213, i32 0, i32 3
  %214 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory223, align 8, !tbaa !225
  %215 = load i32, i32* %width, align 4, !tbaa !5
  %216 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul224 = mul nsw i32 %215, %216
  %call225 = call i8* %212(%struct.gs_memory_s* %214, i32 %mul224, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  store i8* %call225, i8** %linebuf, align 8, !tbaa !1
  store i32 0, i32* %y, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.259, %if.end.220
  %217 = load i32, i32* %y, align 4, !tbaa !5
  %218 = load i32, i32* %height, align 4, !tbaa !5
  %cmp226 = icmp slt i32 %217, %218
  br i1 %cmp226, label %for.body, label %for.end.261

for.body:                                         ; preds = %for.cond
  %219 = bitcast %struct.gx_image_plane_s* %planes to i8*
  call void @llvm.lifetime.start(i64 16, i8* %219) #2
  %220 = bitcast i32* %rows_used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %220) #2
  %221 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %221) #2
  %222 = bitcast i32* %x228 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %222) #2
  %223 = load i32, i32* %data_blended, align 4, !tbaa !5
  %tobool229 = icmp ne i32 %223, 0
  br i1 %tobool229, label %if.then.230, label %if.else

if.then.230:                                      ; preds = %for.body
  store i32 0, i32* %x228, align 4, !tbaa !5
  br label %for.cond.231

for.cond.231:                                     ; preds = %for.inc.247, %if.then.230
  %224 = load i32, i32* %x228, align 4, !tbaa !5
  %225 = load i32, i32* %width, align 4, !tbaa !5
  %cmp232 = icmp slt i32 %224, %225
  br i1 %cmp232, label %for.body.234, label %for.end.249

for.body.234:                                     ; preds = %for.cond.231
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.235

for.cond.235:                                     ; preds = %for.inc, %for.body.234
  %226 = load i32, i32* %k, align 4, !tbaa !5
  %227 = load i32, i32* %num_comp, align 4, !tbaa !5
  %cmp236 = icmp slt i32 %226, %227
  br i1 %cmp236, label %for.body.238, label %for.end

for.body.238:                                     ; preds = %for.cond.235
  %228 = load i32, i32* %x228, align 4, !tbaa !5
  %229 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride239 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %229, i32 0, i32 12
  %230 = load i32, i32* %planestride239, align 4, !tbaa !58
  %231 = load i32, i32* %k, align 4, !tbaa !5
  %mul240 = mul nsw i32 %230, %231
  %add241 = add nsw i32 %228, %mul240
  %idxprom = sext i32 %add241 to i64
  %232 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %232, i64 %idxprom
  %233 = load i8, i8* %arrayidx, align 1, !tbaa !66
  %234 = load i32, i32* %x228, align 4, !tbaa !5
  %235 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul242 = mul nsw i32 %234, %235
  %236 = load i32, i32* %k, align 4, !tbaa !5
  %add243 = add nsw i32 %mul242, %236
  %idxprom244 = sext i32 %add243 to i64
  %237 = load i8*, i8** %linebuf, align 8, !tbaa !1
  %arrayidx245 = getelementptr inbounds i8, i8* %237, i64 %idxprom244
  store i8 %233, i8* %arrayidx245, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body.238
  %238 = load i32, i32* %k, align 4, !tbaa !5
  %inc246 = add nsw i32 %238, 1
  store i32 %inc246, i32* %k, align 4, !tbaa !5
  br label %for.cond.235

for.end:                                          ; preds = %for.cond.235
  br label %for.inc.247

for.inc.247:                                      ; preds = %for.end
  %239 = load i32, i32* %x228, align 4, !tbaa !5
  %inc248 = add nsw i32 %239, 1
  store i32 %inc248, i32* %x228, align 4, !tbaa !5
  br label %for.cond.231

for.end.249:                                      ; preds = %for.cond.231
  br label %if.end.251

if.else:                                          ; preds = %for.body
  %240 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %241 = load i32, i32* %y, align 4, !tbaa !5
  %242 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride250 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %242, i32 0, i32 12
  %243 = load i32, i32* %planestride250, align 4, !tbaa !58
  %244 = load i32, i32* %width, align 4, !tbaa !5
  %245 = load i32, i32* %num_comp, align 4, !tbaa !5
  %246 = load i8, i8* %bg, align 1, !tbaa !66
  %247 = load i8*, i8** %linebuf, align 8, !tbaa !1
  call void @gx_build_blended_image_row(i8* %240, i32 %241, i32 %243, i32 %244, i32 %245, i8 zeroext %246, i8* %247) #7
  br label %if.end.251

if.end.251:                                       ; preds = %if.else, %for.end.249
  %248 = load i8*, i8** %linebuf, align 8, !tbaa !1
  %data252 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 0
  store i8* %248, i8** %data252, align 8, !tbaa !517
  %data_x = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 1
  store i32 0, i32* %data_x, align 4, !tbaa !519
  %249 = load i32, i32* %width, align 4, !tbaa !5
  %250 = load i32, i32* %num_comp, align 4, !tbaa !5
  %mul253 = mul nsw i32 %249, %250
  %raster = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 2
  store i32 %mul253, i32* %raster, align 4, !tbaa !520
  %251 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %procs254 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %251, i32 0, i32 1
  %252 = load %struct.gx_image_enum_procs_s*, %struct.gx_image_enum_procs_s** %procs254, align 8, !tbaa !521
  %plane_data = getelementptr inbounds %struct.gx_image_enum_procs_s, %struct.gx_image_enum_procs_s* %252, i32 0, i32 0
  %253 = load i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)** %plane_data, align 8, !tbaa !523
  %254 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %call255 = call i32 %253(%struct.gx_image_enum_common_s* %254, %struct.gx_image_plane_s* %planes, i32 1, i32* %rows_used) #7
  %255 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride256 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %255, i32 0, i32 11
  %256 = load i32, i32* %rowstride256, align 4, !tbaa !59
  %257 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %idx.ext257 = sext i32 %256 to i64
  %add.ptr258 = getelementptr inbounds i8, i8* %257, i64 %idx.ext257
  store i8* %add.ptr258, i8** %buf_ptr, align 8, !tbaa !1
  %258 = bitcast i32* %x228 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %258) #2
  %259 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %259) #2
  %260 = bitcast i32* %rows_used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %260) #2
  %261 = bitcast %struct.gx_image_plane_s* %planes to i8*
  call void @llvm.lifetime.end(i64 16, i8* %261) #2
  br label %for.inc.259

for.inc.259:                                      ; preds = %if.end.251
  %262 = load i32, i32* %y, align 4, !tbaa !5
  %inc260 = add nsw i32 %262, 1
  store i32 %inc260, i32* %y, align 4, !tbaa !5
  br label %for.cond

for.end.261:                                      ; preds = %for.cond
  %263 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory262 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %263, i32 0, i32 3
  %264 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory262, align 8, !tbaa !225
  %procs263 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %264, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs263, i32 0, i32 2
  %265 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %266 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory264 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %266, i32 0, i32 3
  %267 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory264, align 8, !tbaa !225
  %268 = load i8*, i8** %linebuf, align 8, !tbaa !1
  call void %265(%struct.gs_memory_s* %267, i8* %268, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %269 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %procs265 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %269, i32 0, i32 1
  %270 = load %struct.gx_image_enum_procs_s*, %struct.gx_image_enum_procs_s** %procs265, align 8, !tbaa !521
  %end_image = getelementptr inbounds %struct.gx_image_enum_procs_s, %struct.gx_image_enum_procs_s* %270, i32 0, i32 1
  %271 = load i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*, i32)** %end_image, align 8, !tbaa !525
  %272 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %call266 = call i32 %271(%struct.gx_image_enum_common_s* %272, i32 1) #7
  %273 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @rc_decrement_only_cs(%struct.gs_color_space_s* %273, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %274 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %274, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.267

cleanup.267:                                      ; preds = %for.end.261, %if.then.219, %if.then.179, %if.then.172, %if.then.168, %cleanup, %if.then.109, %if.then.105, %if.then.93, %if.then
  %275 = bitcast %struct.cmm_dev_profile_s** %target_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %275) #2
  %276 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %276) #2
  %277 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %277) #2
  %278 = bitcast i32* %num_rows_left to i8*
  call void @llvm.lifetime.end(i64 4, i8* %278) #2
  %279 = bitcast i32* %data_blended to i8*
  call void @llvm.lifetime.end(i64 4, i8* %279) #2
  %280 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %280) #2
  %281 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %281) #2
  %282 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %282) #2
  %283 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %283) #2
  %284 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %284) #2
  call void @llvm.lifetime.end(i64 1, i8* %bg) #2
  %285 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %285) #2
  %286 = bitcast i8** %linebuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %286) #2
  %287 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %287) #2
  %288 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %288) #2
  %289 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %289) #2
  %290 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %290) #2
  %291 = bitcast %struct.gx_image_enum_common_s** %info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %291) #2
  %292 = bitcast %struct.gs_image1_s* %image to i8*
  call void @llvm.lifetime.end(i64 600, i8* %292) #2
  %293 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %293) #2
  %294 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %294) #2
  %295 = load i32, i32* %retval
  ret i32 %295
}

declare i8* @gs_errstr(i32) #0

declare void @gx_blend_image_buffer(i8*, i32, i32, i32, i32, i32, i8 zeroext) #0

declare i32 @gs_cspace_build_ICC(%struct.gs_color_space_s**, i8*, %struct.gs_memory_s*) #0

declare void @rc_decrement_only_cs(%struct.gs_color_space_s*, i8*) #0

declare void @gscms_set_icc_range(%struct.cmm_profile_s**) #0

declare void @gs_image_t_init_adjust(%struct.gs_image1_s*, %struct.gs_color_space_s*, i32) #0

declare void @gx_build_blended_image_row(i8*, i32, i32, i32, i32, i8 zeroext, i8*) #0

declare void @art_blend_luminosity_custom_8(i32, i8*, i8*, i8*) #0

declare void @art_blend_saturation_custom_8(i32, i8*, i8*, i8*) #0

declare %struct.gx_cm_color_map_procs_s* @gx_default_DevRGB_get_color_mapping_procs(%struct.gx_device_s*) #0

declare i32 @gx_default_DevRGB_get_color_comp_index(%struct.gx_device_s*, i8*, i32, i32) #0

declare void @art_blend_luminosity_rgb_8(i32, i8*, i8*, i8*) #0

declare void @art_blend_saturation_rgb_8(i32, i8*, i8*, i8*) #0

declare %struct.gx_cm_color_map_procs_s* @gx_default_DevCMYK_get_color_mapping_procs(%struct.gx_device_s*) #0

declare i32 @gx_default_DevCMYK_get_color_comp_index(%struct.gx_device_s*, i8*, i32, i32) #0

declare void @pdf14_unpack_subtractive(i32, i64, %struct.pdf14_device_s*, i8*) #0

declare void @art_blend_luminosity_cmyk_8(i32, i8*, i8*, i8*) #0

declare void @art_blend_saturation_cmyk_8(i32, i8*, i8*, i8*) #0

; Function Attrs: nounwind uwtable
define internal %struct.gx_cm_color_map_procs_s* @pdf14_cmykspot_get_color_mapping_procs(%struct.gx_device_s* %dev) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  ret %struct.gx_cm_color_map_procs_s* @pdf14_DeviceCMYKspot_procs
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_cmykspot_get_color_comp_index(%struct.gx_device_s* %dev, i8* %pname, i32 %name_size, i32 %component_type) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pname.addr = alloca i8*, align 8
  %name_size.addr = alloca i32, align 4
  %component_type.addr = alloca i32, align 4
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %pdevn_params = alloca %struct.gs_devn_params_s*, align 8
  %pseparations = alloca %struct.gs_separations_s*, align 8
  %comp_index = alloca i32, align 4
  %target_get_color_comp_index = alloca i32 (%struct.gx_device_s*, i8*, i32, i32)*, align 8
  %cleanup.dest.slot = alloca i32
  %sep_num = alloca i32, align 4
  %color_component_number = alloca i32, align 4
  %sep_name = alloca i8*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %pname, i8** %pname.addr, align 8, !tbaa !1
  store i32 %name_size, i32* %name_size.addr, align 4, !tbaa !5
  store i32 %component_type, i32* %component_type.addr, align 4, !tbaa !5
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast %struct.gs_devn_params_s** %pdevn_params to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 44
  store %struct.gs_devn_params_s* %devn_params, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %8 = bitcast %struct.gs_separations_s** %pseparations to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %9, i32 0, i32 5
  store %struct.gs_separations_s* %separations, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %10 = bitcast i32* %comp_index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 50
  %13 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !480
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %13, i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index, align 8, !tbaa !1
  %14 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index, align 8, !tbaa !1
  %cmp = icmp eq i32 (%struct.gx_device_s*, i8*, i32, i32)* %14, @pdf14_cmykspot_get_color_comp_index
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 65
  %16 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %saved_target_get_color_comp_index, align 8, !tbaa !526
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %16, i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %component_type.addr, align 4, !tbaa !5
  %cmp1 = icmp eq i32 %17, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %18 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index, align 8, !tbaa !1
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %20 = load i8*, i8** %pname.addr, align 8, !tbaa !1
  %21 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %22 = load i32, i32* %component_type.addr, align 4, !tbaa !5
  %call = call i32 %18(%struct.gx_device_s* %19, i8* %20, i32 %21, i32 %22) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %24 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %25 = load i8*, i8** %pname.addr, align 8, !tbaa !1
  %26 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %27 = load i32, i32* %component_type.addr, align 4, !tbaa !5
  %call4 = call i32 @check_pcm_and_separation_names(%struct.gx_device_s* %23, %struct.gs_devn_params_s* %24, i8* %25, i32 %26, i32 %27) #7
  store i32 %call4, i32* %comp_index, align 4, !tbaa !5
  %28 = load i32, i32* %comp_index, align 4, !tbaa !5
  %cmp5 = icmp sge i32 %28, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  %29 = load i32, i32* %comp_index, align 4, !tbaa !5
  store i32 %29, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.7:                                         ; preds = %if.end.3
  %30 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index, align 8, !tbaa !1
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %32 = load i8*, i8** %pname.addr, align 8, !tbaa !1
  %33 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %34 = load i32, i32* %component_type.addr, align 4, !tbaa !5
  %call8 = call i32 %30(%struct.gx_device_s* %31, i8* %32, i32 %33, i32 %34) #7
  store i32 %call8, i32* %comp_index, align 4, !tbaa !5
  %35 = load i32, i32* %comp_index, align 4, !tbaa !5
  %cmp9 = icmp slt i32 %35, 0
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %36 = load i32, i32* %comp_index, align 4, !tbaa !5
  %cmp10 = icmp eq i32 %36, 64
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %lor.lhs.false, %if.end.7
  %37 = load i32, i32* %comp_index, align 4, !tbaa !5
  store i32 %37, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.12:                                        ; preds = %lor.lhs.false
  %38 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %num_separations = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %38, i32 0, i32 0
  %39 = load i32, i32* %num_separations, align 4, !tbaa !192
  %cmp13 = icmp slt i32 %39, 63
  br i1 %cmp13, label %if.then.14, label %if.end.30

if.then.14:                                       ; preds = %if.end.12
  %40 = bitcast i32* %sep_num to i8*
  call void @llvm.lifetime.start(i64 4, i8* %40) #2
  %41 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %num_separations15 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %41, i32 0, i32 0
  %42 = load i32, i32* %num_separations15, align 4, !tbaa !192
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %num_separations15, align 4, !tbaa !192
  store i32 %42, i32* %sep_num, align 4, !tbaa !5
  %43 = bitcast i32* %color_component_number to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #2
  %44 = bitcast i8** %sep_name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %44) #2
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 3
  %46 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %stable_memory = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %46, i32 0, i32 0
  %47 = load %struct.gs_memory_s*, %struct.gs_memory_s** %stable_memory, align 8, !tbaa !527
  %procs16 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %47, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs16, i32 0, i32 7
  %48 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %49 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory17 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %49, i32 0, i32 3
  %50 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory17, align 8, !tbaa !60
  %stable_memory18 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %50, i32 0, i32 0
  %51 = load %struct.gs_memory_s*, %struct.gs_memory_s** %stable_memory18, align 8, !tbaa !527
  %52 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %call19 = call i8* %48(%struct.gs_memory_s* %51, i32 %52, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.62, i32 0, i32 0)) #7
  store i8* %call19, i8** %sep_name, align 8, !tbaa !1
  %53 = load i8*, i8** %sep_name, align 8, !tbaa !1
  %54 = load i8*, i8** %pname.addr, align 8, !tbaa !1
  %55 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %conv = sext i32 %55 to i64
  %call20 = call i8* @memcpy(i8* %53, i8* %54, i64 %conv) #8
  %56 = load i32, i32* %name_size.addr, align 4, !tbaa !5
  %57 = load i32, i32* %sep_num, align 4, !tbaa !5
  %idxprom = sext i32 %57 to i64
  %58 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %names = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %58, i32 0, i32 1
  %arrayidx = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names, i32 0, i64 %idxprom
  %size = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx, i32 0, i32 0
  store i32 %56, i32* %size, align 4, !tbaa !189
  %59 = load i8*, i8** %sep_name, align 8, !tbaa !1
  %60 = load i32, i32* %sep_num, align 4, !tbaa !5
  %idxprom21 = sext i32 %60 to i64
  %61 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %names22 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %61, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names22, i32 0, i64 %idxprom21
  %data = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx23, i32 0, i32 1
  store i8* %59, i8** %data, align 8, !tbaa !191
  %62 = load i32, i32* %sep_num, align 4, !tbaa !5
  %63 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %num_std_colorant_names = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %63, i32 0, i32 2
  %64 = load i32, i32* %num_std_colorant_names, align 4, !tbaa !528
  %add = add nsw i32 %62, %64
  store i32 %add, i32* %color_component_number, align 4, !tbaa !5
  %65 = load i32, i32* %color_component_number, align 4, !tbaa !5
  %66 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %66, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %67 = load i32, i32* %num_components, align 4, !tbaa !195
  %cmp24 = icmp sge i32 %65, %67
  br i1 %cmp24, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %if.then.14
  store i32 64, i32* %color_component_number, align 4, !tbaa !5
  br label %if.end.29

if.else:                                          ; preds = %if.then.14
  %68 = load i32, i32* %color_component_number, align 4, !tbaa !5
  %69 = load i32, i32* %color_component_number, align 4, !tbaa !5
  %idxprom27 = sext i32 %69 to i64
  %70 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %separation_order_map = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %70, i32 0, i32 7
  %arrayidx28 = getelementptr inbounds [70 x i32], [70 x i32]* %separation_order_map, i32 0, i64 %idxprom27
  store i32 %68, i32* %arrayidx28, align 4, !tbaa !5
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.26
  %71 = load i32, i32* %color_component_number, align 4, !tbaa !5
  store i32 %71, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %72 = bitcast i8** %sep_name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %72) #2
  %73 = bitcast i32* %color_component_number to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #2
  %74 = bitcast i32* %sep_num to i8*
  call void @llvm.lifetime.end(i64 4, i8* %74) #2
  br label %cleanup

if.end.30:                                        ; preds = %if.end.12
  store i32 64, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.30, %if.end.29, %if.then.11, %if.then.6, %if.then.2
  %75 = bitcast i32 (%struct.gx_device_s*, i8*, i32, i32)** %target_get_color_comp_index to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #2
  %76 = bitcast i32* %comp_index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %76) #2
  %77 = bitcast %struct.gs_separations_s** %pseparations to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #2
  %78 = bitcast %struct.gs_devn_params_s** %pdevn_params to i8*
  call void @llvm.lifetime.end(i64 8, i8* %78) #2
  %79 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #2
  %80 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #2
  %81 = load i32, i32* %retval
  ret i32 %81
}

declare void @pdf14_gray_cs_to_cmyk_cm(%struct.gx_device_s*, i16 signext, i16*) #0

declare void @pdf14_rgb_cs_to_cmyk_cm(%struct.gx_device_s*, %struct.gs_imager_state_s*, i16 signext, i16 signext, i16 signext, i16*) #0

declare void @pdf14_cmyk_cs_to_cmyk_cm(%struct.gx_device_s*, i16 signext, i16 signext, i16 signext, i16 signext, i16*) #0

declare i32 @check_pcm_and_separation_names(%struct.gx_device_s*, %struct.gs_devn_params_s*, i8*, i32, i32) #0

declare void @pdf14_unpack_compressed(i32, i64, %struct.pdf14_device_s*, i8*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_cmykspot_put_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %target) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 8
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %pdevn_params = alloca %struct.gs_devn_params_s*, align 8
  %pseparations = alloca %struct.gs_separations_s*, align 8
  %planestride = alloca i32, align 4
  %rowstride = alloca i32, align 4
  %bg = alloca i8, align 1
  %num_comp = alloca i32, align 4
  %buf_ptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %8, i32 0, i32 10
  %9 = bitcast %struct.gs_int_rect_s* %rect to i8*
  %10 = bitcast %struct.gs_int_rect_s* %rect1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 16, i32 4, i1 false), !tbaa.struct !27
  %11 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast %struct.gs_devn_params_s** %pdevn_params to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %16, i32 0, i32 44
  store %struct.gs_devn_params_s* %devn_params, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %17 = bitcast %struct.gs_separations_s** %pseparations to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = load %struct.gs_devn_params_s*, %struct.gs_devn_params_s** %pdevn_params, align 8, !tbaa !1
  %separations = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %18, i32 0, i32 5
  store %struct.gs_separations_s* %separations, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %19 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #2
  %20 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride2 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %20, i32 0, i32 12
  %21 = load i32, i32* %planestride2, align 4, !tbaa !58
  store i32 %21, i32* %planestride, align 4, !tbaa !5
  %22 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #2
  %23 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride3 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %23, i32 0, i32 11
  %24 = load i32, i32* %rowstride3, align 4, !tbaa !59
  store i32 %24, i32* %rowstride, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %bg) #2
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 47
  %26 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx4, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %26, i32 0, i32 4
  %27 = load i32, i32* %additive, align 4, !tbaa !272
  %tobool = icmp ne i32 %27, 0
  %cond = select i1 %tobool, i32 65535, i32 0
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %bg, align 1, !tbaa !66
  %28 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %29, i32 0, i32 13
  %30 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub = sub nsw i32 %30, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  %31 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 17
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %33 = load i32, i32* %x, align 4, !tbaa !335
  %p6 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x7 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p6, i32 0, i32 0
  %34 = load i32, i32* %x7, align 4, !tbaa !34
  %cmp = icmp sgt i32 %33, %34
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.5
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty9 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %35, i32 0, i32 17
  %p10 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty9, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p10, i32 0, i32 0
  %36 = load i32, i32* %x11, align 4, !tbaa !335
  %p12 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p12, i32 0, i32 0
  store i32 %36, i32* %x13, align 4, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.5
  %37 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty14 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %37, i32 0, i32 17
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty14, i32 0, i32 1
  %x15 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %38 = load i32, i32* %x15, align 4, !tbaa !337
  %q16 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x17 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q16, i32 0, i32 0
  %39 = load i32, i32* %x17, align 4, !tbaa !31
  %cmp18 = icmp slt i32 %38, %39
  br i1 %cmp18, label %if.then.20, label %if.end.26

if.then.20:                                       ; preds = %if.end
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty21 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 17
  %q22 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty21, i32 0, i32 1
  %x23 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q22, i32 0, i32 0
  %41 = load i32, i32* %x23, align 4, !tbaa !337
  %q24 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x25 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q24, i32 0, i32 0
  store i32 %41, i32* %x25, align 4, !tbaa !31
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.20, %if.end
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty27 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %42, i32 0, i32 17
  %p28 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty27, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p28, i32 0, i32 1
  %43 = load i32, i32* %y, align 4, !tbaa !336
  %p29 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y30 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p29, i32 0, i32 1
  %44 = load i32, i32* %y30, align 4, !tbaa !35
  %cmp31 = icmp sgt i32 %43, %44
  br i1 %cmp31, label %if.then.33, label %if.end.39

if.then.33:                                       ; preds = %if.end.26
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty34 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 17
  %p35 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty34, i32 0, i32 0
  %y36 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p35, i32 0, i32 1
  %46 = load i32, i32* %y36, align 4, !tbaa !336
  %p37 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y38 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p37, i32 0, i32 1
  store i32 %46, i32* %y38, align 4, !tbaa !35
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.33, %if.end.26
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty40 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 17
  %q41 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty40, i32 0, i32 1
  %y42 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q41, i32 0, i32 1
  %48 = load i32, i32* %y42, align 4, !tbaa !338
  %q43 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y44 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q43, i32 0, i32 1
  %49 = load i32, i32* %y44, align 4, !tbaa !33
  %cmp45 = icmp slt i32 %48, %49
  br i1 %cmp45, label %if.then.47, label %if.end.53

if.then.47:                                       ; preds = %if.end.39
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty48 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 17
  %q49 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty48, i32 0, i32 1
  %y50 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q49, i32 0, i32 1
  %51 = load i32, i32* %y50, align 4, !tbaa !338
  %q51 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y52 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q51, i32 0, i32 1
  store i32 %51, i32* %y52, align 4, !tbaa !33
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.47, %if.end.39
  br label %do.cond.54

do.cond.54:                                       ; preds = %if.end.53
  br label %do.end.55

do.end.55:                                        ; preds = %do.cond.54
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width56 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 13
  %53 = load i32, i32* %width56, align 4, !tbaa !30
  %q57 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x58 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q57, i32 0, i32 0
  %54 = load i32, i32* %x58, align 4, !tbaa !31
  %cmp59 = icmp slt i32 %53, %54
  br i1 %cmp59, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.55
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width61 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 13
  %56 = load i32, i32* %width61, align 4, !tbaa !30
  br label %cond.end

cond.false:                                       ; preds = %do.end.55
  %q62 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x63 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q62, i32 0, i32 0
  %57 = load i32, i32* %x63, align 4, !tbaa !31
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond64 = phi i32 [ %56, %cond.true ], [ %57, %cond.false ]
  store i32 %cond64, i32* %x1, align 4, !tbaa !5
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height65 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 14
  %59 = load i32, i32* %height65, align 4, !tbaa !32
  %q66 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y67 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q66, i32 0, i32 1
  %60 = load i32, i32* %y67, align 4, !tbaa !33
  %cmp68 = icmp slt i32 %59, %60
  br i1 %cmp68, label %cond.true.70, label %cond.false.72

cond.true.70:                                     ; preds = %cond.end
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height71 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 14
  %62 = load i32, i32* %height71, align 4, !tbaa !32
  br label %cond.end.75

cond.false.72:                                    ; preds = %cond.end
  %q73 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y74 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q73, i32 0, i32 1
  %63 = load i32, i32* %y74, align 4, !tbaa !33
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.72, %cond.true.70
  %cond76 = phi i32 [ %62, %cond.true.70 ], [ %63, %cond.false.72 ]
  store i32 %cond76, i32* %y1, align 4, !tbaa !5
  %64 = load i32, i32* %x1, align 4, !tbaa !5
  %p77 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x78 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p77, i32 0, i32 0
  %65 = load i32, i32* %x78, align 4, !tbaa !34
  %sub79 = sub nsw i32 %64, %65
  store i32 %sub79, i32* %width, align 4, !tbaa !5
  %66 = load i32, i32* %y1, align 4, !tbaa !5
  %p80 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y81 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p80, i32 0, i32 1
  %67 = load i32, i32* %y81, align 4, !tbaa !35
  %sub82 = sub nsw i32 %66, %67
  store i32 %sub82, i32* %height, align 4, !tbaa !5
  %68 = load i32, i32* %width, align 4, !tbaa !5
  %cmp83 = icmp sle i32 %68, 0
  br i1 %cmp83, label %if.then.90, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.75
  %69 = load i32, i32* %height, align 4, !tbaa !5
  %cmp85 = icmp sle i32 %69, 0
  br i1 %cmp85, label %if.then.90, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false
  %70 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %70, i32 0, i32 15
  %71 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp88 = icmp eq i8* %71, null
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %lor.lhs.false.87, %lor.lhs.false, %cond.end.75
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.91:                                        ; preds = %lor.lhs.false.87
  %72 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data92 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %72, i32 0, i32 15
  %73 = load i8*, i8** %data92, align 8, !tbaa !36
  %p93 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y94 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p93, i32 0, i32 1
  %74 = load i32, i32* %y94, align 4, !tbaa !35
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride95 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 11
  %76 = load i32, i32* %rowstride95, align 4, !tbaa !59
  %mul = mul nsw i32 %74, %76
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %73, i64 %idx.ext
  %p96 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x97 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p96, i32 0, i32 0
  %77 = load i32, i32* %x97, align 4, !tbaa !34
  %idx.ext98 = sext i32 %77 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext98
  store i8* %add.ptr99, i8** %buf_ptr, align 8, !tbaa !1
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %79 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %80 = load i32, i32* %planestride, align 4, !tbaa !5
  %81 = load i32, i32* %rowstride, align 4, !tbaa !5
  %p100 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x101 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p100, i32 0, i32 0
  %82 = load i32, i32* %x101, align 4, !tbaa !34
  %p102 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y103 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p102, i32 0, i32 1
  %83 = load i32, i32* %y103, align 4, !tbaa !35
  %84 = load i32, i32* %width, align 4, !tbaa !5
  %85 = load i32, i32* %height, align 4, !tbaa !5
  %86 = load i32, i32* %num_comp, align 4, !tbaa !5
  %87 = load i8, i8* %bg, align 1, !tbaa !66
  %88 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %has_tags = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %88, i32 0, i32 9
  %89 = load i32, i32* %has_tags, align 4, !tbaa !327
  %90 = load %struct.gs_separations_s*, %struct.gs_separations_s** %pseparations, align 8, !tbaa !1
  %call = call i32 @gx_put_blended_image_cmykspot(%struct.gx_device_s* %78, i8* %79, i32 %80, i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, i8 zeroext %87, i32 %89, %struct.gs_int_rect_s* byval align 8 %rect, %struct.gs_separations_s* %90) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.91, %if.then.90
  %91 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %91) #2
  %92 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %92) #2
  call void @llvm.lifetime.end(i64 1, i8* %bg) #2
  %93 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #2
  %94 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  %95 = bitcast %struct.gs_separations_s** %pseparations to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  %96 = bitcast %struct.gs_devn_params_s** %pdevn_params to i8*
  call void @llvm.lifetime.end(i64 8, i8* %96) #2
  %97 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %97) #2
  %98 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %98) #2
  %99 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %99) #2
  %100 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %100) #2
  %101 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %101) #2
  %102 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %102) #2
  %103 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %103) #2
  %104 = load i32, i32* %retval
  ret i32 %104
}

declare i32 @gx_put_blended_image_cmykspot(%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i8 zeroext, i32, %struct.gs_int_rect_s* byval align 8, %struct.gs_separations_s*) #0

declare i64 @gx_forward_encode_color(%struct.gx_device_s*, i16*) #0

declare i32 @gx_forward_decode_color(%struct.gx_device_s*, i64, i16*) #0

declare %struct.gx_cm_color_map_procs_s* @gx_forward_get_color_mapping_procs(%struct.gx_device_s*) #0

declare i32 @gx_forward_get_color_comp_index(%struct.gx_device_s*, i8*, i32, i32) #0

declare void @pdf14_unpack_custom(i32, i64, %struct.pdf14_device_s*, i8*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_custom_put_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %target) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %buf = alloca %struct.pdf14_buf_s*, align 8
  %rect = alloca %struct.gs_int_rect_s, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %planestride = alloca i32, align 4
  %rowstride = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %bg = alloca i8, align 1
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %buf_ptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 47
  %5 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %5, i32 0, i32 0
  %6 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %stack, align 8, !tbaa !23
  store %struct.pdf14_buf_s* %6, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %7 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rect1 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %8, i32 0, i32 10
  %9 = bitcast %struct.gs_int_rect_s* %rect to i8*
  %10 = bitcast %struct.gs_int_rect_s* %rect1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 16, i32 4, i1 false), !tbaa.struct !27
  %11 = bitcast i32* %x0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %p = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p, i32 0, i32 0
  %12 = load i32, i32* %x, align 4, !tbaa !34
  store i32 %12, i32* %x0, align 4, !tbaa !5
  %13 = bitcast i32* %y0 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %p2 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p2, i32 0, i32 1
  %14 = load i32, i32* %y, align 4, !tbaa !35
  store i32 %14, i32* %y0, align 4, !tbaa !5
  %15 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %planestride3 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %16, i32 0, i32 12
  %17 = load i32, i32* %planestride3, align 4, !tbaa !58
  store i32 %17, i32* %planestride, align 4, !tbaa !5
  %18 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride4 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %19, i32 0, i32 11
  %20 = load i32, i32* %rowstride4, align 4, !tbaa !59
  store i32 %20, i32* %rowstride, align 4, !tbaa !5
  %21 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #2
  %22 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %n_chan = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %22, i32 0, i32 13
  %23 = load i32, i32* %n_chan, align 4, !tbaa !38
  %sub = sub nsw i32 %23, 1
  store i32 %sub, i32* %num_comp, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %bg) #2
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %24, i32 0, i32 47
  %25 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx5, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %25, i32 0, i32 4
  %26 = load i32, i32* %additive, align 4, !tbaa !272
  %tobool = icmp ne i32 %26, 0
  %cond = select i1 %tobool, i32 65535, i32 0
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %bg, align 1, !tbaa !66
  %27 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %27) #2
  %28 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #2
  %29 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #2
  %30 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %30) #2
  %31 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body.6

do.body.6:                                        ; preds = %do.end
  %32 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %32, i32 0, i32 17
  %p7 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty, i32 0, i32 0
  %x8 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p7, i32 0, i32 0
  %33 = load i32, i32* %x8, align 4, !tbaa !335
  %p9 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x10 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p9, i32 0, i32 0
  %34 = load i32, i32* %x10, align 4, !tbaa !34
  %cmp = icmp sgt i32 %33, %34
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.6
  %35 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty12 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %35, i32 0, i32 17
  %p13 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty12, i32 0, i32 0
  %x14 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p13, i32 0, i32 0
  %36 = load i32, i32* %x14, align 4, !tbaa !335
  %p15 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x16 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p15, i32 0, i32 0
  store i32 %36, i32* %x16, align 4, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.6
  %37 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty17 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %37, i32 0, i32 17
  %q = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty17, i32 0, i32 1
  %x18 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q, i32 0, i32 0
  %38 = load i32, i32* %x18, align 4, !tbaa !337
  %q19 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x20 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q19, i32 0, i32 0
  %39 = load i32, i32* %x20, align 4, !tbaa !31
  %cmp21 = icmp slt i32 %38, %39
  br i1 %cmp21, label %if.then.23, label %if.end.29

if.then.23:                                       ; preds = %if.end
  %40 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty24 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %40, i32 0, i32 17
  %q25 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty24, i32 0, i32 1
  %x26 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q25, i32 0, i32 0
  %41 = load i32, i32* %x26, align 4, !tbaa !337
  %q27 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x28 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q27, i32 0, i32 0
  store i32 %41, i32* %x28, align 4, !tbaa !31
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.23, %if.end
  %42 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty30 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %42, i32 0, i32 17
  %p31 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty30, i32 0, i32 0
  %y32 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p31, i32 0, i32 1
  %43 = load i32, i32* %y32, align 4, !tbaa !336
  %p33 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y34 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p33, i32 0, i32 1
  %44 = load i32, i32* %y34, align 4, !tbaa !35
  %cmp35 = icmp sgt i32 %43, %44
  br i1 %cmp35, label %if.then.37, label %if.end.43

if.then.37:                                       ; preds = %if.end.29
  %45 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty38 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %45, i32 0, i32 17
  %p39 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty38, i32 0, i32 0
  %y40 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p39, i32 0, i32 1
  %46 = load i32, i32* %y40, align 4, !tbaa !336
  %p41 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y42 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p41, i32 0, i32 1
  store i32 %46, i32* %y42, align 4, !tbaa !35
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.37, %if.end.29
  %47 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty44 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %47, i32 0, i32 17
  %q45 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty44, i32 0, i32 1
  %y46 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q45, i32 0, i32 1
  %48 = load i32, i32* %y46, align 4, !tbaa !338
  %q47 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y48 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q47, i32 0, i32 1
  %49 = load i32, i32* %y48, align 4, !tbaa !33
  %cmp49 = icmp slt i32 %48, %49
  br i1 %cmp49, label %if.then.51, label %if.end.57

if.then.51:                                       ; preds = %if.end.43
  %50 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %dirty52 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %50, i32 0, i32 17
  %q53 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %dirty52, i32 0, i32 1
  %y54 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q53, i32 0, i32 1
  %51 = load i32, i32* %y54, align 4, !tbaa !338
  %q55 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y56 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q55, i32 0, i32 1
  store i32 %51, i32* %y56, align 4, !tbaa !33
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.51, %if.end.43
  br label %do.cond.58

do.cond.58:                                       ; preds = %if.end.57
  br label %do.end.59

do.end.59:                                        ; preds = %do.cond.58
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width60 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 13
  %53 = load i32, i32* %width60, align 4, !tbaa !30
  %q61 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x62 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q61, i32 0, i32 0
  %54 = load i32, i32* %x62, align 4, !tbaa !31
  %cmp63 = icmp slt i32 %53, %54
  br i1 %cmp63, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.59
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width65 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 13
  %56 = load i32, i32* %width65, align 4, !tbaa !30
  br label %cond.end

cond.false:                                       ; preds = %do.end.59
  %q66 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %x67 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q66, i32 0, i32 0
  %57 = load i32, i32* %x67, align 4, !tbaa !31
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond68 = phi i32 [ %56, %cond.true ], [ %57, %cond.false ]
  store i32 %cond68, i32* %x1, align 4, !tbaa !5
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height69 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %58, i32 0, i32 14
  %59 = load i32, i32* %height69, align 4, !tbaa !32
  %q70 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y71 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q70, i32 0, i32 1
  %60 = load i32, i32* %y71, align 4, !tbaa !33
  %cmp72 = icmp slt i32 %59, %60
  br i1 %cmp72, label %cond.true.74, label %cond.false.76

cond.true.74:                                     ; preds = %cond.end
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height75 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 14
  %62 = load i32, i32* %height75, align 4, !tbaa !32
  br label %cond.end.79

cond.false.76:                                    ; preds = %cond.end
  %q77 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 1
  %y78 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %q77, i32 0, i32 1
  %63 = load i32, i32* %y78, align 4, !tbaa !33
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.false.76, %cond.true.74
  %cond80 = phi i32 [ %62, %cond.true.74 ], [ %63, %cond.false.76 ]
  store i32 %cond80, i32* %y1, align 4, !tbaa !5
  %64 = load i32, i32* %x1, align 4, !tbaa !5
  %p81 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x82 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p81, i32 0, i32 0
  %65 = load i32, i32* %x82, align 4, !tbaa !34
  %sub83 = sub nsw i32 %64, %65
  store i32 %sub83, i32* %width, align 4, !tbaa !5
  %66 = load i32, i32* %y1, align 4, !tbaa !5
  %p84 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y85 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p84, i32 0, i32 1
  %67 = load i32, i32* %y85, align 4, !tbaa !35
  %sub86 = sub nsw i32 %66, %67
  store i32 %sub86, i32* %height, align 4, !tbaa !5
  %68 = load i32, i32* %width, align 4, !tbaa !5
  %cmp87 = icmp sle i32 %68, 0
  br i1 %cmp87, label %if.then.94, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.79
  %69 = load i32, i32* %height, align 4, !tbaa !5
  %cmp89 = icmp sle i32 %69, 0
  br i1 %cmp89, label %if.then.94, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false
  %70 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %70, i32 0, i32 15
  %71 = load i8*, i8** %data, align 8, !tbaa !36
  %cmp92 = icmp eq i8* %71, null
  br i1 %cmp92, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %lor.lhs.false.91, %lor.lhs.false, %cond.end.79
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.95:                                        ; preds = %lor.lhs.false.91
  %72 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %data96 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %72, i32 0, i32 15
  %73 = load i8*, i8** %data96, align 8, !tbaa !36
  %p97 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %y98 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p97, i32 0, i32 1
  %74 = load i32, i32* %y98, align 4, !tbaa !35
  %75 = load %struct.pdf14_buf_s*, %struct.pdf14_buf_s** %buf, align 8, !tbaa !1
  %rowstride99 = getelementptr inbounds %struct.pdf14_buf_s, %struct.pdf14_buf_s* %75, i32 0, i32 11
  %76 = load i32, i32* %rowstride99, align 4, !tbaa !59
  %mul = mul nsw i32 %74, %76
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %73, i64 %idx.ext
  %p100 = getelementptr inbounds %struct.gs_int_rect_s, %struct.gs_int_rect_s* %rect, i32 0, i32 0
  %x101 = getelementptr inbounds %struct.gs_int_point_s, %struct.gs_int_point_s* %p100, i32 0, i32 0
  %77 = load i32, i32* %x101, align 4, !tbaa !34
  %idx.ext102 = sext i32 %77 to i64
  %add.ptr103 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext102
  store i8* %add.ptr103, i8** %buf_ptr, align 8, !tbaa !1
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %79 = load i8*, i8** %buf_ptr, align 8, !tbaa !1
  %80 = load i32, i32* %planestride, align 4, !tbaa !5
  %81 = load i32, i32* %rowstride, align 4, !tbaa !5
  %82 = load i32, i32* %x0, align 4, !tbaa !5
  %83 = load i32, i32* %y0, align 4, !tbaa !5
  %84 = load i32, i32* %width, align 4, !tbaa !5
  %85 = load i32, i32* %height, align 4, !tbaa !5
  %86 = load i32, i32* %num_comp, align 4, !tbaa !5
  %87 = load i8, i8* %bg, align 1, !tbaa !66
  %call = call i32 @gx_put_blended_image_custom(%struct.gx_device_s* %78, i8* %79, i32 %80, i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, i8 zeroext %87) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.95, %if.then.94
  %88 = bitcast i8** %buf_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %88) #2
  %89 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %89) #2
  %90 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %90) #2
  %91 = bitcast i32* %y1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %91) #2
  %92 = bitcast i32* %x1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %92) #2
  call void @llvm.lifetime.end(i64 1, i8* %bg) #2
  %93 = bitcast i32* %num_comp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #2
  %94 = bitcast i32* %rowstride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  %95 = bitcast i32* %planestride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %95) #2
  %96 = bitcast i32* %y0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %96) #2
  %97 = bitcast i32* %x0 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %97) #2
  %98 = bitcast %struct.gs_int_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %98) #2
  %99 = bitcast %struct.pdf14_buf_s** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %99) #2
  %100 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %100) #2
  %101 = load i32, i32* %retval
  ret i32 %101
}

declare i32 @gx_put_blended_image_custom(%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i8 zeroext) #0

declare i32 @gdev_prn_open(%struct.gx_device_s*) #0

declare i32 @gdev_prn_close(%struct.gx_device_s*) #0

declare i64 @gx_default_8bit_map_gray_color(%struct.gx_device_s*, i16*) #0

declare i32 @gx_default_8bit_map_color_gray(%struct.gx_device_s*, i64, i16*) #0

declare i32 @gdev_prn_get_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #0

declare i32 @gdev_prn_put_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #0

declare %struct.gx_device_s* @gx_page_device_get_page_device(%struct.gx_device_s*) #0

declare i32 @gdev_prn_dev_spec_op(%struct.gx_device_s*, i32, i8*, i32) #0

declare i32 @gx_default_get_profile(%struct.gx_device_s*, %struct.cmm_dev_profile_s**) #0

declare void @gx_default_set_graphics_type_tag(%struct.gx_device_s*, i32) #0

declare i64 @gx_default_rgb_map_rgb_color(%struct.gx_device_s*, i16*) #0

declare i32 @gx_default_rgb_map_color_rgb(%struct.gx_device_s*, i64, i16*) #0

declare i64 @cmyk_8bit_map_cmyk_color(%struct.gx_device_s*, i16*) #0

declare i32 @cmyk_8bit_map_color_cmyk(%struct.gx_device_s*, i64, i16*) #0

declare void @gx_device_forward_fill_in_procs(%struct.gx_device_forward_s*) #0

declare i32 @gx_forward_close_device(%struct.gx_device_s*) #0

declare i32 @gx_forward_fill_rectangle(%struct.gx_device_s*, i32, i32, i32, i32, i64) #0

declare i32 @gx_forward_fill_rectangle_hl_color(%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #0

declare i32 @gx_forward_tile_rectangle(%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32) #0

declare i32 @gx_forward_copy_mono(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64) #0

declare i32 @gx_forward_copy_color(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32) #0

declare %struct.gx_device_s* @gx_forward_get_page_device(%struct.gx_device_s*) #0

declare i32 @gx_forward_strip_tile_rectangle(%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32) #0

declare i32 @gx_forward_copy_alpha(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32) #0

declare i32 @gx_forward_get_profile(%struct.gx_device_s*, %struct.cmm_dev_profile_s**) #0

declare void @gx_forward_set_graphics_type_tag(%struct.gx_device_s*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_forward_open_device(%struct.gx_device_s* %dev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_forward_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_forward_s*
  store %struct.gx_device_forward_s* %2, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !63
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %cmp = icmp eq %struct.gx_device_s* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %call = call i32 @gs_opendevice(%struct.gx_device_s* %8) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %cmp1 = icmp sge i32 %call, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  call void @gx_device_copy_params(%struct.gx_device_s* %9, %struct.gx_device_s* %10) #7
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %11 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %11, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.3, %if.then
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #2
  %13 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  %14 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #2
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_forward_put_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %was_open = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast i32* %was_open to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %is_open = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 9
  %8 = load i32, i32* %is_open, align 4, !tbaa !199
  store i32 %8, i32* %was_open, align 4, !tbaa !5
  %9 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %cmp = icmp ne %struct.gx_device_s* %10, null
  br i1 %cmp, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %put_params = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 14
  %12 = load i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)** %put_params, align 8, !tbaa !81
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %14 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 %12(%struct.gx_device_s* %13, %struct.gs_param_list_s* %14) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %cmp1 = icmp sge i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end.9

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_decache_colors(%struct.gx_device_s* %15) #7
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %is_open2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 9
  %17 = load i32, i32* %is_open2, align 4, !tbaa !199
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.end.8, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call4 = call i32 @gs_closedevice(%struct.gx_device_s* %18) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %cmp5 = icmp eq i32 %19, 0
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.3
  %20 = load i32, i32* %was_open, align 4, !tbaa !5
  %tobool7 = icmp ne i32 %20, 0
  %cond = select i1 %tobool7, i32 1, i32 0
  store i32 %cond, i32* %code, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then.3
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  call void @gx_device_copy_params(%struct.gx_device_s* %21, %struct.gx_device_s* %22) #7
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %land.lhs.true, %entry
  %23 = load i32, i32* %code, align 4, !tbaa !5
  %24 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast i32* %was_open to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #2
  %27 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  ret i32 %23
}

declare i32 @gs_opendevice(%struct.gx_device_s*) #0

declare void @gx_device_copy_params(%struct.gx_device_s*, %struct.gx_device_s*) #0

declare void @gx_device_set_target(%struct.gx_device_forward_s*, %struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @gs_pdf14_device_push(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s** %pdev, %struct.gx_device_s* %target, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev.addr = alloca %struct.gx_device_s**, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %dev_proto = alloca %struct.pdf14_device_s*, align 8
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %temp_dev_proto = alloca %struct.pdf14_device_s, align 8
  %code = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %icc_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %k = alloca i32, align 4
  %max_bitmap = alloca i32, align 4
  %use_pdf14_accum = alloca i32, align 4
  %pdf14_trans_buffer_size = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %accum_proto = alloca %struct.gx_device_pdf14_accum_s*, align 8
  %new_target = alloca %struct.gx_device_s*, align 8
  %pdcolor = alloca %struct.gx_device_color_s, align 8
  %pconc_white = alloca i16, align 2
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pdev, %struct.gx_device_s*** %pdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.start(i64 5024, i8* %2) #2
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 40
  %6 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %6, 128
  store i32 %and, i32* %has_tags, align 4, !tbaa !5
  %7 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %8) #2
  %9 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %max_bitmap to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 38
  %MaxBitmap = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params, i32 0, i32 0
  %13 = load i64, i64* %MaxBitmap, align 8, !tbaa !529
  %cmp = icmp eq i64 %13, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 38
  %MaxBitmap2 = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params1, i32 0, i32 0
  %15 = load i64, i64* %MaxBitmap2, align 8, !tbaa !529
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 10000000, %cond.true ], [ %15, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %max_bitmap, align 4, !tbaa !5
  %16 = bitcast i32* %use_pdf14_accum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  store i32 0, i32* %use_pdf14_accum, align 4, !tbaa !5
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 65
  %18 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call = call i32 %18(%struct.gx_device_s* %19, i32 16, i8* null, i32 0) #7
  %cmp3 = icmp eq i32 %call, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %cond.end
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call5 = call i32 @gx_device_is_pattern_clist(%struct.gx_device_s* %20) #7
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %land.lhs.true.8, label %if.end.36

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call9 = call i32 @gx_device_is_pattern_accum(%struct.gx_device_s* %21) #7
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %land.lhs.true.12, label %if.end.36

land.lhs.true.12:                                 ; preds = %land.lhs.true.8
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call13 = call i32 @gs_device_is_memory(%struct.gx_device_s* %22) #7
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then, label %if.end.36

if.then:                                          ; preds = %land.lhs.true.12
  %23 = bitcast i32* %pdf14_trans_buffer_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #2
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %24, i32 0, i32 13
  %25 = load i32, i32* %width, align 4, !tbaa !193
  %cmp16 = icmp sgt i32 1, %25
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %if.then
  br label %cond.end.21

cond.false.19:                                    ; preds = %if.then
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %width20 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %26, i32 0, i32 13
  %27 = load i32, i32* %width20, align 4, !tbaa !193
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.19, %cond.true.18
  %cond22 = phi i32 [ 1, %cond.true.18 ], [ %27, %cond.false.19 ]
  %mul = mul nsw i32 %cond22, 8
  %mul23 = mul nsw i32 %mul, 5
  %mul24 = mul nsw i32 3, %mul23
  %shr = ashr i32 %mul24, 3
  store i32 %shr, i32* %pdf14_trans_buffer_size, align 4, !tbaa !5
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %28, i32 0, i32 14
  %29 = load i32, i32* %height, align 4, !tbaa !194
  %conv25 = sext i32 %29 to i64
  %30 = load i32, i32* %pdf14_trans_buffer_size, align 4, !tbaa !5
  %conv26 = zext i32 %30 to i64
  %div = udiv i64 -1, %conv26
  %cmp27 = icmp ult i64 %conv25, %div
  br i1 %cmp27, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %cond.end.21
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %height30 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %31, i32 0, i32 14
  %32 = load i32, i32* %height30, align 4, !tbaa !194
  %33 = load i32, i32* %pdf14_trans_buffer_size, align 4, !tbaa !5
  %mul31 = mul i32 %33, %32
  store i32 %mul31, i32* %pdf14_trans_buffer_size, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %cond.end.21
  store i32 0, i32* %max_bitmap, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.29
  %34 = load i32, i32* %pdf14_trans_buffer_size, align 4, !tbaa !5
  %35 = load i32, i32* %max_bitmap, align 4, !tbaa !5
  %cmp32 = icmp ugt i32 %34, %35
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end
  store i32 1, i32* %use_pdf14_accum, align 4, !tbaa !5
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.end
  %36 = bitcast i32* %pdf14_trans_buffer_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #2
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %land.lhs.true.12, %land.lhs.true.8, %land.lhs.true, %cond.end
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs37 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs37, i32 0, i32 67
  %38 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call38 = call i32 %38(%struct.gx_device_s* %39, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call38, i32* %code, align 4, !tbaa !5
  %40 = load i32, i32* %code, align 4, !tbaa !5
  %cmp39 = icmp slt i32 %40, 0
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.36
  %41 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %41, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210

if.end.42:                                        ; preds = %if.end.36
  %42 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %42, %struct.cmm_profile_s** %icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body

do.body:                                          ; preds = %if.end.42
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %44 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %45 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call43 = call i32 @get_pdf14_device_proto(%struct.gx_device_s* %43, %struct.pdf14_device_s** %dev_proto, %struct.pdf14_device_s* %temp_dev_proto, %struct.gs_imager_state_s* %44, %struct.gs_pdf14trans_s* %45) #7
  store i32 %call43, i32* %code, align 4, !tbaa !5
  %46 = load i32, i32* %code, align 4, !tbaa !5
  %cmp44 = icmp slt i32 %46, 0
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %do.end
  %47 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %47, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210

if.end.47:                                        ; preds = %do.end
  %48 = bitcast %struct.pdf14_device_s** %p14dev to %struct.gx_device_s**
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %50 = bitcast %struct.pdf14_device_s* %49 to %struct.gx_device_s*
  %51 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call48 = call i32 @gs_copydevice(%struct.gx_device_s** %48, %struct.gx_device_s* %50, %struct.gs_memory_s* %51) #7
  store i32 %call48, i32* %code, align 4, !tbaa !5
  %52 = load i32, i32* %code, align 4, !tbaa !5
  %cmp49 = icmp slt i32 %52, 0
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.end.47
  %53 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %53, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210

if.end.52:                                        ; preds = %if.end.47
  %54 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %55 = bitcast %struct.pdf14_device_s* %54 to %struct.gx_device_s*
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  call void @gs_pdf14_device_copy_params(%struct.gx_device_s* %55, %struct.gx_device_s* %56) #7
  %57 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %58 = bitcast %struct.pdf14_device_s* %57 to %struct.gx_device_forward_s*
  %59 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  call void @gx_device_set_target(%struct.gx_device_forward_s* %58, %struct.gx_device_s* %59) #7
  %60 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %pad = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %60, i32 0, i32 15
  %61 = load i32, i32* %pad, align 4, !tbaa !443
  %62 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %pad53 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %62, i32 0, i32 15
  store i32 %61, i32* %pad53, align 4, !tbaa !444
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %log2_align_mod = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %63, i32 0, i32 16
  %64 = load i32, i32* %log2_align_mod, align 4, !tbaa !445
  %65 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %log2_align_mod54 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %65, i32 0, i32 16
  store i32 %64, i32* %log2_align_mod54, align 4, !tbaa !446
  %66 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %is_planar = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %66, i32 0, i32 17
  %67 = load i32, i32* %is_planar, align 4, !tbaa !447
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %is_planar55 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 17
  store i32 %67, i32* %is_planar55, align 4, !tbaa !448
  %69 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %69, i32 0, i32 5
  %70 = load i32, i32* %data_cs, align 4, !tbaa !115
  %cmp56 = icmp eq i32 %70, 6
  br i1 %cmp56, label %land.lhs.true.58, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.52
  %71 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %islab = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %71, i32 0, i32 2
  %72 = load i32, i32* %islab, align 4, !tbaa !119
  %tobool = icmp ne i32 %72, 0
  br i1 %tobool, label %land.lhs.true.58, label %if.end.80

land.lhs.true.58:                                 ; preds = %lor.lhs.false, %if.end.52
  %73 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %73, i32 0, i32 35
  %74 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !457
  %default_rgb = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %74, i32 0, i32 2
  %75 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb, align 8, !tbaa !465
  %cmp59 = icmp ne %struct.cmm_profile_s* %75, null
  br i1 %cmp59, label %if.then.61, label %if.end.80

if.then.61:                                       ; preds = %land.lhs.true.58
  %76 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager62 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %76, i32 0, i32 35
  %77 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager62, align 8, !tbaa !457
  %default_rgb63 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %77, i32 0, i32 2
  %78 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb63, align 8, !tbaa !465
  %79 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %79, i32 0, i32 39
  %80 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !144
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %80, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  store %struct.cmm_profile_s* %78, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  br label %do.body.64

do.body.64:                                       ; preds = %if.then.61
  %81 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager65 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %81, i32 0, i32 35
  %82 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager65, align 8, !tbaa !457
  %default_rgb66 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %82, i32 0, i32 2
  %83 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb66, align 8, !tbaa !465
  %tobool67 = icmp ne %struct.cmm_profile_s* %83, null
  br i1 %tobool67, label %if.then.68, label %if.end.77

if.then.68:                                       ; preds = %do.body.64
  br label %do.body.69

do.body.69:                                       ; preds = %if.then.68
  %84 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager70 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %84, i32 0, i32 35
  %85 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager70, align 8, !tbaa !457
  %default_rgb71 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %85, i32 0, i32 2
  %86 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb71, align 8, !tbaa !465
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %86, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %87 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %87, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.72

do.body.72:                                       ; preds = %do.body.69
  br label %do.cond.73

do.cond.73:                                       ; preds = %do.body.72
  br label %do.end.74

do.end.74:                                        ; preds = %do.cond.73
  br label %do.cond.75

do.cond.75:                                       ; preds = %do.end.74
  br label %do.end.76

do.end.76:                                        ; preds = %do.cond.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.64
  br label %do.cond.78

do.cond.78:                                       ; preds = %if.end.77
  br label %do.end.79

do.end.79:                                        ; preds = %do.cond.78
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %land.lhs.true.58, %lor.lhs.false
  %88 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %88, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %89 = load i32, i32* %num_components, align 4, !tbaa !150
  %90 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info81 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %90, i32 0, i32 11
  %num_components82 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info81, i32 0, i32 1
  %91 = load i32, i32* %num_components82, align 4, !tbaa !195
  %cmp83 = icmp sgt i32 %89, %91
  br i1 %cmp83, label %if.then.85, label %if.end.90

if.then.85:                                       ; preds = %if.end.80
  %92 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info86 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %92, i32 0, i32 11
  %num_components87 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info86, i32 0, i32 1
  %93 = load i32, i32* %num_components87, align 4, !tbaa !195
  %94 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info88 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %94, i32 0, i32 11
  %num_components89 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info88, i32 0, i32 1
  store i32 %93, i32* %num_components89, align 4, !tbaa !150
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.85, %if.end.80
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info91 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 11
  %max_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info91, i32 0, i32 0
  %96 = load i32, i32* %max_components, align 4, !tbaa !474
  %97 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info92 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %97, i32 0, i32 11
  %max_components93 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info92, i32 0, i32 0
  %98 = load i32, i32* %max_components93, align 4, !tbaa !481
  %cmp94 = icmp sgt i32 %96, %98
  br i1 %cmp94, label %if.then.96, label %if.end.101

if.then.96:                                       ; preds = %if.end.90
  %99 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info97 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %99, i32 0, i32 11
  %max_components98 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info97, i32 0, i32 0
  %100 = load i32, i32* %max_components98, align 4, !tbaa !481
  %101 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info99 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %101, i32 0, i32 11
  %max_components100 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info99, i32 0, i32 0
  store i32 %100, i32* %max_components100, align 4, !tbaa !474
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.96, %if.end.90
  %102 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info102 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %102, i32 0, i32 11
  %num_components103 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info102, i32 0, i32 1
  %103 = load i32, i32* %num_components103, align 4, !tbaa !150
  %mul104 = mul nsw i32 %103, 8
  %conv105 = trunc i32 %mul104 to i16
  %104 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info106 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %104, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info106, i32 0, i32 3
  store i16 %conv105, i16* %depth, align 2, !tbaa !276
  %105 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool107 = icmp ne i32 %105, 0
  br i1 %tobool107, label %if.then.108, label %if.end.114

if.then.108:                                      ; preds = %if.end.101
  %106 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs109 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %106, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs109, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color_tag, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %107 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info110 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %107, i32 0, i32 11
  %depth111 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info110, i32 0, i32 3
  %108 = load i16, i16* %depth111, align 2, !tbaa !276
  %conv112 = zext i16 %108 to i32
  %add = add nsw i32 %conv112, 8
  %conv113 = trunc i32 %add to i16
  store i16 %conv113, i16* %depth111, align 2, !tbaa !276
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.108, %if.end.101
  %109 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %110 = bitcast %struct.pdf14_device_s* %109 to %struct.gx_device_s*
  call void @check_device_separable(%struct.gx_device_s* %110) #7
  %111 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %112 = bitcast %struct.pdf14_device_s* %111 to %struct.gx_device_s*
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %112) #7
  %113 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %113, i32 0, i32 38
  %114 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %115 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %save_get_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %115, i32 0, i32 60
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %114, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %save_get_cmap_procs, align 8, !tbaa !441
  %116 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs115 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %116, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_get_cmap_procs, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs115, align 8, !tbaa !265
  %117 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %118 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %119 = bitcast %struct.pdf14_device_s* %118 to %struct.gx_device_s*
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %117, %struct.gx_device_s* %119) #7
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.114
  %120 = load i32, i32* %k, align 4, !tbaa !5
  %121 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info116 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %121, i32 0, i32 11
  %num_components117 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info116, i32 0, i32 1
  %122 = load i32, i32* %num_components117, align 4, !tbaa !150
  %cmp118 = icmp slt i32 %120, %122
  br i1 %cmp118, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %123 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %123 to i64
  %124 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info120 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %124, i32 0, i32 11
  %comp_bits = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info120, i32 0, i32 12
  %arrayidx121 = getelementptr inbounds [64 x i8], [64 x i8]* %comp_bits, i32 0, i64 %idxprom
  store i8 8, i8* %arrayidx121, align 1, !tbaa !66
  %125 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info122 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %125, i32 0, i32 11
  %num_components123 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info122, i32 0, i32 1
  %126 = load i32, i32* %num_components123, align 4, !tbaa !150
  %sub = sub nsw i32 %126, 1
  %127 = load i32, i32* %k, align 4, !tbaa !5
  %sub124 = sub nsw i32 %sub, %127
  %mul125 = mul nsw i32 %sub124, 8
  %conv126 = trunc i32 %mul125 to i8
  %128 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom127 = sext i32 %128 to i64
  %129 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info128 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %129, i32 0, i32 11
  %comp_shift = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info128, i32 0, i32 11
  %arrayidx129 = getelementptr inbounds [64 x i8], [64 x i8]* %comp_shift, i32 0, i64 %idxprom127
  store i8 %conv126, i8* %arrayidx129, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %130 = load i32, i32* %k, align 4, !tbaa !5
  %inc130 = add nsw i32 %130, 1
  store i32 %inc130, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %131 = load i32, i32* %use_pdf14_accum, align 4, !tbaa !5
  %tobool131 = icmp ne i32 %131, 0
  br i1 %tobool131, label %if.then.132, label %if.end.135

if.then.132:                                      ; preds = %for.end
  %132 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %width133 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %132, i32 0, i32 13
  store i32 1, i32* %width133, align 4, !tbaa !30
  %133 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %height134 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %133, i32 0, i32 14
  store i32 1, i32* %height134, align 4, !tbaa !32
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.132, %for.end
  %134 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %135 = bitcast %struct.pdf14_device_s* %134 to %struct.gx_device_s*
  %procs136 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %135, i32 0, i32 42
  %open_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs136, i32 0, i32 0
  %136 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %open_device, align 8, !tbaa !80
  %137 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %138 = bitcast %struct.pdf14_device_s* %137 to %struct.gx_device_s*
  %call137 = call i32 %136(%struct.gx_device_s* %138) #7
  store i32 %call137, i32* %code, align 4, !tbaa !5
  %139 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %140 = bitcast %struct.pdf14_device_s* %139 to %struct.gx_device_s*
  %141 = load %struct.gx_device_s**, %struct.gx_device_s*** %pdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %140, %struct.gx_device_s** %141, align 8, !tbaa !1
  %142 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %143 = bitcast %struct.pdf14_device_s* %142 to %struct.gx_device_s*
  %144 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_set_marking_params(%struct.gx_device_s* %143, %struct.gs_imager_state_s* %144) #7
  %145 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %blendspot = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %145, i32 0, i32 56
  store i32 0, i32* %blendspot, align 4, !tbaa !238
  %146 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %146, i32 0, i32 70
  store %struct.pdf14_parent_color_s* null, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  %147 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info138 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %147, i32 0, i32 11
  %anti_alias = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info138, i32 0, i32 9
  %148 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info139 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %148, i32 0, i32 11
  %anti_alias140 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info139, i32 0, i32 9
  %149 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias to i8*
  %150 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %149, i8* %150, i64 8, i32 4, i1 false), !tbaa.struct !530
  %151 = load i32, i32* %use_pdf14_accum, align 4, !tbaa !5
  %tobool141 = icmp ne i32 %151, 0
  br i1 %tobool141, label %if.then.142, label %if.end.209

if.then.142:                                      ; preds = %if.end.135
  %152 = bitcast %struct.gx_device_pdf14_accum_s** %accum_proto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %152) #2
  store %struct.gx_device_pdf14_accum_s* null, %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  %153 = bitcast %struct.gx_device_s** %new_target to i8*
  call void @llvm.lifetime.start(i64 8, i8* %153) #2
  store %struct.gx_device_s* null, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %154 = bitcast %struct.gx_device_color_s* %pdcolor to i8*
  call void @llvm.lifetime.start(i64 656, i8* %154) #2
  %155 = bitcast i16* %pconc_white to i8*
  call void @llvm.lifetime.start(i64 2, i8* %155) #2
  store i16 32760, i16* %pconc_white, align 2, !tbaa !67
  br label %do.body.143

do.body.143:                                      ; preds = %if.then.142
  br label %do.cond.144

do.cond.144:                                      ; preds = %do.body.143
  br label %do.end.145

do.end.145:                                       ; preds = %do.cond.144
  %156 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info146 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %156, i32 0, i32 11
  %num_components147 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info146, i32 0, i32 1
  %157 = load i32, i32* %num_components147, align 4, !tbaa !195
  switch i32 %157, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.148
    i32 4, label %sw.bb.149
  ]

sw.bb:                                            ; preds = %do.end.145
  store %struct.gx_device_pdf14_accum_s* bitcast ({ i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }* @pdf14_accum_Gray to %struct.gx_device_pdf14_accum_s*), %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.148:                                        ; preds = %do.end.145
  store %struct.gx_device_pdf14_accum_s* bitcast ({ i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }* @pdf14_accum_RGB to %struct.gx_device_pdf14_accum_s*), %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.149:                                        ; preds = %do.end.145
  store %struct.gx_device_pdf14_accum_s* bitcast ({ i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s* }* @pdf14_accum_CMYK to %struct.gx_device_pdf14_accum_s*), %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  br label %sw.epilog

sw.default:                                       ; preds = %do.end.145
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.149, %sw.bb.148, %sw.bb
  %158 = load %struct.gx_device_pdf14_accum_s*, %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  %cmp150 = icmp eq %struct.gx_device_pdf14_accum_s* %158, null
  br i1 %cmp150, label %if.then.156, label %lor.lhs.false.152

lor.lhs.false.152:                                ; preds = %sw.epilog
  %159 = load %struct.gx_device_pdf14_accum_s*, %struct.gx_device_pdf14_accum_s** %accum_proto, align 8, !tbaa !1
  %160 = bitcast %struct.gx_device_pdf14_accum_s* %159 to %struct.gx_device_s*
  %161 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %stable_memory = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %161, i32 0, i32 0
  %162 = load %struct.gs_memory_s*, %struct.gs_memory_s** %stable_memory, align 8, !tbaa !527
  %call153 = call i32 @gs_copydevice(%struct.gx_device_s** %new_target, %struct.gx_device_s* %160, %struct.gs_memory_s* %162) #7
  store i32 %call153, i32* %code, align 4, !tbaa !5
  %cmp154 = icmp slt i32 %call153, 0
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %lor.lhs.false.152, %sw.epilog
  store i32 16, i32* %cleanup.dest.slot
  br label %cleanup

if.end.157:                                       ; preds = %lor.lhs.false.152
  %163 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %164 = bitcast %struct.pdf14_device_s* %163 to %struct.gx_device_s*
  %165 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %166 = bitcast %struct.gx_device_s* %165 to %struct.gx_device_pdf14_accum_s*
  %save_p14dev = getelementptr inbounds %struct.gx_device_pdf14_accum_s, %struct.gx_device_pdf14_accum_s* %166, i32 0, i32 68
  store %struct.gx_device_s* %164, %struct.gx_device_s** %save_p14dev, align 8, !tbaa !531
  %167 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %color_info158 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %167, i32 0, i32 11
  %separable_and_linear = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info158, i32 0, i32 10
  store i32 1, i32* %separable_and_linear, align 4, !tbaa !535
  %168 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  call void @set_linear_color_bits_mask_shift(%struct.gx_device_s* %168) #7
  %169 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %170 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  call void @gs_pdf14_device_copy_params(%struct.gx_device_s* %169, %struct.gx_device_s* %170) #7
  %171 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %172 = bitcast %struct.gx_device_s* %171 to %struct.gx_device_pdf14_accum_s*
  %page_uses_transparency = getelementptr inbounds %struct.gx_device_pdf14_accum_s, %struct.gx_device_pdf14_accum_s* %172, i32 0, i32 37
  store i32 1, i32* %page_uses_transparency, align 4, !tbaa !536
  %173 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %173) #7
  %174 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %space_params159 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %174, i32 0, i32 38
  %175 = bitcast %struct.gdev_space_params_s* %space_params159 to i8*
  %176 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params160 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %176, i32 0, i32 38
  %177 = bitcast %struct.gdev_space_params_s* %space_params160 to i8*
  %call161 = call i8* @memcpy(i8* %175, i8* %177, i64 40) #8
  %178 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params162 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %178, i32 0, i32 38
  %MaxBitmap163 = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params162, i32 0, i32 0
  %179 = load i64, i64* %MaxBitmap163, align 8, !tbaa !529
  %180 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params164 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %180, i32 0, i32 38
  %BufferSpace = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params164, i32 0, i32 1
  %181 = load i64, i64* %BufferSpace, align 8, !tbaa !537
  %cmp165 = icmp sgt i64 %179, %181
  br i1 %cmp165, label %cond.true.167, label %cond.false.170

cond.true.167:                                    ; preds = %if.end.157
  %182 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params168 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %182, i32 0, i32 38
  %MaxBitmap169 = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params168, i32 0, i32 0
  %183 = load i64, i64* %MaxBitmap169, align 8, !tbaa !529
  br label %cond.end.173

cond.false.170:                                   ; preds = %if.end.157
  %184 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %space_params171 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %184, i32 0, i32 38
  %BufferSpace172 = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params171, i32 0, i32 1
  %185 = load i64, i64* %BufferSpace172, align 8, !tbaa !537
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.false.170, %cond.true.167
  %cond174 = phi i64 [ %183, %cond.true.167 ], [ %185, %cond.false.170 ]
  %conv175 = trunc i64 %cond174 to i32
  store i32 %conv175, i32* %max_bitmap, align 4, !tbaa !5
  %186 = load i32, i32* %max_bitmap, align 4, !tbaa !5
  %conv176 = sext i32 %186 to i64
  %187 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %space_params177 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %187, i32 0, i32 38
  %BufferSpace178 = getelementptr inbounds %struct.gdev_space_params_s, %struct.gdev_space_params_s* %space_params177, i32 0, i32 1
  store i64 %conv176, i64* %BufferSpace178, align 8, !tbaa !537
  %188 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %call179 = call i32 @gdev_prn_open(%struct.gx_device_s* %188) #7
  store i32 %call179, i32* %code, align 4, !tbaa !5
  %cmp180 = icmp slt i32 %call179, 0
  br i1 %cmp180, label %if.then.185, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %cond.end.173
  %189 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %190 = bitcast %struct.gx_device_s* %189 to %struct.gx_device_printer_s*
  %buffer_space = getelementptr inbounds %struct.gx_device_printer_s, %struct.gx_device_printer_s* %190, i32 0, i32 53
  %191 = load i64, i64* %buffer_space, align 8, !tbaa !538
  %192 = inttoptr i64 %191 to %struct.gx_device_printer_s*
  %cmp183 = icmp ne %struct.gx_device_printer_s* %192, null
  br i1 %cmp183, label %if.end.189, label %if.then.185

if.then.185:                                      ; preds = %lor.lhs.false.182, %cond.end.173
  %193 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %stable_memory186 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %193, i32 0, i32 0
  %194 = load %struct.gs_memory_s*, %struct.gs_memory_s** %stable_memory186, align 8, !tbaa !527
  %procs187 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %194, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs187, i32 0, i32 2
  %195 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %196 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %stable_memory188 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %196, i32 0, i32 0
  %197 = load %struct.gs_memory_s*, %struct.gs_memory_s** %stable_memory188, align 8, !tbaa !527
  %198 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %199 = bitcast %struct.gx_device_s* %198 to i8*
  call void %195(%struct.gs_memory_s* %197, i8* %199, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i32 0, i32 0)) #7
  store i32 16, i32* %cleanup.dest.slot
  br label %cleanup

if.end.189:                                       ; preds = %lor.lhs.false.182
  %200 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %procs190 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %200, i32 0, i32 42
  %set_graphics_type_tag = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs190, i32 0, i32 68
  %201 = load void (%struct.gx_device_s*, i32)*, void (%struct.gx_device_s*, i32)** %set_graphics_type_tag, align 8, !tbaa !79
  %202 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  call void %201(%struct.gx_device_s* %202, i32 4) #7
  %203 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %204 = bitcast %struct.gs_imager_state_s* %203 to %struct.gs_state_s*
  %color = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %204, i32 0, i32 69
  %arrayidx191 = getelementptr inbounds [2 x %struct.anon.2], [2 x %struct.anon.2]* %color, i32 0, i64 0
  %color_space = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx191, i32 0, i32 0
  %205 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %color_space, align 8, !tbaa !469
  %206 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %207 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %call192 = call i32 @gx_remap_concrete_DGray(i16* %pconc_white, %struct.gs_color_space_s* %205, %struct.gx_device_color_s* %pdcolor, %struct.gs_imager_state_s* %206, %struct.gx_device_s* %207, i32 -1) #7
  store i32 %call192, i32* %code, align 4, !tbaa !5
  %cmp193 = icmp slt i32 %call192, 0
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %if.end.189
  store i32 16, i32* %cleanup.dest.slot
  br label %cleanup

if.end.196:                                       ; preds = %if.end.189
  %208 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %procs197 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %208, i32 0, i32 42
  %fillpage = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs197, i32 0, i32 61
  %209 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)** %fillpage, align 8, !tbaa !540
  %210 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %211 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call198 = call i32 %209(%struct.gx_device_s* %210, %struct.gs_imager_state_s* %211, %struct.gx_device_color_s* %pdcolor) #7
  %212 = load %struct.gx_device_s*, %struct.gx_device_s** %new_target, align 8, !tbaa !1
  %213 = load %struct.gx_device_s**, %struct.gx_device_s*** %pdev.addr, align 8, !tbaa !1
  %214 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %215 = bitcast %struct.gs_pdf14trans_s* %214 to %struct.gs_composite_s*
  %216 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %217 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call199 = call i32 @clist_create_compositor(%struct.gx_device_s* %212, %struct.gx_device_s** %213, %struct.gs_composite_s* %215, %struct.gs_imager_state_s* %216, %struct.gs_memory_s* %217, %struct.gx_device_s* null) #7
  store i32 %call199, i32* %code, align 4, !tbaa !5
  %218 = load i32, i32* %code, align 4, !tbaa !5
  %cmp200 = icmp slt i32 %218, 0
  br i1 %cmp200, label %if.then.202, label %if.end.203

if.then.202:                                      ; preds = %if.end.196
  store i32 16, i32* %cleanup.dest.slot
  br label %cleanup

if.end.203:                                       ; preds = %if.end.196
  %219 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %220 = bitcast %struct.pdf14_device_s* %219 to %struct.gx_device_s*
  %call204 = call i32 @pdf14_disable_device(%struct.gx_device_s* %220) #7
  %221 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %222 = bitcast %struct.pdf14_device_s* %221 to %struct.gx_device_s*
  %call205 = call i32 @pdf14_close(%struct.gx_device_s* %222) #7
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.then.202, %if.then.195, %if.then.185, %if.then.156, %if.end.203
  %223 = bitcast i16* %pconc_white to i8*
  call void @llvm.lifetime.end(i64 2, i8* %223) #2
  %224 = bitcast %struct.gx_device_color_s* %pdcolor to i8*
  call void @llvm.lifetime.end(i64 656, i8* %224) #2
  %225 = bitcast %struct.gx_device_s** %new_target to i8*
  call void @llvm.lifetime.end(i64 8, i8* %225) #2
  %226 = bitcast %struct.gx_device_pdf14_accum_s** %accum_proto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %226) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.210 [
    i32 0, label %cleanup.cont
    i32 16, label %no_clist_accum
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.209

if.end.209:                                       ; preds = %cleanup.cont, %if.end.135
  %227 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %227, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210

no_clist_accum:                                   ; preds = %cleanup
  store i32 -100, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210

cleanup.210:                                      ; preds = %no_clist_accum, %if.end.209, %cleanup, %if.then.51, %if.then.46, %if.then.41
  %228 = bitcast i32* %use_pdf14_accum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %228) #2
  %229 = bitcast i32* %max_bitmap to i8*
  call void @llvm.lifetime.end(i64 4, i8* %229) #2
  %230 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %230) #2
  %231 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %231) #2
  %232 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %232) #2
  %233 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %233) #2
  %234 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %234) #2
  %235 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %235) #2
  %236 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.end(i64 5024, i8* %236) #2
  %237 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %237) #2
  %238 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %238) #2
  %239 = load i32, i32* %retval
  ret i32 %239
}

declare i32 @gx_device_is_pattern_clist(%struct.gx_device_s*) #0

declare i32 @gx_device_is_pattern_accum(%struct.gx_device_s*) #0

declare i32 @gs_device_is_memory(%struct.gx_device_s*) #0

declare i32 @gs_copydevice(%struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_memory_s*) #0

; Function Attrs: nounwind uwtable
define internal %struct.gx_color_map_procs_s* @pdf14_get_cmap_procs(%struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  ret %struct.gx_color_map_procs_s* @pdf14_cmap_many
}

declare void @set_linear_color_bits_mask_shift(%struct.gx_device_s*) #0

declare i32 @gx_remap_concrete_DGray(i16*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32) #0

declare i32 @clist_create_compositor(%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*) #0

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_gray_direct(i16 signext %gray, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %gray.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %gray, i16* %gray.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %2) #2
  %3 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %3) #2
  %4 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 20
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %9, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %10, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %12 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %12, i32* %ncomps, align 4, !tbaa !5
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  %14 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call = call %struct.gx_cm_color_map_procs_s* %14(%struct.gx_device_s* %15) #7
  %map_gray = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call, i32 0, i32 0
  %16 = load void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, i16, i16*)** %map_gray, align 8, !tbaa !489
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %18 = load i16, i16* %gray.addr, align 2, !tbaa !67
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %16(%struct.gx_device_s* %17, i16 signext %18, i16* %arraydecay) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %20 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp3 = icmp slt i32 %19, %20
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %21 to i64
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %22 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv = sext i16 %22 to i32
  %shl = shl i32 %conv, 1
  %23 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom4
  %24 = load i16, i16* %arrayidx5, align 2, !tbaa !67
  %conv6 = sext i16 %24 to i32
  %shr = ashr i32 %conv6, 11
  %add = add nsw i32 %shl, %shr
  %conv7 = trunc i32 %add to i16
  %25 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %25 to i64
  %arrayidx9 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom8
  store i16 %conv7, i16* %arrayidx9, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 51
  %28 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call12 = call i64 %28(%struct.gx_device_s* %29, i16* %arraydecay11) #7
  store i64 %call12, i64* %color, align 8, !tbaa !68
  %30 = load i64, i64* %color, align 8, !tbaa !68
  %cmp13 = icmp ne i64 %30, -1
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.end
  %31 = load i64, i64* %color, align 8, !tbaa !68
  %32 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %32, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %31, i64* %pure, align 8, !tbaa !68
  %33 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %33, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %for.end
  %34 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #2
  %35 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  %36 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %36) #2
  %37 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %37) #2
  %38 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #2
  %39 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_rgb_direct(i16 signext %r, i16 signext %g, i16 signext %b, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select) #1 {
entry:
  %r.addr = alloca i16, align 2
  %g.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %r, i16* %r.addr, align 2, !tbaa !67
  store i16 %g, i16* %g.addr, align 2, !tbaa !67
  store i16 %b, i16* %b.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %2) #2
  %3 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %3) #2
  %4 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 20
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %9, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %10, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %12 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %12, i32* %ncomps, align 4, !tbaa !5
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  %14 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call = call %struct.gx_cm_color_map_procs_s* %14(%struct.gx_device_s* %15) #7
  %map_rgb = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call, i32 0, i32 1
  %16 = load void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)** %map_rgb, align 8, !tbaa !491
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %19 = load i16, i16* %r.addr, align 2, !tbaa !67
  %20 = load i16, i16* %g.addr, align 2, !tbaa !67
  %21 = load i16, i16* %b.addr, align 2, !tbaa !67
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %16(%struct.gx_device_s* %17, %struct.gs_imager_state_s* %18, i16 signext %19, i16 signext %20, i16 signext %21, i16* %arraydecay) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %23 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp3 = icmp slt i32 %22, %23
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %24 to i64
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %25 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv = sext i16 %25 to i32
  %shl = shl i32 %conv, 1
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom4 = sext i32 %26 to i64
  %arrayidx5 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom4
  %27 = load i16, i16* %arrayidx5, align 2, !tbaa !67
  %conv6 = sext i16 %27 to i32
  %shr = ashr i32 %conv6, 11
  %add = add nsw i32 %shl, %shr
  %conv7 = trunc i32 %add to i16
  %28 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %28 to i64
  %arrayidx9 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom8
  store i16 %conv7, i16* %arrayidx9, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 51
  %31 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay11 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call12 = call i64 %31(%struct.gx_device_s* %32, i16* %arraydecay11) #7
  store i64 %call12, i64* %color, align 8, !tbaa !68
  %33 = load i64, i64* %color, align 8, !tbaa !68
  %cmp13 = icmp ne i64 %33, -1
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.end
  %34 = load i64, i64* %color, align 8, !tbaa !68
  %35 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %35, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  store i64 %34, i64* %pure, align 8, !tbaa !68
  %36 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %36, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %for.end
  %37 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #2
  %38 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #2
  %39 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %39) #2
  %40 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %40) #2
  %41 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %41) #2
  %42 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %42) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pdf14_cmap_cmyk_direct(i16 signext %c, i16 signext %m, i16 signext %y, i16 signext %k, %struct.gx_device_color_s* %pdc, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, i32 %select, %struct.gs_color_space_s* %pcs) #1 {
entry:
  %c.addr = alloca i16, align 2
  %m.addr = alloca i16, align 2
  %y.addr = alloca i16, align 2
  %k.addr = alloca i16, align 2
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %select.addr = alloca i32, align 4
  %pcs.addr = alloca %struct.gs_color_space_s*, align 8
  %i = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %cm_comps = alloca [64 x i16], align 16
  %cv = alloca [64 x i16], align 16
  %color = alloca i64, align 8
  %trans_device = alloca %struct.gx_device_s*, align 8
  store i16 %c, i16* %c.addr, align 2, !tbaa !67
  store i16 %m, i16* %m.addr, align 2, !tbaa !67
  store i16 %y, i16* %y.addr, align 2, !tbaa !67
  store i16 %k, i16* %k.addr, align 2, !tbaa !67
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %select, i32* %select.addr, align 4, !tbaa !66
  store %struct.gs_color_space_s* %pcs, %struct.gs_color_space_s** %pcs.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.start(i64 128, i8* %2) #2
  %3 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.start(i64 128, i8* %3) #2
  %4 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %6, i32 0, i32 20
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device1, align 8, !tbaa !201
  %cmp = icmp ne %struct.gx_device_s* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %trans_device2 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %8, i32 0, i32 20
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device2, align 8, !tbaa !201
  store %struct.gx_device_s* %9, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %10, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %12 = load i32, i32* %num_components, align 4, !tbaa !195
  store i32 %12, i32* %ncomps, align 4, !tbaa !5
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %13, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  %14 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call = call %struct.gx_cm_color_map_procs_s* %14(%struct.gx_device_s* %15) #7
  %map_cmyk = getelementptr inbounds %struct.gx_cm_color_map_procs_s, %struct.gx_cm_color_map_procs_s* %call, i32 0, i32 2
  %16 = load void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)** %map_cmyk, align 8, !tbaa !492
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %18 = load i16, i16* %c.addr, align 2, !tbaa !67
  %19 = load i16, i16* %m.addr, align 2, !tbaa !67
  %20 = load i16, i16* %y.addr, align 2, !tbaa !67
  %21 = load i16, i16* %k.addr, align 2, !tbaa !67
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i32 0
  call void %16(%struct.gx_device_s* %17, i16 signext %18, i16 signext %19, i16 signext %20, i16 signext %21, i16* %arraydecay) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %23 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp3 = icmp slt i32 %22, %23
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %24 to i64
  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom
  %25 = load i16, i16* %arrayidx, align 2, !tbaa !67
  %conv = sext i16 %25 to i32
  %shl = shl i32 %conv, 1
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom4 = sext i32 %26 to i64
  %arrayidx5 = getelementptr inbounds [64 x i16], [64 x i16]* %cm_comps, i32 0, i64 %idxprom4
  %27 = load i16, i16* %arrayidx5, align 2, !tbaa !67
  %conv6 = sext i16 %27 to i32
  %shr = ashr i32 %conv6, 11
  %add = add nsw i32 %shl, %shr
  %conv7 = trunc i32 %add to i16
  %28 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %28 to i64
  %arrayidx9 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom8
  store i16 %conv7, i16* %arrayidx9, align 2, !tbaa !67
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 65
  %31 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %call11 = call i32 %31(%struct.gx_device_s* %32, i32 11, i8* null, i32 0) #7
  %tobool = icmp ne i32 %call11, 0
  br i1 %tobool, label %if.then.12, label %if.else.24

if.then.12:                                       ; preds = %for.end
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc.21, %if.then.12
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %34 = load i32, i32* %ncomps, align 4, !tbaa !5
  %cmp14 = icmp slt i32 %33, %34
  br i1 %cmp14, label %for.body.16, label %for.end.23

for.body.16:                                      ; preds = %for.cond.13
  %35 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom17 = sext i32 %35 to i64
  %arrayidx18 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i64 %idxprom17
  %36 = load i16, i16* %arrayidx18, align 2, !tbaa !67
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom19 = sext i32 %37 to i64
  %38 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %38, i32 0, i32 1
  %devn = bitcast %union._c* %colors to %struct._devn*
  %values = getelementptr inbounds %struct._devn, %struct._devn* %devn, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [64 x i16], [64 x i16]* %values, i32 0, i64 %idxprom19
  store i16 %36, i16* %arrayidx20, align 2, !tbaa !67
  br label %for.inc.21

for.inc.21:                                       ; preds = %for.body.16
  %39 = load i32, i32* %i, align 4, !tbaa !5
  %inc22 = add nsw i32 %39, 1
  store i32 %inc22, i32* %i, align 4, !tbaa !5
  br label %for.cond.13

for.end.23:                                       ; preds = %for.cond.13
  %40 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %40, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_devn, %struct.gx_device_color_type_s** %type, align 8, !tbaa !227
  br label %if.end.34

if.else.24:                                       ; preds = %for.end
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %procs25 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs25, i32 0, i32 51
  %42 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %trans_device, align 8, !tbaa !1
  %arraydecay26 = getelementptr inbounds [64 x i16], [64 x i16]* %cv, i32 0, i32 0
  %call27 = call i64 %42(%struct.gx_device_s* %43, i16* %arraydecay26) #7
  store i64 %call27, i64* %color, align 8, !tbaa !68
  %44 = load i64, i64* %color, align 8, !tbaa !68
  %cmp28 = icmp ne i64 %44, -1
  br i1 %cmp28, label %if.then.30, label %if.end.33

if.then.30:                                       ; preds = %if.else.24
  %45 = load i64, i64* %color, align 8, !tbaa !68
  %46 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors31 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %46, i32 0, i32 1
  %pure = bitcast %union._c* %colors31 to i64*
  store i64 %45, i64* %pure, align 8, !tbaa !68
  %47 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type32 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %47, i32 0, i32 0
  store %struct.gx_device_color_type_s* @gx_dc_type_data_pure, %struct.gx_device_color_type_s** %type32, align 8, !tbaa !227
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.30, %if.else.24
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %for.end.23
  %48 = bitcast %struct.gx_device_s** %trans_device to i8*
  call void @llvm.lifetime.end(i64 8, i8* %48) #2
  %49 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = bitcast [64 x i16]* %cv to i8*
  call void @llvm.lifetime.end(i64 128, i8* %50) #2
  %51 = bitcast [64 x i16]* %cm_comps to i8*
  call void @llvm.lifetime.end(i64 128, i8* %51) #2
  %52 = bitcast i32* %ncomps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #2
  ret void
}

declare i32 @clist_icc_searchtable(%struct.gx_device_clist_writer_s*, i64) #0

declare i32 @clist_icc_addentry(%struct.gx_device_clist_writer_s*, i64, %struct.cmm_profile_s*) #0

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @c_pdf14trans_write_ctm(i8** %ppbuf, %struct.gs_pdf14trans_params_s* %pparams) #6 {
entry:
  %retval = alloca i32, align 4
  %ppbuf.addr = alloca i8**, align 8
  %pparams.addr = alloca %struct.gs_pdf14trans_params_s*, align 8
  %pbuf = alloca i8*, align 8
  %len = alloca i32, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i8** %ppbuf, i8*** %ppbuf.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_params_s* %pparams, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %0 = bitcast i8** %pbuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load i8**, i8*** %ppbuf.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %1, align 8, !tbaa !1
  store i8* %2, i8** %pbuf, align 8, !tbaa !1
  %3 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %5, i32 0, i32 20
  %call = call i32 @cmd_write_ctm_return_length_nodevice(%struct.gs_matrix_s* %ctm) #7
  store i32 %call, i32* %len, align 4, !tbaa !5
  %6 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr, i8** %pbuf, align 8, !tbaa !1
  %7 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %pparams.addr, align 8, !tbaa !1
  %ctm1 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %7, i32 0, i32 20
  %8 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %9 = load i32, i32* %len, align 4, !tbaa !5
  %call2 = call i32 @cmd_write_ctm(%struct.gs_matrix_s* %ctm1, i8* %8, i32 %9) #7
  store i32 %call2, i32* %code, align 4, !tbaa !5
  %10 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %11, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = load i32, i32* %len, align 4, !tbaa !5
  %add = add nsw i32 %12, 1
  %13 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %idx.ext = sext i32 %add to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr, i8** %pbuf, align 8, !tbaa !1
  %14 = load i8*, i8** %pbuf, align 8, !tbaa !1
  %15 = load i8**, i8*** %ppbuf.addr, align 8, !tbaa !1
  store i8* %14, i8** %15, align 8, !tbaa !1
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %16 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %16) #2
  %17 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #2
  %18 = bitcast i8** %pbuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = load i32, i32* %retval
  ret i32 %19
}

declare i32 @cmd_write_ctm_return_length_nodevice(%struct.gs_matrix_s*) #0

declare i32 @cmd_write_ctm(%struct.gs_matrix_s*, i8*, i32) #0

declare i8* @cmd_read_matrix(%struct.gs_matrix_s*, i8*) #0

declare i32 @gs_imager_setmatrix(%struct.gs_imager_state_s*, %struct.gs_matrix_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @find_opening_op(i32 %opening_op, %struct.gs_composite_s** %ppcte, i32 %return_code) #1 {
entry:
  %retval = alloca i32, align 4
  %opening_op.addr = alloca i32, align 4
  %ppcte.addr = alloca %struct.gs_composite_s**, align 8
  %return_code.addr = alloca i32, align 4
  %pcte = alloca %struct.gs_composite_s*, align 8
  %pct = alloca %struct.gs_pdf14trans_s*, align 8
  %op = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %opening_op, i32* %opening_op.addr, align 4, !tbaa !5
  store %struct.gs_composite_s** %ppcte, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  store i32 %return_code, i32* %return_code.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gs_composite_s** %pcte to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %2 = load %struct.gs_composite_s*, %struct.gs_composite_s** %1, align 8, !tbaa !1
  store %struct.gs_composite_s* %2, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %if.end.45, %entry
  %3 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %3, i32 0, i32 0
  %4 = load %struct.gs_composite_type_s*, %struct.gs_composite_type_s** %type, align 8, !tbaa !163
  %comp_id = getelementptr inbounds %struct.gs_composite_type_s, %struct.gs_composite_type_s* %4, i32 0, i32 0
  %5 = load i8, i8* %comp_id, align 1, !tbaa !541
  %conv = zext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.cond
  %6 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %8 = bitcast %struct.gs_composite_s* %7 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %8, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %9 = bitcast i32* %op to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %10, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %11 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  store i32 %11, i32* %op, align 4, !tbaa !5
  %12 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %13 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %12, %struct.gs_composite_s** %13, align 8, !tbaa !1
  %14 = load i32, i32* %op, align 4, !tbaa !5
  %15 = load i32, i32* %opening_op.addr, align 4, !tbaa !5
  %cmp2 = icmp eq i32 %14, %15
  br i1 %cmp2, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %16 = load i32, i32* %return_code.addr, align 4, !tbaa !5
  store i32 %16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  %17 = load i32, i32* %op, align 4, !tbaa !5
  %cmp5 = icmp ne i32 %17, 7
  br i1 %cmp5, label %if.then.7, label %if.end.39

if.then.7:                                        ; preds = %if.end
  %18 = load i32, i32* %opening_op.addr, align 4, !tbaa !5
  %cmp8 = icmp eq i32 %18, 5
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.11:                                        ; preds = %if.then.7
  %19 = load i32, i32* %opening_op.addr, align 4, !tbaa !5
  %cmp12 = icmp eq i32 %19, 3
  br i1 %cmp12, label %if.then.14, label %if.end.21

if.then.14:                                       ; preds = %if.end.11
  %20 = load i32, i32* %op, align 4, !tbaa !5
  %cmp15 = icmp ne i32 %20, 5
  br i1 %cmp15, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.then.14
  %21 = load i32, i32* %op, align 4, !tbaa !5
  %cmp17 = icmp ne i32 %21, 6
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %land.lhs.true
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.20:                                        ; preds = %land.lhs.true, %if.then.14
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end.11
  %22 = load i32, i32* %opening_op.addr, align 4, !tbaa !5
  %cmp22 = icmp eq i32 %22, 0
  br i1 %cmp22, label %if.then.24, label %if.end.38

if.then.24:                                       ; preds = %if.end.21
  %23 = load i32, i32* %op, align 4, !tbaa !5
  %cmp25 = icmp ne i32 %23, 5
  br i1 %cmp25, label %land.lhs.true.27, label %if.end.37

land.lhs.true.27:                                 ; preds = %if.then.24
  %24 = load i32, i32* %op, align 4, !tbaa !5
  %cmp28 = icmp ne i32 %24, 6
  br i1 %cmp28, label %land.lhs.true.30, label %if.end.37

land.lhs.true.30:                                 ; preds = %land.lhs.true.27
  %25 = load i32, i32* %op, align 4, !tbaa !5
  %cmp31 = icmp ne i32 %25, 3
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.37

land.lhs.true.33:                                 ; preds = %land.lhs.true.30
  %26 = load i32, i32* %op, align 4, !tbaa !5
  %cmp34 = icmp ne i32 %26, 4
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %land.lhs.true.33
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.37:                                        ; preds = %land.lhs.true.33, %land.lhs.true.30, %land.lhs.true.27, %if.then.24
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.21
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.end
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.39, %if.then.36, %if.then.19, %if.then.10, %if.then.4
  %27 = bitcast i32* %op to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #2
  %28 = bitcast %struct.gs_pdf14trans_s** %pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.46 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.41

if.else:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.41:                                        ; preds = %cleanup.cont
  %29 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %prev = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %29, i32 0, i32 3
  %30 = load %struct.gs_composite_s*, %struct.gs_composite_s** %prev, align 8, !tbaa !544
  store %struct.gs_composite_s* %30, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %31 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pcte, align 8, !tbaa !1
  %cmp42 = icmp eq %struct.gs_composite_s* %31, null
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.41
  store i32 2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.46

if.end.45:                                        ; preds = %if.end.41
  br label %for.cond

cleanup.46:                                       ; preds = %if.then.44, %if.else, %cleanup
  %32 = bitcast %struct.gs_composite_s** %pcte to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @find_same_op(%struct.gs_composite_s* %composite_action, i32 %my_op, %struct.gs_composite_s** %ppcte) #1 {
entry:
  %retval = alloca i32, align 4
  %composite_action.addr = alloca %struct.gs_composite_s*, align 8
  %my_op.addr = alloca i32, align 4
  %ppcte.addr = alloca %struct.gs_composite_s**, align 8
  %pct0 = alloca %struct.gs_pdf14trans_s*, align 8
  %pct = alloca %struct.gs_composite_s*, align 8
  %pct_pdf14 = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gs_composite_s* %composite_action, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  store i32 %my_op, i32* %my_op.addr, align 4, !tbaa !5
  store %struct.gs_composite_s** %ppcte, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gs_composite_s*, %struct.gs_composite_s** %composite_action.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gs_composite_s* %1 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %2, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %3 = bitcast %struct.gs_composite_s** %pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  %5 = load %struct.gs_composite_s*, %struct.gs_composite_s** %4, align 8, !tbaa !1
  store %struct.gs_composite_s* %5, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %if.end.25, %entry
  %6 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %6, i32 0, i32 0
  %7 = load %struct.gs_composite_type_s*, %struct.gs_composite_type_s** %type, align 8, !tbaa !163
  %comp_id = getelementptr inbounds %struct.gs_composite_type_s, %struct.gs_composite_type_s* %7, i32 0, i32 0
  %8 = load i8, i8* %comp_id, align 1, !tbaa !541
  %conv = zext i8 %8 to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.else.20

if.then:                                          ; preds = %for.cond
  %9 = bitcast %struct.gs_pdf14trans_s** %pct_pdf14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %11 = bitcast %struct.gs_composite_s* %10 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %11, %struct.gs_pdf14trans_s** %pct_pdf14, align 8, !tbaa !1
  %12 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %13 = load %struct.gs_composite_s**, %struct.gs_composite_s*** %ppcte.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %12, %struct.gs_composite_s** %13, align 8, !tbaa !1
  %14 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct_pdf14, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %14, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %15 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  %16 = load i32, i32* %my_op.addr, align 4, !tbaa !5
  %cmp2 = icmp ne i32 %15, %16
  br i1 %cmp2, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  %17 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct_pdf14, align 8, !tbaa !1
  %params5 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %17, i32 0, i32 5
  %csel = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params5, i32 0, i32 7
  %18 = load i32, i32* %csel, align 4, !tbaa !545
  %19 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %params6 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %19, i32 0, i32 5
  %csel7 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params6, i32 0, i32 7
  %20 = load i32, i32* %csel7, align 4, !tbaa !545
  %cmp8 = icmp eq i32 %18, %20
  br i1 %cmp8, label %if.then.10, label %if.end.19

if.then.10:                                       ; preds = %if.end
  %21 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct_pdf14, align 8, !tbaa !1
  %params11 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %21, i32 0, i32 5
  %changed = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params11, i32 0, i32 2
  %22 = load i32, i32* %changed, align 4, !tbaa !546
  %23 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct0, align 8, !tbaa !1
  %params12 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %23, i32 0, i32 5
  %changed13 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params12, i32 0, i32 2
  %24 = load i32, i32* %changed13, align 4, !tbaa !546
  %and = and i32 %22, %24
  %25 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pct_pdf14, align 8, !tbaa !1
  %params14 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %25, i32 0, i32 5
  %changed15 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params14, i32 0, i32 2
  %26 = load i32, i32* %changed15, align 4, !tbaa !546
  %cmp16 = icmp eq i32 %and, %26
  br i1 %cmp16, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.then.10
  store i32 4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %if.then.10
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.19:                                        ; preds = %if.end
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.19, %if.else, %if.then.18, %if.then.4
  %27 = bitcast %struct.gs_pdf14trans_s** %pct_pdf14 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.26 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.21

if.else.20:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.end.21:                                        ; preds = %cleanup.cont
  %28 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %prev = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %28, i32 0, i32 3
  %29 = load %struct.gs_composite_s*, %struct.gs_composite_s** %prev, align 8, !tbaa !544
  store %struct.gs_composite_s* %29, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %30 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct, align 8, !tbaa !1
  %cmp22 = icmp eq %struct.gs_composite_s* %30, null
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26

if.end.25:                                        ; preds = %if.end.21
  br label %for.cond

cleanup.26:                                       ; preds = %if.then.24, %if.else.20, %cleanup
  %31 = bitcast %struct.gs_composite_s** %pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #2
  %32 = bitcast %struct.gs_pdf14trans_s** %pct0 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = load i32, i32* %retval
  ret i32 %33
}

declare i64 @gs_next_ids(%struct.gs_memory_s*, i32) #0

declare void @gx_forward_get_initial_matrix(%struct.gx_device_s*, %struct.gs_matrix_s*) #0

declare i32 @gx_forward_sync_output(%struct.gx_device_s*) #0

declare i32 @gx_forward_output_page(%struct.gx_device_s*, i32, i32) #0

declare i32 @gx_forward_get_bits(%struct.gx_device_s*, i32, i8*, i8**) #0

declare %struct.gx_xfont_procs_s* @gx_forward_get_xfont_procs(%struct.gx_device_s*) #0

declare %struct.gx_device_s* @gx_forward_get_xfont_device(%struct.gx_device_s*) #0

declare i32 @gx_forward_get_band(%struct.gx_device_s*, i32, i32*) #0

declare i32 @gx_forward_copy_rop(%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_fill_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_fill_params_s* %params, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_fill_params_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %new_is = alloca %struct.gs_imager_state_s, align 8
  %code = alloca i32, align 4
  %pinst = alloca %struct.gs_pattern2_instance_s*, align 8
  %fdev = alloca %struct.gx_device_forward_s*, align 8
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %fwd_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %icc_profile_fwd = alloca %struct.cmm_profile_s*, align 8
  %icc_profile_dev = alloca %struct.cmm_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_fill_params_s* %params, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.start(i64 1616, i8* %3) #2
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  %6 = bitcast %struct.gs_imager_state_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 1616, i32 8, i1 false), !tbaa.struct !200
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store %struct.gs_pattern2_instance_s* null, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %9 = bitcast %struct.gx_device_forward_s** %fdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %11 = bitcast %struct.gx_device_s* %10 to %struct.gx_device_forward_s*
  store %struct.gx_device_forward_s* %11, %struct.gx_device_forward_s** %fdev, align 8, !tbaa !1
  %12 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = bitcast %struct.cmm_dev_profile_s** %fwd_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %14) #2
  %15 = bitcast %struct.cmm_profile_s** %icc_profile_fwd to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = bitcast %struct.cmm_profile_s** %icc_profile_dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %18 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 %18(%struct.gx_device_s* %19, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %20 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %20, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %21 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %22 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %fdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %22, i32 0, i32 43
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !63
  %procs1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %23, i32 0, i32 42
  %get_profile2 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs1, i32 0, i32 67
  %24 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile2, align 8, !tbaa !78
  %25 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %fdev, align 8, !tbaa !1
  %target3 = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %25, i32 0, i32 43
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %target3, align 8, !tbaa !63
  %call4 = call i32 %24(%struct.gx_device_s* %26, %struct.cmm_dev_profile_s** %fwd_profile) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %27 = load i32, i32* %code, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %27, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %28 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.7:                                         ; preds = %if.end
  %29 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %fwd_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %29, %struct.cmm_profile_s** %icc_profile_fwd, %struct.gsicc_rendering_param_s* %render_cond) #7
  %30 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %30, %struct.cmm_profile_s** %icc_profile_dev, %struct.gsicc_rendering_param_s* %render_cond) #7
  %31 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %32 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call8 = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %31, %struct.gs_imager_state_s* %32, i32 0, %struct.gs_pdf14trans_params_s* null) #7
  store i32 %call8, i32* %code, align 4, !tbaa !5
  %33 = load i32, i32* %code, align 4, !tbaa !5
  %cmp9 = icmp slt i32 %33, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.7
  %34 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %34, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.11:                                        ; preds = %if.end.7
  %35 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp12 = icmp ne %struct.gx_device_color_s* %35, null
  br i1 %cmp12, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end.11
  %36 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call13 = call i32 @gx_dc_is_pattern2_color(%struct.gx_device_color_s* %36) #7
  %tobool = icmp ne i32 %call13, 0
  br i1 %tobool, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %land.lhs.true
  %37 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %ccolor = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %37, i32 0, i32 4
  %pattern = getelementptr inbounds %struct.gs_client_color_s, %struct.gs_client_color_s* %ccolor, i32 0, i32 0
  %38 = load %struct.gs_pattern_instance_s*, %struct.gs_pattern_instance_s** %pattern, align 8, !tbaa !203
  %39 = bitcast %struct.gs_pattern_instance_s* %38 to %struct.gs_pattern2_instance_s*
  store %struct.gs_pattern2_instance_s* %39, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %40 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %40, i32 0, i32 2
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %saved, align 8, !tbaa !209
  %has_transparency = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 19
  store i32 1, i32* %has_transparency, align 4, !tbaa !213
  %42 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %43 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved15 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %43, i32 0, i32 2
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %saved15, align 8, !tbaa !209
  %trans_device = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %44, i32 0, i32 20
  store %struct.gx_device_s* %42, %struct.gx_device_s** %trans_device, align 8, !tbaa !216
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.14, %land.lhs.true, %if.end.11
  %45 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @update_lop_for_pdf14(%struct.gs_imager_state_s* %new_is, %struct.gx_device_color_s* %45) #7
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %trans_device17 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* %46, %struct.gx_device_s** %trans_device17, align 8, !tbaa !201
  %has_transparency18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 1, i32* %has_transparency18, align 4, !tbaa !202
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %48 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %49 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %50 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %51 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call19 = call i32 @gx_forward_fill_path(%struct.gx_device_s* %47, %struct.gs_imager_state_s* %new_is, %struct.gx_path_s* %48, %struct.gx_fill_params_s* %49, %struct.gx_device_color_s* %50, %struct.gx_clip_path_s* %51) #7
  store i32 %call19, i32* %code, align 4, !tbaa !5
  %trans_device20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device20, align 8, !tbaa !201
  %has_transparency21 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 0, i32* %has_transparency21, align 4, !tbaa !202
  %52 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %cmp22 = icmp ne %struct.gs_pattern2_instance_s* %52, null
  br i1 %cmp22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.16
  %53 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved24 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %53, i32 0, i32 2
  %54 = load %struct.gs_state_s*, %struct.gs_state_s** %saved24, align 8, !tbaa !209
  %trans_device25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %54, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device25, align 8, !tbaa !216
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.end.16
  %55 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %55, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.26, %if.then.10, %if.then.6, %if.then
  %56 = bitcast %struct.cmm_profile_s** %icc_profile_dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %56) #2
  %57 = bitcast %struct.cmm_profile_s** %icc_profile_fwd to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #2
  %58 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %58) #2
  %59 = bitcast %struct.cmm_dev_profile_s** %fwd_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %59) #2
  %60 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %60) #2
  %61 = bitcast %struct.gx_device_forward_s** %fdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #2
  %62 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #2
  %63 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #2
  %64 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.end(i64 1616, i8* %64) #2
  %65 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #2
  %66 = load i32, i32* %retval
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_stroke_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_stroke_params_s* %params, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_stroke_params_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %new_is = alloca %struct.gs_imager_state_s, align 8
  %code = alloca i32, align 4
  %pinst = alloca %struct.gs_pattern2_instance_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_stroke_params_s* %params, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.start(i64 1616, i8* %3) #2
  %4 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  %6 = bitcast %struct.gs_imager_state_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 1616, i32 8, i1 false), !tbaa.struct !200
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store %struct.gs_pattern2_instance_s* null, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %9, %struct.gs_imager_state_s* %10, i32 0, %struct.gs_pdf14trans_params_s* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %11 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %12, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp1 = icmp ne %struct.gx_device_color_s* %13, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call2 = call i32 @gx_dc_is_pattern2_color(%struct.gx_device_color_s* %14) #7
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %land.lhs.true.3, label %if.end.7

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 70
  %16 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  %cmp4 = icmp ne %struct.pdf14_parent_color_s* %16, null
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %land.lhs.true.3
  %17 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %ccolor = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %17, i32 0, i32 4
  %pattern = getelementptr inbounds %struct.gs_client_color_s, %struct.gs_client_color_s* %ccolor, i32 0, i32 0
  %18 = load %struct.gs_pattern_instance_s*, %struct.gs_pattern_instance_s** %pattern, align 8, !tbaa !203
  %19 = bitcast %struct.gs_pattern_instance_s* %18 to %struct.gs_pattern2_instance_s*
  store %struct.gs_pattern2_instance_s* %19, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %20 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %20, i32 0, i32 2
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %saved, align 8, !tbaa !209
  %has_transparency = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 19
  store i32 1, i32* %has_transparency, align 4, !tbaa !213
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %23 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved6 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %23, i32 0, i32 2
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %saved6, align 8, !tbaa !209
  %trans_device = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 20
  store %struct.gx_device_s* %22, %struct.gx_device_s** %trans_device, align 8, !tbaa !216
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %land.lhs.true.3, %land.lhs.true, %if.end
  %25 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  call void @update_lop_for_pdf14(%struct.gs_imager_state_s* %new_is, %struct.gx_device_color_s* %25) #7
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %trans_device8 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* %26, %struct.gx_device_s** %trans_device8, align 8, !tbaa !201
  %has_transparency9 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 1, i32* %has_transparency9, align 4, !tbaa !202
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %28 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %29 = load %struct.gx_stroke_params_s*, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  %30 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %31 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call10 = call i32 @gx_forward_stroke_path(%struct.gx_device_s* %27, %struct.gs_imager_state_s* %new_is, %struct.gx_path_s* %28, %struct.gx_stroke_params_s* %29, %struct.gx_device_color_s* %30, %struct.gx_clip_path_s* %31) #7
  store i32 %call10, i32* %code, align 4, !tbaa !5
  %trans_device11 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device11, align 8, !tbaa !201
  %has_transparency12 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %new_is, i32 0, i32 19
  store i32 0, i32* %has_transparency12, align 4, !tbaa !202
  %32 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %cmp13 = icmp ne %struct.gs_pattern2_instance_s* %32, null
  br i1 %cmp13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.end.7
  %33 = load %struct.gs_pattern2_instance_s*, %struct.gs_pattern2_instance_s** %pinst, align 8, !tbaa !1
  %saved15 = getelementptr inbounds %struct.gs_pattern2_instance_s, %struct.gs_pattern2_instance_s* %33, i32 0, i32 2
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %saved15, align 8, !tbaa !209
  %trans_device16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device16, align 8, !tbaa !216
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.14, %if.end.7
  %35 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %35, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.17, %if.then
  %36 = bitcast %struct.gs_pattern2_instance_s** %pinst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %37) #2
  %38 = bitcast %struct.gs_imager_state_s* %new_is to i8*
  call void @llvm.lifetime.end(i64 1616, i8* %38) #2
  %39 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #2
  %40 = load i32, i32* %retval
  ret i32 %40
}

declare i32 @gx_forward_fill_mask(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*) #0

declare i32 @gx_forward_fill_trapezoid(%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32) #0

declare i32 @gx_forward_fill_parallelogram(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #0

declare i32 @gx_forward_fill_triangle(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #0

declare i32 @gx_forward_draw_thin_line(%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_begin_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_image1_s* %pim, i32 %format, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %memory, %struct.gx_image_enum_common_s** %pinfo) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pim.addr = alloca %struct.gs_image1_s*, align 8
  %format.addr = alloca i32, align 4
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_image1_s* %pim, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  store i32 %format, i32* %format.addr, align 4, !tbaa !66
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %5 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %4, %struct.gs_imager_state_s* %5, i32 0, %struct.gs_pdf14trans_params_s* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %6 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %7, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %9 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %10 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %11 = load i32, i32* %format.addr, align 4, !tbaa !66
  %12 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %14 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %15 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %16 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call1 = call i32 @gx_forward_begin_image(%struct.gx_device_s* %8, %struct.gs_imager_state_s* %9, %struct.gs_image1_s* %10, i32 %11, %struct.gs_int_rect_s* %12, %struct.gx_device_color_s* %13, %struct.gx_clip_path_s* %14, %struct.gs_memory_s* %15, %struct.gx_image_enum_common_s** %16) #7
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %17 = load i32, i32* %code, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %17, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %19 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %20 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %21 = load i32, i32* %format.addr, align 4, !tbaa !66
  %22 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %23 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %24 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %25 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %26 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call4 = call i32 @gx_default_begin_image(%struct.gx_device_s* %18, %struct.gs_imager_state_s* %19, %struct.gs_image1_s* %20, i32 %21, %struct.gs_int_rect_s* %22, %struct.gx_device_color_s* %23, %struct.gx_clip_path_s* %24, %struct.gs_memory_s* %25, %struct.gx_image_enum_common_s** %26) #7
  store i32 %call4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %if.end
  %27 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then.3, %if.then
  %28 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  %30 = load i32, i32* %retval
  ret i32 %30
}

declare i32 @gx_default_image_data(%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32) #0

declare i32 @gx_default_end_image(%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32) #0

declare i32 @gx_forward_strip_copy_rop(%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32) #0

declare void @gx_forward_get_clipping_box(%struct.gx_device_s*, %struct.gs_fixed_rect_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_begin_typed_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_matrix_s* %pmat, %struct.gs_image_common_s* %pic, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gx_image_enum_common_s** %pinfo) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pic.addr = alloca %struct.gs_image_common_s*, align 8
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %code = alloca i32, align 4
  %pis_noconst = alloca %struct.gs_imager_state_s*, align 8
  %pim = alloca %struct.gs_image1_s*, align 8
  %penum = alloca %struct.gx_image_enum_s*, align 8
  %ptile = alloca %struct.gx_color_tile_s*, align 8
  %bbox_in = alloca %struct.gs_rect_s, align 8
  %bbox_out = alloca %struct.gs_rect_s, align 8
  %tgp = alloca %struct.gs_transparency_group_params_s, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  store %struct.gs_image_common_s* %pic, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast %struct.gs_imager_state_s** %pis_noconst to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %5, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %6 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %8 = bitcast %struct.gs_image_common_s* %7 to %struct.gs_image1_s*
  store %struct.gs_image1_s* %8, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %9 = bitcast %struct.gx_image_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast %struct.gs_rect_s* %bbox_in to i8*
  call void @llvm.lifetime.start(i64 32, i8* %11) #2
  %12 = bitcast %struct.gs_rect_s* %bbox_out to i8*
  call void @llvm.lifetime.start(i64 32, i8* %12) #2
  %13 = bitcast %struct.gs_transparency_group_params_s* %tgp to i8*
  call void @llvm.lifetime.start(i64 56, i8* %13) #2
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %15 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %14, %struct.gs_imager_state_s* %15, i32 0, %struct.gs_pdf14trans_params_s* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %16 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %16, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %17, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %has_transparency = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %18, i32 0, i32 19
  store i32 1, i32* %has_transparency, align 4, !tbaa !202
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %20 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %trans_device = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %20, i32 0, i32 20
  store %struct.gx_device_s* %19, %struct.gx_device_s** %trans_device, align 8, !tbaa !201
  %21 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %ImageMask = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %21, i32 0, i32 10
  %22 = load i32, i32* %ImageMask, align 4, !tbaa !231
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then.1, label %if.end.46

if.then.1:                                        ; preds = %if.end
  %23 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %cmp2 = icmp ne %struct.gx_device_color_s* %23, null
  br i1 %cmp2, label %land.lhs.true, label %if.end.45

land.lhs.true:                                    ; preds = %if.then.1
  %24 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call3 = call i32 @gx_dc_is_pattern1_color(%struct.gx_device_color_s* %24) #7
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.45

if.then.5:                                        ; preds = %land.lhs.true
  %25 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call6 = call i8* @gx_pattern1_get_transptr(%struct.gx_device_color_s* %25) #7
  %cmp7 = icmp ne i8* %call6, null
  br i1 %cmp7, label %if.then.8, label %if.end.44

if.then.8:                                        ; preds = %if.then.5
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %26, i32 0, i32 42
  %begin_image = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 31
  %27 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)** %begin_image, align 8, !tbaa !233
  %cmp9 = icmp ne i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* %27, @pdf14_clist_begin_image
  br i1 %cmp9, label %if.then.10, label %if.end.43

if.then.10:                                       ; preds = %if.then.8
  %28 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %28, i32 0, i32 1
  %pattern = bitcast %union._c* %colors to %struct._pat*
  %p_tile = getelementptr inbounds %struct._pat, %struct._pat* %pattern, i32 0, i32 0
  %29 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %p_tile, align 8, !tbaa !217
  store %struct.gx_color_tile_s* %29, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %30 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %30, i32 0, i32 9
  %31 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans, align 8, !tbaa !219
  %n_chan = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %31, i32 0, i32 7
  %32 = load i32, i32* %n_chan, align 4, !tbaa !39
  %sub = sub nsw i32 %32, 1
  %cmp11 = icmp slt i32 %sub, 4
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.10
  %33 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans13 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %33, i32 0, i32 9
  %34 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans13, align 8, !tbaa !219
  %blending_procs = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %34, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @rgb_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs, align 8, !tbaa !221
  %35 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans14 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %35, i32 0, i32 9
  %36 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans14, align 8, !tbaa !219
  %is_additive = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %36, i32 0, i32 12
  store i32 1, i32* %is_additive, align 4, !tbaa !222
  br label %if.end.19

if.else:                                          ; preds = %if.then.10
  %37 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans15 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %37, i32 0, i32 9
  %38 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans15, align 8, !tbaa !219
  %blending_procs16 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %38, i32 0, i32 11
  store %struct.pdf14_nonseparable_blending_procs_s* @cmyk_blending_procs, %struct.pdf14_nonseparable_blending_procs_s** %blending_procs16, align 8, !tbaa !221
  %39 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans17 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %39, i32 0, i32 9
  %40 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans17, align 8, !tbaa !219
  %is_additive18 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %40, i32 0, i32 12
  store i32 0, i32* %is_additive18, align 4, !tbaa !222
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.12
  %41 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %41, i32 0, i32 12
  %42 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %43 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans20 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %43, i32 0, i32 9
  %44 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans20, align 8, !tbaa !219
  %blending_mode = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %44, i32 0, i32 13
  store i32 %42, i32* %blending_mode, align 4, !tbaa !49
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %46 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %47 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %48 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %49 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %50 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %51 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %52 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %53 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call21 = call i32 @gx_default_begin_typed_image(%struct.gx_device_s* %45, %struct.gs_imager_state_s* %46, %struct.gs_matrix_s* %47, %struct.gs_image_common_s* %48, %struct.gs_int_rect_s* %49, %struct.gx_device_color_s* %50, %struct.gx_clip_path_s* %51, %struct.gs_memory_s* %52, %struct.gx_image_enum_common_s** %53) #7
  store i32 %call21, i32* %code, align 4, !tbaa !5
  %54 = load i32, i32* %code, align 4, !tbaa !5
  %cmp22 = icmp slt i32 %54, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.19
  %55 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %55, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.24:                                        ; preds = %if.end.19
  %56 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %57 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %56, align 8, !tbaa !1
  %58 = bitcast %struct.gx_image_enum_common_s* %57 to %struct.gx_image_enum_s*
  store %struct.gx_image_enum_s* %58, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %p = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !412
  %p25 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %p25, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8, !tbaa !413
  %59 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Width = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %59, i32 0, i32 2
  %60 = load i32, i32* %Width, align 4, !tbaa !414
  %conv = sitofp i32 %60 to double
  %q = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 1
  %x26 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q, i32 0, i32 0
  store double %conv, double* %x26, align 8, !tbaa !415
  %61 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %Height = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %61, i32 0, i32 3
  %62 = load i32, i32* %Height, align 4, !tbaa !416
  %conv27 = sitofp i32 %62 to double
  %q28 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %bbox_in, i32 0, i32 1
  %y29 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %q28, i32 0, i32 1
  store double %conv27, double* %y29, align 8, !tbaa !417
  %63 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim, align 8, !tbaa !1
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %63, i32 0, i32 1
  %call30 = call i32 @gs_bbox_transform_inverse(%struct.gs_rect_s* %bbox_in, %struct.gs_matrix_s* %ImageMatrix, %struct.gs_rect_s* %bbox_out) #7
  store i32 %call30, i32* %code, align 4, !tbaa !5
  %64 = load i32, i32* %code, align 4, !tbaa !5
  %cmp31 = icmp slt i32 %64, 0
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.24
  %65 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %65, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %if.end.24
  br label %do.body

do.body:                                          ; preds = %if.end.34
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %Isolated = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 1
  store i32 1, i32* %Isolated, align 4, !tbaa !245
  %Knockout = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 2
  store i32 0, i32* %Knockout, align 4, !tbaa !256
  %mask_id = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 5
  store i32 0, i32* %mask_id, align 4, !tbaa !259
  %image_with_SMask = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 3
  store i32 0, i32* %image_with_SMask, align 4, !tbaa !547
  %idle = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 4
  store i32 0, i32* %idle, align 4, !tbaa !258
  %iccprofile = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 9
  store %struct.cmm_profile_s* null, %struct.cmm_profile_s** %iccprofile, align 8, !tbaa !251
  %icc_hashcode = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 8
  store i64 0, i64* %icc_hashcode, align 8, !tbaa !252
  %66 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans35 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %66, i32 0, i32 9
  %67 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans35, align 8, !tbaa !219
  %n_chan36 = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %67, i32 0, i32 7
  %68 = load i32, i32* %n_chan36, align 4, !tbaa !39
  %sub37 = sub nsw i32 %68, 1
  %group_color_numcomps = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 6
  store i32 %sub37, i32* %group_color_numcomps, align 4, !tbaa !250
  %ColorSpace = getelementptr inbounds %struct.gs_transparency_group_params_s, %struct.gs_transparency_group_params_s* %tgp, i32 0, i32 0
  store %struct.gs_color_space_s* null, %struct.gs_color_space_s** %ColorSpace, align 8, !tbaa !548
  %69 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %70 = bitcast %struct.gs_imager_state_s* %69 to %struct.gs_state_s*
  %call38 = call i32 @gs_begin_transparency_group(%struct.gs_state_s* %70, %struct.gs_transparency_group_params_s* %tgp, %struct.gs_rect_s* %bbox_out) #7
  %71 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %render = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %71, i32 0, i32 29
  %72 = load i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %render, align 8, !tbaa !418
  %73 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %ttrans39 = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %73, i32 0, i32 9
  %74 = load %struct.gx_pattern_trans_s*, %struct.gx_pattern_trans_s** %ttrans39, align 8, !tbaa !219
  %image_render = getelementptr inbounds %struct.gx_pattern_trans_s, %struct.gx_pattern_trans_s* %74, i32 0, i32 16
  store i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)* %72, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %image_render, align 8, !tbaa !430
  %75 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %penum, align 8, !tbaa !1
  %render40 = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %75, i32 0, i32 29
  store i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)* @pdf14_pattern_trans_render, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)** %render40, align 8, !tbaa !418
  %76 = load %struct.gx_color_tile_s*, %struct.gx_color_tile_s** %ptile, align 8, !tbaa !1
  %trans_group_popped = getelementptr inbounds %struct.gx_color_tile_s, %struct.gx_color_tile_s* %76, i32 0, i32 16
  store i32 0, i32* %trans_group_popped, align 4, !tbaa !431
  %77 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %has_transparency41 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %77, i32 0, i32 19
  store i32 0, i32* %has_transparency41, align 4, !tbaa !202
  %78 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %trans_device42 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %78, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device42, align 8, !tbaa !201
  %79 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %79, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.43:                                        ; preds = %if.then.8
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.5
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %land.lhs.true, %if.then.1
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.end
  %80 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %81 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %82 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %83 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %84 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %85 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %86 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %87 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %88 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call47 = call i32 @gx_forward_begin_typed_image(%struct.gx_device_s* %80, %struct.gs_imager_state_s* %81, %struct.gs_matrix_s* %82, %struct.gs_image_common_s* %83, %struct.gs_int_rect_s* %84, %struct.gx_device_color_s* %85, %struct.gx_clip_path_s* %86, %struct.gs_memory_s* %87, %struct.gx_image_enum_common_s** %88) #7
  store i32 %call47, i32* %code, align 4, !tbaa !5
  %89 = load i32, i32* %code, align 4, !tbaa !5
  %cmp48 = icmp slt i32 %89, 0
  br i1 %cmp48, label %if.then.50, label %if.else.54

if.then.50:                                       ; preds = %if.end.46
  %90 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %91 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %92 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %93 = load %struct.gs_image_common_s*, %struct.gs_image_common_s** %pic.addr, align 8, !tbaa !1
  %94 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %95 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %96 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %97 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %98 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call51 = call i32 @gx_default_begin_typed_image(%struct.gx_device_s* %90, %struct.gs_imager_state_s* %91, %struct.gs_matrix_s* %92, %struct.gs_image_common_s* %93, %struct.gs_int_rect_s* %94, %struct.gx_device_color_s* %95, %struct.gx_clip_path_s* %96, %struct.gs_memory_s* %97, %struct.gx_image_enum_common_s** %98) #7
  store i32 %call51, i32* %code, align 4, !tbaa !5
  %99 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %has_transparency52 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %99, i32 0, i32 19
  store i32 0, i32* %has_transparency52, align 4, !tbaa !202
  %100 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %trans_device53 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %100, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device53, align 8, !tbaa !201
  %101 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %101, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else.54:                                       ; preds = %if.end.46
  %102 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %has_transparency55 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %102, i32 0, i32 19
  store i32 0, i32* %has_transparency55, align 4, !tbaa !202
  %103 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis_noconst, align 8, !tbaa !1
  %trans_device56 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %103, i32 0, i32 20
  store %struct.gx_device_s* null, %struct.gx_device_s** %trans_device56, align 8, !tbaa !201
  %104 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %104, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else.54, %if.then.50, %do.end, %if.then.33, %if.then.23, %if.then
  %105 = bitcast %struct.gs_transparency_group_params_s* %tgp to i8*
  call void @llvm.lifetime.end(i64 56, i8* %105) #2
  %106 = bitcast %struct.gs_rect_s* %bbox_out to i8*
  call void @llvm.lifetime.end(i64 32, i8* %106) #2
  %107 = bitcast %struct.gs_rect_s* %bbox_in to i8*
  call void @llvm.lifetime.end(i64 32, i8* %107) #2
  %108 = bitcast %struct.gx_color_tile_s** %ptile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %108) #2
  %109 = bitcast %struct.gx_image_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %109) #2
  %110 = bitcast %struct.gs_image1_s** %pim to i8*
  call void @llvm.lifetime.end(i64 8, i8* %110) #2
  %111 = bitcast %struct.gs_imager_state_s** %pis_noconst to i8*
  call void @llvm.lifetime.end(i64 8, i8* %111) #2
  %112 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #2
  %113 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = load i32, i32* %retval
  ret i32 %114
}

declare i32 @gx_forward_get_bits_rectangle(%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_create_compositor(%struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_composite_s* %pct, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem, %struct.gx_device_s* %cdev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cdev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %code = alloca i32, align 4
  %is_pdf14_compositor = alloca i32, align 4
  %sep_target = alloca i32, align 4
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  %pctemp = alloca %struct.gs_composite_s, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp122 = alloca i32, align 4
  %__s1_len128 = alloca i64, align 8
  %__s2_len130 = alloca i64, align 8
  %tmp131 = alloca i32, align 4
  %__s1138 = alloca i8*, align 8
  %__result141 = alloca i32, align 4
  %tmp179 = alloca i32, align 4
  %__s1_len214 = alloca i64, align 8
  %__s2_len216 = alloca i64, align 8
  %tmp217 = alloca i32, align 4
  %__s1224 = alloca i8*, align 8
  %__result227 = alloca i32, align 4
  %tmp265 = alloca i32, align 4
  %__s1_len275 = alloca i64, align 8
  %__s2_len277 = alloca i64, align 8
  %tmp278 = alloca i32, align 4
  %__s1285 = alloca i8*, align 8
  %__result288 = alloca i32, align 4
  %tmp326 = alloca i32, align 4
  %y = alloca i32, align 4
  %rows_used = alloca i32, align 4
  %linebuf = alloca i8*, align 8
  %actual_data = alloca i8*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %target389 = alloca %struct.gx_device_s*, align 8
  %image = alloca %struct.gs_image1_s, align 8
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %info = alloca %struct.gx_image_enum_common_s*, align 8
  %planes = alloca %struct.gx_image_plane_s, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %cdev, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %is_pdf14_compositor to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i32* %sep_target to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %8 = bitcast %struct.gs_composite_s* %7 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %8, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %9 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %call = call i32 @gs_is_pdf14trans_compositor(%struct.gs_composite_s* %9) #7
  store i32 %call, i32* %is_pdf14_compositor, align 4, !tbaa !5
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end.362

if.then:                                          ; preds = %entry
  %10 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %10, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %11 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  switch i32 %11, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.39
    i32 3, label %sw.bb.69
    i32 5, label %sw.bb.200
    i32 4, label %sw.bb.212
    i32 6, label %sw.bb.349
    i32 8, label %sw.epilog
    i32 9, label %sw.epilog
    i32 10, label %sw.bb.355
    i32 11, label %sw.bb.357
    i32 7, label %sw.bb.359
    i32 2, label %sw.epilog
  ]

sw.bb:                                            ; preds = %if.then
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 61
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 43
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 11
  %15 = bitcast %struct.gx_device_color_info_s* %saved_target_color_info to i8*
  %16 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 720, i32 8, i1 false), !tbaa.struct !65
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 43
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %target1, align 8, !tbaa !82
  %color_info2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 11
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 11
  %20 = bitcast %struct.gx_device_color_info_s* %color_info2 to i8*
  %21 = bitcast %struct.gx_device_color_info_s* %color_info3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 720, i32 8, i1 false), !tbaa.struct !65
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 43
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %target4, align 8, !tbaa !82
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %23, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 51
  %24 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_encode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 62
  store i64 (%struct.gx_device_s*, i16*)* %24, i64 (%struct.gx_device_s*, i16*)** %saved_target_encode_color, align 8, !tbaa !549
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 43
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %target5, align 8, !tbaa !82
  %procs6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs6, i32 0, i32 52
  %28 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !550
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_decode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 63
  store i32 (%struct.gx_device_s*, i64, i16*)* %28, i32 (%struct.gx_device_s*, i64, i16*)** %saved_target_decode_color, align 8, !tbaa !551
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_encode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 66
  %31 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %my_encode_color, align 8, !tbaa !552
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs7 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %32, i32 0, i32 42
  %encode_color8 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs7, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %31, i64 (%struct.gx_device_s*, i16*)** %encode_color8, align 8, !tbaa !296
  %33 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target9 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %33, i32 0, i32 43
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %target9, align 8, !tbaa !82
  %procs10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %34, i32 0, i32 42
  %encode_color11 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs10, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %31, i64 (%struct.gx_device_s*, i16*)** %encode_color11, align 8, !tbaa !487
  %35 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_decode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %35, i32 0, i32 67
  %36 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %my_decode_color, align 8, !tbaa !553
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 42
  %decode_color13 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs12, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %36, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color13, align 8, !tbaa !298
  %38 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %38, i32 0, i32 43
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %target14, align 8, !tbaa !82
  %procs15 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %39, i32 0, i32 42
  %decode_color16 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs15, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %36, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color16, align 8, !tbaa !550
  %40 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %40, i32 0, i32 43
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %target17, align 8, !tbaa !82
  %procs18 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs18, i32 0, i32 49
  %42 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %43 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_get_color_mapping_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %43, i32 0, i32 64
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %42, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %saved_target_get_color_mapping_procs, align 8, !tbaa !554
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target19 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 43
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %target19, align 8, !tbaa !82
  %procs20 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs20, i32 0, i32 50
  %46 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !480
  %47 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %47, i32 0, i32 65
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %46, i32 (%struct.gx_device_s*, i8*, i32, i32)** %saved_target_get_color_comp_index, align 8, !tbaa !526
  %48 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_get_color_mapping_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %48, i32 0, i32 68
  %49 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %my_get_color_mapping_procs, align 8, !tbaa !555
  %50 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs21 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %50, i32 0, i32 42
  %get_color_mapping_procs22 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs21, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %49, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs22, align 8, !tbaa !266
  %51 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target23 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %51, i32 0, i32 43
  %52 = load %struct.gx_device_s*, %struct.gx_device_s** %target23, align 8, !tbaa !82
  %procs24 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %52, i32 0, i32 42
  %get_color_mapping_procs25 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs24, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %49, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs25, align 8, !tbaa !488
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 69
  %54 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %my_get_color_comp_index, align 8, !tbaa !556
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs26 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 42
  %get_color_comp_index27 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs26, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %54, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index27, align 8, !tbaa !267
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target28 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %56, i32 0, i32 43
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %target28, align 8, !tbaa !82
  %procs29 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %57, i32 0, i32 42
  %get_color_comp_index30 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs29, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %54, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index30, align 8, !tbaa !480
  %58 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %58, i32 0, i32 38
  %59 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %save_get_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %60, i32 0, i32 60
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %59, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %save_get_cmap_procs, align 8, !tbaa !441
  %61 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs31 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %61, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_get_cmap_procs, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs31, align 8, !tbaa !265
  %62 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %62, %struct.gx_device_s* %63) #7
  %64 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %65 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %66 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %67 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %call32 = call i32 @pdf14_recreate_clist_device(%struct.gs_memory_s* %64, %struct.gs_imager_state_s* %65, %struct.gx_device_s* %66, %struct.gs_pdf14trans_s* %67) #7
  store i32 %call32, i32* %code, align 4, !tbaa !5
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %text_knockout = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 53
  store i32 0, i32* %text_knockout, align 4, !tbaa !557
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 52
  store i32 0, i32* %blend_mode, align 4, !tbaa !48
  %70 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %70, i32 0, i32 50
  store float 0.000000e+00, float* %shape, align 4, !tbaa !344
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %71, i32 0, i32 49
  store float 0.000000e+00, float* %opacity, align 4, !tbaa !394
  %72 = load i32, i32* %code, align 4, !tbaa !5
  %cmp33 = icmp slt i32 %72, 0
  br i1 %cmp33, label %if.then.34, label %if.end

if.then.34:                                       ; preds = %sw.bb
  %73 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %73, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end:                                           ; preds = %sw.bb
  %74 = bitcast %struct.gs_composite_s* %pctemp to i8*
  call void @llvm.lifetime.start(i64 40, i8* %74) #2
  %75 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %76 = bitcast %struct.gs_composite_s* %pctemp to i8*
  %77 = bitcast %struct.gs_composite_s* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 40, i32 8, i1 false), !tbaa.struct !558
  %type = getelementptr inbounds %struct.gs_composite_s, %struct.gs_composite_s* %pctemp, i32 0, i32 0
  store %struct.gs_composite_type_s* @gs_composite_pdf14trans_no_clist_writer_type, %struct.gs_composite_type_s** %type, align 8, !tbaa !163
  %78 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %78, i32 0, i32 43
  %79 = load %struct.gx_device_s*, %struct.gx_device_s** %target35, align 8, !tbaa !82
  %procs36 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %79, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs36, i32 0, i32 40
  %80 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %81 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target37 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %81, i32 0, i32 43
  %82 = load %struct.gx_device_s*, %struct.gx_device_s** %target37, align 8, !tbaa !82
  %83 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %84 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %85 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %86 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call38 = call i32 %80(%struct.gx_device_s* %82, %struct.gx_device_s** %83, %struct.gs_composite_s* %pctemp, %struct.gs_imager_state_s* %84, %struct.gs_memory_s* %85, %struct.gx_device_s* %86) #7
  store i32 %call38, i32* %code, align 4, !tbaa !5
  %87 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %88 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %87, %struct.gx_device_s** %88, align 8, !tbaa !1
  %89 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %89, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %90 = bitcast %struct.gs_composite_s* %pctemp to i8*
  call void @llvm.lifetime.end(i64 40, i8* %90) #2
  br label %cleanup.495

sw.bb.39:                                         ; preds = %if.then
  %91 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target40 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %91, i32 0, i32 43
  %92 = load %struct.gx_device_s*, %struct.gx_device_s** %target40, align 8, !tbaa !82
  %color_info41 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %92, i32 0, i32 11
  %93 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_color_info42 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %93, i32 0, i32 61
  %94 = bitcast %struct.gx_device_color_info_s* %color_info41 to i8*
  %95 = bitcast %struct.gx_device_color_info_s* %saved_target_color_info42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %95, i64 720, i32 8, i1 false), !tbaa.struct !65
  %96 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_encode_color43 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %96, i32 0, i32 62
  %97 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %saved_target_encode_color43, align 8, !tbaa !549
  %98 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target44 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %98, i32 0, i32 43
  %99 = load %struct.gx_device_s*, %struct.gx_device_s** %target44, align 8, !tbaa !82
  %procs45 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %99, i32 0, i32 42
  %encode_color46 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs45, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %97, i64 (%struct.gx_device_s*, i16*)** %encode_color46, align 8, !tbaa !487
  %100 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_decode_color47 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %100, i32 0, i32 63
  %101 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %saved_target_decode_color47, align 8, !tbaa !551
  %102 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target48 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %102, i32 0, i32 43
  %103 = load %struct.gx_device_s*, %struct.gx_device_s** %target48, align 8, !tbaa !82
  %procs49 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %103, i32 0, i32 42
  %decode_color50 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs49, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %101, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color50, align 8, !tbaa !550
  %104 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_get_color_mapping_procs51 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %104, i32 0, i32 64
  %105 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %saved_target_get_color_mapping_procs51, align 8, !tbaa !554
  %106 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target52 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %106, i32 0, i32 43
  %107 = load %struct.gx_device_s*, %struct.gx_device_s** %target52, align 8, !tbaa !82
  %procs53 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %107, i32 0, i32 42
  %get_color_mapping_procs54 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs53, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %105, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs54, align 8, !tbaa !488
  %108 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %saved_target_get_color_comp_index55 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %108, i32 0, i32 65
  %109 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %saved_target_get_color_comp_index55, align 8, !tbaa !526
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target56 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %110, i32 0, i32 43
  %111 = load %struct.gx_device_s*, %struct.gx_device_s** %target56, align 8, !tbaa !82
  %procs57 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %111, i32 0, i32 42
  %get_color_comp_index58 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs57, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %109, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index58, align 8, !tbaa !480
  %112 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %save_get_cmap_procs59 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %112, i32 0, i32 60
  %113 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %save_get_cmap_procs59, align 8, !tbaa !441
  %114 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs60 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %114, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %113, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs60, align 8, !tbaa !265
  %115 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %116 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target61 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %116, i32 0, i32 43
  %117 = load %struct.gx_device_s*, %struct.gx_device_s** %target61, align 8, !tbaa !82
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %115, %struct.gx_device_s* %117) #7
  %118 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %call62 = call i32 @pdf14_clist_get_param_compressed_color_list(%struct.pdf14_device_s* %118) #7
  %119 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %120 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %121 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call63 = call i32 @pdf14_disable_clist_device(%struct.gs_memory_s* %119, %struct.gs_imager_state_s* %120, %struct.gx_device_s* %121) #7
  %122 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target64 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %122, i32 0, i32 43
  %123 = load %struct.gx_device_s*, %struct.gx_device_s** %target64, align 8, !tbaa !82
  %124 = bitcast %struct.gx_device_s* %123 to %struct.gx_device_clist_writer_s*
  %125 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call65 = call i32 @cmd_put_color_mapping(%struct.gx_device_clist_writer_s* %124, %struct.gs_imager_state_s* %125) #7
  store i32 %call65, i32* %code, align 4, !tbaa !5
  %126 = load i32, i32* %code, align 4, !tbaa !5
  %cmp66 = icmp slt i32 %126, 0
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %sw.bb.39
  %127 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %127, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.68:                                        ; preds = %sw.bb.39
  br label %sw.epilog

sw.bb.69:                                         ; preds = %if.then
  %128 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %129 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %130 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params70 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %130, i32 0, i32 5
  %call71 = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %128, %struct.gs_imager_state_s* %129, i32 1, %struct.gs_pdf14trans_params_s* %params70) #7
  store i32 %call71, i32* %code, align 4, !tbaa !5
  %131 = load i32, i32* %code, align 4, !tbaa !5
  %cmp72 = icmp slt i32 %131, 0
  br i1 %cmp72, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %sw.bb.69
  %132 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %132, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.74:                                        ; preds = %sw.bb.69
  %133 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params75 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %133, i32 0, i32 5
  %Background_components = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params75, i32 0, i32 9
  %134 = load i32, i32* %Background_components, align 4, !tbaa !559
  %cmp76 = icmp ne i32 %134, 0
  br i1 %cmp76, label %land.lhs.true, label %if.end.82

land.lhs.true:                                    ; preds = %if.end.74
  %135 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params77 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %135, i32 0, i32 5
  %Background_components78 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params77, i32 0, i32 9
  %136 = load i32, i32* %Background_components78, align 4, !tbaa !559
  %137 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info79 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %137, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info79, i32 0, i32 1
  %138 = load i32, i32* %num_components, align 4, !tbaa !150
  %cmp80 = icmp ne i32 %136, %138
  br i1 %cmp80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %land.lhs.true
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.82:                                        ; preds = %land.lhs.true, %if.end.74
  %139 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %140 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_push_parent_color(%struct.gx_device_s* %139, %struct.gs_imager_state_s* %140) #7
  %141 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %141) #2
  %142 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %142) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 1) to i64), i64 ptrtoint ([17 x i8]* @.str.18 to i64)), i64 1), label %land.lhs.true.83, label %cond.false

land.lhs.true.83:                                 ; preds = %if.end.82
  %call84 = call i64 @strlen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0)) #10
  store i64 %call84, i64* %__s2_len, align 8, !tbaa !68
  %143 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp85 = icmp ult i64 %143, 4
  br i1 %cmp85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.83
  %144 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %144) #2
  %145 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %145, i32 0, i32 2
  %146 = load i8*, i8** %dname, align 8, !tbaa !247
  store i8* %146, i8** %__s1, align 8, !tbaa !1
  %147 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %147) #2
  %148 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %148, i64 0
  %149 = load i8, i8* %arrayidx, align 1, !tbaa !66
  %conv = zext i8 %149 to i32
  %150 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), align 1, !tbaa !66
  %conv88 = zext i8 %150 to i32
  %sub = sub nsw i32 %conv, %conv88
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %151 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp89 = icmp ugt i64 %151, 0
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.121

land.lhs.true.91:                                 ; preds = %cond.true
  %152 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp92 = icmp eq i32 %152, 0
  br i1 %cmp92, label %if.then.94, label %if.end.121

if.then.94:                                       ; preds = %land.lhs.true.91
  %153 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx95 = getelementptr inbounds i8, i8* %153, i64 1
  %154 = load i8, i8* %arrayidx95, align 1, !tbaa !66
  %conv96 = zext i8 %154 to i32
  %155 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 1), align 1, !tbaa !66
  %conv97 = zext i8 %155 to i32
  %sub98 = sub nsw i32 %conv96, %conv97
  store i32 %sub98, i32* %__result, align 4, !tbaa !5
  %156 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp99 = icmp ugt i64 %156, 1
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.120

land.lhs.true.101:                                ; preds = %if.then.94
  %157 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp102 = icmp eq i32 %157, 0
  br i1 %cmp102, label %if.then.104, label %if.end.120

if.then.104:                                      ; preds = %land.lhs.true.101
  %158 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx105 = getelementptr inbounds i8, i8* %158, i64 2
  %159 = load i8, i8* %arrayidx105, align 1, !tbaa !66
  %conv106 = zext i8 %159 to i32
  %160 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 2), align 1, !tbaa !66
  %conv107 = zext i8 %160 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %__result, align 4, !tbaa !5
  %161 = load i64, i64* %__s2_len, align 8, !tbaa !68
  %cmp109 = icmp ugt i64 %161, 2
  br i1 %cmp109, label %land.lhs.true.111, label %if.end.119

land.lhs.true.111:                                ; preds = %if.then.104
  %162 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp112 = icmp eq i32 %162, 0
  br i1 %cmp112, label %if.then.114, label %if.end.119

if.then.114:                                      ; preds = %land.lhs.true.111
  %163 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx115 = getelementptr inbounds i8, i8* %163, i64 3
  %164 = load i8, i8* %arrayidx115, align 1, !tbaa !66
  %conv116 = zext i8 %164 to i32
  %165 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 3), align 1, !tbaa !66
  %conv117 = zext i8 %165 to i32
  %sub118 = sub nsw i32 %conv116, %conv117
  store i32 %sub118, i32* %__result, align 4, !tbaa !5
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.114, %land.lhs.true.111, %if.then.104
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %land.lhs.true.101, %if.then.94
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %land.lhs.true.91, %cond.true
  %166 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %166, i32* %tmp122, !tbaa !5
  %167 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %167) #2
  %168 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %168) #2
  %169 = load i32, i32* %tmp122, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.83, %if.end.82
  %170 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname123 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %170, i32 0, i32 2
  %171 = load i8*, i8** %dname123, align 8, !tbaa !247
  %call124 = call i32 @strcmp(i8* %171, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0)) #8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.121
  %cond = phi i32 [ %169, %if.end.121 ], [ %call124, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %172 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %172) #2
  %173 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %173) #2
  %174 = load i32, i32* %tmp, !tbaa !5
  %cmp125 = icmp eq i32 %174, 0
  br i1 %cmp125, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %175 = bitcast i64* %__s1_len128 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %175) #2
  %176 = bitcast i64* %__s2_len130 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %176) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 1) to i64), i64 ptrtoint ([19 x i8]* @.str.17 to i64)), i64 1), label %land.lhs.true.132, label %cond.false.180

land.lhs.true.132:                                ; preds = %lor.lhs.false
  %call133 = call i64 @strlen(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0)) #10
  store i64 %call133, i64* %__s2_len130, align 8, !tbaa !68
  %177 = load i64, i64* %__s2_len130, align 8, !tbaa !68
  %cmp134 = icmp ult i64 %177, 4
  br i1 %cmp134, label %cond.true.136, label %cond.false.180

cond.true.136:                                    ; preds = %land.lhs.true.132
  %178 = bitcast i8** %__s1138 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %178) #2
  %179 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname139 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %179, i32 0, i32 2
  %180 = load i8*, i8** %dname139, align 8, !tbaa !247
  store i8* %180, i8** %__s1138, align 8, !tbaa !1
  %181 = bitcast i32* %__result141 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %181) #2
  %182 = load i8*, i8** %__s1138, align 8, !tbaa !1
  %arrayidx142 = getelementptr inbounds i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx142, align 1, !tbaa !66
  %conv143 = zext i8 %183 to i32
  %184 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0), align 1, !tbaa !66
  %conv144 = zext i8 %184 to i32
  %sub145 = sub nsw i32 %conv143, %conv144
  store i32 %sub145, i32* %__result141, align 4, !tbaa !5
  %185 = load i64, i64* %__s2_len130, align 8, !tbaa !68
  %cmp146 = icmp ugt i64 %185, 0
  br i1 %cmp146, label %land.lhs.true.148, label %if.end.178

land.lhs.true.148:                                ; preds = %cond.true.136
  %186 = load i32, i32* %__result141, align 4, !tbaa !5
  %cmp149 = icmp eq i32 %186, 0
  br i1 %cmp149, label %if.then.151, label %if.end.178

if.then.151:                                      ; preds = %land.lhs.true.148
  %187 = load i8*, i8** %__s1138, align 8, !tbaa !1
  %arrayidx152 = getelementptr inbounds i8, i8* %187, i64 1
  %188 = load i8, i8* %arrayidx152, align 1, !tbaa !66
  %conv153 = zext i8 %188 to i32
  %189 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 1), align 1, !tbaa !66
  %conv154 = zext i8 %189 to i32
  %sub155 = sub nsw i32 %conv153, %conv154
  store i32 %sub155, i32* %__result141, align 4, !tbaa !5
  %190 = load i64, i64* %__s2_len130, align 8, !tbaa !68
  %cmp156 = icmp ugt i64 %190, 1
  br i1 %cmp156, label %land.lhs.true.158, label %if.end.177

land.lhs.true.158:                                ; preds = %if.then.151
  %191 = load i32, i32* %__result141, align 4, !tbaa !5
  %cmp159 = icmp eq i32 %191, 0
  br i1 %cmp159, label %if.then.161, label %if.end.177

if.then.161:                                      ; preds = %land.lhs.true.158
  %192 = load i8*, i8** %__s1138, align 8, !tbaa !1
  %arrayidx162 = getelementptr inbounds i8, i8* %192, i64 2
  %193 = load i8, i8* %arrayidx162, align 1, !tbaa !66
  %conv163 = zext i8 %193 to i32
  %194 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 2), align 1, !tbaa !66
  %conv164 = zext i8 %194 to i32
  %sub165 = sub nsw i32 %conv163, %conv164
  store i32 %sub165, i32* %__result141, align 4, !tbaa !5
  %195 = load i64, i64* %__s2_len130, align 8, !tbaa !68
  %cmp166 = icmp ugt i64 %195, 2
  br i1 %cmp166, label %land.lhs.true.168, label %if.end.176

land.lhs.true.168:                                ; preds = %if.then.161
  %196 = load i32, i32* %__result141, align 4, !tbaa !5
  %cmp169 = icmp eq i32 %196, 0
  br i1 %cmp169, label %if.then.171, label %if.end.176

if.then.171:                                      ; preds = %land.lhs.true.168
  %197 = load i8*, i8** %__s1138, align 8, !tbaa !1
  %arrayidx172 = getelementptr inbounds i8, i8* %197, i64 3
  %198 = load i8, i8* %arrayidx172, align 1, !tbaa !66
  %conv173 = zext i8 %198 to i32
  %199 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 3), align 1, !tbaa !66
  %conv174 = zext i8 %199 to i32
  %sub175 = sub nsw i32 %conv173, %conv174
  store i32 %sub175, i32* %__result141, align 4, !tbaa !5
  br label %if.end.176

if.end.176:                                       ; preds = %if.then.171, %land.lhs.true.168, %if.then.161
  br label %if.end.177

if.end.177:                                       ; preds = %if.end.176, %land.lhs.true.158, %if.then.151
  br label %if.end.178

if.end.178:                                       ; preds = %if.end.177, %land.lhs.true.148, %cond.true.136
  %200 = load i32, i32* %__result141, align 4, !tbaa !5
  store i32 %200, i32* %tmp179, !tbaa !5
  %201 = bitcast i32* %__result141 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %201) #2
  %202 = bitcast i8** %__s1138 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %202) #2
  %203 = load i32, i32* %tmp179, !tbaa !5
  br label %cond.end.183

cond.false.180:                                   ; preds = %land.lhs.true.132, %lor.lhs.false
  %204 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname181 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %204, i32 0, i32 2
  %205 = load i8*, i8** %dname181, align 8, !tbaa !247
  %call182 = call i32 @strcmp(i8* %205, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0)) #8
  br label %cond.end.183

cond.end.183:                                     ; preds = %cond.false.180, %if.end.178
  %cond184 = phi i32 [ %203, %if.end.178 ], [ %call182, %cond.false.180 ]
  store i32 %cond184, i32* %tmp131, !tbaa !5
  %206 = bitcast i64* %__s2_len130 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %206) #2
  %207 = bitcast i64* %__s1_len128 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %207) #2
  %208 = load i32, i32* %tmp131, !tbaa !5
  %cmp185 = icmp eq i32 %208, 0
  br i1 %cmp185, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end.183
  %209 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs187 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %209, i32 0, i32 42
  %dev_spec_op = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs187, i32 0, i32 65
  %210 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op, align 8, !tbaa !248
  %211 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call188 = call i32 %210(%struct.gx_device_s* %211, i32 11, i8* null, i32 0) #7
  %tobool = icmp ne i32 %call188, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end.183, %cond.end
  %212 = phi i1 [ true, %cond.end.183 ], [ true, %cond.end ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %212 to i32
  store i32 %lor.ext, i32* %sep_target, align 4, !tbaa !5
  %213 = load i32, i32* %sep_target, align 4, !tbaa !5
  %tobool189 = icmp ne i32 %213, 0
  br i1 %tobool189, label %if.end.199, label %if.then.190

if.then.190:                                      ; preds = %lor.end
  %214 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %215 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params191 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %215, i32 0, i32 5
  %group_color = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params191, i32 0, i32 28
  %216 = load i32, i32* %group_color, align 4, !tbaa !560
  %217 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params192 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %217, i32 0, i32 5
  %icc_hash = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params192, i32 0, i32 29
  %218 = load i64, i64* %icc_hash, align 8, !tbaa !561
  %219 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %220 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params193 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %220, i32 0, i32 5
  %iccprofile = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params193, i32 0, i32 30
  %221 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile, align 8, !tbaa !562
  %call194 = call i32 @pdf14_update_device_color_procs_push_c(%struct.gx_device_s* %214, i32 %216, i64 %218, %struct.gs_imager_state_s* %219, %struct.cmm_profile_s* %221) #7
  store i32 %call194, i32* %code, align 4, !tbaa !5
  %222 = load i32, i32* %code, align 4, !tbaa !5
  %cmp195 = icmp slt i32 %222, 0
  br i1 %cmp195, label %if.then.197, label %if.end.198

if.then.197:                                      ; preds = %if.then.190
  %223 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %223, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.198:                                       ; preds = %if.then.190
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198, %lor.end
  br label %sw.epilog

sw.bb.200:                                        ; preds = %if.then
  %224 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %225 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_push_parent_color(%struct.gx_device_s* %224, %struct.gs_imager_state_s* %225) #7
  %226 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %227 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params201 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %227, i32 0, i32 5
  %group_color202 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params201, i32 0, i32 28
  %228 = load i32, i32* %group_color202, align 4, !tbaa !560
  %229 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params203 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %229, i32 0, i32 5
  %icc_hash204 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params203, i32 0, i32 29
  %230 = load i64, i64* %icc_hash204, align 8, !tbaa !561
  %231 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %232 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params205 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %232, i32 0, i32 5
  %iccprofile206 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params205, i32 0, i32 30
  %233 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %iccprofile206, align 8, !tbaa !562
  %call207 = call i32 @pdf14_update_device_color_procs_push_c(%struct.gx_device_s* %226, i32 %228, i64 %230, %struct.gs_imager_state_s* %231, %struct.cmm_profile_s* %233) #7
  store i32 %call207, i32* %code, align 4, !tbaa !5
  %234 = load i32, i32* %code, align 4, !tbaa !5
  %cmp208 = icmp slt i32 %234, 0
  br i1 %cmp208, label %if.then.210, label %if.end.211

if.then.210:                                      ; preds = %sw.bb.200
  %235 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %235, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.211:                                       ; preds = %sw.bb.200
  br label %sw.epilog

sw.bb.212:                                        ; preds = %if.then
  %236 = bitcast i64* %__s1_len214 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %236) #2
  %237 = bitcast i64* %__s2_len216 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %237) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 1) to i64), i64 ptrtoint ([17 x i8]* @.str.18 to i64)), i64 1), label %land.lhs.true.218, label %cond.false.266

land.lhs.true.218:                                ; preds = %sw.bb.212
  %call219 = call i64 @strlen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0)) #10
  store i64 %call219, i64* %__s2_len216, align 8, !tbaa !68
  %238 = load i64, i64* %__s2_len216, align 8, !tbaa !68
  %cmp220 = icmp ult i64 %238, 4
  br i1 %cmp220, label %cond.true.222, label %cond.false.266

cond.true.222:                                    ; preds = %land.lhs.true.218
  %239 = bitcast i8** %__s1224 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %239) #2
  %240 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname225 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %240, i32 0, i32 2
  %241 = load i8*, i8** %dname225, align 8, !tbaa !247
  store i8* %241, i8** %__s1224, align 8, !tbaa !1
  %242 = bitcast i32* %__result227 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %242) #2
  %243 = load i8*, i8** %__s1224, align 8, !tbaa !1
  %arrayidx228 = getelementptr inbounds i8, i8* %243, i64 0
  %244 = load i8, i8* %arrayidx228, align 1, !tbaa !66
  %conv229 = zext i8 %244 to i32
  %245 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), align 1, !tbaa !66
  %conv230 = zext i8 %245 to i32
  %sub231 = sub nsw i32 %conv229, %conv230
  store i32 %sub231, i32* %__result227, align 4, !tbaa !5
  %246 = load i64, i64* %__s2_len216, align 8, !tbaa !68
  %cmp232 = icmp ugt i64 %246, 0
  br i1 %cmp232, label %land.lhs.true.234, label %if.end.264

land.lhs.true.234:                                ; preds = %cond.true.222
  %247 = load i32, i32* %__result227, align 4, !tbaa !5
  %cmp235 = icmp eq i32 %247, 0
  br i1 %cmp235, label %if.then.237, label %if.end.264

if.then.237:                                      ; preds = %land.lhs.true.234
  %248 = load i8*, i8** %__s1224, align 8, !tbaa !1
  %arrayidx238 = getelementptr inbounds i8, i8* %248, i64 1
  %249 = load i8, i8* %arrayidx238, align 1, !tbaa !66
  %conv239 = zext i8 %249 to i32
  %250 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 1), align 1, !tbaa !66
  %conv240 = zext i8 %250 to i32
  %sub241 = sub nsw i32 %conv239, %conv240
  store i32 %sub241, i32* %__result227, align 4, !tbaa !5
  %251 = load i64, i64* %__s2_len216, align 8, !tbaa !68
  %cmp242 = icmp ugt i64 %251, 1
  br i1 %cmp242, label %land.lhs.true.244, label %if.end.263

land.lhs.true.244:                                ; preds = %if.then.237
  %252 = load i32, i32* %__result227, align 4, !tbaa !5
  %cmp245 = icmp eq i32 %252, 0
  br i1 %cmp245, label %if.then.247, label %if.end.263

if.then.247:                                      ; preds = %land.lhs.true.244
  %253 = load i8*, i8** %__s1224, align 8, !tbaa !1
  %arrayidx248 = getelementptr inbounds i8, i8* %253, i64 2
  %254 = load i8, i8* %arrayidx248, align 1, !tbaa !66
  %conv249 = zext i8 %254 to i32
  %255 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 2), align 1, !tbaa !66
  %conv250 = zext i8 %255 to i32
  %sub251 = sub nsw i32 %conv249, %conv250
  store i32 %sub251, i32* %__result227, align 4, !tbaa !5
  %256 = load i64, i64* %__s2_len216, align 8, !tbaa !68
  %cmp252 = icmp ugt i64 %256, 2
  br i1 %cmp252, label %land.lhs.true.254, label %if.end.262

land.lhs.true.254:                                ; preds = %if.then.247
  %257 = load i32, i32* %__result227, align 4, !tbaa !5
  %cmp255 = icmp eq i32 %257, 0
  br i1 %cmp255, label %if.then.257, label %if.end.262

if.then.257:                                      ; preds = %land.lhs.true.254
  %258 = load i8*, i8** %__s1224, align 8, !tbaa !1
  %arrayidx258 = getelementptr inbounds i8, i8* %258, i64 3
  %259 = load i8, i8* %arrayidx258, align 1, !tbaa !66
  %conv259 = zext i8 %259 to i32
  %260 = load i8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i64 3), align 1, !tbaa !66
  %conv260 = zext i8 %260 to i32
  %sub261 = sub nsw i32 %conv259, %conv260
  store i32 %sub261, i32* %__result227, align 4, !tbaa !5
  br label %if.end.262

if.end.262:                                       ; preds = %if.then.257, %land.lhs.true.254, %if.then.247
  br label %if.end.263

if.end.263:                                       ; preds = %if.end.262, %land.lhs.true.244, %if.then.237
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %land.lhs.true.234, %cond.true.222
  %261 = load i32, i32* %__result227, align 4, !tbaa !5
  store i32 %261, i32* %tmp265, !tbaa !5
  %262 = bitcast i32* %__result227 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %262) #2
  %263 = bitcast i8** %__s1224 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %263) #2
  %264 = load i32, i32* %tmp265, !tbaa !5
  br label %cond.end.269

cond.false.266:                                   ; preds = %land.lhs.true.218, %sw.bb.212
  %265 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname267 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %265, i32 0, i32 2
  %266 = load i8*, i8** %dname267, align 8, !tbaa !247
  %call268 = call i32 @strcmp(i8* %266, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0)) #8
  br label %cond.end.269

cond.end.269:                                     ; preds = %cond.false.266, %if.end.264
  %cond270 = phi i32 [ %264, %if.end.264 ], [ %call268, %cond.false.266 ]
  store i32 %cond270, i32* %tmp217, !tbaa !5
  %267 = bitcast i64* %__s2_len216 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %267) #2
  %268 = bitcast i64* %__s1_len214 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %268) #2
  %269 = load i32, i32* %tmp217, !tbaa !5
  %cmp271 = icmp eq i32 %269, 0
  br i1 %cmp271, label %lor.end.339, label %lor.lhs.false.273

lor.lhs.false.273:                                ; preds = %cond.end.269
  %270 = bitcast i64* %__s1_len275 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %270) #2
  %271 = bitcast i64* %__s2_len277 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %271) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 1) to i64), i64 ptrtoint ([19 x i8]* @.str.17 to i64)), i64 1), label %land.lhs.true.279, label %cond.false.327

land.lhs.true.279:                                ; preds = %lor.lhs.false.273
  %call280 = call i64 @strlen(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0)) #10
  store i64 %call280, i64* %__s2_len277, align 8, !tbaa !68
  %272 = load i64, i64* %__s2_len277, align 8, !tbaa !68
  %cmp281 = icmp ult i64 %272, 4
  br i1 %cmp281, label %cond.true.283, label %cond.false.327

cond.true.283:                                    ; preds = %land.lhs.true.279
  %273 = bitcast i8** %__s1285 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %273) #2
  %274 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname286 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %274, i32 0, i32 2
  %275 = load i8*, i8** %dname286, align 8, !tbaa !247
  store i8* %275, i8** %__s1285, align 8, !tbaa !1
  %276 = bitcast i32* %__result288 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %276) #2
  %277 = load i8*, i8** %__s1285, align 8, !tbaa !1
  %arrayidx289 = getelementptr inbounds i8, i8* %277, i64 0
  %278 = load i8, i8* %arrayidx289, align 1, !tbaa !66
  %conv290 = zext i8 %278 to i32
  %279 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0), align 1, !tbaa !66
  %conv291 = zext i8 %279 to i32
  %sub292 = sub nsw i32 %conv290, %conv291
  store i32 %sub292, i32* %__result288, align 4, !tbaa !5
  %280 = load i64, i64* %__s2_len277, align 8, !tbaa !68
  %cmp293 = icmp ugt i64 %280, 0
  br i1 %cmp293, label %land.lhs.true.295, label %if.end.325

land.lhs.true.295:                                ; preds = %cond.true.283
  %281 = load i32, i32* %__result288, align 4, !tbaa !5
  %cmp296 = icmp eq i32 %281, 0
  br i1 %cmp296, label %if.then.298, label %if.end.325

if.then.298:                                      ; preds = %land.lhs.true.295
  %282 = load i8*, i8** %__s1285, align 8, !tbaa !1
  %arrayidx299 = getelementptr inbounds i8, i8* %282, i64 1
  %283 = load i8, i8* %arrayidx299, align 1, !tbaa !66
  %conv300 = zext i8 %283 to i32
  %284 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 1), align 1, !tbaa !66
  %conv301 = zext i8 %284 to i32
  %sub302 = sub nsw i32 %conv300, %conv301
  store i32 %sub302, i32* %__result288, align 4, !tbaa !5
  %285 = load i64, i64* %__s2_len277, align 8, !tbaa !68
  %cmp303 = icmp ugt i64 %285, 1
  br i1 %cmp303, label %land.lhs.true.305, label %if.end.324

land.lhs.true.305:                                ; preds = %if.then.298
  %286 = load i32, i32* %__result288, align 4, !tbaa !5
  %cmp306 = icmp eq i32 %286, 0
  br i1 %cmp306, label %if.then.308, label %if.end.324

if.then.308:                                      ; preds = %land.lhs.true.305
  %287 = load i8*, i8** %__s1285, align 8, !tbaa !1
  %arrayidx309 = getelementptr inbounds i8, i8* %287, i64 2
  %288 = load i8, i8* %arrayidx309, align 1, !tbaa !66
  %conv310 = zext i8 %288 to i32
  %289 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 2), align 1, !tbaa !66
  %conv311 = zext i8 %289 to i32
  %sub312 = sub nsw i32 %conv310, %conv311
  store i32 %sub312, i32* %__result288, align 4, !tbaa !5
  %290 = load i64, i64* %__s2_len277, align 8, !tbaa !68
  %cmp313 = icmp ugt i64 %290, 2
  br i1 %cmp313, label %land.lhs.true.315, label %if.end.323

land.lhs.true.315:                                ; preds = %if.then.308
  %291 = load i32, i32* %__result288, align 4, !tbaa !5
  %cmp316 = icmp eq i32 %291, 0
  br i1 %cmp316, label %if.then.318, label %if.end.323

if.then.318:                                      ; preds = %land.lhs.true.315
  %292 = load i8*, i8** %__s1285, align 8, !tbaa !1
  %arrayidx319 = getelementptr inbounds i8, i8* %292, i64 3
  %293 = load i8, i8* %arrayidx319, align 1, !tbaa !66
  %conv320 = zext i8 %293 to i32
  %294 = load i8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i64 3), align 1, !tbaa !66
  %conv321 = zext i8 %294 to i32
  %sub322 = sub nsw i32 %conv320, %conv321
  store i32 %sub322, i32* %__result288, align 4, !tbaa !5
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.318, %land.lhs.true.315, %if.then.308
  br label %if.end.324

if.end.324:                                       ; preds = %if.end.323, %land.lhs.true.305, %if.then.298
  br label %if.end.325

if.end.325:                                       ; preds = %if.end.324, %land.lhs.true.295, %cond.true.283
  %295 = load i32, i32* %__result288, align 4, !tbaa !5
  store i32 %295, i32* %tmp326, !tbaa !5
  %296 = bitcast i32* %__result288 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %296) #2
  %297 = bitcast i8** %__s1285 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %297) #2
  %298 = load i32, i32* %tmp326, !tbaa !5
  br label %cond.end.330

cond.false.327:                                   ; preds = %land.lhs.true.279, %lor.lhs.false.273
  %299 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %dname328 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %299, i32 0, i32 2
  %300 = load i8*, i8** %dname328, align 8, !tbaa !247
  %call329 = call i32 @strcmp(i8* %300, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0)) #8
  br label %cond.end.330

cond.end.330:                                     ; preds = %cond.false.327, %if.end.325
  %cond331 = phi i32 [ %298, %if.end.325 ], [ %call329, %cond.false.327 ]
  store i32 %cond331, i32* %tmp278, !tbaa !5
  %301 = bitcast i64* %__s2_len277 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %301) #2
  %302 = bitcast i64* %__s1_len275 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %302) #2
  %303 = load i32, i32* %tmp278, !tbaa !5
  %cmp332 = icmp eq i32 %303, 0
  br i1 %cmp332, label %lor.end.339, label %lor.rhs.334

lor.rhs.334:                                      ; preds = %cond.end.330
  %304 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs335 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %304, i32 0, i32 42
  %dev_spec_op336 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs335, i32 0, i32 65
  %305 = load i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)** %dev_spec_op336, align 8, !tbaa !248
  %306 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call337 = call i32 %305(%struct.gx_device_s* %306, i32 11, i8* null, i32 0) #7
  %tobool338 = icmp ne i32 %call337, 0
  br label %lor.end.339

lor.end.339:                                      ; preds = %lor.rhs.334, %cond.end.330, %cond.end.269
  %307 = phi i1 [ true, %cond.end.330 ], [ true, %cond.end.269 ], [ %tobool338, %lor.rhs.334 ]
  %lor.ext340 = zext i1 %307 to i32
  store i32 %lor.ext340, i32* %sep_target, align 4, !tbaa !5
  %308 = load i32, i32* %sep_target, align 4, !tbaa !5
  %tobool341 = icmp ne i32 %308, 0
  br i1 %tobool341, label %if.end.348, label %if.then.342

if.then.342:                                      ; preds = %lor.end.339
  %309 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %310 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call343 = call i32 @pdf14_update_device_color_procs_pop_c(%struct.gx_device_s* %309, %struct.gs_imager_state_s* %310) #7
  store i32 %call343, i32* %code, align 4, !tbaa !5
  %311 = load i32, i32* %code, align 4, !tbaa !5
  %cmp344 = icmp slt i32 %311, 0
  br i1 %cmp344, label %if.then.346, label %if.end.347

if.then.346:                                      ; preds = %if.then.342
  %312 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %312, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.347:                                       ; preds = %if.then.342
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %lor.end.339
  %313 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %314 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_pop_parent_color(%struct.gx_device_s* %313, %struct.gs_imager_state_s* %314) #7
  br label %sw.epilog

sw.bb.349:                                        ; preds = %if.then
  %315 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %316 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call350 = call i32 @pdf14_update_device_color_procs_pop_c(%struct.gx_device_s* %315, %struct.gs_imager_state_s* %316) #7
  store i32 %call350, i32* %code, align 4, !tbaa !5
  %317 = load i32, i32* %code, align 4, !tbaa !5
  %cmp351 = icmp slt i32 %317, 0
  br i1 %cmp351, label %if.then.353, label %if.end.354

if.then.353:                                      ; preds = %sw.bb.349
  %318 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %318, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

if.end.354:                                       ; preds = %sw.bb.349
  %319 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %320 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  call void @pdf14_pop_parent_color(%struct.gx_device_s* %319, %struct.gs_imager_state_s* %320) #7
  br label %sw.epilog

sw.bb.355:                                        ; preds = %if.then
  %321 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %322 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call356 = call i32 @pdf14_increment_smask_color(%struct.gs_imager_state_s* %321, %struct.gx_device_s* %322) #7
  store i32 %call356, i32* %code, align 4, !tbaa !5
  %323 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %324 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %323, %struct.gx_device_s** %324, align 8, !tbaa !1
  %325 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %325, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

sw.bb.357:                                        ; preds = %if.then
  %326 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %327 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call358 = call i32 @pdf14_decrement_smask_color(%struct.gs_imager_state_s* %326, %struct.gx_device_s* %327) #7
  store i32 %call358, i32* %code, align 4, !tbaa !5
  %328 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %329 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %328, %struct.gx_device_s** %329, align 8, !tbaa !1
  %330 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %330, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

sw.bb.359:                                        ; preds = %if.then
  %331 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %332 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %333 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params360 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %333, i32 0, i32 5
  %call361 = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %331, %struct.gs_imager_state_s* %332, i32 0, %struct.gs_pdf14trans_params_s* %params360) #7
  store i32 %call361, i32* %code, align 4, !tbaa !5
  %334 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %335 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %334, %struct.gx_device_s** %335, align 8, !tbaa !1
  %336 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %336, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then, %if.then, %if.then, %if.end.354, %if.end.348, %if.end.211, %if.end.199, %if.end.68
  br label %if.end.362

if.end.362:                                       ; preds = %sw.epilog, %entry
  %337 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target363 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %337, i32 0, i32 43
  %338 = load %struct.gx_device_s*, %struct.gx_device_s** %target363, align 8, !tbaa !82
  %procs364 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %338, i32 0, i32 42
  %create_compositor365 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs364, i32 0, i32 40
  %339 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor365, align 8, !tbaa !69
  %340 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target366 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %340, i32 0, i32 43
  %341 = load %struct.gx_device_s*, %struct.gx_device_s** %target366, align 8, !tbaa !82
  %342 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %343 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %344 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %345 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %346 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call367 = call i32 %339(%struct.gx_device_s* %341, %struct.gx_device_s** %342, %struct.gs_composite_s* %343, %struct.gs_imager_state_s* %344, %struct.gs_memory_s* %345, %struct.gx_device_s* %346) #7
  store i32 %call367, i32* %code, align 4, !tbaa !5
  %347 = load i32, i32* %is_pdf14_compositor, align 4, !tbaa !5
  %tobool368 = icmp ne i32 %347, 0
  br i1 %tobool368, label %land.lhs.true.369, label %if.end.489

land.lhs.true.369:                                ; preds = %if.end.362
  %348 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params370 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %348, i32 0, i32 5
  %pdf14_op371 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params370, i32 0, i32 0
  %349 = load i32, i32* %pdf14_op371, align 4, !tbaa !83
  %cmp372 = icmp eq i32 %349, 1
  br i1 %cmp372, label %land.lhs.true.374, label %if.end.489

land.lhs.true.374:                                ; preds = %land.lhs.true.369
  %350 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target375 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %350, i32 0, i32 43
  %351 = load %struct.gx_device_s*, %struct.gx_device_s** %target375, align 8, !tbaa !82
  %stype = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %351, i32 0, i32 4
  %352 = load %struct.gs_memory_struct_type_s*, %struct.gs_memory_struct_type_s** %stype, align 8, !tbaa !563
  %cmp376 = icmp eq %struct.gs_memory_struct_type_s* %352, @st_pdf14_accum
  br i1 %cmp376, label %if.then.378, label %if.end.489

if.then.378:                                      ; preds = %land.lhs.true.374
  %353 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %353) #2
  %354 = bitcast i32* %rows_used to i8*
  call void @llvm.lifetime.start(i64 4, i8* %354) #2
  %355 = bitcast i8** %linebuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %355) #2
  %356 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs382 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %356, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs382, i32 0, i32 7
  %357 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %358 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %359 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %360 = bitcast %struct.pdf14_device_s* %359 to %struct.gx_device_s*
  %call383 = call i32 @gx_device_raster(%struct.gx_device_s* %360, i32 1) #7
  %call384 = call i8* %357(%struct.gs_memory_s* %358, i32 %call383, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.67, i32 0, i32 0)) #7
  store i8* %call384, i8** %linebuf, align 8, !tbaa !1
  %361 = bitcast i8** %actual_data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %361) #2
  %362 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %362) #2
  %363 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target387 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %363, i32 0, i32 43
  %364 = load %struct.gx_device_s*, %struct.gx_device_s** %target387, align 8, !tbaa !82
  store %struct.gx_device_s* %364, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %365 = bitcast %struct.gx_device_s** %target389 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %365) #2
  %366 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %367 = bitcast %struct.gx_device_s* %366 to %struct.gx_device_pdf14_accum_s*
  %save_p14dev = getelementptr inbounds %struct.gx_device_pdf14_accum_s, %struct.gx_device_pdf14_accum_s* %367, i32 0, i32 68
  %368 = load %struct.gx_device_s*, %struct.gx_device_s** %save_p14dev, align 8, !tbaa !531
  %369 = bitcast %struct.gx_device_s* %368 to %struct.pdf14_device_s*
  %target390 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %369, i32 0, i32 43
  %370 = load %struct.gx_device_s*, %struct.gx_device_s** %target390, align 8, !tbaa !82
  store %struct.gx_device_s* %370, %struct.gx_device_s** %target389, align 8, !tbaa !1
  %371 = bitcast %struct.gs_image1_s* %image to i8*
  call void @llvm.lifetime.start(i64 600, i8* %371) #2
  %372 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %372) #2
  %373 = bitcast %struct.gx_image_enum_common_s** %info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %373) #2
  %374 = bitcast %struct.gx_image_plane_s* %planes to i8*
  call void @llvm.lifetime.start(i64 16, i8* %374) #2
  %375 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %375) #2
  %376 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %376) #2
  %377 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %377, i32 0, i32 1
  %378 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %call397 = call i32 @gs_cspace_build_ICC(%struct.gs_color_space_s** %pcs, i8* null, %struct.gs_memory_s* %378) #7
  store i32 %call397, i32* %code, align 4, !tbaa !5
  %379 = load i8*, i8** %linebuf, align 8, !tbaa !1
  %cmp398 = icmp eq i8* %379, null
  br i1 %cmp398, label %if.then.403, label %lor.lhs.false.400

lor.lhs.false.400:                                ; preds = %if.then.378
  %380 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmp401 = icmp eq %struct.gs_color_space_s* %380, null
  br i1 %cmp401, label %if.then.403, label %if.end.404

if.then.403:                                      ; preds = %lor.lhs.false.400, %if.then.378
  br label %put_accum_error

if.end.404:                                       ; preds = %lor.lhs.false.400
  %381 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs405 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %381, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs405, i32 0, i32 67
  %382 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %383 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call406 = call i32 %382(%struct.gx_device_s* %383, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call406, i32* %code, align 4, !tbaa !5
  %384 = load i32, i32* %code, align 4, !tbaa !5
  %cmp407 = icmp slt i32 %384, 0
  br i1 %cmp407, label %if.then.409, label %if.end.410

if.then.409:                                      ; preds = %if.end.404
  %385 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @rc_decrement_only_cs(%struct.gs_color_space_s* %385, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %386 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %386, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.410:                                       ; preds = %if.end.404
  %387 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  %388 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %388, i32 0, i32 6
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %387, %struct.cmm_profile_s** %cmm_icc_profile_data, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body

do.body:                                          ; preds = %if.end.410
  %389 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data411 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %389, i32 0, i32 6
  %390 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data411, align 8, !tbaa !471
  %tobool412 = icmp ne %struct.cmm_profile_s* %390, null
  br i1 %tobool412, label %if.then.413, label %if.end.419

if.then.413:                                      ; preds = %do.body
  br label %do.body.414

do.body.414:                                      ; preds = %if.then.413
  %391 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data415 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %391, i32 0, i32 6
  %392 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %cmm_icc_profile_data415, align 8, !tbaa !471
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %392, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %393 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %393, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.416

do.body.416:                                      ; preds = %do.body.414
  br label %do.cond

do.cond:                                          ; preds = %do.body.416
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.cond.417

do.cond.417:                                      ; preds = %do.end
  br label %do.end.418

do.end.418:                                       ; preds = %do.cond.417
  br label %if.end.419

if.end.419:                                       ; preds = %do.end.418, %do.body
  br label %do.cond.420

do.cond.420:                                      ; preds = %if.end.419
  br label %do.end.421

do.end.421:                                       ; preds = %do.cond.420
  %394 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %cmm_icc_profile_data422 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %394, i32 0, i32 6
  call void @gscms_set_icc_range(%struct.cmm_profile_s** %cmm_icc_profile_data422) #7
  %395 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @gs_image_t_init_adjust(%struct.gs_image1_s* %image, %struct.gs_color_space_s* %395, i32 0) #7
  %396 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %396, i32 0, i32 13
  %397 = load i32, i32* %width, align 4, !tbaa !30
  %conv423 = sitofp i32 %397 to float
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 1
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %ImageMatrix, i32 0, i32 0
  store float %conv423, float* %xx, align 4, !tbaa !509
  %398 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %398, i32 0, i32 14
  %399 = load i32, i32* %height, align 4, !tbaa !32
  %conv424 = sitofp i32 %399 to float
  %ImageMatrix425 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 1
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %ImageMatrix425, i32 0, i32 3
  store float %conv424, float* %yy, align 4, !tbaa !510
  %400 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width426 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %400, i32 0, i32 13
  %401 = load i32, i32* %width426, align 4, !tbaa !30
  %Width = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 2
  store i32 %401, i32* %Width, align 4, !tbaa !414
  %402 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height427 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %402, i32 0, i32 14
  %403 = load i32, i32* %height427, align 4, !tbaa !32
  %Height = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 3
  store i32 %403, i32* %Height, align 4, !tbaa !416
  %BitsPerComponent = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %image, i32 0, i32 4
  store i32 8, i32* %BitsPerComponent, align 4, !tbaa !511
  %404 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %width428 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %404, i32 0, i32 13
  %405 = load i32, i32* %width428, align 4, !tbaa !30
  %conv429 = sitofp i32 %405 to float
  %406 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %406, i32 0, i32 5
  %407 = bitcast %struct.gs_matrix_fixed_s* %ctm to %struct.gs_matrix_s*
  %xx430 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %407, i32 0, i32 0
  store float %conv429, float* %xx430, align 4, !tbaa !512
  %408 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm431 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %408, i32 0, i32 5
  %409 = bitcast %struct.gs_matrix_fixed_s* %ctm431 to %struct.gs_matrix_s*
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %409, i32 0, i32 1
  store float 0.000000e+00, float* %xy, align 4, !tbaa !513
  %410 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm432 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %410, i32 0, i32 5
  %411 = bitcast %struct.gs_matrix_fixed_s* %ctm432 to %struct.gs_matrix_s*
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %411, i32 0, i32 2
  store float 0.000000e+00, float* %yx, align 4, !tbaa !514
  %412 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %height433 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %412, i32 0, i32 14
  %413 = load i32, i32* %height433, align 4, !tbaa !32
  %conv434 = sitofp i32 %413 to float
  %414 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm435 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %414, i32 0, i32 5
  %415 = bitcast %struct.gs_matrix_fixed_s* %ctm435 to %struct.gs_matrix_s*
  %yy436 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %415, i32 0, i32 3
  store float %conv434, float* %yy436, align 4, !tbaa !515
  %416 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm437 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %416, i32 0, i32 5
  %417 = bitcast %struct.gs_matrix_fixed_s* %ctm437 to %struct.gs_matrix_s*
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %417, i32 0, i32 4
  store float 0.000000e+00, float* %tx, align 4, !tbaa !137
  %418 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm438 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %418, i32 0, i32 5
  %419 = bitcast %struct.gs_matrix_fixed_s* %ctm438 to %struct.gs_matrix_s*
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %419, i32 0, i32 5
  store float 0.000000e+00, float* %ty, align 4, !tbaa !138
  %420 = load %struct.gx_device_s*, %struct.gx_device_s** %target389, align 8, !tbaa !1
  %procs439 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %420, i32 0, i32 42
  %begin_typed_image = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs439, i32 0, i32 37
  %421 = load i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)** %begin_typed_image, align 8, !tbaa !516
  %422 = load %struct.gx_device_s*, %struct.gx_device_s** %target389, align 8, !tbaa !1
  %423 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %424 = bitcast %struct.gs_image1_s* %image to %struct.gs_image_common_s*
  %425 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory440 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %425, i32 0, i32 1
  %426 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory440, align 8, !tbaa !165
  %call441 = call i32 %421(%struct.gx_device_s* %422, %struct.gs_imager_state_s* %423, %struct.gs_matrix_s* null, %struct.gs_image_common_s* %424, %struct.gs_int_rect_s* null, %struct.gx_device_color_s* null, %struct.gx_clip_path_s* null, %struct.gs_memory_s* %426, %struct.gx_image_enum_common_s** %info) #7
  store i32 %call441, i32* %code, align 4, !tbaa !5
  %427 = load i32, i32* %code, align 4, !tbaa !5
  %cmp442 = icmp slt i32 %427, 0
  br i1 %cmp442, label %if.then.444, label %if.end.445

if.then.444:                                      ; preds = %do.end.421
  br label %put_accum_error

if.end.445:                                       ; preds = %do.end.421
  store i32 0, i32* %y, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.445
  %428 = load i32, i32* %y, align 4, !tbaa !5
  %429 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %height446 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %429, i32 0, i32 14
  %430 = load i32, i32* %height446, align 4, !tbaa !194
  %cmp447 = icmp slt i32 %428, %430
  br i1 %cmp447, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %431 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs449 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %431, i32 0, i32 42
  %get_bits = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs449, i32 0, i32 12
  %432 = load i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)** %get_bits, align 8, !tbaa !564
  %433 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %434 = load i32, i32* %y, align 4, !tbaa !5
  %435 = load i8*, i8** %linebuf, align 8, !tbaa !1
  %call450 = call i32 %432(%struct.gx_device_s* %433, i32 %434, i8* %435, i8** %actual_data) #7
  store i32 %call450, i32* %code, align 4, !tbaa !5
  %436 = load i8*, i8** %actual_data, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 0
  store i8* %436, i8** %data, align 8, !tbaa !517
  %data_x = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 1
  store i32 0, i32* %data_x, align 4, !tbaa !519
  %437 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %width451 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %437, i32 0, i32 13
  %438 = load i32, i32* %width451, align 4, !tbaa !193
  %439 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %color_info452 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %439, i32 0, i32 11
  %num_components453 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info452, i32 0, i32 1
  %440 = load i32, i32* %num_components453, align 4, !tbaa !195
  %mul = mul nsw i32 %438, %440
  %raster = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %planes, i32 0, i32 2
  store i32 %mul, i32* %raster, align 4, !tbaa !520
  %441 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %procs454 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %441, i32 0, i32 1
  %442 = load %struct.gx_image_enum_procs_s*, %struct.gx_image_enum_procs_s** %procs454, align 8, !tbaa !521
  %plane_data = getelementptr inbounds %struct.gx_image_enum_procs_s, %struct.gx_image_enum_procs_s* %442, i32 0, i32 0
  %443 = load i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)** %plane_data, align 8, !tbaa !523
  %444 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %call455 = call i32 %443(%struct.gx_image_enum_common_s* %444, %struct.gx_image_plane_s* %planes, i32 1, i32* %rows_used) #7
  store i32 %call455, i32* %code, align 4, !tbaa !5
  %cmp456 = icmp slt i32 %call455, 0
  br i1 %cmp456, label %if.then.458, label %if.end.459

if.then.458:                                      ; preds = %for.body
  br label %put_accum_error

if.end.459:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.459
  %445 = load i32, i32* %y, align 4, !tbaa !5
  %inc460 = add nsw i32 %445, 1
  store i32 %inc460, i32* %y, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %446 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %procs461 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %446, i32 0, i32 1
  %447 = load %struct.gx_image_enum_procs_s*, %struct.gx_image_enum_procs_s** %procs461, align 8, !tbaa !521
  %end_image = getelementptr inbounds %struct.gx_image_enum_procs_s, %struct.gx_image_enum_procs_s* %447, i32 0, i32 1
  %448 = load i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*, i32)** %end_image, align 8, !tbaa !525
  %449 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info, align 8, !tbaa !1
  %call462 = call i32 %448(%struct.gx_image_enum_common_s* %449, i32 1) #7
  br label %put_accum_error

put_accum_error:                                  ; preds = %for.end, %if.then.458, %if.then.444, %if.then.403
  %450 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory463 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %450, i32 0, i32 3
  %451 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory463, align 8, !tbaa !225
  %procs464 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %451, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs464, i32 0, i32 2
  %452 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %453 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %memory465 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %453, i32 0, i32 3
  %454 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory465, align 8, !tbaa !225
  %455 = load i8*, i8** %linebuf, align 8, !tbaa !1
  call void %452(%struct.gs_memory_s* %454, i8* %455, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %456 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  call void @rc_decrement_only_cs(%struct.gs_color_space_s* %456, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.pdf14_put_image, i32 0, i32 0)) #7
  %457 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs466 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %457, i32 0, i32 42
  %close_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs466, i32 0, i32 4
  %458 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %close_device, align 8, !tbaa !62
  %459 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %call467 = call i32 %458(%struct.gx_device_s* %459) #7
  %460 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %461 = bitcast %struct.pdf14_device_s* %460 to %struct.gx_device_forward_s*
  %462 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target468 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %462, i32 0, i32 43
  %463 = load %struct.gx_device_s*, %struct.gx_device_s** %target468, align 8, !tbaa !82
  %464 = bitcast %struct.gx_device_s* %463 to %struct.gx_device_pdf14_accum_s*
  %save_p14dev469 = getelementptr inbounds %struct.gx_device_pdf14_accum_s, %struct.gx_device_pdf14_accum_s* %464, i32 0, i32 68
  %465 = load %struct.gx_device_s*, %struct.gx_device_s** %save_p14dev469, align 8, !tbaa !531
  call void @gx_device_set_target(%struct.gx_device_forward_s* %461, %struct.gx_device_s* %465) #7
  %466 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target470 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %466, i32 0, i32 43
  %467 = load %struct.gx_device_s*, %struct.gx_device_s** %target470, align 8, !tbaa !82
  %468 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %468, i32 0, i32 58
  store %struct.gx_device_s* %467, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %469 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target471 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %469, i32 0, i32 43
  %470 = load %struct.gx_device_s*, %struct.gx_device_s** %target471, align 8, !tbaa !82
  %471 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %470, %struct.gx_device_s** %471, align 8, !tbaa !1
  %472 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info472 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %472, i32 0, i32 11
  %473 = load %struct.gx_device_s*, %struct.gx_device_s** %target389, align 8, !tbaa !1
  %color_info473 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %473, i32 0, i32 11
  %474 = bitcast %struct.gx_device_color_info_s* %color_info472 to i8*
  %475 = bitcast %struct.gx_device_color_info_s* %color_info473 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %474, i8* %475, i64 720, i32 8, i1 false), !tbaa.struct !65
  %476 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %memory474 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %476, i32 0, i32 3
  %477 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory474, align 8, !tbaa !60
  %procs475 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %477, i32 0, i32 1
  %free_object476 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs475, i32 0, i32 2
  %478 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object476, align 8, !tbaa !166
  %479 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %memory477 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %479, i32 0, i32 3
  %480 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory477, align 8, !tbaa !60
  %481 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %482 = bitcast %struct.gx_device_s* %481 to i8*
  call void %478(%struct.gs_memory_s* %480, i8* %482, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.68, i32 0, i32 0)) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %put_accum_error, %if.then.409
  %483 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %483) #2
  %484 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %484) #2
  %485 = bitcast %struct.gx_image_plane_s* %planes to i8*
  call void @llvm.lifetime.end(i64 16, i8* %485) #2
  %486 = bitcast %struct.gx_image_enum_common_s** %info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %486) #2
  %487 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %487) #2
  %488 = bitcast %struct.gs_image1_s* %image to i8*
  call void @llvm.lifetime.end(i64 600, i8* %488) #2
  %489 = bitcast %struct.gx_device_s** %target389 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %489) #2
  %490 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %490) #2
  %491 = bitcast i8** %actual_data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %491) #2
  %492 = bitcast i8** %linebuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %492) #2
  %493 = bitcast i32* %rows_used to i8*
  call void @llvm.lifetime.end(i64 4, i8* %493) #2
  %494 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %494) #2
  br label %cleanup.495

if.end.489:                                       ; preds = %land.lhs.true.374, %land.lhs.true.369, %if.end.362
  %495 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %496 = load %struct.gx_device_s*, %struct.gx_device_s** %495, align 8, !tbaa !1
  %497 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target490 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %497, i32 0, i32 43
  %498 = load %struct.gx_device_s*, %struct.gx_device_s** %target490, align 8, !tbaa !82
  %cmp491 = icmp ne %struct.gx_device_s* %496, %498
  br i1 %cmp491, label %if.then.493, label %if.end.494

if.then.493:                                      ; preds = %if.end.489
  %499 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %500 = bitcast %struct.pdf14_device_s* %499 to %struct.gx_device_forward_s*
  %501 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %502 = load %struct.gx_device_s*, %struct.gx_device_s** %501, align 8, !tbaa !1
  call void @gx_device_set_target(%struct.gx_device_forward_s* %500, %struct.gx_device_s* %502) #7
  br label %if.end.494

if.end.494:                                       ; preds = %if.then.493, %if.end.489
  %503 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %504 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %503, %struct.gx_device_s** %504, align 8, !tbaa !1
  %505 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %505, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.495

cleanup.495:                                      ; preds = %if.end.494, %cleanup, %sw.bb.359, %sw.bb.357, %sw.bb.355, %if.then.353, %if.then.346, %if.then.210, %if.then.197, %if.then.81, %if.then.73, %if.then.67, %if.end, %if.then.34
  %506 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %506) #2
  %507 = bitcast i32* %sep_target to i8*
  call void @llvm.lifetime.end(i64 4, i8* %507) #2
  %508 = bitcast i32* %is_pdf14_compositor to i8*
  call void @llvm.lifetime.end(i64 4, i8* %508) #2
  %509 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %509) #2
  %510 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %510) #2
  %511 = load i32, i32* %retval
  ret i32 %511
}

declare i32 @gx_forward_get_hardware_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_text_begin(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_text_params_s* %text, %struct.gs_font_s* %font, %struct.gx_path_s* %path, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %memory, %struct.gs_text_enum_s** %ppenum) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %text.addr = alloca %struct.gs_text_params_s*, align 8
  %font.addr = alloca %struct.gs_font_s*, align 8
  %path.addr = alloca %struct.gx_path_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %memory.addr = alloca %struct.gs_memory_s*, align 8
  %ppenum.addr = alloca %struct.gs_text_enum_s**, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %penum = alloca %struct.gs_text_enum_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_text_params_s* %text, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  store %struct.gs_font_s* %font, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %path, %struct.gx_path_s** %path.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %memory, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s** %ppenum, %struct.gs_text_enum_s*** %ppenum.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gs_text_enum_s** %penum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %5, %struct.gs_imager_state_s* %6, i32 0, %struct.gs_pdf14trans_params_s* null) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %7 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %8 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %8, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %11 = load %struct.gs_text_params_s*, %struct.gs_text_params_s** %text.addr, align 8, !tbaa !1
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %font.addr, align 8, !tbaa !1
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %path.addr, align 8, !tbaa !1
  %14 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %15 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %16 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory.addr, align 8, !tbaa !1
  %call1 = call i32 @gx_forward_text_begin(%struct.gx_device_s* %9, %struct.gs_imager_state_s* %10, %struct.gs_text_params_s* %11, %struct.gs_font_s* %12, %struct.gx_path_s* %13, %struct.gx_device_color_s* %14, %struct.gx_clip_path_s* %15, %struct.gs_memory_s* %16, %struct.gs_text_enum_s** %penum) #7
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %17 = load i32, i32* %code, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %17, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %18 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %18, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %19 = load %struct.gs_text_enum_s*, %struct.gs_text_enum_s** %penum, align 8, !tbaa !1
  %20 = load %struct.gs_text_enum_s**, %struct.gs_text_enum_s*** %ppenum.addr, align 8, !tbaa !1
  store %struct.gs_text_enum_s* %19, %struct.gs_text_enum_s** %20, align 8, !tbaa !1
  %21 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %22 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #2
  %23 = bitcast %struct.gs_text_enum_s** %penum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #2
  %24 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #2
  %25 = load i32, i32* %retval
  ret i32 %25
}

declare %struct.gs_devn_params_s* @gx_forward_ret_devn_params(%struct.gx_device_s*) #0

declare i32 @gx_forward_fillpage(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*) #0

declare i32 @gx_forward_copy_alpha_hl_color(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_update_params(%struct.pdf14_device_s* %pdev, %struct.gs_imager_state_s* %pis, i32 %crop_blend_params, %struct.gs_pdf14trans_params_s* %group_params) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.pdf14_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %crop_blend_params.addr = alloca i32, align 4
  %group_params.addr = alloca %struct.gs_pdf14trans_params_s*, align 8
  %params = alloca %struct.gs_pdf14trans_params_s, align 8
  %pcdev = alloca %struct.gx_device_s*, align 8
  %changed = alloca i32, align 4
  %code = alloca i32, align 4
  %pct_new = alloca %struct.gs_composite_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.pdf14_device_s* %pdev, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store i32 %crop_blend_params, i32* %crop_blend_params.addr, align 4, !tbaa !5
  store %struct.gs_pdf14trans_params_s* %group_params, %struct.gs_pdf14trans_params_s** %group_params.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.start(i64 704, i8* %0) #2
  %1 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 704, i32 8, i1 false)
  %2 = bitcast %struct.gx_device_s** %pcdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = bitcast i32* %changed to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %changed, align 4, !tbaa !5
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %5 = bitcast %struct.gs_composite_s** %pct_new to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store %struct.gs_composite_s* null, %struct.gs_composite_s** %pct_new, align 8, !tbaa !1
  %6 = load i32, i32* %crop_blend_params.addr, align 4, !tbaa !5
  %crop_blend_params1 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 31
  store i32 %6, i32* %crop_blend_params1, align 4, !tbaa !565
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  store i32 7, i32* %pdf14_op, align 4, !tbaa !93
  %7 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %7, i32 0, i32 12
  %8 = load i32, i32* %blend_mode, align 4, !tbaa !257
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %blend_mode2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 52
  %10 = load i32, i32* %blend_mode2, align 4, !tbaa !48
  %cmp = icmp ne i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %changed, align 4, !tbaa !5
  %or = or i32 %11, 1
  store i32 %or, i32* %changed, align 4, !tbaa !5
  %12 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %blend_mode3 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %12, i32 0, i32 12
  %13 = load i32, i32* %blend_mode3, align 4, !tbaa !257
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %blend_mode4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 52
  store i32 %13, i32* %blend_mode4, align 4, !tbaa !48
  %blend_mode5 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 15
  store i32 %13, i32* %blend_mode5, align 4, !tbaa !125
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_knockout = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %15, i32 0, i32 17
  %16 = load i32, i32* %text_knockout, align 4, !tbaa !453
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %text_knockout6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 53
  %18 = load i32, i32* %text_knockout6, align 4, !tbaa !557
  %cmp7 = icmp ne i32 %16, %18
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end
  %19 = load i32, i32* %changed, align 4, !tbaa !5
  %or9 = or i32 %19, 2
  store i32 %or9, i32* %changed, align 4, !tbaa !5
  %20 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %text_knockout10 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %20, i32 0, i32 17
  %21 = load i32, i32* %text_knockout10, align 4, !tbaa !453
  %22 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %text_knockout11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %22, i32 0, i32 53
  store i32 %21, i32* %text_knockout11, align 4, !tbaa !557
  %text_knockout12 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 16
  store i32 %21, i32* %text_knockout12, align 4, !tbaa !134
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.8, %if.end
  %23 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %23, i32 0, i32 14
  %alpha = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape, i32 0, i32 0
  %24 = load float, float* %alpha, align 4, !tbaa !244
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %shape14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 50
  %26 = load float, float* %shape14, align 4, !tbaa !344
  %cmp15 = fcmp une float %24, %26
  br i1 %cmp15, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %if.end.13
  %27 = load i32, i32* %changed, align 4, !tbaa !5
  %or17 = or i32 %27, 4
  store i32 %or17, i32* %changed, align 4, !tbaa !5
  %28 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %shape18 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %28, i32 0, i32 14
  %alpha19 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape18, i32 0, i32 0
  %29 = load float, float* %alpha19, align 4, !tbaa !244
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %shape20 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 50
  store float %29, float* %shape20, align 4, !tbaa !344
  %shape21 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 18
  %alpha22 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %shape21, i32 0, i32 0
  store float %29, float* %alpha22, align 4, !tbaa !132
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.16, %if.end.13
  %31 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %31, i32 0, i32 13
  %alpha24 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity, i32 0, i32 0
  %32 = load float, float* %alpha24, align 4, !tbaa !243
  %33 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %opacity25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %33, i32 0, i32 49
  %34 = load float, float* %opacity25, align 4, !tbaa !394
  %cmp26 = fcmp une float %32, %34
  br i1 %cmp26, label %if.then.27, label %if.end.34

if.then.27:                                       ; preds = %if.end.23
  %35 = load i32, i32* %changed, align 4, !tbaa !5
  %or28 = or i32 %35, 8
  store i32 %or28, i32* %changed, align 4, !tbaa !5
  %36 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %opacity29 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %36, i32 0, i32 13
  %alpha30 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity29, i32 0, i32 0
  %37 = load float, float* %alpha30, align 4, !tbaa !243
  %38 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %opacity31 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %38, i32 0, i32 49
  store float %37, float* %opacity31, align 4, !tbaa !394
  %opacity32 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 17
  %alpha33 = getelementptr inbounds %struct.gs_transparency_source_s, %struct.gs_transparency_source_s* %opacity32, i32 0, i32 0
  store float %37, float* %alpha33, align 4, !tbaa !131
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.27, %if.end.23
  %39 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %39, i32 0, i32 21
  %40 = load i32, i32* %overprint, align 4, !tbaa !395
  %41 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %overprint35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %41, i32 0, i32 54
  %42 = load i32, i32* %overprint35, align 4, !tbaa !345
  %cmp36 = icmp ne i32 %40, %42
  br i1 %cmp36, label %if.then.37, label %if.end.42

if.then.37:                                       ; preds = %if.end.34
  %43 = load i32, i32* %changed, align 4, !tbaa !5
  %or38 = or i32 %43, 16
  store i32 %or38, i32* %changed, align 4, !tbaa !5
  %44 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint39 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %44, i32 0, i32 21
  %45 = load i32, i32* %overprint39, align 4, !tbaa !395
  %46 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %overprint40 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %46, i32 0, i32 54
  store i32 %45, i32* %overprint40, align 4, !tbaa !345
  %overprint41 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 22
  store i32 %45, i32* %overprint41, align 4, !tbaa !454
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.37, %if.end.34
  %47 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint_mode = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %47, i32 0, i32 22
  %48 = load i32, i32* %overprint_mode, align 4, !tbaa !396
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %overprint_mode43 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 55
  %50 = load i32, i32* %overprint_mode43, align 4, !tbaa !397
  %cmp44 = icmp ne i32 %48, %50
  br i1 %cmp44, label %if.then.45, label %if.end.50

if.then.45:                                       ; preds = %if.end.42
  %51 = load i32, i32* %changed, align 4, !tbaa !5
  %or46 = or i32 %51, 32
  store i32 %or46, i32* %changed, align 4, !tbaa !5
  %52 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %overprint_mode47 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %52, i32 0, i32 22
  %53 = load i32, i32* %overprint_mode47, align 4, !tbaa !396
  %54 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %overprint_mode48 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %54, i32 0, i32 55
  store i32 %53, i32* %overprint_mode48, align 4, !tbaa !397
  %overprint_mode49 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 23
  store i32 %53, i32* %overprint_mode49, align 4, !tbaa !455
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.45, %if.end.42
  %55 = load i32, i32* %crop_blend_params.addr, align 4, !tbaa !5
  %tobool = icmp ne i32 %55, 0
  br i1 %tobool, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %if.end.50
  %ctm = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 20
  %56 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %group_params.addr, align 8, !tbaa !1
  %ctm52 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %56, i32 0, i32 20
  %57 = bitcast %struct.gs_matrix_s* %ctm to i8*
  %58 = bitcast %struct.gs_matrix_s* %ctm52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 24, i32 4, i1 false), !tbaa.struct !135
  %bbox = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 6
  %59 = load %struct.gs_pdf14trans_params_s*, %struct.gs_pdf14trans_params_s** %group_params.addr, align 8, !tbaa !1
  %bbox53 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %59, i32 0, i32 6
  %60 = bitcast %struct.gs_rect_s* %bbox to i8*
  %61 = bitcast %struct.gs_rect_s* %bbox53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 32, i32 8, i1 false), !tbaa.struct !566
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %if.end.50
  %62 = load i32, i32* %changed, align 4, !tbaa !5
  %changed55 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 2
  store i32 %62, i32* %changed55, align 4, !tbaa !133
  %63 = load i32, i32* %changed, align 4, !tbaa !5
  %cmp56 = icmp ne i32 %63, 0
  br i1 %cmp56, label %if.then.57, label %if.end.67

if.then.57:                                       ; preds = %if.end.54
  %64 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %64, i32 0, i32 1
  %65 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !165
  %call = call i32 @gs_create_pdf14trans(%struct.gs_composite_s** %pct_new, %struct.gs_pdf14trans_params_s* %params, %struct.gs_memory_s* %65) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %66 = load i32, i32* %code, align 4, !tbaa !5
  %cmp58 = icmp slt i32 %66, 0
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.57
  %67 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %67, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.60:                                        ; preds = %if.then.57
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 43
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %69, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  %70 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %target61 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %71, i32 0, i32 43
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %target61, align 8, !tbaa !82
  %73 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct_new, align 8, !tbaa !1
  %74 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %75 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory62 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %75, i32 0, i32 1
  %76 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory62, align 8, !tbaa !165
  %call63 = call i32 %70(%struct.gx_device_s* %72, %struct.gx_device_s** %pcdev, %struct.gs_composite_s* %73, %struct.gs_imager_state_s* %74, %struct.gs_memory_s* %76, %struct.gx_device_s* null) #7
  store i32 %call63, i32* %code, align 4, !tbaa !5
  %77 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory64 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %77, i32 0, i32 1
  %78 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory64, align 8, !tbaa !165
  %procs65 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %78, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs65, i32 0, i32 2
  %79 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %80 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %memory66 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %80, i32 0, i32 1
  %81 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory66, align 8, !tbaa !165
  %82 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct_new, align 8, !tbaa !1
  %83 = bitcast %struct.gs_composite_s* %82 to i8*
  call void %79(%struct.gs_memory_s* %81, i8* %83, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.66, i32 0, i32 0)) #7
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.60, %if.end.54
  %84 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %84, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.67, %if.then.59
  %85 = bitcast %struct.gs_composite_s** %pct_new to i8*
  call void @llvm.lifetime.end(i64 8, i8* %85) #2
  %86 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %86) #2
  %87 = bitcast i32* %changed to i8*
  call void @llvm.lifetime.end(i64 4, i8* %87) #2
  %88 = bitcast %struct.gx_device_s** %pcdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %88) #2
  %89 = bitcast %struct.gs_pdf14trans_params_s* %params to i8*
  call void @llvm.lifetime.end(i64 704, i8* %89) #2
  %90 = load i32, i32* %retval
  ret i32 %90
}

declare i32 @gx_forward_fill_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #0

declare i32 @gx_forward_stroke_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #0

declare i32 @gx_forward_begin_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #0

declare i32 @gs_begin_transparency_group(%struct.gs_state_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*) #0

declare i32 @gx_forward_begin_typed_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_recreate_clist_device(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %target = alloca %struct.gx_device_s*, align 8
  %dev_proto = alloca %struct.pdf14_device_s*, align 8
  %temp_dev_proto = alloca %struct.pdf14_device_s, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target1, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %target, align 8, !tbaa !1
  %6 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.start(i64 5024, i8* %7) #2
  %8 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %10 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %11 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call = call i32 @get_pdf14_clist_device_proto(%struct.gx_device_s* %9, %struct.pdf14_device_s** %dev_proto, %struct.pdf14_device_s* %temp_dev_proto, %struct.gs_imager_state_s* %10, %struct.gs_pdf14trans_s* %11) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %12 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %13 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %do.end
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 11
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %color_info2 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 11
  %16 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  %17 = bitcast %struct.gx_device_color_info_s* %color_info2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 720, i32 8, i1 false), !tbaa.struct !65
  %18 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %18, i32 0, i32 42
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %procs3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %19, i32 0, i32 42
  %20 = bitcast %struct.gx_device_procs_s* %procs to i8*
  %21 = bitcast %struct.gx_device_procs_s* %procs3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 584, i32 8, i1 false), !tbaa.struct !449
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %pad = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 15
  %23 = load i32, i32* %pad, align 4, !tbaa !443
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pad4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %24, i32 0, i32 15
  store i32 %23, i32* %pad4, align 4, !tbaa !444
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %log2_align_mod = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 16
  %26 = load i32, i32* %log2_align_mod, align 4, !tbaa !445
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %log2_align_mod5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 16
  store i32 %26, i32* %log2_align_mod5, align 4, !tbaa !446
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %is_planar = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %28, i32 0, i32 17
  %29 = load i32, i32* %is_planar, align 4, !tbaa !447
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %is_planar6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 17
  store i32 %29, i32* %is_planar6, align 4, !tbaa !448
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %31) #7
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %33 = bitcast %struct.pdf14_device_s* %32 to %struct.gx_device_s*
  call void @check_device_separable(%struct.gx_device_s* %33) #7
  %34 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %34, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %35 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %35) #2
  %36 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.end(i64 5024, i8* %36) #2
  %37 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #2
  %38 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #2
  %39 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #2
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_get_param_compressed_color_list(%struct.pdf14_device_s* %p14dev) #1 {
entry:
  %retval = alloca i32, align 4
  %p14dev.addr = alloca %struct.pdf14_device_s*, align 8
  %cldev = alloca %struct.gx_device_clist_writer_s*, align 8
  %param_list = alloca %struct.gs_c_param_list_s, align 8
  %pkeyname_list_head = alloca %struct.keyname_link_list_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %tdev = alloca %struct.gx_device_s*, align 8
  store %struct.pdf14_device_s* %p14dev, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %1, i32 0, i32 58
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %3 = bitcast %struct.gx_device_s* %2 to %struct.gx_device_clist_writer_s*
  store %struct.gx_device_clist_writer_s* %3, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %4 = bitcast %struct.gs_c_param_list_s* %param_list to i8*
  call void @llvm.lifetime.start(i64 56, i8* %4) #2
  %5 = bitcast %struct.keyname_link_list_s** %pkeyname_list_head to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store %struct.keyname_link_list_s* null, %struct.keyname_link_list_s** %pkeyname_list_head, align 8, !tbaa !1
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %permanent_error = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %7, i32 0, i32 95
  %8 = load i32, i32* %permanent_error, align 4, !tbaa !567
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %permanent_error1 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %9, i32 0, i32 95
  %10 = load i32, i32* %permanent_error1, align 4, !tbaa !567
  store i32 %10, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %11, i32 0, i32 3
  %12 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  call void @gs_c_param_list_write(%struct.gs_c_param_list_s* %param_list, %struct.gs_memory_s* %12) #7
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %14 = bitcast %struct.gs_c_param_list_s* %param_list to %struct.gs_param_list_s*
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 44
  %compressed_color_list = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 8
  %16 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %compressed_color_list, align 8, !tbaa !154
  %call = call i32 @get_param_compressed_color_list_elem(%struct.pdf14_device_s* %13, %struct.gs_param_list_s* %14, %struct.compressed_color_list_s* %16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i32 0, i32 0), %struct.keyname_link_list_s** %pkeyname_list_head) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %18 = bitcast %struct.gs_c_param_list_s* %param_list to %struct.gs_param_list_s*
  %call2 = call i32 @get_param_spot_color_names(%struct.pdf14_device_s* %17, %struct.gs_param_list_s* %18, %struct.keyname_link_list_s** %pkeyname_list_head) #7
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp sge i32 %19, 0
  br i1 %cmp, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %20 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #2
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 43
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %22, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  call void @gs_c_param_list_read(%struct.gs_c_param_list_s* %param_list) #7
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %23, i32 0, i32 42
  %put_params = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 14
  %24 = load i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)** %put_params, align 8, !tbaa !81
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %26 = bitcast %struct.gs_c_param_list_s* %param_list to %struct.gs_param_list_s*
  %call4 = call i32 %24(%struct.gx_device_s* %25, %struct.gs_param_list_s* %26) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %27 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %if.end
  call void @gs_c_param_list_release(%struct.gs_c_param_list_s* %param_list) #7
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev.addr, align 8, !tbaa !1
  %memory6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 3
  %29 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory6, align 8, !tbaa !225
  %30 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_head, align 8, !tbaa !1
  %call7 = call i32 @free_temp_keyname_list(%struct.gs_memory_s* %29, %struct.keyname_link_list_s* %30) #7
  %31 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %31, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.5, %if.then
  %32 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %32) #2
  %33 = bitcast %struct.keyname_link_list_s** %pkeyname_list_head to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #2
  %34 = bitcast %struct.gs_c_param_list_s* %param_list to i8*
  call void @llvm.lifetime.end(i64 56, i8* %34) #2
  %35 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  %36 = load i32, i32* %retval
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_disable_clist_device(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s* %dev) #1 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_forward_s*, align 8
  %target = alloca %struct.gx_device_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_forward_s*
  store %struct.gx_device_forward_s* %2, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_forward_s*, %struct.gx_device_forward_s** %pdev, align 8, !tbaa !1
  %target1 = getelementptr inbounds %struct.gx_device_forward_s, %struct.gx_device_forward_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target1, align 8, !tbaa !63
  store %struct.gx_device_s* %5, %struct.gx_device_s** %target, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 11
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !1
  %color_info2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 11
  %8 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  %9 = bitcast %struct.gx_device_color_info_s* %color_info2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 720, i32 8, i1 false), !tbaa.struct !65
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @pdf14_forward_device_procs(%struct.gx_device_s* %10) #7
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  store i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* @pdf14_clist_forward_create_compositor, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %12 = bitcast %struct.gx_device_s** %target to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #2
  %13 = bitcast %struct.gx_device_forward_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  ret i32 0
}

declare i32 @cmd_put_color_mapping(%struct.gx_device_clist_writer_s*, %struct.gs_imager_state_s*) #0

; Function Attrs: nounwind uwtable
define internal void @pdf14_push_parent_color(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %new_parent_color = alloca %struct.pdf14_parent_color_s*, align 8
  %icc_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_parent_color_s** %new_parent_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %5) #2
  %6 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %7, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %8 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 %8(%struct.gx_device_s* %9, %struct.cmm_dev_profile_s** %dev_profile) #7
  %10 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %10, %struct.cmm_profile_s** %icc_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 3
  %12 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !60
  %procs1 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %12, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs1, i32 0, i32 8
  %13 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 3
  %15 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory2, align 8, !tbaa !60
  %call3 = call i8* %13(%struct.gs_memory_s* %15, %struct.gs_memory_struct_type_s* @st_pdf14_clr, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.74, i32 0, i32 0)) #7
  %16 = bitcast i8* %call3 to %struct.pdf14_parent_color_s*
  store %struct.pdf14_parent_color_s* %16, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %17 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %17, i32 0, i32 70
  %18 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  %19 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %previous = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %19, i32 0, i32 16
  store %struct.pdf14_parent_color_s* %18, %struct.pdf14_parent_color_s** %previous, align 8, !tbaa !303
  %20 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 70
  store %struct.pdf14_parent_color_s* %20, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs4, align 8, !tbaa !300
  %22 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %22, i32 0, i32 38
  %23 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %24 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %get_cmap_procs5 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %24, i32 0, i32 8
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %23, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs5, align 8, !tbaa !264
  %25 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %25, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs6, i32 0, i32 49
  %26 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %27 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %27, i32 0, i32 9
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %26, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs7 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs7, i32 0, i32 50
  %29 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %30 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %30, i32 0, i32 12
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %29, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %31 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %31, i32 0, i32 46
  %32 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %33 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %33, i32 0, i32 14
  store %struct.pdf14_nonseparable_blending_procs_s* %32, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %34 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %34, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 2
  %35 = load i32, i32* %polarity, align 4, !tbaa !196
  %36 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %polarity8 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %36, i32 0, i32 2
  store i32 %35, i32* %polarity8, align 4, !tbaa !268
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info9 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %37, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info9, i32 0, i32 1
  %38 = load i32, i32* %num_components, align 4, !tbaa !150
  %39 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %num_components10 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %39, i32 0, i32 0
  store i32 %38, i32* %num_components10, align 4, !tbaa !269
  %40 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %40, i32 0, i32 45
  %41 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %42 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %unpack_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %42, i32 0, i32 13
  store %struct.pdf14_procs_s* %41, %struct.pdf14_procs_s** %unpack_procs, align 8, !tbaa !273
  %43 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %43, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info11, i32 0, i32 3
  %44 = load i16, i16* %depth, align 2, !tbaa !276
  %conv = trunc i16 %44 to i8
  %45 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %depth12 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %45, i32 0, i32 5
  store i8 %conv, i8* %depth12, align 1, !tbaa !275
  %46 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info13 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %46, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info13, i32 0, i32 6
  %47 = load i32, i32* %max_color, align 4, !tbaa !278
  %48 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %max_color14 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %48, i32 0, i32 7
  store i32 %47, i32* %max_color14, align 4, !tbaa !277
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info15, i32 0, i32 5
  %50 = load i32, i32* %max_gray, align 4, !tbaa !280
  %51 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %max_gray16 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %51, i32 0, i32 6
  store i32 %50, i32* %max_gray16, align 4, !tbaa !279
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs17, i32 0, i32 52
  %53 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !298
  %54 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %decode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %54, i32 0, i32 11
  store i32 (%struct.gx_device_s*, i64, i16*)* %53, i32 (%struct.gx_device_s*, i64, i16*)** %decode, align 8, !tbaa !297
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs18, i32 0, i32 51
  %56 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %57 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %encode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %57, i32 0, i32 10
  store i64 (%struct.gx_device_s*, i16*)* %56, i64 (%struct.gx_device_s*, i16*)** %encode, align 8, !tbaa !295
  %58 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %comp_bits = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %58, i32 0, i32 4
  %59 = bitcast [64 x i8]* %comp_bits to i8*
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info19 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %60, i32 0, i32 11
  %comp_bits20 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info19, i32 0, i32 12
  %61 = bitcast [64 x i8]* %comp_bits20 to i8*
  %call21 = call i8* @memcpy(i8* %59, i8* %61, i64 64) #8
  %62 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %comp_shift = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %62, i32 0, i32 3
  %63 = bitcast [64 x i8]* %comp_shift to i8*
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info22 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 11
  %comp_shift23 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info22, i32 0, i32 11
  %65 = bitcast [64 x i8]* %comp_shift23 to i8*
  %call24 = call i8* @memcpy(i8* %63, i8* %65, i64 64) #8
  %66 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %67 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %icc_profile25 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %67, i32 0, i32 15
  store %struct.cmm_profile_s* %66, %struct.cmm_profile_s** %icc_profile25, align 8, !tbaa !281
  br label %do.body.26

do.body.26:                                       ; preds = %do.end
  %68 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %tobool = icmp ne %struct.cmm_profile_s* %68, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.26
  br label %do.body.27

do.body.27:                                       ; preds = %if.then
  %69 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !1
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %69, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %70 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc = add nsw i64 %70, 1
  store i64 %inc, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.28

do.body.28:                                       ; preds = %do.body.27
  br label %do.cond.29

do.cond.29:                                       ; preds = %do.body.28
  br label %do.end.30

do.end.30:                                        ; preds = %do.cond.29
  br label %do.cond.31

do.cond.31:                                       ; preds = %do.end.30
  br label %do.end.32

do.end.32:                                        ; preds = %do.cond.31
  br label %if.end

if.end:                                           ; preds = %do.end.32, %do.body.26
  br label %do.cond.33

do.cond.33:                                       ; preds = %if.end
  br label %do.end.34

do.end.34:                                        ; preds = %do.cond.33
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %71, i32 0, i32 47
  %72 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %tobool35 = icmp ne %struct.pdf14_ctx_s* %72, null
  br i1 %tobool35, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %do.end.34
  %73 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx37 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %73, i32 0, i32 47
  %74 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx37, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %74, i32 0, i32 4
  %75 = load i32, i32* %additive, align 4, !tbaa !272
  %76 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %new_parent_color, align 8, !tbaa !1
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %76, i32 0, i32 1
  store i32 %75, i32* %isadditive, align 4, !tbaa !271
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %do.end.34
  %77 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #2
  %78 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %78) #2
  %79 = bitcast %struct.cmm_profile_s** %icc_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #2
  %80 = bitcast %struct.pdf14_parent_color_s** %new_parent_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #2
  %81 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %81) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_update_device_color_procs_push_c(%struct.gx_device_s* %dev, i32 %group_color, i64 %icc_hashcode, %struct.gs_imager_state_s* %pis, %struct.cmm_profile_s* %icc_profile) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %group_color.addr = alloca i32, align 4
  %icc_hashcode.addr = alloca i64, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %icc_profile.addr = alloca %struct.cmm_profile_s*, align 8
  %pdevproto = alloca %struct.pdf14_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %cldev = alloca %struct.gx_device_clist_writer_s*, align 8
  %new_14procs = alloca %struct.pdf14_procs_s*, align 8
  %update_color_info = alloca i32, align 4
  %new_polarity = alloca i32, align 4
  %new_num_comps = alloca i32, align 4
  %new_additive = alloca i32, align 4
  %new_depth = alloca i8, align 1
  %comp_bits = alloca [4 x i8], align 1
  %comp_shift = alloca [4 x i8], align 1
  %k = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %icc_profile_dev = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %group_color, i32* %group_color.addr, align 4, !tbaa !66
  store i64 %icc_hashcode, i64* %icc_hashcode.addr, align 8, !tbaa !68
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.cmm_profile_s* %icc_profile, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdevproto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s* %2 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %3, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %5, i32 0, i32 58
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %7 = bitcast %struct.gx_device_s* %6 to %struct.gx_device_clist_writer_s*
  store %struct.gx_device_clist_writer_s* %7, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %8 = bitcast %struct.pdf14_procs_s** %new_14procs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = bitcast i32* %update_color_info to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %new_polarity to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %new_num_comps to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i32* %new_additive to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  call void @llvm.lifetime.start(i64 1, i8* %new_depth) #2
  %13 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 4, i32 1, i1 false)
  %15 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 4, i32 1, i1 false)
  %17 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  %18 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %19, i32 0, i32 40
  %20 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %20, 128
  store i32 %and, i32* %has_tags, align 4, !tbaa !5
  %21 = bitcast %struct.cmm_profile_s** %icc_profile_dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #2
  %22 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %22) #2
  %23 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #2
  %24 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  %cmp = icmp eq i32 %24, 5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %25 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %cmp1 = icmp eq %struct.cmm_profile_s* %25, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__func__.pdf14_update_device_color_procs_push_c, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 4139, i32 0, i32 -23, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.75, i32 0, i32 0)) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %update_color_info, align 4, !tbaa !5
  %26 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  switch i32 %26, label %sw.default.90 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.6
    i32 3, label %sw.bb.6
    i32 2, label %sw.bb.16
    i32 5, label %sw.bb.43
    i32 6, label %sw.bb.89
  ]

sw.bb:                                            ; preds = %do.end
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %28 = load i32, i32* %num_components, align 4, !tbaa !150
  %cmp2 = icmp ne i32 %28, 1
  br i1 %cmp2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %sw.bb
  store i32 1, i32* %update_color_info, align 4, !tbaa !5
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 1, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_Gray_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i8 8, i8* %new_depth, align 1, !tbaa !66
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 0
  store i8 8, i8* %arrayidx, align 1, !tbaa !66
  %arrayidx4 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 0
  store i8 0, i8* %arrayidx4, align 1, !tbaa !66
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %sw.bb
  br label %sw.epilog.91

sw.bb.6:                                          ; preds = %do.end, %do.end
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info7 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %29, i32 0, i32 11
  %num_components8 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info7, i32 0, i32 1
  %30 = load i32, i32* %num_components8, align 4, !tbaa !150
  %cmp9 = icmp ne i32 %30, 3
  br i1 %cmp9, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %sw.bb.6
  store i32 1, i32* %update_color_info, align 4, !tbaa !5
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 3, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_RGB_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i8 24, i8* %new_depth, align 1, !tbaa !66
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.10
  %31 = load i32, i32* %k, align 4, !tbaa !5
  %cmp11 = icmp slt i32 %31, 3
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %32 to i64
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom
  store i8 8, i8* %arrayidx12, align 1, !tbaa !66
  %33 = load i32, i32* %k, align 4, !tbaa !5
  %sub = sub nsw i32 2, %33
  %mul = mul nsw i32 %sub, 8
  %conv = trunc i32 %mul to i8
  %34 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom13 = sext i32 %34 to i64
  %arrayidx14 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom13
  store i8 %conv, i8* %arrayidx14, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %k, align 4, !tbaa !5
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.15

if.end.15:                                        ; preds = %for.end, %sw.bb.6
  br label %sw.epilog.91

sw.bb.16:                                         ; preds = %do.end
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 11
  %num_components18 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info17, i32 0, i32 1
  %37 = load i32, i32* %num_components18, align 4, !tbaa !150
  %cmp19 = icmp ne i32 %37, 4
  br i1 %cmp19, label %if.then.21, label %if.end.42

if.then.21:                                       ; preds = %sw.bb.16
  store i32 1, i32* %update_color_info, align 4, !tbaa !5
  store i32 0, i32* %new_polarity, align 4, !tbaa !66
  store i32 4, i32* %new_num_comps, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_CMYK_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store i32 0, i32* %new_additive, align 4, !tbaa !5
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info22 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %38, i32 0, i32 11
  %num_components23 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info22, i32 0, i32 1
  %39 = load i32, i32* %num_components23, align 4, !tbaa !195
  %cmp24 = icmp sgt i32 %39, 4
  br i1 %cmp24, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %if.then.21
  store %struct.pdf14_procs_s* @cmykspot_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  br label %if.end.27

if.else:                                          ; preds = %if.then.21
  store %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.26
  store i8 32, i8* %new_depth, align 1, !tbaa !66
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.28

for.cond.28:                                      ; preds = %for.inc.39, %if.end.27
  %40 = load i32, i32* %k, align 4, !tbaa !5
  %cmp29 = icmp slt i32 %40, 4
  br i1 %cmp29, label %for.body.31, label %for.end.41

for.body.31:                                      ; preds = %for.cond.28
  %41 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom32 = sext i32 %41 to i64
  %arrayidx33 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom32
  store i8 8, i8* %arrayidx33, align 1, !tbaa !66
  %42 = load i32, i32* %k, align 4, !tbaa !5
  %sub34 = sub nsw i32 3, %42
  %mul35 = mul nsw i32 %sub34, 8
  %conv36 = trunc i32 %mul35 to i8
  %43 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom37 = sext i32 %43 to i64
  %arrayidx38 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom37
  store i8 %conv36, i8* %arrayidx38, align 1, !tbaa !66
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.body.31
  %44 = load i32, i32* %k, align 4, !tbaa !5
  %inc40 = add nsw i32 %44, 1
  store i32 %inc40, i32* %k, align 4, !tbaa !5
  br label %for.cond.28

for.end.41:                                       ; preds = %for.cond.28
  br label %if.end.42

if.end.42:                                        ; preds = %for.end.41, %sw.bb.16
  br label %sw.epilog.91

sw.bb.43:                                         ; preds = %do.end
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %46 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call44 = call i32 %46(%struct.gx_device_s* %47, %struct.cmm_dev_profile_s** %dev_profile) #7
  %48 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %48, %struct.cmm_profile_s** %icc_profile_dev, %struct.gsicc_rendering_param_s* %render_cond) #7
  %49 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile_dev, align 8, !tbaa !1
  %hashcode = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %49, i32 0, i32 7
  %50 = load i64, i64* %hashcode, align 8, !tbaa !121
  %51 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %hashcode45 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %51, i32 0, i32 7
  %52 = load i64, i64* %hashcode45, align 8, !tbaa !121
  %cmp46 = icmp ne i64 %50, %52
  br i1 %cmp46, label %if.then.48, label %if.end.88

if.then.48:                                       ; preds = %sw.bb.43
  store i32 1, i32* %update_color_info, align 4, !tbaa !5
  %53 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %num_comps = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %53, i32 0, i32 0
  %54 = load i8, i8* %num_comps, align 1, !tbaa !482
  %conv49 = zext i8 %54 to i32
  store i32 %conv49, i32* %new_num_comps, align 4, !tbaa !5
  %55 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %num_comps50 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %55, i32 0, i32 0
  %56 = load i8, i8* %num_comps50, align 1, !tbaa !482
  %conv51 = zext i8 %56 to i32
  %mul52 = mul nsw i32 %conv51, 8
  %conv53 = trunc i32 %mul52 to i8
  store i8 %conv53, i8* %new_depth, align 1, !tbaa !66
  %57 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  switch i32 %57, label %sw.default [
    i32 1, label %sw.bb.54
    i32 3, label %sw.bb.57
    i32 4, label %sw.bb.72
  ]

sw.bb.54:                                         ; preds = %if.then.48
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_Gray_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @gray_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  %arrayidx55 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 0
  store i8 8, i8* %arrayidx55, align 1, !tbaa !66
  %arrayidx56 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 0
  store i8 0, i8* %arrayidx56, align 1, !tbaa !66
  br label %sw.epilog

sw.bb.57:                                         ; preds = %if.then.48
  store i32 1, i32* %new_polarity, align 4, !tbaa !66
  store i32 1, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_RGB_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @rgb_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.69, %sw.bb.57
  %58 = load i32, i32* %k, align 4, !tbaa !5
  %cmp59 = icmp slt i32 %58, 3
  br i1 %cmp59, label %for.body.61, label %for.end.71

for.body.61:                                      ; preds = %for.cond.58
  %59 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom62 = sext i32 %59 to i64
  %arrayidx63 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom62
  store i8 8, i8* %arrayidx63, align 1, !tbaa !66
  %60 = load i32, i32* %k, align 4, !tbaa !5
  %sub64 = sub nsw i32 2, %60
  %mul65 = mul nsw i32 %sub64, 8
  %conv66 = trunc i32 %mul65 to i8
  %61 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom67 = sext i32 %61 to i64
  %arrayidx68 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom67
  store i8 %conv66, i8* %arrayidx68, align 1, !tbaa !66
  br label %for.inc.69

for.inc.69:                                       ; preds = %for.body.61
  %62 = load i32, i32* %k, align 4, !tbaa !5
  %inc70 = add nsw i32 %62, 1
  store i32 %inc70, i32* %k, align 4, !tbaa !5
  br label %for.cond.58

for.end.71:                                       ; preds = %for.cond.58
  br label %sw.epilog

sw.bb.72:                                         ; preds = %if.then.48
  store i32 0, i32* %new_polarity, align 4, !tbaa !66
  store i32 0, i32* %new_additive, align 4, !tbaa !5
  store %struct.pdf14_device_s* @gs_pdf14_CMYK_device, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  store %struct.pdf14_procs_s* @cmyk_pdf14_procs, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.84, %sw.bb.72
  %63 = load i32, i32* %k, align 4, !tbaa !5
  %cmp74 = icmp slt i32 %63, 4
  br i1 %cmp74, label %for.body.76, label %for.end.86

for.body.76:                                      ; preds = %for.cond.73
  %64 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom77 = sext i32 %64 to i64
  %arrayidx78 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i64 %idxprom77
  store i8 8, i8* %arrayidx78, align 1, !tbaa !66
  %65 = load i32, i32* %k, align 4, !tbaa !5
  %sub79 = sub nsw i32 3, %65
  %mul80 = mul nsw i32 %sub79, 8
  %conv81 = trunc i32 %mul80 to i8
  %66 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom82 = sext i32 %66 to i64
  %arrayidx83 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i64 %idxprom82
  store i8 %conv81, i8* %arrayidx83, align 1, !tbaa !66
  br label %for.inc.84

for.inc.84:                                       ; preds = %for.body.76
  %67 = load i32, i32* %k, align 4, !tbaa !5
  %inc85 = add nsw i32 %67, 1
  store i32 %inc85, i32* %k, align 4, !tbaa !5
  br label %for.cond.73

for.end.86:                                       ; preds = %for.cond.73
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.48
  %call87 = call i32 (i8*, i8*, i32, i32, i32, i8*, ...) @gs_throw_imp(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__func__.pdf14_update_device_color_procs_push_c, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 4242, i32 0, i32 -23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i32 0, i32 0)) #7
  store i32 %call87, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %for.end.86, %for.end.71, %sw.bb.54
  br label %if.end.88

if.end.88:                                        ; preds = %sw.epilog, %sw.bb.43
  br label %sw.epilog.91

sw.bb.89:                                         ; preds = %do.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.default.90:                                    ; preds = %do.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog.91:                                     ; preds = %if.end.88, %if.end.42, %if.end.15, %if.end.5
  %68 = load i32, i32* %update_color_info, align 4, !tbaa !5
  %tobool = icmp ne i32 %68, 0
  br i1 %tobool, label %if.then.92, label %if.end.176

if.then.92:                                       ; preds = %sw.epilog.91
  %69 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool93 = icmp ne i32 %69, 0
  br i1 %tobool93, label %if.then.94, label %if.end.97

if.then.94:                                       ; preds = %if.then.92
  %70 = load i8, i8* %new_depth, align 1, !tbaa !66
  %conv95 = zext i8 %70 to i32
  %add = add nsw i32 %conv95, 8
  %conv96 = trunc i32 %add to i8
  store i8 %conv96, i8* %new_depth, align 1, !tbaa !66
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.94, %if.then.92
  br label %do.body.98

do.body.98:                                       ; preds = %if.end.97
  br label %do.cond.99

do.cond.99:                                       ; preds = %do.body.98
  br label %do.end.100

do.end.100:                                       ; preds = %do.cond.99
  %71 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %71, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_get_cmap_procs_group, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %72 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %73 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %72, %struct.gx_device_s* %73) #7
  %74 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %74, i32 0, i32 1
  %75 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs, align 8, !tbaa !450
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %75, i32 0, i32 49
  %76 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !485
  %77 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs101 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %77, i32 0, i32 42
  %get_color_mapping_procs102 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs101, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %76, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs102, align 8, !tbaa !266
  %78 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs103 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %78, i32 0, i32 1
  %79 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs103, align 8, !tbaa !450
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %79, i32 0, i32 50
  %80 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !486
  %81 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs104 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %81, i32 0, i32 42
  %get_color_comp_index105 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs104, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %80, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index105, align 8, !tbaa !267
  %82 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %82, i32 0, i32 46
  %83 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %84 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs106 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %84, i32 0, i32 46
  store %struct.pdf14_nonseparable_blending_procs_s* %83, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs106, align 8, !tbaa !230
  %85 = load i32, i32* %new_polarity, align 4, !tbaa !66
  %86 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info107 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %86, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info107, i32 0, i32 2
  store i32 %85, i32* %polarity, align 4, !tbaa !196
  %87 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %88 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info108 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %88, i32 0, i32 11
  %num_components109 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info108, i32 0, i32 1
  store i32 %87, i32* %num_components109, align 4, !tbaa !150
  %89 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info110 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %89, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info110, i32 0, i32 6
  store i32 255, i32* %max_color, align 4, !tbaa !278
  %90 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info111 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %90, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info111, i32 0, i32 5
  store i32 255, i32* %max_gray, align 4, !tbaa !280
  %91 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %new_14procs, align 8, !tbaa !1
  %92 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %92, i32 0, i32 45
  store %struct.pdf14_procs_s* %91, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %93 = load i8, i8* %new_depth, align 1, !tbaa !66
  %conv112 = zext i8 %93 to i16
  %94 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info113 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %94, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info113, i32 0, i32 3
  store i16 %conv112, i16* %depth, align 2, !tbaa !276
  %95 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info114 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %95, i32 0, i32 11
  %comp_bits115 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info114, i32 0, i32 12
  %96 = bitcast [64 x i8]* %comp_bits115 to i8*
  %call116 = call i8* @memset(i8* %96, i32 0, i64 64) #8
  %97 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info117 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %97, i32 0, i32 11
  %comp_shift118 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info117, i32 0, i32 11
  %98 = bitcast [64 x i8]* %comp_shift118 to i8*
  %call119 = call i8* @memset(i8* %98, i32 0, i64 64) #8
  %99 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info120 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %99, i32 0, i32 11
  %comp_bits121 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info120, i32 0, i32 12
  %100 = bitcast [64 x i8]* %comp_bits121 to i8*
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %comp_bits, i32 0, i32 0
  %call122 = call i8* @memcpy(i8* %100, i8* %arraydecay, i64 4) #8
  %101 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info123 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %101, i32 0, i32 11
  %comp_shift124 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info123, i32 0, i32 11
  %102 = bitcast [64 x i8]* %comp_shift124 to i8*
  %arraydecay125 = getelementptr inbounds [4 x i8], [4 x i8]* %comp_shift, i32 0, i32 0
  %call126 = call i8* @memcpy(i8* %102, i8* %arraydecay125, i64 4) #8
  %103 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs127 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %103, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs127, i32 0, i32 51
  %104 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %cmp128 = icmp eq i64 (%struct.gx_device_s*, i16*)* %104, @pdf14_compressed_encode_color
  br i1 %cmp128, label %land.lhs.true.130, label %if.end.147

land.lhs.true.130:                                ; preds = %do.end.100
  %105 = load i32, i32* %new_num_comps, align 4, !tbaa !5
  %cmp131 = icmp eq i32 %105, 1
  br i1 %cmp131, label %if.then.133, label %if.end.147

if.then.133:                                      ; preds = %land.lhs.true.130
  %106 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs134 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %106, i32 0, i32 1
  %107 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs134, align 8, !tbaa !450
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %107, i32 0, i32 52
  %108 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !483
  %109 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs135 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %109, i32 0, i32 42
  %decode_color136 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs135, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %108, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color136, align 8, !tbaa !298
  %110 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool137 = icmp ne i32 %110, 0
  br i1 %tobool137, label %if.then.138, label %if.else.141

if.then.138:                                      ; preds = %if.then.133
  %111 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs139 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %111, i32 0, i32 42
  %encode_color140 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs139, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color_tag, i64 (%struct.gx_device_s*, i16*)** %encode_color140, align 8, !tbaa !296
  br label %if.end.146

if.else.141:                                      ; preds = %if.then.133
  %112 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdevproto, align 8, !tbaa !1
  %static_procs142 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %112, i32 0, i32 1
  %113 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %static_procs142, align 8, !tbaa !450
  %encode_color143 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %113, i32 0, i32 51
  %114 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color143, align 8, !tbaa !484
  %115 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs144 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %115, i32 0, i32 42
  %encode_color145 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs144, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %114, i64 (%struct.gx_device_s*, i16*)** %encode_color145, align 8, !tbaa !296
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.141, %if.then.138
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %land.lhs.true.130, %do.end.100
  %116 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info148 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %116, i32 0, i32 11
  %depth149 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info148, i32 0, i32 3
  %117 = load i16, i16* %depth149, align 2, !tbaa !276
  %118 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %118, i32 0, i32 113
  %depth150 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info, i32 0, i32 3
  store i16 %117, i16* %depth150, align 2, !tbaa !568
  %119 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info151 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %119, i32 0, i32 11
  %polarity152 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info151, i32 0, i32 2
  %120 = load i32, i32* %polarity152, align 4, !tbaa !196
  %121 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info153 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %121, i32 0, i32 113
  %polarity154 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info153, i32 0, i32 2
  store i32 %120, i32* %polarity154, align 4, !tbaa !569
  %122 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info155 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %122, i32 0, i32 11
  %num_components156 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info155, i32 0, i32 1
  %123 = load i32, i32* %num_components156, align 4, !tbaa !150
  %124 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info157 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %124, i32 0, i32 113
  %num_components158 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info157, i32 0, i32 1
  store i32 %123, i32* %num_components158, align 4, !tbaa !570
  %125 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info159 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %125, i32 0, i32 11
  %max_color160 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info159, i32 0, i32 6
  %126 = load i32, i32* %max_color160, align 4, !tbaa !278
  %127 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info161 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %127, i32 0, i32 113
  %max_color162 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info161, i32 0, i32 6
  store i32 %126, i32* %max_color162, align 4, !tbaa !571
  %128 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info163 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %128, i32 0, i32 11
  %max_gray164 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info163, i32 0, i32 5
  %129 = load i32, i32* %max_gray164, align 4, !tbaa !280
  %130 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info165 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %130, i32 0, i32 113
  %max_gray166 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info165, i32 0, i32 5
  store i32 %129, i32* %max_gray166, align 4, !tbaa !572
  %131 = load i32, i32* %group_color.addr, align 4, !tbaa !66
  %cmp167 = icmp eq i32 %131, 5
  br i1 %cmp167, label %if.then.169, label %if.end.171

if.then.169:                                      ; preds = %if.end.147
  %132 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile.addr, align 8, !tbaa !1
  %133 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %133, i32 0, i32 39
  %134 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %134, i32 0, i32 0
  %arrayidx170 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  store %struct.cmm_profile_s* %132, %struct.cmm_profile_s** %arrayidx170, align 8, !tbaa !1
  br label %if.end.171

if.end.171:                                       ; preds = %if.then.169, %if.end.147
  %135 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %135, i32 0, i32 47
  %136 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %tobool172 = icmp ne %struct.pdf14_ctx_s* %136, null
  br i1 %tobool172, label %if.then.173, label %if.end.175

if.then.173:                                      ; preds = %if.end.171
  %137 = load i32, i32* %new_additive, align 4, !tbaa !5
  %138 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx174 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %138, i32 0, i32 47
  %139 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx174, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %139, i32 0, i32 4
  store i32 %137, i32* %additive, align 4, !tbaa !272
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.173, %if.end.171
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.176:                                       ; preds = %sw.epilog.91
  br label %do.body.177

do.body.177:                                      ; preds = %if.end.176
  br label %do.cond.178

do.cond.178:                                      ; preds = %do.body.177
  br label %do.end.179

do.end.179:                                       ; preds = %do.cond.178
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %do.end.179, %if.end.175, %sw.default.90, %sw.bb.89, %sw.default, %if.then
  %140 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %140) #2
  %141 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %141) #2
  %142 = bitcast %struct.cmm_profile_s** %icc_profile_dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %142) #2
  %143 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %143) #2
  %144 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %144) #2
  %145 = bitcast [4 x i8]* %comp_shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %145) #2
  %146 = bitcast [4 x i8]* %comp_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %146) #2
  call void @llvm.lifetime.end(i64 1, i8* %new_depth) #2
  %147 = bitcast i32* %new_additive to i8*
  call void @llvm.lifetime.end(i64 4, i8* %147) #2
  %148 = bitcast i32* %new_num_comps to i8*
  call void @llvm.lifetime.end(i64 4, i8* %148) #2
  %149 = bitcast i32* %new_polarity to i8*
  call void @llvm.lifetime.end(i64 4, i8* %149) #2
  %150 = bitcast i32* %update_color_info to i8*
  call void @llvm.lifetime.end(i64 4, i8* %150) #2
  %151 = bitcast %struct.pdf14_procs_s** %new_14procs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %151) #2
  %152 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %152) #2
  %153 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %153) #2
  %154 = bitcast %struct.pdf14_device_s** %pdevproto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %154) #2
  %155 = load i32, i32* %retval
  ret i32 %155
}

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_update_device_color_procs_pop_c(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis) #1 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %parent_color = alloca %struct.pdf14_parent_color_s*, align 8
  %cldev = alloca %struct.gx_device_clist_writer_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %trans_group_parent_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 70
  %5 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %trans_group_parent_cmap_procs, align 8, !tbaa !300
  store %struct.pdf14_parent_color_s* %5, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %7, i32 0, i32 58
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %9 = bitcast %struct.gx_device_s* %8 to %struct.gx_device_clist_writer_s*
  store %struct.gx_device_clist_writer_s* %9, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %10 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %10, i32 0, i32 9
  %11 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs, align 8, !tbaa !261
  %cmp = icmp eq %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %11, null
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %do.end
  %12 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %12, i32 0, i32 12
  %13 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index, align 8, !tbaa !263
  %cmp1 = icmp eq i32 (%struct.gx_device_s*, i8*, i32, i32)* %13, null
  br i1 %cmp1, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %do.end
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  br label %do.cond.3

do.cond.3:                                        ; preds = %do.body.2
  br label %do.end.4

do.end.4:                                         ; preds = %do.cond.3
  %14 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %14, i32 0, i32 8
  %15 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !264
  %16 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs5 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %16, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %15, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs5, align 8, !tbaa !265
  %17 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %17, %struct.gx_device_s* %18) #7
  %19 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_mapping_procs6 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %19, i32 0, i32 9
  %20 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %parent_color_mapping_procs6, align 8, !tbaa !261
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %20, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %22 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_color_comp_index7 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %22, i32 0, i32 12
  %23 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %parent_color_comp_index7, align 8, !tbaa !263
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs8 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %24, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs8, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %23, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %25 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %polarity = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %25, i32 0, i32 2
  %26 = load i32, i32* %polarity, align 4, !tbaa !268
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %27, i32 0, i32 11
  %polarity9 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 2
  store i32 %26, i32* %polarity9, align 4, !tbaa !196
  %28 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %depth = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %28, i32 0, i32 5
  %29 = load i8, i8* %depth, align 1, !tbaa !275
  %conv = zext i8 %29 to i16
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 11
  %depth11 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info10, i32 0, i32 3
  store i16 %conv, i16* %depth11, align 2, !tbaa !276
  %31 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %num_components = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %31, i32 0, i32 0
  %32 = load i32, i32* %num_components, align 4, !tbaa !269
  %33 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %33, i32 0, i32 11
  %num_components13 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info12, i32 0, i32 1
  store i32 %32, i32* %num_components13, align 4, !tbaa !150
  %34 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %parent_blending_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %34, i32 0, i32 14
  %35 = load %struct.pdf14_nonseparable_blending_procs_s*, %struct.pdf14_nonseparable_blending_procs_s** %parent_blending_procs, align 8, !tbaa !270
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %blend_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 46
  store %struct.pdf14_nonseparable_blending_procs_s* %35, %struct.pdf14_nonseparable_blending_procs_s** %blend_procs, align 8, !tbaa !230
  %37 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %unpack_procs = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %37, i32 0, i32 13
  %38 = load %struct.pdf14_procs_s*, %struct.pdf14_procs_s** %unpack_procs, align 8, !tbaa !273
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pdf14_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %39, i32 0, i32 45
  store %struct.pdf14_procs_s* %38, %struct.pdf14_procs_s** %pdf14_procs, align 8, !tbaa !274
  %40 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_color = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %40, i32 0, i32 7
  %41 = load i32, i32* %max_color, align 4, !tbaa !277
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info14 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 11
  %max_color15 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info14, i32 0, i32 6
  store i32 %41, i32* %max_color15, align 4, !tbaa !278
  %43 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %max_gray = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %43, i32 0, i32 6
  %44 = load i32, i32* %max_gray, align 4, !tbaa !279
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info16 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 11
  %max_gray17 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info16, i32 0, i32 5
  store i32 %44, i32* %max_gray17, align 4, !tbaa !280
  %46 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %encode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %46, i32 0, i32 10
  %47 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode, align 8, !tbaa !295
  %48 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %48, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs18, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %47, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %49 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %decode = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %49, i32 0, i32 11
  %50 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode, align 8, !tbaa !297
  %51 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs19 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %51, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs19, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %50, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !298
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info20 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 11
  %comp_bits = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info20, i32 0, i32 12
  %53 = bitcast [64 x i8]* %comp_bits to i8*
  %54 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_bits21 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %54, i32 0, i32 4
  %55 = bitcast [64 x i8]* %comp_bits21 to i8*
  %call = call i8* @memcpy(i8* %53, i8* %55, i64 64) #8
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info22 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %56, i32 0, i32 11
  %comp_shift = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info22, i32 0, i32 11
  %57 = bitcast [64 x i8]* %comp_shift to i8*
  %58 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_shift23 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %58, i32 0, i32 3
  %59 = bitcast [64 x i8]* %comp_shift23 to i8*
  %call24 = call i8* @memcpy(i8* %57, i8* %59, i64 64) #8
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %60, i32 0, i32 11
  %depth26 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info25, i32 0, i32 3
  %61 = load i16, i16* %depth26, align 2, !tbaa !276
  %62 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %62, i32 0, i32 113
  %depth27 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info, i32 0, i32 3
  store i16 %61, i16* %depth27, align 2, !tbaa !568
  %63 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info28 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %63, i32 0, i32 11
  %polarity29 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info28, i32 0, i32 2
  %64 = load i32, i32* %polarity29, align 4, !tbaa !196
  %65 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info30 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %65, i32 0, i32 113
  %polarity31 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info30, i32 0, i32 2
  store i32 %64, i32* %polarity31, align 4, !tbaa !569
  %66 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info32 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %66, i32 0, i32 11
  %num_components33 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info32, i32 0, i32 1
  %67 = load i32, i32* %num_components33, align 4, !tbaa !150
  %68 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info34 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %68, i32 0, i32 113
  %num_components35 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info34, i32 0, i32 1
  store i32 %67, i32* %num_components35, align 4, !tbaa !570
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info36 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 11
  %max_color37 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info36, i32 0, i32 6
  %70 = load i32, i32* %max_color37, align 4, !tbaa !278
  %71 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info38 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %71, i32 0, i32 113
  %max_color39 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info38, i32 0, i32 6
  store i32 %70, i32* %max_color39, align 4, !tbaa !571
  %72 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info40 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %72, i32 0, i32 11
  %max_gray41 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info40, i32 0, i32 5
  %73 = load i32, i32* %max_gray41, align 4, !tbaa !280
  %74 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info42 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %74, i32 0, i32 113
  %max_gray43 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info42, i32 0, i32 5
  store i32 %73, i32* %max_gray43, align 4, !tbaa !572
  %75 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info44 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %75, i32 0, i32 113
  %comp_bits45 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info44, i32 0, i32 12
  %76 = bitcast [64 x i8]* %comp_bits45 to i8*
  %77 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_bits46 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %77, i32 0, i32 4
  %78 = bitcast [64 x i8]* %comp_bits46 to i8*
  %call47 = call i8* @memcpy(i8* %76, i8* %78, i64 64) #8
  %79 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cldev, align 8, !tbaa !1
  %clist_color_info48 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %79, i32 0, i32 113
  %comp_shift49 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info48, i32 0, i32 11
  %80 = bitcast [64 x i8]* %comp_shift49 to i8*
  %81 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %comp_shift50 = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %81, i32 0, i32 3
  %82 = bitcast [64 x i8]* %comp_shift50 to i8*
  %call51 = call i8* @memcpy(i8* %80, i8* %82, i64 64) #8
  %83 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %83, i32 0, i32 47
  %84 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx, align 8, !tbaa !7
  %tobool = icmp ne %struct.pdf14_ctx_s* %84, null
  br i1 %tobool, label %if.then.52, label %if.end

if.then.52:                                       ; preds = %do.end.4
  %85 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %isadditive = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %85, i32 0, i32 1
  %86 = load i32, i32* %isadditive, align 4, !tbaa !271
  %87 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %ctx53 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %87, i32 0, i32 47
  %88 = load %struct.pdf14_ctx_s*, %struct.pdf14_ctx_s** %ctx53, align 8, !tbaa !7
  %additive = getelementptr inbounds %struct.pdf14_ctx_s, %struct.pdf14_ctx_s* %88, i32 0, i32 4
  store i32 %86, i32* %additive, align 4, !tbaa !272
  br label %if.end

if.end:                                           ; preds = %if.then.52, %do.end.4
  %89 = load %struct.pdf14_parent_color_s*, %struct.pdf14_parent_color_s** %parent_color, align 8, !tbaa !1
  %icc_profile = getelementptr inbounds %struct.pdf14_parent_color_s, %struct.pdf14_parent_color_s* %89, i32 0, i32 15
  %90 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %icc_profile, align 8, !tbaa !281
  %91 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %91, i32 0, i32 39
  %92 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !282
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %92, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  store %struct.cmm_profile_s* %90, %struct.cmm_profile_s** %arrayidx, align 8, !tbaa !1
  br label %do.body.54

do.body.54:                                       ; preds = %if.end
  br label %do.cond.55

do.cond.55:                                       ; preds = %do.body.54
  br label %do.end.56

do.end.56:                                        ; preds = %do.cond.55
  br label %if.end.60

if.else:                                          ; preds = %land.lhs.true
  br label %do.body.57

do.body.57:                                       ; preds = %if.else
  br label %do.cond.58

do.cond.58:                                       ; preds = %do.body.57
  br label %do.end.59

do.end.59:                                        ; preds = %do.cond.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59, %do.end.56
  %93 = bitcast %struct.gx_device_clist_writer_s** %cldev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %93) #2
  %94 = bitcast %struct.pdf14_parent_color_s** %parent_color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %94) #2
  %95 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %95) #2
  ret i32 0
}

declare i32 @gx_device_raster(%struct.gx_device_s*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @get_pdf14_clist_device_proto(%struct.gx_device_s* %dev, %struct.pdf14_device_s** %pdevproto, %struct.pdf14_device_s* %ptempdevproto, %struct.gs_imager_state_s* %pis, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdevproto.addr = alloca %struct.pdf14_device_s**, align 8
  %ptempdevproto.addr = alloca %struct.pdf14_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %dev_cs = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s** %pdevproto, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %ptempdevproto, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast i32* %dev_cs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_determine_default_blend_cs(%struct.gx_device_s* %1) #7
  store i32 %call, i32* %dev_cs, align 4, !tbaa !66
  %2 = load i32, i32* %dev_cs, align 4, !tbaa !66
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.7
    i32 2, label %sw.bb.8
    i32 3, label %sw.bb.9
    i32 4, label %sw.bb.31
  ]

sw.bb:                                            ; preds = %entry
  %3 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @pdf14_clist_Gray_device, %struct.pdf14_device_s** %3, align 8, !tbaa !1
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %5 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %6 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %5, align 8, !tbaa !1
  %7 = bitcast %struct.pdf14_device_s* %4 to i8*
  %8 = bitcast %struct.pdf14_device_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 11
  %max_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 0
  store i32 1, i32* %max_components, align 4, !tbaa !474
  %10 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %10, i32 0, i32 11
  %max_components2 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info1, i32 0, i32 0
  %11 = load i32, i32* %max_components2, align 4, !tbaa !474
  %12 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %12, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 1
  store i32 %11, i32* %num_components, align 4, !tbaa !150
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info4, i32 0, i32 5
  store i32 255, i32* %max_gray, align 4, !tbaa !280
  %14 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info5 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %14, i32 0, i32 11
  %gray_index = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info5, i32 0, i32 4
  store i8 0, i8* %gray_index, align 1, !tbaa !475
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 11
  %dither_grays = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info6, i32 0, i32 7
  store i32 256, i32* %dither_grays, align 4, !tbaa !476
  %16 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %17 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %16, %struct.pdf14_device_s** %17, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %18 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @pdf14_clist_RGB_device, %struct.pdf14_device_s** %18, align 8, !tbaa !1
  %19 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %20 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %20, align 8, !tbaa !1
  %22 = bitcast %struct.pdf14_device_s* %19 to i8*
  %23 = bitcast %struct.pdf14_device_s* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %25 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %24, %struct.pdf14_device_s** %25, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.8:                                          ; preds = %entry
  %26 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @pdf14_clist_CMYK_device, %struct.pdf14_device_s** %26, align 8, !tbaa !1
  %27 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %28 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %29 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %28, align 8, !tbaa !1
  %30 = bitcast %struct.pdf14_device_s* %27 to i8*
  %31 = bitcast %struct.pdf14_device_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %32 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %33 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %32, %struct.pdf14_device_s** %33, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry
  %34 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* @pdf14_clist_CMYKspot_device, %struct.pdf14_device_s** %34, align 8, !tbaa !1
  %35 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %36 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  %37 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %36, align 8, !tbaa !1
  %38 = bitcast %struct.pdf14_device_s* %35 to i8*
  %39 = bitcast %struct.pdf14_device_s* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 5024, i32 8, i1 false), !tbaa.struct !473
  %40 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %40, i32 0, i32 5
  %num_spot_colors = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 1
  %41 = load i32, i32* %num_spot_colors, align 4, !tbaa !477
  %cmp = icmp sge i32 %41, 0
  br i1 %cmp, label %if.then, label %if.end.30

if.then:                                          ; preds = %sw.bb.9
  %42 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params10 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %42, i32 0, i32 5
  %num_spot_colors11 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params10, i32 0, i32 1
  %43 = load i32, i32* %num_spot_colors11, align 4, !tbaa !477
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 44
  %page_spot_colors = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 4
  store i32 %43, i32* %page_spot_colors, align 4, !tbaa !151
  %45 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %devn_params12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %45, i32 0, i32 44
  %num_std_colorant_names = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params12, i32 0, i32 2
  %46 = load i32, i32* %num_std_colorant_names, align 4, !tbaa !152
  %47 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %params13 = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %47, i32 0, i32 5
  %num_spot_colors14 = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params13, i32 0, i32 1
  %48 = load i32, i32* %num_spot_colors14, align 4, !tbaa !477
  %add = add nsw i32 %46, %48
  %49 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %49, i32 0, i32 11
  %num_components16 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info15, i32 0, i32 1
  store i32 %add, i32* %num_components16, align 4, !tbaa !150
  %50 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info17 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %50, i32 0, i32 11
  %num_components18 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info17, i32 0, i32 1
  %51 = load i32, i32* %num_components18, align 4, !tbaa !150
  %52 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info19 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %52, i32 0, i32 11
  %max_components20 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info19, i32 0, i32 0
  %53 = load i32, i32* %max_components20, align 4, !tbaa !474
  %cmp21 = icmp sgt i32 %51, %53
  br i1 %cmp21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.then
  %54 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info23 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %54, i32 0, i32 11
  %max_components24 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info23, i32 0, i32 0
  %55 = load i32, i32* %max_components24, align 4, !tbaa !474
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %56, i32 0, i32 11
  %num_components26 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info25, i32 0, i32 1
  store i32 %55, i32* %num_components26, align 4, !tbaa !150
  br label %if.end

if.end:                                           ; preds = %if.then.22, %if.then
  %57 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info27 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %57, i32 0, i32 11
  %num_components28 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info27, i32 0, i32 1
  %58 = load i32, i32* %num_components28, align 4, !tbaa !150
  %mul = mul nsw i32 %58, 8
  %conv = trunc i32 %mul to i16
  %59 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info29 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %59, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info29, i32 0, i32 3
  store i16 %conv, i16* %depth, align 2, !tbaa !276
  br label %if.end.30

if.end.30:                                        ; preds = %if.end, %sw.bb.9
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %61 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %60, %struct.pdf14_device_s** %61, align 8, !tbaa !1
  br label %sw.epilog

sw.bb.31:                                         ; preds = %entry
  %62 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %63 = bitcast %struct.pdf14_device_s* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* bitcast (%struct.pdf14_device_s* @pdf14_clist_custom_device to i8*), i64 5024, i32 8, i1 false), !tbaa.struct !473
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info32 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 11
  %65 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info33 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %65, i32 0, i32 11
  %66 = bitcast %struct.gx_device_color_info_s* %color_info32 to i8*
  %67 = bitcast %struct.gx_device_color_info_s* %color_info33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %66, i8* %67, i64 720, i32 8, i1 false), !tbaa.struct !65
  %68 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info34 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %68, i32 0, i32 11
  %num_components35 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info34, i32 0, i32 1
  %69 = load i32, i32* %num_components35, align 4, !tbaa !150
  %mul36 = mul nsw i32 %69, 8
  %conv37 = trunc i32 %mul36 to i16
  %70 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info38 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %70, i32 0, i32 11
  %depth39 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info38, i32 0, i32 3
  store i16 %conv37, i16* %depth39, align 2, !tbaa !276
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info40 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %71, i32 0, i32 11
  %max_gray41 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info40, i32 0, i32 5
  store i32 255, i32* %max_gray41, align 4, !tbaa !280
  %72 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info42 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %72, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info42, i32 0, i32 6
  store i32 255, i32* %max_color, align 4, !tbaa !278
  %73 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info43 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %73, i32 0, i32 11
  %dither_grays44 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info43, i32 0, i32 7
  store i32 256, i32* %dither_grays44, align 4, !tbaa !476
  %74 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %color_info45 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %74, i32 0, i32 11
  %dither_colors = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info45, i32 0, i32 8
  store i32 256, i32* %dither_colors, align 4, !tbaa !478
  %75 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %ptempdevproto.addr, align 8, !tbaa !1
  %76 = load %struct.pdf14_device_s**, %struct.pdf14_device_s*** %pdevproto.addr, align 8, !tbaa !1
  store %struct.pdf14_device_s* %75, %struct.pdf14_device_s** %76, align 8, !tbaa !1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %sw.bb.31, %if.end.30, %sw.bb.8, %sw.bb.7, %sw.bb
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default
  %77 = bitcast i32* %dev_cs to i8*
  call void @llvm.lifetime.end(i64 4, i8* %77) #2
  %78 = load i32, i32* %retval
  ret i32 %78
}

declare void @gs_c_param_list_write(%struct.gs_c_param_list_s*, %struct.gs_memory_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @get_param_compressed_color_list_elem(%struct.pdf14_device_s* %pdev, %struct.gs_param_list_s* %plist, %struct.compressed_color_list_s* %pcomp_list, i8* %keyname, %struct.keyname_link_list_s** %pkeyname_list) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.pdf14_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pcomp_list.addr = alloca %struct.compressed_color_list_s*, align 8
  %keyname.addr = alloca i8*, align 8
  %pkeyname_list.addr = alloca %struct.keyname_link_list_s**, align 8
  %max_list_elem_size = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pdata = alloca i8*, align 8
  %str = alloca %struct.gs_param_string_s, align 8
  %cleanup.dest.slot = alloca i32
  %keyname_buf = alloca i8*, align 8
  %pkeyname_list_elem = alloca %struct.keyname_link_list_s*, align 8
  store %struct.pdf14_device_s* %pdev, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store %struct.compressed_color_list_s* %pcomp_list, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  store i8* %keyname, i8** %keyname.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s** %pkeyname_list, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  %0 = bitcast i32* %max_list_elem_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 6150, i32* %max_list_elem_size, align 4, !tbaa !5
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i8** %pdata to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct.compressed_color_list_s* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %6, i32 0, i32 3
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %7, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %8 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %9 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory1 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %9, i32 0, i32 3
  %10 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory1, align 8, !tbaa !225
  %11 = load i32, i32* %max_list_elem_size, align 4, !tbaa !5
  %call = call i8* %8(%struct.gs_memory_s* %10, i32 %11, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i32 0, i32 0)) #7
  store i8* %call, i8** %pdata, align 8, !tbaa !1
  %12 = load i8*, i8** %pdata, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  store i8* %12, i8** %data, align 8, !tbaa !177
  %persistent = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 2
  store i32 0, i32* %persistent, align 4, !tbaa !573
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %j, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %13, 2
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %num_sub_level_ptrs = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %14, i32 0, i32 2
  %15 = load i32, i32* %num_sub_level_ptrs, align 4, !tbaa !179
  %16 = load i32, i32* %j, align 4, !tbaa !5
  %mul = mul nsw i32 %16, 8
  %shr = ashr i32 %15, %mul
  %conv = trunc i32 %shr to i8
  %17 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %pdata, align 8, !tbaa !1
  store i8 %conv, i8* %17, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %j, align 4, !tbaa !5
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.11, %for.end
  %19 = load i32, i32* %j, align 4, !tbaa !5
  %cmp4 = icmp slt i32 %19, 2
  br i1 %cmp4, label %for.body.6, label %for.end.13

for.body.6:                                       ; preds = %for.cond.3
  %20 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %first_bit_map = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %20, i32 0, i32 3
  %21 = load i32, i32* %first_bit_map, align 4, !tbaa !181
  %22 = load i32, i32* %j, align 4, !tbaa !5
  %mul7 = mul nsw i32 %22, 8
  %shr8 = ashr i32 %21, %mul7
  %conv9 = trunc i32 %shr8 to i8
  %23 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %pdata, align 8, !tbaa !1
  store i8 %conv9, i8* %23, align 1, !tbaa !66
  br label %for.inc.11

for.inc.11:                                       ; preds = %for.body.6
  %24 = load i32, i32* %j, align 4, !tbaa !5
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4, !tbaa !5
  br label %for.cond.3

for.end.13:                                       ; preds = %for.cond.3
  %25 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %first_bit_map14 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %25, i32 0, i32 3
  %26 = load i32, i32* %first_bit_map14, align 4, !tbaa !181
  store i32 %26, i32* %i, align 4, !tbaa !5
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.111, %for.end.13
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %cmp16 = icmp slt i32 %27, 256
  br i1 %cmp16, label %for.body.18, label %for.end.113

for.body.18:                                      ; preds = %for.cond.15
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.28, %for.body.18
  %28 = load i32, i32* %j, align 4, !tbaa !5
  %cmp20 = icmp slt i32 %28, 2
  br i1 %cmp20, label %for.body.22, label %for.end.30

for.body.22:                                      ; preds = %for.cond.19
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %29 to i64
  %30 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %30, i32 0, i32 4
  %comp_data = bitcast %union.anon.13* %u to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data, i32 0, i64 %idxprom
  %num_comp = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx, i32 0, i32 0
  %31 = load i16, i16* %num_comp, align 2, !tbaa !182
  %conv23 = sext i16 %31 to i32
  %32 = load i32, i32* %j, align 4, !tbaa !5
  %mul24 = mul nsw i32 %32, 8
  %shr25 = ashr i32 %conv23, %mul24
  %conv26 = trunc i32 %shr25 to i8
  %33 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr27 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr27, i8** %pdata, align 8, !tbaa !1
  store i8 %conv26, i8* %33, align 1, !tbaa !66
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.body.22
  %34 = load i32, i32* %j, align 4, !tbaa !5
  %inc29 = add nsw i32 %34, 1
  store i32 %inc29, i32* %j, align 4, !tbaa !5
  br label %for.cond.19

for.end.30:                                       ; preds = %for.cond.19
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.44, %for.end.30
  %35 = load i32, i32* %j, align 4, !tbaa !5
  %cmp32 = icmp slt i32 %35, 2
  br i1 %cmp32, label %for.body.34, label %for.end.46

for.body.34:                                      ; preds = %for.cond.31
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom35 = sext i32 %36 to i64
  %37 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u36 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %37, i32 0, i32 4
  %comp_data37 = bitcast %union.anon.13* %u36 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx38 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data37, i32 0, i64 %idxprom35
  %num_non_solid_comp = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx38, i32 0, i32 1
  %38 = load i16, i16* %num_non_solid_comp, align 2, !tbaa !184
  %conv39 = sext i16 %38 to i32
  %39 = load i32, i32* %j, align 4, !tbaa !5
  %mul40 = mul nsw i32 %39, 8
  %shr41 = ashr i32 %conv39, %mul40
  %conv42 = trunc i32 %shr41 to i8
  %40 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr43 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr43, i8** %pdata, align 8, !tbaa !1
  store i8 %conv42, i8* %40, align 1, !tbaa !66
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.body.34
  %41 = load i32, i32* %j, align 4, !tbaa !5
  %inc45 = add nsw i32 %41, 1
  store i32 %inc45, i32* %j, align 4, !tbaa !5
  br label %for.cond.31

for.end.46:                                       ; preds = %for.cond.31
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.59, %for.end.46
  %42 = load i32, i32* %j, align 4, !tbaa !5
  %cmp48 = icmp slt i32 %42, 1
  br i1 %cmp48, label %for.body.50, label %for.end.61

for.body.50:                                      ; preds = %for.cond.47
  %43 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom51 = sext i32 %43 to i64
  %44 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u52 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %44, i32 0, i32 4
  %comp_data53 = bitcast %union.anon.13* %u52 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx54 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data53, i32 0, i64 %idxprom51
  %solid_not_100 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx54, i32 0, i32 2
  %45 = load i32, i32* %solid_not_100, align 4, !tbaa !185
  %46 = load i32, i32* %j, align 4, !tbaa !5
  %mul55 = mul nsw i32 %46, 8
  %shr56 = ashr i32 %45, %mul55
  %conv57 = trunc i32 %shr56 to i8
  %47 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr58 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr58, i8** %pdata, align 8, !tbaa !1
  store i8 %conv57, i8* %47, align 1, !tbaa !66
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.50
  %48 = load i32, i32* %j, align 4, !tbaa !5
  %inc60 = add nsw i32 %48, 1
  store i32 %inc60, i32* %j, align 4, !tbaa !5
  br label %for.cond.47

for.end.61:                                       ; preds = %for.cond.47
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.75, %for.end.61
  %49 = load i32, i32* %j, align 4, !tbaa !5
  %conv63 = sext i32 %49 to i64
  %cmp64 = icmp ult i64 %conv63, 8
  br i1 %cmp64, label %for.body.66, label %for.end.77

for.body.66:                                      ; preds = %for.cond.62
  %50 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom67 = sext i32 %50 to i64
  %51 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u68 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %51, i32 0, i32 4
  %comp_data69 = bitcast %union.anon.13* %u68 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx70 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data69, i32 0, i64 %idxprom67
  %colorants = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx70, i32 0, i32 3
  %52 = load i64, i64* %colorants, align 8, !tbaa !186
  %53 = load i32, i32* %j, align 4, !tbaa !5
  %mul71 = mul nsw i32 %53, 8
  %sh_prom = zext i32 %mul71 to i64
  %shr72 = lshr i64 %52, %sh_prom
  %conv73 = trunc i64 %shr72 to i8
  %54 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr74 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr74, i8** %pdata, align 8, !tbaa !1
  store i8 %conv73, i8* %54, align 1, !tbaa !66
  br label %for.inc.75

for.inc.75:                                       ; preds = %for.body.66
  %55 = load i32, i32* %j, align 4, !tbaa !5
  %inc76 = add nsw i32 %55, 1
  store i32 %inc76, i32* %j, align 4, !tbaa !5
  br label %for.cond.62

for.end.77:                                       ; preds = %for.cond.62
  %56 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom78 = sext i32 %56 to i64
  %57 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u79 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %57, i32 0, i32 4
  %comp_data80 = bitcast %union.anon.13* %u79 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx81 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data80, i32 0, i64 %idxprom78
  %num_comp82 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx81, i32 0, i32 0
  %58 = load i16, i16* %num_comp82, align 2, !tbaa !182
  %conv83 = sext i16 %58 to i32
  %59 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom84 = sext i32 %59 to i64
  %60 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u85 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %60, i32 0, i32 4
  %comp_data86 = bitcast %union.anon.13* %u85 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx87 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data86, i32 0, i64 %idxprom84
  %num_non_solid_comp88 = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx87, i32 0, i32 1
  %61 = load i16, i16* %num_non_solid_comp88, align 2, !tbaa !184
  %conv89 = sext i16 %61 to i32
  %cmp90 = icmp ne i32 %conv83, %conv89
  br i1 %cmp90, label %if.then.92, label %if.end.110

if.then.92:                                       ; preds = %for.end.77
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.93

for.cond.93:                                      ; preds = %for.inc.107, %if.then.92
  %62 = load i32, i32* %j, align 4, !tbaa !5
  %conv94 = sext i32 %62 to i64
  %cmp95 = icmp ult i64 %conv94, 8
  br i1 %cmp95, label %for.body.97, label %for.end.109

for.body.97:                                      ; preds = %for.cond.93
  %63 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom98 = sext i32 %63 to i64
  %64 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u99 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %64, i32 0, i32 4
  %comp_data100 = bitcast %union.anon.13* %u99 to [256 x %struct.comp_bit_map_list_s]*
  %arrayidx101 = getelementptr inbounds [256 x %struct.comp_bit_map_list_s], [256 x %struct.comp_bit_map_list_s]* %comp_data100, i32 0, i64 %idxprom98
  %solid_colorants = getelementptr inbounds %struct.comp_bit_map_list_s, %struct.comp_bit_map_list_s* %arrayidx101, i32 0, i32 4
  %65 = load i64, i64* %solid_colorants, align 8, !tbaa !187
  %66 = load i32, i32* %j, align 4, !tbaa !5
  %mul102 = mul nsw i32 %66, 8
  %sh_prom103 = zext i32 %mul102 to i64
  %shr104 = lshr i64 %65, %sh_prom103
  %conv105 = trunc i64 %shr104 to i8
  %67 = load i8*, i8** %pdata, align 8, !tbaa !1
  %incdec.ptr106 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr106, i8** %pdata, align 8, !tbaa !1
  store i8 %conv105, i8* %67, align 1, !tbaa !66
  br label %for.inc.107

for.inc.107:                                      ; preds = %for.body.97
  %68 = load i32, i32* %j, align 4, !tbaa !5
  %inc108 = add nsw i32 %68, 1
  store i32 %inc108, i32* %j, align 4, !tbaa !5
  br label %for.cond.93

for.end.109:                                      ; preds = %for.cond.93
  br label %if.end.110

if.end.110:                                       ; preds = %for.end.109, %for.end.77
  br label %for.inc.111

for.inc.111:                                      ; preds = %if.end.110
  %69 = load i32, i32* %i, align 4, !tbaa !5
  %inc112 = add nsw i32 %69, 1
  store i32 %inc112, i32* %i, align 4, !tbaa !5
  br label %for.cond.15

for.end.113:                                      ; preds = %for.cond.15
  %70 = load i8*, i8** %pdata, align 8, !tbaa !1
  %data114 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  %71 = load i8*, i8** %data114, align 8, !tbaa !177
  %sub.ptr.lhs.cast = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %71 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv115 = trunc i64 %sub.ptr.sub to i32
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 1
  store i32 %conv115, i32* %size, align 4, !tbaa !188
  %72 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %73 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %call116 = call i32 @param_write_string(%struct.gs_param_list_s* %72, i8* %73, %struct.gs_param_string_s* %str) #7
  %74 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory117 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %74, i32 0, i32 3
  %75 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory117, align 8, !tbaa !225
  %procs118 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %75, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs118, i32 0, i32 2
  %76 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %77 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory119 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %77, i32 0, i32 3
  %78 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory119, align 8, !tbaa !225
  %data120 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  %79 = load i8*, i8** %data120, align 8, !tbaa !177
  call void %76(%struct.gs_memory_s* %78, i8* %79, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i32 0, i32 0)) #7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.121

for.cond.121:                                     ; preds = %for.inc.142, %for.end.113
  %80 = load i32, i32* %i, align 4, !tbaa !5
  %81 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %num_sub_level_ptrs122 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %81, i32 0, i32 2
  %82 = load i32, i32* %num_sub_level_ptrs122, align 4, !tbaa !179
  %cmp123 = icmp slt i32 %80, %82
  br i1 %cmp123, label %for.body.125, label %for.end.144

for.body.125:                                     ; preds = %for.cond.121
  %83 = bitcast i8** %keyname_buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %83) #2
  %84 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory126 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %84, i32 0, i32 3
  %85 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory126, align 8, !tbaa !225
  %procs127 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %85, i32 0, i32 1
  %alloc_bytes128 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs127, i32 0, i32 7
  %86 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes128, align 8, !tbaa !53
  %87 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory129 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %87, i32 0, i32 3
  %88 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory129, align 8, !tbaa !225
  %89 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %call130 = call i64 @strlen(i8* %89) #10
  %add = add i64 %call130, 10
  %conv131 = trunc i64 %add to i32
  %call132 = call i8* %86(%struct.gs_memory_s* %88, i32 %conv131, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i32 0, i32 0)) #7
  store i8* %call132, i8** %keyname_buf, align 8, !tbaa !1
  %90 = bitcast %struct.keyname_link_list_s** %pkeyname_list_elem to i8*
  call void @llvm.lifetime.start(i64 8, i8* %90) #2
  %91 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory133 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %91, i32 0, i32 3
  %92 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory133, align 8, !tbaa !225
  %procs134 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %92, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs134, i32 0, i32 8
  %93 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %94 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory135 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %94, i32 0, i32 3
  %95 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory135, align 8, !tbaa !225
  %call136 = call i8* %93(%struct.gs_memory_s* %95, %struct.gs_memory_struct_type_s* @st_keyname_link_list, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i32 0, i32 0)) #7
  %96 = bitcast i8* %call136 to %struct.keyname_link_list_s*
  store %struct.keyname_link_list_s* %96, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %97 = load %struct.keyname_link_list_s**, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  %98 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %97, align 8, !tbaa !1
  %99 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.keyname_link_list_s, %struct.keyname_link_list_s* %99, i32 0, i32 0
  store %struct.keyname_link_list_s* %98, %struct.keyname_link_list_s** %next, align 8, !tbaa !574
  %100 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %101 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %key_name = getelementptr inbounds %struct.keyname_link_list_s, %struct.keyname_link_list_s* %101, i32 0, i32 1
  store i8* %100, i8** %key_name, align 8, !tbaa !576
  %102 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %103 = load %struct.keyname_link_list_s**, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s* %102, %struct.keyname_link_list_s** %103, align 8, !tbaa !1
  %104 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %105 = load i8*, i8** %keyname.addr, align 8, !tbaa !1
  %106 = load i32, i32* %i, align 4, !tbaa !5
  %call137 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %104, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* %105, i32 %106) #7
  %107 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %108 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %109 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom138 = sext i32 %109 to i64
  %110 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %pcomp_list.addr, align 8, !tbaa !1
  %u139 = getelementptr inbounds %struct.compressed_color_list_s, %struct.compressed_color_list_s* %110, i32 0, i32 4
  %sub_level_ptrs = bitcast %union.anon.13* %u139 to [256 x %struct.compressed_color_list_s*]*
  %arrayidx140 = getelementptr inbounds [256 x %struct.compressed_color_list_s*], [256 x %struct.compressed_color_list_s*]* %sub_level_ptrs, i32 0, i64 %idxprom138
  %111 = load %struct.compressed_color_list_s*, %struct.compressed_color_list_s** %arrayidx140, align 8, !tbaa !1
  %112 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %113 = load %struct.keyname_link_list_s**, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  %call141 = call i32 @get_param_compressed_color_list_elem(%struct.pdf14_device_s* %107, %struct.gs_param_list_s* %108, %struct.compressed_color_list_s* %111, i8* %112, %struct.keyname_link_list_s** %113) #7
  %114 = bitcast %struct.keyname_link_list_s** %pkeyname_list_elem to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #2
  %115 = bitcast i8** %keyname_buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #2
  br label %for.inc.142

for.inc.142:                                      ; preds = %for.body.125
  %116 = load i32, i32* %i, align 4, !tbaa !5
  %inc143 = add nsw i32 %116, 1
  store i32 %inc143, i32* %i, align 4, !tbaa !5
  br label %for.cond.121

for.end.144:                                      ; preds = %for.cond.121
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.144, %if.then
  %117 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.end(i64 16, i8* %117) #2
  %118 = bitcast i8** %pdata to i8*
  call void @llvm.lifetime.end(i64 8, i8* %118) #2
  %119 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %119) #2
  %120 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %120) #2
  %121 = bitcast i32* %max_list_elem_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %121) #2
  %122 = load i32, i32* %retval
  ret i32 %122
}

; Function Attrs: nounwind uwtable
define internal i32 @get_param_spot_color_names(%struct.pdf14_device_s* %pdev, %struct.gs_param_list_s* %plist, %struct.keyname_link_list_s** %pkeyname_list) #1 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.pdf14_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %pkeyname_list.addr = alloca %struct.keyname_link_list_s**, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %str = alloca %struct.gs_param_string_s, align 8
  %separations = alloca %struct.gs_separations_s*, align 8
  %num_spot_colors = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %keyname_buf = alloca i8*, align 8
  %pkeyname_list_elem = alloca %struct.keyname_link_list_s*, align 8
  store %struct.pdf14_device_s* %pdev, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s** %pkeyname_list, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %code, align 4, !tbaa !5
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.start(i64 16, i8* %2) #2
  %3 = bitcast %struct.gs_separations_s** %separations to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %devn_params = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 44
  %separations1 = getelementptr inbounds %struct.gs_devn_params_s, %struct.gs_devn_params_s* %devn_params, i32 0, i32 5
  store %struct.gs_separations_s* %separations1, %struct.gs_separations_s** %separations, align 8, !tbaa !1
  %5 = bitcast i32* %num_spot_colors to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load %struct.gs_separations_s*, %struct.gs_separations_s** %separations, align 8, !tbaa !1
  %num_separations = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %6, i32 0, i32 0
  %7 = load i32, i32* %num_separations, align 4, !tbaa !192
  store i32 %7, i32* %num_spot_colors, align 4, !tbaa !5
  %8 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %cmp = icmp eq i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @param_write_int(%struct.gs_param_list_s* %9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i32 0, i32 0), i32* %num_spot_colors) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %10 = load i32, i32* %code, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %10, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %11 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %11, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %12 = load i32, i32* %i, align 4, !tbaa !5
  %13 = load i32, i32* %num_spot_colors, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %12, %13
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = bitcast i8** %keyname_buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  %15 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %15, i32 0, i32 3
  %16 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !225
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %16, i32 0, i32 1
  %alloc_bytes = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 7
  %17 = load i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)** %alloc_bytes, align 8, !tbaa !53
  %18 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %18, i32 0, i32 3
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory6, align 8, !tbaa !225
  %call7 = call i64 @strlen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0)) #10
  %add = add i64 %call7, 10
  %conv = trunc i64 %add to i32
  %call8 = call i8* %17(%struct.gs_memory_s* %19, i32 %conv, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.72, i32 0, i32 0)) #7
  store i8* %call8, i8** %keyname_buf, align 8, !tbaa !1
  %20 = bitcast %struct.keyname_link_list_s** %pkeyname_list_elem to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #2
  %21 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory9 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %21, i32 0, i32 3
  %22 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory9, align 8, !tbaa !225
  %procs10 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %22, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs10, i32 0, i32 8
  %23 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !167
  %24 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev.addr, align 8, !tbaa !1
  %memory11 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %24, i32 0, i32 3
  %25 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory11, align 8, !tbaa !225
  %call12 = call i8* %23(%struct.gs_memory_s* %25, %struct.gs_memory_struct_type_s* @st_keyname_link_list, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.72, i32 0, i32 0)) #7
  %26 = bitcast i8* %call12 to %struct.keyname_link_list_s*
  store %struct.keyname_link_list_s* %26, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %27 = load %struct.keyname_link_list_s**, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  %28 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %27, align 8, !tbaa !1
  %29 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.keyname_link_list_s, %struct.keyname_link_list_s* %29, i32 0, i32 0
  store %struct.keyname_link_list_s* %28, %struct.keyname_link_list_s** %next, align 8, !tbaa !574
  %30 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %31 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %key_name = getelementptr inbounds %struct.keyname_link_list_s, %struct.keyname_link_list_s* %31, i32 0, i32 1
  store i8* %30, i8** %key_name, align 8, !tbaa !576
  %32 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pkeyname_list_elem, align 8, !tbaa !1
  %33 = load %struct.keyname_link_list_s**, %struct.keyname_link_list_s*** %pkeyname_list.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s* %32, %struct.keyname_link_list_s** %33, align 8, !tbaa !1
  %34 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %35 = load i32, i32* %i, align 4, !tbaa !5
  %call13 = call i32 (i8*, i8*, ...) @gs_sprintf(i8* %34, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i32 %35) #7
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %36 to i64
  %37 = load %struct.gs_separations_s*, %struct.gs_separations_s** %separations, align 8, !tbaa !1
  %names = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %37, i32 0, i32 1
  %arrayidx = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names, i32 0, i64 %idxprom
  %size = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx, i32 0, i32 0
  %38 = load i32, i32* %size, align 4, !tbaa !189
  %size14 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 1
  store i32 %38, i32* %size14, align 4, !tbaa !188
  %39 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom15 = sext i32 %39 to i64
  %40 = load %struct.gs_separations_s*, %struct.gs_separations_s** %separations, align 8, !tbaa !1
  %names16 = getelementptr inbounds %struct.gs_separations_s, %struct.gs_separations_s* %40, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [64 x %struct.devn_separation_name_s], [64 x %struct.devn_separation_name_s]* %names16, i32 0, i64 %idxprom15
  %data = getelementptr inbounds %struct.devn_separation_name_s, %struct.devn_separation_name_s* %arrayidx17, i32 0, i32 1
  %41 = load i8*, i8** %data, align 8, !tbaa !191
  %data18 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 0
  store i8* %41, i8** %data18, align 8, !tbaa !177
  %persistent = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %str, i32 0, i32 2
  store i32 0, i32* %persistent, align 4, !tbaa !573
  %42 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %43 = load i8*, i8** %keyname_buf, align 8, !tbaa !1
  %call19 = call i32 @param_write_string(%struct.gs_param_list_s* %42, i8* %43, %struct.gs_param_string_s* %str) #7
  store i32 %call19, i32* %code, align 4, !tbaa !5
  %44 = bitcast %struct.keyname_link_list_s** %pkeyname_list_elem to i8*
  call void @llvm.lifetime.end(i64 8, i8* %44) #2
  %45 = bitcast i8** %keyname_buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %46 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %47, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then.3, %if.then
  %48 = bitcast i32* %num_spot_colors to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #2
  %49 = bitcast %struct.gs_separations_s** %separations to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = bitcast %struct.gs_param_string_s* %str to i8*
  call void @llvm.lifetime.end(i64 16, i8* %50) #2
  %51 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  %52 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = load i32, i32* %retval
  ret i32 %53
}

declare void @gs_c_param_list_read(%struct.gs_c_param_list_s*) #0

declare void @gs_c_param_list_release(%struct.gs_c_param_list_s*) #0

; Function Attrs: nounwind uwtable
define internal i32 @free_temp_keyname_list(%struct.gs_memory_s* %mem, %struct.keyname_link_list_s* %plist) #1 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %plist.addr = alloca %struct.keyname_link_list_s*, align 8
  %pthis_elem = alloca %struct.keyname_link_list_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s* %plist, %struct.keyname_link_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast %struct.keyname_link_list_s** %pthis_elem to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %plist.addr, align 8, !tbaa !1
  %cmp = icmp ne %struct.keyname_link_list_s* %1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %plist.addr, align 8, !tbaa !1
  store %struct.keyname_link_list_s* %2, %struct.keyname_link_list_s** %pthis_elem, align 8, !tbaa !1
  %3 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %plist.addr, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.keyname_link_list_s, %struct.keyname_link_list_s* %3, i32 0, i32 0
  %4 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %next, align 8, !tbaa !574
  store %struct.keyname_link_list_s* %4, %struct.keyname_link_list_s** %plist.addr, align 8, !tbaa !1
  %5 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %5, i32 0, i32 1
  %free_object = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 2
  %6 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free_object, align 8, !tbaa !166
  %7 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %8 = load %struct.keyname_link_list_s*, %struct.keyname_link_list_s** %pthis_elem, align 8, !tbaa !1
  %9 = bitcast %struct.keyname_link_list_s* %8 to i8*
  call void %6(%struct.gs_memory_s* %7, i8* %9, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.73, i32 0, i32 0)) #7
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = bitcast %struct.keyname_link_list_s** %pthis_elem to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #2
  ret i32 0
}

declare i32 @param_write_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #0

declare i32 @param_write_int(%struct.gs_param_list_s*, i8*, i32*) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_clist_forward_create_compositor(%struct.gx_device_s* %dev, %struct.gx_device_s** %pcdev, %struct.gs_composite_s* %pct, %struct.gs_imager_state_s* %pis, %struct.gs_memory_s* %mem, %struct.gx_device_s* %cdev) #1 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %pct.addr = alloca %struct.gs_composite_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %cdev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %tdev = alloca %struct.gx_device_s*, align 8
  %ndev = alloca %struct.gx_device_s*, align 8
  %code = alloca i32, align 4
  %pdf14pct = alloca %struct.gs_pdf14trans_s*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gs_composite_s* %pct, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %cdev, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %2, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %target = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %4, i32 0, i32 43
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target, align 8, !tbaa !82
  store %struct.gx_device_s* %5, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_s** %ndev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %8, %struct.gx_device_s** %9, align 8, !tbaa !1
  %10 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %call = call i32 @gs_is_pdf14trans_compositor(%struct.gs_composite_s* %10) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %11 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %13 = bitcast %struct.gs_composite_s* %12 to %struct.gs_pdf14trans_s*
  store %struct.gs_pdf14trans_s* %13, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %14 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_pdf14trans_s, %struct.gs_pdf14trans_s* %14, i32 0, i32 5
  %pdf14_op = getelementptr inbounds %struct.gs_pdf14trans_params_s, %struct.gs_pdf14trans_params_s* %params, i32 0, i32 0
  %15 = load i32, i32* %pdf14_op, align 4, !tbaa !83
  %cmp = icmp eq i32 %15, 0
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %17 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %19 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call2 = call i32 @pdf14_clist_create_compositor(%struct.gx_device_s* %16, %struct.gx_device_s** %ndev, %struct.gs_composite_s* %17, %struct.gs_imager_state_s* %18, %struct.gs_memory_s* %19, %struct.gx_device_s* %20) #7
  store i32 %call2, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.1
  %21 = bitcast %struct.gs_pdf14trans_s** %pdf14pct to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #2
  br label %cleanup.8

if.end.3:                                         ; preds = %entry
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 42
  %create_compositor = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 40
  %23 = load i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)** %create_compositor, align 8, !tbaa !69
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %tdev, align 8, !tbaa !1
  %25 = load %struct.gs_composite_s*, %struct.gs_composite_s** %pct.addr, align 8, !tbaa !1
  %26 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %27 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %cdev.addr, align 8, !tbaa !1
  %call4 = call i32 %23(%struct.gx_device_s* %24, %struct.gx_device_s** %ndev, %struct.gs_composite_s* %25, %struct.gs_imager_state_s* %26, %struct.gs_memory_s* %27, %struct.gx_device_s* %28) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %29 = load i32, i32* %code, align 4, !tbaa !5
  %cmp5 = icmp slt i32 %29, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  %30 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %30, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.8

if.end.7:                                         ; preds = %if.end.3
  %31 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %32 = bitcast %struct.pdf14_device_s* %31 to %struct.gx_device_forward_s*
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %ndev, align 8, !tbaa !1
  call void @gx_device_set_target(%struct.gx_device_forward_s* %32, %struct.gx_device_s* %33) #7
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.8

cleanup.8:                                        ; preds = %if.end.7, %if.then.6, %cleanup
  %34 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %34) #2
  %35 = bitcast %struct.gx_device_s** %ndev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #2
  %36 = bitcast %struct.gx_device_s** %tdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #2
  %37 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #2
  %38 = load i32, i32* %retval
  ret i32 %38
}

declare i32 @gx_forward_text_begin(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**) #0

; Function Attrs: nounwind uwtable
define internal i32 @gs_pdf14_clist_device_push(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s** %pcdev, %struct.gx_device_s* %dev, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pcdev.addr = alloca %struct.gx_device_s**, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %code = alloca i32, align 4
  %p14dev = alloca %struct.pdf14_device_s*, align 8
  %cdev = alloca %struct.gx_device_clist_writer_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %pcdev, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast %struct.gx_device_clist_writer_s** %cdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_s* %3 to %union.gx_device_clist_s*
  %writer = bitcast %union.gx_device_clist_s* %4 to %struct.gx_device_clist_writer_s*
  store %struct.gx_device_clist_writer_s* %writer, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %5 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %7 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %9 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call = call i32 @pdf14_create_clist_device(%struct.gs_memory_s* %5, %struct.gs_imager_state_s* %6, %struct.gx_device_s** %7, %struct.gx_device_s* %8, %struct.gs_pdf14trans_s* %9) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %10 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_s* %11 to %struct.pdf14_device_s*
  store %struct.pdf14_device_s* %12, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %13 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %13, i32 0, i32 61
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %14, i32 0, i32 11
  %15 = bitcast %struct.gx_device_color_info_s* %saved_target_color_info to i8*
  %16 = bitcast %struct.gx_device_color_info_s* %color_info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 720, i32 8, i1 false), !tbaa.struct !65
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 11
  %18 = load %struct.gx_device_s**, %struct.gx_device_s*** %pcdev.addr, align 8, !tbaa !1
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %18, align 8, !tbaa !1
  %color_info2 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %19, i32 0, i32 11
  %20 = bitcast %struct.gx_device_color_info_s* %color_info1 to i8*
  %21 = bitcast %struct.gx_device_color_info_s* %color_info2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 720, i32 8, i1 false), !tbaa.struct !65
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 11
  %anti_alias = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info3, i32 0, i32 9
  %23 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_color_info4 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %23, i32 0, i32 61
  %anti_alias5 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %saved_target_color_info4, i32 0, i32 9
  %24 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias to i8*
  %25 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 8, i32 4, i1 false), !tbaa.struct !530
  %26 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info6 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %26, i32 0, i32 11
  %anti_alias7 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info6, i32 0, i32 9
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info8 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 11
  %anti_alias9 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info8, i32 0, i32 9
  %28 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias7 to i8*
  %29 = bitcast %struct.gx_device_anti_alias_info_s* %anti_alias9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 8, i32 4, i1 false), !tbaa.struct !530
  %30 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info10 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %30, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info10, i32 0, i32 3
  %31 = load i16, i16* %depth, align 2, !tbaa !276
  %32 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %clist_color_info = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %32, i32 0, i32 113
  %depth11 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info, i32 0, i32 3
  store i16 %31, i16* %depth11, align 2, !tbaa !568
  %33 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info12 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %33, i32 0, i32 11
  %polarity = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info12, i32 0, i32 2
  %34 = load i32, i32* %polarity, align 4, !tbaa !196
  %35 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %clist_color_info13 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %35, i32 0, i32 113
  %polarity14 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info13, i32 0, i32 2
  store i32 %34, i32* %polarity14, align 4, !tbaa !569
  %36 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %36, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info15, i32 0, i32 1
  %37 = load i32, i32* %num_components, align 4, !tbaa !150
  %38 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %clist_color_info16 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %38, i32 0, i32 113
  %num_components17 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info16, i32 0, i32 1
  store i32 %37, i32* %num_components17, align 4, !tbaa !570
  %39 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %39, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info18, i32 0, i32 6
  %40 = load i32, i32* %max_color, align 4, !tbaa !278
  %41 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %clist_color_info19 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %41, i32 0, i32 113
  %max_color20 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info19, i32 0, i32 6
  store i32 %40, i32* %max_color20, align 4, !tbaa !571
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %color_info21 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info21, i32 0, i32 5
  %43 = load i32, i32* %max_gray, align 4, !tbaa !280
  %44 = load %struct.gx_device_clist_writer_s*, %struct.gx_device_clist_writer_s** %cdev, align 8, !tbaa !1
  %clist_color_info22 = getelementptr inbounds %struct.gx_device_clist_writer_s, %struct.gx_device_clist_writer_s* %44, i32 0, i32 113
  %max_gray23 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %clist_color_info22, i32 0, i32 5
  store i32 %43, i32* %max_gray23, align 4, !tbaa !572
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 51
  %46 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !487
  %47 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_encode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %47, i32 0, i32 62
  store i64 (%struct.gx_device_s*, i16*)* %46, i64 (%struct.gx_device_s*, i16*)** %saved_target_encode_color, align 8, !tbaa !549
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs24 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs24, i32 0, i32 52
  %49 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !550
  %50 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_decode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %50, i32 0, i32 63
  store i32 (%struct.gx_device_s*, i64, i16*)* %49, i32 (%struct.gx_device_s*, i64, i16*)** %saved_target_decode_color, align 8, !tbaa !551
  %51 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %my_encode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %51, i32 0, i32 66
  %52 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %my_encode_color, align 8, !tbaa !552
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 42
  %encode_color26 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs25, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %52, i64 (%struct.gx_device_s*, i16*)** %encode_color26, align 8, !tbaa !296
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs27 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %54, i32 0, i32 42
  %encode_color28 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs27, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* %52, i64 (%struct.gx_device_s*, i16*)** %encode_color28, align 8, !tbaa !487
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %my_decode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 67
  %56 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %my_decode_color, align 8, !tbaa !553
  %57 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs29 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %57, i32 0, i32 42
  %decode_color30 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs29, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %56, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color30, align 8, !tbaa !298
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs31 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %58, i32 0, i32 42
  %decode_color32 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs31, i32 0, i32 52
  store i32 (%struct.gx_device_s*, i64, i16*)* %56, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color32, align 8, !tbaa !550
  %59 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs33 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %59, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs33, i32 0, i32 49
  %60 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !488
  %61 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_get_color_mapping_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %61, i32 0, i32 64
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %60, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %saved_target_get_color_mapping_procs, align 8, !tbaa !554
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs34 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %62, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs34, i32 0, i32 50
  %63 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !480
  %64 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %saved_target_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %64, i32 0, i32 65
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %63, i32 (%struct.gx_device_s*, i8*, i32, i32)** %saved_target_get_color_comp_index, align 8, !tbaa !526
  %65 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %my_get_color_mapping_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %65, i32 0, i32 68
  %66 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %my_get_color_mapping_procs, align 8, !tbaa !555
  %67 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %67, i32 0, i32 42
  %get_color_mapping_procs36 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs35, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %66, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs36, align 8, !tbaa !266
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs37 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %68, i32 0, i32 42
  %get_color_mapping_procs38 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs37, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %66, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs38, align 8, !tbaa !488
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %my_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 69
  %70 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %my_get_color_comp_index, align 8, !tbaa !556
  %71 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %procs39 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %71, i32 0, i32 42
  %get_color_comp_index40 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs39, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %70, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index40, align 8, !tbaa !267
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs41 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %72, i32 0, i32 42
  %get_color_comp_index42 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs41, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %70, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index42, align 8, !tbaa !480
  %73 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %73, i32 0, i32 38
  %74 = load %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs, align 8, !tbaa !265
  %75 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %p14dev, align 8, !tbaa !1
  %save_get_cmap_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %75, i32 0, i32 60
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* %74, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %save_get_cmap_procs, align 8, !tbaa !441
  %76 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %get_cmap_procs43 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %76, i32 0, i32 38
  store %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)* @pdf14_get_cmap_procs, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)** %get_cmap_procs43, align 8, !tbaa !265
  %77 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_set_cmap_procs(%struct.gs_imager_state_s* %77, %struct.gx_device_s* %78) #7
  %79 = load i32, i32* %code, align 4, !tbaa !5
  %80 = bitcast %struct.gx_device_clist_writer_s** %cdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #2
  %81 = bitcast %struct.pdf14_device_s** %p14dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %81) #2
  %82 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %82) #2
  ret i32 %79
}

declare i32 @clist_writer_check_empty_cropping_stack(%struct.gx_device_clist_writer_s*) #0

declare void @cmd_clear_known(%struct.gx_device_clist_writer_s*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @pdf14_create_clist_device(%struct.gs_memory_s* %mem, %struct.gs_imager_state_s* %pis, %struct.gx_device_s** %ppdev, %struct.gx_device_s* %target, %struct.gs_pdf14trans_s* %pdf14pct) #1 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppdev.addr = alloca %struct.gx_device_s**, align 8
  %target.addr = alloca %struct.gx_device_s*, align 8
  %pdf14pct.addr = alloca %struct.gs_pdf14trans_s*, align 8
  %dev_proto = alloca %struct.pdf14_device_s*, align 8
  %pdev = alloca %struct.pdf14_device_s*, align 8
  %temp_dev_proto = alloca %struct.pdf14_device_s, align 8
  %code = alloca i32, align 4
  %has_tags = alloca i32, align 4
  %target_profile = alloca %struct.cmm_profile_s*, align 8
  %render_cond = alloca %struct.gsicc_rendering_param_s, align 4
  %dev_profile = alloca %struct.cmm_dev_profile_s*, align 8
  %k = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_s** %ppdev, %struct.gx_device_s*** %ppdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %target, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  store %struct.gs_pdf14trans_s* %pdf14pct, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %0 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.start(i64 5024, i8* %2) #2
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %graphics_type_tag = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 40
  %6 = load i32, i32* %graphics_type_tag, align 4, !tbaa !326
  %and = and i32 %6, 128
  store i32 %and, i32* %has_tags, align 4, !tbaa !5
  %7 = bitcast %struct.cmm_profile_s** %target_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.start(i64 24, i8* %8) #2
  %9 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 42
  %get_profile = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 67
  %12 = load i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)** %get_profile, align 8, !tbaa !78
  %13 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %call = call i32 %12(%struct.gx_device_s* %13, %struct.cmm_dev_profile_s** %dev_profile) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %14 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %14, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %16 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %dev_profile, align 8, !tbaa !1
  call void @gsicc_extract_profile(i32 0, %struct.cmm_dev_profile_s* %16, %struct.cmm_profile_s** %target_profile, %struct.gsicc_rendering_param_s* %render_cond) #7
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %18 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %19 = load %struct.gs_pdf14trans_s*, %struct.gs_pdf14trans_s** %pdf14pct.addr, align 8, !tbaa !1
  %call1 = call i32 @get_pdf14_clist_device_proto(%struct.gx_device_s* %17, %struct.pdf14_device_s** %dev_proto, %struct.pdf14_device_s* %temp_dev_proto, %struct.gs_imager_state_s* %18, %struct.gs_pdf14trans_s* %19) #7
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %20 = load i32, i32* %code, align 4, !tbaa !5
  %cmp2 = icmp slt i32 %20, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %do.end
  %21 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %do.end
  %22 = bitcast %struct.pdf14_device_s** %pdev to %struct.gx_device_s**
  %23 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %dev_proto, align 8, !tbaa !1
  %24 = bitcast %struct.pdf14_device_s* %23 to %struct.gx_device_s*
  %25 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call5 = call i32 @gs_copydevice(%struct.gx_device_s** %22, %struct.gx_device_s* %24, %struct.gs_memory_s* %25) #7
  store i32 %call5, i32* %code, align 4, !tbaa !5
  %26 = load i32, i32* %code, align 4, !tbaa !5
  %cmp6 = icmp slt i32 %26, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  %27 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end.4
  %28 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %28, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  %29 = load i32, i32* %num_components, align 4, !tbaa !150
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info9 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 11
  %num_components10 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info9, i32 0, i32 1
  %31 = load i32, i32* %num_components10, align 4, !tbaa !195
  %cmp11 = icmp sgt i32 %29, %31
  br i1 %cmp11, label %if.then.12, label %if.end.17

if.then.12:                                       ; preds = %if.end.8
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info13 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %32, i32 0, i32 11
  %num_components14 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info13, i32 0, i32 1
  %33 = load i32, i32* %num_components14, align 4, !tbaa !195
  %34 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info15 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %34, i32 0, i32 11
  %num_components16 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info15, i32 0, i32 1
  store i32 %33, i32* %num_components16, align 4, !tbaa !150
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.12, %if.end.8
  %35 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info18 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %35, i32 0, i32 11
  %max_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info18, i32 0, i32 0
  %36 = load i32, i32* %max_components, align 4, !tbaa !474
  %37 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info19 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %37, i32 0, i32 11
  %max_components20 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info19, i32 0, i32 0
  %38 = load i32, i32* %max_components20, align 4, !tbaa !481
  %cmp21 = icmp sgt i32 %36, %38
  br i1 %cmp21, label %if.then.22, label %if.end.27

if.then.22:                                       ; preds = %if.end.17
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info23 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %39, i32 0, i32 11
  %max_components24 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info23, i32 0, i32 0
  %40 = load i32, i32* %max_components24, align 4, !tbaa !481
  %41 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info25 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %41, i32 0, i32 11
  %max_components26 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info25, i32 0, i32 0
  store i32 %40, i32* %max_components26, align 4, !tbaa !474
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.22, %if.end.17
  %42 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info28 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %42, i32 0, i32 11
  %num_components29 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info28, i32 0, i32 1
  %43 = load i32, i32* %num_components29, align 4, !tbaa !150
  %mul = mul nsw i32 %43, 8
  %conv = trunc i32 %mul to i16
  %44 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info30 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %44, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info30, i32 0, i32 3
  store i16 %conv, i16* %depth, align 2, !tbaa !276
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %pad = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %45, i32 0, i32 15
  %46 = load i32, i32* %pad, align 4, !tbaa !443
  %47 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pad31 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %47, i32 0, i32 15
  store i32 %46, i32* %pad31, align 4, !tbaa !444
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %log2_align_mod = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 16
  %49 = load i32, i32* %log2_align_mod, align 4, !tbaa !445
  %50 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %log2_align_mod32 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %50, i32 0, i32 16
  store i32 %49, i32* %log2_align_mod32, align 4, !tbaa !446
  %51 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %is_planar = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %51, i32 0, i32 17
  %52 = load i32, i32* %is_planar, align 4, !tbaa !447
  %53 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %is_planar33 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %53, i32 0, i32 17
  store i32 %52, i32* %is_planar33, align 4, !tbaa !448
  %54 = load i32, i32* %has_tags, align 4, !tbaa !5
  %tobool = icmp ne i32 %54, 0
  br i1 %tobool, label %if.then.34, label %if.end.40

if.then.34:                                       ; preds = %if.end.27
  %55 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs35 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %55, i32 0, i32 42
  %encode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs35, i32 0, i32 51
  store i64 (%struct.gx_device_s*, i16*)* @pdf14_encode_color_tag, i64 (%struct.gx_device_s*, i16*)** %encode_color, align 8, !tbaa !296
  %56 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info36 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %56, i32 0, i32 11
  %depth37 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info36, i32 0, i32 3
  %57 = load i16, i16* %depth37, align 2, !tbaa !276
  %conv38 = zext i16 %57 to i32
  %add = add nsw i32 %conv38, 8
  %conv39 = trunc i32 %add to i16
  store i16 %conv39, i16* %depth37, align 2, !tbaa !276
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.34, %if.end.27
  %58 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %59 = bitcast %struct.pdf14_device_s* %58 to %struct.gx_device_s*
  call void @check_device_separable(%struct.gx_device_s* %59) #7
  %60 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %61 = bitcast %struct.pdf14_device_s* %60 to %struct.gx_device_s*
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %61) #7
  %62 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %63 = bitcast %struct.pdf14_device_s* %62 to %struct.gx_device_s*
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  call void @gs_pdf14_device_copy_params(%struct.gx_device_s* %63, %struct.gx_device_s* %64) #7
  %65 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %66 = bitcast %struct.pdf14_device_s* %65 to %struct.gx_device_forward_s*
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  call void @gx_device_set_target(%struct.gx_device_forward_s* %66, %struct.gx_device_s* %67) #7
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.40
  %68 = load i32, i32* %k, align 4, !tbaa !5
  %69 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info41 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %69, i32 0, i32 11
  %num_components42 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info41, i32 0, i32 1
  %70 = load i32, i32* %num_components42, align 4, !tbaa !150
  %cmp43 = icmp slt i32 %68, %70
  br i1 %cmp43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %71 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom = sext i32 %71 to i64
  %72 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info45 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %72, i32 0, i32 11
  %comp_bits = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info45, i32 0, i32 12
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %comp_bits, i32 0, i64 %idxprom
  store i8 8, i8* %arrayidx, align 1, !tbaa !66
  %73 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info46 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %73, i32 0, i32 11
  %num_components47 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info46, i32 0, i32 1
  %74 = load i32, i32* %num_components47, align 4, !tbaa !150
  %sub = sub nsw i32 %74, 1
  %75 = load i32, i32* %k, align 4, !tbaa !5
  %sub48 = sub nsw i32 %sub, %75
  %mul49 = mul nsw i32 %sub48, 8
  %conv50 = trunc i32 %mul49 to i8
  %76 = load i32, i32* %k, align 4, !tbaa !5
  %idxprom51 = sext i32 %76 to i64
  %77 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info52 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %77, i32 0, i32 11
  %comp_shift = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info52, i32 0, i32 11
  %arrayidx53 = getelementptr inbounds [64 x i8], [64 x i8]* %comp_shift, i32 0, i64 %idxprom51
  store i8 %conv50, i8* %arrayidx53, align 1, !tbaa !66
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %78 = load i32, i32* %k, align 4, !tbaa !5
  %inc = add nsw i32 %78, 1
  store i32 %inc, i32* %k, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %80 = bitcast %struct.pdf14_device_s* %79 to %struct.gx_device_s*
  %procs54 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %80, i32 0, i32 42
  %open_device = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs54, i32 0, i32 0
  %81 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %open_device, align 8, !tbaa !80
  %82 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %83 = bitcast %struct.pdf14_device_s* %82 to %struct.gx_device_s*
  %call55 = call i32 %81(%struct.gx_device_s* %83) #7
  store i32 %call55, i32* %code, align 4, !tbaa !5
  %84 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %85 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %pclist_device = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %85, i32 0, i32 58
  store %struct.gx_device_s* %84, %struct.gx_device_s** %pclist_device, align 8, !tbaa !234
  %86 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %target_profile, align 8, !tbaa !1
  %data_cs = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %86, i32 0, i32 5
  %87 = load i32, i32* %data_cs, align 4, !tbaa !115
  %cmp56 = icmp eq i32 %87, 6
  br i1 %cmp56, label %if.then.59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %88 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %target_profile, align 8, !tbaa !1
  %islab = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %88, i32 0, i32 2
  %89 = load i32, i32* %islab, align 4, !tbaa !119
  %tobool58 = icmp ne i32 %89, 0
  br i1 %tobool58, label %if.then.59, label %if.end.142

if.then.59:                                       ; preds = %lor.lhs.false, %for.end
  br label %do.body.60

do.body.60:                                       ; preds = %if.then.59
  %90 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %90, i32 0, i32 39
  %91 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct, align 8, !tbaa !144
  %device_profile = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %91, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile, i32 0, i64 0
  %92 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx61, align 8, !tbaa !1
  %93 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %93, i32 0, i32 35
  %94 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager, align 8, !tbaa !457
  %default_rgb = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %94, i32 0, i32 2
  %95 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb, align 8, !tbaa !465
  %cmp62 = icmp ne %struct.cmm_profile_s* %92, %95
  br i1 %cmp62, label %if.then.64, label %if.end.139

if.then.64:                                       ; preds = %do.body.60
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %96 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager66 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %96, i32 0, i32 35
  %97 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager66, align 8, !tbaa !457
  %default_rgb67 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %97, i32 0, i32 2
  %98 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb67, align 8, !tbaa !465
  %tobool68 = icmp ne %struct.cmm_profile_s* %98, null
  br i1 %tobool68, label %if.then.69, label %if.end.79

if.then.69:                                       ; preds = %do.body.65
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %99 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager71 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %99, i32 0, i32 35
  %100 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager71, align 8, !tbaa !457
  %default_rgb72 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %100, i32 0, i32 2
  %101 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb72, align 8, !tbaa !465
  %rc = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %101, i32 0, i32 18
  %ref_count = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc, i32 0, i32 0
  %102 = load i64, i64* %ref_count, align 8, !tbaa !145
  %inc73 = add nsw i64 %102, 1
  store i64 %inc73, i64* %ref_count, align 8, !tbaa !145
  br label %do.body.74

do.body.74:                                       ; preds = %do.body.70
  br label %do.cond.75

do.cond.75:                                       ; preds = %do.body.74
  br label %do.end.76

do.end.76:                                        ; preds = %do.cond.75
  br label %do.cond.77

do.cond.77:                                       ; preds = %do.end.76
  br label %do.end.78

do.end.78:                                        ; preds = %do.cond.77
  br label %if.end.79

if.end.79:                                        ; preds = %do.end.78, %do.body.65
  br label %do.cond.80

do.cond.80:                                       ; preds = %if.end.79
  br label %do.end.81

do.end.81:                                        ; preds = %do.cond.80
  br label %do.body.82

do.body.82:                                       ; preds = %do.end.81
  %103 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct83 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %103, i32 0, i32 39
  %104 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct83, align 8, !tbaa !144
  %device_profile84 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %104, i32 0, i32 0
  %arrayidx85 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile84, i32 0, i64 0
  %105 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx85, align 8, !tbaa !1
  %tobool86 = icmp ne %struct.cmm_profile_s* %105, null
  br i1 %tobool86, label %if.then.87, label %if.end.131

if.then.87:                                       ; preds = %do.body.82
  br label %do.body.88

do.body.88:                                       ; preds = %if.then.87
  br label %do.body.89

do.body.89:                                       ; preds = %do.body.88
  br label %do.cond.90

do.cond.90:                                       ; preds = %do.body.89
  br label %do.end.91

do.end.91:                                        ; preds = %do.cond.90
  %106 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct92 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %106, i32 0, i32 39
  %107 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct92, align 8, !tbaa !144
  %device_profile93 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %107, i32 0, i32 0
  %arrayidx94 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile93, i32 0, i64 0
  %108 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx94, align 8, !tbaa !1
  %rc95 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %108, i32 0, i32 18
  %ref_count96 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc95, i32 0, i32 0
  %109 = load i64, i64* %ref_count96, align 8, !tbaa !145
  %add97 = add nsw i64 %109, -1
  store i64 %add97, i64* %ref_count96, align 8, !tbaa !145
  br label %do.cond.98

do.cond.98:                                       ; preds = %do.end.91
  br label %do.end.99

do.end.99:                                        ; preds = %do.cond.98
  %110 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct100 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %110, i32 0, i32 39
  %111 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct100, align 8, !tbaa !144
  %device_profile101 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %111, i32 0, i32 0
  %arrayidx102 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile101, i32 0, i64 0
  %112 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx102, align 8, !tbaa !1
  %rc103 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %112, i32 0, i32 18
  %ref_count104 = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc103, i32 0, i32 0
  %113 = load i64, i64* %ref_count104, align 8, !tbaa !145
  %tobool105 = icmp ne i64 %113, 0
  br i1 %tobool105, label %if.else, label %if.then.106

if.then.106:                                      ; preds = %do.end.99
  br label %do.body.107

do.body.107:                                      ; preds = %if.then.106
  br label %do.body.108

do.body.108:                                      ; preds = %do.body.107
  br label %do.cond.109

do.cond.109:                                      ; preds = %do.body.108
  br label %do.end.110

do.end.110:                                       ; preds = %do.cond.109
  %114 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct111 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %114, i32 0, i32 39
  %115 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct111, align 8, !tbaa !144
  %device_profile112 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %115, i32 0, i32 0
  %arrayidx113 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile112, i32 0, i64 0
  %116 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx113, align 8, !tbaa !1
  %rc114 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %116, i32 0, i32 18
  %free = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc114, i32 0, i32 2
  %117 = load void (%struct.gs_memory_s*, i8*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)** %free, align 8, !tbaa !146
  %118 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct115 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %118, i32 0, i32 39
  %119 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct115, align 8, !tbaa !144
  %device_profile116 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %119, i32 0, i32 0
  %arrayidx117 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile116, i32 0, i64 0
  %120 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx117, align 8, !tbaa !1
  %rc118 = getelementptr inbounds %struct.cmm_profile_s, %struct.cmm_profile_s* %120, i32 0, i32 18
  %memory = getelementptr inbounds %struct.rc_header_s, %struct.rc_header_s* %rc118, i32 0, i32 1
  %121 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !147
  %122 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct119 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %122, i32 0, i32 39
  %123 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct119, align 8, !tbaa !144
  %device_profile120 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %123, i32 0, i32 0
  %arrayidx121 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile120, i32 0, i64 0
  %124 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %arrayidx121, align 8, !tbaa !1
  %125 = bitcast %struct.cmm_profile_s* %124 to i8*
  call void %117(%struct.gs_memory_s* %121, i8* %125, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.77, i32 0, i32 0)) #7
  br label %do.cond.122

do.cond.122:                                      ; preds = %do.end.110
  br label %do.end.123

do.end.123:                                       ; preds = %do.cond.122
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.123
  br label %do.cond.125

do.cond.125:                                      ; preds = %do.body.124
  br label %do.end.126

do.end.126:                                       ; preds = %do.cond.125
  br label %if.end.130

if.else:                                          ; preds = %do.end.99
  br label %do.body.127

do.body.127:                                      ; preds = %if.else
  br label %do.cond.128

do.cond.128:                                      ; preds = %do.body.127
  br label %do.end.129

do.end.129:                                       ; preds = %do.cond.128
  br label %if.end.130

if.end.130:                                       ; preds = %do.end.129, %do.end.126
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %do.body.82
  br label %do.cond.132

do.cond.132:                                      ; preds = %if.end.131
  br label %do.end.133

do.end.133:                                       ; preds = %do.cond.132
  %126 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %icc_manager134 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %126, i32 0, i32 35
  %127 = load %struct.gsicc_manager_s*, %struct.gsicc_manager_s** %icc_manager134, align 8, !tbaa !457
  %default_rgb135 = getelementptr inbounds %struct.gsicc_manager_s, %struct.gsicc_manager_s* %127, i32 0, i32 2
  %128 = load %struct.cmm_profile_s*, %struct.cmm_profile_s** %default_rgb135, align 8, !tbaa !465
  %129 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %icc_struct136 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %129, i32 0, i32 39
  %130 = load %struct.cmm_dev_profile_s*, %struct.cmm_dev_profile_s** %icc_struct136, align 8, !tbaa !144
  %device_profile137 = getelementptr inbounds %struct.cmm_dev_profile_s, %struct.cmm_dev_profile_s* %130, i32 0, i32 0
  %arrayidx138 = getelementptr inbounds [4 x %struct.cmm_profile_s*], [4 x %struct.cmm_profile_s*]* %device_profile137, i32 0, i64 0
  store %struct.cmm_profile_s* %128, %struct.cmm_profile_s** %arrayidx138, align 8, !tbaa !1
  br label %if.end.139

if.end.139:                                       ; preds = %do.end.133, %do.body.60
  br label %do.cond.140

do.cond.140:                                      ; preds = %if.end.139
  br label %do.end.141

do.end.141:                                       ; preds = %do.cond.140
  br label %if.end.142

if.end.142:                                       ; preds = %do.end.141, %lor.lhs.false
  %131 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs143 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %131, i32 0, i32 42
  %encode_color144 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs143, i32 0, i32 51
  %132 = load i64 (%struct.gx_device_s*, i16*)*, i64 (%struct.gx_device_s*, i16*)** %encode_color144, align 8, !tbaa !296
  %133 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_encode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %133, i32 0, i32 66
  store i64 (%struct.gx_device_s*, i16*)* %132, i64 (%struct.gx_device_s*, i16*)** %my_encode_color, align 8, !tbaa !552
  %134 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs145 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %134, i32 0, i32 42
  %decode_color = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs145, i32 0, i32 52
  %135 = load i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)** %decode_color, align 8, !tbaa !298
  %136 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_decode_color = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %136, i32 0, i32 67
  store i32 (%struct.gx_device_s*, i64, i16*)* %135, i32 (%struct.gx_device_s*, i64, i16*)** %my_decode_color, align 8, !tbaa !553
  %137 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs146 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %137, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs146, i32 0, i32 49
  %138 = load %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !266
  %139 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_get_color_mapping_procs = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %139, i32 0, i32 68
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* %138, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %my_get_color_mapping_procs, align 8, !tbaa !555
  %140 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %procs147 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %140, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs147, i32 0, i32 50
  %141 = load i32 (%struct.gx_device_s*, i8*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !267
  %142 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %my_get_color_comp_index = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %142, i32 0, i32 69
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* %141, i32 (%struct.gx_device_s*, i8*, i32, i32)** %my_get_color_comp_index, align 8, !tbaa !556
  %143 = load %struct.gx_device_s*, %struct.gx_device_s** %target.addr, align 8, !tbaa !1
  %color_info148 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %143, i32 0, i32 11
  %separable_and_linear = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info148, i32 0, i32 10
  %144 = load i32, i32* %separable_and_linear, align 4, !tbaa !535
  %145 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %color_info149 = getelementptr inbounds %struct.pdf14_device_s, %struct.pdf14_device_s* %145, i32 0, i32 11
  %separable_and_linear150 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info149, i32 0, i32 10
  store i32 %144, i32* %separable_and_linear150, align 4, !tbaa !577
  %146 = load %struct.pdf14_device_s*, %struct.pdf14_device_s** %pdev, align 8, !tbaa !1
  %147 = bitcast %struct.pdf14_device_s* %146 to %struct.gx_device_s*
  %148 = load %struct.gx_device_s**, %struct.gx_device_s*** %ppdev.addr, align 8, !tbaa !1
  store %struct.gx_device_s* %147, %struct.gx_device_s** %148, align 8, !tbaa !1
  %149 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %149, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.142, %if.then.7, %if.then.3, %if.then
  %150 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %150) #2
  %151 = bitcast %struct.cmm_dev_profile_s** %dev_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %151) #2
  %152 = bitcast %struct.gsicc_rendering_param_s* %render_cond to i8*
  call void @llvm.lifetime.end(i64 24, i8* %152) #2
  %153 = bitcast %struct.cmm_profile_s** %target_profile to i8*
  call void @llvm.lifetime.end(i64 8, i8* %153) #2
  %154 = bitcast i32* %has_tags to i8*
  call void @llvm.lifetime.end(i64 4, i8* %154) #2
  %155 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %155) #2
  %156 = bitcast %struct.pdf14_device_s* %temp_dev_proto to i8*
  call void @llvm.lifetime.end(i64 5024, i8* %156) #2
  %157 = bitcast %struct.pdf14_device_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %157) #2
  %158 = bitcast %struct.pdf14_device_s** %dev_proto to i8*
  call void @llvm.lifetime.end(i64 8, i8* %158) #2
  %159 = load i32, i32* %retval
  ret i32 %159
}

attributes #0 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin }
attributes #8 = { nobuiltin nounwind }
attributes #9 = { nobuiltin nounwind readnone }
attributes #10 = { nobuiltin nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !3, i64 0}
!7 = !{!8, !2, i64 4152}
!8 = !{!"pdf14_device_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !2, i64 1728, !20, i64 1736, !2, i64 4136, !2, i64 4144, !2, i64 4152, !2, i64 4160, !22, i64 4168, !22, i64 4172, !22, i64 4176, !3, i64 4180, !6, i64 4184, !6, i64 4188, !6, i64 4192, !6, i64 4196, !10, i64 4200, !2, i64 4208, !6, i64 4216, !2, i64 4224, !11, i64 4232, !2, i64 4952, !2, i64 4960, !2, i64 4968, !2, i64 4976, !2, i64 4984, !2, i64 4992, !2, i64 5000, !2, i64 5008, !2, i64 5016}
!9 = !{!"rc_header_s", !10, i64 0, !2, i64 8, !2, i64 16}
!10 = !{!"long", !3, i64 0}
!11 = !{!"gx_device_color_info_s", !6, i64 0, !6, i64 4, !3, i64 8, !12, i64 12, !3, i64 14, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !13, i64 32, !3, i64 40, !3, i64 44, !3, i64 108, !3, i64 176, !2, i64 688, !3, i64 696, !10, i64 704, !6, i64 712}
!12 = !{!"short", !3, i64 0}
!13 = !{!"gx_device_anti_alias_info_s", !6, i64 0, !6, i64 4}
!14 = !{!"gx_device_cached_colors_s", !10, i64 0, !10, i64 8}
!15 = !{!"gx_stroked_gradient_recognizer_s", !6, i64 0, !3, i64 4, !3, i64 36}
!16 = !{!"gdev_space_params_s", !10, i64 0, !10, i64 8, !17, i64 16, !6, i64 32, !3, i64 36}
!17 = !{!"gx_band_params_s", !6, i64 0, !6, i64 4, !10, i64 8}
!18 = !{!"gx_page_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16}
!19 = !{!"gx_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560, !2, i64 568, !2, i64 576}
!20 = !{!"gs_devn_params_s", !6, i64 0, !2, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !21, i64 32, !6, i64 1064, !3, i64 1068, !2, i64 1352, !2, i64 1360, !21, i64 1368}
!21 = !{!"gs_separations_s", !6, i64 0, !3, i64 8}
!22 = !{!"float", !3, i64 0}
!23 = !{!24, !2, i64 0}
!24 = !{!"pdf14_ctx_s", !2, i64 0, !2, i64 8, !2, i64 16, !25, i64 24, !6, i64 40, !6, i64 44, !6, i64 48, !6, i64 52}
!25 = !{!"gs_int_rect_s", !26, i64 0, !26, i64 8}
!26 = !{!"gs_int_point_s", !6, i64 0, !6, i64 4}
!27 = !{i64 0, i64 4, !5, i64 4, i64 4, !5, i64 8, i64 4, !5, i64 12, i64 4, !5}
!28 = !{!29, !2, i64 88}
!29 = !{!"gx_pattern_trans_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !25, i64 32, !6, i64 48, !6, i64 52, !6, i64 56, !6, i64 60, !6, i64 64, !6, i64 68, !2, i64 72, !6, i64 80, !3, i64 84, !2, i64 88, !2, i64 96, !2, i64 104}
!30 = !{!8, !6, i64 832}
!31 = !{!25, !6, i64 8}
!32 = !{!8, !6, i64 836}
!33 = !{!25, !6, i64 12}
!34 = !{!25, !6, i64 0}
!35 = !{!25, !6, i64 4}
!36 = !{!37, !2, i64 80}
!37 = !{!"pdf14_buf_s", !2, i64 0, !2, i64 8, !6, i64 16, !6, i64 20, !3, i64 24, !3, i64 25, !3, i64 28, !6, i64 32, !6, i64 36, !6, i64 40, !25, i64 44, !6, i64 60, !6, i64 64, !6, i64 68, !6, i64 72, !2, i64 80, !2, i64 88, !25, i64 96, !2, i64 112, !6, i64 120, !3, i64 124, !6, i64 128, !2, i64 136, !3, i64 144}
!38 = !{!37, !6, i64 68}
!39 = !{!29, !6, i64 56}
!40 = !{!37, !6, i64 36}
!41 = !{!29, !6, i64 60}
!42 = !{!37, !6, i64 52}
!43 = !{!37, !6, i64 44}
!44 = !{!29, !6, i64 64}
!45 = !{!37, !6, i64 56}
!46 = !{!37, !6, i64 48}
!47 = !{!29, !6, i64 68}
!48 = !{!8, !3, i64 4180}
!49 = !{!29, !3, i64 84}
!50 = !{!29, !2, i64 0}
!51 = !{!29, !6, i64 52}
!52 = !{!29, !6, i64 48}
!53 = !{!54, !2, i64 64}
!54 = !{!"gs_memory_s", !2, i64 0, !55, i64 8, !2, i64 192, !2, i64 200, !2, i64 208}
!55 = !{!"gs_memory_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176}
!56 = !{!29, !2, i64 8}
!57 = !{!29, !2, i64 16}
!58 = !{!37, !6, i64 64}
!59 = !{!37, !6, i64 60}
!60 = !{!61, !2, i64 24}
!61 = !{!"gx_device_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144}
!62 = !{!61, !2, i64 1176}
!63 = !{!64, !2, i64 1728}
!64 = !{!"gx_device_forward_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !2, i64 1728}
!65 = !{i64 0, i64 4, !5, i64 4, i64 4, !5, i64 8, i64 4, !66, i64 12, i64 2, !67, i64 14, i64 1, !66, i64 16, i64 4, !5, i64 20, i64 4, !5, i64 24, i64 4, !5, i64 28, i64 4, !5, i64 32, i64 4, !5, i64 36, i64 4, !5, i64 40, i64 4, !66, i64 44, i64 64, !66, i64 108, i64 64, !66, i64 176, i64 512, !66, i64 688, i64 8, !1, i64 696, i64 4, !66, i64 704, i64 8, !68, i64 712, i64 4, !5}
!66 = !{!3, !3, i64 0}
!67 = !{!12, !12, i64 0}
!68 = !{!10, !10, i64 0}
!69 = !{!61, !2, i64 1464}
!70 = !{!61, !2, i64 1200}
!71 = !{!61, !2, i64 1576}
!72 = !{!61, !2, i64 1208}
!73 = !{!61, !2, i64 1216}
!74 = !{!61, !2, i64 1224}
!75 = !{!61, !2, i64 1296}
!76 = !{!61, !2, i64 1416}
!77 = !{!61, !2, i64 1312}
!78 = !{!61, !2, i64 1680}
!79 = !{!61, !2, i64 1688}
!80 = !{!61, !2, i64 1144}
!81 = !{!61, !2, i64 1256}
!82 = !{!8, !2, i64 1728}
!83 = !{!84, !3, i64 40}
!84 = !{!"gs_pdf14trans_s", !2, i64 0, !10, i64 8, !6, i64 16, !2, i64 24, !2, i64 32, !85, i64 40}
!85 = !{!"gs_pdf14trans_params_s", !3, i64 0, !6, i64 4, !6, i64 8, !6, i64 12, !6, i64 16, !6, i64 20, !86, i64 24, !3, i64 56, !3, i64 60, !6, i64 64, !6, i64 68, !3, i64 72, !22, i64 328, !2, i64 336, !3, i64 344, !3, i64 600, !6, i64 604, !89, i64 608, !89, i64 612, !6, i64 616, !90, i64 620, !6, i64 644, !6, i64 648, !6, i64 652, !6, i64 656, !6, i64 660, !6, i64 664, !6, i64 668, !3, i64 672, !10, i64 680, !2, i64 688, !6, i64 696, !6, i64 700}
!86 = !{!"gs_rect_s", !87, i64 0, !87, i64 16}
!87 = !{!"gs_point_s", !88, i64 0, !88, i64 8}
!88 = !{!"double", !3, i64 0}
!89 = !{!"gs_transparency_source_s", !22, i64 0}
!90 = !{!"gs_matrix_s", !22, i64 0, !22, i64 4, !22, i64 8, !22, i64 12, !22, i64 16, !22, i64 20}
!91 = !{!92, !6, i64 160}
!92 = !{!"cmm_dev_profile_s", !3, i64 0, !2, i64 32, !2, i64 40, !2, i64 48, !3, i64 56, !6, i64 152, !6, i64 156, !6, i64 160, !6, i64 164, !6, i64 168, !6, i64 172, !2, i64 176, !6, i64 184, !2, i64 192, !9, i64 200}
!93 = !{!85, !3, i64 0}
!94 = !{!95, !6, i64 11952}
!95 = !{!"gx_device_clist_writer_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !2, i64 1728, !96, i64 1736, !2, i64 1768, !2, i64 1776, !6, i64 1784, !17, i64 1792, !6, i64 1808, !6, i64 1812, !97, i64 1816, !98, i64 1840, !6, i64 1864, !6, i64 1868, !2, i64 1872, !6, i64 1880, !6, i64 1884, !99, i64 1888, !6, i64 10144, !10, i64 10152, !2, i64 10160, !2, i64 10168, !6, i64 10176, !2, i64 10184, !6, i64 10192, !2, i64 10200, !2, i64 10208, !2, i64 10216, !2, i64 10224, !2, i64 10232, !100, i64 10240, !6, i64 10256, !6, i64 10260, !6, i64 10264, !6, i64 10268, !101, i64 10272, !6, i64 10320, !6, i64 10324, !6, i64 10328, !102, i64 10336, !6, i64 11952, !6, i64 11956, !6, i64 11960, !6, i64 11964, !3, i64 11968, !2, i64 12016, !10, i64 12024, !110, i64 12032, !3, i64 12080, !10, i64 12112, !10, i64 12120, !10, i64 12128, !10, i64 12136, !6, i64 12144, !6, i64 12148, !6, i64 12152, !6, i64 12156, !2, i64 12160, !6, i64 12168, !2, i64 12176, !6, i64 12184, !6, i64 12188, !6, i64 12192, !6, i64 12196, !6, i64 12200, !6, i64 12204, !2, i64 12208, !10, i64 12216, !6, i64 12224, !6, i64 12228, !6, i64 12232, !6, i64 12236, !11, i64 12240}
!96 = !{!"gx_device_buf_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!97 = !{!"gx_bits_cache_chunk_s", !2, i64 0, !2, i64 8, !6, i64 16, !6, i64 20}
!98 = !{!"gx_bits_cache_s", !2, i64 0, !6, i64 8, !6, i64 12, !6, i64 16}
!99 = !{!"gx_band_page_info_s", !3, i64 0, !2, i64 4096, !3, i64 4104, !2, i64 8200, !2, i64 8208, !6, i64 8216, !10, i64 8224, !10, i64 8232, !17, i64 8240}
!100 = !{!"cmd_list_s", !2, i64 0, !2, i64 8}
!101 = !{!"gx_strip_bitmap_s", !2, i64 0, !6, i64 8, !26, i64 12, !10, i64 24, !12, i64 32, !12, i64 34, !12, i64 36, !12, i64 38, !6, i64 40}
!102 = !{!"gs_imager_state_s", !6, i64 0, !2, i64 8, !2, i64 16, !103, i64 24, !6, i64 128, !105, i64 132, !6, i64 168, !87, i64 176, !87, i64 192, !6, i64 208, !6, i64 212, !12, i64 216, !3, i64 220, !89, i64 224, !89, i64 228, !106, i64 232, !10, i64 240, !6, i64 248, !6, i64 252, !6, i64 256, !2, i64 264, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284, !6, i64 288, !6, i64 292, !22, i64 296, !107, i64 300, !6, i64 308, !6, i64 312, !6, i64 316, !22, i64 320, !6, i64 324, !6, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !6, i64 408, !2, i64 416, !2, i64 424, !108, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !109, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !109, i64 1336}
!103 = !{!"gx_line_params_s", !22, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !6, i64 20, !22, i64 24, !22, i64 28, !22, i64 32, !6, i64 36, !90, i64 40, !104, i64 64}
!104 = !{!"gx_dash_params_s", !2, i64 0, !6, i64 8, !22, i64 12, !6, i64 16, !22, i64 20, !6, i64 24, !6, i64 28, !22, i64 32}
!105 = !{!"gs_matrix_fixed_s", !22, i64 0, !22, i64 4, !22, i64 8, !22, i64 12, !22, i64 16, !22, i64 20, !6, i64 24, !6, i64 28, !6, i64 32}
!106 = !{!"gs_xstate_trans_flags", !6, i64 0, !6, i64 4}
!107 = !{!"gs_fixed_point_s", !6, i64 0, !6, i64 4}
!108 = !{!"gx_transfer_s", !6, i64 0, !2, i64 8, !6, i64 16, !2, i64 24, !6, i64 32, !2, i64 40, !6, i64 48, !2, i64 56}
!109 = !{!"gs_devicen_color_map_s", !6, i64 0, !3, i64 4, !6, i64 8, !6, i64 12, !10, i64 16, !3, i64 24}
!110 = !{!"clist_color_space_s", !3, i64 0, !10, i64 8, !111, i64 16, !2, i64 40}
!111 = !{!"clist_icc_color_s", !10, i64 0, !3, i64 8, !6, i64 12, !3, i64 16, !3, i64 20}
!112 = !{!95, !6, i64 11956}
!113 = !{!95, !6, i64 11960}
!114 = !{!95, !6, i64 11964}
!115 = !{!116, !3, i64 16}
!116 = !{!"cmm_profile_s", !3, i64 0, !3, i64 1, !6, i64 4, !6, i64 8, !3, i64 12, !3, i64 16, !117, i64 20, !10, i64 144, !6, i64 152, !3, i64 156, !6, i64 216, !6, i64 220, !6, i64 224, !118, i64 228, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !9, i64 288, !6, i64 312, !2, i64 320, !2, i64 328, !2, i64 336}
!117 = !{!"gs_range_icc_s", !3, i64 0}
!118 = !{!"gsicc_rendering_param_s", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !6, i64 20}
!119 = !{!116, !6, i64 4}
!120 = !{!85, !2, i64 688}
!121 = !{!116, !10, i64 144}
!122 = !{!95, !10, i64 10152}
!123 = !{!85, !6, i64 12}
!124 = !{!85, !6, i64 16}
!125 = !{!85, !3, i64 600}
!126 = !{!85, !3, i64 672}
!127 = !{!85, !6, i64 664}
!128 = !{!85, !6, i64 644}
!129 = !{!85, !6, i64 68}
!130 = !{!85, !6, i64 64}
!131 = !{!85, !22, i64 608}
!132 = !{!85, !22, i64 612}
!133 = !{!85, !6, i64 8}
!134 = !{!85, !6, i64 604}
!135 = !{i64 0, i64 4, !136, i64 4, i64 4, !136, i64 8, i64 4, !136, i64 12, i64 4, !136, i64 16, i64 4, !136, i64 20, i64 4, !136}
!136 = !{!22, !22, i64 0}
!137 = !{!90, !22, i64 16}
!138 = !{!90, !22, i64 20}
!139 = !{!95, !6, i64 12228}
!140 = !{!84, !6, i64 704}
!141 = !{!95, !6, i64 12224}
!142 = !{!8, !2, i64 1680}
!143 = !{!116, !2, i64 336}
!144 = !{!8, !2, i64 1104}
!145 = !{!116, !10, i64 288}
!146 = !{!116, !2, i64 304}
!147 = !{!116, !2, i64 296}
!148 = !{!61, !2, i64 1624}
!149 = !{!20, !6, i64 24}
!150 = !{!8, !6, i64 100}
!151 = !{!8, !6, i64 1760}
!152 = !{!8, !6, i64 1752}
!153 = !{!20, !2, i64 1360}
!154 = !{!8, !2, i64 3088}
!155 = !{i64 0, i64 4, !5, i64 8, i64 1024, !66}
!156 = !{!8, !6, i64 4216}
!157 = !{!158, !10, i64 10152}
!158 = !{!"gx_device_clist_reader_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !2, i64 1728, !96, i64 1736, !2, i64 1768, !2, i64 1776, !6, i64 1784, !17, i64 1792, !6, i64 1808, !6, i64 1812, !97, i64 1816, !98, i64 1840, !6, i64 1864, !6, i64 1868, !2, i64 1872, !6, i64 1880, !6, i64 1884, !99, i64 1888, !6, i64 10144, !10, i64 10152, !2, i64 10160, !2, i64 10168, !6, i64 10176, !2, i64 10184, !159, i64 10192, !2, i64 10208, !2, i64 10216, !6, i64 10224, !2, i64 10232, !6, i64 10240, !2, i64 10248, !2, i64 10256, !6, i64 10264, !6, i64 10268, !6, i64 10272}
!159 = !{!"gx_render_plane_s", !6, i64 0, !6, i64 4, !6, i64 8}
!160 = !{!116, !2, i64 264}
!161 = !{!84, !22, i64 368}
!162 = !{!84, !6, i64 656}
!163 = !{!164, !2, i64 0}
!164 = !{!"gs_composite_s", !2, i64 0, !10, i64 8, !6, i64 16, !2, i64 24, !2, i64 32}
!165 = !{!102, !2, i64 8}
!166 = !{!54, !2, i64 24}
!167 = !{!54, !2, i64 72}
!168 = !{!84, !2, i64 0}
!169 = !{!84, !10, i64 8}
!170 = !{i64 0, i64 4, !66, i64 4, i64 4, !5, i64 8, i64 4, !5, i64 12, i64 4, !5, i64 16, i64 4, !5, i64 20, i64 4, !5, i64 24, i64 8, !171, i64 32, i64 8, !171, i64 40, i64 8, !171, i64 48, i64 8, !171, i64 56, i64 4, !66, i64 60, i64 4, !66, i64 64, i64 4, !5, i64 68, i64 4, !5, i64 72, i64 256, !66, i64 328, i64 4, !136, i64 336, i64 8, !1, i64 344, i64 256, !66, i64 600, i64 4, !66, i64 604, i64 4, !5, i64 608, i64 4, !136, i64 612, i64 4, !136, i64 616, i64 4, !5, i64 620, i64 4, !136, i64 624, i64 4, !136, i64 628, i64 4, !136, i64 632, i64 4, !136, i64 636, i64 4, !136, i64 640, i64 4, !136, i64 644, i64 4, !5, i64 648, i64 4, !5, i64 652, i64 4, !5, i64 656, i64 4, !5, i64 660, i64 4, !5, i64 664, i64 4, !5, i64 668, i64 4, !5, i64 672, i64 4, !66, i64 680, i64 8, !68, i64 688, i64 8, !1, i64 696, i64 4, !5, i64 700, i64 4, !5}
!171 = !{!88, !88, i64 0}
!172 = !{!84, !6, i64 16}
!173 = !{!174, !2, i64 0}
!174 = !{!"gs_param_list_s", !2, i64 0, !2, i64 8, !6, i64 16}
!175 = !{!176, !2, i64 56}
!176 = !{!"gs_param_list_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64}
!177 = !{!178, !2, i64 0}
!178 = !{!"gs_param_string_s", !2, i64 0, !6, i64 8, !6, i64 12}
!179 = !{!180, !6, i64 12}
!180 = !{!"compressed_color_list_s", !2, i64 0, !6, i64 8, !6, i64 12, !6, i64 16, !3, i64 24}
!181 = !{!180, !6, i64 16}
!182 = !{!183, !12, i64 0}
!183 = !{!"comp_bit_map_list_s", !12, i64 0, !12, i64 2, !6, i64 4, !10, i64 8, !10, i64 16}
!184 = !{!183, !12, i64 2}
!185 = !{!183, !6, i64 4}
!186 = !{!183, !10, i64 8}
!187 = !{!183, !10, i64 16}
!188 = !{!178, !6, i64 8}
!189 = !{!190, !6, i64 0}
!190 = !{!"devn_separation_name_s", !6, i64 0, !2, i64 8}
!191 = !{!190, !2, i64 8}
!192 = !{!21, !6, i64 0}
!193 = !{!61, !6, i64 832}
!194 = !{!61, !6, i64 836}
!195 = !{!61, !6, i64 100}
!196 = !{!8, !3, i64 104}
!197 = !{!61, !2, i64 1168}
!198 = !{!37, !6, i64 20}
!199 = !{!61, !6, i64 84}
!200 = !{i64 0, i64 4, !5, i64 8, i64 8, !1, i64 16, i64 8, !1, i64 24, i64 4, !136, i64 28, i64 4, !66, i64 32, i64 4, !66, i64 36, i64 4, !66, i64 40, i64 4, !66, i64 44, i64 4, !5, i64 48, i64 4, !136, i64 52, i64 4, !136, i64 56, i64 4, !136, i64 60, i64 4, !5, i64 64, i64 4, !136, i64 68, i64 4, !136, i64 72, i64 4, !136, i64 76, i64 4, !136, i64 80, i64 4, !136, i64 84, i64 4, !136, i64 88, i64 8, !1, i64 96, i64 4, !5, i64 100, i64 4, !136, i64 104, i64 4, !5, i64 108, i64 4, !136, i64 112, i64 4, !5, i64 116, i64 4, !5, i64 120, i64 4, !136, i64 128, i64 4, !5, i64 132, i64 4, !136, i64 136, i64 4, !136, i64 140, i64 4, !136, i64 144, i64 4, !136, i64 148, i64 4, !136, i64 152, i64 4, !136, i64 156, i64 4, !5, i64 160, i64 4, !5, i64 164, i64 4, !5, i64 168, i64 4, !5, i64 176, i64 8, !171, i64 184, i64 8, !171, i64 192, i64 8, !171, i64 200, i64 8, !171, i64 208, i64 4, !5, i64 212, i64 4, !5, i64 216, i64 2, !67, i64 220, i64 4, !66, i64 224, i64 4, !136, i64 228, i64 4, !136, i64 232, i64 4, !5, i64 236, i64 4, !5, i64 240, i64 8, !68, i64 248, i64 4, !5, i64 252, i64 4, !5, i64 256, i64 4, !5, i64 264, i64 8, !1, i64 272, i64 4, !5, i64 276, i64 4, !5, i64 280, i64 4, !5, i64 284, i64 4, !5, i64 288, i64 4, !5, i64 292, i64 4, !5, i64 296, i64 4, !136, i64 300, i64 4, !5, i64 304, i64 4, !5, i64 308, i64 4, !5, i64 312, i64 4, !5, i64 316, i64 4, !5, i64 320, i64 4, !136, i64 324, i64 4, !5, i64 328, i64 4, !5, i64 336, i64 8, !1, i64 344, i64 8, !1, i64 352, i64 8, !1, i64 360, i64 8, !1, i64 368, i64 8, !1, i64 376, i64 16, !66, i64 392, i64 8, !1, i64 400, i64 8, !1, i64 408, i64 4, !5, i64 416, i64 8, !1, i64 424, i64 8, !1, i64 432, i64 4, !5, i64 440, i64 8, !1, i64 448, i64 4, !5, i64 456, i64 8, !1, i64 464, i64 4, !5, i64 472, i64 8, !1, i64 480, i64 4, !5, i64 488, i64 8, !1, i64 496, i64 512, !66, i64 1008, i64 8, !1, i64 1016, i64 8, !1, i64 1024, i64 4, !5, i64 1028, i64 4, !66, i64 1032, i64 4, !5, i64 1036, i64 4, !5, i64 1040, i64 8, !68, i64 1048, i64 256, !66, i64 1304, i64 8, !1, i64 1312, i64 8, !1, i64 1320, i64 8, !1, i64 1328, i64 8, !1, i64 1336, i64 4, !5, i64 1340, i64 4, !66, i64 1344, i64 4, !5, i64 1348, i64 4, !5, i64 1352, i64 8, !68, i64 1360, i64 256, !66}
!201 = !{!102, !2, i64 264}
!202 = !{!102, !6, i64 256}
!203 = !{!204, !2, i64 368}
!204 = !{!"gx_device_color_s", !2, i64 0, !3, i64 8, !26, i64 352, !6, i64 360, !205, i64 368, !207, i64 632}
!205 = !{!"gs_client_color_s", !2, i64 0, !206, i64 8}
!206 = !{!"gs_paint_color_s", !3, i64 0}
!207 = !{!"_mask", !208, i64 0, !10, i64 8, !2, i64 16}
!208 = !{!"mp_", !6, i64 0, !6, i64 4}
!209 = !{!210, !2, i64 32}
!210 = !{!"gs_pattern2_instance_s", !9, i64 0, !2, i64 24, !2, i64 32, !10, i64 40, !211, i64 48, !6, i64 96}
!211 = !{!"gs_pattern2_template_s", !2, i64 0, !6, i64 8, !212, i64 16, !2, i64 32, !2, i64 40}
!212 = !{!"gs_uid_s", !10, i64 0, !2, i64 8}
!213 = !{!214, !6, i64 256}
!214 = !{!"gs_state_s", !6, i64 0, !2, i64 8, !2, i64 16, !103, i64 24, !6, i64 128, !105, i64 132, !6, i64 168, !87, i64 176, !87, i64 192, !6, i64 208, !6, i64 212, !12, i64 216, !3, i64 220, !89, i64 224, !89, i64 228, !106, i64 232, !10, i64 240, !6, i64 248, !6, i64 252, !6, i64 256, !2, i64 264, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284, !6, i64 288, !6, i64 292, !22, i64 296, !107, i64 300, !6, i64 308, !6, i64 312, !6, i64 316, !22, i64 320, !6, i64 324, !6, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !6, i64 408, !2, i64 416, !2, i64 424, !108, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !109, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !109, i64 1336, !2, i64 1616, !90, i64 1624, !6, i64 1648, !90, i64 1652, !6, i64 1676, !2, i64 1680, !2, i64 1688, !2, i64 1696, !2, i64 1704, !10, i64 1712, !10, i64 1720, !2, i64 1728, !6, i64 1736, !3, i64 1744, !2, i64 1792, !2, i64 1800, !105, i64 1808, !6, i64 1844, !3, i64 1848, !3, i64 1852, !2, i64 1856, !6, i64 1864, !2, i64 1872, !2, i64 1880, !215, i64 1888}
!215 = !{!"gs_state_client_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!216 = !{!214, !2, i64 264}
!217 = !{!218, !2, i64 0}
!218 = !{!"_pat", !2, i64 0}
!219 = !{!220, !2, i64 192}
!220 = !{!"gx_color_tile_s", !10, i64 0, !6, i64 8, !212, i64 16, !6, i64 32, !6, i64 36, !90, i64 40, !86, i64 64, !101, i64 96, !101, i64 144, !2, i64 192, !2, i64 200, !3, i64 208, !3, i64 209, !3, i64 210, !3, i64 211, !6, i64 216, !6, i64 220, !6, i64 224}
!221 = !{!29, !2, i64 72}
!222 = !{!29, !6, i64 80}
!223 = !{!220, !3, i64 209}
!224 = !{!29, !2, i64 96}
!225 = !{!8, !2, i64 24}
!226 = !{!29, !2, i64 24}
!227 = !{!204, !2, i64 0}
!228 = !{!229, !2, i64 48}
!229 = !{!"gx_device_color_type_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80}
!230 = !{!8, !2, i64 4144}
!231 = !{!232, !6, i64 584}
!232 = !{!"gs_image1_s", !2, i64 0, !90, i64 8, !6, i64 32, !6, i64 36, !6, i64 40, !3, i64 44, !6, i64 564, !3, i64 568, !6, i64 572, !2, i64 576, !6, i64 584, !6, i64 588, !3, i64 592, !3, i64 596}
!233 = !{!61, !2, i64 1392}
!234 = !{!8, !2, i64 4208}
!235 = !{!236, !6, i64 68}
!236 = !{!"gs_overprint_s", !2, i64 0, !10, i64 8, !6, i64 16, !2, i64 24, !2, i64 32, !237, i64 40}
!237 = !{!"gs_overprint_params_s", !6, i64 0, !6, i64 4, !6, i64 8, !10, i64 16, !12, i64 24, !6, i64 28}
!238 = !{!8, !6, i64 4196}
!239 = !{!236, !6, i64 40}
!240 = !{!236, !6, i64 44}
!241 = !{!236, !10, i64 56}
!242 = !{!8, !10, i64 4200}
!243 = !{!102, !22, i64 224}
!244 = !{!102, !22, i64 228}
!245 = !{!246, !6, i64 8}
!246 = !{!"gs_transparency_group_params_s", !2, i64 0, !6, i64 8, !6, i64 12, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !3, i64 32, !10, i64 40, !2, i64 48}
!247 = !{!8, !2, i64 16}
!248 = !{!61, !2, i64 1664}
!249 = !{!246, !3, i64 32}
!250 = !{!246, !6, i64 28}
!251 = !{!246, !2, i64 48}
!252 = !{!246, !10, i64 40}
!253 = !{!116, !6, i64 152}
!254 = !{!116, !2, i64 256}
!255 = !{!116, !6, i64 220}
!256 = !{!246, !6, i64 12}
!257 = !{!102, !3, i64 220}
!258 = !{!246, !6, i64 20}
!259 = !{!246, !6, i64 24}
!260 = !{!37, !2, i64 136}
!261 = !{!262, !2, i64 160}
!262 = !{!"pdf14_parent_color_s", !6, i64 0, !6, i64 4, !3, i64 8, !3, i64 12, !3, i64 76, !3, i64 140, !6, i64 144, !6, i64 148, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216}
!263 = !{!262, !2, i64 184}
!264 = !{!262, !2, i64 152}
!265 = !{!102, !2, i64 360}
!266 = !{!8, !2, i64 1536}
!267 = !{!8, !2, i64 1544}
!268 = !{!262, !3, i64 8}
!269 = !{!262, !6, i64 0}
!270 = !{!262, !2, i64 200}
!271 = !{!262, !6, i64 4}
!272 = !{!24, !6, i64 40}
!273 = !{!262, !2, i64 192}
!274 = !{!8, !2, i64 4136}
!275 = !{!262, !3, i64 140}
!276 = !{!8, !12, i64 108}
!277 = !{!262, !6, i64 148}
!278 = !{!8, !6, i64 116}
!279 = !{!262, !6, i64 144}
!280 = !{!8, !6, i64 112}
!281 = !{!262, !2, i64 208}
!282 = !{!61, !2, i64 1104}
!283 = !{!24, !2, i64 16}
!284 = !{!285, !6, i64 12}
!285 = !{!"gx_transparency_mask_params_s", !3, i64 0, !6, i64 4, !3, i64 8, !6, i64 12, !3, i64 16, !22, i64 272, !6, i64 276, !6, i64 280, !6, i64 284, !6, i64 288, !3, i64 292, !10, i64 552, !2, i64 560}
!286 = !{!285, !22, i64 272}
!287 = !{!285, !3, i64 8}
!288 = !{!285, !6, i64 4}
!289 = !{!285, !10, i64 552}
!290 = !{!285, !2, i64 560}
!291 = !{!285, !6, i64 280}
!292 = !{!285, !6, i64 284}
!293 = !{!285, !6, i64 288}
!294 = !{!285, !3, i64 0}
!295 = !{!262, !2, i64 168}
!296 = !{!8, !2, i64 1552}
!297 = !{!262, !2, i64 176}
!298 = !{!8, !2, i64 1560}
!299 = !{!8, !2, i64 4160}
!300 = !{!8, !2, i64 5016}
!301 = !{!302, !6, i64 8}
!302 = !{!"pdf14_smaskcolor_s", !2, i64 0, !6, i64 8}
!303 = !{!262, !2, i64 216}
!304 = !{!24, !2, i64 8}
!305 = !{!37, !2, i64 0}
!306 = !{!37, !2, i64 88}
!307 = !{!37, !2, i64 8}
!308 = !{!37, !2, i64 112}
!309 = !{!310, !6, i64 0}
!310 = !{!"gs_fixed_rect_s", !107, i64 0, !107, i64 8}
!311 = !{!310, !6, i64 4}
!312 = !{!310, !6, i64 8}
!313 = !{!310, !6, i64 12}
!314 = !{!315, !2, i64 0}
!315 = !{!"pdf14_mask_s", !2, i64 0, !2, i64 8, !2, i64 16}
!316 = !{!317, !10, i64 8}
!317 = !{!"pdf14_rcmask_s", !2, i64 0, !9, i64 8, !2, i64 32}
!318 = !{!315, !2, i64 8}
!319 = !{!317, !2, i64 24}
!320 = !{!317, !2, i64 16}
!321 = !{!315, !2, i64 16}
!322 = !{!24, !6, i64 48}
!323 = !{!324, !2, i64 0}
!324 = !{!"gxdso_device_child_request_s", !2, i64 0, !6, i64 8}
!325 = !{!92, !6, i64 168}
!326 = !{!61, !3, i64 1112}
!327 = !{!37, !6, i64 40}
!328 = !{!37, !6, i64 72}
!329 = !{!24, !6, i64 44}
!330 = !{!24, !6, i64 52}
!331 = !{!37, !6, i64 16}
!332 = !{!37, !6, i64 32}
!333 = !{!37, !6, i64 120}
!334 = !{!37, !6, i64 128}
!335 = !{!37, !6, i64 96}
!336 = !{!37, !6, i64 100}
!337 = !{!37, !6, i64 104}
!338 = !{!37, !6, i64 108}
!339 = !{!317, !2, i64 0}
!340 = !{!317, !2, i64 32}
!341 = !{!342, !2, i64 0}
!342 = !{!"", !2, i64 0, !2, i64 8}
!343 = !{!8, !22, i64 4176}
!344 = !{!8, !22, i64 4172}
!345 = !{!8, !6, i64 4188}
!346 = !{!61, !6, i64 880}
!347 = !{!61, !10, i64 928}
!348 = !{!61, !6, i64 1052}
!349 = !{!92, !6, i64 152}
!350 = !{!92, !6, i64 156}
!351 = !{!92, !6, i64 164}
!352 = !{i64 0, i64 4, !66, i64 4, i64 4, !66, i64 8, i64 4, !66, i64 12, i64 4, !66, i64 16, i64 4, !66, i64 20, i64 4, !5}
!353 = !{!92, !6, i64 172}
!354 = !{!355, !2, i64 40}
!355 = !{!"gx_path_s", !356, i64 0, !2, i64 40, !3, i64 48, !2, i64 56, !2, i64 64, !310, i64 72, !2, i64 88, !3, i64 96, !3, i64 97, !3, i64 98, !3, i64 99, !3, i64 100, !6, i64 104, !6, i64 108, !107, i64 112, !2, i64 120}
!356 = !{!"gx_path_segments_s", !9, i64 0, !357, i64 24}
!357 = !{!"psc_", !2, i64 0, !2, i64 8}
!358 = !{!61, !2, i64 1432}
!359 = !{!360, !6, i64 0}
!360 = !{!"gx_fill_params_s", !6, i64 0, !107, i64 4, !22, i64 12}
!361 = !{!362, !6, i64 252}
!362 = !{!"gx_clip_path_s", !355, i64 0, !363, i64 128, !6, i64 232, !310, i64 236, !310, i64 252, !2, i64 272, !6, i64 280, !2, i64 288, !10, i64 296}
!363 = !{!"gx_clip_rect_list_s", !9, i64 0, !364, i64 24}
!364 = !{!"gx_clip_list_s", !365, i64 0, !2, i64 40, !2, i64 48, !2, i64 56, !6, i64 64, !6, i64 68, !6, i64 72}
!365 = !{!"gx_clip_rect_s", !2, i64 0, !2, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !3, i64 32}
!366 = !{!362, !6, i64 256}
!367 = !{!362, !6, i64 260}
!368 = !{!362, !6, i64 264}
!369 = !{!29, !6, i64 32}
!370 = !{!29, !6, i64 36}
!371 = !{!29, !6, i64 40}
!372 = !{!29, !6, i64 44}
!373 = !{!220, !2, i64 200}
!374 = !{!375, !6, i64 100}
!375 = !{!"gx_device_clist_common_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !2, i64 1728, !96, i64 1736, !2, i64 1768, !2, i64 1776, !6, i64 1784, !17, i64 1792, !6, i64 1808, !6, i64 1812, !97, i64 1816, !98, i64 1840, !6, i64 1864, !6, i64 1868, !2, i64 1872, !6, i64 1880, !6, i64 1884, !99, i64 1888, !6, i64 10144, !10, i64 10152, !2, i64 10160, !2, i64 10168, !6, i64 10176, !2, i64 10184}
!376 = !{!204, !6, i64 352}
!377 = !{!26, !6, i64 0}
!378 = !{!204, !6, i64 356}
!379 = !{!26, !6, i64 4}
!380 = !{!362, !2, i64 272}
!381 = !{!363, !2, i64 64}
!382 = !{!365, !2, i64 0}
!383 = !{!363, !6, i64 96}
!384 = !{!365, !6, i64 24}
!385 = !{!365, !6, i64 16}
!386 = !{!365, !6, i64 28}
!387 = !{!365, !6, i64 20}
!388 = !{!363, !6, i64 48}
!389 = !{!363, !6, i64 40}
!390 = !{!363, !6, i64 52}
!391 = !{!363, !6, i64 44}
!392 = !{!102, !12, i64 216}
!393 = !{!102, !6, i64 212}
!394 = !{!8, !22, i64 4168}
!395 = !{!102, !6, i64 272}
!396 = !{!102, !6, i64 276}
!397 = !{!8, !6, i64 4192}
!398 = !{!37, !3, i64 24}
!399 = !{!37, !3, i64 25}
!400 = !{!37, !3, i64 28}
!401 = !{!118, !3, i64 4}
!402 = !{!118, !3, i64 12}
!403 = !{!118, !6, i64 20}
!404 = !{!118, !3, i64 8}
!405 = !{!118, !3, i64 0}
!406 = !{!118, !3, i64 16}
!407 = !{!408, !6, i64 116}
!408 = !{!"gsicc_link_s", !2, i64 0, !409, i64 8, !410, i64 40, !2, i64 72, !6, i64 80, !2, i64 88, !2, i64 96, !6, i64 104, !6, i64 108, !6, i64 112, !6, i64 116, !6, i64 120, !6, i64 124, !409, i64 128, !3, i64 160, !6, i64 164, !6, i64 168}
!409 = !{!"gscms_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!410 = !{!"gsicc_hashlink_s", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24}
!411 = !{!408, !2, i64 8}
!412 = !{!86, !88, i64 0}
!413 = !{!86, !88, i64 8}
!414 = !{!232, !6, i64 32}
!415 = !{!86, !88, i64 16}
!416 = !{!232, !6, i64 36}
!417 = !{!86, !88, i64 24}
!418 = !{!419, !2, i64 1208}
!419 = !{!"gx_image_enum_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !10, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308, !6, i64 568, !6, i64 572, !3, i64 576, !3, i64 577, !3, i64 578, !3, i64 579, !3, i64 580, !420, i64 584, !3, i64 1116, !3, i64 1117, !3, i64 1118, !3, i64 1119, !90, i64 1120, !421, i64 1144, !422, i64 1160, !6, i64 1176, !6, i64 1180, !107, i64 1184, !107, i64 1192, !2, i64 1200, !2, i64 1208, !2, i64 1216, !2, i64 1224, !2, i64 1232, !6, i64 1240, !2, i64 1248, !6, i64 1256, !6, i64 1260, !3, i64 1264, !3, i64 1268, !3, i64 1269, !3, i64 1270, !3, i64 1271, !310, i64 1272, !310, i64 1288, !6, i64 1304, !6, i64 1308, !6, i64 1312, !6, i64 1316, !2, i64 1320, !2, i64 1328, !2, i64 1336, !6, i64 1344, !26, i64 1348, !107, i64 1356, !107, i64 1364, !423, i64 1372, !6, i64 1492, !6, i64 1496, !26, i64 1500, !6, i64 1508, !6, i64 1512, !6, i64 1516, !6, i64 1520, !6, i64 1524, !3, i64 1528, !2, i64 23112, !204, i64 23120, !204, i64 23776, !2, i64 24432, !2, i64 24440, !2, i64 24448, !2, i64 24456, !2, i64 24464, !6, i64 24472, !6, i64 24476, !6, i64 24480, !2, i64 24488, !6, i64 24496, !3, i64 24500, !428, i64 24504, !429, i64 24792, !6, i64 24808}
!420 = !{!"mc_", !3, i64 0, !6, i64 520, !6, i64 524, !6, i64 528}
!421 = !{!"r_", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!422 = !{!"", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!423 = !{!"dd_", !424, i64 0, !424, i64 40, !424, i64 80}
!424 = !{!"gx_dda_fixed_point_s", !425, i64 0, !425, i64 20}
!425 = !{!"gx_dda_fixed_s", !426, i64 0, !427, i64 8}
!426 = !{!"_a", !6, i64 0, !6, i64 4}
!427 = !{!"_e", !6, i64 0, !6, i64 4, !6, i64 8}
!428 = !{!"ht_landscape_info_s", !6, i64 0, !3, i64 4, !6, i64 260, !6, i64 264, !6, i64 268, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284}
!429 = !{!"gx_image_icc_setup_s", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!430 = !{!29, !2, i64 104}
!431 = !{!220, !6, i64 220}
!432 = !{!24, !6, i64 24}
!433 = !{!24, !6, i64 32}
!434 = !{!24, !6, i64 28}
!435 = !{!24, !6, i64 36}
!436 = !{!419, !2, i64 1216}
!437 = !{!419, !2, i64 24440}
!438 = !{!102, !6, i64 0}
!439 = !{!85, !6, i64 660}
!440 = !{!85, !6, i64 700}
!441 = !{!8, !2, i64 4224}
!442 = !{!342, !2, i64 8}
!443 = !{!61, !6, i64 840}
!444 = !{!8, !6, i64 840}
!445 = !{!61, !6, i64 844}
!446 = !{!8, !6, i64 844}
!447 = !{!61, !6, i64 848}
!448 = !{!8, !6, i64 848}
!449 = !{i64 0, i64 8, !1, i64 8, i64 8, !1, i64 16, i64 8, !1, i64 24, i64 8, !1, i64 32, i64 8, !1, i64 40, i64 8, !1, i64 48, i64 8, !1, i64 56, i64 8, !1, i64 64, i64 8, !1, i64 72, i64 8, !1, i64 80, i64 8, !1, i64 88, i64 8, !1, i64 96, i64 8, !1, i64 104, i64 8, !1, i64 112, i64 8, !1, i64 120, i64 8, !1, i64 128, i64 8, !1, i64 136, i64 8, !1, i64 144, i64 8, !1, i64 152, i64 8, !1, i64 160, i64 8, !1, i64 168, i64 8, !1, i64 176, i64 8, !1, i64 184, i64 8, !1, i64 192, i64 8, !1, i64 200, i64 8, !1, i64 208, i64 8, !1, i64 216, i64 8, !1, i64 224, i64 8, !1, i64 232, i64 8, !1, i64 240, i64 8, !1, i64 248, i64 8, !1, i64 256, i64 8, !1, i64 264, i64 8, !1, i64 272, i64 8, !1, i64 280, i64 8, !1, i64 288, i64 8, !1, i64 296, i64 8, !1, i64 304, i64 8, !1, i64 312, i64 8, !1, i64 320, i64 8, !1, i64 328, i64 8, !1, i64 336, i64 8, !1, i64 344, i64 8, !1, i64 352, i64 8, !1, i64 360, i64 8, !1, i64 368, i64 8, !1, i64 376, i64 8, !1, i64 384, i64 8, !1, i64 392, i64 8, !1, i64 400, i64 8, !1, i64 408, i64 8, !1, i64 416, i64 8, !1, i64 424, i64 8, !1, i64 432, i64 8, !1, i64 440, i64 8, !1, i64 448, i64 8, !1, i64 456, i64 8, !1, i64 464, i64 8, !1, i64 472, i64 8, !1, i64 480, i64 8, !1, i64 488, i64 8, !1, i64 496, i64 8, !1, i64 504, i64 8, !1, i64 512, i64 8, !1, i64 520, i64 8, !1, i64 528, i64 8, !1, i64 536, i64 8, !1, i64 544, i64 8, !1, i64 552, i64 8, !1, i64 560, i64 8, !1, i64 568, i64 8, !1, i64 576, i64 8, !1}
!450 = !{!8, !2, i64 8}
!451 = !{!61, !2, i64 8}
!452 = !{!8, !2, i64 1144}
!453 = !{!102, !6, i64 248}
!454 = !{!85, !6, i64 648}
!455 = !{!85, !6, i64 652}
!456 = !{!85, !6, i64 656}
!457 = !{!102, !2, i64 336}
!458 = !{!459, !2, i64 56}
!459 = !{!"gsicc_manager_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !6, i64 64, !2, i64 72, !2, i64 80, !9, i64 88}
!460 = !{!461, !6, i64 32}
!461 = !{!"gsicc_smask_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !6, i64 32}
!462 = !{!302, !2, i64 0}
!463 = !{!459, !2, i64 8}
!464 = !{!461, !2, i64 0}
!465 = !{!459, !2, i64 16}
!466 = !{!461, !2, i64 8}
!467 = !{!459, !2, i64 24}
!468 = !{!461, !2, i64 16}
!469 = !{!470, !2, i64 0}
!470 = !{!"", !2, i64 0, !2, i64 8, !2, i64 16}
!471 = !{!472, !2, i64 64}
!472 = !{!"gs_color_space_s", !2, i64 0, !9, i64 8, !10, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !3, i64 72}
!473 = !{i64 0, i64 4, !5, i64 8, i64 8, !1, i64 16, i64 8, !1, i64 24, i64 8, !1, i64 32, i64 8, !1, i64 40, i64 4, !5, i64 48, i64 8, !1, i64 56, i64 8, !68, i64 64, i64 8, !1, i64 72, i64 8, !1, i64 80, i64 4, !5, i64 84, i64 4, !5, i64 88, i64 4, !5, i64 96, i64 4, !5, i64 100, i64 4, !5, i64 104, i64 4, !66, i64 108, i64 2, !67, i64 110, i64 1, !66, i64 112, i64 4, !5, i64 116, i64 4, !5, i64 120, i64 4, !5, i64 124, i64 4, !5, i64 128, i64 4, !5, i64 132, i64 4, !5, i64 136, i64 4, !66, i64 140, i64 64, !66, i64 204, i64 64, !66, i64 272, i64 512, !66, i64 784, i64 8, !1, i64 792, i64 4, !66, i64 800, i64 8, !68, i64 808, i64 4, !5, i64 816, i64 8, !68, i64 824, i64 8, !68, i64 832, i64 4, !5, i64 836, i64 4, !5, i64 840, i64 4, !5, i64 844, i64 4, !5, i64 848, i64 4, !5, i64 852, i64 4, !5, i64 856, i64 8, !66, i64 864, i64 16, !66, i64 880, i64 4, !5, i64 884, i64 8, !66, i64 892, i64 8, !66, i64 900, i64 8, !66, i64 908, i64 16, !66, i64 928, i64 8, !68, i64 936, i64 8, !68, i64 944, i64 4, !5, i64 948, i64 4, !5, i64 952, i64 4, !5, i64 956, i64 4, !5, i64 960, i64 4, !5, i64 968, i64 8, !68, i64 976, i64 8, !68, i64 984, i64 4, !5, i64 988, i64 32, !66, i64 1020, i64 32, !66, i64 1052, i64 4, !5, i64 1056, i64 4, !5, i64 1064, i64 8, !68, i64 1072, i64 8, !68, i64 1080, i64 4, !5, i64 1084, i64 4, !5, i64 1088, i64 8, !68, i64 1096, i64 4, !5, i64 1100, i64 4, !66, i64 1104, i64 8, !1, i64 1112, i64 4, !66, i64 1120, i64 8, !1, i64 1128, i64 8, !1, i64 1136, i64 8, !1, i64 1144, i64 8, !1, i64 1152, i64 8, !1, i64 1160, i64 8, !1, i64 1168, i64 8, !1, i64 1176, i64 8, !1, i64 1184, i64 8, !1, i64 1192, i64 8, !1, i64 1200, i64 8, !1, i64 1208, i64 8, !1, i64 1216, i64 8, !1, i64 1224, i64 8, !1, i64 1232, i64 8, !1, i64 1240, i64 8, !1, i64 1248, i64 8, !1, i64 1256, i64 8, !1, i64 1264, i64 8, !1, i64 1272, i64 8, !1, i64 1280, i64 8, !1, i64 1288, i64 8, !1, i64 1296, i64 8, !1, i64 1304, i64 8, !1, i64 1312, i64 8, !1, i64 1320, i64 8, !1, i64 1328, i64 8, !1, i64 1336, i64 8, !1, i64 1344, i64 8, !1, i64 1352, i64 8, !1, i64 1360, i64 8, !1, i64 1368, i64 8, !1, i64 1376, i64 8, !1, i64 1384, i64 8, !1, i64 1392, i64 8, !1, i64 1400, i64 8, !1, i64 1408, i64 8, !1, i64 1416, i64 8, !1, i64 1424, i64 8, !1, i64 1432, i64 8, !1, i64 1440, i64 8, !1, i64 1448, i64 8, !1, i64 1456, i64 8, !1, i64 1464, i64 8, !1, i64 1472, i64 8, !1, i64 1480, i64 8, !1, i64 1488, i64 8, !1, i64 1496, i64 8, !1, i64 1504, i64 8, !1, i64 1512, i64 8, !1, i64 1520, i64 8, !1, i64 1528, i64 8, !1, i64 1536, i64 8, !1, i64 1544, i64 8, !1, i64 1552, i64 8, !1, i64 1560, i64 8, !1, i64 1568, i64 8, !1, i64 1576, i64 8, !1, i64 1584, i64 8, !1, i64 1592, i64 8, !1, i64 1600, i64 8, !1, i64 1608, i64 8, !1, i64 1616, i64 8, !1, i64 1624, i64 8, !1, i64 1632, i64 8, !1, i64 1640, i64 8, !1, i64 1648, i64 8, !1, i64 1656, i64 8, !1, i64 1664, i64 8, !1, i64 1672, i64 8, !1, i64 1680, i64 8, !1, i64 1688, i64 8, !1, i64 1696, i64 8, !1, i64 1704, i64 8, !1, i64 1712, i64 8, !1, i64 1720, i64 8, !1, i64 1728, i64 8, !1, i64 1736, i64 4, !5, i64 1744, i64 8, !1, i64 1752, i64 4, !5, i64 1756, i64 4, !5, i64 1760, i64 4, !5, i64 1768, i64 4, !5, i64 1776, i64 1024, !66, i64 2800, i64 4, !5, i64 2804, i64 280, !66, i64 3088, i64 8, !1, i64 3096, i64 8, !1, i64 3104, i64 4, !5, i64 3112, i64 1024, !66, i64 4136, i64 8, !1, i64 4144, i64 8, !1, i64 4152, i64 8, !1, i64 4160, i64 8, !1, i64 4168, i64 4, !136, i64 4172, i64 4, !136, i64 4176, i64 4, !136, i64 4180, i64 4, !66, i64 4184, i64 4, !5, i64 4188, i64 4, !5, i64 4192, i64 4, !5, i64 4196, i64 4, !5, i64 4200, i64 8, !68, i64 4208, i64 8, !1, i64 4216, i64 4, !5, i64 4224, i64 8, !1, i64 4232, i64 4, !5, i64 4236, i64 4, !5, i64 4240, i64 4, !66, i64 4244, i64 2, !67, i64 4246, i64 1, !66, i64 4248, i64 4, !5, i64 4252, i64 4, !5, i64 4256, i64 4, !5, i64 4260, i64 4, !5, i64 4264, i64 4, !5, i64 4268, i64 4, !5, i64 4272, i64 4, !66, i64 4276, i64 64, !66, i64 4340, i64 64, !66, i64 4408, i64 512, !66, i64 4920, i64 8, !1, i64 4928, i64 4, !66, i64 4936, i64 8, !68, i64 4944, i64 4, !5, i64 4952, i64 8, !1, i64 4960, i64 8, !1, i64 4968, i64 8, !1, i64 4976, i64 8, !1, i64 4984, i64 8, !1, i64 4992, i64 8, !1, i64 5000, i64 8, !1, i64 5008, i64 8, !1, i64 5016, i64 8, !1}
!474 = !{!8, !6, i64 96}
!475 = !{!8, !3, i64 110}
!476 = !{!8, !6, i64 120}
!477 = !{!84, !6, i64 44}
!478 = !{!8, !6, i64 124}
!479 = !{!61, !3, i64 104}
!480 = !{!61, !2, i64 1544}
!481 = !{!61, !6, i64 96}
!482 = !{!116, !3, i64 0}
!483 = !{!19, !2, i64 416}
!484 = !{!19, !2, i64 408}
!485 = !{!19, !2, i64 392}
!486 = !{!19, !2, i64 400}
!487 = !{!61, !2, i64 1552}
!488 = !{!61, !2, i64 1536}
!489 = !{!490, !2, i64 0}
!490 = !{!"gx_cm_color_map_procs_s", !2, i64 0, !2, i64 8, !2, i64 16}
!491 = !{!490, !2, i64 8}
!492 = !{!490, !2, i64 16}
!493 = !{!102, !3, i64 1028}
!494 = !{!102, !6, i64 1036}
!495 = !{!496, !2, i64 24}
!496 = !{!"gx_transfer_map_s", !9, i64 0, !2, i64 24, !497, i64 32, !10, i64 48, !3, i64 56}
!497 = !{!"gs_mapping_closure_s", !2, i64 0, !2, i64 8}
!498 = !{!109, !6, i64 12}
!499 = !{!109, !6, i64 8}
!500 = !{!37, !3, i64 124}
!501 = !{!8, !6, i64 1768}
!502 = !{!503, !2, i64 0}
!503 = !{!"enum_ptr_s", !2, i64 0, !6, i64 8}
!504 = !{!8, !6, i64 3104}
!505 = !{!8, !2, i64 3096}
!506 = !{!507, !2, i64 0}
!507 = !{!"gc_procs_common_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!508 = !{!61, !2, i64 1656}
!509 = !{!232, !22, i64 8}
!510 = !{!232, !22, i64 20}
!511 = !{!232, !6, i64 40}
!512 = !{!90, !22, i64 0}
!513 = !{!90, !22, i64 4}
!514 = !{!90, !22, i64 8}
!515 = !{!90, !22, i64 12}
!516 = !{!61, !2, i64 1440}
!517 = !{!518, !2, i64 0}
!518 = !{!"gx_image_plane_s", !2, i64 0, !6, i64 8, !6, i64 12}
!519 = !{!518, !6, i64 8}
!520 = !{!518, !6, i64 12}
!521 = !{!522, !2, i64 8}
!522 = !{!"gx_image_enum_common_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !10, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308}
!523 = !{!524, !2, i64 0}
!524 = !{!"gx_image_enum_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!525 = !{!524, !2, i64 8}
!526 = !{!8, !2, i64 4976}
!527 = !{!54, !2, i64 0}
!528 = !{!20, !6, i64 16}
!529 = !{!61, !10, i64 1064}
!530 = !{i64 0, i64 4, !5, i64 4, i64 4, !5}
!531 = !{!532, !2, i64 18472}
!532 = !{!"gx_device_pdf14_accum_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !3, i64 1728, !533, i64 12968, !3, i64 13056, !6, i64 17152, !6, i64 17156, !6, i64 17160, !6, i64 17164, !6, i64 17168, !6, i64 17172, !2, i64 17176, !10, i64 17184, !2, i64 17192, !2, i64 17200, !2, i64 17208, !2, i64 17216, !2, i64 17224, !6, i64 17232, !2, i64 17240, !6, i64 17248, !6, i64 17252, !534, i64 17256, !6, i64 17288, !2, i64 17296, !19, i64 17304, !19, i64 17888, !2, i64 18472}
!533 = !{!"gx_printer_device_procs_s", !2, i64 0, !2, i64 8, !96, i64 16, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80}
!534 = !{!"bg_print_s", !2, i64 0, !2, i64 8, !2, i64 16, !6, i64 24, !6, i64 28}
!535 = !{!61, !3, i64 136}
!536 = !{!532, !6, i64 1056}
!537 = !{!61, !10, i64 1072}
!538 = !{!539, !10, i64 17184}
!539 = !{!"gx_device_printer_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !9, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !11, i64 96, !14, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !10, i64 928, !10, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !10, i64 968, !10, i64 976, !15, i64 984, !6, i64 1052, !6, i64 1056, !16, i64 1064, !2, i64 1104, !3, i64 1112, !18, i64 1120, !19, i64 1144, !3, i64 1728, !533, i64 12968, !3, i64 13056, !6, i64 17152, !6, i64 17156, !6, i64 17160, !6, i64 17164, !6, i64 17168, !6, i64 17172, !2, i64 17176, !10, i64 17184, !2, i64 17192, !2, i64 17200, !2, i64 17208, !2, i64 17216, !2, i64 17224, !6, i64 17232, !2, i64 17240, !6, i64 17248, !6, i64 17252, !534, i64 17256, !6, i64 17288, !2, i64 17296, !19, i64 17304, !19, i64 17888}
!540 = !{!61, !2, i64 1632}
!541 = !{!542, !3, i64 0}
!542 = !{!"gs_composite_type_s", !3, i64 0, !543, i64 8}
!543 = !{!"gs_composite_type_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72}
!544 = !{!164, !2, i64 24}
!545 = !{!84, !3, i64 96}
!546 = !{!84, !6, i64 48}
!547 = !{!246, !6, i64 16}
!548 = !{!246, !2, i64 0}
!549 = !{!8, !2, i64 4952}
!550 = !{!61, !2, i64 1560}
!551 = !{!8, !2, i64 4960}
!552 = !{!8, !2, i64 4984}
!553 = !{!8, !2, i64 4992}
!554 = !{!8, !2, i64 4968}
!555 = !{!8, !2, i64 5000}
!556 = !{!8, !2, i64 5008}
!557 = !{!8, !6, i64 4184}
!558 = !{i64 0, i64 8, !1, i64 8, i64 8, !68, i64 16, i64 4, !5, i64 24, i64 8, !1, i64 32, i64 8, !1}
!559 = !{!84, !6, i64 104}
!560 = !{!84, !3, i64 712}
!561 = !{!84, !10, i64 720}
!562 = !{!84, !2, i64 728}
!563 = !{!61, !2, i64 32}
!564 = !{!61, !2, i64 1240}
!565 = !{!85, !6, i64 696}
!566 = !{i64 0, i64 8, !171, i64 8, i64 8, !171, i64 16, i64 8, !171, i64 24, i64 8, !171}
!567 = !{!95, !6, i64 12148}
!568 = !{!95, !12, i64 12252}
!569 = !{!95, !3, i64 12248}
!570 = !{!95, !6, i64 12244}
!571 = !{!95, !6, i64 12260}
!572 = !{!95, !6, i64 12256}
!573 = !{!178, !6, i64 12}
!574 = !{!575, !2, i64 0}
!575 = !{!"keyname_link_list_s", !2, i64 0, !2, i64 8}
!576 = !{!575, !2, i64 8}
!577 = !{!8, !3, i64 136}
