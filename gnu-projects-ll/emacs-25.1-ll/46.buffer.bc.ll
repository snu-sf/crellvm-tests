; ModuleID = './src/buffer.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type { i64, i64, %struct.interval*, %struct.interval*, %union.anon, i8, i64 }
%union.anon = type { %struct.interval* }
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.Lisp_Symbol = type { i16, i64, %union.anon.12, i64, i64, %struct.Lisp_Symbol* }
%union.anon.12 = type { i64 }
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sortstrlist = type { %struct.sortstr*, i64, i64, i64 }
%struct.sortstr = type { i64, i64, i64, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Buffer_Objfwd = type { i32, i32, i64 }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.13, i16, i16, i8*, i8*, i8* }
%union.anon.13 = type { i64 ()* }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct._XDisplay = type opaque
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.text_pos = type { i64, i64 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon.0, %union.anon.2 }
%union.anon.0 = type { %struct.glyph_slice }
%union.anon.2 = type { i32 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%struct.xwidget = type opaque
%struct.glyph_slice = type { i64 }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.kboard = type opaque
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type opaque
%struct.coding_system = type { i64, i32, i32, %union.anon.6, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.6 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.7, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type opaque
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.Lisp_Buffer_Local_Value = type { i8, %union.Lisp_Fwd*, i64, i64, i64 }
%union.Lisp_Fwd = type { %struct.Lisp_Intfwd }
%struct.Lisp_Intfwd = type { i32, i64* }
%union.Aligned_String = type { %struct.Lisp_String }
%struct.Lisp_String = type { i64, i64, %struct.interval*, i8* }
%struct.sortvec = type { i64, i64, i64, i64, i64 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }

@.str = private unnamed_addr constant [19 x i8] c"No buffer named %s\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Invalid buffer argument\00", align 1
@Vbuffer_alist = common global i64 0, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"Empty string for buffer name is not allowed\00", align 1
@Vrun_hooks = external global i64, align 8
@.str.3 = private unnamed_addr constant [27 x i8] c"Buffer name `%s' is in use\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"No such buffer: `%s'\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"Base buffer has been killed\00", align 1
@current_buffer = common global %struct.buffer* null, align 8
@.str.6 = private unnamed_addr constant [26 x i8] c"buffer-save-without-query\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"buffer-file-number\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"buffer-stale-function\00", align 1
@buffer_defaults = common global %struct.buffer zeroinitializer, align 8
@.str.9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"-%ld\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"<%ld>\00", align 1
@lispsym = external global [1074 x %struct.Lisp_Symbol], align 8
@buffer_local_flags = common global %struct.buffer zeroinitializer, align 8
@last_per_buffer_idx = common global i32 0, align 4
@buffer_local_symbols = common global %struct.buffer zeroinitializer, align 8
@update_mode_lines = external global i32, align 4
@.str.12 = private unnamed_addr constant [41 x i8] c"Empty string is invalid as a buffer name\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"rename-auto-save-file\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"*scratch*\00", align 1
@globals = external global %struct.emacs_globals, align 8
@noninteractive = external global i8, align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"Buffer %s modified; kill anyway? \00", align 1
@minibuf_window = external global i64, align 8
@all_buffers = common global %struct.buffer* null, align 8
@.str.16 = private unnamed_addr constant [28 x i8] c"auto-save-visited-file-name\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"delete-auto-save-files\00", align 1
@selected_frame = external global i64, align 8
@.str.18 = private unnamed_addr constant [44 x i8] c"Attempt to set major mode for a dead buffer\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"initial-major-mode\00", align 1
@last_known_column_point = external global i64, align 8
@.str.20 = private unnamed_addr constant [25 x i8] c"Selecting deleted buffer\00", align 1
@.str.21 = private unnamed_addr constant [33 x i8] c"Cannot swap a dead buffer's text\00", align 1
@.str.22 = private unnamed_addr constant [36 x i8] c"Cannot swap indirect buffers's text\00", align 1
@.str.23 = private unnamed_addr constant [48 x i8] c"One of the buffers to swap has indirect buffers\00", align 1
@selected_window = external global i64, align 8
@.str.24 = private unnamed_addr constant [55 x i8] c"Cannot do `set-buffer-multibyte' on an indirect buffer\00", align 1
@.str.25 = private unnamed_addr constant [44 x i8] c"Changing multibyteness in a narrowed buffer\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"set-buffer-multibyte\00", align 1
@windows_or_buffers_changed = external global i32, align 4
@overlay_heads = internal global %struct.sortstrlist zeroinitializer, align 8
@overlay_tails = internal global %struct.sortstrlist zeroinitializer, align 8
@overlay_str_len = internal global i64 0, align 8
@overlay_str_buf = internal global i8* null, align 8
@.str.27 = private unnamed_addr constant [32 x i8] c"Marker points into wrong buffer\00", align 1
@.str.28 = private unnamed_addr constant [41 x i8] c"Attempt to move overlay to a dead buffer\00", align 1
@last_overlay_modification_hooks_used = internal global i64 0, align 8
@last_overlay_modification_hooks = internal global i64 0, align 8
@buffer_permanent_local_flags = internal global [50 x i8] zeroinitializer, align 16
@.str.29 = private unnamed_addr constant [19 x i8] c" *buffer-defaults*\00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c" *buffer-local-symbols*\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"%-\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"Fundamental\00", align 1
@QSFundamental = internal global i64 0, align 8
@.str.33 = private unnamed_addr constant [7 x i8] c" prin1\00", align 1
@Vprin1_to_string_buffer = external global i64, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.34 = private unnamed_addr constant [29 x i8] c"Error getting directory: %s\0A\00", align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"get_current_dir_name: %s\0A\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/:\00", align 1
@.str.38 = private unnamed_addr constant [23 x i8] c"overwrite-mode-textual\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"Attempt to modify a protected field\00", align 1
@syms_of_buffer.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.40 = private unnamed_addr constant [25 x i8] c"default-mode-line-format\00", align 1
@syms_of_buffer.o_fwd.41 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.42 = private unnamed_addr constant [27 x i8] c"default-header-line-format\00", align 1
@syms_of_buffer.o_fwd.43 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.44 = private unnamed_addr constant [20 x i8] c"default-cursor-type\00", align 1
@syms_of_buffer.o_fwd.45 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.46 = private unnamed_addr constant [21 x i8] c"default-line-spacing\00", align 1
@syms_of_buffer.o_fwd.47 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.48 = private unnamed_addr constant [39 x i8] c"default-cursor-in-non-selected-windows\00", align 1
@syms_of_buffer.o_fwd.49 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.50 = private unnamed_addr constant [20 x i8] c"default-abbrev-mode\00", align 1
@syms_of_buffer.o_fwd.51 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.52 = private unnamed_addr constant [18 x i8] c"default-ctl-arrow\00", align 1
@syms_of_buffer.o_fwd.53 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.54 = private unnamed_addr constant [36 x i8] c"default-enable-multibyte-characters\00", align 1
@syms_of_buffer.o_fwd.55 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.56 = private unnamed_addr constant [34 x i8] c"default-buffer-file-coding-system\00", align 1
@syms_of_buffer.o_fwd.57 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.58 = private unnamed_addr constant [23 x i8] c"default-truncate-lines\00", align 1
@syms_of_buffer.o_fwd.59 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.60 = private unnamed_addr constant [20 x i8] c"default-fill-column\00", align 1
@syms_of_buffer.o_fwd.61 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.62 = private unnamed_addr constant [20 x i8] c"default-left-margin\00", align 1
@syms_of_buffer.o_fwd.63 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.64 = private unnamed_addr constant [18 x i8] c"default-tab-width\00", align 1
@syms_of_buffer.o_fwd.65 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.66 = private unnamed_addr constant [25 x i8] c"default-case-fold-search\00", align 1
@syms_of_buffer.o_fwd.67 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.68 = private unnamed_addr constant [26 x i8] c"default-left-margin-width\00", align 1
@syms_of_buffer.o_fwd.69 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.70 = private unnamed_addr constant [27 x i8] c"default-right-margin-width\00", align 1
@syms_of_buffer.o_fwd.71 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.72 = private unnamed_addr constant [26 x i8] c"default-left-fringe-width\00", align 1
@syms_of_buffer.o_fwd.73 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.74 = private unnamed_addr constant [27 x i8] c"default-right-fringe-width\00", align 1
@syms_of_buffer.o_fwd.75 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.76 = private unnamed_addr constant [32 x i8] c"default-fringes-outside-margins\00", align 1
@syms_of_buffer.o_fwd.77 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.78 = private unnamed_addr constant [25 x i8] c"default-scroll-bar-width\00", align 1
@syms_of_buffer.o_fwd.79 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.80 = private unnamed_addr constant [28 x i8] c"default-vertical-scroll-bar\00", align 1
@syms_of_buffer.o_fwd.81 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.82 = private unnamed_addr constant [29 x i8] c"default-indicate-empty-lines\00", align 1
@syms_of_buffer.o_fwd.83 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.84 = private unnamed_addr constant [35 x i8] c"default-indicate-buffer-boundaries\00", align 1
@syms_of_buffer.o_fwd.85 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.86 = private unnamed_addr constant [31 x i8] c"default-fringe-indicator-alist\00", align 1
@syms_of_buffer.o_fwd.87 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.88 = private unnamed_addr constant [28 x i8] c"default-fringe-cursor-alist\00", align 1
@syms_of_buffer.o_fwd.89 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.90 = private unnamed_addr constant [31 x i8] c"default-scroll-up-aggressively\00", align 1
@syms_of_buffer.o_fwd.91 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.92 = private unnamed_addr constant [33 x i8] c"default-scroll-down-aggressively\00", align 1
@syms_of_buffer.bo_fwd = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.93 = private unnamed_addr constant [19 x i8] c"header-line-format\00", align 1
@syms_of_buffer.bo_fwd.94 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.95 = private unnamed_addr constant [17 x i8] c"mode-line-format\00", align 1
@syms_of_buffer.o_fwd.96 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.97 = private unnamed_addr constant [19 x i8] c"default-major-mode\00", align 1
@syms_of_buffer.bo_fwd.98 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.99 = private unnamed_addr constant [11 x i8] c"major-mode\00", align 1
@syms_of_buffer.bo_fwd.100 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.101 = private unnamed_addr constant [10 x i8] c"mode-name\00", align 1
@syms_of_buffer.bo_fwd.102 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.103 = private unnamed_addr constant [19 x i8] c"local-abbrev-table\00", align 1
@syms_of_buffer.bo_fwd.104 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.105 = private unnamed_addr constant [12 x i8] c"abbrev-mode\00", align 1
@syms_of_buffer.bo_fwd.106 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.107 = private unnamed_addr constant [17 x i8] c"case-fold-search\00", align 1
@syms_of_buffer.bo_fwd.108 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.109 = private unnamed_addr constant [12 x i8] c"fill-column\00", align 1
@syms_of_buffer.bo_fwd.110 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.111 = private unnamed_addr constant [12 x i8] c"left-margin\00", align 1
@syms_of_buffer.bo_fwd.112 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.113 = private unnamed_addr constant [10 x i8] c"tab-width\00", align 1
@syms_of_buffer.bo_fwd.114 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.115 = private unnamed_addr constant [10 x i8] c"ctl-arrow\00", align 1
@syms_of_buffer.bo_fwd.116 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.117 = private unnamed_addr constant [28 x i8] c"enable-multibyte-characters\00", align 1
@syms_of_buffer.bo_fwd.118 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.119 = private unnamed_addr constant [26 x i8] c"buffer-file-coding-system\00", align 1
@syms_of_buffer.bo_fwd.120 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.121 = private unnamed_addr constant [24 x i8] c"bidi-display-reordering\00", align 1
@syms_of_buffer.bo_fwd.122 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.123 = private unnamed_addr constant [25 x i8] c"bidi-paragraph-direction\00", align 1
@syms_of_buffer.bo_fwd.124 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.125 = private unnamed_addr constant [15 x i8] c"truncate-lines\00", align 1
@syms_of_buffer.bo_fwd.126 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.127 = private unnamed_addr constant [10 x i8] c"word-wrap\00", align 1
@syms_of_buffer.bo_fwd.128 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.129 = private unnamed_addr constant [18 x i8] c"default-directory\00", align 1
@syms_of_buffer.bo_fwd.130 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.131 = private unnamed_addr constant [19 x i8] c"auto-fill-function\00", align 1
@syms_of_buffer.bo_fwd.132 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.133 = private unnamed_addr constant [17 x i8] c"buffer-file-name\00", align 1
@syms_of_buffer.bo_fwd.134 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.135 = private unnamed_addr constant [21 x i8] c"buffer-file-truename\00", align 1
@syms_of_buffer.bo_fwd.136 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.137 = private unnamed_addr constant [27 x i8] c"buffer-auto-save-file-name\00", align 1
@syms_of_buffer.bo_fwd.138 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.139 = private unnamed_addr constant [17 x i8] c"buffer-read-only\00", align 1
@syms_of_buffer.bo_fwd.140 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.141 = private unnamed_addr constant [17 x i8] c"buffer-backed-up\00", align 1
@syms_of_buffer.bo_fwd.142 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.143 = private unnamed_addr constant [18 x i8] c"buffer-saved-size\00", align 1
@syms_of_buffer.bo_fwd.144 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.145 = private unnamed_addr constant [18 x i8] c"selective-display\00", align 1
@syms_of_buffer.bo_fwd.146 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.147 = private unnamed_addr constant [27 x i8] c"selective-display-ellipses\00", align 1
@syms_of_buffer.bo_fwd.148 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.149 = private unnamed_addr constant [15 x i8] c"overwrite-mode\00", align 1
@syms_of_buffer.bo_fwd.150 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.151 = private unnamed_addr constant [21 x i8] c"buffer-display-table\00", align 1
@syms_of_buffer.bo_fwd.152 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.153 = private unnamed_addr constant [18 x i8] c"left-margin-width\00", align 1
@syms_of_buffer.bo_fwd.154 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.155 = private unnamed_addr constant [19 x i8] c"right-margin-width\00", align 1
@syms_of_buffer.bo_fwd.156 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.157 = private unnamed_addr constant [18 x i8] c"left-fringe-width\00", align 1
@syms_of_buffer.bo_fwd.158 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.159 = private unnamed_addr constant [19 x i8] c"right-fringe-width\00", align 1
@syms_of_buffer.bo_fwd.160 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.161 = private unnamed_addr constant [24 x i8] c"fringes-outside-margins\00", align 1
@syms_of_buffer.bo_fwd.162 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.163 = private unnamed_addr constant [17 x i8] c"scroll-bar-width\00", align 1
@syms_of_buffer.bo_fwd.164 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.165 = private unnamed_addr constant [18 x i8] c"scroll-bar-height\00", align 1
@syms_of_buffer.bo_fwd.166 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.167 = private unnamed_addr constant [20 x i8] c"vertical-scroll-bar\00", align 1
@syms_of_buffer.bo_fwd.168 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.169 = private unnamed_addr constant [22 x i8] c"horizontal-scroll-bar\00", align 1
@syms_of_buffer.bo_fwd.170 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.171 = private unnamed_addr constant [21 x i8] c"indicate-empty-lines\00", align 1
@syms_of_buffer.bo_fwd.172 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.173 = private unnamed_addr constant [27 x i8] c"indicate-buffer-boundaries\00", align 1
@syms_of_buffer.bo_fwd.174 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.175 = private unnamed_addr constant [23 x i8] c"fringe-indicator-alist\00", align 1
@syms_of_buffer.bo_fwd.176 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.177 = private unnamed_addr constant [20 x i8] c"fringe-cursor-alist\00", align 1
@syms_of_buffer.bo_fwd.178 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.179 = private unnamed_addr constant [23 x i8] c"scroll-up-aggressively\00", align 1
@syms_of_buffer.bo_fwd.180 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.181 = private unnamed_addr constant [25 x i8] c"scroll-down-aggressively\00", align 1
@syms_of_buffer.o_fwd.182 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.183 = private unnamed_addr constant [24 x i8] c"before-change-functions\00", align 1
@syms_of_buffer.o_fwd.184 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.185 = private unnamed_addr constant [23 x i8] c"after-change-functions\00", align 1
@syms_of_buffer.o_fwd.186 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.187 = private unnamed_addr constant [18 x i8] c"first-change-hook\00", align 1
@syms_of_buffer.bo_fwd.188 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.189 = private unnamed_addr constant [17 x i8] c"buffer-undo-list\00", align 1
@syms_of_buffer.bo_fwd.190 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.191 = private unnamed_addr constant [12 x i8] c"mark-active\00", align 1
@syms_of_buffer.bo_fwd.192 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.193 = private unnamed_addr constant [17 x i8] c"cache-long-scans\00", align 1
@syms_of_buffer.bo_fwd.194 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.195 = private unnamed_addr constant [20 x i8] c"point-before-scroll\00", align 1
@syms_of_buffer.bo_fwd.196 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [19 x i8] c"buffer-file-format\00", align 1
@syms_of_buffer.bo_fwd.198 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.199 = private unnamed_addr constant [29 x i8] c"buffer-auto-save-file-format\00", align 1
@syms_of_buffer.bo_fwd.200 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.201 = private unnamed_addr constant [25 x i8] c"buffer-invisibility-spec\00", align 1
@syms_of_buffer.bo_fwd.202 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.203 = private unnamed_addr constant [21 x i8] c"buffer-display-count\00", align 1
@syms_of_buffer.bo_fwd.204 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.205 = private unnamed_addr constant [20 x i8] c"buffer-display-time\00", align 1
@syms_of_buffer.o_fwd.206 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.207 = private unnamed_addr constant [20 x i8] c"transient-mark-mode\00", align 1
@syms_of_buffer.o_fwd.208 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.209 = private unnamed_addr constant [18 x i8] c"inhibit-read-only\00", align 1
@syms_of_buffer.bo_fwd.210 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.211 = private unnamed_addr constant [12 x i8] c"cursor-type\00", align 1
@syms_of_buffer.bo_fwd.212 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.213 = private unnamed_addr constant [13 x i8] c"line-spacing\00", align 1
@syms_of_buffer.bo_fwd.214 = internal global %struct.Lisp_Buffer_Objfwd zeroinitializer, align 8
@.str.215 = private unnamed_addr constant [31 x i8] c"cursor-in-non-selected-windows\00", align 1
@syms_of_buffer.o_fwd.216 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.217 = private unnamed_addr constant [28 x i8] c"kill-buffer-query-functions\00", align 1
@syms_of_buffer.o_fwd.218 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.219 = private unnamed_addr constant [23 x i8] c"change-major-mode-hook\00", align 1
@syms_of_buffer.o_fwd.220 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.221 = private unnamed_addr constant [24 x i8] c"buffer-list-update-hook\00", align 1
@Scurrent_buffer = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fcurrent_buffer }, i16 0, i16 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.250, i32 0, i32 0), i8* null, i8* null }, align 8
@Serase_buffer = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Ferase_buffer }, i16 0, i16 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.253, i32 0, i32 0), i8* null }, align 8
@Skill_all_local_variables = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fkill_all_local_variables }, i16 0, i16 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.255, i32 0, i32 0), i8* null, i8* null }, align 8
@Soverlay_lists = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Foverlay_lists }, i16 0, i16 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.270, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.222 = private unnamed_addr constant [13 x i8] c"erase-buffer\00", align 1
@control_x_map = external global i64, align 8
@.str.223 = private unnamed_addr constant [17 x i8] c"switch-to-buffer\00", align 1
@.str.224 = private unnamed_addr constant [12 x i8] c"kill-buffer\00", align 1
@Vascii_downcase_table = external global i64, align 8
@.str.225 = private unnamed_addr constant [14 x i8] c"buffer-live-p\00", align 1
@Sbuffer_live_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_live_p }, i16 1, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.225, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.226 = private unnamed_addr constant [12 x i8] c"buffer-list\00", align 1
@Sbuffer_list = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_list }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.226, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.227 = private unnamed_addr constant [11 x i8] c"get-buffer\00", align 1
@Sget_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fget_buffer }, i16 1, i16 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.227, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.228 = private unnamed_addr constant [16 x i8] c"get-file-buffer\00", align 1
@Sget_file_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fget_file_buffer }, i16 1, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.228, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.229 = private unnamed_addr constant [18 x i8] c"get-buffer-create\00", align 1
@Sget_buffer_create = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fget_buffer_create }, i16 1, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.229, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.230 = private unnamed_addr constant [21 x i8] c"make-indirect-buffer\00", align 1
@.str.231 = private unnamed_addr constant [63 x i8] c"bMake indirect buffer (to buffer): \0ABName of indirect buffer: \00", align 1
@Smake_indirect_buffer = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fmake_indirect_buffer }, i16 2, i16 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.230, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.231, i32 0, i32 0), i8* null }, align 8
@.str.232 = private unnamed_addr constant [25 x i8] c"generate-new-buffer-name\00", align 1
@Sgenerate_new_buffer_name = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fgenerate_new_buffer_name }, i16 1, i16 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.232, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.233 = private unnamed_addr constant [12 x i8] c"buffer-name\00", align 1
@Sbuffer_name = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_name }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.233, i32 0, i32 0), i8* null, i8* null }, align 8
@Sbuffer_file_name = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_file_name }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.133, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.234 = private unnamed_addr constant [19 x i8] c"buffer-base-buffer\00", align 1
@Sbuffer_base_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_base_buffer }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.234, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.235 = private unnamed_addr constant [19 x i8] c"buffer-local-value\00", align 1
@Sbuffer_local_value = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fbuffer_local_value }, i16 2, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.235, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.236 = private unnamed_addr constant [23 x i8] c"buffer-local-variables\00", align 1
@Sbuffer_local_variables = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_local_variables }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.236, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.237 = private unnamed_addr constant [18 x i8] c"buffer-modified-p\00", align 1
@Sbuffer_modified_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_modified_p }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.237, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.238 = private unnamed_addr constant [23 x i8] c"force-mode-line-update\00", align 1
@Sforce_mode_line_update = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fforce_mode_line_update }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.238, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.239 = private unnamed_addr constant [22 x i8] c"set-buffer-modified-p\00", align 1
@Sset_buffer_modified_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_buffer_modified_p }, i16 1, i16 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.239, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.240 = private unnamed_addr constant [21 x i8] c"buffer-modified-tick\00", align 1
@Sbuffer_modified_tick = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_modified_tick }, i16 0, i16 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.240, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.241 = private unnamed_addr constant [27 x i8] c"buffer-chars-modified-tick\00", align 1
@Sbuffer_chars_modified_tick = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_chars_modified_tick }, i16 0, i16 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.241, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.242 = private unnamed_addr constant [14 x i8] c"rename-buffer\00", align 1
@.str.243 = private unnamed_addr constant [142 x i8] c"(list (read-string \22Rename buffer (to new name): \22 \09      nil 'buffer-name-history (buffer-name (current-buffer))) \09      current-prefix-arg)\00", align 1
@Srename_buffer = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Frename_buffer }, i16 1, i16 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.243, i32 0, i32 0), i8* null }, align 8
@.str.244 = private unnamed_addr constant [13 x i8] c"other-buffer\00", align 1
@Sother_buffer = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fother_buffer }, i16 0, i16 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.244, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.245 = private unnamed_addr constant [19 x i8] c"buffer-enable-undo\00", align 1
@.str.246 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@Sbuffer_enable_undo = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_enable_undo }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.246, i32 0, i32 0), i8* null }, align 8
@.str.247 = private unnamed_addr constant [15 x i8] c"bKill buffer: \00", align 1
@Skill_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fkill_buffer }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.247, i32 0, i32 0), i8* null }, align 8
@.str.248 = private unnamed_addr constant [21 x i8] c"bury-buffer-internal\00", align 1
@Sbury_buffer_internal = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbury_buffer_internal }, i16 1, i16 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.249 = private unnamed_addr constant [22 x i8] c"set-buffer-major-mode\00", align 1
@Sset_buffer_major_mode = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_buffer_major_mode }, i16 1, i16 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.249, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.250 = private unnamed_addr constant [15 x i8] c"current-buffer\00", align 1
@.str.251 = private unnamed_addr constant [11 x i8] c"set-buffer\00", align 1
@Sset_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_buffer }, i16 1, i16 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.251, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.252 = private unnamed_addr constant [25 x i8] c"barf-if-buffer-read-only\00", align 1
@Sbarf_if_buffer_read_only = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbarf_if_buffer_read_only }, i16 0, i16 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.252, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.253 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.254 = private unnamed_addr constant [17 x i8] c"buffer-swap-text\00", align 1
@Sbuffer_swap_text = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbuffer_swap_text }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.254, i32 0, i32 0), i8* null, i8* null }, align 8
@Sset_buffer_multibyte = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_buffer_multibyte }, i16 1, i16 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.255 = private unnamed_addr constant [25 x i8] c"kill-all-local-variables\00", align 1
@.str.256 = private unnamed_addr constant [9 x i8] c"overlayp\00", align 1
@Soverlayp = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlayp }, i16 1, i16 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.256, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.257 = private unnamed_addr constant [13 x i8] c"make-overlay\00", align 1
@Smake_overlay = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64, i64)* @Fmake_overlay }, i16 2, i16 5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.257, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.258 = private unnamed_addr constant [15 x i8] c"delete-overlay\00", align 1
@Sdelete_overlay = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fdelete_overlay }, i16 1, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.258, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.259 = private unnamed_addr constant [20 x i8] c"delete-all-overlays\00", align 1
@Sdelete_all_overlays = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fdelete_all_overlays }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.259, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.260 = private unnamed_addr constant [13 x i8] c"move-overlay\00", align 1
@Smove_overlay = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fmove_overlay }, i16 3, i16 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.260, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.261 = private unnamed_addr constant [14 x i8] c"overlay-start\00", align 1
@Soverlay_start = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlay_start }, i16 1, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.261, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.262 = private unnamed_addr constant [12 x i8] c"overlay-end\00", align 1
@Soverlay_end = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlay_end }, i16 1, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.262, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.263 = private unnamed_addr constant [15 x i8] c"overlay-buffer\00", align 1
@Soverlay_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlay_buffer }, i16 1, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.263, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.264 = private unnamed_addr constant [19 x i8] c"overlay-properties\00", align 1
@Soverlay_properties = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlay_properties }, i16 1, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.264, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.265 = private unnamed_addr constant [12 x i8] c"overlays-at\00", align 1
@Soverlays_at = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Foverlays_at }, i16 1, i16 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.265, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.266 = private unnamed_addr constant [12 x i8] c"overlays-in\00", align 1
@Soverlays_in = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Foverlays_in }, i16 2, i16 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.266, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.267 = private unnamed_addr constant [20 x i8] c"next-overlay-change\00", align 1
@Snext_overlay_change = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fnext_overlay_change }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.267, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.268 = private unnamed_addr constant [24 x i8] c"previous-overlay-change\00", align 1
@Sprevious_overlay_change = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fprevious_overlay_change }, i16 1, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.268, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.269 = private unnamed_addr constant [17 x i8] c"overlay-recenter\00", align 1
@Soverlay_recenter = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Foverlay_recenter }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.269, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.270 = private unnamed_addr constant [14 x i8] c"overlay-lists\00", align 1
@.str.271 = private unnamed_addr constant [12 x i8] c"overlay-get\00", align 1
@Soverlay_get = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Foverlay_get }, i16 2, i16 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.271, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.272 = private unnamed_addr constant [12 x i8] c"overlay-put\00", align 1
@Soverlay_put = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Foverlay_put }, i16 3, i16 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.272, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.273 = private unnamed_addr constant [26 x i8] c"restore-buffer-modified-p\00", align 1
@Srestore_buffer_modified_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Frestore_buffer_modified_p }, i16 1, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.273, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: noreturn nounwind uwtable
define void @nsberror(i64 %spec) #0 {
entry:
  %spec.addr = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %spec.addr, align 8
  %call1 = call i8* @SDATA(i64 %1)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %call1) #8
  unreachable

if.end:                                           ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0)) #8
  unreachable

return:                                           ; No predecessors!
  ret void
}

declare zeroext i1 @STRINGP(i64) #1

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

declare i8* @SDATA(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_live_p(i64 %object) #3 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @BUFFERP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call1 = call %struct.buffer* @XBUFFER(i64 %1)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call1, i32 0, i32 1
  %2 = load i64, i64* %name_, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i64 %cond
}

declare zeroext i1 @BUFFERP(i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare i64 @builtin_lisp_symbol(i32) #1

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_list(i64 %frame) #3 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %general = alloca i64, align 8
  %framelist = alloca i64, align 8
  %prevlist = alloca i64, align 8
  %tail = alloca i64, align 8
  %.compoundliteral = alloca [3 x i64], align 8
  store i64 %frame, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 249)
  %0 = load i64, i64* @Vbuffer_alist, align 8
  %call1 = call i64 @Fmapcar(i64 %call, i64 %0)
  store i64 %call1, i64* %general, align 8
  %1 = load i64, i64* %frame.addr, align 8
  %call2 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 15
  %5 = load i64, i64* %buffer_list, align 8
  %call3 = call i64 @Fcopy_sequence(i64 %5)
  store i64 %call3, i64* %framelist, align 8
  %6 = load i64, i64* %frame.addr, align 8
  %sub4 = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub4 to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %buried_buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 16
  %9 = load i64, i64* %buried_buffer_list, align 8
  %call5 = call i64 @Fcopy_sequence(i64 %9)
  %call6 = call i64 @Fnreverse(i64 %call5)
  store i64 %call6, i64* %prevlist, align 8
  %10 = load i64, i64* %framelist, align 8
  store i64 %10, i64* %tail, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %11 = load i64, i64* %tail, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i64, i64* %tail, align 8
  %sub8 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub8 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  %16 = load i64, i64* %general, align 8
  %call9 = call i64 @Fdelq(i64 %15, i64 %16)
  store i64 %call9, i64* %general, align 8
  %17 = load i64, i64* %tail, align 8
  %sub10 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub10 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %20 = load i64, i64* %cdr, align 8
  store i64 %20, i64* %tail, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %prevlist, align 8
  store i64 %21, i64* %tail, align 8
  br label %while.cond.11

while.cond.11:                                    ; preds = %while.body.16, %while.end
  %22 = load i64, i64* %tail, align 8
  %and12 = and i64 %22, 7
  %conv13 = trunc i64 %and12 to i32
  %cmp14 = icmp eq i32 %conv13, 3
  br i1 %cmp14, label %while.body.16, label %while.end.23

while.body.16:                                    ; preds = %while.cond.11
  %23 = load i64, i64* %tail, align 8
  %sub17 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub17 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car18, align 8
  %27 = load i64, i64* %general, align 8
  %call19 = call i64 @Fdelq(i64 %26, i64 %27)
  store i64 %call19, i64* %general, align 8
  %28 = load i64, i64* %tail, align 8
  %sub20 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub20 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %u21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 1
  %cdr22 = bitcast %union.anon.11* %u21 to i64*
  %31 = load i64, i64* %cdr22, align 8
  store i64 %31, i64* %tail, align 8
  br label %while.cond.11

while.end.23:                                     ; preds = %while.cond.11
  %arrayinit.begin = getelementptr inbounds [3 x i64], [3 x i64]* %.compoundliteral, i64 0, i64 0
  %32 = load i64, i64* %framelist, align 8
  store i64 %32, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %33 = load i64, i64* %general, align 8
  store i64 %33, i64* %arrayinit.element
  %arrayinit.element24 = getelementptr inbounds i64, i64* %arrayinit.element, i64 1
  %34 = load i64, i64* %prevlist, align 8
  store i64 %34, i64* %arrayinit.element24
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %.compoundliteral, i32 0, i32 0
  %call25 = call i64 @Fnconc(i64 3, i64* %arraydecay)
  store i64 %call25, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %35 = load i64, i64* %general, align 8
  store i64 %35, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %while.end.23
  %36 = load i64, i64* %retval
  ret i64 %36
}

declare i64 @Fmapcar(i64, i64) #1

declare zeroext i1 @FRAMEP(i64) #1

declare i64 @Fcopy_sequence(i64) #1

declare i64 @Fnreverse(i64) #1

declare i64 @Fdelq(i64, i64) #1

declare i64 @Fnconc(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Fget_buffer(i64 %buffer_or_name) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer_or_name.addr = alloca i64, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call zeroext i1 @BUFFERP(i64 %0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %buffer_or_name.addr, align 8
  store i64 %1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %buffer_or_name.addr, align 8
  call void @CHECK_STRING(i64 %2)
  %3 = load i64, i64* %buffer_or_name.addr, align 8
  %4 = load i64, i64* @Vbuffer_alist, align 8
  %call1 = call i64 @assoc_ignore_text_properties(i64 %3, i64 %4)
  %call2 = call i64 @Fcdr(i64 %call1)
  store i64 %call2, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

declare void @CHECK_STRING(i64) #1

declare i64 @Fcdr(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @assoc_ignore_text_properties(i64 %key, i64 %list) #3 {
entry:
  %retval = alloca i64, align 8
  %key.addr = alloca i64, align 8
  %list.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %tem = alloca i64, align 8
  store i64 %key, i64* %key.addr, align 8
  store i64 %list, i64* %list.addr, align 8
  %0 = load i64, i64* %list.addr, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %elt, align 8
  %6 = load i64, i64* %elt, align 8
  %call = call i64 @Fcar(i64 %6)
  %7 = load i64, i64* %key.addr, align 8
  %call2 = call i64 @Fstring_equal(i64 %call, i64 %7)
  store i64 %call2, i64* %tem, align 8
  %8 = load i64, i64* %tem, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %8, %call3
  br i1 %cmp4, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i64, i64* %elt, align 8
  store i64 %9, i64* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i64, i64* %tail, align 8
  %sub6 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub6 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define i64 @Fget_file_buffer(i64 %filename) #3 {
entry:
  %retval = alloca i64, align 8
  %filename.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %buf = alloca i64, align 8
  %handler = alloca i64, align 8
  %handled_buf = alloca i64, align 8
  store i64 %filename, i64* %filename.addr, align 8
  %0 = load i64, i64* %filename.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %filename.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fexpand_file_name(i64 %1, i64 %call)
  store i64 %call1, i64* %filename.addr, align 8
  %2 = load i64, i64* %filename.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 485)
  %call3 = call i64 @Ffind_file_name_handler(i64 %2, i64 %call2)
  store i64 %call3, i64* %handler, align 8
  %3 = load i64, i64* %handler, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call4
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %handler, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 485)
  %5 = load i64, i64* %filename.addr, align 8
  %call6 = call i64 @call2(i64 %4, i64 %call5, i64 %5)
  store i64 %call6, i64* %handled_buf, align 8
  %6 = load i64, i64* %handled_buf, align 8
  %call7 = call zeroext i1 @BUFFERP(i64 %6)
  br i1 %call7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %7 = load i64, i64* %handled_buf, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ %call8, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %8, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %tail, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp9 = icmp eq i32 %conv, 3
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car, align 8
  %sub11 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub11 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %16 = load i64, i64* %cdr, align 8
  store i64 %16, i64* %buf, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %17 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %17, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %18 = load i64, i64* %buf, align 8
  %call12 = call %struct.buffer* @XBUFFER(i64 %18)
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call12, i32 0, i32 2
  %19 = load i64, i64* %filename_, align 8
  %call13 = call zeroext i1 @STRINGP(i64 %19)
  br i1 %call13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %for.body
  br label %for.inc

if.end.15:                                        ; preds = %for.body
  %20 = load i64, i64* %buf, align 8
  %call16 = call %struct.buffer* @XBUFFER(i64 %20)
  %filename_17 = getelementptr inbounds %struct.buffer, %struct.buffer* %call16, i32 0, i32 2
  %21 = load i64, i64* %filename_17, align 8
  %22 = load i64, i64* %filename.addr, align 8
  %call18 = call i64 @Fstring_equal(i64 %21, i64 %22)
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp20 = icmp eq i64 %call18, %call19
  br i1 %cmp20, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %if.end.15
  %23 = load i64, i64* %buf, align 8
  store i64 %23, i64* %retval
  br label %return

if.end.23:                                        ; preds = %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %if.end.23, %if.then.14
  %24 = load i64, i64* %tail, align 8
  %sub24 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub24 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr26 = bitcast %union.anon.11* %u25 to i64*
  %27 = load i64, i64* %cdr26, align 8
  store i64 %27, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call27, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.22, %cond.end
  %28 = load i64, i64* %retval
  ret i64 %28
}

declare i64 @Fexpand_file_name(i64, i64) #1

declare i64 @Ffind_file_name_handler(i64, i64) #1

declare i64 @call2(i64, i64, i64) #1

declare i64 @Fstring_equal(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @get_truename_buffer(i64 %filename) #3 {
entry:
  %retval = alloca i64, align 8
  %filename.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %buf = alloca i64, align 8
  store i64 %filename, i64* %filename.addr, align 8
  %0 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  %sub2 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  store i64 %8, i64* %buf, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i64, i64* %buf, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %10)
  %file_truename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 49
  %11 = load i64, i64* %file_truename_, align 8
  %call3 = call zeroext i1 @STRINGP(i64 %11)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %12 = load i64, i64* %buf, align 8
  %call4 = call %struct.buffer* @XBUFFER(i64 %12)
  %file_truename_5 = getelementptr inbounds %struct.buffer, %struct.buffer* %call4, i32 0, i32 49
  %13 = load i64, i64* %file_truename_5, align 8
  %14 = load i64, i64* %filename.addr, align 8
  %call6 = call i64 @Fstring_equal(i64 %13, i64 %14)
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %call6, %call7
  br i1 %cmp8, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  %15 = load i64, i64* %buf, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.11, %if.then
  %16 = load i64, i64* %tail, align 8
  %sub12 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub12 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr14 = bitcast %union.anon.11* %u13 to i64*
  %19 = load i64, i64* %cdr14, align 8
  store i64 %19, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call15, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.10
  %20 = load i64, i64* %retval
  ret i64 %20
}

; Function Attrs: nounwind uwtable
define i64 @Fget_buffer_create(i64 %buffer_or_name) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer_or_name.addr = alloca i64, align 8
  %buffer = alloca i64, align 8
  %name = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call i64 @Fget_buffer(i64 %0)
  store i64 %call, i64* %buffer, align 8
  %1 = load i64, i64* %buffer, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %buffer, align 8
  store i64 %2, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %buffer_or_name.addr, align 8
  %call2 = call i64 @SCHARS(i64 %3)
  %cmp3 = icmp eq i64 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i32 0, i32 0)) #8
  unreachable

if.end.5:                                         ; preds = %if.end
  %call6 = call %struct.buffer* @allocate_buffer()
  store %struct.buffer* %call6, %struct.buffer** %b, align 8
  %4 = load %struct.buffer*, %struct.buffer** %b, align 8
  %own_text = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 72
  %5 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 73
  store %struct.buffer_text* %own_text, %struct.buffer_text** %text, align 8
  %6 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 81
  store %struct.buffer* null, %struct.buffer** %base_buffer, align 8
  %7 = load %struct.buffer*, %struct.buffer** %b, align 8
  %indirections = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 82
  store i32 0, i32* %indirections, align 4
  %8 = load %struct.buffer*, %struct.buffer** %b, align 8
  %window_count = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 83
  store i32 0, i32* %window_count, align 4
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 5
  store i64 20, i64* %gap_size, align 8
  call void @block_input()
  %11 = load %struct.buffer*, %struct.buffer** %b, align 8
  %12 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %gap_size9 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 5
  %14 = load i64, i64* %gap_size9, align 8
  %add = add nsw i64 %14, 1
  call void @alloc_buffer_text(%struct.buffer* %11, i64 %add)
  call void @unblock_input()
  %15 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text10 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text10, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 0
  %17 = load i8*, i8** %beg, align 8
  %tobool = icmp ne i8* %17, null
  br i1 %tobool, label %if.end.15, label %if.then.11

if.then.11:                                       ; preds = %if.end.5
  %18 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text12 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text12, align 8
  %gap_size13 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 5
  %20 = load i64, i64* %gap_size13, align 8
  %add14 = add nsw i64 %20, 1
  call void @buffer_memory_full(i64 %add14) #8
  unreachable

if.end.15:                                        ; preds = %if.end.5
  %21 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 75
  store i64 1, i64* %pt, align 8
  %22 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 77
  store i64 1, i64* %begv, align 8
  %23 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 79
  store i64 1, i64* %zv, align 8
  %24 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 76
  store i64 1, i64* %pt_byte, align 8
  %25 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 78
  store i64 1, i64* %begv_byte, align 8
  %26 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 80
  store i64 1, i64* %zv_byte, align 8
  %27 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text16 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 73
  %28 = load %struct.buffer_text*, %struct.buffer_text** %text16, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %28, i32 0, i32 1
  store i64 1, i64* %gpt, align 8
  %29 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text17 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 73
  %30 = load %struct.buffer_text*, %struct.buffer_text** %text17, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %30, i32 0, i32 3
  store i64 1, i64* %gpt_byte, align 8
  %31 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 73
  %32 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %32, i32 0, i32 2
  store i64 1, i64* %z, align 8
  %33 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text19 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 73
  %34 = load %struct.buffer_text*, %struct.buffer_text** %text19, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %34, i32 0, i32 4
  store i64 1, i64* %z_byte, align 8
  %35 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text20 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text20, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 6
  store i64 1, i64* %modiff, align 8
  %37 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text21 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 73
  %38 = load %struct.buffer_text*, %struct.buffer_text** %text21, align 8
  %chars_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %38, i32 0, i32 7
  store i64 1, i64* %chars_modiff, align 8
  %39 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text22 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text22, align 8
  %overlay_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 9
  store i64 1, i64* %overlay_modiff, align 8
  %41 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text23 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 73
  %42 = load %struct.buffer_text*, %struct.buffer_text** %text23, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %42, i32 0, i32 8
  store i64 1, i64* %save_modiff, align 8
  %43 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text24 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text24, align 8
  %compact = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 10
  store i64 1, i64* %compact, align 8
  %45 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @set_buffer_intervals(%struct.buffer* %45, %struct.interval* null)
  %46 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %unchanged_modified = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 13
  store i64 1, i64* %unchanged_modified, align 8
  %48 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text26 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 73
  %49 = load %struct.buffer_text*, %struct.buffer_text** %text26, align 8
  %overlay_unchanged_modified = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %49, i32 0, i32 14
  store i64 1, i64* %overlay_unchanged_modified, align 8
  %50 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text27 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 73
  %51 = load %struct.buffer_text*, %struct.buffer_text** %text27, align 8
  %end_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %51, i32 0, i32 12
  store i64 0, i64* %end_unchanged, align 8
  %52 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text28 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 73
  %53 = load %struct.buffer_text*, %struct.buffer_text** %text28, align 8
  %beg_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %53, i32 0, i32 11
  store i64 0, i64* %beg_unchanged, align 8
  %54 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text29 = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 73
  %55 = load %struct.buffer_text*, %struct.buffer_text** %text29, align 8
  %beg30 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %55, i32 0, i32 0
  %56 = load i8*, i8** %beg30, align 8
  %57 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text31 = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 73
  %58 = load %struct.buffer_text*, %struct.buffer_text** %text31, align 8
  %gap_size32 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %58, i32 0, i32 5
  %59 = load i64, i64* %gap_size32, align 8
  %add.ptr = getelementptr inbounds i8, i8* %56, i64 %59
  %60 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text33 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 73
  %61 = load %struct.buffer_text*, %struct.buffer_text** %text33, align 8
  %z_byte34 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %61, i32 0, i32 4
  %62 = load i64, i64* %z_byte34, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr, i64 %62
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr35, i64 -1
  store i8 0, i8* %add.ptr36, align 1
  %63 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text37 = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 73
  %64 = load %struct.buffer_text*, %struct.buffer_text** %text37, align 8
  %beg38 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %64, i32 0, i32 0
  %65 = load i8*, i8** %beg38, align 8
  %66 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text39 = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 73
  %67 = load %struct.buffer_text*, %struct.buffer_text** %text39, align 8
  %gpt_byte40 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %67, i32 0, i32 3
  %68 = load i64, i64* %gpt_byte40, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %65, i64 %68
  %add.ptr42 = getelementptr inbounds i8, i8* %add.ptr41, i64 -1
  store i8 0, i8* %add.ptr42, align 1
  %69 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text43 = getelementptr inbounds %struct.buffer, %struct.buffer* %69, i32 0, i32 73
  %70 = load %struct.buffer_text*, %struct.buffer_text** %text43, align 8
  %inhibit_shrinking = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %70, i32 0, i32 17
  %bf.load = load i8, i8* %inhibit_shrinking, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %inhibit_shrinking, align 8
  %71 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text44 = getelementptr inbounds %struct.buffer, %struct.buffer* %71, i32 0, i32 73
  %72 = load %struct.buffer_text*, %struct.buffer_text** %text44, align 8
  %redisplay = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %72, i32 0, i32 17
  %bf.load45 = load i8, i8* %redisplay, align 8
  %bf.clear46 = and i8 %bf.load45, -3
  store i8 %bf.clear46, i8* %redisplay, align 8
  %73 = load %struct.buffer*, %struct.buffer** %b, align 8
  %newline_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %73, i32 0, i32 91
  store %struct.region_cache* null, %struct.region_cache** %newline_cache, align 8
  %74 = load %struct.buffer*, %struct.buffer** %b, align 8
  %width_run_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %74, i32 0, i32 92
  store %struct.region_cache* null, %struct.region_cache** %width_run_cache, align 8
  %75 = load %struct.buffer*, %struct.buffer** %b, align 8
  %bidi_paragraph_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 93
  store %struct.region_cache* null, %struct.region_cache** %bidi_paragraph_cache, align 8
  %76 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_width_table(%struct.buffer* %76, i64 %call47)
  %77 = load %struct.buffer*, %struct.buffer** %b, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 94
  %bf.load48 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear49 = and i8 %bf.load48, -2
  %bf.set = or i8 %bf.clear49, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  %78 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_pt_marker(%struct.buffer* %78, i64 %call50)
  %79 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_begv_marker(%struct.buffer* %79, i64 %call51)
  %80 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_zv_marker(%struct.buffer* %80, i64 %call52)
  %81 = load i64, i64* %buffer_or_name.addr, align 8
  %call53 = call i64 @Fcopy_sequence(i64 %81)
  store i64 %call53, i64* %name, align 8
  %82 = load i64, i64* %name, align 8
  call void @set_string_intervals(i64 %82, %struct.interval* null)
  %83 = load %struct.buffer*, %struct.buffer** %b, align 8
  %84 = load i64, i64* %name, align 8
  call void @bset_name(%struct.buffer* %83, i64 %84)
  %85 = load %struct.buffer*, %struct.buffer** %b, align 8
  %86 = load i64, i64* %name, align 8
  %call54 = call zeroext i8 @SREF(i64 %86, i64 0)
  %conv = zext i8 %call54 to i32
  %cmp55 = icmp ne i32 %conv, 32
  br i1 %cmp55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.15
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %if.end.15
  %call58 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call57, %cond.true ], [ %call58, %cond.false ]
  call void @bset_undo_list(%struct.buffer* %85, i64 %cond)
  %87 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @reset_buffer(%struct.buffer* %87)
  %88 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @reset_buffer_local_variables(%struct.buffer* %88, i1 zeroext true)
  %89 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call59 = call i64 @Fmake_marker()
  call void @bset_mark(%struct.buffer* %89, i64 %call59)
  %90 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text60 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 73
  %91 = load %struct.buffer_text*, %struct.buffer_text** %text60, align 8
  %markers = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %91, i32 0, i32 16
  store %struct.Lisp_Marker* null, %struct.Lisp_Marker** %markers, align 8
  %92 = load %struct.buffer*, %struct.buffer** %b, align 8
  %93 = bitcast %struct.buffer* %92 to i8*
  %call61 = call i64 @make_lisp_ptr(i8* %93, i32 5)
  store i64 %call61, i64* %buffer, align 8
  %94 = load i64, i64* @Vbuffer_alist, align 8
  %95 = load i64, i64* %name, align 8
  %96 = load i64, i64* %buffer, align 8
  %call62 = call i64 @Fcons(i64 %95, i64 %96)
  %call63 = call i64 @list1(i64 %call62)
  %call64 = call i64 @nconc2(i64 %94, i64 %call63)
  store i64 %call64, i64* @Vbuffer_alist, align 8
  %97 = load i64, i64* @Vrun_hooks, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp66 = icmp eq i64 %97, %call65
  br i1 %cmp66, label %if.end.71, label %if.then.68

if.then.68:                                       ; preds = %cond.end
  %98 = load i64, i64* @Vrun_hooks, align 8
  %call69 = call i64 @builtin_lisp_symbol(i32 223)
  %call70 = call i64 @call1(i64 %98, i64 %call69)
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.68, %cond.end
  %99 = load i64, i64* %buffer, align 8
  store i64 %99, i64* %retval
  br label %return

return:                                           ; preds = %if.end.71, %if.then
  %100 = load i64, i64* %retval
  ret i64 %100
}

declare i64 @SCHARS(i64) #1

declare %struct.buffer* @allocate_buffer() #1

declare void @block_input() #1

; Function Attrs: nounwind uwtable
define internal void @alloc_buffer_text(%struct.buffer* %b, i64 %nbytes) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %nbytes.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  call void @block_input()
  %0 = load i64, i64* %nbytes.addr, align 8
  %call = call noalias i8* @xmalloc(i64 %0)
  store i8* %call, i8** %p, align 8
  %1 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @unblock_input()
  %2 = load i64, i64* %nbytes.addr, align 8
  call void @memory_full(i64 %2) #8
  unreachable

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %p, align 8
  %4 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 73
  %5 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %5, i32 0, i32 0
  store i8* %3, i8** %beg, align 8
  call void @unblock_input()
  ret void
}

declare void @unblock_input() #1

; Function Attrs: noreturn
declare void @buffer_memory_full(i64) #2

declare void @set_buffer_intervals(%struct.buffer*, %struct.interval*) #1

declare void @bset_width_table(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_pt_marker(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 45
  store i64 %0, i64* %pt_marker_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_begv_marker(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 46
  store i64 %0, i64* %begv_marker_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_zv_marker(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 47
  store i64 %0, i64* %zv_marker_, align 8
  ret void
}

declare void @set_string_intervals(i64, %struct.interval*) #1

; Function Attrs: nounwind uwtable
define internal void @bset_name(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 1
  store i64 %0, i64* %name_, align 8
  ret void
}

declare void @bset_undo_list(%struct.buffer*, i64) #1

declare zeroext i8 @SREF(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @reset_buffer(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %coerce = alloca %struct.timespec, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_filename(%struct.buffer* %0, i64 %call)
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_file_truename(%struct.buffer* %1, i64 %call1)
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tobool = icmp ne %struct.buffer* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_ = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 3
  %5 = load i64, i64* %directory_, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call2, %cond.false ]
  call void @bset_directory(%struct.buffer* %2, i64 %cond)
  %6 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %modtime = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 85
  %call3 = call { i64, i64 } @make_timespec(i64 0, i64 -2)
  %7 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %8 = getelementptr { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  %9 = extractvalue { i64, i64 } %call3, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  %11 = extractvalue { i64, i64 } %call3, 1
  store i64 %11, i64* %10, align 8
  %12 = bitcast %struct.timespec* %modtime to i8*
  %13 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %modtime_size = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 86
  store i64 -1, i64* %modtime_size, align 8
  %call4 = call i64 @make_natnum(i64 0)
  %15 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %save_length_ = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 5
  store i64 %call4, i64* %save_length_, align 8
  %16 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %last_window_start = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 90
  store i64 1, i64* %last_window_start, align 8
  %17 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %clip_changed = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 94
  %bf.load = load i8, i8* %clip_changed, align 8
  %bf.clear = and i8 %bf.load, -3
  store i8 %bf.clear, i8* %clip_changed, align 8
  %18 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 94
  %bf.load5 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear6 = and i8 %bf.load5, -2
  %bf.set = or i8 %bf.clear6, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  %19 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_backed_up(%struct.buffer* %19, i64 %call7)
  %20 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %auto_save_modified = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 87
  store i64 0, i64* %auto_save_modified, align 8
  %21 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %auto_save_failure_time = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 89
  store i64 0, i64* %auto_save_failure_time, align 8
  %22 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_auto_save_file_name(%struct.buffer* %22, i64 %call8)
  %23 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_read_only(%struct.buffer* %23, i64 %call9)
  %24 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %24, %struct.Lisp_Overlay* null)
  %25 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %25, %struct.Lisp_Overlay* null)
  %26 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 97
  store i64 1, i64* %overlay_center, align 8
  %27 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_mark_active(%struct.buffer* %27, i64 %call10)
  %28 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_point_before_scroll(%struct.buffer* %28, i64 %call11)
  %29 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_file_format(%struct.buffer* %29, i64 %call12)
  %30 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_auto_save_file_format(%struct.buffer* %30, i64 %call13)
  %31 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_last_selected_window(%struct.buffer* %31, i64 %call14)
  %32 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @bset_display_count(%struct.buffer* %32, i64 2)
  %33 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_display_time(%struct.buffer* %33, i64 %call15)
  %34 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %35 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 39), align 8
  call void @bset_enable_multibyte_characters(%struct.buffer* %34, i64 %35)
  %36 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %37 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 69), align 8
  call void @bset_cursor_type(%struct.buffer* %36, i64 %37)
  %38 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %39 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 70), align 8
  call void @bset_extra_line_spacing(%struct.buffer* %38, i64 %39)
  %40 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %display_error_modiff = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 88
  store i64 0, i64* %display_error_modiff, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reset_buffer_local_variables(%struct.buffer* %b, i1 zeroext %permanent_too) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %permanent_too.addr = alloca i8, align 1
  %offset = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i64, align 8
  %prop = alloca i64, align 8
  %last = alloca i64, align 8
  %list = alloca i64, align 8
  %newlist = alloca i64, align 8
  %elt = alloca i64, align 8
  %idx = alloca i32, align 4
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %frombool = zext i1 %permanent_too to i8
  store i8 %frombool, i8* %permanent_too.addr, align 1
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 479)
  call void @bset_major_mode(%struct.buffer* %0, i64 %call)
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_keymap(%struct.buffer* %1, i64 %call1)
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %3 = load i64, i64* @QSFundamental, align 8
  call void @bset_mode_name(%struct.buffer* %2, i64 %3)
  %4 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_minor_modes(%struct.buffer* %4, i64 %call2)
  %5 = load i64, i64* @Vascii_downcase_table, align 8
  %call3 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %5)
  %extras = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call3, i32 0, i32 6
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %extras, i32 0, i64 0
  %6 = load i64, i64* %arrayidx, align 8
  %call4 = call zeroext i1 @CHAR_TABLE_P(i64 %6)
  br i1 %call4, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %7 = load i64, i64* @Vascii_downcase_table, align 8
  %call5 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %7)
  %extras6 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call5, i32 0, i32 6
  %arrayidx7 = getelementptr inbounds [0 x i64], [0 x i64]* %extras6, i32 0, i64 1
  %8 = load i64, i64* %arrayidx7, align 8
  %call8 = call zeroext i1 @CHAR_TABLE_P(i64 %8)
  br i1 %call8, label %land.lhs.true.9, label %if.then

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %9 = load i64, i64* @Vascii_downcase_table, align 8
  %call10 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %9)
  %extras11 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call10, i32 0, i32 6
  %arrayidx12 = getelementptr inbounds [0 x i64], [0 x i64]* %extras11, i32 0, i64 2
  %10 = load i64, i64* %arrayidx12, align 8
  %call13 = call zeroext i1 @CHAR_TABLE_P(i64 %10)
  br i1 %call13, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.9, %land.lhs.true, %entry
  %11 = load i64, i64* @Vascii_downcase_table, align 8
  %call14 = call i64 @Fset_standard_case_table(i64 %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.9
  %12 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %13 = load i64, i64* @Vascii_downcase_table, align 8
  call void @bset_downcase_table(%struct.buffer* %12, i64 %13)
  %14 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %15 = load i64, i64* @Vascii_downcase_table, align 8
  %call15 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %15)
  %extras16 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call15, i32 0, i32 6
  %arrayidx17 = getelementptr inbounds [0 x i64], [0 x i64]* %extras16, i32 0, i64 0
  %16 = load i64, i64* %arrayidx17, align 8
  call void @bset_upcase_table(%struct.buffer* %14, i64 %16)
  %17 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %18 = load i64, i64* @Vascii_downcase_table, align 8
  %call18 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %18)
  %extras19 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call18, i32 0, i32 6
  %arrayidx20 = getelementptr inbounds [0 x i64], [0 x i64]* %extras19, i32 0, i64 1
  %19 = load i64, i64* %arrayidx20, align 8
  call void @bset_case_canon_table(%struct.buffer* %17, i64 %19)
  %20 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %21 = load i64, i64* @Vascii_downcase_table, align 8
  %call21 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %21)
  %extras22 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call21, i32 0, i32 6
  %arrayidx23 = getelementptr inbounds [0 x i64], [0 x i64]* %extras22, i32 0, i64 2
  %22 = load i64, i64* %arrayidx23, align 8
  call void @bset_case_eqv_table(%struct.buffer* %20, i64 %22)
  %23 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_invisibility_spec(%struct.buffer* %23, i64 %call24)
  %24 = load i8, i8* %permanent_too.addr, align 1
  %tobool = trunc i8 %24 to i1
  br i1 %tobool, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.end
  %25 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_local_var_alist(%struct.buffer* %25, i64 %call26)
  br label %if.end.107

if.else:                                          ; preds = %if.end
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call29, i64* %last, align 8
  %26 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %local_var_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 9
  %27 = load i64, i64* %local_var_alist_, align 8
  store i64 %27, i64* %tmp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.102, %if.else
  %28 = load i64, i64* %tmp, align 8
  %and = and i64 %28, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end.106

for.body:                                         ; preds = %for.cond
  %29 = load i64, i64* %tmp, align 8
  %sub = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car, align 8
  %sub31 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub31 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %car32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 0
  %35 = load i64, i64* %car32, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 747)
  %call34 = call i64 @Fget(i64 %35, i64 %call33)
  store i64 %call34, i64* %prop, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp36 = icmp eq i64 %call34, %call35
  br i1 %cmp36, label %if.else.88, label %if.then.38

if.then.38:                                       ; preds = %for.body
  %36 = load i64, i64* %tmp, align 8
  store i64 %36, i64* %last, align 8
  %37 = load i64, i64* %prop, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 748)
  %cmp40 = icmp eq i64 %37, %call39
  br i1 %cmp40, label %if.then.42, label %if.end.87

if.then.42:                                       ; preds = %if.then.38
  %38 = load i64, i64* %tmp, align 8
  %sub45 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub45 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %car46 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 0
  %41 = load i64, i64* %car46, align 8
  %sub47 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub47 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %44 = load i64, i64* %cdr, align 8
  store i64 %44, i64* %list, align 8
  %45 = load i64, i64* %list, align 8
  %and48 = and i64 %45, 7
  %conv49 = trunc i64 %and48 to i32
  %cmp50 = icmp eq i32 %conv49, 3
  br i1 %cmp50, label %if.else.53, label %if.then.52

if.then.52:                                       ; preds = %if.then.42
  %46 = load i64, i64* %list, align 8
  store i64 %46, i64* %newlist, align 8
  br label %if.end.83

if.else.53:                                       ; preds = %if.then.42
  %call54 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call54, i64* %newlist, align 8
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc, %if.else.53
  %47 = load i64, i64* %list, align 8
  %and56 = and i64 %47, 7
  %conv57 = trunc i64 %and56 to i32
  %cmp58 = icmp eq i32 %conv57, 3
  br i1 %cmp58, label %for.body.60, label %for.end

for.body.60:                                      ; preds = %for.cond.55
  %48 = load i64, i64* %list, align 8
  %sub62 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub62 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %car63 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 0
  %51 = load i64, i64* %car63, align 8
  store i64 %51, i64* %elt, align 8
  %52 = load i64, i64* %elt, align 8
  %and64 = and i64 %52, 7
  %conv65 = trunc i64 %and64 to i32
  %cmp66 = icmp eq i32 %conv65, 0
  br i1 %cmp66, label %lor.lhs.false, label %if.then.77

lor.lhs.false:                                    ; preds = %for.body.60
  %53 = load i64, i64* %elt, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp69 = icmp eq i64 %53, %call68
  br i1 %cmp69, label %if.then.77, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false
  %54 = load i64, i64* %elt, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 748)
  %call73 = call i64 @Fget(i64 %54, i64 %call72)
  %call74 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp75 = icmp eq i64 %call73, %call74
  br i1 %cmp75, label %if.end.79, label %if.then.77

if.then.77:                                       ; preds = %lor.lhs.false.71, %lor.lhs.false, %for.body.60
  %55 = load i64, i64* %elt, align 8
  %56 = load i64, i64* %newlist, align 8
  %call78 = call i64 @Fcons(i64 %55, i64 %56)
  store i64 %call78, i64* %newlist, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.77, %lor.lhs.false.71
  br label %for.inc

for.inc:                                          ; preds = %if.end.79
  %57 = load i64, i64* %list, align 8
  %sub80 = sub nsw i64 %57, 3
  %58 = inttoptr i64 %sub80 to i8*
  %59 = bitcast i8* %58 to %struct.Lisp_Cons*
  %u81 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %59, i32 0, i32 1
  %cdr82 = bitcast %union.anon.11* %u81 to i64*
  %60 = load i64, i64* %cdr82, align 8
  store i64 %60, i64* %list, align 8
  br label %for.cond.55

for.end:                                          ; preds = %for.cond.55
  br label %if.end.83

if.end.83:                                        ; preds = %for.end, %if.then.52
  %61 = load i64, i64* %tmp, align 8
  %sub84 = sub nsw i64 %61, 3
  %62 = inttoptr i64 %sub84 to i8*
  %63 = bitcast i8* %62 to %struct.Lisp_Cons*
  %car85 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %63, i32 0, i32 0
  %64 = load i64, i64* %car85, align 8
  %65 = load i64, i64* %newlist, align 8
  %call86 = call i64 @Fnreverse(i64 %65)
  call void @XSETCDR(i64 %64, i64 %call86)
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.83, %if.then.38
  br label %if.end.101

if.else.88:                                       ; preds = %for.body
  %66 = load i64, i64* %last, align 8
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp90 = icmp eq i64 %66, %call89
  br i1 %cmp90, label %if.then.92, label %if.else.96

if.then.92:                                       ; preds = %if.else.88
  %67 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %68 = load i64, i64* %tmp, align 8
  %sub93 = sub nsw i64 %68, 3
  %69 = inttoptr i64 %sub93 to i8*
  %70 = bitcast i8* %69 to %struct.Lisp_Cons*
  %u94 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %70, i32 0, i32 1
  %cdr95 = bitcast %union.anon.11* %u94 to i64*
  %71 = load i64, i64* %cdr95, align 8
  call void @bset_local_var_alist(%struct.buffer* %67, i64 %71)
  br label %if.end.100

if.else.96:                                       ; preds = %if.else.88
  %72 = load i64, i64* %last, align 8
  %73 = load i64, i64* %tmp, align 8
  %sub97 = sub nsw i64 %73, 3
  %74 = inttoptr i64 %sub97 to i8*
  %75 = bitcast i8* %74 to %struct.Lisp_Cons*
  %u98 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %75, i32 0, i32 1
  %cdr99 = bitcast %union.anon.11* %u98 to i64*
  %76 = load i64, i64* %cdr99, align 8
  call void @XSETCDR(i64 %72, i64 %76)
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.96, %if.then.92
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %if.end.87
  br label %for.inc.102

for.inc.102:                                      ; preds = %if.end.101
  %77 = load i64, i64* %tmp, align 8
  %sub103 = sub nsw i64 %77, 3
  %78 = inttoptr i64 %sub103 to i8*
  %79 = bitcast i8* %78 to %struct.Lisp_Cons*
  %u104 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %79, i32 0, i32 1
  %cdr105 = bitcast %union.anon.11* %u104 to i64*
  %80 = load i64, i64* %cdr105, align 8
  store i64 %80, i64* %tmp, align 8
  br label %for.cond

for.end.106:                                      ; preds = %for.cond
  br label %if.end.107

if.end.107:                                       ; preds = %for.end.106, %if.then.25
  store i32 0, i32* %i, align 4
  br label %for.cond.108

for.cond.108:                                     ; preds = %for.inc.130, %if.end.107
  %81 = load i32, i32* %i, align 4
  %82 = load i32, i32* @last_per_buffer_idx, align 4
  %cmp109 = icmp slt i32 %81, %82
  br i1 %cmp109, label %for.body.111, label %for.end.131

for.body.111:                                     ; preds = %for.cond.108
  %83 = load i8, i8* %permanent_too.addr, align 1
  %tobool112 = trunc i8 %83 to i1
  br i1 %tobool112, label %if.then.119, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %for.body.111
  %84 = load i32, i32* %i, align 4
  %idxprom = sext i32 %84 to i64
  %arrayidx115 = getelementptr inbounds [50 x i8], [50 x i8]* @buffer_permanent_local_flags, i32 0, i64 %idxprom
  %85 = load i8, i8* %arrayidx115, align 1
  %conv116 = sext i8 %85 to i32
  %cmp117 = icmp eq i32 %conv116, 0
  br i1 %cmp117, label %if.then.119, label %if.end.129

if.then.119:                                      ; preds = %lor.lhs.false.114, %for.body.111
  br label %do.body

do.body:                                          ; preds = %if.then.119
  %86 = load i32, i32* %i, align 4
  %cmp120 = icmp slt i32 %86, 0
  br i1 %cmp120, label %if.then.125, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %do.body
  %87 = load i32, i32* %i, align 4
  %88 = load i32, i32* @last_per_buffer_idx, align 4
  %cmp123 = icmp sge i32 %87, %88
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %lor.lhs.false.122, %do.body
  call void @emacs_abort() #8
  unreachable

if.end.126:                                       ; preds = %lor.lhs.false.122
  %89 = load i32, i32* %i, align 4
  %idxprom127 = sext i32 %89 to i64
  %90 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %local_flags = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 84
  %arrayidx128 = getelementptr inbounds [50 x i8], [50 x i8]* %local_flags, i32 0, i64 %idxprom127
  store i8 0, i8* %arrayidx128, align 1
  br label %do.end

do.end:                                           ; preds = %if.end.126
  br label %if.end.129

if.end.129:                                       ; preds = %do.end, %lor.lhs.false.114
  br label %for.inc.130

for.inc.130:                                      ; preds = %if.end.129
  %91 = load i32, i32* %i, align 4
  %inc = add nsw i32 %91, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.108

for.end.131:                                      ; preds = %for.cond.108
  store i32 8, i32* %offset, align 4
  br label %for.cond.132

for.cond.132:                                     ; preds = %for.inc.153, %for.end.131
  %92 = load i32, i32* %offset, align 4
  %conv133 = sext i32 %92 to i64
  %cmp134 = icmp ule i64 %conv133, 568
  br i1 %cmp134, label %for.body.136, label %for.end.154

for.body.136:                                     ; preds = %for.cond.132
  %93 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %93 to i64
  %add.ptr = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_flags to i8*), i64 %idx.ext
  %94 = bitcast i8* %add.ptr to i64*
  %95 = load i64, i64* %94, align 8
  %shr = ashr i64 %95, 2
  %conv138 = trunc i64 %shr to i32
  store i32 %conv138, i32* %idx, align 4
  %96 = load i32, i32* %idx, align 4
  %cmp139 = icmp sgt i32 %96, 0
  br i1 %cmp139, label %land.lhs.true.141, label %if.end.152

land.lhs.true.141:                                ; preds = %for.body.136
  %97 = load i8, i8* %permanent_too.addr, align 1
  %tobool142 = trunc i8 %97 to i1
  br i1 %tobool142, label %if.then.150, label %lor.lhs.false.144

lor.lhs.false.144:                                ; preds = %land.lhs.true.141
  %98 = load i32, i32* %idx, align 4
  %idxprom145 = sext i32 %98 to i64
  %arrayidx146 = getelementptr inbounds [50 x i8], [50 x i8]* @buffer_permanent_local_flags, i32 0, i64 %idxprom145
  %99 = load i8, i8* %arrayidx146, align 1
  %conv147 = sext i8 %99 to i32
  %cmp148 = icmp eq i32 %conv147, 0
  br i1 %cmp148, label %if.then.150, label %if.end.152

if.then.150:                                      ; preds = %lor.lhs.false.144, %land.lhs.true.141
  %100 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %101 = load i32, i32* %offset, align 4
  %102 = load i32, i32* %offset, align 4
  %call151 = call i64 @per_buffer_default(i32 %102)
  call void @set_per_buffer_value(%struct.buffer* %100, i32 %101, i64 %call151)
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.150, %lor.lhs.false.144, %for.body.136
  br label %for.inc.153

for.inc.153:                                      ; preds = %if.end.152
  %103 = load i32, i32* %offset, align 4
  %add = add nsw i32 %103, 8
  store i32 %add, i32* %offset, align 4
  br label %for.cond.132

for.end.154:                                      ; preds = %for.cond.132
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_mark(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %mark_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 8
  store i64 %0, i64* %mark_, align 8
  ret void
}

declare i64 @Fmake_marker() #1

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @nconc2(i64, i64) #1

declare i64 @list1(i64) #1

declare i64 @Fcons(i64, i64) #1

declare i64 @call1(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fmake_indirect_buffer(i64 %base_buffer, i64 %name, i64 %clone) #3 {
entry:
  %base_buffer.addr = alloca i64, align 8
  %name.addr = alloca i64, align 8
  %clone.addr = alloca i64, align 8
  %buf = alloca i64, align 8
  %tem = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %old_b = alloca %struct.buffer*, align 8
  store i64 %base_buffer, i64* %base_buffer.addr, align 8
  store i64 %name, i64* %name.addr, align 8
  store i64 %clone, i64* %clone.addr, align 8
  %0 = load i64, i64* %name.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %name.addr, align 8
  %call = call i64 @Fget_buffer(i64 %1)
  store i64 %call, i64* %buf, align 8
  %2 = load i64, i64* %buf, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %name.addr, align 8
  %call2 = call i8* @SDATA(i64 %3)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i32 0, i32 0), i8* %call2) #8
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %base_buffer.addr, align 8
  store i64 %4, i64* %tem, align 8
  %5 = load i64, i64* %base_buffer.addr, align 8
  %call3 = call i64 @Fget_buffer(i64 %5)
  store i64 %call3, i64* %base_buffer.addr, align 8
  %6 = load i64, i64* %base_buffer.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %7 = load i64, i64* %tem, align 8
  %call7 = call i8* @SDATA(i64 %7)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* %call7) #8
  unreachable

if.end.8:                                         ; preds = %if.end
  %8 = load i64, i64* %base_buffer.addr, align 8
  %call9 = call %struct.buffer* @XBUFFER(i64 %8)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call9, i32 0, i32 1
  %9 = load i64, i64* %name_, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %9, %call10
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i32 0, i32 0)) #8
  unreachable

if.end.13:                                        ; preds = %if.end.8
  %10 = load i64, i64* %name.addr, align 8
  %call14 = call i64 @SCHARS(i64 %10)
  %cmp15 = icmp eq i64 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i32 0, i32 0)) #8
  unreachable

if.end.17:                                        ; preds = %if.end.13
  %call18 = call %struct.buffer* @allocate_buffer()
  store %struct.buffer* %call18, %struct.buffer** %b, align 8
  %11 = load i64, i64* %base_buffer.addr, align 8
  %call19 = call %struct.buffer* @XBUFFER(i64 %11)
  %base_buffer20 = getelementptr inbounds %struct.buffer, %struct.buffer* %call19, i32 0, i32 81
  %12 = load %struct.buffer*, %struct.buffer** %base_buffer20, align 8
  %tobool = icmp ne %struct.buffer* %12, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.17
  %13 = load i64, i64* %base_buffer.addr, align 8
  %call21 = call %struct.buffer* @XBUFFER(i64 %13)
  %base_buffer22 = getelementptr inbounds %struct.buffer, %struct.buffer* %call21, i32 0, i32 81
  %14 = load %struct.buffer*, %struct.buffer** %base_buffer22, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.17
  %15 = load i64, i64* %base_buffer.addr, align 8
  %call23 = call %struct.buffer* @XBUFFER(i64 %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.buffer* [ %14, %cond.true ], [ %call23, %cond.false ]
  %16 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer24 = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 81
  store %struct.buffer* %cond, %struct.buffer** %base_buffer24, align 8
  %17 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer25 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 81
  %18 = load %struct.buffer*, %struct.buffer** %base_buffer25, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %20 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text26 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  store %struct.buffer_text* %19, %struct.buffer_text** %text26, align 8
  %21 = load %struct.buffer*, %struct.buffer** %b, align 8
  %indirections = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 82
  store i32 -1, i32* %indirections, align 4
  %22 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer27 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 81
  %23 = load %struct.buffer*, %struct.buffer** %base_buffer27, align 8
  %indirections28 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 82
  %24 = load i32, i32* %indirections28, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %indirections28, align 4
  %25 = load %struct.buffer*, %struct.buffer** %b, align 8
  %window_count = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 83
  store i32 -1, i32* %window_count, align 4
  %26 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer29 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 81
  %27 = load %struct.buffer*, %struct.buffer** %base_buffer29, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt, align 8
  %29 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt30 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 75
  store i64 %28, i64* %pt30, align 8
  %30 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer31 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 81
  %31 = load %struct.buffer*, %struct.buffer** %base_buffer31, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 77
  %32 = load i64, i64* %begv, align 8
  %33 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv32 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 77
  store i64 %32, i64* %begv32, align 8
  %34 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer33 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 81
  %35 = load %struct.buffer*, %struct.buffer** %base_buffer33, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 79
  %36 = load i64, i64* %zv, align 8
  %37 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv34 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 79
  store i64 %36, i64* %zv34, align 8
  %38 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer35 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 81
  %39 = load %struct.buffer*, %struct.buffer** %base_buffer35, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 76
  %40 = load i64, i64* %pt_byte, align 8
  %41 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_byte36 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 76
  store i64 %40, i64* %pt_byte36, align 8
  %42 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer37 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 81
  %43 = load %struct.buffer*, %struct.buffer** %base_buffer37, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 78
  %44 = load i64, i64* %begv_byte, align 8
  %45 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_byte38 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 78
  store i64 %44, i64* %begv_byte38, align 8
  %46 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer39 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 81
  %47 = load %struct.buffer*, %struct.buffer** %base_buffer39, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 80
  %48 = load i64, i64* %zv_byte, align 8
  %49 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_byte40 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 80
  store i64 %48, i64* %zv_byte40, align 8
  %50 = load %struct.buffer*, %struct.buffer** %b, align 8
  %newline_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 91
  store %struct.region_cache* null, %struct.region_cache** %newline_cache, align 8
  %51 = load %struct.buffer*, %struct.buffer** %b, align 8
  %width_run_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 92
  store %struct.region_cache* null, %struct.region_cache** %width_run_cache, align 8
  %52 = load %struct.buffer*, %struct.buffer** %b, align 8
  %bidi_paragraph_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 93
  store %struct.region_cache* null, %struct.region_cache** %bidi_paragraph_cache, align 8
  %53 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_width_table(%struct.buffer* %53, i64 %call41)
  %54 = load i64, i64* %name.addr, align 8
  %call42 = call i64 @Fcopy_sequence(i64 %54)
  store i64 %call42, i64* %name.addr, align 8
  %55 = load i64, i64* %name.addr, align 8
  call void @set_string_intervals(i64 %55, %struct.interval* null)
  %56 = load %struct.buffer*, %struct.buffer** %b, align 8
  %57 = load i64, i64* %name.addr, align 8
  call void @bset_name(%struct.buffer* %56, i64 %57)
  %58 = load %struct.buffer*, %struct.buffer** %b, align 8
  %59 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer43 = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 81
  %60 = load %struct.buffer*, %struct.buffer** %base_buffer43, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 98
  %61 = load i64, i64* %undo_list_, align 8
  call void @bset_undo_list(%struct.buffer* %58, i64 %61)
  %62 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @reset_buffer(%struct.buffer* %62)
  %63 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @reset_buffer_local_variables(%struct.buffer* %63, i1 zeroext true)
  %64 = load %struct.buffer*, %struct.buffer** %b, align 8
  %65 = bitcast %struct.buffer* %64 to i8*
  %call44 = call i64 @make_lisp_ptr(i8* %65, i32 5)
  store i64 %call44, i64* %buf, align 8
  %66 = load i64, i64* @Vbuffer_alist, align 8
  %67 = load i64, i64* %name.addr, align 8
  %68 = load i64, i64* %buf, align 8
  %call45 = call i64 @Fcons(i64 %67, i64 %68)
  %call46 = call i64 @list1(i64 %call45)
  %call47 = call i64 @nconc2(i64 %66, i64 %call46)
  store i64 %call47, i64* @Vbuffer_alist, align 8
  %69 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call48 = call i64 @Fmake_marker()
  call void @bset_mark(%struct.buffer* %69, i64 %call48)
  %70 = load %struct.buffer*, %struct.buffer** %b, align 8
  %71 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer49 = getelementptr inbounds %struct.buffer, %struct.buffer* %71, i32 0, i32 81
  %72 = load %struct.buffer*, %struct.buffer** %base_buffer49, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 39
  %73 = load i64, i64* %enable_multibyte_characters_, align 8
  call void @bset_enable_multibyte_characters(%struct.buffer* %70, i64 %73)
  %74 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer50 = getelementptr inbounds %struct.buffer, %struct.buffer* %74, i32 0, i32 81
  %75 = load %struct.buffer*, %struct.buffer** %base_buffer50, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 45
  %76 = load i64, i64* %pt_marker_, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp52 = icmp eq i64 %76, %call51
  br i1 %cmp52, label %if.then.53, label %if.end.77

if.then.53:                                       ; preds = %cond.end
  %77 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer54 = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 81
  %78 = load %struct.buffer*, %struct.buffer** %base_buffer54, align 8
  %79 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer55 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 81
  %80 = load %struct.buffer*, %struct.buffer** %base_buffer55, align 8
  %81 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer56 = getelementptr inbounds %struct.buffer, %struct.buffer* %81, i32 0, i32 81
  %82 = load %struct.buffer*, %struct.buffer** %base_buffer56, align 8
  %pt57 = getelementptr inbounds %struct.buffer, %struct.buffer* %82, i32 0, i32 75
  %83 = load i64, i64* %pt57, align 8
  %84 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer58 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 81
  %85 = load %struct.buffer*, %struct.buffer** %base_buffer58, align 8
  %pt_byte59 = getelementptr inbounds %struct.buffer, %struct.buffer* %85, i32 0, i32 76
  %86 = load i64, i64* %pt_byte59, align 8
  %call60 = call i64 @build_marker(%struct.buffer* %80, i64 %83, i64 %86)
  call void @bset_pt_marker(%struct.buffer* %78, i64 %call60)
  %87 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer61 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 81
  %88 = load %struct.buffer*, %struct.buffer** %base_buffer61, align 8
  %89 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer62 = getelementptr inbounds %struct.buffer, %struct.buffer* %89, i32 0, i32 81
  %90 = load %struct.buffer*, %struct.buffer** %base_buffer62, align 8
  %91 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer63 = getelementptr inbounds %struct.buffer, %struct.buffer* %91, i32 0, i32 81
  %92 = load %struct.buffer*, %struct.buffer** %base_buffer63, align 8
  %begv64 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 77
  %93 = load i64, i64* %begv64, align 8
  %94 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer65 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 81
  %95 = load %struct.buffer*, %struct.buffer** %base_buffer65, align 8
  %begv_byte66 = getelementptr inbounds %struct.buffer, %struct.buffer* %95, i32 0, i32 78
  %96 = load i64, i64* %begv_byte66, align 8
  %call67 = call i64 @build_marker(%struct.buffer* %90, i64 %93, i64 %96)
  call void @bset_begv_marker(%struct.buffer* %88, i64 %call67)
  %97 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer68 = getelementptr inbounds %struct.buffer, %struct.buffer* %97, i32 0, i32 81
  %98 = load %struct.buffer*, %struct.buffer** %base_buffer68, align 8
  %99 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer69 = getelementptr inbounds %struct.buffer, %struct.buffer* %99, i32 0, i32 81
  %100 = load %struct.buffer*, %struct.buffer** %base_buffer69, align 8
  %101 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer70 = getelementptr inbounds %struct.buffer, %struct.buffer* %101, i32 0, i32 81
  %102 = load %struct.buffer*, %struct.buffer** %base_buffer70, align 8
  %zv71 = getelementptr inbounds %struct.buffer, %struct.buffer* %102, i32 0, i32 79
  %103 = load i64, i64* %zv71, align 8
  %104 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer72 = getelementptr inbounds %struct.buffer, %struct.buffer* %104, i32 0, i32 81
  %105 = load %struct.buffer*, %struct.buffer** %base_buffer72, align 8
  %zv_byte73 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 80
  %106 = load i64, i64* %zv_byte73, align 8
  %call74 = call i64 @build_marker(%struct.buffer* %100, i64 %103, i64 %106)
  call void @bset_zv_marker(%struct.buffer* %98, i64 %call74)
  %107 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer75 = getelementptr inbounds %struct.buffer, %struct.buffer* %107, i32 0, i32 81
  %108 = load %struct.buffer*, %struct.buffer** %base_buffer75, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %108, i32 0, i32 47
  %109 = load i64, i64* %zv_marker_, align 8
  %call76 = call %struct.Lisp_Marker* @XMARKER(i64 %109)
  %110 = bitcast %struct.Lisp_Marker* %call76 to i32*
  %bf.load = load i32, i32* %110, align 8
  %bf.clear = and i32 %bf.load, 2147483647
  %bf.set = or i32 %bf.clear, -2147483648
  store i32 %bf.set, i32* %110, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.53, %cond.end
  %111 = load i64, i64* %clone.addr, align 8
  %call78 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp79 = icmp eq i64 %111, %call78
  br i1 %cmp79, label %if.then.80, label %if.else

if.then.80:                                       ; preds = %if.end.77
  %112 = load %struct.buffer*, %struct.buffer** %b, align 8
  %113 = load %struct.buffer*, %struct.buffer** %b, align 8
  %114 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt81 = getelementptr inbounds %struct.buffer, %struct.buffer* %114, i32 0, i32 75
  %115 = load i64, i64* %pt81, align 8
  %116 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_byte82 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 76
  %117 = load i64, i64* %pt_byte82, align 8
  %call83 = call i64 @build_marker(%struct.buffer* %113, i64 %115, i64 %117)
  call void @bset_pt_marker(%struct.buffer* %112, i64 %call83)
  %118 = load %struct.buffer*, %struct.buffer** %b, align 8
  %119 = load %struct.buffer*, %struct.buffer** %b, align 8
  %120 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv84 = getelementptr inbounds %struct.buffer, %struct.buffer* %120, i32 0, i32 77
  %121 = load i64, i64* %begv84, align 8
  %122 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_byte85 = getelementptr inbounds %struct.buffer, %struct.buffer* %122, i32 0, i32 78
  %123 = load i64, i64* %begv_byte85, align 8
  %call86 = call i64 @build_marker(%struct.buffer* %119, i64 %121, i64 %123)
  call void @bset_begv_marker(%struct.buffer* %118, i64 %call86)
  %124 = load %struct.buffer*, %struct.buffer** %b, align 8
  %125 = load %struct.buffer*, %struct.buffer** %b, align 8
  %126 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv87 = getelementptr inbounds %struct.buffer, %struct.buffer* %126, i32 0, i32 79
  %127 = load i64, i64* %zv87, align 8
  %128 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_byte88 = getelementptr inbounds %struct.buffer, %struct.buffer* %128, i32 0, i32 80
  %129 = load i64, i64* %zv_byte88, align 8
  %call89 = call i64 @build_marker(%struct.buffer* %125, i64 %127, i64 %129)
  call void @bset_zv_marker(%struct.buffer* %124, i64 %call89)
  %130 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_marker_90 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 47
  %131 = load i64, i64* %zv_marker_90, align 8
  %call91 = call %struct.Lisp_Marker* @XMARKER(i64 %131)
  %132 = bitcast %struct.Lisp_Marker* %call91 to i32*
  %bf.load92 = load i32, i32* %132, align 8
  %bf.clear93 = and i32 %bf.load92, 2147483647
  %bf.set94 = or i32 %bf.clear93, -2147483648
  store i32 %bf.set94, i32* %132, align 8
  br label %if.end.109

if.else:                                          ; preds = %if.end.77
  %133 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %133, %struct.buffer** %old_b, align 8
  %134 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer95 = getelementptr inbounds %struct.buffer, %struct.buffer* %134, i32 0, i32 81
  %135 = load %struct.buffer*, %struct.buffer** %base_buffer95, align 8
  %136 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @clone_per_buffer_values(%struct.buffer* %135, %struct.buffer* %136)
  %137 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call96 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_filename(%struct.buffer* %137, i64 %call96)
  %138 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call97 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_file_truename(%struct.buffer* %138, i64 %call97)
  %139 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @bset_display_count(%struct.buffer* %139, i64 2)
  %140 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call98 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_backed_up(%struct.buffer* %140, i64 %call98)
  %141 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call99 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_auto_save_file_name(%struct.buffer* %141, i64 %call99)
  %142 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @set_buffer_internal_1(%struct.buffer* %142)
  %call100 = call i64 @intern(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i32 0, i32 0))
  %call101 = call i64 @builtin_lisp_symbol(i32 0)
  %call102 = call i64 @Fset(i64 %call100, i64 %call101)
  %call103 = call i64 @intern(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %call104 = call i64 @builtin_lisp_symbol(i32 0)
  %call105 = call i64 @Fset(i64 %call103, i64 %call104)
  %call106 = call i64 @intern(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i32 0, i32 0))
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %call108 = call i64 @Fset(i64 %call106, i64 %call107)
  %143 = load %struct.buffer*, %struct.buffer** %old_b, align 8
  call void @set_buffer_internal_1(%struct.buffer* %143)
  br label %if.end.109

if.end.109:                                       ; preds = %if.else, %if.then.80
  %144 = load i64, i64* @Vrun_hooks, align 8
  %call110 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp111 = icmp eq i64 %144, %call110
  br i1 %cmp111, label %if.end.115, label %if.then.112

if.then.112:                                      ; preds = %if.end.109
  %145 = load i64, i64* @Vrun_hooks, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 223)
  %call114 = call i64 @call1(i64 %145, i64 %call113)
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.112, %if.end.109
  %146 = load i64, i64* %buf, align 8
  ret i64 %146
}

declare void @bset_enable_multibyte_characters(%struct.buffer*, i64) #1

declare i64 @build_marker(%struct.buffer*, i64, i64) #1

declare %struct.Lisp_Marker* @XMARKER(i64) #1

; Function Attrs: nounwind uwtable
define internal void @clone_per_buffer_values(%struct.buffer* %from, %struct.buffer* %to) #3 {
entry:
  %from.addr = alloca %struct.buffer*, align 8
  %to.addr = alloca %struct.buffer*, align 8
  %offset = alloca i32, align 4
  %obj = alloca i64, align 8
  %m = alloca %struct.Lisp_Marker*, align 8
  store %struct.buffer* %from, %struct.buffer** %from.addr, align 8
  store %struct.buffer* %to, %struct.buffer** %to.addr, align 8
  store i32 8, i32* %offset, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %offset, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ule i64 %conv, 568
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %offset, align 4
  %conv2 = sext i32 %1 to i64
  %cmp3 = icmp eq i64 %conv2, 8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %2 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %call = call i64 @per_buffer_value(%struct.buffer* %2, i32 %3)
  store i64 %call, i64* %obj, align 8
  %4 = load i64, i64* %obj, align 8
  %and = and i64 %4, 7
  %conv5 = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv5, 1
  br i1 %cmp6, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end
  %5 = load i64, i64* %obj, align 8
  %call8 = call i32 @XMISCTYPE(i64 %5)
  %cmp9 = icmp eq i32 %call8, 24236
  br i1 %cmp9, label %land.lhs.true.11, label %if.end.20

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %6 = load i64, i64* %obj, align 8
  %call12 = call %struct.Lisp_Marker* @XMARKER(i64 %6)
  %buffer = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call12, i32 0, i32 1
  %7 = load %struct.buffer*, %struct.buffer** %buffer, align 8
  %8 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %cmp13 = icmp eq %struct.buffer* %7, %8
  br i1 %cmp13, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %land.lhs.true.11
  %9 = load i64, i64* %obj, align 8
  %call16 = call %struct.Lisp_Marker* @XMARKER(i64 %9)
  store %struct.Lisp_Marker* %call16, %struct.Lisp_Marker** %m, align 8
  %10 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %11 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %charpos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %11, i32 0, i32 3
  %12 = load i64, i64* %charpos, align 8
  %13 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %bytepos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %13, i32 0, i32 4
  %14 = load i64, i64* %bytepos, align 8
  %call17 = call i64 @build_marker(%struct.buffer* %10, i64 %12, i64 %14)
  store i64 %call17, i64* %obj, align 8
  %15 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %16 = bitcast %struct.Lisp_Marker* %15 to i32*
  %bf.load = load i32, i32* %16, align 8
  %bf.lshr = lshr i32 %bf.load, 31
  %bf.cast = trunc i32 %bf.lshr to i1
  %17 = load i64, i64* %obj, align 8
  %call18 = call %struct.Lisp_Marker* @XMARKER(i64 %17)
  %18 = bitcast %struct.Lisp_Marker* %call18 to i32*
  %19 = zext i1 %bf.cast to i32
  %bf.load19 = load i32, i32* %18, align 8
  %bf.shl = shl i32 %19, 31
  %bf.clear = and i32 %bf.load19, 2147483647
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %18, align 8
  %bf.result.cast = trunc i32 %19 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.15, %land.lhs.true.11, %land.lhs.true, %if.end
  %20 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %21 = load i32, i32* %offset, align 4
  %22 = load i64, i64* %obj, align 8
  call void @set_per_buffer_value(%struct.buffer* %20, i32 %21, i64 %22)
  br label %for.inc

for.inc:                                          ; preds = %if.end.20, %if.then
  %23 = load i32, i32* %offset, align 4
  %add = add nsw i32 %23, 8
  store i32 %add, i32* %offset, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %local_flags = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 84
  %25 = bitcast [50 x i8]* %local_flags to i8*
  %26 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %local_flags21 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 84
  %27 = bitcast [50 x i8]* %local_flags21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %27, i64 50, i32 8, i1 false)
  %28 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %29 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %30 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 95
  %31 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  %call22 = call %struct.Lisp_Overlay* @copy_overlays(%struct.buffer* %29, %struct.Lisp_Overlay* %31)
  call void @set_buffer_overlays_before(%struct.buffer* %28, %struct.Lisp_Overlay* %call22)
  %32 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %33 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %34 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 96
  %35 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  %call23 = call %struct.Lisp_Overlay* @copy_overlays(%struct.buffer* %33, %struct.Lisp_Overlay* %35)
  call void @set_buffer_overlays_after(%struct.buffer* %32, %struct.Lisp_Overlay* %call23)
  %36 = load %struct.buffer*, %struct.buffer** %to.addr, align 8
  %37 = load %struct.buffer*, %struct.buffer** %from.addr, align 8
  %call24 = call i64 @buffer_lisp_local_variables(%struct.buffer* %37, i1 zeroext true)
  call void @bset_local_var_alist(%struct.buffer* %36, i64 %call24)
  ret void
}

declare void @bset_filename(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_file_truename(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %file_truename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 49
  store i64 %0, i64* %file_truename_, align 8
  ret void
}

declare void @bset_display_count(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_backed_up(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %backed_up_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 4
  store i64 %0, i64* %backed_up_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_auto_save_file_name(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %auto_save_file_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 6
  store i64 %0, i64* %auto_save_file_name_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_buffer_internal_1(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %old_buf = alloca %struct.buffer*, align 8
  %tail = alloca i64, align 8
  %var = alloca i64, align 8
  %sym = alloca %struct.Lisp_Symbol*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %cmp = icmp eq %struct.buffer* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end.37

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 1
  %3 = load i64, i64* %name_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1 = icmp eq i64 %3, %call
  br i1 %cmp1, label %if.end.5, label %if.then.2

if.then.2:                                        ; preds = %do.body
  %4 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 81
  %5 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %5, null
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then.2
  br label %if.end.4

if.else:                                          ; preds = %if.then.2
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %if.end.5

if.end.5:                                         ; preds = %if.end.4, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %6, %struct.buffer** %old_buf, align 8
  %7 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  store %struct.buffer* %7, %struct.buffer** @current_buffer, align 8
  store i64 -1, i64* @last_known_column_point, align 8
  %8 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  %tobool6 = icmp ne %struct.buffer* %8, null
  br i1 %tobool6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %do.end
  %9 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  %base_buffer8 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 81
  %10 = load %struct.buffer*, %struct.buffer** %base_buffer8, align 8
  %tobool9 = icmp ne %struct.buffer* %10, null
  br i1 %tobool9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %if.then.7
  %11 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  %base_buffer11 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 81
  %12 = load %struct.buffer*, %struct.buffer** %base_buffer11, align 8
  %13 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 98
  %14 = load i64, i64* %undo_list_, align 8
  call void @bset_undo_list(%struct.buffer* %12, i64 %14)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.10, %if.then.7
  %15 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  call void @record_buffer_markers(%struct.buffer* %15)
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %do.end
  %16 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %base_buffer14 = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 81
  %17 = load %struct.buffer*, %struct.buffer** %base_buffer14, align 8
  %tobool15 = icmp ne %struct.buffer* %17, null
  br i1 %tobool15, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %if.end.13
  %18 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %19 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %base_buffer17 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 81
  %20 = load %struct.buffer*, %struct.buffer** %base_buffer17, align 8
  %undo_list_18 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 98
  %21 = load i64, i64* %undo_list_18, align 8
  call void @bset_undo_list(%struct.buffer* %18, i64 %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.16, %if.end.13
  %22 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @fetch_buffer_markers(%struct.buffer* %22)
  br label %do.body.20

do.body.20:                                       ; preds = %land.end, %if.end.19
  %23 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %local_var_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 9
  %24 = load i64, i64* %local_var_alist_, align 8
  store i64 %24, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body.20
  %25 = load i64, i64* %tail, align 8
  %and = and i64 %25, 7
  %conv = trunc i64 %and to i32
  %cmp21 = icmp eq i32 %conv, 3
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 0
  %29 = load i64, i64* %car, align 8
  %sub23 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub23 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car24, align 8
  store i64 %32, i64* %var, align 8
  %33 = load i64, i64* %var, align 8
  %sub25 = sub nsw i64 %33, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub25
  %34 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  store %struct.Lisp_Symbol* %34, %struct.Lisp_Symbol** %sym, align 8
  %35 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %36 = bitcast %struct.Lisp_Symbol* %35 to i16*
  %bf.load = load i16, i16* %36, align 8
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 7
  %bf.cast = zext i16 %bf.clear to i32
  %cmp26 = icmp eq i32 %bf.cast, 2
  br i1 %cmp26, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %for.body
  %37 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call28 = call %struct.Lisp_Buffer_Local_Value* @SYMBOL_BLV(%struct.Lisp_Symbol* %37)
  %fwd = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %call28, i32 0, i32 1
  %38 = load %union.Lisp_Fwd*, %union.Lisp_Fwd** %fwd, align 8
  %tobool29 = icmp ne %union.Lisp_Fwd* %38, null
  br i1 %tobool29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %land.lhs.true
  %39 = load i64, i64* %var, align 8
  %call31 = call i64 @Fsymbol_value(i64 %39)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.32
  %40 = load i64, i64* %tail, align 8
  %sub33 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub33 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %43 = load i64, i64* %cdr, align 8
  store i64 %43, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %44 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %45 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  %cmp34 = icmp ne %struct.buffer* %44, %45
  br i1 %cmp34, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %46 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  store %struct.buffer* %46, %struct.buffer** %b.addr, align 8
  %47 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %tobool36 = icmp ne %struct.buffer* %47, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %48 = phi i1 [ false, %do.cond ], [ %tobool36, %land.rhs ]
  br i1 %48, label %do.body.20, label %do.end.37

do.end.37:                                        ; preds = %if.then, %land.end
  ret void
}

declare i64 @Fset(i64, i64) #1

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define void @delete_all_overlays(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %ov = alloca %struct.Lisp_Overlay*, align 8
  %next = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  call void @drop_overlay(%struct.buffer* %3, %struct.Lisp_Overlay* %4)
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next1 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %5, i32 0, i32 1
  %6 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next1, align 8
  store %struct.Lisp_Overlay* %6, %struct.Lisp_Overlay** %next, align 8
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next2 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %7, i32 0, i32 1
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %next2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %8, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 96
  %10 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %10, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.8, %for.end
  %11 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %tobool4 = icmp ne %struct.Lisp_Overlay* %11, null
  br i1 %tobool4, label %for.body.5, label %for.end.9

for.body.5:                                       ; preds = %for.cond.3
  %12 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %13 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  call void @drop_overlay(%struct.buffer* %12, %struct.Lisp_Overlay* %13)
  %14 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next6 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %14, i32 0, i32 1
  %15 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next6, align 8
  store %struct.Lisp_Overlay* %15, %struct.Lisp_Overlay** %next, align 8
  %16 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next7 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %16, i32 0, i32 1
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %next7, align 8
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.body.5
  %17 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %17, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond.3

for.end.9:                                        ; preds = %for.cond.3
  %18 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %18, %struct.Lisp_Overlay* null)
  %19 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %19, %struct.Lisp_Overlay* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @drop_overlay(%struct.buffer* %b, %struct.Lisp_Overlay* %ov) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %ov.addr = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store %struct.Lisp_Overlay* %ov, %struct.Lisp_Overlay** %ov.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov.addr, align 8
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %1, i32 0, i32 2
  %2 = load i64, i64* %start, align 8
  %call = call i64 @marker_position(i64 %2)
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov.addr, align 8
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %3, i32 0, i32 3
  %4 = load i64, i64* %end, align 8
  %call1 = call i64 @marker_position(i64 %4)
  call void @modify_overlay(%struct.buffer* %0, i64 %call, i64 %call1)
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov.addr, align 8
  %start2 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %5, i32 0, i32 2
  %6 = load i64, i64* %start2, align 8
  %call3 = call %struct.Lisp_Marker* @XMARKER(i64 %6)
  call void @unchain_marker(%struct.Lisp_Marker* %call3)
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov.addr, align 8
  %end4 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %7, i32 0, i32 3
  %8 = load i64, i64* %end4, align 8
  %call5 = call %struct.Lisp_Marker* @XMARKER(i64 %8)
  call void @unchain_marker(%struct.Lisp_Marker* %call5)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @set_buffer_overlays_before(%struct.buffer* %b, %struct.Lisp_Overlay* %o) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %o.addr = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store %struct.Lisp_Overlay* %o, %struct.Lisp_Overlay** %o.addr, align 8
  %0 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %o.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 95
  store %struct.Lisp_Overlay* %0, %struct.Lisp_Overlay** %overlays_before, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @set_buffer_overlays_after(%struct.buffer* %b, %struct.Lisp_Overlay* %o) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %o.addr = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store %struct.Lisp_Overlay* %o, %struct.Lisp_Overlay** %o.addr, align 8
  %0 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %o.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 96
  store %struct.Lisp_Overlay* %0, %struct.Lisp_Overlay** %overlays_after, align 8
  ret void
}

declare void @bset_directory(%struct.buffer*, i64) #1

declare { i64, i64 } @make_timespec(i64, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare i64 @make_natnum(i64) #1

declare void @bset_read_only(%struct.buffer*, i64) #1

declare void @bset_mark_active(%struct.buffer*, i64) #1

declare void @bset_point_before_scroll(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_file_format(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %file_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 41
  store i64 %0, i64* %file_format_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_auto_save_file_format(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %auto_save_file_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 42
  store i64 %0, i64* %auto_save_file_format_, align 8
  ret void
}

declare void @bset_last_selected_window(%struct.buffer*, i64) #1

declare void @bset_display_time(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_cursor_type(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %cursor_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 69
  store i64 %0, i64* %cursor_type_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_extra_line_spacing(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %extra_line_spacing_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 70
  store i64 %0, i64* %extra_line_spacing_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fgenerate_new_buffer_name(i64 %name, i64 %ignore) #3 {
entry:
  %retval = alloca i64, align 8
  %name.addr = alloca i64, align 8
  %ignore.addr = alloca i64, align 8
  %gentemp = alloca i64, align 8
  %tem = alloca i64, align 8
  %tem2 = alloca i64, align 8
  %count = alloca i64, align 8
  %number = alloca [24 x i8], align 16
  store i64 %name, i64* %name.addr, align 8
  store i64 %ignore, i64* %ignore.addr, align 8
  %0 = load i64, i64* %name.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %name.addr, align 8
  %2 = load i64, i64* %ignore.addr, align 8
  %call = call i64 @Fstring_equal(i64 %1, i64 %2)
  store i64 %call, i64* %tem, align 8
  %3 = load i64, i64* %tem, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %name.addr, align 8
  store i64 %4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %name.addr, align 8
  %call2 = call i64 @Fget_buffer(i64 %5)
  store i64 %call2, i64* %tem, align 8
  %6 = load i64, i64* %tem, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %6, %call3
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %7 = load i64, i64* %name.addr, align 8
  store i64 %7, i64* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %8 = load i64, i64* %name.addr, align 8
  %call7 = call i8* @SSDATA(i64 %8)
  %call8 = call i32 @strncmp(i8* %call7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i64 1) #9
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.else, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  %9 = load i64, i64* %name.addr, align 8
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %number, i32 0, i32 0
  %call10 = call i64 @Frandom(i64 3999998)
  %shr = ashr i64 %call10, 2
  %call11 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i64 %shr)
  %call12 = call i64 @concat2(i64 %9, i64 %call11)
  store i64 %call12, i64* %tem2, align 8
  %10 = load i64, i64* %tem2, align 8
  %call13 = call i64 @Fget_buffer(i64 %10)
  store i64 %call13, i64* %tem, align 8
  %11 = load i64, i64* %tem, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %11, %call14
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.9
  %12 = load i64, i64* %tem2, align 8
  store i64 %12, i64* %retval
  br label %return

if.end.17:                                        ; preds = %if.then.9
  br label %if.end.18

if.else:                                          ; preds = %if.end.6
  %13 = load i64, i64* %name.addr, align 8
  store i64 %13, i64* %tem2, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.end.17
  store i64 1, i64* %count, align 8
  br label %while.body

while.body:                                       ; preds = %if.end.18, %if.end.31
  %14 = load i64, i64* %tem2, align 8
  %arraydecay19 = getelementptr inbounds [24 x i8], [24 x i8]* %number, i32 0, i32 0
  %15 = load i64, i64* %count, align 8
  %inc = add nsw i64 %15, 1
  store i64 %inc, i64* %count, align 8
  %call20 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), i64 %inc)
  %call21 = call i64 @concat2(i64 %14, i64 %call20)
  store i64 %call21, i64* %gentemp, align 8
  %16 = load i64, i64* %gentemp, align 8
  %17 = load i64, i64* %ignore.addr, align 8
  %call22 = call i64 @Fstring_equal(i64 %16, i64 %17)
  store i64 %call22, i64* %tem, align 8
  %18 = load i64, i64* %tem, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %18, %call23
  br i1 %cmp24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %while.body
  %19 = load i64, i64* %gentemp, align 8
  store i64 %19, i64* %retval
  br label %return

if.end.26:                                        ; preds = %while.body
  %20 = load i64, i64* %gentemp, align 8
  %call27 = call i64 @Fget_buffer(i64 %20)
  store i64 %call27, i64* %tem, align 8
  %21 = load i64, i64* %tem, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %21, %call28
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.26
  %22 = load i64, i64* %gentemp, align 8
  store i64 %22, i64* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.26
  br label %while.body

return:                                           ; preds = %if.then.30, %if.then.25, %if.then.16, %if.then.5, %if.then
  %23 = load i64, i64* %retval
  ret i64 %23
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #5

declare i8* @SSDATA(i64) #1

declare i64 @concat2(i64, i64) #1

declare i64 @make_formatted_string(i8*, i8*, ...) #1

declare i64 @Frandom(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_name(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 1
  %1 = load i64, i64* %name_, align 8
  ret i64 %1
}

declare %struct.buffer* @decode_buffer(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_file_name(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 2
  %1 = load i64, i64* %filename_, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_base_buffer(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %base = alloca %struct.buffer*, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 81
  %1 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  store %struct.buffer* %1, %struct.buffer** %base, align 8
  %2 = load %struct.buffer*, %struct.buffer** %base, align 8
  %tobool = icmp ne %struct.buffer* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.buffer*, %struct.buffer** %base, align 8
  %4 = bitcast %struct.buffer* %3 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %4, i32 5)
  store i64 %call1, i64* %buffer.addr, align 8
  %5 = load i64, i64* %buffer.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_local_value(i64 %variable, i64 %buffer) #3 {
entry:
  %variable.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %variable, i64* %variable.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %variable.addr, align 8
  %1 = load i64, i64* %buffer.addr, align 8
  %call = call i64 @buffer_local_value(i64 %0, i64 %1)
  store i64 %call, i64* %result, align 8
  %2 = load i64, i64* %result, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 1007)
  %3 = load i64, i64* %variable.addr, align 8
  call void @xsignal1(i64 %call2, i64 %3) #8
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %result, align 8
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define i64 @buffer_local_value(i64 %variable, i64 %buffer) #3 {
entry:
  %variable.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  %result = alloca i64, align 8
  %sym = alloca %struct.Lisp_Symbol*, align 8
  %blv = alloca %struct.Lisp_Buffer_Local_Value*, align 8
  %current_alist_element = alloca i64, align 8
  %fwd19 = alloca %union.Lisp_Fwd*, align 8
  store i64 %variable, i64* %variable.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %variable.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 897)
  %1 = load i64, i64* %variable.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %4)
  %5 = load i64, i64* %buffer.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %5)
  store %struct.buffer* %call2, %struct.buffer** %buf, align 8
  %6 = load i64, i64* %variable.addr, align 8
  %sub = sub nsw i64 %6, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub
  %7 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  store %struct.Lisp_Symbol* %7, %struct.Lisp_Symbol** %sym, align 8
  br label %start

start:                                            ; preds = %sw.bb, %cond.end
  %8 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %9 = bitcast %struct.Lisp_Symbol* %8 to i16*
  %bf.load = load i16, i16* %9, align 8
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 7
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 1, label %sw.bb
    i32 4, label %sw.bb.4
    i32 2, label %sw.bb.5
    i32 3, label %sw.bb.18
  ]

sw.bb:                                            ; preds = %start
  %10 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call3 = call %struct.Lisp_Symbol* @indirect_variable(%struct.Lisp_Symbol* %10)
  store %struct.Lisp_Symbol* %call3, %struct.Lisp_Symbol** %sym, align 8
  br label %start

sw.bb.4:                                          ; preds = %start
  %11 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %val = getelementptr inbounds %struct.Lisp_Symbol, %struct.Lisp_Symbol* %11, i32 0, i32 2
  %value = bitcast %union.anon.12* %val to i64*
  %12 = load i64, i64* %value, align 8
  store i64 %12, i64* %result, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %start
  %13 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call6 = call %struct.Lisp_Buffer_Local_Value* @SYMBOL_BLV(%struct.Lisp_Symbol* %13)
  store %struct.Lisp_Buffer_Local_Value* %call6, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %14 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call7 = call i64 @make_lisp_symbol(%struct.Lisp_Symbol* %14)
  store i64 %call7, i64* %variable.addr, align 8
  %15 = load i64, i64* %variable.addr, align 8
  %16 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %local_var_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 9
  %17 = load i64, i64* %local_var_alist_, align 8
  %call8 = call i64 @Fassoc(i64 %15, i64 %17)
  store i64 %call8, i64* %result, align 8
  %18 = load i64, i64* %result, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %18, %call9
  br i1 %cmp10, label %if.else, label %if.then

if.then:                                          ; preds = %sw.bb.5
  %19 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %fwd = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %19, i32 0, i32 1
  %20 = load %union.Lisp_Fwd*, %union.Lisp_Fwd** %fwd, align 8
  %tobool = icmp ne %union.Lisp_Fwd* %20, null
  br i1 %tobool, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then
  %21 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %valcell = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %21, i32 0, i32 4
  %22 = load i64, i64* %valcell, align 8
  store i64 %22, i64* %current_alist_element, align 8
  %23 = load i64, i64* %current_alist_element, align 8
  %24 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %fwd13 = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %24, i32 0, i32 1
  %25 = load %union.Lisp_Fwd*, %union.Lisp_Fwd** %fwd13, align 8
  %call14 = call i64 @do_symval_forwarding(%union.Lisp_Fwd* %25)
  call void @XSETCDR(i64 %23, i64 %call14)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.then
  %26 = load i64, i64* %result, align 8
  %sub15 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub15 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %29 = load i64, i64* %cdr, align 8
  store i64 %29, i64* %result, align 8
  br label %if.end.17

if.else:                                          ; preds = %sw.bb.5
  %30 = load i64, i64* %variable.addr, align 8
  %call16 = call i64 @Fdefault_value(i64 %30)
  store i64 %call16, i64* %result, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.end
  br label %sw.epilog

sw.bb.18:                                         ; preds = %start
  %31 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call20 = call %union.Lisp_Fwd* @SYMBOL_FWD(%struct.Lisp_Symbol* %31)
  store %union.Lisp_Fwd* %call20, %union.Lisp_Fwd** %fwd19, align 8
  %32 = load %union.Lisp_Fwd*, %union.Lisp_Fwd** %fwd19, align 8
  %call21 = call zeroext i1 @BUFFER_OBJFWDP(%union.Lisp_Fwd* %32)
  br i1 %call21, label %if.then.22, label %if.else.25

if.then.22:                                       ; preds = %sw.bb.18
  %33 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %34 = load %union.Lisp_Fwd*, %union.Lisp_Fwd** %fwd19, align 8
  %call23 = call %struct.Lisp_Buffer_Objfwd* @XBUFFER_OBJFWD(%union.Lisp_Fwd* %34)
  %offset = getelementptr inbounds %struct.Lisp_Buffer_Objfwd, %struct.Lisp_Buffer_Objfwd* %call23, i32 0, i32 1
  %35 = load i32, i32* %offset, align 4
  %call24 = call i64 @per_buffer_value(%struct.buffer* %33, i32 %35)
  store i64 %call24, i64* %result, align 8
  br label %if.end.27

if.else.25:                                       ; preds = %sw.bb.18
  %36 = load i64, i64* %variable.addr, align 8
  %call26 = call i64 @Fdefault_value(i64 %36)
  store i64 %call26, i64* %result, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.22
  br label %sw.epilog

sw.default:                                       ; preds = %start
  call void @emacs_abort() #8
  unreachable

sw.epilog:                                        ; preds = %if.end.27, %if.end.17, %sw.bb.4
  %37 = load i64, i64* %result, align 8
  ret i64 %37
}

; Function Attrs: noreturn
declare void @xsignal1(i64, i64) #2

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

declare void @CHECK_BUFFER(i64) #1

declare %struct.Lisp_Symbol* @indirect_variable(%struct.Lisp_Symbol*) #1

declare %struct.Lisp_Buffer_Local_Value* @SYMBOL_BLV(%struct.Lisp_Symbol*) #1

declare i64 @make_lisp_symbol(%struct.Lisp_Symbol*) #1

declare i64 @Fassoc(i64, i64) #1

declare void @XSETCDR(i64, i64) #1

declare i64 @do_symval_forwarding(%union.Lisp_Fwd*) #1

declare i64 @Fdefault_value(i64) #1

declare %union.Lisp_Fwd* @SYMBOL_FWD(%struct.Lisp_Symbol*) #1

declare zeroext i1 @BUFFER_OBJFWDP(%union.Lisp_Fwd*) #1

declare i64 @per_buffer_value(%struct.buffer*, i32) #1

declare %struct.Lisp_Buffer_Objfwd* @XBUFFER_OBJFWD(%union.Lisp_Fwd*) #1

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_local_variables(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  %result = alloca i64, align 8
  %offset = alloca i32, align 4
  %idx = alloca i32, align 4
  %sym = alloca i64, align 8
  %val = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  store %struct.buffer* %call, %struct.buffer** %buf, align 8
  %1 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %call1 = call i64 @buffer_lisp_local_variables(%struct.buffer* %1, i1 zeroext false)
  store i64 %call1, i64* %result, align 8
  store i32 8, i32* %offset, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %offset, align 4
  %conv = sext i32 %2 to i64
  %cmp = icmp ule i64 %conv, 568
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_flags to i8*), i64 %idx.ext
  %4 = bitcast i8* %add.ptr to i64*
  %5 = load i64, i64* %4, align 8
  %shr = ashr i64 %5, 2
  %conv3 = trunc i64 %shr to i32
  store i32 %conv3, i32* %idx, align 4
  %6 = load i32, i32* %idx, align 4
  %cmp4 = icmp eq i32 %6, -1
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i32, i32* %idx, align 4
  %cmp6 = icmp slt i32 %7, 0
  br i1 %cmp6, label %cond.true, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false
  %8 = load i32, i32* %idx, align 4
  %9 = load i32, i32* @last_per_buffer_idx, align 4
  %cmp9 = icmp sge i32 %8, %9
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.8, %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br i1 false, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %lor.lhs.false.8
  %11 = load i32, i32* %idx, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %local_flags = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 84
  %arrayidx = getelementptr inbounds [50 x i8], [50 x i8]* %local_flags, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv11 = sext i8 %13 to i32
  %cmp12 = icmp ne i32 %conv11, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %10, %for.body
  %14 = load i32, i32* %offset, align 4
  %idx.ext14 = sext i32 %14 to i64
  %add.ptr15 = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_symbols to i8*), i64 %idx.ext14
  %15 = bitcast i8* %add.ptr15 to i64*
  %16 = load i64, i64* %15, align 8
  %and = and i64 %16, 7
  %conv16 = trunc i64 %and to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %17 = load i32, i32* %offset, align 4
  %idx.ext19 = sext i32 %17 to i64
  %add.ptr20 = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_symbols to i8*), i64 %idx.ext19
  %18 = bitcast i8* %add.ptr20 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %sym, align 8
  %20 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %21 = load i32, i32* %offset, align 4
  %call21 = call i64 @per_buffer_value(%struct.buffer* %20, i32 %21)
  store i64 %call21, i64* %val, align 8
  %22 = load i64, i64* %val, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp23 = icmp eq i64 %22, %call22
  br i1 %cmp23, label %cond.true.25, label %cond.false.26

cond.true.25:                                     ; preds = %if.then
  %23 = load i64, i64* %sym, align 8
  br label %cond.end

cond.false.26:                                    ; preds = %if.then
  %24 = load i64, i64* %sym, align 8
  %25 = load i64, i64* %val, align 8
  %call27 = call i64 @Fcons(i64 %24, i64 %25)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.25
  %cond = phi i64 [ %23, %cond.true.25 ], [ %call27, %cond.false.26 ]
  %26 = load i64, i64* %result, align 8
  %call28 = call i64 @Fcons(i64 %cond, i64 %26)
  store i64 %call28, i64* %result, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true, %cond.false, %10
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i32, i32* %offset, align 4
  %add = add nsw i32 %27, 8
  store i32 %add, i32* %offset, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i64, i64* %result, align 8
  ret i64 %28
}

; Function Attrs: nounwind uwtable
define internal i64 @buffer_lisp_local_variables(%struct.buffer* %buf, i1 zeroext %clone) #3 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %clone.addr = alloca i8, align 1
  %result = alloca i64, align 8
  %tail = alloca i64, align 8
  %val = alloca i64, align 8
  %elt = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  %frombool = zext i1 %clone to i8
  store i8 %frombool, i8* %clone.addr, align 1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %result, align 8
  %0 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %local_var_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 9
  %1 = load i64, i64* %local_var_alist_, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %elt, align 8
  %7 = load i64, i64* %elt, align 8
  %sub2 = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car3 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car3, align 8
  %call4 = call i64 @find_symbol_value(i64 %10)
  store i64 %call4, i64* %val, align 8
  %11 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp5 = icmp ne %struct.buffer* %11, %12
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %13 = load i64, i64* %elt, align 8
  %sub7 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub7 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %16 = load i64, i64* %cdr, align 8
  store i64 %16, i64* %val, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i8, i8* %clone.addr, align 1
  %tobool = trunc i8 %17 to i1
  br i1 %tobool, label %cond.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %18 = load i64, i64* %val, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp9 = icmp eq i64 %18, %call8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %19 = load i64, i64* %elt, align 8
  %sub11 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub11 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car12 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car12, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %23 = load i64, i64* %elt, align 8
  %sub13 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub13 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car14, align 8
  %27 = load i64, i64* %val, align 8
  %call15 = call i64 @Fcons(i64 %26, i64 %27)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %22, %cond.true ], [ %call15, %cond.false ]
  %28 = load i64, i64* %result, align 8
  %call16 = call i64 @Fcons(i64 %cond, i64 %28)
  store i64 %call16, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %29 = load i64, i64* %tail, align 8
  %sub17 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub17 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr19 = bitcast %union.anon.11* %u18 to i64*
  %32 = load i64, i64* %cdr19, align 8
  store i64 %32, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load i64, i64* %result, align 8
  ret i64 %33
}

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_modified_p(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  store %struct.buffer* %call, %struct.buffer** %buf, align 8
  %1 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 73
  %2 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %2, i32 0, i32 8
  %3 = load i64, i64* %save_modiff, align 8
  %4 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 73
  %5 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %5, i32 0, i32 6
  %6 = load i64, i64* %modiff, align 8
  %cmp = icmp slt i64 %3, %6
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fforce_mode_line_update(i64 %all) #3 {
entry:
  %all.addr = alloca i64, align 8
  store i64 %all, i64* %all.addr, align 8
  %0 = load i64, i64* %all.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i32 10, i32* @update_mode_lines, align 4
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 94
  %bf.load = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  br label %if.end.7

if.else:                                          ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call1 = call i32 @buffer_window_count(%struct.buffer* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.else
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  call void @bset_update_mode_line(%struct.buffer* %3)
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %prevent_redisplay_optimizations_p3 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 94
  %bf.load4 = load i8, i8* %prevent_redisplay_optimizations_p3, align 8
  %bf.clear5 = and i8 %bf.load4, -2
  %bf.set6 = or i8 %bf.clear5, 1
  store i8 %bf.set6, i8* %prevent_redisplay_optimizations_p3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %5 = load i64, i64* %all.addr, align 8
  ret i64 %5
}

declare i32 @buffer_window_count(%struct.buffer*) #1

declare void @bset_update_mode_line(%struct.buffer*) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_buffer_modified_p(i64 %flag) #3 {
entry:
  %flag.addr = alloca i64, align 8
  store i64 %flag, i64* %flag.addr, align 8
  %0 = load i64, i64* %flag.addr, align 8
  %call = call i64 @Frestore_buffer_modified_p(i64 %0)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %call2 = call i64 @Fforce_mode_line_update(i64 %call1)
  ret i64 %call2
}

; Function Attrs: nounwind uwtable
define i64 @Frestore_buffer_modified_p(i64 %flag) #3 {
entry:
  %flag.addr = alloca i64, align 8
  %fn = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %already = alloca i8, align 1
  store i64 %flag, i64* %flag.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 81
  %1 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %base_buffer1 = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 81
  %3 = load %struct.buffer*, %struct.buffer** %base_buffer1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.buffer* [ %3, %cond.true ], [ %4, %cond.false ]
  store %struct.buffer* %cond, %struct.buffer** %b, align 8
  %5 = load %struct.buffer*, %struct.buffer** %b, align 8
  %file_truename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 49
  %6 = load i64, i64* %file_truename_, align 8
  store i64 %6, i64* %fn, align 8
  %7 = load i64, i64* %fn, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %7, %call
  br i1 %cmp, label %if.end.17, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %struct.buffer*, %struct.buffer** %b, align 8
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 2
  %9 = load i64, i64* %filename_, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %9, %call2
  br i1 %cmp3, label %if.end.17, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 73
  %11 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %11, i32 0, i32 8
  %12 = load i64, i64* %save_modiff, align 8
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 6
  %15 = load i64, i64* %modiff, align 8
  %cmp5 = icmp slt i64 %12, %15
  %frombool = zext i1 %cmp5 to i8
  store i8 %frombool, i8* %already, align 1
  %16 = load i8, i8* %already, align 1
  %tobool6 = trunc i8 %16 to i1
  br i1 %tobool6, label %if.else, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %if.then
  %17 = load i64, i64* %flag.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %17, %call8
  br i1 %cmp9, label %if.else, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true.7
  %18 = load i64, i64* %fn, align 8
  call void @lock_file(i64 %18)
  br label %if.end.16

if.else:                                          ; preds = %land.lhs.true.7, %if.then
  %19 = load i8, i8* %already, align 1
  %tobool11 = trunc i8 %19 to i1
  br i1 %tobool11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %if.else
  %20 = load i64, i64* %flag.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %20, %call13
  br i1 %cmp14, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %land.lhs.true.12
  %21 = load i64, i64* %fn, align 8
  call void @unlock_file(i64 %21)
  br label %if.end

if.end:                                           ; preds = %if.then.15, %land.lhs.true.12, %if.else
  br label %if.end.16

if.end.16:                                        ; preds = %if.end, %if.then.10
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true, %cond.end
  %22 = load i64, i64* %flag.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %22, %call18
  br i1 %cmp19, label %cond.true.20, label %cond.false.23

cond.true.20:                                     ; preds = %if.end.17
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text21 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 73
  %24 = load %struct.buffer_text*, %struct.buffer_text** %text21, align 8
  %modiff22 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %24, i32 0, i32 6
  %25 = load i64, i64* %modiff22, align 8
  br label %cond.end.37

cond.false.23:                                    ; preds = %if.end.17
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text24 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 73
  %27 = load %struct.buffer_text*, %struct.buffer_text** %text24, align 8
  %save_modiff25 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %27, i32 0, i32 8
  %28 = load i64, i64* %save_modiff25, align 8
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text26 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 73
  %30 = load %struct.buffer_text*, %struct.buffer_text** %text26, align 8
  %modiff27 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %30, i32 0, i32 6
  %31 = load i64, i64* %modiff27, align 8
  %cmp28 = icmp slt i64 %28, %31
  br i1 %cmp28, label %cond.true.29, label %cond.false.32

cond.true.29:                                     ; preds = %cond.false.23
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 73
  %33 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %save_modiff31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %33, i32 0, i32 8
  %34 = load i64, i64* %save_modiff31, align 8
  br label %cond.end.35

cond.false.32:                                    ; preds = %cond.false.23
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text33 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text33, align 8
  %modiff34 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 6
  %37 = load i64, i64* %modiff34, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %modiff34, align 8
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.32, %cond.true.29
  %cond36 = phi i64 [ %34, %cond.true.29 ], [ %37, %cond.false.32 ]
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.end.35, %cond.true.20
  %cond38 = phi i64 [ %25, %cond.true.20 ], [ %cond36, %cond.end.35 ]
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text39 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 73
  %39 = load %struct.buffer_text*, %struct.buffer_text** %text39, align 8
  %save_modiff40 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %39, i32 0, i32 8
  store i64 %cond38, i64* %save_modiff40, align 8
  %40 = load i64, i64* %flag.addr, align 8
  ret i64 %40
}

declare void @lock_file(i64) #1

declare void @unlock_file(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_modified_tick(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 73
  %1 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1, i32 0, i32 6
  %2 = load i64, i64* %modiff, align 8
  %shl = shl i64 %2, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_chars_modified_tick(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 73
  %1 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %chars_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1, i32 0, i32 7
  %2 = load i64, i64* %chars_modiff, align 8
  %shl = shl i64 %2, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Frename_buffer(i64 %newname, i64 %unique) #3 {
entry:
  %retval = alloca i64, align 8
  %newname.addr = alloca i64, align 8
  %unique.addr = alloca i64, align 8
  %tem = alloca i64, align 8
  %buf = alloca i64, align 8
  store i64 %newname, i64* %newname.addr, align 8
  store i64 %unique, i64* %unique.addr, align 8
  %0 = load i64, i64* %newname.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %newname.addr, align 8
  %call = call i64 @SCHARS(i64 %1)
  %cmp = icmp eq i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %newname.addr, align 8
  %call1 = call i64 @Fget_buffer(i64 %2)
  store i64 %call1, i64* %tem, align 8
  %3 = load i64, i64* %tem, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %if.end.18, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %4 = load i64, i64* %unique.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %4, %call5
  br i1 %cmp6, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.then.4
  %5 = load i64, i64* %tem, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %5)
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp8 = icmp eq %struct.buffer* %call7, %6
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 1
  %8 = load i64, i64* %name_, align 8
  store i64 %8, i64* %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true, %if.then.4
  %9 = load i64, i64* %unique.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %9, %call11
  br i1 %cmp12, label %if.else, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  %10 = load i64, i64* %newname.addr, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %name_14 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 1
  %12 = load i64, i64* %name_14, align 8
  %call15 = call i64 @Fgenerate_new_buffer_name(i64 %10, i64 %12)
  store i64 %call15, i64* %newname.addr, align 8
  br label %if.end.17

if.else:                                          ; preds = %if.end.10
  %13 = load i64, i64* %newname.addr, align 8
  %call16 = call i8* @SDATA(i64 %13)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i32 0, i32 0), i8* %call16) #8
  unreachable

if.end.17:                                        ; preds = %if.then.13
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %15 = load i64, i64* %newname.addr, align 8
  call void @bset_name(%struct.buffer* %14, i64 %15)
  store i32 11, i32* @update_mode_lines, align 4
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %17 = bitcast %struct.buffer* %16 to i8*
  %call19 = call i64 @make_lisp_ptr(i8* %17, i32 5)
  store i64 %call19, i64* %buf, align 8
  %18 = load i64, i64* %buf, align 8
  %19 = load i64, i64* @Vbuffer_alist, align 8
  %call20 = call i64 @Frassq(i64 %18, i64 %19)
  %20 = load i64, i64* %newname.addr, align 8
  %call21 = call i64 @Fsetcar(i64 %call20, i64 %20)
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 2
  %22 = load i64, i64* %filename_, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %22, %call22
  br i1 %cmp23, label %land.lhs.true.24, label %if.end.30

land.lhs.true.24:                                 ; preds = %if.end.18
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %auto_save_file_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 6
  %24 = load i64, i64* %auto_save_file_name_, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %24, %call25
  br i1 %cmp26, label %if.end.30, label %if.then.27

if.then.27:                                       ; preds = %land.lhs.true.24
  %call28 = call i64 @intern(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i32 0, i32 0))
  %call29 = call i64 @call0(i64 %call28)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.27, %land.lhs.true.24, %if.end.18
  %25 = load i64, i64* @Vrun_hooks, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %25, %call31
  br i1 %cmp32, label %if.end.36, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %26 = load i64, i64* @Vrun_hooks, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 223)
  %call35 = call i64 @call1(i64 %26, i64 %call34)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.33, %if.end.30
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %name_37 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 1
  %28 = load i64, i64* %name_37, align 8
  store i64 %28, i64* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.9
  %29 = load i64, i64* %retval
  ret i64 %29
}

declare i64 @Fsetcar(i64, i64) #1

declare i64 @Frassq(i64, i64) #1

declare i64 @call0(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fother_buffer(i64 %buffer, i64 %visible_ok, i64 %frame) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %visible_ok.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %tail = alloca i64, align 8
  %pred = alloca i64, align 8
  %buf = alloca i64, align 8
  %notsogood = alloca i64, align 8
  %scratch = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  store i64 %visible_ok, i64* %visible_ok.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 15
  %2 = load i64, i64* %buffer_list, align 8
  store i64 %2, i64* %tail, align 8
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %buffer_predicate = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 14
  %4 = load i64, i64* %buffer_predicate, align 8
  store i64 %4, i64* %pred, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %notsogood, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %tail, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  store i64 %9, i64* %buf, align 8
  %10 = load i64, i64* %buf, align 8
  %11 = load i64, i64* %buffer.addr, align 8
  %call3 = call zeroext i1 @candidate_buffer(i64 %10, i64 %11)
  br i1 %call3, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %for.body
  %12 = load i64, i64* %pred, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %12, %call5
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load i64, i64* %pred, align 8
  %14 = load i64, i64* %buf, align 8
  %call8 = call i64 @call1(i64 %13, i64 %14)
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %call8, %call9
  br i1 %cmp10, label %if.end.27, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %15 = load i64, i64* %visible_ok.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %15, %call12
  br i1 %cmp13, label %lor.lhs.false.15, label %if.then.21

lor.lhs.false.15:                                 ; preds = %if.then
  %16 = load i64, i64* %buf, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 1005)
  %call17 = call i64 @Fget_buffer_window(i64 %16, i64 %call16)
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %call17, %call18
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %lor.lhs.false.15, %if.then
  %17 = load i64, i64* %buf, align 8
  store i64 %17, i64* %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false.15
  %18 = load i64, i64* %notsogood, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %18, %call22
  br i1 %cmp23, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.else
  %19 = load i64, i64* %buf, align 8
  store i64 %19, i64* %notsogood, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.25, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %20 = load i64, i64* %tail, align 8
  %sub28 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub28 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %23 = load i64, i64* %cdr, align 8
  store i64 %23, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %24, i64* %tail, align 8
  br label %for.cond.29

for.cond.29:                                      ; preds = %for.inc.70, %for.end
  %25 = load i64, i64* %tail, align 8
  %and30 = and i64 %25, 7
  %conv31 = trunc i64 %and30 to i32
  %cmp32 = icmp eq i32 %conv31, 3
  br i1 %cmp32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.29
  %26 = load i64, i64* %tail, align 8
  %sub34 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub34 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %car35 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 0
  %29 = load i64, i64* %car35, align 8
  %sub36 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub36 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr38 = bitcast %union.anon.11* %u37 to i64*
  %32 = load i64, i64* %cdr38, align 8
  store i64 %32, i64* %buf, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.29
  %33 = phi i1 [ false, %for.cond.29 ], [ true, %land.rhs ]
  br i1 %33, label %for.body.39, label %for.end.74

for.body.39:                                      ; preds = %land.end
  %34 = load i64, i64* %buf, align 8
  %35 = load i64, i64* %buffer.addr, align 8
  %call40 = call zeroext i1 @candidate_buffer(i64 %34, i64 %35)
  br i1 %call40, label %land.lhs.true.42, label %if.end.69

land.lhs.true.42:                                 ; preds = %for.body.39
  %36 = load i64, i64* %pred, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp44 = icmp eq i64 %36, %call43
  br i1 %cmp44, label %if.then.51, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %land.lhs.true.42
  %37 = load i64, i64* %pred, align 8
  %38 = load i64, i64* %buf, align 8
  %call47 = call i64 @call1(i64 %37, i64 %38)
  %call48 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp49 = icmp eq i64 %call47, %call48
  br i1 %cmp49, label %if.end.69, label %if.then.51

if.then.51:                                       ; preds = %lor.lhs.false.46, %land.lhs.true.42
  %39 = load i64, i64* %visible_ok.addr, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp53 = icmp eq i64 %39, %call52
  br i1 %cmp53, label %lor.lhs.false.55, label %if.then.61

lor.lhs.false.55:                                 ; preds = %if.then.51
  %40 = load i64, i64* %buf, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 1005)
  %call57 = call i64 @Fget_buffer_window(i64 %40, i64 %call56)
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %call57, %call58
  br i1 %cmp59, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %lor.lhs.false.55, %if.then.51
  %41 = load i64, i64* %buf, align 8
  store i64 %41, i64* %retval
  br label %return

if.else.62:                                       ; preds = %lor.lhs.false.55
  %42 = load i64, i64* %notsogood, align 8
  %call63 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp64 = icmp eq i64 %42, %call63
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.else.62
  %43 = load i64, i64* %buf, align 8
  store i64 %43, i64* %notsogood, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %if.else.62
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %lor.lhs.false.46, %for.body.39
  br label %for.inc.70

for.inc.70:                                       ; preds = %if.end.69
  %44 = load i64, i64* %tail, align 8
  %sub71 = sub nsw i64 %44, 3
  %45 = inttoptr i64 %sub71 to i8*
  %46 = bitcast i8* %45 to %struct.Lisp_Cons*
  %u72 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %46, i32 0, i32 1
  %cdr73 = bitcast %union.anon.11* %u72 to i64*
  %47 = load i64, i64* %cdr73, align 8
  store i64 %47, i64* %tail, align 8
  br label %for.cond.29

for.end.74:                                       ; preds = %land.end
  %48 = load i64, i64* %notsogood, align 8
  %call75 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp76 = icmp eq i64 %48, %call75
  br i1 %cmp76, label %if.else.79, label %if.then.78

if.then.78:                                       ; preds = %for.end.74
  %49 = load i64, i64* %notsogood, align 8
  store i64 %49, i64* %retval
  br label %return

if.else.79:                                       ; preds = %for.end.74
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 9, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8** %data, align 8
  %s80 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %50 = bitcast %struct.Lisp_String* %s80 to i8*
  %call81 = call i64 @make_lisp_ptr(i8* %50, i32 4)
  store i64 %call81, i64* %scratch, align 8
  %51 = load i64, i64* %scratch, align 8
  %call82 = call i64 @Fget_buffer(i64 %51)
  store i64 %call82, i64* %buf, align 8
  %52 = load i64, i64* %buf, align 8
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp84 = icmp eq i64 %52, %call83
  br i1 %cmp84, label %if.then.86, label %if.end.89

if.then.86:                                       ; preds = %if.else.79
  %53 = load i64, i64* %scratch, align 8
  %call87 = call i64 @Fget_buffer_create(i64 %53)
  store i64 %call87, i64* %buf, align 8
  %54 = load i64, i64* %buf, align 8
  %call88 = call i64 @Fset_buffer_major_mode(i64 %54)
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.86, %if.else.79
  %55 = load i64, i64* %buf, align 8
  store i64 %55, i64* %retval
  br label %return

return:                                           ; preds = %if.end.89, %if.then.78, %if.then.61, %if.then.21
  %56 = load i64, i64* %retval
  ret i64 %56
}

declare %struct.frame* @decode_live_frame(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @candidate_buffer(i64 %b, i64 %buffer) #3 {
entry:
  %b.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  store i64 %b, i64* %b.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %b.addr, align 8
  %call = call zeroext i1 @BUFFERP(i64 %0)
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %b.addr, align 8
  %2 = load i64, i64* %buffer.addr, align 8
  %cmp = icmp eq i64 %1, %2
  br i1 %cmp, label %land.end, label %land.lhs.true.1

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %3 = load i64, i64* %b.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call2, i32 0, i32 1
  %4 = load i64, i64* %name_, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %4, %call3
  br i1 %cmp4, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.1
  %5 = load i64, i64* %b.addr, align 8
  %call5 = call %struct.buffer* @XBUFFER(i64 %5)
  %name_6 = getelementptr inbounds %struct.buffer, %struct.buffer* %call5, i32 0, i32 1
  %6 = load i64, i64* %name_6, align 8
  %call7 = call zeroext i8 @SREF(i64 %6, i64 0)
  %conv = zext i8 %call7 to i32
  %cmp8 = icmp eq i32 %conv, 32
  %lnot = xor i1 %cmp8, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.1, %land.lhs.true, %entry
  %7 = phi i1 [ false, %land.lhs.true.1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %7
}

declare i64 @Fget_buffer_window(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_buffer_major_mode(i64 %buffer) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %function = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %0)
  %1 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %1)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 1
  %2 = load i64, i64* %name_, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.18, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %buffer.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  %name_3 = getelementptr inbounds %struct.buffer, %struct.buffer* %call2, i32 0, i32 1
  %4 = load i64, i64* %name_3, align 8
  %call4 = call i8* @SSDATA(i64 %4)
  %call5 = call i32 @strcmp(i8* %call4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0)) #9
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %call8 = call i64 @intern(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i32 0, i32 0))
  %call9 = call i64 @find_symbol_value(i64 %call8)
  store i64 %call9, i64* %function, align 8
  br label %if.end.19

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 10), align 8
  store i64 %5, i64* %function, align 8
  %6 = load i64, i64* %function, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %6, %call10
  br i1 %cmp11, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.else
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %major_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 10
  %8 = load i64, i64* %major_mode_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 671)
  %call13 = call i64 @Fget(i64 %8, i64 %call12)
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %call13, %call14
  br i1 %cmp15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %land.lhs.true
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %major_mode_17 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 10
  %10 = load i64, i64* %major_mode_17, align 8
  store i64 %10, i64* %function, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %land.lhs.true, %if.else
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.7
  %11 = load i64, i64* %function, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %11, %call20
  br i1 %cmp21, label %if.then.24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.19
  %12 = load i64, i64* %function, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 479)
  %cmp23 = icmp eq i64 %12, %call22
  br i1 %cmp23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %lor.lhs.false, %if.end.19
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call25, i64* %retval
  br label %return

if.end.26:                                        ; preds = %lor.lhs.false
  %call27 = call i64 @SPECPDL_INDEX()
  store i64 %call27, i64* %count, align 8
  %call28 = call i64 @save_excursion_save()
  call void @record_unwind_protect(void (i64)* @save_excursion_restore, i64 %call28)
  %13 = load i64, i64* %buffer.addr, align 8
  %call29 = call i64 @Fset_buffer(i64 %13)
  %14 = load i64, i64* %function, align 8
  %call30 = call i64 @call0(i64 %14)
  %15 = load i64, i64* %count, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %call32 = call i64 @unbind_to(i64 %15, i64 %call31)
  store i64 %call32, i64* %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.then.24
  %16 = load i64, i64* %retval
  ret i64 %16
}

; Function Attrs: nounwind uwtable
define i64 @other_buffer_safely(i64 %buffer) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %buf = alloca i64, align 8
  %scratch = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  %sub2 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  store i64 %8, i64* %buf, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i64, i64* %buf, align 8
  %11 = load i64, i64* %buffer.addr, align 8
  %call = call zeroext i1 @candidate_buffer(i64 %10, i64 %11)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %12 = load i64, i64* %buf, align 8
  store i64 %12, i64* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i64, i64* %tail, align 8
  %sub3 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub3 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr5 = bitcast %union.anon.11* %u4 to i64*
  %16 = load i64, i64* %cdr5, align 8
  store i64 %16, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 9, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8** %data, align 8
  %s6 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %17 = bitcast %struct.Lisp_String* %s6 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %17, i32 4)
  store i64 %call7, i64* %scratch, align 8
  %18 = load i64, i64* %scratch, align 8
  %call8 = call i64 @Fget_buffer(i64 %18)
  store i64 %call8, i64* %buf, align 8
  %19 = load i64, i64* %buf, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %19, %call9
  br i1 %cmp10, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %for.end
  %20 = load i64, i64* %scratch, align 8
  %call13 = call i64 @Fget_buffer_create(i64 %20)
  store i64 %call13, i64* %buf, align 8
  %21 = load i64, i64* %buf, align 8
  %call14 = call i64 @Fset_buffer_major_mode(i64 %21)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.12, %for.end
  %22 = load i64, i64* %buf, align 8
  store i64 %22, i64* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then
  %23 = load i64, i64* %retval
  ret i64 %23
}

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_enable_undo(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %real_buffer = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %2 = bitcast %struct.buffer* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %real_buffer, align 8
  br label %if.end.6

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %buffer.addr, align 8
  %call2 = call i64 @Fget_buffer(i64 %3)
  store i64 %call2, i64* %real_buffer, align 8
  %4 = load i64, i64* %real_buffer, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %4, %call3
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %5 = load i64, i64* %buffer.addr, align 8
  call void @nsberror(i64 %5) #8
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %6 = load i64, i64* %real_buffer, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %6)
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call7, i32 0, i32 98
  %7 = load i64, i64* %undo_list_, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp9 = icmp eq i64 %7, %call8
  br i1 %cmp9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %if.end.6
  %8 = load i64, i64* %real_buffer, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %8)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_undo_list(%struct.buffer* %call11, i64 %call12)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.10, %if.end.6
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call14
}

; Function Attrs: nounwind uwtable
define void @compact_buffer(%struct.buffer* %buffer) #3 {
entry:
  %buffer.addr = alloca %struct.buffer*, align 8
  %size = alloca i64, align 8
  store %struct.buffer* %buffer, %struct.buffer** %buffer.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 1
  %1 = load i64, i64* %name_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.end.2, label %if.then

if.then:                                          ; preds = %do.body
  %2 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 81
  %3 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %3, null
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  br label %if.end

if.else:                                          ; preds = %if.then
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  br label %if.end.2

if.end.2:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.2
  %4 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %name_3 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 1
  %5 = load i64, i64* %name_3, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %5, %call4
  br i1 %cmp5, label %if.end.32, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.end
  %6 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %base_buffer6 = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 81
  %7 = load %struct.buffer*, %struct.buffer** %base_buffer6, align 8
  %cmp7 = icmp eq %struct.buffer* %7, null
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.32

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %8 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 73
  %9 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %compact = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %9, i32 0, i32 10
  %10 = load i64, i64* %compact, align 8
  %11 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text9 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text9, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 6
  %13 = load i64, i64* %modiff, align 8
  %cmp10 = icmp ne i64 %10, %13
  br i1 %cmp10, label %if.then.11, label %if.end.32

if.then.11:                                       ; preds = %land.lhs.true.8
  %14 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 98
  %15 = load i64, i64* %undo_list_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp13 = icmp eq i64 %15, %call12
  br i1 %cmp13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.then.11
  %16 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  call void @truncate_undo_list(%struct.buffer* %16)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.then.11
  %17 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text16 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 73
  %18 = load %struct.buffer_text*, %struct.buffer_text** %text16, align 8
  %inhibit_shrinking = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %18, i32 0, i32 17
  %bf.load = load i8, i8* %inhibit_shrinking, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.27, label %if.then.17

if.then.17:                                       ; preds = %if.end.15
  %19 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 73
  %20 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %20, i32 0, i32 4
  %21 = load i64, i64* %z_byte, align 8
  %div = sdiv i64 %21, 10
  %call19 = call i64 @clip_to_bounds(i64 20, i64 %div, i64 2000)
  store i64 %call19, i64* %size, align 8
  %22 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text20 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 73
  %23 = load %struct.buffer_text*, %struct.buffer_text** %text20, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %23, i32 0, i32 5
  %24 = load i64, i64* %gap_size, align 8
  %25 = load i64, i64* %size, align 8
  %cmp21 = icmp sgt i64 %24, %25
  br i1 %cmp21, label %if.then.22, label %if.end.26

if.then.22:                                       ; preds = %if.then.17
  %26 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %27 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text23 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 73
  %28 = load %struct.buffer_text*, %struct.buffer_text** %text23, align 8
  %gap_size24 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %28, i32 0, i32 5
  %29 = load i64, i64* %gap_size24, align 8
  %30 = load i64, i64* %size, align 8
  %sub = sub nsw i64 %29, %30
  %sub25 = sub nsw i64 0, %sub
  call void @make_gap_1(%struct.buffer* %26, i64 %sub25)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.22, %if.then.17
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.15
  %31 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text28 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 73
  %32 = load %struct.buffer_text*, %struct.buffer_text** %text28, align 8
  %modiff29 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %32, i32 0, i32 6
  %33 = load i64, i64* %modiff29, align 8
  %34 = load %struct.buffer*, %struct.buffer** %buffer.addr, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 73
  %35 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %compact31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %35, i32 0, i32 10
  store i64 %33, i64* %compact31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.27, %land.lhs.true.8, %land.lhs.true, %do.end
  ret void
}

declare void @truncate_undo_list(%struct.buffer*) #1

declare i64 @clip_to_bounds(i64, i64, i64) #1

declare void @make_gap_1(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fkill_buffer(i64 %buffer_or_name) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer_or_name.addr = alloca i64, align 8
  %buffer = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %tem = alloca i64, align 8
  %m = alloca %struct.Lisp_Marker*, align 8
  %count = alloca i64, align 8
  %.compoundliteral = alloca [1 x i64], align 8
  %format = alloca i64, align 8
  %.compoundliteral32 = alloca %union.Aligned_String, align 8
  %.compoundliteral35 = alloca [2 x i64], align 8
  %other = alloca %struct.buffer*, align 8
  %buf = alloca i64, align 8
  %delete = alloca i64, align 8
  %i = alloca %struct.interval*, align 8
  %mp = alloca %struct.Lisp_Marker**, align 8
  %owner = alloca i64, align 8
  %next185 = alloca %struct.Lisp_Marker*, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i64 @Fcurrent_buffer()
  store i64 %call1, i64* %buffer, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %buffer_or_name.addr, align 8
  %call2 = call i64 @Fget_buffer(i64 %1)
  store i64 %call2, i64* %buffer, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i64, i64* %buffer, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %2, %call3
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %3 = load i64, i64* %buffer_or_name.addr, align 8
  call void @nsberror(i64 %3) #8
  unreachable

if.end.6:                                         ; preds = %if.end
  %4 = load i64, i64* %buffer, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %4)
  store %struct.buffer* %call7, %struct.buffer** %b, align 8
  %5 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 1
  %6 = load i64, i64* %name_, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %6, %call8
  br i1 %cmp9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %if.end.6
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call11, i64* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.6
  %call13 = call i64 @SPECPDL_INDEX()
  store i64 %call13, i64* %count, align 8
  %call14 = call i64 @save_excursion_save()
  call void @record_unwind_protect(void (i64)* @save_excursion_restore, i64 %call14)
  %7 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @set_buffer_internal(%struct.buffer* %7)
  %arrayinit.begin = getelementptr inbounds [1 x i64], [1 x i64]* %.compoundliteral, i64 0, i64 0
  %call15 = call i64 @builtin_lisp_symbol(i32 593)
  store i64 %call15, i64* %arrayinit.begin
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %.compoundliteral, i32 0, i32 0
  %call16 = call i64 @Frun_hook_with_args_until_failure(i64 1, i64* %arraydecay)
  store i64 %call16, i64* %tem, align 8
  %8 = load i64, i64* %tem, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp18 = icmp eq i64 %8, %call17
  br i1 %cmp18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %if.end.12
  %9 = load i64, i64* %count, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %call21 = call i64 @unbind_to(i64 %9, i64 %call20)
  store i64 %call21, i64* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.12
  %10 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 86), align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %10, %call23
  br i1 %cmp24, label %land.lhs.true, label %if.end.47

land.lhs.true:                                    ; preds = %if.end.22
  %11 = load i8, i8* @noninteractive, align 1
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end.47, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %12 = load %struct.buffer*, %struct.buffer** %b, align 8
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 2
  %13 = load i64, i64* %filename_, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %13, %call26
  br i1 %cmp27, label %if.end.47, label %land.lhs.true.28

land.lhs.true.28:                                 ; preds = %land.lhs.true.25
  %14 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 6
  %16 = load i64, i64* %modiff, align 8
  %17 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text29 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 73
  %18 = load %struct.buffer_text*, %struct.buffer_text** %text29, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %18, i32 0, i32 8
  %19 = load i64, i64* %save_modiff, align 8
  %cmp30 = icmp sgt i64 %16, %19
  br i1 %cmp30, label %if.then.31, label %if.end.47

if.then.31:                                       ; preds = %land.lhs.true.28
  %s = bitcast %union.Aligned_String* %.compoundliteral32 to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 33, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i32 0, i32 0), i8** %data, align 8
  %s33 = bitcast %union.Aligned_String* %.compoundliteral32 to %struct.Lisp_String*
  %20 = bitcast %struct.Lisp_String* %s33 to i8*
  %call34 = call i64 @make_lisp_ptr(i8* %20, i32 4)
  store i64 %call34, i64* %format, align 8
  %arrayinit.begin36 = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral35, i64 0, i64 0
  %21 = load i64, i64* %format, align 8
  store i64 %21, i64* %arrayinit.begin36
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin36, i64 1
  %22 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_37 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 1
  %23 = load i64, i64* %name_37, align 8
  store i64 %23, i64* %arrayinit.element
  %arraydecay38 = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral35, i32 0, i32 0
  %call39 = call i64 @Fformat(i64 2, i64* %arraydecay38)
  %call40 = call i64 @do_yes_or_no_p(i64 %call39)
  store i64 %call40, i64* %tem, align 8
  %24 = load i64, i64* %tem, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp42 = icmp eq i64 %24, %call41
  br i1 %cmp42, label %if.then.43, label %if.end.46

if.then.43:                                       ; preds = %if.then.31
  %25 = load i64, i64* %count, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %call45 = call i64 @unbind_to(i64 %25, i64 %call44)
  store i64 %call45, i64* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.31
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %land.lhs.true.28, %land.lhs.true.25, %land.lhs.true, %if.end.22
  %26 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_48 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 1
  %27 = load i64, i64* %name_48, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %27, %call49
  br i1 %cmp50, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %if.end.47
  %28 = load i64, i64* %count, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 901)
  %call53 = call i64 @unbind_to(i64 %28, i64 %call52)
  store i64 %call53, i64* %retval
  br label %return

if.end.54:                                        ; preds = %if.end.47
  %call55 = call i64 @builtin_lisp_symbol(i32 592)
  call void @run_hook(i64 %call55)
  %29 = load i64, i64* %count, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  %call57 = call i64 @unbind_to(i64 %29, i64 %call56)
  %30 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_58 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 1
  %31 = load i64, i64* %name_58, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp60 = icmp eq i64 %31, %call59
  br i1 %cmp60, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %if.end.54
  %call62 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call62, i64* %retval
  br label %return

if.end.63:                                        ; preds = %if.end.54
  %32 = load i64, i64* %buffer, align 8
  %33 = load i64, i64* @minibuf_window, align 8
  %call64 = call %struct.window* @XWINDOW(i64 %33)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call64, i32 0, i32 10
  %34 = load i64, i64* %contents, align 8
  %cmp65 = icmp eq i64 %32, %34
  br i1 %cmp65, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %if.end.63
  %call67 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call67, i64* %retval
  br label %return

if.end.68:                                        ; preds = %if.end.63
  %35 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 81
  %36 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool69 = icmp ne %struct.buffer* %36, null
  br i1 %tobool69, label %if.end.86, label %land.lhs.true.70

land.lhs.true.70:                                 ; preds = %if.end.68
  %37 = load %struct.buffer*, %struct.buffer** %b, align 8
  %indirections = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 82
  %38 = load i32, i32* %indirections, align 4
  %cmp71 = icmp sgt i32 %38, 0
  br i1 %cmp71, label %if.then.72, label %if.end.86

if.then.72:                                       ; preds = %land.lhs.true.70
  %39 = load %struct.buffer*, %struct.buffer** @all_buffers, align 8
  store %struct.buffer* %39, %struct.buffer** %other, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.72
  %40 = load %struct.buffer*, %struct.buffer** %other, align 8
  %tobool73 = icmp ne %struct.buffer* %40, null
  br i1 %tobool73, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load %struct.buffer*, %struct.buffer** %other, align 8
  %base_buffer74 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 81
  %42 = load %struct.buffer*, %struct.buffer** %base_buffer74, align 8
  %43 = load %struct.buffer*, %struct.buffer** %b, align 8
  %cmp75 = icmp eq %struct.buffer* %42, %43
  br i1 %cmp75, label %if.then.76, label %if.end.79

if.then.76:                                       ; preds = %for.body
  %44 = load %struct.buffer*, %struct.buffer** %other, align 8
  %45 = bitcast %struct.buffer* %44 to i8*
  %call77 = call i64 @make_lisp_ptr(i8* %45, i32 5)
  store i64 %call77, i64* %buf, align 8
  %46 = load i64, i64* %buf, align 8
  %call78 = call i64 @Fkill_buffer(i64 %46)
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.76, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.79
  %47 = load %struct.buffer*, %struct.buffer** %other, align 8
  %next = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 74
  %48 = load %struct.buffer*, %struct.buffer** %next, align 8
  store %struct.buffer* %48, %struct.buffer** %other, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %49 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_80 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 1
  %50 = load i64, i64* %name_80, align 8
  %call81 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp82 = icmp eq i64 %50, %call81
  br i1 %cmp82, label %if.then.83, label %if.end.85

if.then.83:                                       ; preds = %for.end
  %call84 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call84, i64* %retval
  br label %return

if.end.85:                                        ; preds = %for.end
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %land.lhs.true.70, %if.end.68
  %51 = load i64, i64* %buffer, align 8
  call void @replace_buffer_in_windows(i64 %51)
  %52 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_87 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 1
  %53 = load i64, i64* %name_87, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp89 = icmp eq i64 %53, %call88
  br i1 %cmp89, label %if.then.90, label %if.end.92

if.then.90:                                       ; preds = %if.end.86
  %call91 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call91, i64* %retval
  br label %return

if.end.92:                                        ; preds = %if.end.86
  %54 = load %struct.buffer*, %struct.buffer** %b, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp93 = icmp eq %struct.buffer* %54, %55
  br i1 %cmp93, label %if.then.94, label %if.end.103

if.then.94:                                       ; preds = %if.end.92
  %56 = load i64, i64* %buffer, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %call96 = call i64 @builtin_lisp_symbol(i32 0)
  %call97 = call i64 @Fother_buffer(i64 %56, i64 %call95, i64 %call96)
  store i64 %call97, i64* %tem, align 8
  %57 = load i64, i64* %tem, align 8
  %call98 = call i64 @Fset_buffer(i64 %57)
  %58 = load %struct.buffer*, %struct.buffer** %b, align 8
  %59 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp99 = icmp eq %struct.buffer* %58, %59
  br i1 %cmp99, label %if.then.100, label %if.end.102

if.then.100:                                      ; preds = %if.then.94
  %call101 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call101, i64* %retval
  br label %return

if.end.102:                                       ; preds = %if.then.94
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.92
  %60 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %61 = bitcast %struct.buffer* %60 to i8*
  %call104 = call i64 @make_lisp_ptr(i8* %61, i32 5)
  store i64 %call104, i64* %tem, align 8
  %62 = load i64, i64* %tem, align 8
  %63 = load i64, i64* @minibuf_window, align 8
  %call105 = call %struct.window* @XWINDOW(i64 %63)
  %contents106 = getelementptr inbounds %struct.window, %struct.window* %call105, i32 0, i32 10
  %64 = load i64, i64* %contents106, align 8
  %cmp107 = icmp eq i64 %62, %64
  br i1 %cmp107, label %land.lhs.true.108, label %if.end.115

land.lhs.true.108:                                ; preds = %if.end.103
  %65 = load i64, i64* %buffer, align 8
  %66 = load i64, i64* %buffer, align 8
  %call109 = call i64 @builtin_lisp_symbol(i32 0)
  %call110 = call i64 @builtin_lisp_symbol(i32 0)
  %call111 = call i64 @Fother_buffer(i64 %66, i64 %call109, i64 %call110)
  %cmp112 = icmp eq i64 %65, %call111
  br i1 %cmp112, label %if.then.113, label %if.end.115

if.then.113:                                      ; preds = %land.lhs.true.108
  %call114 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call114, i64* %retval
  br label %return

if.end.115:                                       ; preds = %land.lhs.true.108, %if.end.103
  %67 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @unlock_buffer(%struct.buffer* %67)
  %68 = load i64, i64* %buffer, align 8
  call void @kill_buffer_processes(i64 %68)
  %69 = load i64, i64* %buffer, align 8
  call void @kill_buffer_xwidgets(i64 %69)
  %70 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_116 = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 1
  %71 = load i64, i64* %name_116, align 8
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp118 = icmp eq i64 %71, %call117
  br i1 %cmp118, label %if.then.119, label %if.end.121

if.then.119:                                      ; preds = %if.end.115
  %call120 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call120, i64* %retval
  br label %return

if.end.121:                                       ; preds = %if.end.115
  %72 = load i64, i64* %buffer, align 8
  call void @frames_discard_buffer(i64 %72)
  %73 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @clear_charpos_cache(%struct.buffer* %73)
  %74 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  store i64 %74, i64* %tem, align 8
  %call122 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call122, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %75 = load i64, i64* %buffer, align 8
  %76 = load i64, i64* @Vbuffer_alist, align 8
  %call123 = call i64 @Frassq(i64 %75, i64 %76)
  %77 = load i64, i64* @Vbuffer_alist, align 8
  %call124 = call i64 @Fdelq(i64 %call123, i64 %77)
  store i64 %call124, i64* @Vbuffer_alist, align 8
  %78 = load i64, i64* %buffer, align 8
  call void @replace_buffer_in_windows_safely(i64 %78)
  %79 = load i64, i64* %tem, align 8
  store i64 %79, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %80 = load %struct.buffer*, %struct.buffer** %b, align 8
  %auto_save_file_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %80, i32 0, i32 6
  %81 = load i64, i64* %auto_save_file_name_, align 8
  %call125 = call zeroext i1 @STRINGP(i64 %81)
  br i1 %call125, label %land.lhs.true.126, label %if.end.153

land.lhs.true.126:                                ; preds = %if.end.121
  %82 = load %struct.buffer*, %struct.buffer** %b, align 8
  %auto_save_modified = getelementptr inbounds %struct.buffer, %struct.buffer* %82, i32 0, i32 87
  %83 = load i64, i64* %auto_save_modified, align 8
  %cmp127 = icmp ne i64 %83, 0
  br i1 %cmp127, label %land.lhs.true.128, label %if.end.153

land.lhs.true.128:                                ; preds = %land.lhs.true.126
  %84 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text129 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text129, align 8
  %save_modiff130 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 8
  %86 = load i64, i64* %save_modiff130, align 8
  %87 = load %struct.buffer*, %struct.buffer** %b, align 8
  %auto_save_modified131 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 87
  %88 = load i64, i64* %auto_save_modified131, align 8
  %cmp132 = icmp slt i64 %86, %88
  br i1 %cmp132, label %land.lhs.true.133, label %if.end.153

land.lhs.true.133:                                ; preds = %land.lhs.true.128
  %89 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text134 = getelementptr inbounds %struct.buffer, %struct.buffer* %89, i32 0, i32 73
  %90 = load %struct.buffer_text*, %struct.buffer_text** %text134, align 8
  %save_modiff135 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %90, i32 0, i32 8
  %91 = load i64, i64* %save_modiff135, align 8
  %92 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text136 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 73
  %93 = load %struct.buffer_text*, %struct.buffer_text** %text136, align 8
  %modiff137 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %93, i32 0, i32 6
  %94 = load i64, i64* %modiff137, align 8
  %cmp138 = icmp slt i64 %91, %94
  br i1 %cmp138, label %land.lhs.true.139, label %if.end.153

land.lhs.true.139:                                ; preds = %land.lhs.true.133
  %call140 = call i64 @intern(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.16, i32 0, i32 0))
  %call141 = call i64 @Fsymbol_value(i64 %call140)
  %call142 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp143 = icmp eq i64 %call141, %call142
  br i1 %cmp143, label %if.then.144, label %if.end.153

if.then.144:                                      ; preds = %land.lhs.true.139
  %call145 = call i64 @intern(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i32 0, i32 0))
  %call146 = call i64 @Fsymbol_value(i64 %call145)
  store i64 %call146, i64* %delete, align 8
  %95 = load i64, i64* %delete, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp148 = icmp eq i64 %95, %call147
  br i1 %cmp148, label %if.end.152, label %if.then.149

if.then.149:                                      ; preds = %if.then.144
  %96 = load %struct.buffer*, %struct.buffer** %b, align 8
  %auto_save_file_name_150 = getelementptr inbounds %struct.buffer, %struct.buffer* %96, i32 0, i32 6
  %97 = load i64, i64* %auto_save_file_name_150, align 8
  %call151 = call zeroext i1 @internal_delete_file(i64 %97)
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.149, %if.then.144
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %land.lhs.true.139, %land.lhs.true.133, %land.lhs.true.128, %land.lhs.true.126, %if.end.121
  %98 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_154 = getelementptr inbounds %struct.buffer, %struct.buffer* %98, i32 0, i32 1
  %99 = load i64, i64* %name_154, align 8
  %call155 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp156 = icmp eq i64 %99, %call155
  br i1 %cmp156, label %if.then.157, label %if.end.159

if.then.157:                                      ; preds = %if.end.153
  %call158 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call158, i64* %retval
  br label %return

if.end.159:                                       ; preds = %if.end.153
  %100 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer160 = getelementptr inbounds %struct.buffer, %struct.buffer* %100, i32 0, i32 81
  %101 = load %struct.buffer*, %struct.buffer** %base_buffer160, align 8
  %tobool161 = icmp ne %struct.buffer* %101, null
  br i1 %tobool161, label %if.then.162, label %if.else.179

if.then.162:                                      ; preds = %if.end.159
  %102 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text163 = getelementptr inbounds %struct.buffer, %struct.buffer* %102, i32 0, i32 73
  %103 = load %struct.buffer_text*, %struct.buffer_text** %text163, align 8
  %markers = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %103, i32 0, i32 16
  store %struct.Lisp_Marker** %markers, %struct.Lisp_Marker*** %mp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.172, %if.then.162
  %104 = load %struct.Lisp_Marker**, %struct.Lisp_Marker*** %mp, align 8
  %105 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %104, align 8
  store %struct.Lisp_Marker* %105, %struct.Lisp_Marker** %m, align 8
  %tobool164 = icmp ne %struct.Lisp_Marker* %105, null
  br i1 %tobool164, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %106 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer165 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %106, i32 0, i32 1
  %107 = load %struct.buffer*, %struct.buffer** %buffer165, align 8
  %108 = load %struct.buffer*, %struct.buffer** %b, align 8
  %cmp166 = icmp eq %struct.buffer* %107, %108
  br i1 %cmp166, label %if.then.167, label %if.else.170

if.then.167:                                      ; preds = %while.body
  %109 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer168 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %109, i32 0, i32 1
  store %struct.buffer* null, %struct.buffer** %buffer168, align 8
  %110 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next169 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %110, i32 0, i32 2
  %111 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next169, align 8
  %112 = load %struct.Lisp_Marker**, %struct.Lisp_Marker*** %mp, align 8
  store %struct.Lisp_Marker* %111, %struct.Lisp_Marker** %112, align 8
  br label %if.end.172

if.else.170:                                      ; preds = %while.body
  %113 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next171 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %113, i32 0, i32 2
  store %struct.Lisp_Marker** %next171, %struct.Lisp_Marker*** %mp, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.else.170, %if.then.167
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %114 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call173 = call %struct.interval* @buffer_intervals(%struct.buffer* %114)
  store %struct.interval* %call173, %struct.interval** %i, align 8
  %115 = load %struct.interval*, %struct.interval** %i, align 8
  %tobool174 = icmp ne %struct.interval* %115, null
  br i1 %tobool174, label %if.then.175, label %if.end.178

if.then.175:                                      ; preds = %while.end
  %116 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer176 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 81
  %117 = load %struct.buffer*, %struct.buffer** %base_buffer176, align 8
  %118 = bitcast %struct.buffer* %117 to i8*
  %call177 = call i64 @make_lisp_ptr(i8* %118, i32 5)
  store i64 %call177, i64* %owner, align 8
  %119 = load %struct.interval*, %struct.interval** %i, align 8
  %120 = load i64, i64* %owner, align 8
  call void @set_interval_object(%struct.interval* %119, i64 %120)
  br label %if.end.178

if.end.178:                                       ; preds = %if.then.175, %while.end
  br label %if.end.192

if.else.179:                                      ; preds = %if.end.159
  %121 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text180 = getelementptr inbounds %struct.buffer, %struct.buffer* %121, i32 0, i32 73
  %122 = load %struct.buffer_text*, %struct.buffer_text** %text180, align 8
  %markers181 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %122, i32 0, i32 16
  %123 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers181, align 8
  store %struct.Lisp_Marker* %123, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.body.184, %if.else.179
  %124 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %tobool183 = icmp ne %struct.Lisp_Marker* %124, null
  br i1 %tobool183, label %for.body.184, label %for.end.189

for.body.184:                                     ; preds = %for.cond.182
  %125 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next186 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %125, i32 0, i32 2
  %126 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next186, align 8
  store %struct.Lisp_Marker* %126, %struct.Lisp_Marker** %next185, align 8
  %127 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer187 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %127, i32 0, i32 1
  store %struct.buffer* null, %struct.buffer** %buffer187, align 8
  %128 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next188 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %128, i32 0, i32 2
  store %struct.Lisp_Marker* null, %struct.Lisp_Marker** %next188, align 8
  %129 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next185, align 8
  store %struct.Lisp_Marker* %129, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.182

for.end.189:                                      ; preds = %for.cond.182
  %130 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text190 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 73
  %131 = load %struct.buffer_text*, %struct.buffer_text** %text190, align 8
  %markers191 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %131, i32 0, i32 16
  store %struct.Lisp_Marker* null, %struct.Lisp_Marker** %markers191, align 8
  %132 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @set_buffer_intervals(%struct.buffer* %132, %struct.interval* null)
  br label %if.end.192

if.end.192:                                       ; preds = %for.end.189, %if.end.178
  %133 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 95
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %overlays_before, align 8
  %134 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %134, i32 0, i32 96
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %overlays_after, align 8
  %135 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @swap_out_buffer_local_variables(%struct.buffer* %135)
  %136 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @reset_buffer_local_variables(%struct.buffer* %136, i1 zeroext true)
  %137 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call193 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_name(%struct.buffer* %137, i64 %call193)
  call void @block_input()
  %138 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer194 = getelementptr inbounds %struct.buffer, %struct.buffer* %138, i32 0, i32 81
  %139 = load %struct.buffer*, %struct.buffer** %base_buffer194, align 8
  %tobool195 = icmp ne %struct.buffer* %139, null
  br i1 %tobool195, label %if.then.196, label %if.else.199

if.then.196:                                      ; preds = %if.end.192
  %140 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer197 = getelementptr inbounds %struct.buffer, %struct.buffer* %140, i32 0, i32 81
  %141 = load %struct.buffer*, %struct.buffer** %base_buffer197, align 8
  %indirections198 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 82
  %142 = load i32, i32* %indirections198, align 4
  %dec = add nsw i32 %142, -1
  store i32 %dec, i32* %indirections198, align 4
  br label %if.end.200

if.else.199:                                      ; preds = %if.end.192
  %143 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @free_buffer_text(%struct.buffer* %143)
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.199, %if.then.196
  %144 = load %struct.buffer*, %struct.buffer** %b, align 8
  %newline_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 91
  %145 = load %struct.region_cache*, %struct.region_cache** %newline_cache, align 8
  %tobool201 = icmp ne %struct.region_cache* %145, null
  br i1 %tobool201, label %if.then.202, label %if.end.205

if.then.202:                                      ; preds = %if.end.200
  %146 = load %struct.buffer*, %struct.buffer** %b, align 8
  %newline_cache203 = getelementptr inbounds %struct.buffer, %struct.buffer* %146, i32 0, i32 91
  %147 = load %struct.region_cache*, %struct.region_cache** %newline_cache203, align 8
  call void @free_region_cache(%struct.region_cache* %147)
  %148 = load %struct.buffer*, %struct.buffer** %b, align 8
  %newline_cache204 = getelementptr inbounds %struct.buffer, %struct.buffer* %148, i32 0, i32 91
  store %struct.region_cache* null, %struct.region_cache** %newline_cache204, align 8
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.202, %if.end.200
  %149 = load %struct.buffer*, %struct.buffer** %b, align 8
  %width_run_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %149, i32 0, i32 92
  %150 = load %struct.region_cache*, %struct.region_cache** %width_run_cache, align 8
  %tobool206 = icmp ne %struct.region_cache* %150, null
  br i1 %tobool206, label %if.then.207, label %if.end.210

if.then.207:                                      ; preds = %if.end.205
  %151 = load %struct.buffer*, %struct.buffer** %b, align 8
  %width_run_cache208 = getelementptr inbounds %struct.buffer, %struct.buffer* %151, i32 0, i32 92
  %152 = load %struct.region_cache*, %struct.region_cache** %width_run_cache208, align 8
  call void @free_region_cache(%struct.region_cache* %152)
  %153 = load %struct.buffer*, %struct.buffer** %b, align 8
  %width_run_cache209 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 92
  store %struct.region_cache* null, %struct.region_cache** %width_run_cache209, align 8
  br label %if.end.210

if.end.210:                                       ; preds = %if.then.207, %if.end.205
  %154 = load %struct.buffer*, %struct.buffer** %b, align 8
  %bidi_paragraph_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %154, i32 0, i32 93
  %155 = load %struct.region_cache*, %struct.region_cache** %bidi_paragraph_cache, align 8
  %tobool211 = icmp ne %struct.region_cache* %155, null
  br i1 %tobool211, label %if.then.212, label %if.end.215

if.then.212:                                      ; preds = %if.end.210
  %156 = load %struct.buffer*, %struct.buffer** %b, align 8
  %bidi_paragraph_cache213 = getelementptr inbounds %struct.buffer, %struct.buffer* %156, i32 0, i32 93
  %157 = load %struct.region_cache*, %struct.region_cache** %bidi_paragraph_cache213, align 8
  call void @free_region_cache(%struct.region_cache* %157)
  %158 = load %struct.buffer*, %struct.buffer** %b, align 8
  %bidi_paragraph_cache214 = getelementptr inbounds %struct.buffer, %struct.buffer* %158, i32 0, i32 93
  store %struct.region_cache* null, %struct.region_cache** %bidi_paragraph_cache214, align 8
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.212, %if.end.210
  %159 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call216 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_width_table(%struct.buffer* %159, i64 %call216)
  call void @unblock_input()
  %160 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call217 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_undo_list(%struct.buffer* %160, i64 %call217)
  %161 = load i64, i64* @Vrun_hooks, align 8
  %call218 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp219 = icmp eq i64 %161, %call218
  br i1 %cmp219, label %if.end.223, label %if.then.220

if.then.220:                                      ; preds = %if.end.215
  %162 = load i64, i64* @Vrun_hooks, align 8
  %call221 = call i64 @builtin_lisp_symbol(i32 223)
  %call222 = call i64 @call1(i64 %162, i64 %call221)
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.220, %if.end.215
  %call224 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call224, i64* %retval
  br label %return

return:                                           ; preds = %if.end.223, %if.then.157, %if.then.119, %if.then.113, %if.then.100, %if.then.90, %if.then.83, %if.then.66, %if.then.61, %if.then.51, %if.then.43, %if.then.19, %if.then.10
  %163 = load i64, i64* %retval
  ret i64 %163
}

; Function Attrs: nounwind uwtable
define i64 @Fcurrent_buffer() #3 {
entry:
  %buf = alloca i64, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %1 = bitcast %struct.buffer* %0 to i8*
  %call = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call, i64* %buf, align 8
  %2 = load i64, i64* %buf, align 8
  ret i64 %2
}

declare i64 @SPECPDL_INDEX() #1

declare void @record_unwind_protect(void (i64)*, i64) #1

declare void @save_excursion_restore(i64) #1

declare i64 @save_excursion_save() #1

declare void @set_buffer_internal(%struct.buffer*) #1

declare i64 @Frun_hook_with_args_until_failure(i64, i64*) #1

declare i64 @unbind_to(i64, i64) #1

declare i64 @do_yes_or_no_p(i64) #1

declare i64 @Fformat(i64, i64*) #1

declare void @run_hook(i64) #1

declare %struct.window* @XWINDOW(i64) #1

declare void @replace_buffer_in_windows(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_buffer(i64 %buffer_or_name) #3 {
entry:
  %buffer_or_name.addr = alloca i64, align 8
  %buffer = alloca i64, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call i64 @Fget_buffer(i64 %0)
  store i64 %call, i64* %buffer, align 8
  %1 = load i64, i64* %buffer, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %buffer_or_name.addr, align 8
  call void @nsberror(i64 %2) #8
  unreachable

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %buffer, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call2, i32 0, i32 1
  %4 = load i64, i64* %name_, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %4, %call3
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.20, i32 0, i32 0)) #8
  unreachable

if.end.6:                                         ; preds = %if.end
  %5 = load i64, i64* %buffer, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %5)
  call void @set_buffer_internal(%struct.buffer* %call7)
  %6 = load i64, i64* %buffer, align 8
  ret i64 %6
}

declare void @unlock_buffer(%struct.buffer*) #1

declare void @kill_buffer_processes(i64) #1

declare void @kill_buffer_xwidgets(i64) #1

declare void @frames_discard_buffer(i64) #1

declare void @clear_charpos_cache(%struct.buffer*) #1

declare void @replace_buffer_in_windows_safely(i64) #1

declare i64 @Fsymbol_value(i64) #1

declare zeroext i1 @internal_delete_file(i64) #1

declare %struct.interval* @buffer_intervals(%struct.buffer*) #1

declare void @set_interval_object(%struct.interval*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @swap_out_buffer_local_variables(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %oalist = alloca i64, align 8
  %alist = alloca i64, align 8
  %buffer = alloca i64, align 8
  %sym = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %1 = bitcast %struct.buffer* %0 to i8*
  %call = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call, i64* %buffer, align 8
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %local_var_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 9
  %3 = load i64, i64* %local_var_alist_, align 8
  store i64 %3, i64* %oalist, align 8
  %4 = load i64, i64* %oalist, align 8
  store i64 %4, i64* %alist, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %alist, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %alist, align 8
  %sub = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  %sub2 = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub2 to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %car3 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 0
  %12 = load i64, i64* %car3, align 8
  store i64 %12, i64* %sym, align 8
  %13 = load i64, i64* %sym, align 8
  %sub4 = sub nsw i64 %13, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub4
  %14 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  %call5 = call %struct.Lisp_Buffer_Local_Value* @SYMBOL_BLV(%struct.Lisp_Symbol* %14)
  %where = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %call5, i32 0, i32 2
  %15 = load i64, i64* %where, align 8
  %16 = load i64, i64* %buffer, align 8
  %cmp6 = icmp eq i64 %15, %16
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %17 = load i64, i64* %sym, align 8
  %sub8 = sub nsw i64 %17, 0
  %add.ptr9 = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub8
  %18 = bitcast i8* %add.ptr9 to %struct.Lisp_Symbol*
  call void @swap_in_global_binding(%struct.Lisp_Symbol* %18)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i64, i64* %alist, align 8
  %sub10 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub10 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %22 = load i64, i64* %cdr, align 8
  store i64 %22, i64* %alist, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @free_buffer_text(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  call void @block_input()
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 73
  %1 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1, i32 0, i32 0
  %2 = load i8*, i8** %beg, align 8
  call void @xfree(i8* %2)
  %3 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 73
  %4 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %beg2 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %4, i32 0, i32 0
  store i8* null, i8** %beg2, align 8
  call void @unblock_input()
  ret void
}

declare void @free_region_cache(%struct.region_cache*) #1

; Function Attrs: nounwind uwtable
define void @record_buffer(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %aelt = alloca i64, align 8
  %aelt_cons = alloca i64, align 8
  %tem = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %0, 5
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.frame*
  store %struct.frame* %2, %struct.frame** %f, align 8
  %3 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %3)
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  store i64 %4, i64* %tem, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %5 = load i64, i64* %buffer.addr, align 8
  %6 = load i64, i64* @Vbuffer_alist, align 8
  %call1 = call i64 @Frassq(i64 %5, i64 %6)
  store i64 %call1, i64* %aelt, align 8
  %7 = load i64, i64* %aelt, align 8
  %8 = load i64, i64* @Vbuffer_alist, align 8
  %call2 = call i64 @Fmemq(i64 %7, i64 %8)
  store i64 %call2, i64* %aelt_cons, align 8
  %9 = load i64, i64* %aelt, align 8
  %10 = load i64, i64* @Vbuffer_alist, align 8
  %call3 = call i64 @Fdelq(i64 %9, i64 %10)
  store i64 %call3, i64* @Vbuffer_alist, align 8
  %11 = load i64, i64* %aelt_cons, align 8
  %12 = load i64, i64* @Vbuffer_alist, align 8
  call void @XSETCDR(i64 %11, i64 %12)
  %13 = load i64, i64* %aelt_cons, align 8
  store i64 %13, i64* @Vbuffer_alist, align 8
  %14 = load i64, i64* %tem, align 8
  store i64 %14, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %16 = load i64, i64* %buffer.addr, align 8
  %17 = load i64, i64* %buffer.addr, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 15
  %19 = load i64, i64* %buffer_list, align 8
  %call4 = call i64 @Fdelq(i64 %17, i64 %19)
  %call5 = call i64 @Fcons(i64 %16, i64 %call4)
  call void @fset_buffer_list(%struct.frame* %15, i64 %call5)
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %21 = load i64, i64* %buffer.addr, align 8
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %buried_buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 16
  %23 = load i64, i64* %buried_buffer_list, align 8
  %call6 = call i64 @Fdelq(i64 %21, i64 %23)
  call void @fset_buried_buffer_list(%struct.frame* %20, i64 %call6)
  %24 = load i64, i64* @Vrun_hooks, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %24, %call7
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %25 = load i64, i64* @Vrun_hooks, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 223)
  %call9 = call i64 @call1(i64 %25, i64 %call8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @Fmemq(i64, i64) #1

declare void @fset_buffer_list(%struct.frame*, i64) #1

declare void @fset_buried_buffer_list(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fbury_buffer_internal(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %aelt = alloca i64, align 8
  %aelt_cons = alloca i64, align 8
  %tem = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %0, 5
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.frame*
  store %struct.frame* %2, %struct.frame** %f, align 8
  %3 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %3)
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  store i64 %4, i64* %tem, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %5 = load i64, i64* %buffer.addr, align 8
  %6 = load i64, i64* @Vbuffer_alist, align 8
  %call1 = call i64 @Frassq(i64 %5, i64 %6)
  store i64 %call1, i64* %aelt, align 8
  %7 = load i64, i64* %aelt, align 8
  %8 = load i64, i64* @Vbuffer_alist, align 8
  %call2 = call i64 @Fmemq(i64 %7, i64 %8)
  store i64 %call2, i64* %aelt_cons, align 8
  %9 = load i64, i64* %aelt, align 8
  %10 = load i64, i64* @Vbuffer_alist, align 8
  %call3 = call i64 @Fdelq(i64 %9, i64 %10)
  store i64 %call3, i64* @Vbuffer_alist, align 8
  %11 = load i64, i64* %aelt_cons, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCDR(i64 %11, i64 %call4)
  %12 = load i64, i64* @Vbuffer_alist, align 8
  %13 = load i64, i64* %aelt_cons, align 8
  %call5 = call i64 @nconc2(i64 %12, i64 %13)
  store i64 %call5, i64* @Vbuffer_alist, align 8
  %14 = load i64, i64* %tem, align 8
  store i64 %14, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %16 = load i64, i64* %buffer.addr, align 8
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 15
  %18 = load i64, i64* %buffer_list, align 8
  %call6 = call i64 @Fdelq(i64 %16, i64 %18)
  call void @fset_buffer_list(%struct.frame* %15, i64 %call6)
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %20 = load i64, i64* %buffer.addr, align 8
  %21 = load i64, i64* %buffer.addr, align 8
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %buried_buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 16
  %23 = load i64, i64* %buried_buffer_list, align 8
  %call7 = call i64 @Fdelq(i64 %21, i64 %23)
  %call8 = call i64 @Fcons(i64 %20, i64 %call7)
  call void @fset_buried_buffer_list(%struct.frame* %19, i64 %call8)
  %24 = load i64, i64* @Vrun_hooks, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %24, %call9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %25 = load i64, i64* @Vrun_hooks, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 223)
  %call11 = call i64 @call1(i64 %25, i64 %call10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call12
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #5

declare i64 @find_symbol_value(i64) #1

declare i64 @Fget(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @record_buffer_markers(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %buffer = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 45
  %1 = load i64, i64* %pt_marker_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %3 = bitcast %struct.buffer* %2 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %3, i32 5)
  store i64 %call1, i64* %buffer, align 8
  %4 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_marker_2 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 45
  %5 = load i64, i64* %pt_marker_2, align 8
  %6 = load i64, i64* %buffer, align 8
  %7 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 75
  %8 = load i64, i64* %pt, align 8
  %9 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 76
  %10 = load i64, i64* %pt_byte, align 8
  %call3 = call i64 @set_marker_both(i64 %5, i64 %6, i64 %8, i64 %10)
  %11 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 46
  %12 = load i64, i64* %begv_marker_, align 8
  %13 = load i64, i64* %buffer, align 8
  %14 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 77
  %15 = load i64, i64* %begv, align 8
  %16 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 78
  %17 = load i64, i64* %begv_byte, align 8
  %call4 = call i64 @set_marker_both(i64 %12, i64 %13, i64 %15, i64 %17)
  %18 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 47
  %19 = load i64, i64* %zv_marker_, align 8
  %20 = load i64, i64* %buffer, align 8
  %21 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 79
  %22 = load i64, i64* %zv, align 8
  %23 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 80
  %24 = load i64, i64* %zv_byte, align 8
  %call5 = call i64 @set_marker_both(i64 %19, i64 %20, i64 %22, i64 %24)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fetch_buffer_markers(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %m = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 45
  %1 = load i64, i64* %pt_marker_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_marker_1 = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 45
  %3 = load i64, i64* %pt_marker_1, align 8
  store i64 %3, i64* %m, align 8
  %4 = load i64, i64* %m, align 8
  %call2 = call i64 @marker_position(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 75
  store i64 %call2, i64* %pt, align 8
  %6 = load i64, i64* %m, align 8
  %call3 = call i64 @marker_byte_position(i64 %6)
  %7 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 76
  store i64 %call3, i64* %pt_byte, align 8
  %8 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 46
  %9 = load i64, i64* %begv_marker_, align 8
  store i64 %9, i64* %m, align 8
  %10 = load i64, i64* %m, align 8
  %call4 = call i64 @marker_position(i64 %10)
  %11 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 77
  store i64 %call4, i64* %begv, align 8
  %12 = load i64, i64* %m, align 8
  %call5 = call i64 @marker_byte_position(i64 %12)
  %13 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 78
  store i64 %call5, i64* %begv_byte, align 8
  %14 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 47
  %15 = load i64, i64* %zv_marker_, align 8
  store i64 %15, i64* %m, align 8
  %16 = load i64, i64* %m, align 8
  %call6 = call i64 @marker_position(i64 %16)
  %17 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 79
  store i64 %call6, i64* %zv, align 8
  %18 = load i64, i64* %m, align 8
  %call7 = call i64 @marker_byte_position(i64 %18)
  %19 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 80
  store i64 %call7, i64* %zv_byte, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_buffer_temp(%struct.buffer* %b) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %old_buf = alloca %struct.buffer*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %cmp = icmp eq %struct.buffer* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %2, %struct.buffer** %old_buf, align 8
  %3 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  store %struct.buffer* %3, %struct.buffer** @current_buffer, align 8
  %4 = load %struct.buffer*, %struct.buffer** %old_buf, align 8
  call void @record_buffer_markers(%struct.buffer* %4)
  %5 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  call void @fetch_buffer_markers(%struct.buffer* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @restore_buffer(i64 %buffer_or_name) #3 {
entry:
  %buffer_or_name.addr = alloca i64, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call i64 @Fset_buffer(i64 %0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_buffer_if_live(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %0)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call, i32 0, i32 1
  %1 = load i64, i64* %name_, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %buffer.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %2)
  call void @set_buffer_internal(%struct.buffer* %call2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fbarf_if_buffer_read_only(i64 %position) #3 {
entry:
  %position.addr = alloca i64, align 8
  store i64 %position, i64* %position.addr, align 8
  %0 = load i64, i64* %position.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 75
  %2 = load i64, i64* %pt, align 8
  %add = add nsw i64 %2, 0
  %call1 = call i64 @make_natnum(i64 %add)
  store i64 %call1, i64* %position.addr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %position.addr, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp3 = icmp eq i32 %and2, 2
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call5 = call i64 @builtin_lisp_symbol(i32 559)
  %4 = load i64, i64* %position.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call5, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %read_only_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 7
  %8 = load i64, i64* %read_only_, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %8, %call6
  br i1 %cmp7, label %if.end.22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 139), align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %9, %call9
  br i1 %cmp10, label %land.lhs.true.12, label %if.end.22

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %10 = load i64, i64* %position.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 547)
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %call15 = call i64 @Fget_text_property(i64 %10, i64 %call13, i64 %call14)
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %call15, %call16
  br i1 %cmp17, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %land.lhs.true.12
  %call20 = call i64 @builtin_lisp_symbol(i32 228)
  %call21 = call i64 @Fcurrent_buffer()
  call void @xsignal1(i64 %call20, i64 %call21) #8
  unreachable

if.end.22:                                        ; preds = %land.lhs.true.12, %land.lhs.true, %if.end
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call23
}

declare i64 @Fget_text_property(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ferase_buffer() #3 {
entry:
  %call = call i64 @Fwiden()
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 73
  %1 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1, i32 0, i32 2
  %2 = load i64, i64* %z, align 8
  call void @del_range(i64 1, i64 %2)
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %last_window_start = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 90
  store i64 1, i64* %last_window_start, align 8
  %call1 = call i64 @make_natnum(i64 0)
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %save_length_ = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 5
  store i64 %call1, i64* %save_length_, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call2
}

declare i64 @Fwiden() #1

declare void @del_range(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @validate_region(i64* %b, i64* %e) #3 {
entry:
  %b.addr = alloca i64*, align 8
  %e.addr = alloca i64*, align 8
  %tem = alloca i64, align 8
  store i64* %b, i64** %b.addr, align 8
  store i64* %e, i64** %e.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64*, i64** %b.addr, align 8
  %1 = load i64, i64* %0, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %2 = load i64*, i64** %b.addr, align 8
  %3 = load i64, i64* %2, align 8
  %call = call i32 @XMISCTYPE(i64 %3)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64*, i64** %b.addr, align 8
  %5 = load i64, i64* %4, align 8
  %call4 = call i64 @marker_position(i64 %5)
  %call5 = call i64 @make_natnum(i64 %call4)
  %6 = load i64*, i64** %b.addr, align 8
  store i64 %call5, i64* %6, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %7 = load i64*, i64** %b.addr, align 8
  %8 = load i64, i64* %7, align 8
  %and6 = and i64 %8, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %9 = load i64*, i64** %b.addr, align 8
  %10 = load i64, i64* %9, align 8
  %11 = call i64 @wrong_type_argument(i64 %call11, i64 %10) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %12, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.12

do.body.12:                                       ; preds = %do.end
  %13 = load i64*, i64** %e.addr, align 8
  %14 = load i64, i64* %13, align 8
  %and13 = and i64 %14, 7
  %conv14 = trunc i64 %and13 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true.17, label %if.else.24

land.lhs.true.17:                                 ; preds = %do.body.12
  %15 = load i64*, i64** %e.addr, align 8
  %16 = load i64, i64* %15, align 8
  %call18 = call i32 @XMISCTYPE(i64 %16)
  %cmp19 = icmp eq i32 %call18, 24236
  br i1 %cmp19, label %if.then.21, label %if.else.24

if.then.21:                                       ; preds = %land.lhs.true.17
  %17 = load i64*, i64** %e.addr, align 8
  %18 = load i64, i64* %17, align 8
  %call22 = call i64 @marker_position(i64 %18)
  %call23 = call i64 @make_natnum(i64 %call22)
  %19 = load i64*, i64** %e.addr, align 8
  store i64 %call23, i64* %19, align 8
  br label %if.end.34

if.else.24:                                       ; preds = %land.lhs.true.17, %do.body.12
  %20 = load i64*, i64** %e.addr, align 8
  %21 = load i64, i64* %20, align 8
  %and25 = and i64 %21, 7
  %conv26 = trunc i64 %and25 to i32
  %and27 = and i32 %conv26, -5
  %cmp28 = icmp eq i32 %and27, 2
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %if.else.24
  br label %cond.end.33

cond.false.31:                                    ; preds = %if.else.24
  %call32 = call i64 @builtin_lisp_symbol(i32 558)
  %22 = load i64*, i64** %e.addr, align 8
  %23 = load i64, i64* %22, align 8
  %24 = call i64 @wrong_type_argument(i64 %call32, i64 %23) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.33

cond.end.33:                                      ; preds = %25, %cond.true.30
  br label %if.end.34

if.end.34:                                        ; preds = %cond.end.33, %if.then.21
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  %26 = load i64*, i64** %b.addr, align 8
  %27 = load i64, i64* %26, align 8
  %shr = ashr i64 %27, 2
  %28 = load i64*, i64** %e.addr, align 8
  %29 = load i64, i64* %28, align 8
  %shr36 = ashr i64 %29, 2
  %cmp37 = icmp sgt i64 %shr, %shr36
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %do.end.35
  %30 = load i64*, i64** %b.addr, align 8
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %tem, align 8
  %32 = load i64*, i64** %e.addr, align 8
  %33 = load i64, i64* %32, align 8
  %34 = load i64*, i64** %b.addr, align 8
  store i64 %33, i64* %34, align 8
  %35 = load i64, i64* %tem, align 8
  %36 = load i64*, i64** %e.addr, align 8
  store i64 %35, i64* %36, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %do.end.35
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 77
  %38 = load i64, i64* %begv, align 8
  %39 = load i64*, i64** %b.addr, align 8
  %40 = load i64, i64* %39, align 8
  %shr41 = ashr i64 %40, 2
  %cmp42 = icmp sle i64 %38, %shr41
  br i1 %cmp42, label %land.lhs.true.44, label %if.then.48

land.lhs.true.44:                                 ; preds = %if.end.40
  %41 = load i64*, i64** %e.addr, align 8
  %42 = load i64, i64* %41, align 8
  %shr45 = ashr i64 %42, 2
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 79
  %44 = load i64, i64* %zv, align 8
  %cmp46 = icmp sle i64 %shr45, %44
  br i1 %cmp46, label %if.end.50, label %if.then.48

if.then.48:                                       ; preds = %land.lhs.true.44, %if.end.40
  %call49 = call i64 @Fcurrent_buffer()
  %45 = load i64*, i64** %b.addr, align 8
  %46 = load i64, i64* %45, align 8
  %47 = load i64*, i64** %e.addr, align 8
  %48 = load i64, i64* %47, align 8
  call void @args_out_of_range_3(i64 %call49, i64 %46, i64 %48) #8
  unreachable

if.end.50:                                        ; preds = %land.lhs.true.44
  ret void
}

declare i32 @XMISCTYPE(i64) #1

declare i64 @marker_position(i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @Fbuffer_swap_text(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  %other_buffer = alloca %struct.buffer*, align 8
  %other = alloca %struct.buffer*, align 8
  %tmpown_text = alloca %struct.buffer_text, align 8
  %tmppt = alloca i64, align 8
  %tmppt_byte = alloca i64, align 8
  %tmpbegv = alloca i64, align 8
  %tmpbegv_byte = alloca i64, align 8
  %tmpzv = alloca i64, align 8
  %tmpzv_byte = alloca i64, align 8
  %tmpindirections = alloca i64, align 8
  %tmpnewline_cache = alloca %struct.region_cache*, align 8
  %tmpwidth_run_cache = alloca %struct.region_cache*, align 8
  %tmpbidi_paragraph_cache = alloca %struct.region_cache*, align 8
  %tmpoverlays_before = alloca %struct.Lisp_Overlay*, align 8
  %tmpoverlays_after = alloca %struct.Lisp_Overlay*, align 8
  %tmpoverlay_center = alloca i64, align 8
  %tmpundo_list = alloca i64, align 8
  %tmpmark = alloca i64, align 8
  %tmpenable_multibyte_characters = alloca i64, align 8
  %tmpbidi_display_reordering = alloca i64, align 8
  %tmpbidi_paragraph_direction = alloca i64, align 8
  %tmppt_marker = alloca i64, align 8
  %tmpbegv_marker = alloca i64, align 8
  %tmpzv_marker = alloca i64, align 8
  %m = alloca %struct.Lisp_Marker*, align 8
  %w = alloca i64, align 8
  %ws = alloca i64, align 8
  %buf1 = alloca i64, align 8
  %buf2 = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %0)
  %1 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %1)
  store %struct.buffer* %call, %struct.buffer** %other_buffer, align 8
  %2 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 1
  %3 = load i64, i64* %name_, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.21, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %4 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 81
  %5 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %5, null
  br i1 %tobool, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %base_buffer2 = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 81
  %7 = load %struct.buffer*, %struct.buffer** %base_buffer2, align 8
  %tobool3 = icmp ne %struct.buffer* %7, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.22, i32 0, i32 0)) #8
  unreachable

if.end.5:                                         ; preds = %lor.lhs.false
  %8 = load %struct.buffer*, %struct.buffer** @all_buffers, align 8
  store %struct.buffer* %8, %struct.buffer** %other, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.5
  %9 = load %struct.buffer*, %struct.buffer** %other, align 8
  %tobool6 = icmp ne %struct.buffer* %9, null
  br i1 %tobool6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.buffer*, %struct.buffer** %other, align 8
  %base_buffer7 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 81
  %11 = load %struct.buffer*, %struct.buffer** %base_buffer7, align 8
  %12 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %cmp8 = icmp eq %struct.buffer* %11, %12
  br i1 %cmp8, label %if.then.12, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %for.body
  %13 = load %struct.buffer*, %struct.buffer** %other, align 8
  %base_buffer10 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 81
  %14 = load %struct.buffer*, %struct.buffer** %base_buffer10, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp11 = icmp eq %struct.buffer* %14, %15
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %lor.lhs.false.9, %for.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.23, i32 0, i32 0)) #8
  unreachable

if.end.13:                                        ; preds = %lor.lhs.false.9
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %16 = load %struct.buffer*, %struct.buffer** %other, align 8
  %next = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 74
  %17 = load %struct.buffer*, %struct.buffer** %next, align 8
  store %struct.buffer* %17, %struct.buffer** %other, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  %18 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %own_text = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 72
  %19 = bitcast %struct.buffer_text* %tmpown_text to i8*
  %20 = bitcast %struct.buffer_text* %own_text to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 144, i32 8, i1 false)
  %21 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %own_text14 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 72
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %own_text15 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 72
  %23 = bitcast %struct.buffer_text* %own_text14 to i8*
  %24 = bitcast %struct.buffer_text* %own_text15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 144, i32 8, i1 false)
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %own_text16 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 72
  %26 = bitcast %struct.buffer_text* %own_text16 to i8*
  %27 = bitcast %struct.buffer_text* %tmpown_text to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 144, i32 8, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.17

do.body.17:                                       ; preds = %do.end
  %28 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 75
  %29 = load i64, i64* %pt, align 8
  store i64 %29, i64* %tmppt, align 8
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt18 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 75
  %31 = load i64, i64* %pt18, align 8
  %32 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %pt19 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 75
  store i64 %31, i64* %pt19, align 8
  %33 = load i64, i64* %tmppt, align 8
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt20 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 75
  store i64 %33, i64* %pt20, align 8
  br label %do.end.21

do.end.21:                                        ; preds = %do.body.17
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %35 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 76
  %36 = load i64, i64* %pt_byte, align 8
  store i64 %36, i64* %tmppt_byte, align 8
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte23 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 76
  %38 = load i64, i64* %pt_byte23, align 8
  %39 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %pt_byte24 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 76
  store i64 %38, i64* %pt_byte24, align 8
  %40 = load i64, i64* %tmppt_byte, align 8
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte25 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 76
  store i64 %40, i64* %pt_byte25, align 8
  br label %do.end.26

do.end.26:                                        ; preds = %do.body.22
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %42 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 77
  %43 = load i64, i64* %begv, align 8
  store i64 %43, i64* %tmpbegv, align 8
  %44 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv28 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 77
  %45 = load i64, i64* %begv28, align 8
  %46 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %begv29 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 77
  store i64 %45, i64* %begv29, align 8
  %47 = load i64, i64* %tmpbegv, align 8
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv30 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 77
  store i64 %47, i64* %begv30, align 8
  br label %do.end.31

do.end.31:                                        ; preds = %do.body.27
  br label %do.body.32

do.body.32:                                       ; preds = %do.end.31
  %49 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 78
  %50 = load i64, i64* %begv_byte, align 8
  store i64 %50, i64* %tmpbegv_byte, align 8
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte33 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 78
  %52 = load i64, i64* %begv_byte33, align 8
  %53 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %begv_byte34 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 78
  store i64 %52, i64* %begv_byte34, align 8
  %54 = load i64, i64* %tmpbegv_byte, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte35 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 78
  store i64 %54, i64* %begv_byte35, align 8
  br label %do.end.36

do.end.36:                                        ; preds = %do.body.32
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.36
  %56 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %56, i32 0, i32 79
  %57 = load i64, i64* %zv, align 8
  store i64 %57, i64* %tmpzv, align 8
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv38 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 79
  %59 = load i64, i64* %zv38, align 8
  %60 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %zv39 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 79
  store i64 %59, i64* %zv39, align 8
  %61 = load i64, i64* %tmpzv, align 8
  %62 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv40 = getelementptr inbounds %struct.buffer, %struct.buffer* %62, i32 0, i32 79
  store i64 %61, i64* %zv40, align 8
  br label %do.end.41

do.end.41:                                        ; preds = %do.body.37
  br label %do.body.42

do.body.42:                                       ; preds = %do.end.41
  %63 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 80
  %64 = load i64, i64* %zv_byte, align 8
  store i64 %64, i64* %tmpzv_byte, align 8
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte43 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 80
  %66 = load i64, i64* %zv_byte43, align 8
  %67 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %zv_byte44 = getelementptr inbounds %struct.buffer, %struct.buffer* %67, i32 0, i32 80
  store i64 %66, i64* %zv_byte44, align 8
  %68 = load i64, i64* %tmpzv_byte, align 8
  %69 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte45 = getelementptr inbounds %struct.buffer, %struct.buffer* %69, i32 0, i32 80
  store i64 %68, i64* %zv_byte45, align 8
  br label %do.end.46

do.end.46:                                        ; preds = %do.body.42
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  %70 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %indirections = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 82
  %71 = load i32, i32* %indirections, align 4
  %conv = sext i32 %71 to i64
  store i64 %conv, i64* %tmpindirections, align 8
  %72 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %indirections48 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 82
  %73 = load i32, i32* %indirections48, align 4
  %74 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %indirections49 = getelementptr inbounds %struct.buffer, %struct.buffer* %74, i32 0, i32 82
  store i32 %73, i32* %indirections49, align 4
  %75 = load i64, i64* %tmpindirections, align 8
  %conv50 = trunc i64 %75 to i32
  %76 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %indirections51 = getelementptr inbounds %struct.buffer, %struct.buffer* %76, i32 0, i32 82
  store i32 %conv50, i32* %indirections51, align 4
  br label %do.end.52

do.end.52:                                        ; preds = %do.body.47
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %clip_changed = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 94
  %bf.load = load i8, i8* %clip_changed, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %clip_changed, align 8
  %78 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %clip_changed53 = getelementptr inbounds %struct.buffer, %struct.buffer* %78, i32 0, i32 94
  %bf.load54 = load i8, i8* %clip_changed53, align 8
  %bf.clear55 = and i8 %bf.load54, -3
  %bf.set56 = or i8 %bf.clear55, 2
  store i8 %bf.set56, i8* %clip_changed53, align 8
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.52
  %79 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %newline_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 91
  %80 = load %struct.region_cache*, %struct.region_cache** %newline_cache, align 8
  store %struct.region_cache* %80, %struct.region_cache** %tmpnewline_cache, align 8
  %81 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %newline_cache58 = getelementptr inbounds %struct.buffer, %struct.buffer* %81, i32 0, i32 91
  %82 = load %struct.region_cache*, %struct.region_cache** %newline_cache58, align 8
  %83 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %newline_cache59 = getelementptr inbounds %struct.buffer, %struct.buffer* %83, i32 0, i32 91
  store %struct.region_cache* %82, %struct.region_cache** %newline_cache59, align 8
  %84 = load %struct.region_cache*, %struct.region_cache** %tmpnewline_cache, align 8
  %85 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %newline_cache60 = getelementptr inbounds %struct.buffer, %struct.buffer* %85, i32 0, i32 91
  store %struct.region_cache* %84, %struct.region_cache** %newline_cache60, align 8
  br label %do.end.61

do.end.61:                                        ; preds = %do.body.57
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.61
  %86 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %width_run_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %86, i32 0, i32 92
  %87 = load %struct.region_cache*, %struct.region_cache** %width_run_cache, align 8
  store %struct.region_cache* %87, %struct.region_cache** %tmpwidth_run_cache, align 8
  %88 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %width_run_cache63 = getelementptr inbounds %struct.buffer, %struct.buffer* %88, i32 0, i32 92
  %89 = load %struct.region_cache*, %struct.region_cache** %width_run_cache63, align 8
  %90 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %width_run_cache64 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 92
  store %struct.region_cache* %89, %struct.region_cache** %width_run_cache64, align 8
  %91 = load %struct.region_cache*, %struct.region_cache** %tmpwidth_run_cache, align 8
  %92 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %width_run_cache65 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 92
  store %struct.region_cache* %91, %struct.region_cache** %width_run_cache65, align 8
  br label %do.end.66

do.end.66:                                        ; preds = %do.body.62
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %93 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %bidi_paragraph_cache = getelementptr inbounds %struct.buffer, %struct.buffer* %93, i32 0, i32 93
  %94 = load %struct.region_cache*, %struct.region_cache** %bidi_paragraph_cache, align 8
  store %struct.region_cache* %94, %struct.region_cache** %tmpbidi_paragraph_cache, align 8
  %95 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_paragraph_cache68 = getelementptr inbounds %struct.buffer, %struct.buffer* %95, i32 0, i32 93
  %96 = load %struct.region_cache*, %struct.region_cache** %bidi_paragraph_cache68, align 8
  %97 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %bidi_paragraph_cache69 = getelementptr inbounds %struct.buffer, %struct.buffer* %97, i32 0, i32 93
  store %struct.region_cache* %96, %struct.region_cache** %bidi_paragraph_cache69, align 8
  %98 = load %struct.region_cache*, %struct.region_cache** %tmpbidi_paragraph_cache, align 8
  %99 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_paragraph_cache70 = getelementptr inbounds %struct.buffer, %struct.buffer* %99, i32 0, i32 93
  store %struct.region_cache* %98, %struct.region_cache** %bidi_paragraph_cache70, align 8
  br label %do.end.71

do.end.71:                                        ; preds = %do.body.67
  %100 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %100, i32 0, i32 94
  %bf.load72 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear73 = and i8 %bf.load72, -2
  %bf.set74 = or i8 %bf.clear73, 1
  store i8 %bf.set74, i8* %prevent_redisplay_optimizations_p, align 8
  %101 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %prevent_redisplay_optimizations_p75 = getelementptr inbounds %struct.buffer, %struct.buffer* %101, i32 0, i32 94
  %bf.load76 = load i8, i8* %prevent_redisplay_optimizations_p75, align 8
  %bf.clear77 = and i8 %bf.load76, -2
  %bf.set78 = or i8 %bf.clear77, 1
  store i8 %bf.set78, i8* %prevent_redisplay_optimizations_p75, align 8
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.71
  %102 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %102, i32 0, i32 95
  %103 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %103, %struct.Lisp_Overlay** %tmpoverlays_before, align 8
  %104 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before80 = getelementptr inbounds %struct.buffer, %struct.buffer* %104, i32 0, i32 95
  %105 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before80, align 8
  %106 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlays_before81 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 95
  store %struct.Lisp_Overlay* %105, %struct.Lisp_Overlay** %overlays_before81, align 8
  %107 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tmpoverlays_before, align 8
  %108 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before82 = getelementptr inbounds %struct.buffer, %struct.buffer* %108, i32 0, i32 95
  store %struct.Lisp_Overlay* %107, %struct.Lisp_Overlay** %overlays_before82, align 8
  br label %do.end.83

do.end.83:                                        ; preds = %do.body.79
  br label %do.body.84

do.body.84:                                       ; preds = %do.end.83
  %109 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %109, i32 0, i32 96
  %110 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %110, %struct.Lisp_Overlay** %tmpoverlays_after, align 8
  %111 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after85 = getelementptr inbounds %struct.buffer, %struct.buffer* %111, i32 0, i32 96
  %112 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after85, align 8
  %113 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlays_after86 = getelementptr inbounds %struct.buffer, %struct.buffer* %113, i32 0, i32 96
  store %struct.Lisp_Overlay* %112, %struct.Lisp_Overlay** %overlays_after86, align 8
  %114 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tmpoverlays_after, align 8
  %115 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after87 = getelementptr inbounds %struct.buffer, %struct.buffer* %115, i32 0, i32 96
  store %struct.Lisp_Overlay* %114, %struct.Lisp_Overlay** %overlays_after87, align 8
  br label %do.end.88

do.end.88:                                        ; preds = %do.body.84
  br label %do.body.89

do.body.89:                                       ; preds = %do.end.88
  %116 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 97
  %117 = load i64, i64* %overlay_center, align 8
  store i64 %117, i64* %tmpoverlay_center, align 8
  %118 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center90 = getelementptr inbounds %struct.buffer, %struct.buffer* %118, i32 0, i32 97
  %119 = load i64, i64* %overlay_center90, align 8
  %120 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %overlay_center91 = getelementptr inbounds %struct.buffer, %struct.buffer* %120, i32 0, i32 97
  store i64 %119, i64* %overlay_center91, align 8
  %121 = load i64, i64* %tmpoverlay_center, align 8
  %122 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center92 = getelementptr inbounds %struct.buffer, %struct.buffer* %122, i32 0, i32 97
  store i64 %121, i64* %overlay_center92, align 8
  br label %do.end.93

do.end.93:                                        ; preds = %do.body.89
  br label %do.body.94

do.body.94:                                       ; preds = %do.end.93
  %123 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %123, i32 0, i32 98
  %124 = load i64, i64* %undo_list_, align 8
  store i64 %124, i64* %tmpundo_list, align 8
  %125 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %126 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %undo_list_95 = getelementptr inbounds %struct.buffer, %struct.buffer* %126, i32 0, i32 98
  %127 = load i64, i64* %undo_list_95, align 8
  call void @bset_undo_list(%struct.buffer* %125, i64 %127)
  %128 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %129 = load i64, i64* %tmpundo_list, align 8
  call void @bset_undo_list(%struct.buffer* %128, i64 %129)
  br label %do.end.96

do.end.96:                                        ; preds = %do.body.94
  br label %do.body.97

do.body.97:                                       ; preds = %do.end.96
  %130 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %mark_ = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 8
  %131 = load i64, i64* %mark_, align 8
  store i64 %131, i64* %tmpmark, align 8
  %132 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %133 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %mark_98 = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 8
  %134 = load i64, i64* %mark_98, align 8
  call void @bset_mark(%struct.buffer* %132, i64 %134)
  %135 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %136 = load i64, i64* %tmpmark, align 8
  call void @bset_mark(%struct.buffer* %135, i64 %136)
  br label %do.end.99

do.end.99:                                        ; preds = %do.body.97
  br label %do.body.100

do.body.100:                                      ; preds = %do.end.99
  %137 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 39
  %138 = load i64, i64* %enable_multibyte_characters_, align 8
  store i64 %138, i64* %tmpenable_multibyte_characters, align 8
  %139 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %140 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_101 = getelementptr inbounds %struct.buffer, %struct.buffer* %140, i32 0, i32 39
  %141 = load i64, i64* %enable_multibyte_characters_101, align 8
  call void @bset_enable_multibyte_characters(%struct.buffer* %139, i64 %141)
  %142 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %143 = load i64, i64* %tmpenable_multibyte_characters, align 8
  call void @bset_enable_multibyte_characters(%struct.buffer* %142, i64 %143)
  br label %do.end.102

do.end.102:                                       ; preds = %do.body.100
  br label %do.body.103

do.body.103:                                      ; preds = %do.end.102
  %144 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %bidi_display_reordering_ = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 30
  %145 = load i64, i64* %bidi_display_reordering_, align 8
  store i64 %145, i64* %tmpbidi_display_reordering, align 8
  %146 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_display_reordering_104 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 30
  %148 = load i64, i64* %bidi_display_reordering_104, align 8
  call void @bset_bidi_display_reordering(%struct.buffer* %146, i64 %148)
  %149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %150 = load i64, i64* %tmpbidi_display_reordering, align 8
  call void @bset_bidi_display_reordering(%struct.buffer* %149, i64 %150)
  br label %do.end.105

do.end.105:                                       ; preds = %do.body.103
  br label %do.body.106

do.body.106:                                      ; preds = %do.end.105
  %151 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %bidi_paragraph_direction_ = getelementptr inbounds %struct.buffer, %struct.buffer* %151, i32 0, i32 31
  %152 = load i64, i64* %bidi_paragraph_direction_, align 8
  store i64 %152, i64* %tmpbidi_paragraph_direction, align 8
  %153 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %154 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_paragraph_direction_107 = getelementptr inbounds %struct.buffer, %struct.buffer* %154, i32 0, i32 31
  %155 = load i64, i64* %bidi_paragraph_direction_107, align 8
  call void @bset_bidi_paragraph_direction(%struct.buffer* %153, i64 %155)
  %156 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %157 = load i64, i64* %tmpbidi_paragraph_direction, align 8
  call void @bset_bidi_paragraph_direction(%struct.buffer* %156, i64 %157)
  br label %do.end.108

do.end.108:                                       ; preds = %do.body.106
  br label %do.body.109

do.body.109:                                      ; preds = %do.end.108
  %158 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %158, i32 0, i32 45
  %159 = load i64, i64* %pt_marker_, align 8
  store i64 %159, i64* %tmppt_marker, align 8
  %160 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_marker_110 = getelementptr inbounds %struct.buffer, %struct.buffer* %161, i32 0, i32 45
  %162 = load i64, i64* %pt_marker_110, align 8
  call void @bset_pt_marker(%struct.buffer* %160, i64 %162)
  %163 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %164 = load i64, i64* %tmppt_marker, align 8
  call void @bset_pt_marker(%struct.buffer* %163, i64 %164)
  br label %do.end.111

do.end.111:                                       ; preds = %do.body.109
  br label %do.body.112

do.body.112:                                      ; preds = %do.end.111
  %165 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 46
  %166 = load i64, i64* %begv_marker_, align 8
  store i64 %166, i64* %tmpbegv_marker, align 8
  %167 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %168 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_marker_113 = getelementptr inbounds %struct.buffer, %struct.buffer* %168, i32 0, i32 46
  %169 = load i64, i64* %begv_marker_113, align 8
  call void @bset_begv_marker(%struct.buffer* %167, i64 %169)
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %171 = load i64, i64* %tmpbegv_marker, align 8
  call void @bset_begv_marker(%struct.buffer* %170, i64 %171)
  br label %do.end.114

do.end.114:                                       ; preds = %do.body.112
  br label %do.body.115

do.body.115:                                      ; preds = %do.end.114
  %172 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %172, i32 0, i32 47
  %173 = load i64, i64* %zv_marker_, align 8
  store i64 %173, i64* %tmpzv_marker, align 8
  %174 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %175 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_marker_116 = getelementptr inbounds %struct.buffer, %struct.buffer* %175, i32 0, i32 47
  %176 = load i64, i64* %zv_marker_116, align 8
  call void @bset_zv_marker(%struct.buffer* %174, i64 %176)
  %177 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %178 = load i64, i64* %tmpzv_marker, align 8
  call void @bset_zv_marker(%struct.buffer* %177, i64 %178)
  br label %do.end.117

do.end.117:                                       ; preds = %do.body.115
  %179 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_point_before_scroll(%struct.buffer* %179, i64 %call118)
  %180 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %call119 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_point_before_scroll(%struct.buffer* %180, i64 %call119)
  %181 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %181, i32 0, i32 73
  %182 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %182, i32 0, i32 6
  %183 = load i64, i64* %modiff, align 8
  %inc = add nsw i64 %183, 1
  store i64 %inc, i64* %modiff, align 8
  %184 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text120 = getelementptr inbounds %struct.buffer, %struct.buffer* %184, i32 0, i32 73
  %185 = load %struct.buffer_text*, %struct.buffer_text** %text120, align 8
  %modiff121 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %185, i32 0, i32 6
  %186 = load i64, i64* %modiff121, align 8
  %inc122 = add nsw i64 %186, 1
  store i64 %inc122, i64* %modiff121, align 8
  %187 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text123 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i32 0, i32 73
  %188 = load %struct.buffer_text*, %struct.buffer_text** %text123, align 8
  %chars_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %188, i32 0, i32 7
  %189 = load i64, i64* %chars_modiff, align 8
  %inc124 = add nsw i64 %189, 1
  store i64 %inc124, i64* %chars_modiff, align 8
  %190 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text125 = getelementptr inbounds %struct.buffer, %struct.buffer* %190, i32 0, i32 73
  %191 = load %struct.buffer_text*, %struct.buffer_text** %text125, align 8
  %chars_modiff126 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %191, i32 0, i32 7
  %192 = load i64, i64* %chars_modiff126, align 8
  %inc127 = add nsw i64 %192, 1
  store i64 %inc127, i64* %chars_modiff126, align 8
  %193 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text128 = getelementptr inbounds %struct.buffer, %struct.buffer* %193, i32 0, i32 73
  %194 = load %struct.buffer_text*, %struct.buffer_text** %text128, align 8
  %overlay_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %194, i32 0, i32 9
  %195 = load i64, i64* %overlay_modiff, align 8
  %inc129 = add nsw i64 %195, 1
  store i64 %inc129, i64* %overlay_modiff, align 8
  %196 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text130 = getelementptr inbounds %struct.buffer, %struct.buffer* %196, i32 0, i32 73
  %197 = load %struct.buffer_text*, %struct.buffer_text** %text130, align 8
  %overlay_modiff131 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %197, i32 0, i32 9
  %198 = load i64, i64* %overlay_modiff131, align 8
  %inc132 = add nsw i64 %198, 1
  store i64 %inc132, i64* %overlay_modiff131, align 8
  %199 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text133 = getelementptr inbounds %struct.buffer, %struct.buffer* %199, i32 0, i32 73
  %200 = load %struct.buffer_text*, %struct.buffer_text** %text133, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %200, i32 0, i32 1
  %201 = load i64, i64* %gpt, align 8
  %202 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text134 = getelementptr inbounds %struct.buffer, %struct.buffer* %202, i32 0, i32 73
  %203 = load %struct.buffer_text*, %struct.buffer_text** %text134, align 8
  %beg_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %203, i32 0, i32 11
  store i64 %201, i64* %beg_unchanged, align 8
  %204 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text135 = getelementptr inbounds %struct.buffer, %struct.buffer* %204, i32 0, i32 73
  %205 = load %struct.buffer_text*, %struct.buffer_text** %text135, align 8
  %gpt136 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %205, i32 0, i32 1
  %206 = load i64, i64* %gpt136, align 8
  %207 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text137 = getelementptr inbounds %struct.buffer, %struct.buffer* %207, i32 0, i32 73
  %208 = load %struct.buffer_text*, %struct.buffer_text** %text137, align 8
  %end_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %208, i32 0, i32 12
  store i64 %206, i64* %end_unchanged, align 8
  %209 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text138 = getelementptr inbounds %struct.buffer, %struct.buffer* %209, i32 0, i32 73
  %210 = load %struct.buffer_text*, %struct.buffer_text** %text138, align 8
  %gpt139 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %210, i32 0, i32 1
  %211 = load i64, i64* %gpt139, align 8
  %212 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text140 = getelementptr inbounds %struct.buffer, %struct.buffer* %212, i32 0, i32 73
  %213 = load %struct.buffer_text*, %struct.buffer_text** %text140, align 8
  %beg_unchanged141 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %213, i32 0, i32 11
  store i64 %211, i64* %beg_unchanged141, align 8
  %214 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text142 = getelementptr inbounds %struct.buffer, %struct.buffer* %214, i32 0, i32 73
  %215 = load %struct.buffer_text*, %struct.buffer_text** %text142, align 8
  %gpt143 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %215, i32 0, i32 1
  %216 = load i64, i64* %gpt143, align 8
  %217 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text144 = getelementptr inbounds %struct.buffer, %struct.buffer* %217, i32 0, i32 73
  %218 = load %struct.buffer_text*, %struct.buffer_text** %text144, align 8
  %end_unchanged145 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %218, i32 0, i32 12
  store i64 %216, i64* %end_unchanged145, align 8
  %219 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text146 = getelementptr inbounds %struct.buffer, %struct.buffer* %219, i32 0, i32 73
  %220 = load %struct.buffer_text*, %struct.buffer_text** %text146, align 8
  %markers = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %220, i32 0, i32 16
  %221 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers, align 8
  store %struct.Lisp_Marker* %221, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.147

for.cond.147:                                     ; preds = %for.inc.156, %do.end.117
  %222 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %tobool148 = icmp ne %struct.Lisp_Marker* %222, null
  br i1 %tobool148, label %for.body.149, label %for.end.158

for.body.149:                                     ; preds = %for.cond.147
  %223 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer150 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %223, i32 0, i32 1
  %224 = load %struct.buffer*, %struct.buffer** %buffer150, align 8
  %225 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %cmp151 = icmp eq %struct.buffer* %224, %225
  br i1 %cmp151, label %if.then.153, label %if.else

if.then.153:                                      ; preds = %for.body.149
  %226 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %227 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer154 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %227, i32 0, i32 1
  store %struct.buffer* %226, %struct.buffer** %buffer154, align 8
  br label %if.end.155

if.else:                                          ; preds = %for.body.149
  br label %if.end.155

if.end.155:                                       ; preds = %if.else, %if.then.153
  br label %for.inc.156

for.inc.156:                                      ; preds = %if.end.155
  %228 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next157 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %228, i32 0, i32 2
  %229 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next157, align 8
  store %struct.Lisp_Marker* %229, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.147

for.end.158:                                      ; preds = %for.cond.147
  %230 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text159 = getelementptr inbounds %struct.buffer, %struct.buffer* %230, i32 0, i32 73
  %231 = load %struct.buffer_text*, %struct.buffer_text** %text159, align 8
  %markers160 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %231, i32 0, i32 16
  %232 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers160, align 8
  store %struct.Lisp_Marker* %232, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.171, %for.end.158
  %233 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %tobool162 = icmp ne %struct.Lisp_Marker* %233, null
  br i1 %tobool162, label %for.body.163, label %for.end.173

for.body.163:                                     ; preds = %for.cond.161
  %234 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer164 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %234, i32 0, i32 1
  %235 = load %struct.buffer*, %struct.buffer** %buffer164, align 8
  %236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp165 = icmp eq %struct.buffer* %235, %236
  br i1 %cmp165, label %if.then.167, label %if.else.169

if.then.167:                                      ; preds = %for.body.163
  %237 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %238 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %buffer168 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %238, i32 0, i32 1
  store %struct.buffer* %237, %struct.buffer** %buffer168, align 8
  br label %if.end.170

if.else.169:                                      ; preds = %for.body.163
  br label %if.end.170

if.end.170:                                       ; preds = %if.else.169, %if.then.167
  br label %for.inc.171

for.inc.171:                                      ; preds = %if.end.170
  %239 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %next172 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %239, i32 0, i32 2
  %240 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next172, align 8
  store %struct.Lisp_Marker* %240, %struct.Lisp_Marker** %m, align 8
  br label %for.cond.161

for.end.173:                                      ; preds = %for.cond.161
  %241 = load i64, i64* @selected_window, align 8
  store i64 %241, i64* %w, align 8
  %call174 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call174, i64* %ws, align 8
  %242 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %243 = bitcast %struct.buffer* %242 to i8*
  %call175 = call i64 @make_lisp_ptr(i8* %243, i32 5)
  store i64 %call175, i64* %buf1, align 8
  %244 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %245 = bitcast %struct.buffer* %244 to i8*
  %call176 = call i64 @make_lisp_ptr(i8* %245, i32 5)
  store i64 %call176, i64* %buf2, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.325, %for.end.173
  %246 = load i64, i64* %w, align 8
  %247 = load i64, i64* %ws, align 8
  %call177 = call i64 @Fmemq(i64 %246, i64 %247)
  %call178 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp179 = icmp eq i64 %call177, %call178
  br i1 %cmp179, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %248 = load i64, i64* %w, align 8
  %249 = load i64, i64* %ws, align 8
  %call181 = call i64 @Fcons(i64 %248, i64 %249)
  store i64 %call181, i64* %ws, align 8
  %250 = load i64, i64* %w, align 8
  %call182 = call %struct.window* @XWINDOW(i64 %250)
  %pointm = getelementptr inbounds %struct.window, %struct.window* %call182, i32 0, i32 12
  %251 = load i64, i64* %pointm, align 8
  %and = and i64 %251, 7
  %conv183 = trunc i64 %and to i32
  %cmp184 = icmp eq i32 %conv183, 1
  br i1 %cmp184, label %land.lhs.true, label %if.end.232

land.lhs.true:                                    ; preds = %while.body
  %252 = load i64, i64* %w, align 8
  %call186 = call %struct.window* @XWINDOW(i64 %252)
  %pointm187 = getelementptr inbounds %struct.window, %struct.window* %call186, i32 0, i32 12
  %253 = load i64, i64* %pointm187, align 8
  %call188 = call i32 @XMISCTYPE(i64 %253)
  %cmp189 = icmp eq i32 %call188, 24236
  br i1 %cmp189, label %land.lhs.true.191, label %if.end.232

land.lhs.true.191:                                ; preds = %land.lhs.true
  %254 = load i64, i64* %w, align 8
  %call192 = call %struct.window* @XWINDOW(i64 %254)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call192, i32 0, i32 10
  %255 = load i64, i64* %contents, align 8
  %256 = load i64, i64* %buf1, align 8
  %cmp193 = icmp eq i64 %255, %256
  br i1 %cmp193, label %if.then.200, label %lor.lhs.false.195

lor.lhs.false.195:                                ; preds = %land.lhs.true.191
  %257 = load i64, i64* %w, align 8
  %call196 = call %struct.window* @XWINDOW(i64 %257)
  %contents197 = getelementptr inbounds %struct.window, %struct.window* %call196, i32 0, i32 10
  %258 = load i64, i64* %contents197, align 8
  %259 = load i64, i64* %buf2, align 8
  %cmp198 = icmp eq i64 %258, %259
  br i1 %cmp198, label %if.then.200, label %if.end.232

if.then.200:                                      ; preds = %lor.lhs.false.195, %land.lhs.true.191
  %260 = load i64, i64* %w, align 8
  %call201 = call %struct.window* @XWINDOW(i64 %260)
  %pointm202 = getelementptr inbounds %struct.window, %struct.window* %call201, i32 0, i32 12
  %261 = load i64, i64* %pointm202, align 8
  %262 = load i64, i64* %w, align 8
  %call203 = call %struct.window* @XWINDOW(i64 %262)
  %contents204 = getelementptr inbounds %struct.window, %struct.window* %call203, i32 0, i32 10
  %263 = load i64, i64* %contents204, align 8
  %call205 = call %struct.buffer* @XBUFFER(i64 %263)
  %264 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp206 = icmp eq %struct.buffer* %call205, %264
  br i1 %cmp206, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.200
  %265 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv208 = getelementptr inbounds %struct.buffer, %struct.buffer* %265, i32 0, i32 77
  %266 = load i64, i64* %begv208, align 8
  br label %cond.end.227

cond.false:                                       ; preds = %if.then.200
  %267 = load i64, i64* %w, align 8
  %call209 = call %struct.window* @XWINDOW(i64 %267)
  %contents210 = getelementptr inbounds %struct.window, %struct.window* %call209, i32 0, i32 10
  %268 = load i64, i64* %contents210, align 8
  %call211 = call %struct.buffer* @XBUFFER(i64 %268)
  %begv_marker_212 = getelementptr inbounds %struct.buffer, %struct.buffer* %call211, i32 0, i32 46
  %269 = load i64, i64* %begv_marker_212, align 8
  %call213 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp214 = icmp eq i64 %269, %call213
  br i1 %cmp214, label %cond.true.216, label %cond.false.221

cond.true.216:                                    ; preds = %cond.false
  %270 = load i64, i64* %w, align 8
  %call217 = call %struct.window* @XWINDOW(i64 %270)
  %contents218 = getelementptr inbounds %struct.window, %struct.window* %call217, i32 0, i32 10
  %271 = load i64, i64* %contents218, align 8
  %call219 = call %struct.buffer* @XBUFFER(i64 %271)
  %begv220 = getelementptr inbounds %struct.buffer, %struct.buffer* %call219, i32 0, i32 77
  %272 = load i64, i64* %begv220, align 8
  br label %cond.end

cond.false.221:                                   ; preds = %cond.false
  %273 = load i64, i64* %w, align 8
  %call222 = call %struct.window* @XWINDOW(i64 %273)
  %contents223 = getelementptr inbounds %struct.window, %struct.window* %call222, i32 0, i32 10
  %274 = load i64, i64* %contents223, align 8
  %call224 = call %struct.buffer* @XBUFFER(i64 %274)
  %begv_marker_225 = getelementptr inbounds %struct.buffer, %struct.buffer* %call224, i32 0, i32 46
  %275 = load i64, i64* %begv_marker_225, align 8
  %call226 = call i64 @marker_position(i64 %275)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.221, %cond.true.216
  %cond = phi i64 [ %272, %cond.true.216 ], [ %call226, %cond.false.221 ]
  br label %cond.end.227

cond.end.227:                                     ; preds = %cond.end, %cond.true
  %cond228 = phi i64 [ %266, %cond.true ], [ %cond, %cond.end ]
  %shl = shl i64 %cond228, 2
  %add = add i64 %shl, 2
  %276 = load i64, i64* %w, align 8
  %call229 = call %struct.window* @XWINDOW(i64 %276)
  %contents230 = getelementptr inbounds %struct.window, %struct.window* %call229, i32 0, i32 10
  %277 = load i64, i64* %contents230, align 8
  %call231 = call i64 @Fset_marker(i64 %261, i64 %add, i64 %277)
  br label %if.end.232

if.end.232:                                       ; preds = %cond.end.227, %lor.lhs.false.195, %land.lhs.true, %while.body
  %278 = load i64, i64* %w, align 8
  %call233 = call %struct.window* @XWINDOW(i64 %278)
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %call233, i32 0, i32 13
  %279 = load i64, i64* %old_pointm, align 8
  %and234 = and i64 %279, 7
  %conv235 = trunc i64 %and234 to i32
  %cmp236 = icmp eq i32 %conv235, 1
  br i1 %cmp236, label %land.lhs.true.238, label %if.end.292

land.lhs.true.238:                                ; preds = %if.end.232
  %280 = load i64, i64* %w, align 8
  %call239 = call %struct.window* @XWINDOW(i64 %280)
  %old_pointm240 = getelementptr inbounds %struct.window, %struct.window* %call239, i32 0, i32 13
  %281 = load i64, i64* %old_pointm240, align 8
  %call241 = call i32 @XMISCTYPE(i64 %281)
  %cmp242 = icmp eq i32 %call241, 24236
  br i1 %cmp242, label %land.lhs.true.244, label %if.end.292

land.lhs.true.244:                                ; preds = %land.lhs.true.238
  %282 = load i64, i64* %w, align 8
  %call245 = call %struct.window* @XWINDOW(i64 %282)
  %contents246 = getelementptr inbounds %struct.window, %struct.window* %call245, i32 0, i32 10
  %283 = load i64, i64* %contents246, align 8
  %284 = load i64, i64* %buf1, align 8
  %cmp247 = icmp eq i64 %283, %284
  br i1 %cmp247, label %if.then.254, label %lor.lhs.false.249

lor.lhs.false.249:                                ; preds = %land.lhs.true.244
  %285 = load i64, i64* %w, align 8
  %call250 = call %struct.window* @XWINDOW(i64 %285)
  %contents251 = getelementptr inbounds %struct.window, %struct.window* %call250, i32 0, i32 10
  %286 = load i64, i64* %contents251, align 8
  %287 = load i64, i64* %buf2, align 8
  %cmp252 = icmp eq i64 %286, %287
  br i1 %cmp252, label %if.then.254, label %if.end.292

if.then.254:                                      ; preds = %lor.lhs.false.249, %land.lhs.true.244
  %288 = load i64, i64* %w, align 8
  %call255 = call %struct.window* @XWINDOW(i64 %288)
  %old_pointm256 = getelementptr inbounds %struct.window, %struct.window* %call255, i32 0, i32 13
  %289 = load i64, i64* %old_pointm256, align 8
  %290 = load i64, i64* %w, align 8
  %call257 = call %struct.window* @XWINDOW(i64 %290)
  %contents258 = getelementptr inbounds %struct.window, %struct.window* %call257, i32 0, i32 10
  %291 = load i64, i64* %contents258, align 8
  %call259 = call %struct.buffer* @XBUFFER(i64 %291)
  %292 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp260 = icmp eq %struct.buffer* %call259, %292
  br i1 %cmp260, label %cond.true.262, label %cond.false.264

cond.true.262:                                    ; preds = %if.then.254
  %293 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv263 = getelementptr inbounds %struct.buffer, %struct.buffer* %293, i32 0, i32 77
  %294 = load i64, i64* %begv263, align 8
  br label %cond.end.285

cond.false.264:                                   ; preds = %if.then.254
  %295 = load i64, i64* %w, align 8
  %call265 = call %struct.window* @XWINDOW(i64 %295)
  %contents266 = getelementptr inbounds %struct.window, %struct.window* %call265, i32 0, i32 10
  %296 = load i64, i64* %contents266, align 8
  %call267 = call %struct.buffer* @XBUFFER(i64 %296)
  %begv_marker_268 = getelementptr inbounds %struct.buffer, %struct.buffer* %call267, i32 0, i32 46
  %297 = load i64, i64* %begv_marker_268, align 8
  %call269 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp270 = icmp eq i64 %297, %call269
  br i1 %cmp270, label %cond.true.272, label %cond.false.277

cond.true.272:                                    ; preds = %cond.false.264
  %298 = load i64, i64* %w, align 8
  %call273 = call %struct.window* @XWINDOW(i64 %298)
  %contents274 = getelementptr inbounds %struct.window, %struct.window* %call273, i32 0, i32 10
  %299 = load i64, i64* %contents274, align 8
  %call275 = call %struct.buffer* @XBUFFER(i64 %299)
  %begv276 = getelementptr inbounds %struct.buffer, %struct.buffer* %call275, i32 0, i32 77
  %300 = load i64, i64* %begv276, align 8
  br label %cond.end.283

cond.false.277:                                   ; preds = %cond.false.264
  %301 = load i64, i64* %w, align 8
  %call278 = call %struct.window* @XWINDOW(i64 %301)
  %contents279 = getelementptr inbounds %struct.window, %struct.window* %call278, i32 0, i32 10
  %302 = load i64, i64* %contents279, align 8
  %call280 = call %struct.buffer* @XBUFFER(i64 %302)
  %begv_marker_281 = getelementptr inbounds %struct.buffer, %struct.buffer* %call280, i32 0, i32 46
  %303 = load i64, i64* %begv_marker_281, align 8
  %call282 = call i64 @marker_position(i64 %303)
  br label %cond.end.283

cond.end.283:                                     ; preds = %cond.false.277, %cond.true.272
  %cond284 = phi i64 [ %300, %cond.true.272 ], [ %call282, %cond.false.277 ]
  br label %cond.end.285

cond.end.285:                                     ; preds = %cond.end.283, %cond.true.262
  %cond286 = phi i64 [ %294, %cond.true.262 ], [ %cond284, %cond.end.283 ]
  %shl287 = shl i64 %cond286, 2
  %add288 = add i64 %shl287, 2
  %304 = load i64, i64* %w, align 8
  %call289 = call %struct.window* @XWINDOW(i64 %304)
  %contents290 = getelementptr inbounds %struct.window, %struct.window* %call289, i32 0, i32 10
  %305 = load i64, i64* %contents290, align 8
  %call291 = call i64 @Fset_marker(i64 %289, i64 %add288, i64 %305)
  br label %if.end.292

if.end.292:                                       ; preds = %cond.end.285, %lor.lhs.false.249, %land.lhs.true.238, %if.end.232
  %306 = load i64, i64* %w, align 8
  %call293 = call %struct.window* @XWINDOW(i64 %306)
  %start = getelementptr inbounds %struct.window, %struct.window* %call293, i32 0, i32 11
  %307 = load i64, i64* %start, align 8
  %and294 = and i64 %307, 7
  %conv295 = trunc i64 %and294 to i32
  %cmp296 = icmp eq i32 %conv295, 1
  br i1 %cmp296, label %land.lhs.true.298, label %if.end.325

land.lhs.true.298:                                ; preds = %if.end.292
  %308 = load i64, i64* %w, align 8
  %call299 = call %struct.window* @XWINDOW(i64 %308)
  %start300 = getelementptr inbounds %struct.window, %struct.window* %call299, i32 0, i32 11
  %309 = load i64, i64* %start300, align 8
  %call301 = call i32 @XMISCTYPE(i64 %309)
  %cmp302 = icmp eq i32 %call301, 24236
  br i1 %cmp302, label %land.lhs.true.304, label %if.end.325

land.lhs.true.304:                                ; preds = %land.lhs.true.298
  %310 = load i64, i64* %w, align 8
  %call305 = call %struct.window* @XWINDOW(i64 %310)
  %contents306 = getelementptr inbounds %struct.window, %struct.window* %call305, i32 0, i32 10
  %311 = load i64, i64* %contents306, align 8
  %312 = load i64, i64* %buf1, align 8
  %cmp307 = icmp eq i64 %311, %312
  br i1 %cmp307, label %if.then.314, label %lor.lhs.false.309

lor.lhs.false.309:                                ; preds = %land.lhs.true.304
  %313 = load i64, i64* %w, align 8
  %call310 = call %struct.window* @XWINDOW(i64 %313)
  %contents311 = getelementptr inbounds %struct.window, %struct.window* %call310, i32 0, i32 10
  %314 = load i64, i64* %contents311, align 8
  %315 = load i64, i64* %buf2, align 8
  %cmp312 = icmp eq i64 %314, %315
  br i1 %cmp312, label %if.then.314, label %if.end.325

if.then.314:                                      ; preds = %lor.lhs.false.309, %land.lhs.true.304
  %316 = load i64, i64* %w, align 8
  %call315 = call %struct.window* @XWINDOW(i64 %316)
  %start316 = getelementptr inbounds %struct.window, %struct.window* %call315, i32 0, i32 11
  %317 = load i64, i64* %start316, align 8
  %318 = load i64, i64* %w, align 8
  %call317 = call %struct.window* @XWINDOW(i64 %318)
  %contents318 = getelementptr inbounds %struct.window, %struct.window* %call317, i32 0, i32 10
  %319 = load i64, i64* %contents318, align 8
  %call319 = call %struct.buffer* @XBUFFER(i64 %319)
  %last_window_start = getelementptr inbounds %struct.buffer, %struct.buffer* %call319, i32 0, i32 90
  %320 = load i64, i64* %last_window_start, align 8
  %shl320 = shl i64 %320, 2
  %add321 = add i64 %shl320, 2
  %321 = load i64, i64* %w, align 8
  %call322 = call %struct.window* @XWINDOW(i64 %321)
  %contents323 = getelementptr inbounds %struct.window, %struct.window* %call322, i32 0, i32 10
  %322 = load i64, i64* %contents323, align 8
  %call324 = call i64 @Fset_marker(i64 %317, i64 %add321, i64 %322)
  br label %if.end.325

if.end.325:                                       ; preds = %if.then.314, %lor.lhs.false.309, %land.lhs.true.298, %if.end.292
  %323 = load i64, i64* %w, align 8
  %call326 = call i64 @builtin_lisp_symbol(i32 901)
  %call327 = call i64 @builtin_lisp_symbol(i32 901)
  %call328 = call i64 @Fnext_window(i64 %323, i64 %call326, i64 %call327)
  store i64 %call328, i64* %w, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %324 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text329 = getelementptr inbounds %struct.buffer, %struct.buffer* %324, i32 0, i32 73
  %325 = load %struct.buffer_text*, %struct.buffer_text** %text329, align 8
  %intervals = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %325, i32 0, i32 15
  %326 = load %struct.interval*, %struct.interval** %intervals, align 8
  %tobool330 = icmp ne %struct.interval* %326, null
  br i1 %tobool330, label %if.then.331, label %if.end.335

if.then.331:                                      ; preds = %while.end
  %327 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %328 = bitcast %struct.buffer* %327 to i8*
  %call332 = call i64 @make_lisp_ptr(i8* %328, i32 5)
  %329 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text333 = getelementptr inbounds %struct.buffer, %struct.buffer* %329, i32 0, i32 73
  %330 = load %struct.buffer_text*, %struct.buffer_text** %text333, align 8
  %intervals334 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %330, i32 0, i32 15
  %331 = load %struct.interval*, %struct.interval** %intervals334, align 8
  %up = getelementptr inbounds %struct.interval, %struct.interval* %331, i32 0, i32 4
  %obj = bitcast %union.anon* %up to i64*
  store i64 %call332, i64* %obj, align 8
  br label %if.end.335

if.end.335:                                       ; preds = %if.then.331, %while.end
  %332 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text336 = getelementptr inbounds %struct.buffer, %struct.buffer* %332, i32 0, i32 73
  %333 = load %struct.buffer_text*, %struct.buffer_text** %text336, align 8
  %intervals337 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %333, i32 0, i32 15
  %334 = load %struct.interval*, %struct.interval** %intervals337, align 8
  %tobool338 = icmp ne %struct.interval* %334, null
  br i1 %tobool338, label %if.then.339, label %if.end.345

if.then.339:                                      ; preds = %if.end.335
  %335 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %336 = bitcast %struct.buffer* %335 to i8*
  %call340 = call i64 @make_lisp_ptr(i8* %336, i32 5)
  %337 = load %struct.buffer*, %struct.buffer** %other_buffer, align 8
  %text341 = getelementptr inbounds %struct.buffer, %struct.buffer* %337, i32 0, i32 73
  %338 = load %struct.buffer_text*, %struct.buffer_text** %text341, align 8
  %intervals342 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %338, i32 0, i32 15
  %339 = load %struct.interval*, %struct.interval** %intervals342, align 8
  %up343 = getelementptr inbounds %struct.interval, %struct.interval* %339, i32 0, i32 4
  %obj344 = bitcast %union.anon* %up343 to i64*
  store i64 %call340, i64* %obj344, align 8
  br label %if.end.345

if.end.345:                                       ; preds = %if.then.339, %if.end.335
  %call346 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call346
}

; Function Attrs: nounwind uwtable
define internal void @bset_bidi_display_reordering(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %bidi_display_reordering_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 30
  store i64 %0, i64* %bidi_display_reordering_, align 8
  ret void
}

declare void @bset_bidi_paragraph_direction(%struct.buffer*, i64) #1

declare i64 @Fset_marker(i64, i64, i64) #1

declare i64 @Fnext_window(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_buffer_multibyte(i64 %flag) #3 {
entry:
  %retval = alloca i64, align 8
  %flag.addr = alloca i64, align 8
  %tail = alloca %struct.Lisp_Marker*, align 8
  %markers = alloca %struct.Lisp_Marker*, align 8
  %other = alloca %struct.buffer*, align 8
  %begv = alloca i64, align 8
  %zv = alloca i64, align 8
  %narrowed = alloca i8, align 1
  %modified_p = alloca i8, align 1
  %old_undo = alloca i64, align 8
  %pos = alloca i64, align 8
  %stop = alloca i64, align 8
  %p = alloca i8*, align 8
  %c = alloca i32, align 4
  %bytes = alloca i32, align 4
  %pt = alloca i64, align 8
  %pos209 = alloca i64, align 8
  %stop210 = alloca i64, align 8
  %p211 = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %q = alloca i8*, align 8
  %new_gpt = alloca i64, align 8
  %bytes287 = alloca i32, align 4
  %tmp = alloca [5 x i8], align 1
  %c458 = alloca i32, align 4
  %byte = alloca i64, align 8
  %position = alloca i64, align 8
  %process = alloca i64, align 8
  store i64 %flag, i64* %flag.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv1 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 77
  %1 = load i64, i64* %begv1, align 8
  %cmp = icmp ne i64 1, %1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 73
  %3 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %3, i32 0, i32 2
  %4 = load i64, i64* %z, align 8
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv2 = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 79
  %6 = load i64, i64* %zv2, align 8
  %cmp3 = icmp ne i64 %4, %6
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %frombool = zext i1 %7 to i8
  store i8 %frombool, i8* %narrowed, align 1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call4 = call i64 @Fbuffer_modified_p(i64 %call)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %call4, %call5
  %lnot = xor i1 %cmp6, true
  %frombool7 = zext i1 %lnot to i8
  store i8 %frombool7, i8* %modified_p, align 1
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 98
  %9 = load i64, i64* %undo_list_, align 8
  store i64 %9, i64* %old_undo, align 8
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 81
  %11 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %11, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.24, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %lor.end
  %12 = load i64, i64* %flag.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %12, %call8
  %conv = zext i1 %cmp9 to i32
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 39
  %14 = load i64, i64* %enable_multibyte_characters_, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %14, %call10
  %conv12 = zext i1 %cmp11 to i32
  %cmp13 = icmp eq i32 %conv, %conv12
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end
  %15 = load i64, i64* %flag.addr, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.16:                                        ; preds = %if.end
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_undo_list(%struct.buffer* %16, i64 %call17)
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  call void @clear_charpos_cache(%struct.buffer* %17)
  %18 = load i64, i64* %flag.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %18, %call18
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.16
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 78
  %20 = load i64, i64* %begv_byte, align 8
  store i64 %20, i64* %begv, align 8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 80
  %22 = load i64, i64* %zv_byte, align 8
  store i64 %22, i64* %zv, align 8
  br label %if.end.24

if.else:                                          ; preds = %if.end.16
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv22 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 77
  %24 = load i64, i64* %begv22, align 8
  store i64 %24, i64* %begv, align 8
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv23 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 79
  %26 = load i64, i64* %zv23, align 8
  store i64 %26, i64* %zv, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.21
  %27 = load i8, i8* %narrowed, align 1
  %tobool25 = trunc i8 %27 to i1
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.24
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.25, i32 0, i32 0)) #8
  unreachable

if.end.27:                                        ; preds = %if.end.24
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv28 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 77
  %30 = load i64, i64* %begv28, align 8
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv29 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 79
  %32 = load i64, i64* %zv29, align 8
  call void @invalidate_buffer_caches(%struct.buffer* %28, i64 %30, i64 %32)
  %33 = load i64, i64* %flag.addr, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %33, %call30
  br i1 %cmp31, label %if.then.33, label %if.else.206

if.then.33:                                       ; preds = %if.end.27
  call void @set_intervals_multibyte(i1 zeroext false)
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_enable_multibyte_characters(%struct.buffer* %34, i64 %call34)
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 4
  %37 = load i64, i64* %z_byte, align 8
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text36 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 73
  %39 = load %struct.buffer_text*, %struct.buffer_text** %text36, align 8
  %z37 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %39, i32 0, i32 2
  store i64 %37, i64* %z37, align 8
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte38 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 78
  %41 = load i64, i64* %begv_byte38, align 8
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv39 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 77
  store i64 %41, i64* %begv39, align 8
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte40 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 80
  %44 = load i64, i64* %zv_byte40, align 8
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv41 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 79
  store i64 %44, i64* %zv41, align 8
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text42 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text42, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 3
  %48 = load i64, i64* %gpt_byte, align 8
  %49 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text43 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 73
  %50 = load %struct.buffer_text*, %struct.buffer_text** %text43, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %50, i32 0, i32 1
  store i64 %48, i64* %gpt, align 8
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 76
  %53 = load i64, i64* %pt_byte, align 8
  %add = add nsw i64 %53, 0
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte44 = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 76
  %55 = load i64, i64* %pt_byte44, align 8
  %add45 = add nsw i64 %55, 0
  call void @temp_set_point_both(%struct.buffer* %51, i64 %add, i64 %add45)
  %56 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text46 = getelementptr inbounds %struct.buffer, %struct.buffer* %56, i32 0, i32 73
  %57 = load %struct.buffer_text*, %struct.buffer_text** %text46, align 8
  %markers47 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %57, i32 0, i32 16
  %58 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers47, align 8
  store %struct.Lisp_Marker* %58, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.33
  %59 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %tobool48 = icmp ne %struct.Lisp_Marker* %59, null
  br i1 %tobool48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %bytepos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %60, i32 0, i32 4
  %61 = load i64, i64* %bytepos, align 8
  %62 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %charpos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %62, i32 0, i32 3
  store i64 %61, i64* %charpos, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %63 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %63, i32 0, i32 2
  %64 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next, align 8
  store %struct.Lisp_Marker* %64, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 1, i64* %pos, align 8
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text49 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 73
  %66 = load %struct.buffer_text*, %struct.buffer_text** %text49, align 8
  %gpt50 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %66, i32 0, i32 1
  %67 = load i64, i64* %gpt50, align 8
  store i64 %67, i64* %stop, align 8
  %68 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text51 = getelementptr inbounds %struct.buffer, %struct.buffer* %68, i32 0, i32 73
  %69 = load %struct.buffer_text*, %struct.buffer_text** %text51, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %69, i32 0, i32 0
  %70 = load i8*, i8** %beg, align 8
  store i8* %70, i8** %p, align 8
  br label %while.body

while.body:                                       ; preds = %for.end, %if.end.197
  %71 = load i64, i64* %pos, align 8
  %72 = load i64, i64* %stop, align 8
  %cmp52 = icmp eq i64 %71, %72
  br i1 %cmp52, label %if.then.54, label %if.end.70

if.then.54:                                       ; preds = %while.body
  %73 = load i64, i64* %pos, align 8
  %74 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text55 = getelementptr inbounds %struct.buffer, %struct.buffer* %74, i32 0, i32 73
  %75 = load %struct.buffer_text*, %struct.buffer_text** %text55, align 8
  %z56 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %75, i32 0, i32 2
  %76 = load i64, i64* %z56, align 8
  %cmp57 = icmp eq i64 %73, %76
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.54
  br label %while.end

if.end.60:                                        ; preds = %if.then.54
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text61 = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 73
  %78 = load %struct.buffer_text*, %struct.buffer_text** %text61, align 8
  %beg62 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %78, i32 0, i32 0
  %79 = load i8*, i8** %beg62, align 8
  %80 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text63 = getelementptr inbounds %struct.buffer, %struct.buffer* %80, i32 0, i32 73
  %81 = load %struct.buffer_text*, %struct.buffer_text** %text63, align 8
  %gpt_byte64 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %81, i32 0, i32 3
  %82 = load i64, i64* %gpt_byte64, align 8
  %add.ptr = getelementptr inbounds i8, i8* %79, i64 %82
  %83 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text65 = getelementptr inbounds %struct.buffer, %struct.buffer* %83, i32 0, i32 73
  %84 = load %struct.buffer_text*, %struct.buffer_text** %text65, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %84, i32 0, i32 5
  %85 = load i64, i64* %gap_size, align 8
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr, i64 %85
  %add.ptr67 = getelementptr inbounds i8, i8* %add.ptr66, i64 -1
  store i8* %add.ptr67, i8** %p, align 8
  %86 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text68 = getelementptr inbounds %struct.buffer, %struct.buffer* %86, i32 0, i32 73
  %87 = load %struct.buffer_text*, %struct.buffer_text** %text68, align 8
  %z69 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %87, i32 0, i32 2
  %88 = load i64, i64* %z69, align 8
  store i64 %88, i64* %stop, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.60, %while.body
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.70
  %89 = load i8*, i8** %p, align 8
  %90 = load i8, i8* %89, align 1
  %conv71 = zext i8 %90 to i32
  %add72 = add i32 %conv71, 0
  %cmp73 = icmp ult i32 %add72, 128
  br i1 %cmp73, label %if.then.79, label %if.else.80

cond.false:                                       ; preds = %if.end.70
  %91 = load i8*, i8** %p, align 8
  %92 = load i8, i8* %91, align 1
  %conv75 = zext i8 %92 to i64
  %add76 = add i64 %conv75, 0
  %cmp77 = icmp ult i64 %add76, 128
  br i1 %cmp77, label %if.then.79, label %if.else.80

if.then.79:                                       ; preds = %cond.false, %cond.true
  %93 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %94 = load i64, i64* %pos, align 8
  %inc = add nsw i64 %94, 1
  store i64 %inc, i64* %pos, align 8
  br label %if.end.197

if.else.80:                                       ; preds = %cond.false, %cond.true
  %95 = load i8*, i8** %p, align 8
  %96 = load i8, i8* %95, align 1
  %conv81 = zext i8 %96 to i32
  %cmp82 = icmp eq i32 %conv81, 192
  br i1 %cmp82, label %if.then.87, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.80
  %97 = load i8*, i8** %p, align 8
  %98 = load i8, i8* %97, align 1
  %conv84 = zext i8 %98 to i32
  %cmp85 = icmp eq i32 %conv84, 193
  br i1 %cmp85, label %if.then.87, label %if.else.166

if.then.87:                                       ; preds = %lor.lhs.false, %if.else.80
  %99 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %99, i64 0
  %100 = load i8, i8* %arrayidx, align 1
  %conv88 = zext i8 %100 to i32
  %and = and i32 %conv88, 128
  %tobool89 = icmp ne i32 %and, 0
  br i1 %tobool89, label %cond.false.93, label %cond.true.90

cond.true.90:                                     ; preds = %if.then.87
  store i32 1, i32* %bytes, align 4
  %101 = load i8*, i8** %p, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %101, i64 0
  %102 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %102 to i32
  br label %cond.end.134

cond.false.93:                                    ; preds = %if.then.87
  %103 = load i8*, i8** %p, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %103, i64 0
  %104 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %104 to i32
  %and96 = and i32 %conv95, 32
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %cond.false.110, label %cond.true.98

cond.true.98:                                     ; preds = %cond.false.93
  store i32 2, i32* %bytes, align 4
  %105 = load i8*, i8** %p, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %105, i64 0
  %106 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %106 to i32
  %and101 = and i32 %conv100, 31
  %shl = shl i32 %and101, 6
  %107 = load i8*, i8** %p, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %107, i64 1
  %108 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %108 to i32
  %and104 = and i32 %conv103, 63
  %or = or i32 %shl, %and104
  %109 = load i8*, i8** %p, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %109, i64 0
  %110 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %110 to i32
  %cmp107 = icmp slt i32 %conv106, 194
  %cond = select i1 %cmp107, i32 4194176, i32 0
  %add109 = add nsw i32 %or, %cond
  br label %cond.end.132

cond.false.110:                                   ; preds = %cond.false.93
  %111 = load i8*, i8** %p, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %111, i64 0
  %112 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %112 to i32
  %and113 = and i32 %conv112, 16
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %cond.false.129, label %cond.true.115

cond.true.115:                                    ; preds = %cond.false.110
  store i32 3, i32* %bytes, align 4
  %113 = load i8*, i8** %p, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %113, i64 0
  %114 = load i8, i8* %arrayidx116, align 1
  %conv117 = zext i8 %114 to i32
  %and118 = and i32 %conv117, 15
  %shl119 = shl i32 %and118, 12
  %115 = load i8*, i8** %p, align 8
  %arrayidx120 = getelementptr inbounds i8, i8* %115, i64 1
  %116 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %116 to i32
  %and122 = and i32 %conv121, 63
  %shl123 = shl i32 %and122, 6
  %or124 = or i32 %shl119, %shl123
  %117 = load i8*, i8** %p, align 8
  %arrayidx125 = getelementptr inbounds i8, i8* %117, i64 2
  %118 = load i8, i8* %arrayidx125, align 1
  %conv126 = zext i8 %118 to i32
  %and127 = and i32 %conv126, 63
  %or128 = or i32 %or124, %and127
  br label %cond.end

cond.false.129:                                   ; preds = %cond.false.110
  %119 = load i8*, i8** %p, align 8
  %call130 = call i32 @string_char(i8* %119, i8** null, i32* %bytes)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.129, %cond.true.115
  %cond131 = phi i32 [ %or128, %cond.true.115 ], [ %call130, %cond.false.129 ]
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.end, %cond.true.98
  %cond133 = phi i32 [ %add109, %cond.true.98 ], [ %cond131, %cond.end ]
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.end.132, %cond.true.90
  %cond135 = phi i32 [ %conv92, %cond.true.90 ], [ %cond133, %cond.end.132 ]
  store i32 %cond135, i32* %c, align 4
  %120 = load i32, i32* %bytes, align 4
  %dec = add nsw i32 %120, -1
  store i32 %dec, i32* %bytes, align 4
  %121 = load i64, i64* %pos, align 8
  %122 = load i64, i64* %pos, align 8
  %123 = load i64, i64* %pos, align 8
  %124 = load i32, i32* %bytes, align 4
  %conv136 = sext i32 %124 to i64
  %add137 = add nsw i64 %123, %conv136
  %125 = load i64, i64* %pos, align 8
  %126 = load i32, i32* %bytes, align 4
  %conv138 = sext i32 %126 to i64
  %add139 = add nsw i64 %125, %conv138
  %call140 = call i64 @del_range_2(i64 %121, i64 %122, i64 %add137, i64 %add139, i1 zeroext false)
  %127 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text141 = getelementptr inbounds %struct.buffer, %struct.buffer* %127, i32 0, i32 73
  %128 = load %struct.buffer_text*, %struct.buffer_text** %text141, align 8
  %beg142 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %128, i32 0, i32 0
  %129 = load i8*, i8** %beg142, align 8
  %130 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text143 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 73
  %131 = load %struct.buffer_text*, %struct.buffer_text** %text143, align 8
  %gpt_byte144 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %131, i32 0, i32 3
  %132 = load i64, i64* %gpt_byte144, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %129, i64 %132
  %133 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text146 = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 73
  %134 = load %struct.buffer_text*, %struct.buffer_text** %text146, align 8
  %gap_size147 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %134, i32 0, i32 5
  %135 = load i64, i64* %gap_size147, align 8
  %add.ptr148 = getelementptr inbounds i8, i8* %add.ptr145, i64 %135
  %add.ptr149 = getelementptr inbounds i8, i8* %add.ptr148, i64 -1
  store i8* %add.ptr149, i8** %p, align 8
  %136 = load i32, i32* %c, align 4
  %conv150 = trunc i32 %136 to i8
  %137 = load i8*, i8** %p, align 8
  %incdec.ptr151 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr151, i8** %p, align 8
  store i8 %conv150, i8* %137, align 1
  %138 = load i64, i64* %pos, align 8
  %inc152 = add nsw i64 %138, 1
  store i64 %inc152, i64* %pos, align 8
  %139 = load i64, i64* %begv, align 8
  %140 = load i64, i64* %pos, align 8
  %cmp153 = icmp sgt i64 %139, %140
  br i1 %cmp153, label %if.then.155, label %if.end.157

if.then.155:                                      ; preds = %cond.end.134
  %141 = load i32, i32* %bytes, align 4
  %conv156 = sext i32 %141 to i64
  %142 = load i64, i64* %begv, align 8
  %sub = sub nsw i64 %142, %conv156
  store i64 %sub, i64* %begv, align 8
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.155, %cond.end.134
  %143 = load i64, i64* %zv, align 8
  %144 = load i64, i64* %pos, align 8
  %cmp158 = icmp sgt i64 %143, %144
  br i1 %cmp158, label %if.then.160, label %if.end.163

if.then.160:                                      ; preds = %if.end.157
  %145 = load i32, i32* %bytes, align 4
  %conv161 = sext i32 %145 to i64
  %146 = load i64, i64* %zv, align 8
  %sub162 = sub nsw i64 %146, %conv161
  store i64 %sub162, i64* %zv, align 8
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.160, %if.end.157
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text164 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 73
  %148 = load %struct.buffer_text*, %struct.buffer_text** %text164, align 8
  %z165 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %148, i32 0, i32 2
  %149 = load i64, i64* %z165, align 8
  store i64 %149, i64* %stop, align 8
  br label %if.end.196

if.else.166:                                      ; preds = %lor.lhs.false
  %150 = load i8*, i8** %p, align 8
  %151 = load i8, i8* %150, align 1
  %conv167 = zext i8 %151 to i32
  %and168 = and i32 %conv167, 128
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %cond.false.171, label %cond.true.170

cond.true.170:                                    ; preds = %if.else.166
  br label %cond.end.191

cond.false.171:                                   ; preds = %if.else.166
  %152 = load i8*, i8** %p, align 8
  %153 = load i8, i8* %152, align 1
  %conv172 = zext i8 %153 to i32
  %and173 = and i32 %conv172, 32
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %cond.false.176, label %cond.true.175

cond.true.175:                                    ; preds = %cond.false.171
  br label %cond.end.189

cond.false.176:                                   ; preds = %cond.false.171
  %154 = load i8*, i8** %p, align 8
  %155 = load i8, i8* %154, align 1
  %conv177 = zext i8 %155 to i32
  %and178 = and i32 %conv177, 16
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %cond.false.181, label %cond.true.180

cond.true.180:                                    ; preds = %cond.false.176
  br label %cond.end.187

cond.false.181:                                   ; preds = %cond.false.176
  %156 = load i8*, i8** %p, align 8
  %157 = load i8, i8* %156, align 1
  %conv182 = zext i8 %157 to i32
  %and183 = and i32 %conv182, 8
  %tobool184 = icmp ne i32 %and183, 0
  %lnot185 = xor i1 %tobool184, true
  %cond186 = select i1 %lnot185, i32 4, i32 5
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.false.181, %cond.true.180
  %cond188 = phi i32 [ 3, %cond.true.180 ], [ %cond186, %cond.false.181 ]
  br label %cond.end.189

cond.end.189:                                     ; preds = %cond.end.187, %cond.true.175
  %cond190 = phi i32 [ 2, %cond.true.175 ], [ %cond188, %cond.end.187 ]
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.end.189, %cond.true.170
  %cond192 = phi i32 [ 1, %cond.true.170 ], [ %cond190, %cond.end.189 ]
  store i32 %cond192, i32* %bytes, align 4
  %158 = load i32, i32* %bytes, align 4
  %159 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %158 to i64
  %add.ptr193 = getelementptr inbounds i8, i8* %159, i64 %idx.ext
  store i8* %add.ptr193, i8** %p, align 8
  %160 = load i32, i32* %bytes, align 4
  %conv194 = sext i32 %160 to i64
  %161 = load i64, i64* %pos, align 8
  %add195 = add nsw i64 %161, %conv194
  store i64 %add195, i64* %pos, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %cond.end.191, %if.end.163
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.then.79
  br label %while.body

while.end:                                        ; preds = %if.then.59
  %162 = load i8, i8* %narrowed, align 1
  %tobool198 = trunc i8 %162 to i1
  br i1 %tobool198, label %if.then.199, label %if.end.205

if.then.199:                                      ; preds = %while.end
  %163 = load i64, i64* %begv, align 8
  %shl200 = shl i64 %163, 2
  %add201 = add i64 %shl200, 2
  %164 = load i64, i64* %zv, align 8
  %shl202 = shl i64 %164, 2
  %add203 = add i64 %shl202, 2
  %call204 = call i64 @Fnarrow_to_region(i64 %add201, i64 %add203)
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.199, %while.end
  br label %if.end.751

if.else.206:                                      ; preds = %if.end.27
  %165 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt207 = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 75
  %166 = load i64, i64* %pt207, align 8
  %add208 = add nsw i64 %166, 0
  store i64 %add208, i64* %pt, align 8
  %167 = load i64, i64* %flag.addr, align 8
  %call212 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp213 = icmp eq i64 %167, %call212
  br i1 %cmp213, label %land.lhs.true, label %if.end.274

land.lhs.true:                                    ; preds = %if.else.206
  %168 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text215 = getelementptr inbounds %struct.buffer, %struct.buffer* %168, i32 0, i32 73
  %169 = load %struct.buffer_text*, %struct.buffer_text** %text215, align 8
  %gpt_byte216 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %169, i32 0, i32 3
  %170 = load i64, i64* %gpt_byte216, align 8
  %cmp217 = icmp sgt i64 %170, 1
  br i1 %cmp217, label %land.lhs.true.219, label %if.end.274

land.lhs.true.219:                                ; preds = %land.lhs.true
  %171 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text220 = getelementptr inbounds %struct.buffer, %struct.buffer* %171, i32 0, i32 73
  %172 = load %struct.buffer_text*, %struct.buffer_text** %text220, align 8
  %gpt_byte221 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %172, i32 0, i32 3
  %173 = load i64, i64* %gpt_byte221, align 8
  %174 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text222 = getelementptr inbounds %struct.buffer, %struct.buffer* %174, i32 0, i32 73
  %175 = load %struct.buffer_text*, %struct.buffer_text** %text222, align 8
  %z_byte223 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %175, i32 0, i32 4
  %176 = load i64, i64* %z_byte223, align 8
  %cmp224 = icmp slt i64 %173, %176
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.274

land.lhs.true.226:                                ; preds = %land.lhs.true.219
  %177 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text227 = getelementptr inbounds %struct.buffer, %struct.buffer* %177, i32 0, i32 73
  %178 = load %struct.buffer_text*, %struct.buffer_text** %text227, align 8
  %beg228 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %178, i32 0, i32 0
  %179 = load i8*, i8** %beg228, align 8
  %180 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text229 = getelementptr inbounds %struct.buffer, %struct.buffer* %180, i32 0, i32 73
  %181 = load %struct.buffer_text*, %struct.buffer_text** %text229, align 8
  %gpt_byte230 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %181, i32 0, i32 3
  %182 = load i64, i64* %gpt_byte230, align 8
  %add.ptr231 = getelementptr inbounds i8, i8* %179, i64 %182
  %183 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text232 = getelementptr inbounds %struct.buffer, %struct.buffer* %183, i32 0, i32 73
  %184 = load %struct.buffer_text*, %struct.buffer_text** %text232, align 8
  %gap_size233 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %184, i32 0, i32 5
  %185 = load i64, i64* %gap_size233, align 8
  %add.ptr234 = getelementptr inbounds i8, i8* %add.ptr231, i64 %185
  %add.ptr235 = getelementptr inbounds i8, i8* %add.ptr234, i64 -1
  %186 = load i8, i8* %add.ptr235, align 1
  %conv236 = zext i8 %186 to i32
  %and237 = and i32 %conv236, 192
  %cmp238 = icmp ne i32 %and237, 128
  br i1 %cmp238, label %if.end.274, label %if.then.240

if.then.240:                                      ; preds = %land.lhs.true.226
  %187 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i32 0, i32 73
  %188 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %beg242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %188, i32 0, i32 0
  %189 = load i8*, i8** %beg242, align 8
  %190 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text243 = getelementptr inbounds %struct.buffer, %struct.buffer* %190, i32 0, i32 73
  %191 = load %struct.buffer_text*, %struct.buffer_text** %text243, align 8
  %gpt_byte244 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %191, i32 0, i32 3
  %192 = load i64, i64* %gpt_byte244, align 8
  %add.ptr245 = getelementptr inbounds i8, i8* %189, i64 %192
  %add.ptr246 = getelementptr inbounds i8, i8* %add.ptr245, i64 -1
  %add.ptr247 = getelementptr inbounds i8, i8* %add.ptr246, i64 -1
  store i8* %add.ptr247, i8** %q, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body.256, %if.then.240
  %193 = load i8*, i8** %q, align 8
  %194 = load i8, i8* %193, align 1
  %conv248 = zext i8 %194 to i32
  %and249 = and i32 %conv248, 192
  %cmp250 = icmp ne i32 %and249, 128
  br i1 %cmp250, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %195 = load i8*, i8** %q, align 8
  %196 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text252 = getelementptr inbounds %struct.buffer, %struct.buffer* %196, i32 0, i32 73
  %197 = load %struct.buffer_text*, %struct.buffer_text** %text252, align 8
  %beg253 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %197, i32 0, i32 0
  %198 = load i8*, i8** %beg253, align 8
  %cmp254 = icmp ugt i8* %195, %198
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %199 = phi i1 [ false, %while.cond ], [ %cmp254, %land.rhs ]
  br i1 %199, label %while.body.256, label %while.end.258

while.body.256:                                   ; preds = %land.end
  %200 = load i8*, i8** %q, align 8
  %incdec.ptr257 = getelementptr inbounds i8, i8* %200, i32 -1
  store i8* %incdec.ptr257, i8** %q, align 8
  br label %while.cond

while.end.258:                                    ; preds = %land.end
  %201 = load i8*, i8** %q, align 8
  %202 = load i8, i8* %201, align 1
  %conv259 = zext i8 %202 to i32
  %and260 = and i32 %conv259, 192
  %cmp261 = icmp eq i32 %and260, 192
  br i1 %cmp261, label %if.then.263, label %if.end.273

if.then.263:                                      ; preds = %while.end.258
  %203 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text264 = getelementptr inbounds %struct.buffer, %struct.buffer* %203, i32 0, i32 73
  %204 = load %struct.buffer_text*, %struct.buffer_text** %text264, align 8
  %gpt_byte265 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %204, i32 0, i32 3
  %205 = load i64, i64* %gpt_byte265, align 8
  %206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text266 = getelementptr inbounds %struct.buffer, %struct.buffer* %206, i32 0, i32 73
  %207 = load %struct.buffer_text*, %struct.buffer_text** %text266, align 8
  %beg267 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %207, i32 0, i32 0
  %208 = load i8*, i8** %beg267, align 8
  %209 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text268 = getelementptr inbounds %struct.buffer, %struct.buffer* %209, i32 0, i32 73
  %210 = load %struct.buffer_text*, %struct.buffer_text** %text268, align 8
  %gpt_byte269 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %210, i32 0, i32 3
  %211 = load i64, i64* %gpt_byte269, align 8
  %add.ptr270 = getelementptr inbounds i8, i8* %208, i64 %211
  %add.ptr271 = getelementptr inbounds i8, i8* %add.ptr270, i64 -1
  %212 = load i8*, i8** %q, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr271 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %212 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub272 = sub nsw i64 %205, %sub.ptr.sub
  store i64 %sub272, i64* %new_gpt, align 8
  %213 = load i64, i64* %new_gpt, align 8
  %214 = load i64, i64* %new_gpt, align 8
  call void @move_gap_both(i64 %213, i64 %214)
  br label %if.end.273

if.end.273:                                       ; preds = %if.then.263, %while.end.258
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %land.lhs.true.226, %land.lhs.true.219, %land.lhs.true, %if.else.206
  store i64 1, i64* %pos209, align 8
  %215 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text275 = getelementptr inbounds %struct.buffer, %struct.buffer* %215, i32 0, i32 73
  %216 = load %struct.buffer_text*, %struct.buffer_text** %text275, align 8
  %gpt276 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %216, i32 0, i32 1
  %217 = load i64, i64* %gpt276, align 8
  store i64 %217, i64* %stop210, align 8
  %218 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text277 = getelementptr inbounds %struct.buffer, %struct.buffer* %218, i32 0, i32 73
  %219 = load %struct.buffer_text*, %struct.buffer_text** %text277, align 8
  %beg278 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %219, i32 0, i32 0
  %220 = load i8*, i8** %beg278, align 8
  store i8* %220, i8** %p211, align 8
  %221 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text279 = getelementptr inbounds %struct.buffer, %struct.buffer* %221, i32 0, i32 73
  %222 = load %struct.buffer_text*, %struct.buffer_text** %text279, align 8
  %beg280 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %222, i32 0, i32 0
  %223 = load i8*, i8** %beg280, align 8
  %224 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text281 = getelementptr inbounds %struct.buffer, %struct.buffer* %224, i32 0, i32 73
  %225 = load %struct.buffer_text*, %struct.buffer_text** %text281, align 8
  %gpt_byte282 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %225, i32 0, i32 3
  %226 = load i64, i64* %gpt_byte282, align 8
  %add.ptr283 = getelementptr inbounds i8, i8* %223, i64 %226
  %add.ptr284 = getelementptr inbounds i8, i8* %add.ptr283, i64 -1
  store i8* %add.ptr284, i8** %pend, align 8
  br label %while.body.286

while.body.286:                                   ; preds = %if.end.274, %if.end.572
  %227 = load i64, i64* %pos209, align 8
  %228 = load i64, i64* %stop210, align 8
  %cmp288 = icmp eq i64 %227, %228
  br i1 %cmp288, label %if.then.290, label %if.end.317

if.then.290:                                      ; preds = %while.body.286
  %229 = load i64, i64* %pos209, align 8
  %230 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text291 = getelementptr inbounds %struct.buffer, %struct.buffer* %230, i32 0, i32 73
  %231 = load %struct.buffer_text*, %struct.buffer_text** %text291, align 8
  %z292 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %231, i32 0, i32 2
  %232 = load i64, i64* %z292, align 8
  %cmp293 = icmp eq i64 %229, %232
  br i1 %cmp293, label %if.then.295, label %if.end.296

if.then.295:                                      ; preds = %if.then.290
  br label %while.end.573

if.end.296:                                       ; preds = %if.then.290
  %233 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text297 = getelementptr inbounds %struct.buffer, %struct.buffer* %233, i32 0, i32 73
  %234 = load %struct.buffer_text*, %struct.buffer_text** %text297, align 8
  %beg298 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %234, i32 0, i32 0
  %235 = load i8*, i8** %beg298, align 8
  %236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text299 = getelementptr inbounds %struct.buffer, %struct.buffer* %236, i32 0, i32 73
  %237 = load %struct.buffer_text*, %struct.buffer_text** %text299, align 8
  %gpt_byte300 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %237, i32 0, i32 3
  %238 = load i64, i64* %gpt_byte300, align 8
  %add.ptr301 = getelementptr inbounds i8, i8* %235, i64 %238
  %239 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text302 = getelementptr inbounds %struct.buffer, %struct.buffer* %239, i32 0, i32 73
  %240 = load %struct.buffer_text*, %struct.buffer_text** %text302, align 8
  %gap_size303 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %240, i32 0, i32 5
  %241 = load i64, i64* %gap_size303, align 8
  %add.ptr304 = getelementptr inbounds i8, i8* %add.ptr301, i64 %241
  %add.ptr305 = getelementptr inbounds i8, i8* %add.ptr304, i64 -1
  store i8* %add.ptr305, i8** %p211, align 8
  %242 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text306 = getelementptr inbounds %struct.buffer, %struct.buffer* %242, i32 0, i32 73
  %243 = load %struct.buffer_text*, %struct.buffer_text** %text306, align 8
  %beg307 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %243, i32 0, i32 0
  %244 = load i8*, i8** %beg307, align 8
  %245 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text308 = getelementptr inbounds %struct.buffer, %struct.buffer* %245, i32 0, i32 73
  %246 = load %struct.buffer_text*, %struct.buffer_text** %text308, align 8
  %gap_size309 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %246, i32 0, i32 5
  %247 = load i64, i64* %gap_size309, align 8
  %add.ptr310 = getelementptr inbounds i8, i8* %244, i64 %247
  %248 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text311 = getelementptr inbounds %struct.buffer, %struct.buffer* %248, i32 0, i32 73
  %249 = load %struct.buffer_text*, %struct.buffer_text** %text311, align 8
  %z_byte312 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %249, i32 0, i32 4
  %250 = load i64, i64* %z_byte312, align 8
  %add.ptr313 = getelementptr inbounds i8, i8* %add.ptr310, i64 %250
  %add.ptr314 = getelementptr inbounds i8, i8* %add.ptr313, i64 -1
  store i8* %add.ptr314, i8** %pend, align 8
  %251 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text315 = getelementptr inbounds %struct.buffer, %struct.buffer* %251, i32 0, i32 73
  %252 = load %struct.buffer_text*, %struct.buffer_text** %text315, align 8
  %z316 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %252, i32 0, i32 2
  %253 = load i64, i64* %z316, align 8
  store i64 %253, i64* %stop210, align 8
  br label %if.end.317

if.end.317:                                       ; preds = %if.end.296, %while.body.286
  br i1 true, label %cond.true.318, label %cond.false.323

cond.true.318:                                    ; preds = %if.end.317
  %254 = load i8*, i8** %p211, align 8
  %255 = load i8, i8* %254, align 1
  %conv319 = zext i8 %255 to i32
  %add320 = add i32 %conv319, 0
  %cmp321 = icmp ult i32 %add320, 128
  br i1 %cmp321, label %if.then.328, label %if.else.331

cond.false.323:                                   ; preds = %if.end.317
  %256 = load i8*, i8** %p211, align 8
  %257 = load i8, i8* %256, align 1
  %conv324 = zext i8 %257 to i64
  %add325 = add i64 %conv324, 0
  %cmp326 = icmp ult i64 %add325, 128
  br i1 %cmp326, label %if.then.328, label %if.else.331

if.then.328:                                      ; preds = %cond.false.323, %cond.true.318
  %258 = load i8*, i8** %p211, align 8
  %incdec.ptr329 = getelementptr inbounds i8, i8* %258, i32 1
  store i8* %incdec.ptr329, i8** %p211, align 8
  %259 = load i64, i64* %pos209, align 8
  %inc330 = add nsw i64 %259, 1
  store i64 %inc330, i64* %pos209, align 8
  br label %if.end.572

if.else.331:                                      ; preds = %cond.false.323, %cond.true.318
  %260 = load i64, i64* %flag.addr, align 8
  %call332 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp333 = icmp eq i64 %260, %call332
  br i1 %cmp333, label %land.lhs.true.335, label %if.else.456

land.lhs.true.335:                                ; preds = %if.else.331
  %261 = load i8*, i8** %p211, align 8
  %262 = load i8, i8* %261, align 1
  %conv336 = zext i8 %262 to i32
  %cmp337 = icmp eq i32 %conv336, 192
  br i1 %cmp337, label %if.else.456, label %lor.lhs.false.339

lor.lhs.false.339:                                ; preds = %land.lhs.true.335
  %263 = load i8*, i8** %p211, align 8
  %264 = load i8, i8* %263, align 1
  %conv340 = zext i8 %264 to i32
  %cmp341 = icmp eq i32 %conv340, 193
  br i1 %cmp341, label %if.else.456, label %land.lhs.true.343

land.lhs.true.343:                                ; preds = %lor.lhs.false.339
  %265 = load i8*, i8** %p211, align 8
  %266 = load i8*, i8** %pend, align 8
  %cmp344 = icmp uge i8* %265, %266
  br i1 %cmp344, label %cond.true.346, label %cond.false.347

cond.true.346:                                    ; preds = %land.lhs.true.343
  br label %cond.end.447

cond.false.347:                                   ; preds = %land.lhs.true.343
  %267 = load i8*, i8** %p211, align 8
  %arrayidx348 = getelementptr inbounds i8, i8* %267, i64 0
  %268 = load i8, i8* %arrayidx348, align 1
  %conv349 = zext i8 %268 to i32
  %and350 = and i32 %conv349, 128
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %cond.false.353, label %cond.true.352

cond.true.352:                                    ; preds = %cond.false.347
  br label %cond.end.445

cond.false.353:                                   ; preds = %cond.false.347
  %269 = load i8*, i8** %p211, align 8
  %add.ptr354 = getelementptr inbounds i8, i8* %269, i64 1
  %270 = load i8*, i8** %pend, align 8
  %cmp355 = icmp uge i8* %add.ptr354, %270
  br i1 %cmp355, label %cond.true.363, label %lor.lhs.false.357

lor.lhs.false.357:                                ; preds = %cond.false.353
  %271 = load i8*, i8** %p211, align 8
  %arrayidx358 = getelementptr inbounds i8, i8* %271, i64 1
  %272 = load i8, i8* %arrayidx358, align 1
  %conv359 = zext i8 %272 to i32
  %and360 = and i32 %conv359, 192
  %cmp361 = icmp ne i32 %and360, 128
  br i1 %cmp361, label %cond.true.363, label %cond.false.364

cond.true.363:                                    ; preds = %lor.lhs.false.357, %cond.false.353
  br label %cond.end.443

cond.false.364:                                   ; preds = %lor.lhs.false.357
  %273 = load i8*, i8** %p211, align 8
  %arrayidx365 = getelementptr inbounds i8, i8* %273, i64 0
  %274 = load i8, i8* %arrayidx365, align 1
  %conv366 = zext i8 %274 to i32
  %and367 = and i32 %conv366, 224
  %cmp368 = icmp eq i32 %and367, 192
  br i1 %cmp368, label %cond.true.370, label %cond.false.371

cond.true.370:                                    ; preds = %cond.false.364
  br label %cond.end.441

cond.false.371:                                   ; preds = %cond.false.364
  %275 = load i8*, i8** %p211, align 8
  %add.ptr372 = getelementptr inbounds i8, i8* %275, i64 2
  %276 = load i8*, i8** %pend, align 8
  %cmp373 = icmp uge i8* %add.ptr372, %276
  br i1 %cmp373, label %cond.true.381, label %lor.lhs.false.375

lor.lhs.false.375:                                ; preds = %cond.false.371
  %277 = load i8*, i8** %p211, align 8
  %arrayidx376 = getelementptr inbounds i8, i8* %277, i64 2
  %278 = load i8, i8* %arrayidx376, align 1
  %conv377 = zext i8 %278 to i32
  %and378 = and i32 %conv377, 192
  %cmp379 = icmp ne i32 %and378, 128
  br i1 %cmp379, label %cond.true.381, label %cond.false.382

cond.true.381:                                    ; preds = %lor.lhs.false.375, %cond.false.371
  br label %cond.end.439

cond.false.382:                                   ; preds = %lor.lhs.false.375
  %279 = load i8*, i8** %p211, align 8
  %arrayidx383 = getelementptr inbounds i8, i8* %279, i64 0
  %280 = load i8, i8* %arrayidx383, align 1
  %conv384 = zext i8 %280 to i32
  %and385 = and i32 %conv384, 240
  %cmp386 = icmp eq i32 %and385, 224
  br i1 %cmp386, label %cond.true.388, label %cond.false.389

cond.true.388:                                    ; preds = %cond.false.382
  br label %cond.end.437

cond.false.389:                                   ; preds = %cond.false.382
  %281 = load i8*, i8** %p211, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %281, i64 3
  %282 = load i8*, i8** %pend, align 8
  %cmp391 = icmp uge i8* %add.ptr390, %282
  br i1 %cmp391, label %cond.true.399, label %lor.lhs.false.393

lor.lhs.false.393:                                ; preds = %cond.false.389
  %283 = load i8*, i8** %p211, align 8
  %arrayidx394 = getelementptr inbounds i8, i8* %283, i64 3
  %284 = load i8, i8* %arrayidx394, align 1
  %conv395 = zext i8 %284 to i32
  %and396 = and i32 %conv395, 192
  %cmp397 = icmp ne i32 %and396, 128
  br i1 %cmp397, label %cond.true.399, label %cond.false.400

cond.true.399:                                    ; preds = %lor.lhs.false.393, %cond.false.389
  br label %cond.end.435

cond.false.400:                                   ; preds = %lor.lhs.false.393
  %285 = load i8*, i8** %p211, align 8
  %arrayidx401 = getelementptr inbounds i8, i8* %285, i64 0
  %286 = load i8, i8* %arrayidx401, align 1
  %conv402 = zext i8 %286 to i32
  %and403 = and i32 %conv402, 248
  %cmp404 = icmp eq i32 %and403, 240
  br i1 %cmp404, label %cond.true.406, label %cond.false.407

cond.true.406:                                    ; preds = %cond.false.400
  br label %cond.end.433

cond.false.407:                                   ; preds = %cond.false.400
  %287 = load i8*, i8** %p211, align 8
  %add.ptr408 = getelementptr inbounds i8, i8* %287, i64 4
  %288 = load i8*, i8** %pend, align 8
  %cmp409 = icmp uge i8* %add.ptr408, %288
  br i1 %cmp409, label %cond.true.417, label %lor.lhs.false.411

lor.lhs.false.411:                                ; preds = %cond.false.407
  %289 = load i8*, i8** %p211, align 8
  %arrayidx412 = getelementptr inbounds i8, i8* %289, i64 4
  %290 = load i8, i8* %arrayidx412, align 1
  %conv413 = zext i8 %290 to i32
  %and414 = and i32 %conv413, 192
  %cmp415 = icmp ne i32 %and414, 128
  br i1 %cmp415, label %cond.true.417, label %cond.false.418

cond.true.417:                                    ; preds = %lor.lhs.false.411, %cond.false.407
  br label %cond.end.431

cond.false.418:                                   ; preds = %lor.lhs.false.411
  %291 = load i8*, i8** %p211, align 8
  %arrayidx419 = getelementptr inbounds i8, i8* %291, i64 0
  %292 = load i8, i8* %arrayidx419, align 1
  %conv420 = zext i8 %292 to i32
  %cmp421 = icmp eq i32 %conv420, 248
  br i1 %cmp421, label %land.rhs.423, label %land.end.429

land.rhs.423:                                     ; preds = %cond.false.418
  %293 = load i8*, i8** %p211, align 8
  %arrayidx424 = getelementptr inbounds i8, i8* %293, i64 1
  %294 = load i8, i8* %arrayidx424, align 1
  %conv425 = zext i8 %294 to i32
  %and426 = and i32 %conv425, 240
  %cmp427 = icmp eq i32 %and426, 128
  br label %land.end.429

land.end.429:                                     ; preds = %land.rhs.423, %cond.false.418
  %295 = phi i1 [ false, %cond.false.418 ], [ %cmp427, %land.rhs.423 ]
  %cond430 = select i1 %295, i32 5, i32 0
  br label %cond.end.431

cond.end.431:                                     ; preds = %land.end.429, %cond.true.417
  %cond432 = phi i32 [ 0, %cond.true.417 ], [ %cond430, %land.end.429 ]
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.end.431, %cond.true.406
  %cond434 = phi i32 [ 4, %cond.true.406 ], [ %cond432, %cond.end.431 ]
  br label %cond.end.435

cond.end.435:                                     ; preds = %cond.end.433, %cond.true.399
  %cond436 = phi i32 [ 0, %cond.true.399 ], [ %cond434, %cond.end.433 ]
  br label %cond.end.437

cond.end.437:                                     ; preds = %cond.end.435, %cond.true.388
  %cond438 = phi i32 [ 3, %cond.true.388 ], [ %cond436, %cond.end.435 ]
  br label %cond.end.439

cond.end.439:                                     ; preds = %cond.end.437, %cond.true.381
  %cond440 = phi i32 [ 0, %cond.true.381 ], [ %cond438, %cond.end.437 ]
  br label %cond.end.441

cond.end.441:                                     ; preds = %cond.end.439, %cond.true.370
  %cond442 = phi i32 [ 2, %cond.true.370 ], [ %cond440, %cond.end.439 ]
  br label %cond.end.443

cond.end.443:                                     ; preds = %cond.end.441, %cond.true.363
  %cond444 = phi i32 [ 0, %cond.true.363 ], [ %cond442, %cond.end.441 ]
  br label %cond.end.445

cond.end.445:                                     ; preds = %cond.end.443, %cond.true.352
  %cond446 = phi i32 [ 1, %cond.true.352 ], [ %cond444, %cond.end.443 ]
  br label %cond.end.447

cond.end.447:                                     ; preds = %cond.end.445, %cond.true.346
  %cond448 = phi i32 [ 0, %cond.true.346 ], [ %cond446, %cond.end.445 ]
  store i32 %cond448, i32* %bytes287, align 4
  %cmp449 = icmp sgt i32 %cond448, 0
  br i1 %cmp449, label %if.then.451, label %if.else.456

if.then.451:                                      ; preds = %cond.end.447
  %296 = load i32, i32* %bytes287, align 4
  %297 = load i8*, i8** %p211, align 8
  %idx.ext452 = sext i32 %296 to i64
  %add.ptr453 = getelementptr inbounds i8, i8* %297, i64 %idx.ext452
  store i8* %add.ptr453, i8** %p211, align 8
  %298 = load i32, i32* %bytes287, align 4
  %conv454 = sext i32 %298 to i64
  %299 = load i64, i64* %pos209, align 8
  %add455 = add nsw i64 %299, %conv454
  store i64 %add455, i64* %pos209, align 8
  br label %if.end.571

if.else.456:                                      ; preds = %cond.end.447, %lor.lhs.false.339, %land.lhs.true.335, %if.else.331
  %300 = load i8*, i8** %p211, align 8
  %301 = load i8, i8* %300, align 1
  %conv459 = zext i8 %301 to i32
  %add460 = add nsw i32 %conv459, 4194048
  store i32 %add460, i32* %c458, align 4
  br i1 true, label %cond.true.461, label %cond.false.465

cond.true.461:                                    ; preds = %if.else.456
  %302 = load i32, i32* %c458, align 4
  %add462 = add i32 %302, 0
  %cmp463 = icmp ule i32 %add462, 127
  br i1 %cmp463, label %cond.true.470, label %cond.false.473

cond.false.465:                                   ; preds = %if.else.456
  %303 = load i32, i32* %c458, align 4
  %conv466 = sext i32 %303 to i64
  %add467 = add i64 %conv466, 0
  %cmp468 = icmp ule i64 %add467, 127
  br i1 %cmp468, label %cond.true.470, label %cond.false.473

cond.true.470:                                    ; preds = %cond.false.465, %cond.true.461
  %304 = load i32, i32* %c458, align 4
  %conv471 = trunc i32 %304 to i8
  %arrayidx472 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 0
  store i8 %conv471, i8* %arrayidx472, align 1
  br label %cond.end.521

cond.false.473:                                   ; preds = %cond.false.465, %cond.true.461
  br i1 true, label %cond.true.474, label %cond.false.478

cond.true.474:                                    ; preds = %cond.false.473
  %305 = load i32, i32* %c458, align 4
  %add475 = add i32 %305, 0
  %cmp476 = icmp ule i32 %add475, 2047
  br i1 %cmp476, label %cond.true.483, label %cond.false.491

cond.false.478:                                   ; preds = %cond.false.473
  %306 = load i32, i32* %c458, align 4
  %conv479 = sext i32 %306 to i64
  %add480 = add i64 %conv479, 0
  %cmp481 = icmp ule i64 %add480, 2047
  br i1 %cmp481, label %cond.true.483, label %cond.false.491

cond.true.483:                                    ; preds = %cond.false.478, %cond.true.474
  %307 = load i32, i32* %c458, align 4
  %shr = ashr i32 %307, 6
  %or484 = or i32 192, %shr
  %conv485 = trunc i32 %or484 to i8
  %arrayidx486 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 0
  store i8 %conv485, i8* %arrayidx486, align 1
  %308 = load i32, i32* %c458, align 4
  %and487 = and i32 %308, 63
  %or488 = or i32 128, %and487
  %conv489 = trunc i32 %or488 to i8
  %arrayidx490 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 1
  store i8 %conv489, i8* %arrayidx490, align 1
  br label %cond.end.519

cond.false.491:                                   ; preds = %cond.false.478, %cond.true.474
  br i1 true, label %cond.true.492, label %cond.false.496

cond.true.492:                                    ; preds = %cond.false.491
  %309 = load i32, i32* %c458, align 4
  %add493 = add i32 %309, 0
  %cmp494 = icmp ule i32 %add493, 65535
  br i1 %cmp494, label %cond.true.501, label %cond.false.515

cond.false.496:                                   ; preds = %cond.false.491
  %310 = load i32, i32* %c458, align 4
  %conv497 = sext i32 %310 to i64
  %add498 = add i64 %conv497, 0
  %cmp499 = icmp ule i64 %add498, 65535
  br i1 %cmp499, label %cond.true.501, label %cond.false.515

cond.true.501:                                    ; preds = %cond.false.496, %cond.true.492
  %311 = load i32, i32* %c458, align 4
  %shr502 = ashr i32 %311, 12
  %or503 = or i32 224, %shr502
  %conv504 = trunc i32 %or503 to i8
  %arrayidx505 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 0
  store i8 %conv504, i8* %arrayidx505, align 1
  %312 = load i32, i32* %c458, align 4
  %shr506 = ashr i32 %312, 6
  %and507 = and i32 %shr506, 63
  %or508 = or i32 128, %and507
  %conv509 = trunc i32 %or508 to i8
  %arrayidx510 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 1
  store i8 %conv509, i8* %arrayidx510, align 1
  %313 = load i32, i32* %c458, align 4
  %and511 = and i32 %313, 63
  %or512 = or i32 128, %and511
  %conv513 = trunc i32 %or512 to i8
  %arrayidx514 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 2
  store i8 %conv513, i8* %arrayidx514, align 1
  br label %cond.end.517

cond.false.515:                                   ; preds = %cond.false.496, %cond.true.492
  %314 = load i32, i32* %c458, align 4
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i32 0
  %call516 = call i32 @char_string(i32 %314, i8* %arraydecay)
  br label %cond.end.517

cond.end.517:                                     ; preds = %cond.false.515, %cond.true.501
  %cond518 = phi i32 [ 3, %cond.true.501 ], [ %call516, %cond.false.515 ]
  br label %cond.end.519

cond.end.519:                                     ; preds = %cond.end.517, %cond.true.483
  %cond520 = phi i32 [ 2, %cond.true.483 ], [ %cond518, %cond.end.517 ]
  br label %cond.end.521

cond.end.521:                                     ; preds = %cond.end.519, %cond.true.470
  %cond522 = phi i32 [ 1, %cond.true.470 ], [ %cond520, %cond.end.519 ]
  store i32 %cond522, i32* %bytes287, align 4
  %arrayidx523 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i64 0
  %315 = load i8, i8* %arrayidx523, align 1
  %316 = load i8*, i8** %p211, align 8
  store i8 %315, i8* %316, align 1
  %317 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %318 = load i64, i64* %pos209, align 8
  %add524 = add nsw i64 %318, 1
  %319 = load i64, i64* %pos209, align 8
  %add525 = add nsw i64 %319, 1
  call void @temp_set_point_both(%struct.buffer* %317, i64 %add524, i64 %add525)
  %320 = load i32, i32* %bytes287, align 4
  %dec526 = add nsw i32 %320, -1
  store i32 %dec526, i32* %bytes287, align 4
  %arraydecay527 = getelementptr inbounds [5 x i8], [5 x i8]* %tmp, i32 0, i32 0
  %add.ptr528 = getelementptr inbounds i8, i8* %arraydecay527, i64 1
  %321 = load i32, i32* %bytes287, align 4
  %conv529 = sext i32 %321 to i64
  %322 = load i32, i32* %bytes287, align 4
  %conv530 = sext i32 %322 to i64
  call void @insert_1_both(i8* %add.ptr528, i64 %conv529, i64 %conv530, i1 zeroext true, i1 zeroext false, i1 zeroext false)
  %323 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text531 = getelementptr inbounds %struct.buffer, %struct.buffer* %323, i32 0, i32 73
  %324 = load %struct.buffer_text*, %struct.buffer_text** %text531, align 8
  %gpt532 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %324, i32 0, i32 1
  %325 = load i64, i64* %gpt532, align 8
  store i64 %325, i64* %pos209, align 8
  %326 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text533 = getelementptr inbounds %struct.buffer, %struct.buffer* %326, i32 0, i32 73
  %327 = load %struct.buffer_text*, %struct.buffer_text** %text533, align 8
  %beg534 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %327, i32 0, i32 0
  %328 = load i8*, i8** %beg534, align 8
  %329 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text535 = getelementptr inbounds %struct.buffer, %struct.buffer* %329, i32 0, i32 73
  %330 = load %struct.buffer_text*, %struct.buffer_text** %text535, align 8
  %gpt_byte536 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %330, i32 0, i32 3
  %331 = load i64, i64* %gpt_byte536, align 8
  %add.ptr537 = getelementptr inbounds i8, i8* %328, i64 %331
  %332 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text538 = getelementptr inbounds %struct.buffer, %struct.buffer* %332, i32 0, i32 73
  %333 = load %struct.buffer_text*, %struct.buffer_text** %text538, align 8
  %gap_size539 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %333, i32 0, i32 5
  %334 = load i64, i64* %gap_size539, align 8
  %add.ptr540 = getelementptr inbounds i8, i8* %add.ptr537, i64 %334
  %add.ptr541 = getelementptr inbounds i8, i8* %add.ptr540, i64 -1
  store i8* %add.ptr541, i8** %p211, align 8
  %335 = load i64, i64* %pos209, align 8
  %336 = load i64, i64* %begv, align 8
  %cmp542 = icmp sle i64 %335, %336
  br i1 %cmp542, label %if.then.544, label %if.end.547

if.then.544:                                      ; preds = %cond.end.521
  %337 = load i32, i32* %bytes287, align 4
  %conv545 = sext i32 %337 to i64
  %338 = load i64, i64* %begv, align 8
  %add546 = add nsw i64 %338, %conv545
  store i64 %add546, i64* %begv, align 8
  br label %if.end.547

if.end.547:                                       ; preds = %if.then.544, %cond.end.521
  %339 = load i64, i64* %pos209, align 8
  %340 = load i64, i64* %zv, align 8
  %cmp548 = icmp sle i64 %339, %340
  br i1 %cmp548, label %if.then.550, label %if.end.553

if.then.550:                                      ; preds = %if.end.547
  %341 = load i32, i32* %bytes287, align 4
  %conv551 = sext i32 %341 to i64
  %342 = load i64, i64* %zv, align 8
  %add552 = add nsw i64 %342, %conv551
  store i64 %add552, i64* %zv, align 8
  br label %if.end.553

if.end.553:                                       ; preds = %if.then.550, %if.end.547
  %343 = load i64, i64* %pos209, align 8
  %344 = load i64, i64* %pt, align 8
  %cmp554 = icmp sle i64 %343, %344
  br i1 %cmp554, label %if.then.556, label %if.end.559

if.then.556:                                      ; preds = %if.end.553
  %345 = load i32, i32* %bytes287, align 4
  %conv557 = sext i32 %345 to i64
  %346 = load i64, i64* %pt, align 8
  %add558 = add nsw i64 %346, %conv557
  store i64 %add558, i64* %pt, align 8
  br label %if.end.559

if.end.559:                                       ; preds = %if.then.556, %if.end.553
  %347 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text560 = getelementptr inbounds %struct.buffer, %struct.buffer* %347, i32 0, i32 73
  %348 = load %struct.buffer_text*, %struct.buffer_text** %text560, align 8
  %beg561 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %348, i32 0, i32 0
  %349 = load i8*, i8** %beg561, align 8
  %350 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text562 = getelementptr inbounds %struct.buffer, %struct.buffer* %350, i32 0, i32 73
  %351 = load %struct.buffer_text*, %struct.buffer_text** %text562, align 8
  %gap_size563 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %351, i32 0, i32 5
  %352 = load i64, i64* %gap_size563, align 8
  %add.ptr564 = getelementptr inbounds i8, i8* %349, i64 %352
  %353 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text565 = getelementptr inbounds %struct.buffer, %struct.buffer* %353, i32 0, i32 73
  %354 = load %struct.buffer_text*, %struct.buffer_text** %text565, align 8
  %z_byte566 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %354, i32 0, i32 4
  %355 = load i64, i64* %z_byte566, align 8
  %add.ptr567 = getelementptr inbounds i8, i8* %add.ptr564, i64 %355
  %add.ptr568 = getelementptr inbounds i8, i8* %add.ptr567, i64 -1
  store i8* %add.ptr568, i8** %pend, align 8
  %356 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text569 = getelementptr inbounds %struct.buffer, %struct.buffer* %356, i32 0, i32 73
  %357 = load %struct.buffer_text*, %struct.buffer_text** %text569, align 8
  %z570 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %357, i32 0, i32 2
  %358 = load i64, i64* %z570, align 8
  store i64 %358, i64* %stop210, align 8
  br label %if.end.571

if.end.571:                                       ; preds = %if.end.559, %if.then.451
  br label %if.end.572

if.end.572:                                       ; preds = %if.end.571, %if.then.328
  br label %while.body.286

while.end.573:                                    ; preds = %if.then.295
  %359 = load i64, i64* %pt, align 8
  %360 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt574 = getelementptr inbounds %struct.buffer, %struct.buffer* %360, i32 0, i32 75
  %361 = load i64, i64* %pt574, align 8
  %add575 = add nsw i64 %361, 0
  %cmp576 = icmp ne i64 %359, %add575
  br i1 %cmp576, label %if.then.578, label %if.end.579

if.then.578:                                      ; preds = %while.end.573
  %362 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %363 = load i64, i64* %pt, align 8
  call void @temp_set_point(%struct.buffer* %362, i64 %363)
  br label %if.end.579

if.end.579:                                       ; preds = %if.then.578, %while.end.573
  %364 = load i8, i8* %narrowed, align 1
  %tobool580 = trunc i8 %364 to i1
  br i1 %tobool580, label %if.then.581, label %if.end.587

if.then.581:                                      ; preds = %if.end.579
  %365 = load i64, i64* %begv, align 8
  %shl582 = shl i64 %365, 2
  %add583 = add i64 %shl582, 2
  %366 = load i64, i64* %zv, align 8
  %shl584 = shl i64 %366, 2
  %add585 = add i64 %shl584, 2
  %call586 = call i64 @Fnarrow_to_region(i64 %add583, i64 %add585)
  br label %if.end.587

if.end.587:                                       ; preds = %if.then.581, %if.end.579
  %367 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call588 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_enable_multibyte_characters(%struct.buffer* %367, i64 %call588)
  %368 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text589 = getelementptr inbounds %struct.buffer, %struct.buffer* %368, i32 0, i32 73
  %369 = load %struct.buffer_text*, %struct.buffer_text** %text589, align 8
  %gpt_byte590 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %369, i32 0, i32 3
  %370 = load i64, i64* %gpt_byte590, align 8
  %call591 = call i64 @advance_to_char_boundary(i64 %370)
  %371 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text592 = getelementptr inbounds %struct.buffer, %struct.buffer* %371, i32 0, i32 73
  %372 = load %struct.buffer_text*, %struct.buffer_text** %text592, align 8
  %gpt_byte593 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %372, i32 0, i32 3
  store i64 %call591, i64* %gpt_byte593, align 8
  %373 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text594 = getelementptr inbounds %struct.buffer, %struct.buffer* %373, i32 0, i32 73
  %374 = load %struct.buffer_text*, %struct.buffer_text** %text594, align 8
  %beg595 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %374, i32 0, i32 0
  %375 = load i8*, i8** %beg595, align 8
  %376 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text596 = getelementptr inbounds %struct.buffer, %struct.buffer* %376, i32 0, i32 73
  %377 = load %struct.buffer_text*, %struct.buffer_text** %text596, align 8
  %gpt_byte597 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %377, i32 0, i32 3
  %378 = load i64, i64* %gpt_byte597, align 8
  %sub598 = sub nsw i64 %378, 1
  %call599 = call i64 @chars_in_text(i8* %375, i64 %sub598)
  %add600 = add nsw i64 %call599, 1
  %379 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text601 = getelementptr inbounds %struct.buffer, %struct.buffer* %379, i32 0, i32 73
  %380 = load %struct.buffer_text*, %struct.buffer_text** %text601, align 8
  %gpt602 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %380, i32 0, i32 1
  store i64 %add600, i64* %gpt602, align 8
  %381 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text603 = getelementptr inbounds %struct.buffer, %struct.buffer* %381, i32 0, i32 73
  %382 = load %struct.buffer_text*, %struct.buffer_text** %text603, align 8
  %beg604 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %382, i32 0, i32 0
  %383 = load i8*, i8** %beg604, align 8
  %384 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text605 = getelementptr inbounds %struct.buffer, %struct.buffer* %384, i32 0, i32 73
  %385 = load %struct.buffer_text*, %struct.buffer_text** %text605, align 8
  %gpt_byte606 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %385, i32 0, i32 3
  %386 = load i64, i64* %gpt_byte606, align 8
  %add.ptr607 = getelementptr inbounds i8, i8* %383, i64 %386
  %387 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text608 = getelementptr inbounds %struct.buffer, %struct.buffer* %387, i32 0, i32 73
  %388 = load %struct.buffer_text*, %struct.buffer_text** %text608, align 8
  %gap_size609 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %388, i32 0, i32 5
  %389 = load i64, i64* %gap_size609, align 8
  %add.ptr610 = getelementptr inbounds i8, i8* %add.ptr607, i64 %389
  %add.ptr611 = getelementptr inbounds i8, i8* %add.ptr610, i64 -1
  %390 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text612 = getelementptr inbounds %struct.buffer, %struct.buffer* %390, i32 0, i32 73
  %391 = load %struct.buffer_text*, %struct.buffer_text** %text612, align 8
  %z_byte613 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %391, i32 0, i32 4
  %392 = load i64, i64* %z_byte613, align 8
  %393 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text614 = getelementptr inbounds %struct.buffer, %struct.buffer* %393, i32 0, i32 73
  %394 = load %struct.buffer_text*, %struct.buffer_text** %text614, align 8
  %gpt_byte615 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %394, i32 0, i32 3
  %395 = load i64, i64* %gpt_byte615, align 8
  %sub616 = sub nsw i64 %392, %395
  %call617 = call i64 @chars_in_text(i8* %add.ptr611, i64 %sub616)
  %396 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text618 = getelementptr inbounds %struct.buffer, %struct.buffer* %396, i32 0, i32 73
  %397 = load %struct.buffer_text*, %struct.buffer_text** %text618, align 8
  %gpt619 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %397, i32 0, i32 1
  %398 = load i64, i64* %gpt619, align 8
  %add620 = add nsw i64 %call617, %398
  %399 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text621 = getelementptr inbounds %struct.buffer, %struct.buffer* %399, i32 0, i32 73
  %400 = load %struct.buffer_text*, %struct.buffer_text** %text621, align 8
  %z622 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %400, i32 0, i32 2
  store i64 %add620, i64* %z622, align 8
  %401 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte623 = getelementptr inbounds %struct.buffer, %struct.buffer* %401, i32 0, i32 78
  %402 = load i64, i64* %begv_byte623, align 8
  %call624 = call i64 @advance_to_char_boundary(i64 %402)
  %403 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte625 = getelementptr inbounds %struct.buffer, %struct.buffer* %403, i32 0, i32 78
  store i64 %call624, i64* %begv_byte625, align 8
  %404 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte626 = getelementptr inbounds %struct.buffer, %struct.buffer* %404, i32 0, i32 78
  %405 = load i64, i64* %begv_byte626, align 8
  %406 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text627 = getelementptr inbounds %struct.buffer, %struct.buffer* %406, i32 0, i32 73
  %407 = load %struct.buffer_text*, %struct.buffer_text** %text627, align 8
  %gpt_byte628 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %407, i32 0, i32 3
  %408 = load i64, i64* %gpt_byte628, align 8
  %cmp629 = icmp sgt i64 %405, %408
  br i1 %cmp629, label %if.then.631, label %if.else.650

if.then.631:                                      ; preds = %if.end.587
  %409 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text632 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i32 0, i32 73
  %410 = load %struct.buffer_text*, %struct.buffer_text** %text632, align 8
  %beg633 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %410, i32 0, i32 0
  %411 = load i8*, i8** %beg633, align 8
  %412 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text634 = getelementptr inbounds %struct.buffer, %struct.buffer* %412, i32 0, i32 73
  %413 = load %struct.buffer_text*, %struct.buffer_text** %text634, align 8
  %gpt_byte635 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %413, i32 0, i32 3
  %414 = load i64, i64* %gpt_byte635, align 8
  %add.ptr636 = getelementptr inbounds i8, i8* %411, i64 %414
  %415 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text637 = getelementptr inbounds %struct.buffer, %struct.buffer* %415, i32 0, i32 73
  %416 = load %struct.buffer_text*, %struct.buffer_text** %text637, align 8
  %gap_size638 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %416, i32 0, i32 5
  %417 = load i64, i64* %gap_size638, align 8
  %add.ptr639 = getelementptr inbounds i8, i8* %add.ptr636, i64 %417
  %add.ptr640 = getelementptr inbounds i8, i8* %add.ptr639, i64 -1
  %418 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte641 = getelementptr inbounds %struct.buffer, %struct.buffer* %418, i32 0, i32 78
  %419 = load i64, i64* %begv_byte641, align 8
  %420 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text642 = getelementptr inbounds %struct.buffer, %struct.buffer* %420, i32 0, i32 73
  %421 = load %struct.buffer_text*, %struct.buffer_text** %text642, align 8
  %gpt_byte643 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %421, i32 0, i32 3
  %422 = load i64, i64* %gpt_byte643, align 8
  %sub644 = sub nsw i64 %419, %422
  %call645 = call i64 @chars_in_text(i8* %add.ptr640, i64 %sub644)
  %423 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text646 = getelementptr inbounds %struct.buffer, %struct.buffer* %423, i32 0, i32 73
  %424 = load %struct.buffer_text*, %struct.buffer_text** %text646, align 8
  %gpt647 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %424, i32 0, i32 1
  %425 = load i64, i64* %gpt647, align 8
  %add648 = add nsw i64 %call645, %425
  %426 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv649 = getelementptr inbounds %struct.buffer, %struct.buffer* %426, i32 0, i32 77
  store i64 %add648, i64* %begv649, align 8
  br label %if.end.658

if.else.650:                                      ; preds = %if.end.587
  %427 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text651 = getelementptr inbounds %struct.buffer, %struct.buffer* %427, i32 0, i32 73
  %428 = load %struct.buffer_text*, %struct.buffer_text** %text651, align 8
  %beg652 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %428, i32 0, i32 0
  %429 = load i8*, i8** %beg652, align 8
  %430 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte653 = getelementptr inbounds %struct.buffer, %struct.buffer* %430, i32 0, i32 78
  %431 = load i64, i64* %begv_byte653, align 8
  %sub654 = sub nsw i64 %431, 1
  %call655 = call i64 @chars_in_text(i8* %429, i64 %sub654)
  %add656 = add nsw i64 %call655, 1
  %432 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv657 = getelementptr inbounds %struct.buffer, %struct.buffer* %432, i32 0, i32 77
  store i64 %add656, i64* %begv657, align 8
  br label %if.end.658

if.end.658:                                       ; preds = %if.else.650, %if.then.631
  %433 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte659 = getelementptr inbounds %struct.buffer, %struct.buffer* %433, i32 0, i32 80
  %434 = load i64, i64* %zv_byte659, align 8
  %call660 = call i64 @advance_to_char_boundary(i64 %434)
  %435 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte661 = getelementptr inbounds %struct.buffer, %struct.buffer* %435, i32 0, i32 80
  store i64 %call660, i64* %zv_byte661, align 8
  %436 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte662 = getelementptr inbounds %struct.buffer, %struct.buffer* %436, i32 0, i32 80
  %437 = load i64, i64* %zv_byte662, align 8
  %438 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text663 = getelementptr inbounds %struct.buffer, %struct.buffer* %438, i32 0, i32 73
  %439 = load %struct.buffer_text*, %struct.buffer_text** %text663, align 8
  %gpt_byte664 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %439, i32 0, i32 3
  %440 = load i64, i64* %gpt_byte664, align 8
  %cmp665 = icmp sgt i64 %437, %440
  br i1 %cmp665, label %if.then.667, label %if.else.686

if.then.667:                                      ; preds = %if.end.658
  %441 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text668 = getelementptr inbounds %struct.buffer, %struct.buffer* %441, i32 0, i32 73
  %442 = load %struct.buffer_text*, %struct.buffer_text** %text668, align 8
  %beg669 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %442, i32 0, i32 0
  %443 = load i8*, i8** %beg669, align 8
  %444 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text670 = getelementptr inbounds %struct.buffer, %struct.buffer* %444, i32 0, i32 73
  %445 = load %struct.buffer_text*, %struct.buffer_text** %text670, align 8
  %gpt_byte671 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %445, i32 0, i32 3
  %446 = load i64, i64* %gpt_byte671, align 8
  %add.ptr672 = getelementptr inbounds i8, i8* %443, i64 %446
  %447 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text673 = getelementptr inbounds %struct.buffer, %struct.buffer* %447, i32 0, i32 73
  %448 = load %struct.buffer_text*, %struct.buffer_text** %text673, align 8
  %gap_size674 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %448, i32 0, i32 5
  %449 = load i64, i64* %gap_size674, align 8
  %add.ptr675 = getelementptr inbounds i8, i8* %add.ptr672, i64 %449
  %add.ptr676 = getelementptr inbounds i8, i8* %add.ptr675, i64 -1
  %450 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte677 = getelementptr inbounds %struct.buffer, %struct.buffer* %450, i32 0, i32 80
  %451 = load i64, i64* %zv_byte677, align 8
  %452 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text678 = getelementptr inbounds %struct.buffer, %struct.buffer* %452, i32 0, i32 73
  %453 = load %struct.buffer_text*, %struct.buffer_text** %text678, align 8
  %gpt_byte679 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %453, i32 0, i32 3
  %454 = load i64, i64* %gpt_byte679, align 8
  %sub680 = sub nsw i64 %451, %454
  %call681 = call i64 @chars_in_text(i8* %add.ptr676, i64 %sub680)
  %455 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text682 = getelementptr inbounds %struct.buffer, %struct.buffer* %455, i32 0, i32 73
  %456 = load %struct.buffer_text*, %struct.buffer_text** %text682, align 8
  %gpt683 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %456, i32 0, i32 1
  %457 = load i64, i64* %gpt683, align 8
  %add684 = add nsw i64 %call681, %457
  %458 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv685 = getelementptr inbounds %struct.buffer, %struct.buffer* %458, i32 0, i32 79
  store i64 %add684, i64* %zv685, align 8
  br label %if.end.694

if.else.686:                                      ; preds = %if.end.658
  %459 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text687 = getelementptr inbounds %struct.buffer, %struct.buffer* %459, i32 0, i32 73
  %460 = load %struct.buffer_text*, %struct.buffer_text** %text687, align 8
  %beg688 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %460, i32 0, i32 0
  %461 = load i8*, i8** %beg688, align 8
  %462 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte689 = getelementptr inbounds %struct.buffer, %struct.buffer* %462, i32 0, i32 80
  %463 = load i64, i64* %zv_byte689, align 8
  %sub690 = sub nsw i64 %463, 1
  %call691 = call i64 @chars_in_text(i8* %461, i64 %sub690)
  %add692 = add nsw i64 %call691, 1
  %464 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv693 = getelementptr inbounds %struct.buffer, %struct.buffer* %464, i32 0, i32 79
  store i64 %add692, i64* %zv693, align 8
  br label %if.end.694

if.end.694:                                       ; preds = %if.else.686, %if.then.667
  %465 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte696 = getelementptr inbounds %struct.buffer, %struct.buffer* %465, i32 0, i32 76
  %466 = load i64, i64* %pt_byte696, align 8
  %add697 = add nsw i64 %466, 0
  %call698 = call i64 @advance_to_char_boundary(i64 %add697)
  store i64 %call698, i64* %byte, align 8
  %467 = load i64, i64* %byte, align 8
  %468 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text700 = getelementptr inbounds %struct.buffer, %struct.buffer* %468, i32 0, i32 73
  %469 = load %struct.buffer_text*, %struct.buffer_text** %text700, align 8
  %gpt_byte701 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %469, i32 0, i32 3
  %470 = load i64, i64* %gpt_byte701, align 8
  %cmp702 = icmp sgt i64 %467, %470
  br i1 %cmp702, label %if.then.704, label %if.else.721

if.then.704:                                      ; preds = %if.end.694
  %471 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text705 = getelementptr inbounds %struct.buffer, %struct.buffer* %471, i32 0, i32 73
  %472 = load %struct.buffer_text*, %struct.buffer_text** %text705, align 8
  %beg706 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %472, i32 0, i32 0
  %473 = load i8*, i8** %beg706, align 8
  %474 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text707 = getelementptr inbounds %struct.buffer, %struct.buffer* %474, i32 0, i32 73
  %475 = load %struct.buffer_text*, %struct.buffer_text** %text707, align 8
  %gpt_byte708 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %475, i32 0, i32 3
  %476 = load i64, i64* %gpt_byte708, align 8
  %add.ptr709 = getelementptr inbounds i8, i8* %473, i64 %476
  %477 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text710 = getelementptr inbounds %struct.buffer, %struct.buffer* %477, i32 0, i32 73
  %478 = load %struct.buffer_text*, %struct.buffer_text** %text710, align 8
  %gap_size711 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %478, i32 0, i32 5
  %479 = load i64, i64* %gap_size711, align 8
  %add.ptr712 = getelementptr inbounds i8, i8* %add.ptr709, i64 %479
  %add.ptr713 = getelementptr inbounds i8, i8* %add.ptr712, i64 -1
  %480 = load i64, i64* %byte, align 8
  %481 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text714 = getelementptr inbounds %struct.buffer, %struct.buffer* %481, i32 0, i32 73
  %482 = load %struct.buffer_text*, %struct.buffer_text** %text714, align 8
  %gpt_byte715 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %482, i32 0, i32 3
  %483 = load i64, i64* %gpt_byte715, align 8
  %sub716 = sub nsw i64 %480, %483
  %call717 = call i64 @chars_in_text(i8* %add.ptr713, i64 %sub716)
  %484 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text718 = getelementptr inbounds %struct.buffer, %struct.buffer* %484, i32 0, i32 73
  %485 = load %struct.buffer_text*, %struct.buffer_text** %text718, align 8
  %gpt719 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %485, i32 0, i32 1
  %486 = load i64, i64* %gpt719, align 8
  %add720 = add nsw i64 %call717, %486
  store i64 %add720, i64* %position, align 8
  br label %if.end.727

if.else.721:                                      ; preds = %if.end.694
  %487 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text722 = getelementptr inbounds %struct.buffer, %struct.buffer* %487, i32 0, i32 73
  %488 = load %struct.buffer_text*, %struct.buffer_text** %text722, align 8
  %beg723 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %488, i32 0, i32 0
  %489 = load i8*, i8** %beg723, align 8
  %490 = load i64, i64* %byte, align 8
  %sub724 = sub nsw i64 %490, 1
  %call725 = call i64 @chars_in_text(i8* %489, i64 %sub724)
  %add726 = add nsw i64 %call725, 1
  store i64 %add726, i64* %position, align 8
  br label %if.end.727

if.end.727:                                       ; preds = %if.else.721, %if.then.704
  %491 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %492 = load i64, i64* %position, align 8
  %493 = load i64, i64* %byte, align 8
  call void @temp_set_point_both(%struct.buffer* %491, i64 %492, i64 %493)
  %494 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text728 = getelementptr inbounds %struct.buffer, %struct.buffer* %494, i32 0, i32 73
  %495 = load %struct.buffer_text*, %struct.buffer_text** %text728, align 8
  %markers729 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %495, i32 0, i32 16
  %496 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers729, align 8
  store %struct.Lisp_Marker* %496, %struct.Lisp_Marker** %markers, align 8
  store %struct.Lisp_Marker* %496, %struct.Lisp_Marker** %tail, align 8
  %497 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text730 = getelementptr inbounds %struct.buffer, %struct.buffer* %497, i32 0, i32 73
  %498 = load %struct.buffer_text*, %struct.buffer_text** %text730, align 8
  %markers731 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %498, i32 0, i32 16
  store %struct.Lisp_Marker* null, %struct.Lisp_Marker** %markers731, align 8
  br label %for.cond.732

for.cond.732:                                     ; preds = %for.inc.741, %if.end.727
  %499 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %tobool733 = icmp ne %struct.Lisp_Marker* %499, null
  br i1 %tobool733, label %for.body.734, label %for.end.743

for.body.734:                                     ; preds = %for.cond.732
  %500 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %bytepos735 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %500, i32 0, i32 4
  %501 = load i64, i64* %bytepos735, align 8
  %call736 = call i64 @advance_to_char_boundary(i64 %501)
  %502 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %bytepos737 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %502, i32 0, i32 4
  store i64 %call736, i64* %bytepos737, align 8
  %503 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %504 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %bytepos738 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %504, i32 0, i32 4
  %505 = load i64, i64* %bytepos738, align 8
  %call739 = call i64 @buf_bytepos_to_charpos(%struct.buffer* %503, i64 %505)
  %506 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %charpos740 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %506, i32 0, i32 3
  store i64 %call739, i64* %charpos740, align 8
  br label %for.inc.741

for.inc.741:                                      ; preds = %for.body.734
  %507 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %next742 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %507, i32 0, i32 2
  %508 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next742, align 8
  store %struct.Lisp_Marker* %508, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond.732

for.end.743:                                      ; preds = %for.cond.732
  %509 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text744 = getelementptr inbounds %struct.buffer, %struct.buffer* %509, i32 0, i32 73
  %510 = load %struct.buffer_text*, %struct.buffer_text** %text744, align 8
  %markers745 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %510, i32 0, i32 16
  %511 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers745, align 8
  %tobool746 = icmp ne %struct.Lisp_Marker* %511, null
  br i1 %tobool746, label %if.then.747, label %if.end.748

if.then.747:                                      ; preds = %for.end.743
  call void @emacs_abort() #8
  unreachable

if.end.748:                                       ; preds = %for.end.743
  %512 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers, align 8
  %513 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text749 = getelementptr inbounds %struct.buffer, %struct.buffer* %513, i32 0, i32 73
  %514 = load %struct.buffer_text*, %struct.buffer_text** %text749, align 8
  %markers750 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %514, i32 0, i32 16
  store %struct.Lisp_Marker* %512, %struct.Lisp_Marker** %markers750, align 8
  call void @set_intervals_multibyte(i1 zeroext true)
  br label %if.end.751

if.end.751:                                       ; preds = %if.end.748, %if.end.205
  %515 = load i64, i64* %old_undo, align 8
  %call752 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp753 = icmp eq i64 %515, %call752
  br i1 %cmp753, label %if.end.769, label %if.then.755

if.then.755:                                      ; preds = %if.end.751
  %516 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call756 = call i64 @builtin_lisp_symbol(i32 175)
  %call757 = call i64 @intern(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0))
  %517 = load i64, i64* %flag.addr, align 8
  %call758 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp759 = icmp eq i64 %517, %call758
  br i1 %cmp759, label %cond.true.761, label %cond.false.763

cond.true.761:                                    ; preds = %if.then.755
  %call762 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.765

cond.false.763:                                   ; preds = %if.then.755
  %call764 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.765

cond.end.765:                                     ; preds = %cond.false.763, %cond.true.761
  %cond766 = phi i64 [ %call762, %cond.true.761 ], [ %call764, %cond.false.763 ]
  %call767 = call i64 @list3(i64 %call756, i64 %call757, i64 %cond766)
  %518 = load i64, i64* %old_undo, align 8
  %call768 = call i64 @Fcons(i64 %call767, i64 %518)
  call void @bset_undo_list(%struct.buffer* %516, i64 %call768)
  br label %if.end.769

if.end.769:                                       ; preds = %cond.end.765, %if.end.751
  %519 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %519, i32 0, i32 94
  %bf.load = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  %520 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call770 = call i32 @buffer_window_count(%struct.buffer* %520)
  %tobool771 = icmp ne i32 %call770, 0
  br i1 %tobool771, label %if.then.772, label %if.end.773

if.then.772:                                      ; preds = %if.end.769
  store i32 10, i32* @windows_or_buffers_changed, align 4
  br label %if.end.773

if.end.773:                                       ; preds = %if.then.772, %if.end.769
  %521 = load %struct.buffer*, %struct.buffer** @all_buffers, align 8
  store %struct.buffer* %521, %struct.buffer** %other, align 8
  br label %for.cond.774

for.cond.774:                                     ; preds = %for.inc.792, %if.end.773
  %522 = load %struct.buffer*, %struct.buffer** %other, align 8
  %tobool775 = icmp ne %struct.buffer* %522, null
  br i1 %tobool775, label %for.body.776, label %for.end.794

for.body.776:                                     ; preds = %for.cond.774
  %523 = load %struct.buffer*, %struct.buffer** %other, align 8
  %base_buffer777 = getelementptr inbounds %struct.buffer, %struct.buffer* %523, i32 0, i32 81
  %524 = load %struct.buffer*, %struct.buffer** %base_buffer777, align 8
  %525 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp778 = icmp eq %struct.buffer* %524, %525
  br i1 %cmp778, label %land.lhs.true.780, label %if.end.791

land.lhs.true.780:                                ; preds = %for.body.776
  %526 = load %struct.buffer*, %struct.buffer** %other, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %526, i32 0, i32 1
  %527 = load i64, i64* %name_, align 8
  %call781 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp782 = icmp eq i64 %527, %call781
  br i1 %cmp782, label %if.end.791, label %if.then.784

if.then.784:                                      ; preds = %land.lhs.true.780
  %528 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_785 = getelementptr inbounds %struct.buffer, %struct.buffer* %528, i32 0, i32 39
  %529 = load i64, i64* %enable_multibyte_characters_785, align 8
  %530 = load %struct.buffer*, %struct.buffer** %other, align 8
  %enable_multibyte_characters_786 = getelementptr inbounds %struct.buffer, %struct.buffer* %530, i32 0, i32 39
  store i64 %529, i64* %enable_multibyte_characters_786, align 8
  %531 = load %struct.buffer*, %struct.buffer** %other, align 8
  %prevent_redisplay_optimizations_p787 = getelementptr inbounds %struct.buffer, %struct.buffer* %531, i32 0, i32 94
  %bf.load788 = load i8, i8* %prevent_redisplay_optimizations_p787, align 8
  %bf.clear789 = and i8 %bf.load788, -2
  %bf.set790 = or i8 %bf.clear789, 1
  store i8 %bf.set790, i8* %prevent_redisplay_optimizations_p787, align 8
  br label %if.end.791

if.end.791:                                       ; preds = %if.then.784, %land.lhs.true.780, %for.body.776
  br label %for.inc.792

for.inc.792:                                      ; preds = %if.end.791
  %532 = load %struct.buffer*, %struct.buffer** %other, align 8
  %next793 = getelementptr inbounds %struct.buffer, %struct.buffer* %532, i32 0, i32 74
  %533 = load %struct.buffer*, %struct.buffer** %next793, align 8
  store %struct.buffer* %533, %struct.buffer** %other, align 8
  br label %for.cond.774

for.end.794:                                      ; preds = %for.cond.774
  %534 = load i8, i8* %modified_p, align 1
  %tobool795 = trunc i8 %534 to i1
  br i1 %tobool795, label %if.end.805, label %land.lhs.true.796

land.lhs.true.796:                                ; preds = %for.end.794
  %call797 = call i64 @builtin_lisp_symbol(i32 0)
  %call798 = call i64 @Fbuffer_modified_p(i64 %call797)
  %call799 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp800 = icmp eq i64 %call798, %call799
  br i1 %cmp800, label %if.end.805, label %if.then.802

if.then.802:                                      ; preds = %land.lhs.true.796
  %call803 = call i64 @builtin_lisp_symbol(i32 0)
  %call804 = call i64 @Fset_buffer_modified_p(i64 %call803)
  br label %if.end.805

if.end.805:                                       ; preds = %if.then.802, %land.lhs.true.796, %for.end.794
  %call807 = call i64 @Fcurrent_buffer()
  %call808 = call i64 @Fget_buffer_process(i64 %call807)
  store i64 %call808, i64* %process, align 8
  %535 = load i64, i64* %process, align 8
  %call809 = call zeroext i1 @PROCESSP(i64 %535)
  br i1 %call809, label %if.then.810, label %if.end.811

if.then.810:                                      ; preds = %if.end.805
  %536 = load i64, i64* %process, align 8
  call void @setup_process_coding_systems(i64 %536)
  br label %if.end.811

if.end.811:                                       ; preds = %if.then.810, %if.end.805
  %537 = load i64, i64* %flag.addr, align 8
  store i64 %537, i64* %retval
  br label %return

return:                                           ; preds = %if.end.811, %if.then.15
  %538 = load i64, i64* %retval
  ret i64 %538
}

declare void @invalidate_buffer_caches(%struct.buffer*, i64, i64) #1

declare void @set_intervals_multibyte(i1 zeroext) #1

declare void @temp_set_point_both(%struct.buffer*, i64, i64) #1

declare i32 @string_char(i8*, i8**, i32*) #1

declare i64 @del_range_2(i64, i64, i64, i64, i1 zeroext) #1

declare i64 @Fnarrow_to_region(i64, i64) #1

declare void @move_gap_both(i64, i64) #1

declare i32 @char_string(i32, i8*) #1

declare void @insert_1_both(i8*, i64, i64, i1 zeroext, i1 zeroext, i1 zeroext) #1

declare void @temp_set_point(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @advance_to_char_boundary(i64 %byte_pos) #3 {
entry:
  %retval = alloca i64, align 8
  %byte_pos.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %orig_byte_pos = alloca i64, align 8
  %chp = alloca i8*, align 8
  store i64 %byte_pos, i64* %byte_pos.addr, align 8
  %0 = load i64, i64* %byte_pos.addr, align 8
  %cmp = icmp eq i64 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %byte_pos.addr, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 73
  %3 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %3, i32 0, i32 3
  %4 = load i64, i64* %gpt_byte, align 8
  %cmp1 = icmp sge i64 %1, %4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2 = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 73
  %6 = load %struct.buffer_text*, %struct.buffer_text** %text2, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %6, i32 0, i32 5
  %7 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ 0, %cond.false ]
  %8 = load i64, i64* %byte_pos.addr, align 8
  %add = add nsw i64 %cond, %8
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 0
  %11 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %add
  %add.ptr4 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %12 = load i8, i8* %add.ptr4, align 1
  %conv = zext i8 %12 to i32
  store i32 %conv, i32* %c, align 4
  %13 = load i32, i32* %c, align 4
  %and = and i32 %13, 192
  %cmp5 = icmp ne i32 %and, 128
  br i1 %cmp5, label %if.end.77, label %if.then.7

if.then.7:                                        ; preds = %cond.end
  %14 = load i64, i64* %byte_pos.addr, align 8
  store i64 %14, i64* %orig_byte_pos, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then.7
  %15 = load i64, i64* %byte_pos.addr, align 8
  %dec = add nsw i64 %15, -1
  store i64 %dec, i64* %byte_pos.addr, align 8
  %16 = load i64, i64* %byte_pos.addr, align 8
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 73
  %18 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %gpt_byte9 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %18, i32 0, i32 3
  %19 = load i64, i64* %gpt_byte9, align 8
  %cmp10 = icmp sge i64 %16, %19
  br i1 %cmp10, label %cond.true.12, label %cond.false.15

cond.true.12:                                     ; preds = %do.body
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text13 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text13, align 8
  %gap_size14 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 5
  %22 = load i64, i64* %gap_size14, align 8
  br label %cond.end.16

cond.false.15:                                    ; preds = %do.body
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.12
  %cond17 = phi i64 [ %22, %cond.true.12 ], [ 0, %cond.false.15 ]
  %23 = load i64, i64* %byte_pos.addr, align 8
  %add18 = add nsw i64 %cond17, %23
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text19 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 73
  %25 = load %struct.buffer_text*, %struct.buffer_text** %text19, align 8
  %beg20 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %25, i32 0, i32 0
  %26 = load i8*, i8** %beg20, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %26, i64 %add18
  %add.ptr22 = getelementptr inbounds i8, i8* %add.ptr21, i64 -1
  %27 = load i8, i8* %add.ptr22, align 1
  %conv23 = zext i8 %27 to i32
  store i32 %conv23, i32* %c, align 4
  br label %do.cond

do.cond:                                          ; preds = %cond.end.16
  %28 = load i32, i32* %c, align 4
  %and24 = and i32 %28, 192
  %cmp25 = icmp ne i32 %and24, 128
  br i1 %cmp25, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %do.cond
  %29 = load i64, i64* %byte_pos.addr, align 8
  %cmp27 = icmp sgt i64 %29, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %30 = phi i1 [ false, %do.cond ], [ %cmp27, %land.rhs ]
  br i1 %30, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %do.body.29

do.body.29:                                       ; preds = %do.end
  %31 = load i64, i64* %byte_pos.addr, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 73
  %33 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gpt_byte31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %33, i32 0, i32 3
  %34 = load i64, i64* %gpt_byte31, align 8
  %cmp32 = icmp sge i64 %31, %34
  br i1 %cmp32, label %cond.true.34, label %cond.false.37

cond.true.34:                                     ; preds = %do.body.29
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %gap_size36 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 5
  %37 = load i64, i64* %gap_size36, align 8
  br label %cond.end.38

cond.false.37:                                    ; preds = %do.body.29
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.34
  %cond39 = phi i64 [ %37, %cond.true.34 ], [ 0, %cond.false.37 ]
  %38 = load i64, i64* %byte_pos.addr, align 8
  %add40 = add nsw i64 %cond39, %38
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text41 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text41, align 8
  %beg42 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 0
  %41 = load i8*, i8** %beg42, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %41, i64 %add40
  %add.ptr44 = getelementptr inbounds i8, i8* %add.ptr43, i64 -1
  store i8* %add.ptr44, i8** %chp, align 8
  %42 = load i8*, i8** %chp, align 8
  %43 = load i8, i8* %42, align 1
  %conv45 = zext i8 %43 to i32
  %and46 = and i32 %conv45, 128
  %tobool = icmp ne i32 %and46, 0
  br i1 %tobool, label %cond.false.48, label %cond.true.47

cond.true.47:                                     ; preds = %cond.end.38
  br label %cond.end.67

cond.false.48:                                    ; preds = %cond.end.38
  %44 = load i8*, i8** %chp, align 8
  %45 = load i8, i8* %44, align 1
  %conv49 = zext i8 %45 to i32
  %and50 = and i32 %conv49, 32
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.false.53, label %cond.true.52

cond.true.52:                                     ; preds = %cond.false.48
  br label %cond.end.65

cond.false.53:                                    ; preds = %cond.false.48
  %46 = load i8*, i8** %chp, align 8
  %47 = load i8, i8* %46, align 1
  %conv54 = zext i8 %47 to i32
  %and55 = and i32 %conv54, 16
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %cond.false.58, label %cond.true.57

cond.true.57:                                     ; preds = %cond.false.53
  br label %cond.end.63

cond.false.58:                                    ; preds = %cond.false.53
  %48 = load i8*, i8** %chp, align 8
  %49 = load i8, i8* %48, align 1
  %conv59 = zext i8 %49 to i32
  %and60 = and i32 %conv59, 8
  %tobool61 = icmp ne i32 %and60, 0
  %lnot = xor i1 %tobool61, true
  %cond62 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.58, %cond.true.57
  %cond64 = phi i32 [ 3, %cond.true.57 ], [ %cond62, %cond.false.58 ]
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.end.63, %cond.true.52
  %cond66 = phi i32 [ 2, %cond.true.52 ], [ %cond64, %cond.end.63 ]
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.end.65, %cond.true.47
  %cond68 = phi i32 [ 1, %cond.true.47 ], [ %cond66, %cond.end.65 ]
  %conv69 = sext i32 %cond68 to i64
  %50 = load i64, i64* %byte_pos.addr, align 8
  %add70 = add nsw i64 %50, %conv69
  store i64 %add70, i64* %byte_pos.addr, align 8
  br label %do.end.72

do.end.72:                                        ; preds = %cond.end.67
  %51 = load i64, i64* %byte_pos.addr, align 8
  %52 = load i64, i64* %orig_byte_pos, align 8
  %cmp73 = icmp slt i64 %51, %52
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %do.end.72
  %53 = load i64, i64* %orig_byte_pos, align 8
  store i64 %53, i64* %byte_pos.addr, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.75, %do.end.72
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %cond.end
  %54 = load i64, i64* %byte_pos.addr, align 8
  store i64 %54, i64* %retval
  br label %return

return:                                           ; preds = %if.end.77, %if.then
  %55 = load i64, i64* %retval
  ret i64 %55
}

declare i64 @chars_in_text(i8*, i64) #1

declare i64 @buf_bytepos_to_charpos(%struct.buffer*, i64) #1

declare i64 @list3(i64, i64, i64) #1

declare i64 @Fget_buffer_process(i64) #1

declare zeroext i1 @PROCESSP(i64) #1

declare void @setup_process_coding_systems(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fkill_all_local_variables() #3 {
entry:
  %call = call i64 @builtin_lisp_symbol(i32 253)
  call void @run_hook(i64 %call)
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  call void @swap_out_buffer_local_variables(%struct.buffer* %0)
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  call void @reset_buffer_local_variables(%struct.buffer* %1, i1 zeroext false)
  store i32 12, i32* @update_mode_lines, align 4
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @overlays_at(i64 %pos, i1 zeroext %extend, i64** %vec_ptr, i64* %len_ptr, i64* %next_ptr, i64* %prev_ptr, i1 zeroext %change_req) #3 {
entry:
  %pos.addr = alloca i64, align 8
  %extend.addr = alloca i8, align 1
  %vec_ptr.addr = alloca i64**, align 8
  %len_ptr.addr = alloca i64*, align 8
  %next_ptr.addr = alloca i64*, align 8
  %prev_ptr.addr = alloca i64*, align 8
  %change_req.addr = alloca i8, align 1
  %overlay = alloca i64, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %idx = alloca i64, align 8
  %len = alloca i64, align 8
  %vec = alloca i64*, align 8
  %next = alloca i64, align 8
  %prev = alloca i64, align 8
  %inhibit_storing = alloca i8, align 1
  %startpos = alloca i64, align 8
  %endpos = alloca i64, align 8
  %startpos65 = alloca i64, align 8
  %endpos66 = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %frombool = zext i1 %extend to i8
  store i8 %frombool, i8* %extend.addr, align 1
  store i64** %vec_ptr, i64*** %vec_ptr.addr, align 8
  store i64* %len_ptr, i64** %len_ptr.addr, align 8
  store i64* %next_ptr, i64** %next_ptr.addr, align 8
  store i64* %prev_ptr, i64** %prev_ptr.addr, align 8
  %frombool1 = zext i1 %change_req to i8
  store i8 %frombool1, i8* %change_req.addr, align 1
  store i64 0, i64* %idx, align 8
  %0 = load i64*, i64** %len_ptr.addr, align 8
  %1 = load i64, i64* %0, align 8
  store i64 %1, i64* %len, align 8
  %2 = load i64**, i64*** %vec_ptr.addr, align 8
  %3 = load i64*, i64** %2, align 8
  store i64* %3, i64** %vec, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 79
  %5 = load i64, i64* %zv, align 8
  store i64 %5, i64* %next, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 77
  %7 = load i64, i64* %begv, align 8
  store i64 %7, i64* %prev, align 8
  store i8 0, i8* %inhibit_storing, align 1
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 95
  %9 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %9, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %10, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %12 = bitcast %struct.Lisp_Overlay* %11 to i8*
  %call = call i64 @make_lisp_ptr(i8* %12, i32 1)
  store i64 %call, i64* %overlay, align 8
  %13 = load i64, i64* %overlay, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %13)
  %start3 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 2
  %14 = load i64, i64* %start3, align 8
  store i64 %14, i64* %start, align 8
  %15 = load i64, i64* %overlay, align 8
  %call4 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %15)
  %end5 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call4, i32 0, i32 3
  %16 = load i64, i64* %end5, align 8
  store i64 %16, i64* %end, align 8
  %17 = load i64, i64* %end, align 8
  %and = and i64 %17, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %18 = load i64, i64* %end, align 8
  %call7 = call i32 @XMISCTYPE(i64 %18)
  %cmp8 = icmp eq i32 %call7, 24236
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %19 = load i64, i64* %end, align 8
  %call10 = call i64 @marker_position(i64 %19)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %20, %cond.true
  %cond = phi i64 [ %call10, %cond.true ], [ 0, %20 ]
  store i64 %cond, i64* %endpos, align 8
  %21 = load i64, i64* %endpos, align 8
  %22 = load i64, i64* %pos.addr, align 8
  %cmp11 = icmp slt i64 %21, %22
  br i1 %cmp11, label %if.then, label %if.end.16

if.then:                                          ; preds = %cond.end
  %23 = load i64, i64* %prev, align 8
  %24 = load i64, i64* %endpos, align 8
  %cmp13 = icmp slt i64 %23, %24
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %if.then
  %25 = load i64, i64* %endpos, align 8
  store i64 %25, i64* %prev, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.15, %if.then
  br label %for.end

if.end.16:                                        ; preds = %cond.end
  %26 = load i64, i64* %start, align 8
  %and17 = and i64 %26, 7
  %conv18 = trunc i64 %and17 to i32
  %cmp19 = icmp eq i32 %conv18, 1
  br i1 %cmp19, label %land.lhs.true.21, label %cond.false.27

land.lhs.true.21:                                 ; preds = %if.end.16
  %27 = load i64, i64* %start, align 8
  %call22 = call i32 @XMISCTYPE(i64 %27)
  %cmp23 = icmp eq i32 %call22, 24236
  br i1 %cmp23, label %cond.true.25, label %cond.false.27

cond.true.25:                                     ; preds = %land.lhs.true.21
  %28 = load i64, i64* %start, align 8
  %call26 = call i64 @marker_position(i64 %28)
  br label %cond.end.28

cond.false.27:                                    ; preds = %land.lhs.true.21, %if.end.16
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.28

cond.end.28:                                      ; preds = %29, %cond.true.25
  %cond29 = phi i64 [ %call26, %cond.true.25 ], [ 0, %29 ]
  store i64 %cond29, i64* %startpos, align 8
  %30 = load i64, i64* %prev, align 8
  %31 = load i64, i64* %startpos, align 8
  %cmp30 = icmp slt i64 %30, %31
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.36

land.lhs.true.32:                                 ; preds = %cond.end.28
  %32 = load i64, i64* %startpos, align 8
  %33 = load i64, i64* %pos.addr, align 8
  %cmp33 = icmp slt i64 %32, %33
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %land.lhs.true.32
  %34 = load i64, i64* %startpos, align 8
  store i64 %34, i64* %prev, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %land.lhs.true.32, %cond.end.28
  %35 = load i64, i64* %endpos, align 8
  %36 = load i64, i64* %pos.addr, align 8
  %cmp37 = icmp eq i64 %35, %36
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.36
  br label %for.inc

if.end.40:                                        ; preds = %if.end.36
  %37 = load i64, i64* %startpos, align 8
  %38 = load i64, i64* %pos.addr, align 8
  %cmp41 = icmp sle i64 %37, %38
  br i1 %cmp41, label %if.then.43, label %if.else.55

if.then.43:                                       ; preds = %if.end.40
  %39 = load i64, i64* %idx, align 8
  %40 = load i64, i64* %len, align 8
  %cmp44 = icmp eq i64 %39, %40
  br i1 %cmp44, label %if.then.46, label %if.end.51

if.then.46:                                       ; preds = %if.then.43
  %41 = load i8, i8* %extend.addr, align 1
  %tobool47 = trunc i8 %41 to i1
  br i1 %tobool47, label %if.then.48, label %if.else

if.then.48:                                       ; preds = %if.then.46
  %42 = load i64*, i64** %vec, align 8
  %43 = bitcast i64* %42 to i8*
  %44 = load i64*, i64** %len_ptr.addr, align 8
  %call49 = call i8* @xpalloc(i8* %43, i64* %44, i64 1, i64 1152921504606846975, i64 8)
  %45 = bitcast i8* %call49 to i64*
  store i64* %45, i64** %vec, align 8
  %46 = load i64*, i64** %vec, align 8
  %47 = load i64**, i64*** %vec_ptr.addr, align 8
  store i64* %46, i64** %47, align 8
  %48 = load i64*, i64** %len_ptr.addr, align 8
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %len, align 8
  br label %if.end.50

if.else:                                          ; preds = %if.then.46
  store i8 1, i8* %inhibit_storing, align 1
  br label %if.end.50

if.end.50:                                        ; preds = %if.else, %if.then.48
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.43
  %50 = load i8, i8* %inhibit_storing, align 1
  %tobool52 = trunc i8 %50 to i1
  br i1 %tobool52, label %if.end.54, label %if.then.53

if.then.53:                                       ; preds = %if.end.51
  %51 = load i64, i64* %overlay, align 8
  %52 = load i64, i64* %idx, align 8
  %53 = load i64*, i64** %vec, align 8
  %arrayidx = getelementptr inbounds i64, i64* %53, i64 %52
  store i64 %51, i64* %arrayidx, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %if.end.51
  %54 = load i64, i64* %idx, align 8
  %inc = add nsw i64 %54, 1
  store i64 %inc, i64* %idx, align 8
  br label %if.end.60

if.else.55:                                       ; preds = %if.end.40
  %55 = load i64, i64* %startpos, align 8
  %56 = load i64, i64* %next, align 8
  %cmp56 = icmp slt i64 %55, %56
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.else.55
  %57 = load i64, i64* %startpos, align 8
  store i64 %57, i64* %next, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.58, %if.else.55
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.end.54
  br label %for.inc

for.inc:                                          ; preds = %if.end.60, %if.then.39
  %58 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next61 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %58, i32 0, i32 1
  %59 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next61, align 8
  store %struct.Lisp_Overlay* %59, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end, %for.cond
  %60 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 96
  %61 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %61, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.151, %for.end
  %62 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool63 = icmp ne %struct.Lisp_Overlay* %62, null
  br i1 %tobool63, label %for.body.64, label %for.end.153

for.body.64:                                      ; preds = %for.cond.62
  %63 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %64 = bitcast %struct.Lisp_Overlay* %63 to i8*
  %call67 = call i64 @make_lisp_ptr(i8* %64, i32 1)
  store i64 %call67, i64* %overlay, align 8
  %65 = load i64, i64* %overlay, align 8
  %call68 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %65)
  %start69 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call68, i32 0, i32 2
  %66 = load i64, i64* %start69, align 8
  store i64 %66, i64* %start, align 8
  %67 = load i64, i64* %overlay, align 8
  %call70 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %67)
  %end71 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call70, i32 0, i32 3
  %68 = load i64, i64* %end71, align 8
  store i64 %68, i64* %end, align 8
  %69 = load i64, i64* %start, align 8
  %and72 = and i64 %69, 7
  %conv73 = trunc i64 %and72 to i32
  %cmp74 = icmp eq i32 %conv73, 1
  br i1 %cmp74, label %land.lhs.true.76, label %cond.false.82

land.lhs.true.76:                                 ; preds = %for.body.64
  %70 = load i64, i64* %start, align 8
  %call77 = call i32 @XMISCTYPE(i64 %70)
  %cmp78 = icmp eq i32 %call77, 24236
  br i1 %cmp78, label %cond.true.80, label %cond.false.82

cond.true.80:                                     ; preds = %land.lhs.true.76
  %71 = load i64, i64* %start, align 8
  %call81 = call i64 @marker_position(i64 %71)
  br label %cond.end.83

cond.false.82:                                    ; preds = %land.lhs.true.76, %for.body.64
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.83

cond.end.83:                                      ; preds = %72, %cond.true.80
  %cond84 = phi i64 [ %call81, %cond.true.80 ], [ 0, %72 ]
  store i64 %cond84, i64* %startpos65, align 8
  %73 = load i64, i64* %pos.addr, align 8
  %74 = load i64, i64* %startpos65, align 8
  %cmp85 = icmp slt i64 %73, %74
  br i1 %cmp85, label %if.then.87, label %if.end.92

if.then.87:                                       ; preds = %cond.end.83
  %75 = load i64, i64* %startpos65, align 8
  %76 = load i64, i64* %next, align 8
  %cmp88 = icmp slt i64 %75, %76
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.then.87
  %77 = load i64, i64* %startpos65, align 8
  store i64 %77, i64* %next, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.90, %if.then.87
  br label %for.end.153

if.end.92:                                        ; preds = %cond.end.83
  %78 = load i64, i64* %end, align 8
  %and93 = and i64 %78, 7
  %conv94 = trunc i64 %and93 to i32
  %cmp95 = icmp eq i32 %conv94, 1
  br i1 %cmp95, label %land.lhs.true.97, label %cond.false.103

land.lhs.true.97:                                 ; preds = %if.end.92
  %79 = load i64, i64* %end, align 8
  %call98 = call i32 @XMISCTYPE(i64 %79)
  %cmp99 = icmp eq i32 %call98, 24236
  br i1 %cmp99, label %cond.true.101, label %cond.false.103

cond.true.101:                                    ; preds = %land.lhs.true.97
  %80 = load i64, i64* %end, align 8
  %call102 = call i64 @marker_position(i64 %80)
  br label %cond.end.104

cond.false.103:                                   ; preds = %land.lhs.true.97, %if.end.92
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.104

cond.end.104:                                     ; preds = %81, %cond.true.101
  %cond105 = phi i64 [ %call102, %cond.true.101 ], [ 0, %81 ]
  store i64 %cond105, i64* %endpos66, align 8
  %82 = load i64, i64* %pos.addr, align 8
  %83 = load i64, i64* %endpos66, align 8
  %cmp106 = icmp slt i64 %82, %83
  br i1 %cmp106, label %if.then.108, label %if.else.130

if.then.108:                                      ; preds = %cond.end.104
  %84 = load i64, i64* %idx, align 8
  %85 = load i64, i64* %len, align 8
  %cmp109 = icmp eq i64 %84, %85
  br i1 %cmp109, label %if.then.111, label %if.end.117

if.then.111:                                      ; preds = %if.then.108
  %86 = load i8, i8* %extend.addr, align 1
  %tobool112 = trunc i8 %86 to i1
  br i1 %tobool112, label %if.then.113, label %if.else.115

if.then.113:                                      ; preds = %if.then.111
  %87 = load i64*, i64** %vec, align 8
  %88 = bitcast i64* %87 to i8*
  %89 = load i64*, i64** %len_ptr.addr, align 8
  %call114 = call i8* @xpalloc(i8* %88, i64* %89, i64 1, i64 1152921504606846975, i64 8)
  %90 = bitcast i8* %call114 to i64*
  store i64* %90, i64** %vec, align 8
  %91 = load i64*, i64** %vec, align 8
  %92 = load i64**, i64*** %vec_ptr.addr, align 8
  store i64* %91, i64** %92, align 8
  %93 = load i64*, i64** %len_ptr.addr, align 8
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %len, align 8
  br label %if.end.116

if.else.115:                                      ; preds = %if.then.111
  store i8 1, i8* %inhibit_storing, align 1
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.115, %if.then.113
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %if.then.108
  %95 = load i8, i8* %inhibit_storing, align 1
  %tobool118 = trunc i8 %95 to i1
  br i1 %tobool118, label %if.end.121, label %if.then.119

if.then.119:                                      ; preds = %if.end.117
  %96 = load i64, i64* %overlay, align 8
  %97 = load i64, i64* %idx, align 8
  %98 = load i64*, i64** %vec, align 8
  %arrayidx120 = getelementptr inbounds i64, i64* %98, i64 %97
  store i64 %96, i64* %arrayidx120, align 8
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.119, %if.end.117
  %99 = load i64, i64* %idx, align 8
  %inc122 = add nsw i64 %99, 1
  store i64 %inc122, i64* %idx, align 8
  %100 = load i64, i64* %startpos65, align 8
  %101 = load i64, i64* %pos.addr, align 8
  %cmp123 = icmp slt i64 %100, %101
  br i1 %cmp123, label %land.lhs.true.125, label %if.end.129

land.lhs.true.125:                                ; preds = %if.end.121
  %102 = load i64, i64* %startpos65, align 8
  %103 = load i64, i64* %prev, align 8
  %cmp126 = icmp sgt i64 %102, %103
  br i1 %cmp126, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %land.lhs.true.125
  %104 = load i64, i64* %startpos65, align 8
  store i64 %104, i64* %prev, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.128, %land.lhs.true.125, %if.end.121
  br label %if.end.150

if.else.130:                                      ; preds = %cond.end.104
  %105 = load i64, i64* %endpos66, align 8
  %106 = load i64, i64* %pos.addr, align 8
  %cmp131 = icmp slt i64 %105, %106
  br i1 %cmp131, label %land.lhs.true.133, label %if.else.137

land.lhs.true.133:                                ; preds = %if.else.130
  %107 = load i64, i64* %endpos66, align 8
  %108 = load i64, i64* %prev, align 8
  %cmp134 = icmp sgt i64 %107, %108
  br i1 %cmp134, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %land.lhs.true.133
  %109 = load i64, i64* %endpos66, align 8
  store i64 %109, i64* %prev, align 8
  br label %if.end.149

if.else.137:                                      ; preds = %land.lhs.true.133, %if.else.130
  %110 = load i64, i64* %endpos66, align 8
  %111 = load i64, i64* %pos.addr, align 8
  %cmp138 = icmp eq i64 %110, %111
  br i1 %cmp138, label %land.lhs.true.140, label %if.end.148

land.lhs.true.140:                                ; preds = %if.else.137
  %112 = load i64, i64* %startpos65, align 8
  %113 = load i64, i64* %prev, align 8
  %cmp141 = icmp sgt i64 %112, %113
  br i1 %cmp141, label %land.lhs.true.143, label %if.end.148

land.lhs.true.143:                                ; preds = %land.lhs.true.140
  %114 = load i8, i8* %change_req.addr, align 1
  %tobool144 = trunc i8 %114 to i1
  br i1 %tobool144, label %lor.lhs.false, label %if.then.147

lor.lhs.false:                                    ; preds = %land.lhs.true.143
  %115 = load i64, i64* %startpos65, align 8
  %116 = load i64, i64* %pos.addr, align 8
  %cmp145 = icmp slt i64 %115, %116
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %lor.lhs.false, %land.lhs.true.143
  %117 = load i64, i64* %startpos65, align 8
  store i64 %117, i64* %prev, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.147, %lor.lhs.false, %land.lhs.true.140, %if.else.137
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.136
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %if.end.129
  br label %for.inc.151

for.inc.151:                                      ; preds = %if.end.150
  %118 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next152 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %118, i32 0, i32 1
  %119 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next152, align 8
  store %struct.Lisp_Overlay* %119, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.62

for.end.153:                                      ; preds = %if.end.91, %for.cond.62
  %120 = load i64*, i64** %next_ptr.addr, align 8
  %tobool154 = icmp ne i64* %120, null
  br i1 %tobool154, label %if.then.155, label %if.end.156

if.then.155:                                      ; preds = %for.end.153
  %121 = load i64, i64* %next, align 8
  %122 = load i64*, i64** %next_ptr.addr, align 8
  store i64 %121, i64* %122, align 8
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.155, %for.end.153
  %123 = load i64*, i64** %prev_ptr.addr, align 8
  %tobool157 = icmp ne i64* %123, null
  br i1 %tobool157, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %if.end.156
  %124 = load i64, i64* %prev, align 8
  %125 = load i64*, i64** %prev_ptr.addr, align 8
  store i64 %124, i64* %125, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.158, %if.end.156
  %126 = load i64, i64* %idx, align 8
  ret i64 %126
}

declare %struct.Lisp_Overlay* @XOVERLAY(i64) #1

declare i8* @xpalloc(i8*, i64*, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @mouse_face_overlay_overlaps(i64 %overlay) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %size = alloca i64, align 8
  %v = alloca i64*, align 8
  %tem = alloca i64, align 8
  %vbuf = alloca [10 x i64], align 16
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %0)
  %start1 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 2
  %1 = load i64, i64* %start1, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %overlay.addr, align 8
  %call3 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %2)
  %start4 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call3, i32 0, i32 2
  %3 = load i64, i64* %start4, align 8
  %call5 = call i32 @XMISCTYPE(i64 %3)
  %cmp6 = icmp eq i32 %call5, 24236
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %4 = load i64, i64* %overlay.addr, align 8
  %call8 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %4)
  %start9 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call8, i32 0, i32 2
  %5 = load i64, i64* %start9, align 8
  %call10 = call i64 @marker_position(i64 %5)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  %cond = phi i64 [ %call10, %cond.true ], [ 0, %6 ]
  store i64 %cond, i64* %start, align 8
  %7 = load i64, i64* %overlay.addr, align 8
  %call11 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %end12 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call11, i32 0, i32 3
  %8 = load i64, i64* %end12, align 8
  %and13 = and i64 %8, 7
  %conv14 = trunc i64 %and13 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true.17, label %cond.false.27

land.lhs.true.17:                                 ; preds = %cond.end
  %9 = load i64, i64* %overlay.addr, align 8
  %call18 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %end19 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call18, i32 0, i32 3
  %10 = load i64, i64* %end19, align 8
  %call20 = call i32 @XMISCTYPE(i64 %10)
  %cmp21 = icmp eq i32 %call20, 24236
  br i1 %cmp21, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %land.lhs.true.17
  %11 = load i64, i64* %overlay.addr, align 8
  %call24 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %11)
  %end25 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call24, i32 0, i32 3
  %12 = load i64, i64* %end25, align 8
  %call26 = call i64 @marker_position(i64 %12)
  br label %cond.end.28

cond.false.27:                                    ; preds = %land.lhs.true.17, %cond.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.28

cond.end.28:                                      ; preds = %13, %cond.true.23
  %cond29 = phi i64 [ %call26, %cond.true.23 ], [ 0, %13 ]
  store i64 %cond29, i64* %end, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call30 = call i64 @SPECPDL_INDEX()
  store i64 %call30, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  store i64 10, i64* %size, align 8
  %arraydecay = getelementptr inbounds [10 x i64], [10 x i64]* %vbuf, i32 0, i32 0
  store i64* %arraydecay, i64** %v, align 8
  %14 = load i64, i64* %start, align 8
  %15 = load i64, i64* %end, align 8
  %call31 = call i64 @overlays_in(i64 %14, i64 %15, i1 zeroext false, i64** %v, i64* %size, i64* null, i64* null)
  store i64 %call31, i64* %n, align 8
  %16 = load i64, i64* %n, align 8
  %17 = load i64, i64* %size, align 8
  %cmp32 = icmp sgt i64 %16, %17
  br i1 %cmp32, label %if.then, label %if.end.41

if.then:                                          ; preds = %cond.end.28
  br label %do.body

do.body:                                          ; preds = %if.then
  %18 = load i64, i64* %n, align 8
  %19 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %19, 8
  %div34 = udiv i64 %div, 1
  %cmp35 = icmp ule i64 %18, %div34
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %do.body
  %20 = load i64, i64* %n, align 8
  %mul = mul i64 8, %20
  %21 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %21, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %22 = load i64, i64* %n, align 8
  %mul38 = mul i64 8, %22
  %23 = alloca i8, i64 %mul38
  %24 = bitcast i8* %23 to i64*
  store i64* %24, i64** %v, align 8
  br label %if.end

if.else:                                          ; preds = %do.body
  %25 = load i64, i64* %n, align 8
  %call39 = call noalias i8* @xnmalloc(i64 %25, i64 8)
  %26 = bitcast i8* %call39 to i64*
  store i64* %26, i64** %v, align 8
  store i8 1, i8* %sa_must_free, align 1
  %27 = load i64*, i64** %v, align 8
  %28 = bitcast i64* %27 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %28)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.37
  br label %do.end

do.end:                                           ; preds = %if.end
  %29 = load i64, i64* %start, align 8
  %30 = load i64, i64* %end, align 8
  %call40 = call i64 @overlays_in(i64 %29, i64 %30, i1 zeroext false, i64** %v, i64* %n, i64* null, i64* null)
  br label %if.end.41

if.end.41:                                        ; preds = %do.end, %cond.end.28
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.41
  %31 = load i64, i64* %i, align 8
  %32 = load i64, i64* %n, align 8
  %cmp42 = icmp slt i64 %31, %32
  br i1 %cmp42, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load i64, i64* %i, align 8
  %34 = load i64*, i64** %v, align 8
  %arrayidx = getelementptr inbounds i64, i64* %34, i64 %33
  %35 = load i64, i64* %arrayidx, align 8
  %36 = load i64, i64* %overlay.addr, align 8
  %cmp44 = icmp eq i64 %35, %36
  br i1 %cmp44, label %if.end.53, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %for.body
  %37 = load i64, i64* %overlay.addr, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 687)
  %call48 = call i64 @Foverlay_get(i64 %37, i64 %call47)
  store i64 %call48, i64* %tem, align 8
  %38 = load i64, i64* %tem, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %38, %call49
  %lnot = xor i1 %cmp50, true
  br i1 %lnot, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %land.lhs.true.46
  br label %for.end

if.end.53:                                        ; preds = %land.lhs.true.46, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.53
  %39 = load i64, i64* %i, align 8
  %inc = add nsw i64 %39, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.52, %for.cond
  br label %do.body.54

do.body.54:                                       ; preds = %for.end
  %40 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %40 to i1
  br i1 %tobool, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %do.body.54
  store i8 0, i8* %sa_must_free, align 1
  %41 = load i64, i64* %sa_count, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  %call57 = call i64 @unbind_to(i64 %41, i64 %call56)
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %do.body.54
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  %42 = load i64, i64* %i, align 8
  %43 = load i64, i64* %n, align 8
  %cmp60 = icmp slt i64 %42, %43
  ret i1 %cmp60
}

; Function Attrs: nounwind uwtable
define internal i64 @overlays_in(i64 %beg, i64 %end, i1 zeroext %extend, i64** %vec_ptr, i64* %len_ptr, i64* %next_ptr, i64* %prev_ptr) #3 {
entry:
  %beg.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %extend.addr = alloca i8, align 1
  %vec_ptr.addr = alloca i64**, align 8
  %len_ptr.addr = alloca i64*, align 8
  %next_ptr.addr = alloca i64*, align 8
  %prev_ptr.addr = alloca i64*, align 8
  %overlay = alloca i64, align 8
  %ostart = alloca i64, align 8
  %oend = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %idx = alloca i64, align 8
  %len = alloca i64, align 8
  %vec = alloca i64*, align 8
  %next = alloca i64, align 8
  %prev = alloca i64, align 8
  %inhibit_storing = alloca i8, align 1
  %end_is_Z = alloca i8, align 1
  %startpos = alloca i64, align 8
  %endpos = alloca i64, align 8
  %startpos68 = alloca i64, align 8
  %endpos69 = alloca i64, align 8
  store i64 %beg, i64* %beg.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %frombool = zext i1 %extend to i8
  store i8 %frombool, i8* %extend.addr, align 1
  store i64** %vec_ptr, i64*** %vec_ptr.addr, align 8
  store i64* %len_ptr, i64** %len_ptr.addr, align 8
  store i64* %next_ptr, i64** %next_ptr.addr, align 8
  store i64* %prev_ptr, i64** %prev_ptr.addr, align 8
  store i64 0, i64* %idx, align 8
  %0 = load i64*, i64** %len_ptr.addr, align 8
  %1 = load i64, i64* %0, align 8
  store i64 %1, i64* %len, align 8
  %2 = load i64**, i64*** %vec_ptr.addr, align 8
  %3 = load i64*, i64** %2, align 8
  store i64* %3, i64** %vec, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 79
  %5 = load i64, i64* %zv, align 8
  store i64 %5, i64* %next, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 77
  %7 = load i64, i64* %begv, align 8
  store i64 %7, i64* %prev, align 8
  store i8 0, i8* %inhibit_storing, align 1
  %8 = load i64, i64* %end.addr, align 8
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 2
  %11 = load i64, i64* %z, align 8
  %cmp = icmp eq i64 %8, %11
  %frombool1 = zext i1 %cmp to i8
  store i8 %frombool1, i8* %end_is_Z, align 1
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 95
  %13 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %13, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %14, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %16 = bitcast %struct.Lisp_Overlay* %15 to i8*
  %call = call i64 @make_lisp_ptr(i8* %16, i32 1)
  store i64 %call, i64* %overlay, align 8
  %17 = load i64, i64* %overlay, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %17)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 2
  %18 = load i64, i64* %start, align 8
  store i64 %18, i64* %ostart, align 8
  %19 = load i64, i64* %overlay, align 8
  %call3 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %19)
  %end4 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call3, i32 0, i32 3
  %20 = load i64, i64* %end4, align 8
  store i64 %20, i64* %oend, align 8
  %21 = load i64, i64* %oend, align 8
  %and = and i64 %21, 7
  %conv = trunc i64 %and to i32
  %cmp5 = icmp eq i32 %conv, 1
  br i1 %cmp5, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %22 = load i64, i64* %oend, align 8
  %call7 = call i32 @XMISCTYPE(i64 %22)
  %cmp8 = icmp eq i32 %call7, 24236
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %23 = load i64, i64* %oend, align 8
  %call10 = call i64 @marker_position(i64 %23)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %24, %cond.true
  %cond = phi i64 [ %call10, %cond.true ], [ 0, %24 ]
  store i64 %cond, i64* %endpos, align 8
  %25 = load i64, i64* %endpos, align 8
  %26 = load i64, i64* %beg.addr, align 8
  %cmp11 = icmp slt i64 %25, %26
  br i1 %cmp11, label %if.then, label %if.end.16

if.then:                                          ; preds = %cond.end
  %27 = load i64, i64* %prev, align 8
  %28 = load i64, i64* %endpos, align 8
  %cmp13 = icmp slt i64 %27, %28
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %if.then
  %29 = load i64, i64* %endpos, align 8
  store i64 %29, i64* %prev, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.15, %if.then
  br label %for.end

if.end.16:                                        ; preds = %cond.end
  %30 = load i64, i64* %ostart, align 8
  %and17 = and i64 %30, 7
  %conv18 = trunc i64 %and17 to i32
  %cmp19 = icmp eq i32 %conv18, 1
  br i1 %cmp19, label %land.lhs.true.21, label %cond.false.27

land.lhs.true.21:                                 ; preds = %if.end.16
  %31 = load i64, i64* %ostart, align 8
  %call22 = call i32 @XMISCTYPE(i64 %31)
  %cmp23 = icmp eq i32 %call22, 24236
  br i1 %cmp23, label %cond.true.25, label %cond.false.27

cond.true.25:                                     ; preds = %land.lhs.true.21
  %32 = load i64, i64* %ostart, align 8
  %call26 = call i64 @marker_position(i64 %32)
  br label %cond.end.28

cond.false.27:                                    ; preds = %land.lhs.true.21, %if.end.16
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.28

cond.end.28:                                      ; preds = %33, %cond.true.25
  %cond29 = phi i64 [ %call26, %cond.true.25 ], [ 0, %33 ]
  store i64 %cond29, i64* %startpos, align 8
  %34 = load i64, i64* %beg.addr, align 8
  %35 = load i64, i64* %endpos, align 8
  %cmp30 = icmp slt i64 %34, %35
  br i1 %cmp30, label %land.lhs.true.32, label %lor.lhs.false

land.lhs.true.32:                                 ; preds = %cond.end.28
  %36 = load i64, i64* %startpos, align 8
  %37 = load i64, i64* %end.addr, align 8
  %cmp33 = icmp slt i64 %36, %37
  br i1 %cmp33, label %if.then.46, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.32, %cond.end.28
  %38 = load i64, i64* %startpos, align 8
  %39 = load i64, i64* %endpos, align 8
  %cmp35 = icmp eq i64 %38, %39
  br i1 %cmp35, label %land.lhs.true.37, label %if.else.58

land.lhs.true.37:                                 ; preds = %lor.lhs.false
  %40 = load i64, i64* %beg.addr, align 8
  %41 = load i64, i64* %endpos, align 8
  %cmp38 = icmp eq i64 %40, %41
  br i1 %cmp38, label %if.then.46, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %land.lhs.true.37
  %42 = load i8, i8* %end_is_Z, align 1
  %tobool41 = trunc i8 %42 to i1
  br i1 %tobool41, label %land.lhs.true.43, label %if.else.58

land.lhs.true.43:                                 ; preds = %lor.lhs.false.40
  %43 = load i64, i64* %endpos, align 8
  %44 = load i64, i64* %end.addr, align 8
  %cmp44 = icmp eq i64 %43, %44
  br i1 %cmp44, label %if.then.46, label %if.else.58

if.then.46:                                       ; preds = %land.lhs.true.43, %land.lhs.true.37, %land.lhs.true.32
  %45 = load i64, i64* %idx, align 8
  %46 = load i64, i64* %len, align 8
  %cmp47 = icmp eq i64 %45, %46
  br i1 %cmp47, label %if.then.49, label %if.end.54

if.then.49:                                       ; preds = %if.then.46
  %47 = load i8, i8* %extend.addr, align 1
  %tobool50 = trunc i8 %47 to i1
  br i1 %tobool50, label %if.then.51, label %if.else

if.then.51:                                       ; preds = %if.then.49
  %48 = load i64*, i64** %vec, align 8
  %49 = bitcast i64* %48 to i8*
  %50 = load i64*, i64** %len_ptr.addr, align 8
  %call52 = call i8* @xpalloc(i8* %49, i64* %50, i64 1, i64 1152921504606846975, i64 8)
  %51 = bitcast i8* %call52 to i64*
  store i64* %51, i64** %vec, align 8
  %52 = load i64*, i64** %vec, align 8
  %53 = load i64**, i64*** %vec_ptr.addr, align 8
  store i64* %52, i64** %53, align 8
  %54 = load i64*, i64** %len_ptr.addr, align 8
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %len, align 8
  br label %if.end.53

if.else:                                          ; preds = %if.then.49
  store i8 1, i8* %inhibit_storing, align 1
  br label %if.end.53

if.end.53:                                        ; preds = %if.else, %if.then.51
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.then.46
  %56 = load i8, i8* %inhibit_storing, align 1
  %tobool55 = trunc i8 %56 to i1
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.54
  %57 = load i64, i64* %overlay, align 8
  %58 = load i64, i64* %idx, align 8
  %59 = load i64*, i64** %vec, align 8
  %arrayidx = getelementptr inbounds i64, i64* %59, i64 %58
  store i64 %57, i64* %arrayidx, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.54
  %60 = load i64, i64* %idx, align 8
  %inc = add nsw i64 %60, 1
  store i64 %inc, i64* %idx, align 8
  br label %if.end.63

if.else.58:                                       ; preds = %land.lhs.true.43, %lor.lhs.false.40, %lor.lhs.false
  %61 = load i64, i64* %startpos, align 8
  %62 = load i64, i64* %next, align 8
  %cmp59 = icmp slt i64 %61, %62
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.else.58
  %63 = load i64, i64* %startpos, align 8
  store i64 %63, i64* %next, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.61, %if.else.58
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.end.57
  br label %for.inc

for.inc:                                          ; preds = %if.end.63
  %64 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next64 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %64, i32 0, i32 1
  %65 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next64, align 8
  store %struct.Lisp_Overlay* %65, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end, %for.cond
  %66 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 96
  %67 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %67, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.150, %for.end
  %68 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool66 = icmp ne %struct.Lisp_Overlay* %68, null
  br i1 %tobool66, label %for.body.67, label %for.end.152

for.body.67:                                      ; preds = %for.cond.65
  %69 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %70 = bitcast %struct.Lisp_Overlay* %69 to i8*
  %call70 = call i64 @make_lisp_ptr(i8* %70, i32 1)
  store i64 %call70, i64* %overlay, align 8
  %71 = load i64, i64* %overlay, align 8
  %call71 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %71)
  %start72 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call71, i32 0, i32 2
  %72 = load i64, i64* %start72, align 8
  store i64 %72, i64* %ostart, align 8
  %73 = load i64, i64* %overlay, align 8
  %call73 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %73)
  %end74 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call73, i32 0, i32 3
  %74 = load i64, i64* %end74, align 8
  store i64 %74, i64* %oend, align 8
  %75 = load i64, i64* %ostart, align 8
  %and75 = and i64 %75, 7
  %conv76 = trunc i64 %and75 to i32
  %cmp77 = icmp eq i32 %conv76, 1
  br i1 %cmp77, label %land.lhs.true.79, label %cond.false.85

land.lhs.true.79:                                 ; preds = %for.body.67
  %76 = load i64, i64* %ostart, align 8
  %call80 = call i32 @XMISCTYPE(i64 %76)
  %cmp81 = icmp eq i32 %call80, 24236
  br i1 %cmp81, label %cond.true.83, label %cond.false.85

cond.true.83:                                     ; preds = %land.lhs.true.79
  %77 = load i64, i64* %ostart, align 8
  %call84 = call i64 @marker_position(i64 %77)
  br label %cond.end.86

cond.false.85:                                    ; preds = %land.lhs.true.79, %for.body.67
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.86

cond.end.86:                                      ; preds = %78, %cond.true.83
  %cond87 = phi i64 [ %call84, %cond.true.83 ], [ 0, %78 ]
  store i64 %cond87, i64* %startpos68, align 8
  %79 = load i64, i64* %end.addr, align 8
  %80 = load i64, i64* %startpos68, align 8
  %cmp88 = icmp slt i64 %79, %80
  br i1 %cmp88, label %if.then.90, label %if.end.95

if.then.90:                                       ; preds = %cond.end.86
  %81 = load i64, i64* %startpos68, align 8
  %82 = load i64, i64* %next, align 8
  %cmp91 = icmp slt i64 %81, %82
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %if.then.90
  %83 = load i64, i64* %startpos68, align 8
  store i64 %83, i64* %next, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.93, %if.then.90
  br label %for.end.152

if.end.95:                                        ; preds = %cond.end.86
  %84 = load i64, i64* %oend, align 8
  %and96 = and i64 %84, 7
  %conv97 = trunc i64 %and96 to i32
  %cmp98 = icmp eq i32 %conv97, 1
  br i1 %cmp98, label %land.lhs.true.100, label %cond.false.106

land.lhs.true.100:                                ; preds = %if.end.95
  %85 = load i64, i64* %oend, align 8
  %call101 = call i32 @XMISCTYPE(i64 %85)
  %cmp102 = icmp eq i32 %call101, 24236
  br i1 %cmp102, label %cond.true.104, label %cond.false.106

cond.true.104:                                    ; preds = %land.lhs.true.100
  %86 = load i64, i64* %oend, align 8
  %call105 = call i64 @marker_position(i64 %86)
  br label %cond.end.107

cond.false.106:                                   ; preds = %land.lhs.true.100, %if.end.95
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.107

cond.end.107:                                     ; preds = %87, %cond.true.104
  %cond108 = phi i64 [ %call105, %cond.true.104 ], [ 0, %87 ]
  store i64 %cond108, i64* %endpos69, align 8
  %88 = load i64, i64* %beg.addr, align 8
  %89 = load i64, i64* %endpos69, align 8
  %cmp109 = icmp slt i64 %88, %89
  br i1 %cmp109, label %land.lhs.true.111, label %lor.lhs.false.114

land.lhs.true.111:                                ; preds = %cond.end.107
  %90 = load i64, i64* %startpos68, align 8
  %91 = load i64, i64* %end.addr, align 8
  %cmp112 = icmp slt i64 %90, %91
  br i1 %cmp112, label %if.then.126, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %land.lhs.true.111, %cond.end.107
  %92 = load i64, i64* %startpos68, align 8
  %93 = load i64, i64* %endpos69, align 8
  %cmp115 = icmp eq i64 %92, %93
  br i1 %cmp115, label %land.lhs.true.117, label %if.else.141

land.lhs.true.117:                                ; preds = %lor.lhs.false.114
  %94 = load i64, i64* %beg.addr, align 8
  %95 = load i64, i64* %endpos69, align 8
  %cmp118 = icmp eq i64 %94, %95
  br i1 %cmp118, label %if.then.126, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %land.lhs.true.117
  %96 = load i8, i8* %end_is_Z, align 1
  %tobool121 = trunc i8 %96 to i1
  br i1 %tobool121, label %land.lhs.true.123, label %if.else.141

land.lhs.true.123:                                ; preds = %lor.lhs.false.120
  %97 = load i64, i64* %endpos69, align 8
  %98 = load i64, i64* %end.addr, align 8
  %cmp124 = icmp eq i64 %97, %98
  br i1 %cmp124, label %if.then.126, label %if.else.141

if.then.126:                                      ; preds = %land.lhs.true.123, %land.lhs.true.117, %land.lhs.true.111
  %99 = load i64, i64* %idx, align 8
  %100 = load i64, i64* %len, align 8
  %cmp127 = icmp eq i64 %99, %100
  br i1 %cmp127, label %if.then.129, label %if.end.135

if.then.129:                                      ; preds = %if.then.126
  %101 = load i8, i8* %extend.addr, align 1
  %tobool130 = trunc i8 %101 to i1
  br i1 %tobool130, label %if.then.131, label %if.else.133

if.then.131:                                      ; preds = %if.then.129
  %102 = load i64*, i64** %vec, align 8
  %103 = bitcast i64* %102 to i8*
  %104 = load i64*, i64** %len_ptr.addr, align 8
  %call132 = call i8* @xpalloc(i8* %103, i64* %104, i64 1, i64 1152921504606846975, i64 8)
  %105 = bitcast i8* %call132 to i64*
  store i64* %105, i64** %vec, align 8
  %106 = load i64*, i64** %vec, align 8
  %107 = load i64**, i64*** %vec_ptr.addr, align 8
  store i64* %106, i64** %107, align 8
  %108 = load i64*, i64** %len_ptr.addr, align 8
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %len, align 8
  br label %if.end.134

if.else.133:                                      ; preds = %if.then.129
  store i8 1, i8* %inhibit_storing, align 1
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.133, %if.then.131
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.126
  %110 = load i8, i8* %inhibit_storing, align 1
  %tobool136 = trunc i8 %110 to i1
  br i1 %tobool136, label %if.end.139, label %if.then.137

if.then.137:                                      ; preds = %if.end.135
  %111 = load i64, i64* %overlay, align 8
  %112 = load i64, i64* %idx, align 8
  %113 = load i64*, i64** %vec, align 8
  %arrayidx138 = getelementptr inbounds i64, i64* %113, i64 %112
  store i64 %111, i64* %arrayidx138, align 8
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.137, %if.end.135
  %114 = load i64, i64* %idx, align 8
  %inc140 = add nsw i64 %114, 1
  store i64 %inc140, i64* %idx, align 8
  br label %if.end.149

if.else.141:                                      ; preds = %land.lhs.true.123, %lor.lhs.false.120, %lor.lhs.false.114
  %115 = load i64, i64* %endpos69, align 8
  %116 = load i64, i64* %beg.addr, align 8
  %cmp142 = icmp slt i64 %115, %116
  br i1 %cmp142, label %land.lhs.true.144, label %if.end.148

land.lhs.true.144:                                ; preds = %if.else.141
  %117 = load i64, i64* %endpos69, align 8
  %118 = load i64, i64* %prev, align 8
  %cmp145 = icmp sgt i64 %117, %118
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %land.lhs.true.144
  %119 = load i64, i64* %endpos69, align 8
  store i64 %119, i64* %prev, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.147, %land.lhs.true.144, %if.else.141
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.end.139
  br label %for.inc.150

for.inc.150:                                      ; preds = %if.end.149
  %120 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next151 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %120, i32 0, i32 1
  %121 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next151, align 8
  store %struct.Lisp_Overlay* %121, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.65

for.end.152:                                      ; preds = %if.end.94, %for.cond.65
  %122 = load i64*, i64** %next_ptr.addr, align 8
  %tobool153 = icmp ne i64* %122, null
  br i1 %tobool153, label %if.then.154, label %if.end.155

if.then.154:                                      ; preds = %for.end.152
  %123 = load i64, i64* %next, align 8
  %124 = load i64*, i64** %next_ptr.addr, align 8
  store i64 %123, i64* %124, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.154, %for.end.152
  %125 = load i64*, i64** %prev_ptr.addr, align 8
  %tobool156 = icmp ne i64* %125, null
  br i1 %tobool156, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %if.end.155
  %126 = load i64, i64* %prev, align 8
  %127 = load i64*, i64** %prev_ptr.addr, align 8
  store i64 %126, i64* %127, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.157, %if.end.155
  %128 = load i64, i64* %idx, align 8
  ret i64 %128
}

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Foverlay_get(i64 %overlay, i64 %prop) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %plist = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 4
  %2 = load i64, i64* %plist, align 8
  %3 = load i64, i64* %prop.addr, align 8
  %call1 = call i64 @lookup_char_property(i64 %2, i64 %3, i1 zeroext false)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define zeroext i1 @overlay_touches_p(i64 %pos) #3 {
entry:
  %retval = alloca i1, align 1
  %pos.addr = alloca i64, align 8
  %overlay = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %endpos = alloca i64, align 8
  %startpos = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %4 = bitcast %struct.Lisp_Overlay* %3 to i8*
  %call = call i64 @make_lisp_ptr(i8* %4, i32 1)
  store i64 %call, i64* %overlay, align 8
  %5 = load i64, i64* %overlay, align 8
  %call1 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %5)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call1, i32 0, i32 3
  %6 = load i64, i64* %end, align 8
  %and = and i64 %6, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %7 = load i64, i64* %overlay, align 8
  %call3 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %end4 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call3, i32 0, i32 3
  %8 = load i64, i64* %end4, align 8
  %call5 = call i32 @XMISCTYPE(i64 %8)
  %cmp6 = icmp eq i32 %call5, 24236
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* %overlay, align 8
  %call8 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %end9 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call8, i32 0, i32 3
  %10 = load i64, i64* %end9, align 8
  %call10 = call i64 @marker_position(i64 %10)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  %cond = phi i64 [ %call10, %cond.true ], [ 0, %11 ]
  store i64 %cond, i64* %endpos, align 8
  %12 = load i64, i64* %endpos, align 8
  %13 = load i64, i64* %pos.addr, align 8
  %cmp11 = icmp slt i64 %12, %13
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  br label %for.end

if.end:                                           ; preds = %cond.end
  %14 = load i64, i64* %endpos, align 8
  %15 = load i64, i64* %pos.addr, align 8
  %cmp13 = icmp eq i64 %14, %15
  br i1 %cmp13, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %16 = load i64, i64* %overlay, align 8
  %call15 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %16)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call15, i32 0, i32 2
  %17 = load i64, i64* %start, align 8
  %and16 = and i64 %17, 7
  %conv17 = trunc i64 %and16 to i32
  %cmp18 = icmp eq i32 %conv17, 1
  br i1 %cmp18, label %land.lhs.true.20, label %cond.false.30

land.lhs.true.20:                                 ; preds = %lor.lhs.false
  %18 = load i64, i64* %overlay, align 8
  %call21 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %18)
  %start22 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call21, i32 0, i32 2
  %19 = load i64, i64* %start22, align 8
  %call23 = call i32 @XMISCTYPE(i64 %19)
  %cmp24 = icmp eq i32 %call23, 24236
  br i1 %cmp24, label %cond.true.26, label %cond.false.30

cond.true.26:                                     ; preds = %land.lhs.true.20
  %20 = load i64, i64* %overlay, align 8
  %call27 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %20)
  %start28 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call27, i32 0, i32 2
  %21 = load i64, i64* %start28, align 8
  %call29 = call i64 @marker_position(i64 %21)
  br label %cond.end.31

cond.false.30:                                    ; preds = %land.lhs.true.20, %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.31

cond.end.31:                                      ; preds = %22, %cond.true.26
  %cond32 = phi i64 [ %call29, %cond.true.26 ], [ 0, %22 ]
  %23 = load i64, i64* %pos.addr, align 8
  %cmp33 = icmp eq i64 %cond32, %23
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %cond.end.31, %if.end
  store i1 true, i1* %retval
  br label %return

if.end.36:                                        ; preds = %cond.end.31
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %24 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %24, i32 0, i32 1
  %25 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %25, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 96
  %27 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %27, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.90, %for.end
  %28 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool38 = icmp ne %struct.Lisp_Overlay* %28, null
  br i1 %tobool38, label %for.body.39, label %for.end.92

for.body.39:                                      ; preds = %for.cond.37
  %29 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %30 = bitcast %struct.Lisp_Overlay* %29 to i8*
  %call40 = call i64 @make_lisp_ptr(i8* %30, i32 1)
  store i64 %call40, i64* %overlay, align 8
  %31 = load i64, i64* %overlay, align 8
  %call41 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %31)
  %start42 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call41, i32 0, i32 2
  %32 = load i64, i64* %start42, align 8
  %and43 = and i64 %32, 7
  %conv44 = trunc i64 %and43 to i32
  %cmp45 = icmp eq i32 %conv44, 1
  br i1 %cmp45, label %land.lhs.true.47, label %cond.false.57

land.lhs.true.47:                                 ; preds = %for.body.39
  %33 = load i64, i64* %overlay, align 8
  %call48 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %33)
  %start49 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call48, i32 0, i32 2
  %34 = load i64, i64* %start49, align 8
  %call50 = call i32 @XMISCTYPE(i64 %34)
  %cmp51 = icmp eq i32 %call50, 24236
  br i1 %cmp51, label %cond.true.53, label %cond.false.57

cond.true.53:                                     ; preds = %land.lhs.true.47
  %35 = load i64, i64* %overlay, align 8
  %call54 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %35)
  %start55 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call54, i32 0, i32 2
  %36 = load i64, i64* %start55, align 8
  %call56 = call i64 @marker_position(i64 %36)
  br label %cond.end.58

cond.false.57:                                    ; preds = %land.lhs.true.47, %for.body.39
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.58

cond.end.58:                                      ; preds = %37, %cond.true.53
  %cond59 = phi i64 [ %call56, %cond.true.53 ], [ 0, %37 ]
  store i64 %cond59, i64* %startpos, align 8
  %38 = load i64, i64* %pos.addr, align 8
  %39 = load i64, i64* %startpos, align 8
  %cmp60 = icmp slt i64 %38, %39
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %cond.end.58
  br label %for.end.92

if.end.63:                                        ; preds = %cond.end.58
  %40 = load i64, i64* %startpos, align 8
  %41 = load i64, i64* %pos.addr, align 8
  %cmp64 = icmp eq i64 %40, %41
  br i1 %cmp64, label %if.then.88, label %lor.lhs.false.66

lor.lhs.false.66:                                 ; preds = %if.end.63
  %42 = load i64, i64* %overlay, align 8
  %call67 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %42)
  %end68 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call67, i32 0, i32 3
  %43 = load i64, i64* %end68, align 8
  %and69 = and i64 %43, 7
  %conv70 = trunc i64 %and69 to i32
  %cmp71 = icmp eq i32 %conv70, 1
  br i1 %cmp71, label %land.lhs.true.73, label %cond.false.83

land.lhs.true.73:                                 ; preds = %lor.lhs.false.66
  %44 = load i64, i64* %overlay, align 8
  %call74 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %44)
  %end75 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call74, i32 0, i32 3
  %45 = load i64, i64* %end75, align 8
  %call76 = call i32 @XMISCTYPE(i64 %45)
  %cmp77 = icmp eq i32 %call76, 24236
  br i1 %cmp77, label %cond.true.79, label %cond.false.83

cond.true.79:                                     ; preds = %land.lhs.true.73
  %46 = load i64, i64* %overlay, align 8
  %call80 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %46)
  %end81 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call80, i32 0, i32 3
  %47 = load i64, i64* %end81, align 8
  %call82 = call i64 @marker_position(i64 %47)
  br label %cond.end.84

cond.false.83:                                    ; preds = %land.lhs.true.73, %lor.lhs.false.66
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.84

cond.end.84:                                      ; preds = %48, %cond.true.79
  %cond85 = phi i64 [ %call82, %cond.true.79 ], [ 0, %48 ]
  %49 = load i64, i64* %pos.addr, align 8
  %cmp86 = icmp eq i64 %cond85, %49
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %cond.end.84, %if.end.63
  store i1 true, i1* %retval
  br label %return

if.end.89:                                        ; preds = %cond.end.84
  br label %for.inc.90

for.inc.90:                                       ; preds = %if.end.89
  %50 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next91 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %50, i32 0, i32 1
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next91, align 8
  store %struct.Lisp_Overlay* %51, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.37

for.end.92:                                       ; preds = %if.then.62, %for.cond.37
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %for.end.92, %if.then.88, %if.then.35
  %52 = load i1, i1* %retval
  ret i1 %52
}

; Function Attrs: nounwind uwtable
define i64 @sort_overlays(i64* %overlay_vec, i64 %noverlays, %struct.window* %w) #3 {
entry:
  %overlay_vec.addr = alloca i64*, align 8
  %noverlays.addr = alloca i64, align 8
  %w.addr = alloca %struct.window*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %sortvec = alloca %struct.sortvec*, align 8
  %tem = alloca i64, align 8
  %overlay = alloca i64, align 8
  %window = alloca i64, align 8
  %car = alloca i64, align 8
  %cdr = alloca i64, align 8
  store i64* %overlay_vec, i64** %overlay_vec.addr, align 8
  store i64 %noverlays, i64* %noverlays.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %noverlays.addr, align 8
  %1 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %1, 40
  %div1 = udiv i64 %div, 1
  %cmp = icmp ule i64 %0, %div1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %2 = load i64, i64* %noverlays.addr, align 8
  %mul = mul i64 40, %2
  %3 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %3, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %4 = load i64, i64* %noverlays.addr, align 8
  %mul2 = mul i64 40, %4
  %5 = alloca i8, i64 %mul2
  %6 = bitcast i8* %5 to %struct.sortvec*
  store %struct.sortvec* %6, %struct.sortvec** %sortvec, align 8
  br label %if.end

if.else:                                          ; preds = %do.body
  %7 = load i64, i64* %noverlays.addr, align 8
  %call3 = call noalias i8* @xnmalloc(i64 %7, i64 40)
  %8 = bitcast i8* %call3 to %struct.sortvec*
  store %struct.sortvec* %8, %struct.sortvec** %sortvec, align 8
  store i8 1, i8* %sa_must_free, align 1
  %9 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %10 = bitcast %struct.sortvec* %9 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  store i64 0, i64* %i, align 8
  store i64 0, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %11 = load i64, i64* %i, align 8
  %12 = load i64, i64* %noverlays.addr, align 8
  %cmp4 = icmp slt i64 %11, %12
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i64, i64* %i, align 8
  %14 = load i64*, i64** %overlay_vec.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %14, i64 %13
  %15 = load i64, i64* %arrayidx, align 8
  store i64 %15, i64* %overlay, align 8
  %16 = load i64, i64* %overlay, align 8
  %call5 = call zeroext i1 @OVERLAYP(i64 %16)
  br i1 %call5, label %land.lhs.true, label %if.end.153

land.lhs.true:                                    ; preds = %for.body
  %17 = load i64, i64* %overlay, align 8
  %call6 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %17)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call6, i32 0, i32 2
  %18 = load i64, i64* %start, align 8
  %and = and i64 %18, 7
  %conv = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv, 1
  br i1 %cmp7, label %land.lhs.true.9, label %cond.false

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %19 = load i64, i64* %overlay, align 8
  %call10 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %19)
  %start11 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call10, i32 0, i32 2
  %20 = load i64, i64* %start11, align 8
  %call12 = call i32 @XMISCTYPE(i64 %20)
  %cmp13 = icmp eq i32 %call12, 24236
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.9
  %21 = load i64, i64* %overlay, align 8
  %call15 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %21)
  %start16 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call15, i32 0, i32 2
  %22 = load i64, i64* %start16, align 8
  %call17 = call i64 @marker_position(i64 %22)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.9, %land.lhs.true
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %23, %cond.true
  %cond = phi i64 [ %call17, %cond.true ], [ 0, %23 ]
  %cmp18 = icmp sgt i64 %cond, 0
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.153

land.lhs.true.20:                                 ; preds = %cond.end
  %24 = load i64, i64* %overlay, align 8
  %call21 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %24)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call21, i32 0, i32 3
  %25 = load i64, i64* %end, align 8
  %and22 = and i64 %25, 7
  %conv23 = trunc i64 %and22 to i32
  %cmp24 = icmp eq i32 %conv23, 1
  br i1 %cmp24, label %land.lhs.true.26, label %cond.false.36

land.lhs.true.26:                                 ; preds = %land.lhs.true.20
  %26 = load i64, i64* %overlay, align 8
  %call27 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %26)
  %end28 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call27, i32 0, i32 3
  %27 = load i64, i64* %end28, align 8
  %call29 = call i32 @XMISCTYPE(i64 %27)
  %cmp30 = icmp eq i32 %call29, 24236
  br i1 %cmp30, label %cond.true.32, label %cond.false.36

cond.true.32:                                     ; preds = %land.lhs.true.26
  %28 = load i64, i64* %overlay, align 8
  %call33 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %28)
  %end34 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call33, i32 0, i32 3
  %29 = load i64, i64* %end34, align 8
  %call35 = call i64 @marker_position(i64 %29)
  br label %cond.end.37

cond.false.36:                                    ; preds = %land.lhs.true.26, %land.lhs.true.20
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.37

cond.end.37:                                      ; preds = %30, %cond.true.32
  %cond38 = phi i64 [ %call35, %cond.true.32 ], [ 0, %30 ]
  %cmp39 = icmp sgt i64 %cond38, 0
  br i1 %cmp39, label %if.then.41, label %if.end.153

if.then.41:                                       ; preds = %cond.end.37
  %31 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %31, null
  br i1 %tobool, label %if.then.42, label %if.end.53

if.then.42:                                       ; preds = %if.then.41
  %32 = load i64, i64* %overlay, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 1018)
  %call44 = call i64 @Foverlay_get(i64 %32, i64 %call43)
  store i64 %call44, i64* %window, align 8
  %33 = load i64, i64* %window, align 8
  %call45 = call zeroext i1 @WINDOWP(i64 %33)
  br i1 %call45, label %land.lhs.true.47, label %if.end.52

land.lhs.true.47:                                 ; preds = %if.then.42
  %34 = load i64, i64* %window, align 8
  %call48 = call %struct.window* @XWINDOW(i64 %34)
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp49 = icmp ne %struct.window* %call48, %35
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %land.lhs.true.47
  br label %for.inc

if.end.52:                                        ; preds = %land.lhs.true.47, %if.then.42
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.41
  %36 = load i64, i64* %overlay, align 8
  %37 = load i64, i64* %j, align 8
  %38 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx54 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %38, i64 %37
  %overlay55 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx54, i32 0, i32 0
  store i64 %36, i64* %overlay55, align 8
  %39 = load i64, i64* %overlay, align 8
  %call56 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %39)
  %start57 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call56, i32 0, i32 2
  %40 = load i64, i64* %start57, align 8
  %and58 = and i64 %40, 7
  %conv59 = trunc i64 %and58 to i32
  %cmp60 = icmp eq i32 %conv59, 1
  br i1 %cmp60, label %land.lhs.true.62, label %cond.false.72

land.lhs.true.62:                                 ; preds = %if.end.53
  %41 = load i64, i64* %overlay, align 8
  %call63 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %41)
  %start64 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call63, i32 0, i32 2
  %42 = load i64, i64* %start64, align 8
  %call65 = call i32 @XMISCTYPE(i64 %42)
  %cmp66 = icmp eq i32 %call65, 24236
  br i1 %cmp66, label %cond.true.68, label %cond.false.72

cond.true.68:                                     ; preds = %land.lhs.true.62
  %43 = load i64, i64* %overlay, align 8
  %call69 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %43)
  %start70 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call69, i32 0, i32 2
  %44 = load i64, i64* %start70, align 8
  %call71 = call i64 @marker_position(i64 %44)
  br label %cond.end.73

cond.false.72:                                    ; preds = %land.lhs.true.62, %if.end.53
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.73

cond.end.73:                                      ; preds = %45, %cond.true.68
  %cond74 = phi i64 [ %call71, %cond.true.68 ], [ 0, %45 ]
  %46 = load i64, i64* %j, align 8
  %47 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx75 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %47, i64 %46
  %beg = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx75, i32 0, i32 1
  store i64 %cond74, i64* %beg, align 8
  %48 = load i64, i64* %overlay, align 8
  %call76 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %48)
  %end77 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call76, i32 0, i32 3
  %49 = load i64, i64* %end77, align 8
  %and78 = and i64 %49, 7
  %conv79 = trunc i64 %and78 to i32
  %cmp80 = icmp eq i32 %conv79, 1
  br i1 %cmp80, label %land.lhs.true.82, label %cond.false.92

land.lhs.true.82:                                 ; preds = %cond.end.73
  %50 = load i64, i64* %overlay, align 8
  %call83 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %50)
  %end84 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call83, i32 0, i32 3
  %51 = load i64, i64* %end84, align 8
  %call85 = call i32 @XMISCTYPE(i64 %51)
  %cmp86 = icmp eq i32 %call85, 24236
  br i1 %cmp86, label %cond.true.88, label %cond.false.92

cond.true.88:                                     ; preds = %land.lhs.true.82
  %52 = load i64, i64* %overlay, align 8
  %call89 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %52)
  %end90 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call89, i32 0, i32 3
  %53 = load i64, i64* %end90, align 8
  %call91 = call i64 @marker_position(i64 %53)
  br label %cond.end.93

cond.false.92:                                    ; preds = %land.lhs.true.82, %cond.end.73
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.93

cond.end.93:                                      ; preds = %54, %cond.true.88
  %cond94 = phi i64 [ %call91, %cond.true.88 ], [ 0, %54 ]
  %55 = load i64, i64* %j, align 8
  %56 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx95 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %56, i64 %55
  %end96 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx95, i32 0, i32 2
  store i64 %cond94, i64* %end96, align 8
  %57 = load i64, i64* %overlay, align 8
  %call97 = call i64 @builtin_lisp_symbol(i32 773)
  %call98 = call i64 @Foverlay_get(i64 %57, i64 %call97)
  store i64 %call98, i64* %tem, align 8
  %58 = load i64, i64* %tem, align 8
  %call99 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp100 = icmp eq i64 %58, %call99
  br i1 %cmp100, label %if.then.102, label %if.else.105

if.then.102:                                      ; preds = %cond.end.93
  %59 = load i64, i64* %j, align 8
  %60 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx103 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %60, i64 %59
  %priority = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx103, i32 0, i32 3
  store i64 0, i64* %priority, align 8
  %61 = load i64, i64* %j, align 8
  %62 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx104 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %62, i64 %61
  %spriority = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx104, i32 0, i32 4
  store i64 0, i64* %spriority, align 8
  br label %if.end.152

if.else.105:                                      ; preds = %cond.end.93
  %63 = load i64, i64* %tem, align 8
  %and106 = and i64 %63, 7
  %conv107 = trunc i64 %and106 to i32
  %and108 = and i32 %conv107, -5
  %cmp109 = icmp eq i32 %and108, 2
  br i1 %cmp109, label %if.then.111, label %if.else.116

if.then.111:                                      ; preds = %if.else.105
  %64 = load i64, i64* %tem, align 8
  %shr = ashr i64 %64, 2
  %65 = load i64, i64* %j, align 8
  %66 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx112 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %66, i64 %65
  %priority113 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx112, i32 0, i32 3
  store i64 %shr, i64* %priority113, align 8
  %67 = load i64, i64* %j, align 8
  %68 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx114 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %68, i64 %67
  %spriority115 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx114, i32 0, i32 4
  store i64 0, i64* %spriority115, align 8
  br label %if.end.151

if.else.116:                                      ; preds = %if.else.105
  %69 = load i64, i64* %tem, align 8
  %and117 = and i64 %69, 7
  %conv118 = trunc i64 %and117 to i32
  %cmp119 = icmp eq i32 %conv118, 3
  br i1 %cmp119, label %if.then.121, label %if.end.150

if.then.121:                                      ; preds = %if.else.116
  %70 = load i64, i64* %tem, align 8
  %sub122 = sub nsw i64 %70, 3
  %71 = inttoptr i64 %sub122 to i8*
  %72 = bitcast i8* %71 to %struct.Lisp_Cons*
  %car123 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %72, i32 0, i32 0
  %73 = load i64, i64* %car123, align 8
  store i64 %73, i64* %car, align 8
  %74 = load i64, i64* %tem, align 8
  %sub124 = sub nsw i64 %74, 3
  %75 = inttoptr i64 %sub124 to i8*
  %76 = bitcast i8* %75 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %76, i32 0, i32 1
  %cdr125 = bitcast %union.anon.11* %u to i64*
  %77 = load i64, i64* %cdr125, align 8
  store i64 %77, i64* %cdr, align 8
  %78 = load i64, i64* %car, align 8
  %and126 = and i64 %78, 7
  %conv127 = trunc i64 %and126 to i32
  %and128 = and i32 %conv127, -5
  %cmp129 = icmp eq i32 %and128, 2
  br i1 %cmp129, label %cond.true.131, label %cond.false.133

cond.true.131:                                    ; preds = %if.then.121
  %79 = load i64, i64* %car, align 8
  %shr132 = ashr i64 %79, 2
  br label %cond.end.134

cond.false.133:                                   ; preds = %if.then.121
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.false.133, %cond.true.131
  %cond135 = phi i64 [ %shr132, %cond.true.131 ], [ 0, %cond.false.133 ]
  %80 = load i64, i64* %j, align 8
  %81 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx136 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %81, i64 %80
  %priority137 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx136, i32 0, i32 3
  store i64 %cond135, i64* %priority137, align 8
  %82 = load i64, i64* %cdr, align 8
  %and138 = and i64 %82, 7
  %conv139 = trunc i64 %and138 to i32
  %and140 = and i32 %conv139, -5
  %cmp141 = icmp eq i32 %and140, 2
  br i1 %cmp141, label %cond.true.143, label %cond.false.145

cond.true.143:                                    ; preds = %cond.end.134
  %83 = load i64, i64* %cdr, align 8
  %shr144 = ashr i64 %83, 2
  br label %cond.end.146

cond.false.145:                                   ; preds = %cond.end.134
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.false.145, %cond.true.143
  %cond147 = phi i64 [ %shr144, %cond.true.143 ], [ 0, %cond.false.145 ]
  %84 = load i64, i64* %j, align 8
  %85 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx148 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %85, i64 %84
  %spriority149 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx148, i32 0, i32 4
  store i64 %cond147, i64* %spriority149, align 8
  br label %if.end.150

if.end.150:                                       ; preds = %cond.end.146, %if.else.116
  br label %if.end.151

if.end.151:                                       ; preds = %if.end.150, %if.then.111
  br label %if.end.152

if.end.152:                                       ; preds = %if.end.151, %if.then.102
  %86 = load i64, i64* %j, align 8
  %inc = add nsw i64 %86, 1
  store i64 %inc, i64* %j, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %cond.end.37, %cond.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.153, %if.then.51
  %87 = load i64, i64* %i, align 8
  %inc154 = add nsw i64 %87, 1
  store i64 %inc154, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %88 = load i64, i64* %j, align 8
  store i64 %88, i64* %noverlays.addr, align 8
  %89 = load i64, i64* %noverlays.addr, align 8
  %cmp155 = icmp sgt i64 %89, 1
  br i1 %cmp155, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %for.end
  %90 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %91 = bitcast %struct.sortvec* %90 to i8*
  %92 = load i64, i64* %noverlays.addr, align 8
  call void @qsort(i8* %91, i64 %92, i64 40, i32 (i8*, i8*)* @compare_overlays)
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.157, %for.end
  store i64 0, i64* %i, align 8
  br label %for.cond.159

for.cond.159:                                     ; preds = %for.inc.166, %if.end.158
  %93 = load i64, i64* %i, align 8
  %94 = load i64, i64* %noverlays.addr, align 8
  %cmp160 = icmp slt i64 %93, %94
  br i1 %cmp160, label %for.body.162, label %for.end.168

for.body.162:                                     ; preds = %for.cond.159
  %95 = load i64, i64* %i, align 8
  %96 = load %struct.sortvec*, %struct.sortvec** %sortvec, align 8
  %arrayidx163 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %96, i64 %95
  %overlay164 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %arrayidx163, i32 0, i32 0
  %97 = load i64, i64* %overlay164, align 8
  %98 = load i64, i64* %i, align 8
  %99 = load i64*, i64** %overlay_vec.addr, align 8
  %arrayidx165 = getelementptr inbounds i64, i64* %99, i64 %98
  store i64 %97, i64* %arrayidx165, align 8
  br label %for.inc.166

for.inc.166:                                      ; preds = %for.body.162
  %100 = load i64, i64* %i, align 8
  %inc167 = add nsw i64 %100, 1
  store i64 %inc167, i64* %i, align 8
  br label %for.cond.159

for.end.168:                                      ; preds = %for.cond.159
  br label %do.body.169

do.body.169:                                      ; preds = %for.end.168
  %101 = load i8, i8* %sa_must_free, align 1
  %tobool170 = trunc i8 %101 to i1
  br i1 %tobool170, label %if.then.171, label %if.end.174

if.then.171:                                      ; preds = %do.body.169
  store i8 0, i8* %sa_must_free, align 1
  %102 = load i64, i64* %sa_count, align 8
  %call172 = call i64 @builtin_lisp_symbol(i32 0)
  %call173 = call i64 @unbind_to(i64 %102, i64 %call172)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.171, %do.body.169
  br label %do.end.175

do.end.175:                                       ; preds = %if.end.174
  %103 = load i64, i64* %noverlays.addr, align 8
  ret i64 %103
}

declare zeroext i1 @OVERLAYP(i64) #1

declare zeroext i1 @WINDOWP(i64) #1

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compare_overlays(i8* %v1, i8* %v2) #3 {
entry:
  %retval = alloca i32, align 4
  %v1.addr = alloca i8*, align 8
  %v2.addr = alloca i8*, align 8
  %s1 = alloca %struct.sortvec*, align 8
  %s2 = alloca %struct.sortvec*, align 8
  store i8* %v1, i8** %v1.addr, align 8
  store i8* %v2, i8** %v2.addr, align 8
  %0 = load i8*, i8** %v1.addr, align 8
  %1 = bitcast i8* %0 to %struct.sortvec*
  store %struct.sortvec* %1, %struct.sortvec** %s1, align 8
  %2 = load i8*, i8** %v2.addr, align 8
  %3 = bitcast i8* %2 to %struct.sortvec*
  store %struct.sortvec* %3, %struct.sortvec** %s2, align 8
  %4 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %priority = getelementptr inbounds %struct.sortvec, %struct.sortvec* %4, i32 0, i32 3
  %5 = load i64, i64* %priority, align 8
  %6 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %priority1 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %6, i32 0, i32 3
  %7 = load i64, i64* %priority1, align 8
  %cmp = icmp ne i64 %5, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %priority2 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %8, i32 0, i32 3
  %9 = load i64, i64* %priority2, align 8
  %10 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %priority3 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %10, i32 0, i32 3
  %11 = load i64, i64* %priority3, align 8
  %cmp4 = icmp slt i64 %9, %11
  %cond = select i1 %cmp4, i32 -1, i32 1
  store i32 %cond, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %12 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %beg = getelementptr inbounds %struct.sortvec, %struct.sortvec* %12, i32 0, i32 1
  %13 = load i64, i64* %beg, align 8
  %14 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %beg5 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %14, i32 0, i32 1
  %15 = load i64, i64* %beg5, align 8
  %cmp6 = icmp slt i64 %13, %15
  br i1 %cmp6, label %if.then.7, label %if.else.13

if.then.7:                                        ; preds = %if.else
  %16 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %end = getelementptr inbounds %struct.sortvec, %struct.sortvec* %16, i32 0, i32 2
  %17 = load i64, i64* %end, align 8
  %18 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %end8 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %18, i32 0, i32 2
  %19 = load i64, i64* %end8, align 8
  %cmp9 = icmp slt i64 %17, %19
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.7
  %20 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %spriority = getelementptr inbounds %struct.sortvec, %struct.sortvec* %20, i32 0, i32 4
  %21 = load i64, i64* %spriority, align 8
  %22 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %spriority10 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %22, i32 0, i32 4
  %23 = load i64, i64* %spriority10, align 8
  %cmp11 = icmp sgt i64 %21, %23
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.7
  %24 = phi i1 [ false, %if.then.7 ], [ %cmp11, %land.rhs ]
  %cond12 = select i1 %24, i32 1, i32 -1
  store i32 %cond12, i32* %retval
  br label %return

if.else.13:                                       ; preds = %if.else
  %25 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %beg14 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %25, i32 0, i32 1
  %26 = load i64, i64* %beg14, align 8
  %27 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %beg15 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %27, i32 0, i32 1
  %28 = load i64, i64* %beg15, align 8
  %cmp16 = icmp sgt i64 %26, %28
  br i1 %cmp16, label %if.then.17, label %if.else.27

if.then.17:                                       ; preds = %if.else.13
  %29 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %end18 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %29, i32 0, i32 2
  %30 = load i64, i64* %end18, align 8
  %31 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %end19 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %31, i32 0, i32 2
  %32 = load i64, i64* %end19, align 8
  %cmp20 = icmp sgt i64 %30, %32
  br i1 %cmp20, label %land.rhs.21, label %land.end.25

land.rhs.21:                                      ; preds = %if.then.17
  %33 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %spriority22 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %33, i32 0, i32 4
  %34 = load i64, i64* %spriority22, align 8
  %35 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %spriority23 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %35, i32 0, i32 4
  %36 = load i64, i64* %spriority23, align 8
  %cmp24 = icmp slt i64 %34, %36
  br label %land.end.25

land.end.25:                                      ; preds = %land.rhs.21, %if.then.17
  %37 = phi i1 [ false, %if.then.17 ], [ %cmp24, %land.rhs.21 ]
  %cond26 = select i1 %37, i32 -1, i32 1
  store i32 %cond26, i32* %retval
  br label %return

if.else.27:                                       ; preds = %if.else.13
  %38 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %end28 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %38, i32 0, i32 2
  %39 = load i64, i64* %end28, align 8
  %40 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %end29 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %40, i32 0, i32 2
  %41 = load i64, i64* %end29, align 8
  %cmp30 = icmp ne i64 %39, %41
  br i1 %cmp30, label %if.then.31, label %if.else.36

if.then.31:                                       ; preds = %if.else.27
  %42 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %end32 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %42, i32 0, i32 2
  %43 = load i64, i64* %end32, align 8
  %44 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %end33 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %44, i32 0, i32 2
  %45 = load i64, i64* %end33, align 8
  %cmp34 = icmp slt i64 %43, %45
  %cond35 = select i1 %cmp34, i32 -1, i32 1
  store i32 %cond35, i32* %retval
  br label %return

if.else.36:                                       ; preds = %if.else.27
  %46 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %spriority37 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %46, i32 0, i32 4
  %47 = load i64, i64* %spriority37, align 8
  %48 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %spriority38 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %48, i32 0, i32 4
  %49 = load i64, i64* %spriority38, align 8
  %cmp39 = icmp ne i64 %47, %49
  br i1 %cmp39, label %if.then.40, label %if.else.45

if.then.40:                                       ; preds = %if.else.36
  %50 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %spriority41 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %50, i32 0, i32 4
  %51 = load i64, i64* %spriority41, align 8
  %52 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %spriority42 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %52, i32 0, i32 4
  %53 = load i64, i64* %spriority42, align 8
  %cmp43 = icmp slt i64 %51, %53
  %cond44 = select i1 %cmp43, i32 -1, i32 1
  store i32 %cond44, i32* %retval
  br label %return

if.else.45:                                       ; preds = %if.else.36
  %54 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %overlay = getelementptr inbounds %struct.sortvec, %struct.sortvec* %54, i32 0, i32 0
  %55 = load i64, i64* %overlay, align 8
  %56 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %overlay46 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %56, i32 0, i32 0
  %57 = load i64, i64* %overlay46, align 8
  %cmp47 = icmp eq i64 %55, %57
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.else.45
  store i32 0, i32* %retval
  br label %return

if.else.49:                                       ; preds = %if.else.45
  %58 = load %struct.sortvec*, %struct.sortvec** %s1, align 8
  %overlay50 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %58, i32 0, i32 0
  %59 = load i64, i64* %overlay50, align 8
  %60 = load %struct.sortvec*, %struct.sortvec** %s2, align 8
  %overlay51 = getelementptr inbounds %struct.sortvec, %struct.sortvec* %60, i32 0, i32 0
  %61 = load i64, i64* %overlay51, align 8
  %cmp52 = icmp slt i64 %59, %61
  %cond53 = select i1 %cmp52, i32 -1, i32 1
  store i32 %cond53, i32* %retval
  br label %return

return:                                           ; preds = %if.else.49, %if.then.48, %if.then.40, %if.then.31, %land.end.25, %land.end, %if.then
  %62 = load i32, i32* %retval
  ret i32 %62
}

; Function Attrs: nounwind uwtable
define i64 @overlay_strings(i64 %pos, %struct.window* %w, i8** %pstr) #3 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %w.addr = alloca %struct.window*, align 8
  %pstr.addr = alloca i8**, align 8
  %overlay = alloca i64, align 8
  %window = alloca i64, align 8
  %str = alloca i64, align 8
  %ov = alloca %struct.Lisp_Overlay*, align 8
  %startpos = alloca i64, align 8
  %endpos = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %tem = alloca i64, align 8
  %i = alloca i64, align 8
  %p = alloca i8*, align 8
  %total = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %nbytes2159 = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i8** %pstr, i8*** %pstr.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 39
  %1 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  %lnot = xor i1 %cmp, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %multibyte, align 1
  store i64 0, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  store i64 0, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 2), align 8
  store i64 0, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  store i64 0, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 2), align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 95
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %3, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %6 = bitcast %struct.Lisp_Overlay* %5 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %6, i32 1)
  store i64 %call1, i64* %overlay, align 8
  %7 = load i64, i64* %overlay, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 2
  %8 = load i64, i64* %start, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 1
  br i1 %cmp3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %9 = load i64, i64* %overlay, align 8
  %call5 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %start6 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call5, i32 0, i32 2
  %10 = load i64, i64* %start6, align 8
  %call7 = call i32 @XMISCTYPE(i64 %10)
  %cmp8 = icmp eq i32 %call7, 24236
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %11 = load i64, i64* %overlay, align 8
  %call10 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %11)
  %start11 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call10, i32 0, i32 2
  %12 = load i64, i64* %start11, align 8
  %call12 = call i64 @marker_position(i64 %12)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %13, %cond.true
  %cond = phi i64 [ %call12, %cond.true ], [ 0, %13 ]
  store i64 %cond, i64* %startpos, align 8
  %14 = load i64, i64* %overlay, align 8
  %call13 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %14)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call13, i32 0, i32 3
  %15 = load i64, i64* %end, align 8
  %and14 = and i64 %15, 7
  %conv15 = trunc i64 %and14 to i32
  %cmp16 = icmp eq i32 %conv15, 1
  br i1 %cmp16, label %land.lhs.true.18, label %cond.false.28

land.lhs.true.18:                                 ; preds = %cond.end
  %16 = load i64, i64* %overlay, align 8
  %call19 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %16)
  %end20 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call19, i32 0, i32 3
  %17 = load i64, i64* %end20, align 8
  %call21 = call i32 @XMISCTYPE(i64 %17)
  %cmp22 = icmp eq i32 %call21, 24236
  br i1 %cmp22, label %cond.true.24, label %cond.false.28

cond.true.24:                                     ; preds = %land.lhs.true.18
  %18 = load i64, i64* %overlay, align 8
  %call25 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %18)
  %end26 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call25, i32 0, i32 3
  %19 = load i64, i64* %end26, align 8
  %call27 = call i64 @marker_position(i64 %19)
  br label %cond.end.29

cond.false.28:                                    ; preds = %land.lhs.true.18, %cond.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.29

cond.end.29:                                      ; preds = %20, %cond.true.24
  %cond30 = phi i64 [ %call27, %cond.true.24 ], [ 0, %20 ]
  store i64 %cond30, i64* %endpos, align 8
  %21 = load i64, i64* %endpos, align 8
  %22 = load i64, i64* %pos.addr, align 8
  %cmp31 = icmp slt i64 %21, %22
  br i1 %cmp31, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.29
  br label %for.end

if.end:                                           ; preds = %cond.end.29
  %23 = load i64, i64* %endpos, align 8
  %24 = load i64, i64* %pos.addr, align 8
  %cmp33 = icmp ne i64 %23, %24
  br i1 %cmp33, label %land.lhs.true.35, label %if.end.39

land.lhs.true.35:                                 ; preds = %if.end
  %25 = load i64, i64* %startpos, align 8
  %26 = load i64, i64* %pos.addr, align 8
  %cmp36 = icmp ne i64 %25, %26
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %land.lhs.true.35
  br label %for.inc

if.end.39:                                        ; preds = %land.lhs.true.35, %if.end
  %27 = load i64, i64* %overlay, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 1018)
  %call41 = call i64 @Foverlay_get(i64 %27, i64 %call40)
  store i64 %call41, i64* %window, align 8
  %28 = load i64, i64* %window, align 8
  %call42 = call zeroext i1 @WINDOWP(i64 %28)
  br i1 %call42, label %land.lhs.true.44, label %if.end.49

land.lhs.true.44:                                 ; preds = %if.end.39
  %29 = load i64, i64* %window, align 8
  %call45 = call %struct.window* @XWINDOW(i64 %29)
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp46 = icmp ne %struct.window* %call45, %30
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %land.lhs.true.44
  br label %for.inc

if.end.49:                                        ; preds = %land.lhs.true.44, %if.end.39
  %31 = load i64, i64* %startpos, align 8
  %32 = load i64, i64* %pos.addr, align 8
  %cmp50 = icmp eq i64 %31, %32
  br i1 %cmp50, label %land.lhs.true.52, label %if.else

land.lhs.true.52:                                 ; preds = %if.end.49
  %33 = load i64, i64* %overlay, align 8
  %call53 = call i64 @builtin_lisp_symbol(i32 199)
  %call54 = call i64 @Foverlay_get(i64 %33, i64 %call53)
  store i64 %call54, i64* %str, align 8
  %34 = load i64, i64* %str, align 8
  %call55 = call zeroext i1 @STRINGP(i64 %34)
  br i1 %call55, label %if.then.57, label %if.else

if.then.57:                                       ; preds = %land.lhs.true.52
  %35 = load i64, i64* %str, align 8
  %36 = load i64, i64* %startpos, align 8
  %37 = load i64, i64* %endpos, align 8
  %cmp58 = icmp eq i64 %36, %37
  br i1 %cmp58, label %cond.true.60, label %cond.false.63

cond.true.60:                                     ; preds = %if.then.57
  %38 = load i64, i64* %overlay, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 168)
  %call62 = call i64 @Foverlay_get(i64 %38, i64 %call61)
  br label %cond.end.65

cond.false.63:                                    ; preds = %if.then.57
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.63, %cond.true.60
  %cond66 = phi i64 [ %call62, %cond.true.60 ], [ %call64, %cond.false.63 ]
  %39 = load i64, i64* %overlay, align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 773)
  %call68 = call i64 @Foverlay_get(i64 %39, i64 %call67)
  %40 = load i64, i64* %endpos, align 8
  %41 = load i64, i64* %startpos, align 8
  %sub = sub nsw i64 %40, %41
  call void @record_overlay_string(%struct.sortstrlist* @overlay_heads, i64 %35, i64 %cond66, i64 %call68, i64 %sub)
  br label %if.end.82

if.else:                                          ; preds = %land.lhs.true.52, %if.end.49
  %42 = load i64, i64* %endpos, align 8
  %43 = load i64, i64* %pos.addr, align 8
  %cmp69 = icmp eq i64 %42, %43
  br i1 %cmp69, label %land.lhs.true.71, label %if.end.81

land.lhs.true.71:                                 ; preds = %if.else
  %44 = load i64, i64* %overlay, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 168)
  %call73 = call i64 @Foverlay_get(i64 %44, i64 %call72)
  store i64 %call73, i64* %str, align 8
  %45 = load i64, i64* %str, align 8
  %call74 = call zeroext i1 @STRINGP(i64 %45)
  br i1 %call74, label %if.then.76, label %if.end.81

if.then.76:                                       ; preds = %land.lhs.true.71
  %46 = load i64, i64* %str, align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  %47 = load i64, i64* %overlay, align 8
  %call78 = call i64 @builtin_lisp_symbol(i32 773)
  %call79 = call i64 @Foverlay_get(i64 %47, i64 %call78)
  %48 = load i64, i64* %endpos, align 8
  %49 = load i64, i64* %startpos, align 8
  %sub80 = sub nsw i64 %48, %49
  call void @record_overlay_string(%struct.sortstrlist* @overlay_tails, i64 %46, i64 %call77, i64 %call79, i64 %sub80)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.76, %land.lhs.true.71, %if.else
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %cond.end.65
  br label %for.inc

for.inc:                                          ; preds = %if.end.82, %if.then.48, %if.then.38
  %50 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %50, i32 0, i32 1
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %51, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 96
  %53 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %53, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.181, %for.end
  %54 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %tobool84 = icmp ne %struct.Lisp_Overlay* %54, null
  br i1 %tobool84, label %for.body.85, label %for.end.183

for.body.85:                                      ; preds = %for.cond.83
  %55 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %56 = bitcast %struct.Lisp_Overlay* %55 to i8*
  %call86 = call i64 @make_lisp_ptr(i8* %56, i32 1)
  store i64 %call86, i64* %overlay, align 8
  %57 = load i64, i64* %overlay, align 8
  %call87 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %57)
  %start88 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call87, i32 0, i32 2
  %58 = load i64, i64* %start88, align 8
  %and89 = and i64 %58, 7
  %conv90 = trunc i64 %and89 to i32
  %cmp91 = icmp eq i32 %conv90, 1
  br i1 %cmp91, label %land.lhs.true.93, label %cond.false.103

land.lhs.true.93:                                 ; preds = %for.body.85
  %59 = load i64, i64* %overlay, align 8
  %call94 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %59)
  %start95 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call94, i32 0, i32 2
  %60 = load i64, i64* %start95, align 8
  %call96 = call i32 @XMISCTYPE(i64 %60)
  %cmp97 = icmp eq i32 %call96, 24236
  br i1 %cmp97, label %cond.true.99, label %cond.false.103

cond.true.99:                                     ; preds = %land.lhs.true.93
  %61 = load i64, i64* %overlay, align 8
  %call100 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %61)
  %start101 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call100, i32 0, i32 2
  %62 = load i64, i64* %start101, align 8
  %call102 = call i64 @marker_position(i64 %62)
  br label %cond.end.104

cond.false.103:                                   ; preds = %land.lhs.true.93, %for.body.85
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.104

cond.end.104:                                     ; preds = %63, %cond.true.99
  %cond105 = phi i64 [ %call102, %cond.true.99 ], [ 0, %63 ]
  store i64 %cond105, i64* %startpos, align 8
  %64 = load i64, i64* %overlay, align 8
  %call106 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %64)
  %end107 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call106, i32 0, i32 3
  %65 = load i64, i64* %end107, align 8
  %and108 = and i64 %65, 7
  %conv109 = trunc i64 %and108 to i32
  %cmp110 = icmp eq i32 %conv109, 1
  br i1 %cmp110, label %land.lhs.true.112, label %cond.false.122

land.lhs.true.112:                                ; preds = %cond.end.104
  %66 = load i64, i64* %overlay, align 8
  %call113 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %66)
  %end114 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call113, i32 0, i32 3
  %67 = load i64, i64* %end114, align 8
  %call115 = call i32 @XMISCTYPE(i64 %67)
  %cmp116 = icmp eq i32 %call115, 24236
  br i1 %cmp116, label %cond.true.118, label %cond.false.122

cond.true.118:                                    ; preds = %land.lhs.true.112
  %68 = load i64, i64* %overlay, align 8
  %call119 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %68)
  %end120 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call119, i32 0, i32 3
  %69 = load i64, i64* %end120, align 8
  %call121 = call i64 @marker_position(i64 %69)
  br label %cond.end.123

cond.false.122:                                   ; preds = %land.lhs.true.112, %cond.end.104
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.123

cond.end.123:                                     ; preds = %70, %cond.true.118
  %cond124 = phi i64 [ %call121, %cond.true.118 ], [ 0, %70 ]
  store i64 %cond124, i64* %endpos, align 8
  %71 = load i64, i64* %startpos, align 8
  %72 = load i64, i64* %pos.addr, align 8
  %cmp125 = icmp sgt i64 %71, %72
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %cond.end.123
  br label %for.end.183

if.end.128:                                       ; preds = %cond.end.123
  %73 = load i64, i64* %endpos, align 8
  %74 = load i64, i64* %pos.addr, align 8
  %cmp129 = icmp ne i64 %73, %74
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.135

land.lhs.true.131:                                ; preds = %if.end.128
  %75 = load i64, i64* %startpos, align 8
  %76 = load i64, i64* %pos.addr, align 8
  %cmp132 = icmp ne i64 %75, %76
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %land.lhs.true.131
  br label %for.inc.181

if.end.135:                                       ; preds = %land.lhs.true.131, %if.end.128
  %77 = load i64, i64* %overlay, align 8
  %call136 = call i64 @builtin_lisp_symbol(i32 1018)
  %call137 = call i64 @Foverlay_get(i64 %77, i64 %call136)
  store i64 %call137, i64* %window, align 8
  %78 = load i64, i64* %window, align 8
  %call138 = call zeroext i1 @WINDOWP(i64 %78)
  br i1 %call138, label %land.lhs.true.140, label %if.end.145

land.lhs.true.140:                                ; preds = %if.end.135
  %79 = load i64, i64* %window, align 8
  %call141 = call %struct.window* @XWINDOW(i64 %79)
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp142 = icmp ne %struct.window* %call141, %80
  br i1 %cmp142, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %land.lhs.true.140
  br label %for.inc.181

if.end.145:                                       ; preds = %land.lhs.true.140, %if.end.135
  %81 = load i64, i64* %startpos, align 8
  %82 = load i64, i64* %pos.addr, align 8
  %cmp146 = icmp eq i64 %81, %82
  br i1 %cmp146, label %land.lhs.true.148, label %if.else.166

land.lhs.true.148:                                ; preds = %if.end.145
  %83 = load i64, i64* %overlay, align 8
  %call149 = call i64 @builtin_lisp_symbol(i32 199)
  %call150 = call i64 @Foverlay_get(i64 %83, i64 %call149)
  store i64 %call150, i64* %str, align 8
  %84 = load i64, i64* %str, align 8
  %call151 = call zeroext i1 @STRINGP(i64 %84)
  br i1 %call151, label %if.then.153, label %if.else.166

if.then.153:                                      ; preds = %land.lhs.true.148
  %85 = load i64, i64* %str, align 8
  %86 = load i64, i64* %startpos, align 8
  %87 = load i64, i64* %endpos, align 8
  %cmp154 = icmp eq i64 %86, %87
  br i1 %cmp154, label %cond.true.156, label %cond.false.159

cond.true.156:                                    ; preds = %if.then.153
  %88 = load i64, i64* %overlay, align 8
  %call157 = call i64 @builtin_lisp_symbol(i32 168)
  %call158 = call i64 @Foverlay_get(i64 %88, i64 %call157)
  br label %cond.end.161

cond.false.159:                                   ; preds = %if.then.153
  %call160 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.159, %cond.true.156
  %cond162 = phi i64 [ %call158, %cond.true.156 ], [ %call160, %cond.false.159 ]
  %89 = load i64, i64* %overlay, align 8
  %call163 = call i64 @builtin_lisp_symbol(i32 773)
  %call164 = call i64 @Foverlay_get(i64 %89, i64 %call163)
  %90 = load i64, i64* %endpos, align 8
  %91 = load i64, i64* %startpos, align 8
  %sub165 = sub nsw i64 %90, %91
  call void @record_overlay_string(%struct.sortstrlist* @overlay_heads, i64 %85, i64 %cond162, i64 %call164, i64 %sub165)
  br label %if.end.180

if.else.166:                                      ; preds = %land.lhs.true.148, %if.end.145
  %92 = load i64, i64* %endpos, align 8
  %93 = load i64, i64* %pos.addr, align 8
  %cmp167 = icmp eq i64 %92, %93
  br i1 %cmp167, label %land.lhs.true.169, label %if.end.179

land.lhs.true.169:                                ; preds = %if.else.166
  %94 = load i64, i64* %overlay, align 8
  %call170 = call i64 @builtin_lisp_symbol(i32 168)
  %call171 = call i64 @Foverlay_get(i64 %94, i64 %call170)
  store i64 %call171, i64* %str, align 8
  %95 = load i64, i64* %str, align 8
  %call172 = call zeroext i1 @STRINGP(i64 %95)
  br i1 %call172, label %if.then.174, label %if.end.179

if.then.174:                                      ; preds = %land.lhs.true.169
  %96 = load i64, i64* %str, align 8
  %call175 = call i64 @builtin_lisp_symbol(i32 0)
  %97 = load i64, i64* %overlay, align 8
  %call176 = call i64 @builtin_lisp_symbol(i32 773)
  %call177 = call i64 @Foverlay_get(i64 %97, i64 %call176)
  %98 = load i64, i64* %endpos, align 8
  %99 = load i64, i64* %startpos, align 8
  %sub178 = sub nsw i64 %98, %99
  call void @record_overlay_string(%struct.sortstrlist* @overlay_tails, i64 %96, i64 %call175, i64 %call177, i64 %sub178)
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.174, %land.lhs.true.169, %if.else.166
  br label %if.end.180

if.end.180:                                       ; preds = %if.end.179, %cond.end.161
  br label %for.inc.181

for.inc.181:                                      ; preds = %if.end.180, %if.then.144, %if.then.134
  %100 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %next182 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %100, i32 0, i32 1
  %101 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next182, align 8
  store %struct.Lisp_Overlay* %101, %struct.Lisp_Overlay** %ov, align 8
  br label %for.cond.83

for.end.183:                                      ; preds = %if.then.127, %for.cond.83
  %102 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 2), align 8
  %cmp184 = icmp sgt i64 %102, 1
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %for.end.183
  %103 = load %struct.sortstr*, %struct.sortstr** getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 0), align 8
  %104 = bitcast %struct.sortstr* %103 to i8*
  %105 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 2), align 8
  call void @qsort(i8* %104, i64 %105, i64 32, i32 (i8*, i8*)* @cmp_for_strings)
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.186, %for.end.183
  %106 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 2), align 8
  %cmp188 = icmp sgt i64 %106, 1
  br i1 %cmp188, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.end.187
  %107 = load %struct.sortstr*, %struct.sortstr** getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 0), align 8
  %108 = bitcast %struct.sortstr* %107 to i8*
  %109 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 2), align 8
  call void @qsort(i8* %108, i64 %109, i64 32, i32 (i8*, i8*)* @cmp_for_strings)
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.190, %if.end.187
  %110 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %tobool192 = icmp ne i64 %110, 0
  br i1 %tobool192, label %if.then.194, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.191
  %111 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %tobool193 = icmp ne i64 %111, 0
  br i1 %tobool193, label %if.then.194, label %if.end.2188

if.then.194:                                      ; preds = %lor.lhs.false, %if.end.191
  br i1 false, label %cond.true.195, label %cond.false.658

cond.true.195:                                    ; preds = %if.then.194
  br i1 false, label %cond.true.196, label %cond.false.468

cond.true.196:                                    ; preds = %cond.true.195
  %112 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv197 = trunc i64 %112 to i8
  %conv198 = sext i8 %conv197 to i32
  %mul = mul nsw i32 0, %conv198
  %113 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv199 = trunc i64 %113 to i8
  %conv200 = sext i8 %conv199 to i32
  %add = add nsw i32 %mul, %conv200
  %mul201 = mul nsw i32 0, %add
  %sub202 = sub nsw i32 %mul201, 1
  %cmp203 = icmp slt i32 %sub202, 0
  br i1 %cmp203, label %cond.true.205, label %cond.false.229

cond.true.205:                                    ; preds = %cond.true.196
  %114 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv206 = trunc i64 %114 to i8
  %conv207 = sext i8 %conv206 to i32
  %mul208 = mul nsw i32 0, %conv207
  %115 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv209 = trunc i64 %115 to i8
  %conv210 = sext i8 %conv209 to i32
  %add211 = add nsw i32 %mul208, %conv210
  %mul212 = mul nsw i32 0, %add211
  %add213 = add nsw i32 %mul212, 0
  %neg = xor i32 %add213, -1
  %cmp214 = icmp eq i32 %neg, -1
  %conv215 = zext i1 %cmp214 to i32
  %sub216 = sub nsw i32 0, %conv215
  %116 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv217 = trunc i64 %116 to i8
  %conv218 = sext i8 %conv217 to i32
  %mul219 = mul nsw i32 0, %conv218
  %117 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv220 = trunc i64 %117 to i8
  %conv221 = sext i8 %conv220 to i32
  %add222 = add nsw i32 %mul219, %conv221
  %mul223 = mul nsw i32 0, %add222
  %add224 = add nsw i32 %mul223, 1
  %shl = shl i32 %add224, 30
  %sub225 = sub nsw i32 %shl, 1
  %mul226 = mul nsw i32 %sub225, 2
  %add227 = add nsw i32 %mul226, 1
  %sub228 = sub nsw i32 %sub216, %add227
  br label %cond.end.238

cond.false.229:                                   ; preds = %cond.true.196
  %118 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv230 = trunc i64 %118 to i8
  %conv231 = sext i8 %conv230 to i32
  %mul232 = mul nsw i32 0, %conv231
  %119 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv233 = trunc i64 %119 to i8
  %conv234 = sext i8 %conv233 to i32
  %add235 = add nsw i32 %mul232, %conv234
  %mul236 = mul nsw i32 0, %add235
  %add237 = add nsw i32 %mul236, 0
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.229, %cond.true.205
  %cond239 = phi i32 [ %sub228, %cond.true.205 ], [ %add237, %cond.false.229 ]
  %cmp240 = icmp slt i32 %cond239, 0
  br i1 %cmp240, label %cond.true.242, label %cond.false.344

cond.true.242:                                    ; preds = %cond.end.238
  %120 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv243 = trunc i64 %120 to i8
  %conv244 = sext i8 %conv243 to i32
  %cmp245 = icmp slt i32 %conv244, 0
  br i1 %cmp245, label %cond.true.247, label %cond.false.302

cond.true.247:                                    ; preds = %cond.true.242
  %121 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv248 = trunc i64 %121 to i8
  %conv249 = sext i8 %conv248 to i32
  %122 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv250 = trunc i64 %122 to i8
  %conv251 = sext i8 %conv250 to i32
  %mul252 = mul nsw i32 0, %conv251
  %123 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv253 = trunc i64 %123 to i8
  %conv254 = sext i8 %conv253 to i32
  %add255 = add nsw i32 %mul252, %conv254
  %mul256 = mul nsw i32 0, %add255
  %sub257 = sub nsw i32 %mul256, 1
  %cmp258 = icmp slt i32 %sub257, 0
  br i1 %cmp258, label %cond.true.260, label %cond.false.286

cond.true.260:                                    ; preds = %cond.true.247
  %124 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv261 = trunc i64 %124 to i8
  %conv262 = sext i8 %conv261 to i32
  %mul263 = mul nsw i32 0, %conv262
  %125 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv264 = trunc i64 %125 to i8
  %conv265 = sext i8 %conv264 to i32
  %add266 = add nsw i32 %mul263, %conv265
  %mul267 = mul nsw i32 0, %add266
  %add268 = add nsw i32 %mul267, 0
  %neg269 = xor i32 %add268, -1
  %cmp270 = icmp eq i32 %neg269, -1
  %conv271 = zext i1 %cmp270 to i32
  %sub272 = sub nsw i32 0, %conv271
  %126 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv273 = trunc i64 %126 to i8
  %conv274 = sext i8 %conv273 to i32
  %mul275 = mul nsw i32 0, %conv274
  %127 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv276 = trunc i64 %127 to i8
  %conv277 = sext i8 %conv276 to i32
  %add278 = add nsw i32 %mul275, %conv277
  %mul279 = mul nsw i32 0, %add278
  %add280 = add nsw i32 %mul279, 1
  %shl281 = shl i32 %add280, 30
  %sub282 = sub nsw i32 %shl281, 1
  %mul283 = mul nsw i32 %sub282, 2
  %add284 = add nsw i32 %mul283, 1
  %sub285 = sub nsw i32 %sub272, %add284
  br label %cond.end.295

cond.false.286:                                   ; preds = %cond.true.247
  %128 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv287 = trunc i64 %128 to i8
  %conv288 = sext i8 %conv287 to i32
  %mul289 = mul nsw i32 0, %conv288
  %129 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv290 = trunc i64 %129 to i8
  %conv291 = sext i8 %conv290 to i32
  %add292 = add nsw i32 %mul289, %conv291
  %mul293 = mul nsw i32 0, %add292
  %add294 = add nsw i32 %mul293, 0
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.286, %cond.true.260
  %cond296 = phi i32 [ %sub285, %cond.true.260 ], [ %add294, %cond.false.286 ]
  %130 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv297 = trunc i64 %130 to i8
  %conv298 = sext i8 %conv297 to i32
  %sub299 = sub nsw i32 %cond296, %conv298
  %cmp300 = icmp slt i32 %conv249, %sub299
  br i1 %cmp300, label %cond.true.410, label %lor.lhs.false.384

cond.false.302:                                   ; preds = %cond.true.242
  %131 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv303 = trunc i64 %131 to i8
  %conv304 = sext i8 %conv303 to i32
  %mul305 = mul nsw i32 0, %conv304
  %132 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv306 = trunc i64 %132 to i8
  %conv307 = sext i8 %conv306 to i32
  %add308 = add nsw i32 %mul305, %conv307
  %mul309 = mul nsw i32 0, %add308
  %sub310 = sub nsw i32 %mul309, 1
  %cmp311 = icmp slt i32 %sub310, 0
  br i1 %cmp311, label %cond.true.313, label %cond.false.326

cond.true.313:                                    ; preds = %cond.false.302
  %133 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv314 = trunc i64 %133 to i8
  %conv315 = sext i8 %conv314 to i32
  %mul316 = mul nsw i32 0, %conv315
  %134 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv317 = trunc i64 %134 to i8
  %conv318 = sext i8 %conv317 to i32
  %add319 = add nsw i32 %mul316, %conv318
  %mul320 = mul nsw i32 0, %add319
  %add321 = add nsw i32 %mul320, 1
  %shl322 = shl i32 %add321, 30
  %sub323 = sub nsw i32 %shl322, 1
  %mul324 = mul nsw i32 %sub323, 2
  %add325 = add nsw i32 %mul324, 1
  br label %cond.end.335

cond.false.326:                                   ; preds = %cond.false.302
  %135 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv327 = trunc i64 %135 to i8
  %conv328 = sext i8 %conv327 to i32
  %mul329 = mul nsw i32 0, %conv328
  %136 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv330 = trunc i64 %136 to i8
  %conv331 = sext i8 %conv330 to i32
  %add332 = add nsw i32 %mul329, %conv331
  %mul333 = mul nsw i32 0, %add332
  %sub334 = sub nsw i32 %mul333, 1
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.326, %cond.true.313
  %cond336 = phi i32 [ %add325, %cond.true.313 ], [ %sub334, %cond.false.326 ]
  %137 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv337 = trunc i64 %137 to i8
  %conv338 = sext i8 %conv337 to i32
  %sub339 = sub nsw i32 %cond336, %conv338
  %138 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv340 = trunc i64 %138 to i8
  %conv341 = sext i8 %conv340 to i32
  %cmp342 = icmp slt i32 %sub339, %conv341
  br i1 %cmp342, label %cond.true.410, label %lor.lhs.false.384

cond.false.344:                                   ; preds = %cond.end.238
  %139 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv345 = trunc i64 %139 to i8
  %conv346 = sext i8 %conv345 to i32
  %cmp347 = icmp slt i32 %conv346, 0
  br i1 %cmp347, label %cond.true.349, label %cond.false.359

cond.true.349:                                    ; preds = %cond.false.344
  %140 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv350 = trunc i64 %140 to i8
  %conv351 = sext i8 %conv350 to i32
  %141 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv352 = trunc i64 %141 to i8
  %conv353 = sext i8 %conv352 to i32
  %142 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv354 = trunc i64 %142 to i8
  %conv355 = sext i8 %conv354 to i32
  %add356 = add nsw i32 %conv353, %conv355
  %cmp357 = icmp sle i32 %conv351, %add356
  br i1 %cmp357, label %cond.true.410, label %lor.lhs.false.384

cond.false.359:                                   ; preds = %cond.false.344
  %143 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv360 = trunc i64 %143 to i8
  %conv361 = sext i8 %conv360 to i32
  %cmp362 = icmp slt i32 %conv361, 0
  br i1 %cmp362, label %cond.true.364, label %cond.false.374

cond.true.364:                                    ; preds = %cond.false.359
  %144 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv365 = trunc i64 %144 to i8
  %conv366 = sext i8 %conv365 to i32
  %145 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv367 = trunc i64 %145 to i8
  %conv368 = sext i8 %conv367 to i32
  %146 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv369 = trunc i64 %146 to i8
  %conv370 = sext i8 %conv369 to i32
  %add371 = add nsw i32 %conv368, %conv370
  %cmp372 = icmp sle i32 %conv366, %add371
  br i1 %cmp372, label %cond.true.410, label %lor.lhs.false.384

cond.false.374:                                   ; preds = %cond.false.359
  %147 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv375 = trunc i64 %147 to i8
  %conv376 = sext i8 %conv375 to i32
  %148 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv377 = trunc i64 %148 to i8
  %conv378 = sext i8 %conv377 to i32
  %add379 = add nsw i32 %conv376, %conv378
  %149 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv380 = trunc i64 %149 to i8
  %conv381 = sext i8 %conv380 to i32
  %cmp382 = icmp slt i32 %add379, %conv381
  br i1 %cmp382, label %cond.true.410, label %lor.lhs.false.384

lor.lhs.false.384:                                ; preds = %cond.false.374, %cond.true.364, %cond.true.349, %cond.end.335, %cond.end.295
  %150 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv385 = trunc i64 %150 to i8
  %conv386 = sext i8 %conv385 to i32
  %151 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv387 = trunc i64 %151 to i8
  %conv388 = sext i8 %conv387 to i32
  %add389 = add nsw i32 %conv386, %conv388
  %mul390 = mul nsw i32 0, %add389
  %sub391 = sub nsw i32 %mul390, 1
  %cmp392 = icmp slt i32 %sub391, 0
  br i1 %cmp392, label %land.lhs.true.394, label %lor.lhs.false.402

land.lhs.true.394:                                ; preds = %lor.lhs.false.384
  %152 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv395 = trunc i64 %152 to i8
  %conv396 = sext i8 %conv395 to i32
  %153 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv397 = trunc i64 %153 to i8
  %conv398 = sext i8 %conv397 to i32
  %add399 = add nsw i32 %conv396, %conv398
  %cmp400 = icmp slt i32 %add399, -128
  br i1 %cmp400, label %cond.true.410, label %lor.lhs.false.402

lor.lhs.false.402:                                ; preds = %land.lhs.true.394, %lor.lhs.false.384
  %154 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv403 = trunc i64 %154 to i8
  %conv404 = sext i8 %conv403 to i32
  %155 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv405 = trunc i64 %155 to i8
  %conv406 = sext i8 %conv405 to i32
  %add407 = add nsw i32 %conv404, %conv406
  %cmp408 = icmp slt i32 127, %add407
  br i1 %cmp408, label %cond.true.410, label %cond.false.439

cond.true.410:                                    ; preds = %lor.lhs.false.402, %land.lhs.true.394, %cond.false.374, %cond.true.364, %cond.true.349, %cond.end.335, %cond.end.295
  %156 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv411 = trunc i64 %156 to i8
  %conv412 = zext i8 %conv411 to i32
  %157 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv413 = trunc i64 %157 to i8
  %conv414 = zext i8 %conv413 to i32
  %add415 = add nsw i32 %conv412, %conv414
  %cmp416 = icmp sle i32 %add415, 127
  br i1 %cmp416, label %cond.true.418, label %cond.false.426

cond.true.418:                                    ; preds = %cond.true.410
  %158 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv419 = trunc i64 %158 to i8
  %conv420 = zext i8 %conv419 to i32
  %159 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv421 = trunc i64 %159 to i8
  %conv422 = zext i8 %conv421 to i32
  %add423 = add nsw i32 %conv420, %conv422
  %conv424 = trunc i32 %add423 to i8
  %conv425 = sext i8 %conv424 to i32
  br label %cond.end.436

cond.false.426:                                   ; preds = %cond.true.410
  %160 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv427 = trunc i64 %160 to i8
  %conv428 = zext i8 %conv427 to i32
  %161 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv429 = trunc i64 %161 to i8
  %conv430 = zext i8 %conv429 to i32
  %add431 = add nsw i32 %conv428, %conv430
  %sub432 = sub nsw i32 %add431, -128
  %conv433 = trunc i32 %sub432 to i8
  %conv434 = sext i8 %conv433 to i32
  %add435 = add nsw i32 %conv434, -128
  br label %cond.end.436

cond.end.436:                                     ; preds = %cond.false.426, %cond.true.418
  %cond437 = phi i32 [ %conv425, %cond.true.418 ], [ %add435, %cond.false.426 ]
  %conv438 = sext i32 %cond437 to i64
  store i64 %conv438, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.439:                                   ; preds = %lor.lhs.false.402
  %162 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv440 = trunc i64 %162 to i8
  %conv441 = zext i8 %conv440 to i32
  %163 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv442 = trunc i64 %163 to i8
  %conv443 = zext i8 %conv442 to i32
  %add444 = add nsw i32 %conv441, %conv443
  %cmp445 = icmp sle i32 %add444, 127
  br i1 %cmp445, label %cond.true.447, label %cond.false.455

cond.true.447:                                    ; preds = %cond.false.439
  %164 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv448 = trunc i64 %164 to i8
  %conv449 = zext i8 %conv448 to i32
  %165 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv450 = trunc i64 %165 to i8
  %conv451 = zext i8 %conv450 to i32
  %add452 = add nsw i32 %conv449, %conv451
  %conv453 = trunc i32 %add452 to i8
  %conv454 = sext i8 %conv453 to i32
  br label %cond.end.465

cond.false.455:                                   ; preds = %cond.false.439
  %166 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv456 = trunc i64 %166 to i8
  %conv457 = zext i8 %conv456 to i32
  %167 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv458 = trunc i64 %167 to i8
  %conv459 = zext i8 %conv458 to i32
  %add460 = add nsw i32 %conv457, %conv459
  %sub461 = sub nsw i32 %add460, -128
  %conv462 = trunc i32 %sub461 to i8
  %conv463 = sext i8 %conv462 to i32
  %add464 = add nsw i32 %conv463, -128
  br label %cond.end.465

cond.end.465:                                     ; preds = %cond.false.455, %cond.true.447
  %cond466 = phi i32 [ %conv454, %cond.true.447 ], [ %add464, %cond.false.455 ]
  %conv467 = sext i32 %cond466 to i64
  store i64 %conv467, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.468:                                   ; preds = %cond.true.195
  %168 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul469 = mul nsw i64 0, %168
  %169 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add470 = add nsw i64 %mul469, %169
  %mul471 = mul nsw i64 0, %add470
  %sub472 = sub nsw i64 %mul471, 1
  %cmp473 = icmp slt i64 %sub472, 0
  br i1 %cmp473, label %cond.true.475, label %cond.false.494

cond.true.475:                                    ; preds = %cond.false.468
  %170 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul476 = mul nsw i64 0, %170
  %171 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add477 = add nsw i64 %mul476, %171
  %mul478 = mul nsw i64 0, %add477
  %add479 = add nsw i64 %mul478, 0
  %neg480 = xor i64 %add479, -1
  %cmp481 = icmp eq i64 %neg480, -1
  %conv482 = zext i1 %cmp481 to i32
  %sub483 = sub nsw i32 0, %conv482
  %conv484 = sext i32 %sub483 to i64
  %172 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul485 = mul nsw i64 0, %172
  %173 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add486 = add nsw i64 %mul485, %173
  %mul487 = mul nsw i64 0, %add486
  %add488 = add nsw i64 %mul487, 1
  %shl489 = shl i64 %add488, 62
  %sub490 = sub nsw i64 %shl489, 1
  %mul491 = mul nsw i64 %sub490, 2
  %add492 = add nsw i64 %mul491, 1
  %sub493 = sub nsw i64 %conv484, %add492
  br label %cond.end.499

cond.false.494:                                   ; preds = %cond.false.468
  %174 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul495 = mul nsw i64 0, %174
  %175 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add496 = add nsw i64 %mul495, %175
  %mul497 = mul nsw i64 0, %add496
  %add498 = add nsw i64 %mul497, 0
  br label %cond.end.499

cond.end.499:                                     ; preds = %cond.false.494, %cond.true.475
  %cond500 = phi i64 [ %sub493, %cond.true.475 ], [ %add498, %cond.false.494 ]
  %cmp501 = icmp slt i64 %cond500, 0
  br i1 %cmp501, label %cond.true.503, label %cond.false.568

cond.true.503:                                    ; preds = %cond.end.499
  %176 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp504 = icmp slt i64 %176, 0
  br i1 %cmp504, label %cond.true.506, label %cond.false.542

cond.true.506:                                    ; preds = %cond.true.503
  %177 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %178 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul507 = mul nsw i64 0, %178
  %179 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add508 = add nsw i64 %mul507, %179
  %mul509 = mul nsw i64 0, %add508
  %sub510 = sub nsw i64 %mul509, 1
  %cmp511 = icmp slt i64 %sub510, 0
  br i1 %cmp511, label %cond.true.513, label %cond.false.532

cond.true.513:                                    ; preds = %cond.true.506
  %180 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul514 = mul nsw i64 0, %180
  %181 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add515 = add nsw i64 %mul514, %181
  %mul516 = mul nsw i64 0, %add515
  %add517 = add nsw i64 %mul516, 0
  %neg518 = xor i64 %add517, -1
  %cmp519 = icmp eq i64 %neg518, -1
  %conv520 = zext i1 %cmp519 to i32
  %sub521 = sub nsw i32 0, %conv520
  %conv522 = sext i32 %sub521 to i64
  %182 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul523 = mul nsw i64 0, %182
  %183 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add524 = add nsw i64 %mul523, %183
  %mul525 = mul nsw i64 0, %add524
  %add526 = add nsw i64 %mul525, 1
  %shl527 = shl i64 %add526, 62
  %sub528 = sub nsw i64 %shl527, 1
  %mul529 = mul nsw i64 %sub528, 2
  %add530 = add nsw i64 %mul529, 1
  %sub531 = sub nsw i64 %conv522, %add530
  br label %cond.end.537

cond.false.532:                                   ; preds = %cond.true.506
  %184 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul533 = mul nsw i64 0, %184
  %185 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add534 = add nsw i64 %mul533, %185
  %mul535 = mul nsw i64 0, %add534
  %add536 = add nsw i64 %mul535, 0
  br label %cond.end.537

cond.end.537:                                     ; preds = %cond.false.532, %cond.true.513
  %cond538 = phi i64 [ %sub531, %cond.true.513 ], [ %add536, %cond.false.532 ]
  %186 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub539 = sub nsw i64 %cond538, %186
  %cmp540 = icmp slt i64 %177, %sub539
  br i1 %cmp540, label %cond.true.600, label %lor.lhs.false.586

cond.false.542:                                   ; preds = %cond.true.503
  %187 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul543 = mul nsw i64 0, %187
  %188 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add544 = add nsw i64 %mul543, %188
  %mul545 = mul nsw i64 0, %add544
  %sub546 = sub nsw i64 %mul545, 1
  %cmp547 = icmp slt i64 %sub546, 0
  br i1 %cmp547, label %cond.true.549, label %cond.false.558

cond.true.549:                                    ; preds = %cond.false.542
  %189 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul550 = mul nsw i64 0, %189
  %190 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add551 = add nsw i64 %mul550, %190
  %mul552 = mul nsw i64 0, %add551
  %add553 = add nsw i64 %mul552, 1
  %shl554 = shl i64 %add553, 62
  %sub555 = sub nsw i64 %shl554, 1
  %mul556 = mul nsw i64 %sub555, 2
  %add557 = add nsw i64 %mul556, 1
  br label %cond.end.563

cond.false.558:                                   ; preds = %cond.false.542
  %191 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul559 = mul nsw i64 0, %191
  %192 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add560 = add nsw i64 %mul559, %192
  %mul561 = mul nsw i64 0, %add560
  %sub562 = sub nsw i64 %mul561, 1
  br label %cond.end.563

cond.end.563:                                     ; preds = %cond.false.558, %cond.true.549
  %cond564 = phi i64 [ %add557, %cond.true.549 ], [ %sub562, %cond.false.558 ]
  %193 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub565 = sub nsw i64 %cond564, %193
  %194 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp566 = icmp slt i64 %sub565, %194
  br i1 %cmp566, label %cond.true.600, label %lor.lhs.false.586

cond.false.568:                                   ; preds = %cond.end.499
  %195 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp569 = icmp slt i64 %195, 0
  br i1 %cmp569, label %cond.true.571, label %cond.false.575

cond.true.571:                                    ; preds = %cond.false.568
  %196 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %197 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %198 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add572 = add nsw i64 %197, %198
  %cmp573 = icmp sle i64 %196, %add572
  br i1 %cmp573, label %cond.true.600, label %lor.lhs.false.586

cond.false.575:                                   ; preds = %cond.false.568
  %199 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp576 = icmp slt i64 %199, 0
  br i1 %cmp576, label %cond.true.578, label %cond.false.582

cond.true.578:                                    ; preds = %cond.false.575
  %200 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %201 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %202 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add579 = add nsw i64 %201, %202
  %cmp580 = icmp sle i64 %200, %add579
  br i1 %cmp580, label %cond.true.600, label %lor.lhs.false.586

cond.false.582:                                   ; preds = %cond.false.575
  %203 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %204 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add583 = add nsw i64 %203, %204
  %205 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp584 = icmp slt i64 %add583, %205
  br i1 %cmp584, label %cond.true.600, label %lor.lhs.false.586

lor.lhs.false.586:                                ; preds = %cond.false.582, %cond.true.578, %cond.true.571, %cond.end.563, %cond.end.537
  %206 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %207 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add587 = add nsw i64 %206, %207
  %mul588 = mul nsw i64 0, %add587
  %sub589 = sub nsw i64 %mul588, 1
  %cmp590 = icmp slt i64 %sub589, 0
  br i1 %cmp590, label %land.lhs.true.592, label %lor.lhs.false.596

land.lhs.true.592:                                ; preds = %lor.lhs.false.586
  %208 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %209 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add593 = add nsw i64 %208, %209
  %cmp594 = icmp slt i64 %add593, -128
  br i1 %cmp594, label %cond.true.600, label %lor.lhs.false.596

lor.lhs.false.596:                                ; preds = %land.lhs.true.592, %lor.lhs.false.586
  %210 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %211 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add597 = add nsw i64 %210, %211
  %cmp598 = icmp slt i64 127, %add597
  br i1 %cmp598, label %cond.true.600, label %cond.false.629

cond.true.600:                                    ; preds = %lor.lhs.false.596, %land.lhs.true.592, %cond.false.582, %cond.true.578, %cond.true.571, %cond.end.563, %cond.end.537
  %212 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv601 = trunc i64 %212 to i8
  %conv602 = zext i8 %conv601 to i32
  %213 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv603 = trunc i64 %213 to i8
  %conv604 = zext i8 %conv603 to i32
  %add605 = add nsw i32 %conv602, %conv604
  %cmp606 = icmp sle i32 %add605, 127
  br i1 %cmp606, label %cond.true.608, label %cond.false.616

cond.true.608:                                    ; preds = %cond.true.600
  %214 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv609 = trunc i64 %214 to i8
  %conv610 = zext i8 %conv609 to i32
  %215 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv611 = trunc i64 %215 to i8
  %conv612 = zext i8 %conv611 to i32
  %add613 = add nsw i32 %conv610, %conv612
  %conv614 = trunc i32 %add613 to i8
  %conv615 = sext i8 %conv614 to i32
  br label %cond.end.626

cond.false.616:                                   ; preds = %cond.true.600
  %216 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv617 = trunc i64 %216 to i8
  %conv618 = zext i8 %conv617 to i32
  %217 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv619 = trunc i64 %217 to i8
  %conv620 = zext i8 %conv619 to i32
  %add621 = add nsw i32 %conv618, %conv620
  %sub622 = sub nsw i32 %add621, -128
  %conv623 = trunc i32 %sub622 to i8
  %conv624 = sext i8 %conv623 to i32
  %add625 = add nsw i32 %conv624, -128
  br label %cond.end.626

cond.end.626:                                     ; preds = %cond.false.616, %cond.true.608
  %cond627 = phi i32 [ %conv615, %cond.true.608 ], [ %add625, %cond.false.616 ]
  %conv628 = sext i32 %cond627 to i64
  store i64 %conv628, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.629:                                   ; preds = %lor.lhs.false.596
  %218 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv630 = trunc i64 %218 to i8
  %conv631 = zext i8 %conv630 to i32
  %219 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv632 = trunc i64 %219 to i8
  %conv633 = zext i8 %conv632 to i32
  %add634 = add nsw i32 %conv631, %conv633
  %cmp635 = icmp sle i32 %add634, 127
  br i1 %cmp635, label %cond.true.637, label %cond.false.645

cond.true.637:                                    ; preds = %cond.false.629
  %220 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv638 = trunc i64 %220 to i8
  %conv639 = zext i8 %conv638 to i32
  %221 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv640 = trunc i64 %221 to i8
  %conv641 = zext i8 %conv640 to i32
  %add642 = add nsw i32 %conv639, %conv641
  %conv643 = trunc i32 %add642 to i8
  %conv644 = sext i8 %conv643 to i32
  br label %cond.end.655

cond.false.645:                                   ; preds = %cond.false.629
  %222 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv646 = trunc i64 %222 to i8
  %conv647 = zext i8 %conv646 to i32
  %223 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv648 = trunc i64 %223 to i8
  %conv649 = zext i8 %conv648 to i32
  %add650 = add nsw i32 %conv647, %conv649
  %sub651 = sub nsw i32 %add650, -128
  %conv652 = trunc i32 %sub651 to i8
  %conv653 = sext i8 %conv652 to i32
  %add654 = add nsw i32 %conv653, -128
  br label %cond.end.655

cond.end.655:                                     ; preds = %cond.false.645, %cond.true.637
  %cond656 = phi i32 [ %conv644, %cond.true.637 ], [ %add654, %cond.false.645 ]
  %conv657 = sext i32 %cond656 to i64
  store i64 %conv657, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.658:                                   ; preds = %if.then.194
  br i1 false, label %cond.true.659, label %cond.false.1126

cond.true.659:                                    ; preds = %cond.false.658
  br i1 false, label %cond.true.660, label %cond.false.936

cond.true.660:                                    ; preds = %cond.true.659
  %224 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv661 = trunc i64 %224 to i16
  %conv662 = sext i16 %conv661 to i32
  %mul663 = mul nsw i32 0, %conv662
  %225 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv664 = trunc i64 %225 to i16
  %conv665 = sext i16 %conv664 to i32
  %add666 = add nsw i32 %mul663, %conv665
  %mul667 = mul nsw i32 0, %add666
  %sub668 = sub nsw i32 %mul667, 1
  %cmp669 = icmp slt i32 %sub668, 0
  br i1 %cmp669, label %cond.true.671, label %cond.false.697

cond.true.671:                                    ; preds = %cond.true.660
  %226 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv672 = trunc i64 %226 to i16
  %conv673 = sext i16 %conv672 to i32
  %mul674 = mul nsw i32 0, %conv673
  %227 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv675 = trunc i64 %227 to i16
  %conv676 = sext i16 %conv675 to i32
  %add677 = add nsw i32 %mul674, %conv676
  %mul678 = mul nsw i32 0, %add677
  %add679 = add nsw i32 %mul678, 0
  %neg680 = xor i32 %add679, -1
  %cmp681 = icmp eq i32 %neg680, -1
  %conv682 = zext i1 %cmp681 to i32
  %sub683 = sub nsw i32 0, %conv682
  %228 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv684 = trunc i64 %228 to i16
  %conv685 = sext i16 %conv684 to i32
  %mul686 = mul nsw i32 0, %conv685
  %229 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv687 = trunc i64 %229 to i16
  %conv688 = sext i16 %conv687 to i32
  %add689 = add nsw i32 %mul686, %conv688
  %mul690 = mul nsw i32 0, %add689
  %add691 = add nsw i32 %mul690, 1
  %shl692 = shl i32 %add691, 30
  %sub693 = sub nsw i32 %shl692, 1
  %mul694 = mul nsw i32 %sub693, 2
  %add695 = add nsw i32 %mul694, 1
  %sub696 = sub nsw i32 %sub683, %add695
  br label %cond.end.706

cond.false.697:                                   ; preds = %cond.true.660
  %230 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv698 = trunc i64 %230 to i16
  %conv699 = sext i16 %conv698 to i32
  %mul700 = mul nsw i32 0, %conv699
  %231 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv701 = trunc i64 %231 to i16
  %conv702 = sext i16 %conv701 to i32
  %add703 = add nsw i32 %mul700, %conv702
  %mul704 = mul nsw i32 0, %add703
  %add705 = add nsw i32 %mul704, 0
  br label %cond.end.706

cond.end.706:                                     ; preds = %cond.false.697, %cond.true.671
  %cond707 = phi i32 [ %sub696, %cond.true.671 ], [ %add705, %cond.false.697 ]
  %cmp708 = icmp slt i32 %cond707, 0
  br i1 %cmp708, label %cond.true.710, label %cond.false.812

cond.true.710:                                    ; preds = %cond.end.706
  %232 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv711 = trunc i64 %232 to i16
  %conv712 = sext i16 %conv711 to i32
  %cmp713 = icmp slt i32 %conv712, 0
  br i1 %cmp713, label %cond.true.715, label %cond.false.770

cond.true.715:                                    ; preds = %cond.true.710
  %233 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv716 = trunc i64 %233 to i16
  %conv717 = sext i16 %conv716 to i32
  %234 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv718 = trunc i64 %234 to i16
  %conv719 = sext i16 %conv718 to i32
  %mul720 = mul nsw i32 0, %conv719
  %235 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv721 = trunc i64 %235 to i16
  %conv722 = sext i16 %conv721 to i32
  %add723 = add nsw i32 %mul720, %conv722
  %mul724 = mul nsw i32 0, %add723
  %sub725 = sub nsw i32 %mul724, 1
  %cmp726 = icmp slt i32 %sub725, 0
  br i1 %cmp726, label %cond.true.728, label %cond.false.754

cond.true.728:                                    ; preds = %cond.true.715
  %236 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv729 = trunc i64 %236 to i16
  %conv730 = sext i16 %conv729 to i32
  %mul731 = mul nsw i32 0, %conv730
  %237 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv732 = trunc i64 %237 to i16
  %conv733 = sext i16 %conv732 to i32
  %add734 = add nsw i32 %mul731, %conv733
  %mul735 = mul nsw i32 0, %add734
  %add736 = add nsw i32 %mul735, 0
  %neg737 = xor i32 %add736, -1
  %cmp738 = icmp eq i32 %neg737, -1
  %conv739 = zext i1 %cmp738 to i32
  %sub740 = sub nsw i32 0, %conv739
  %238 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv741 = trunc i64 %238 to i16
  %conv742 = sext i16 %conv741 to i32
  %mul743 = mul nsw i32 0, %conv742
  %239 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv744 = trunc i64 %239 to i16
  %conv745 = sext i16 %conv744 to i32
  %add746 = add nsw i32 %mul743, %conv745
  %mul747 = mul nsw i32 0, %add746
  %add748 = add nsw i32 %mul747, 1
  %shl749 = shl i32 %add748, 30
  %sub750 = sub nsw i32 %shl749, 1
  %mul751 = mul nsw i32 %sub750, 2
  %add752 = add nsw i32 %mul751, 1
  %sub753 = sub nsw i32 %sub740, %add752
  br label %cond.end.763

cond.false.754:                                   ; preds = %cond.true.715
  %240 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv755 = trunc i64 %240 to i16
  %conv756 = sext i16 %conv755 to i32
  %mul757 = mul nsw i32 0, %conv756
  %241 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv758 = trunc i64 %241 to i16
  %conv759 = sext i16 %conv758 to i32
  %add760 = add nsw i32 %mul757, %conv759
  %mul761 = mul nsw i32 0, %add760
  %add762 = add nsw i32 %mul761, 0
  br label %cond.end.763

cond.end.763:                                     ; preds = %cond.false.754, %cond.true.728
  %cond764 = phi i32 [ %sub753, %cond.true.728 ], [ %add762, %cond.false.754 ]
  %242 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv765 = trunc i64 %242 to i16
  %conv766 = sext i16 %conv765 to i32
  %sub767 = sub nsw i32 %cond764, %conv766
  %cmp768 = icmp slt i32 %conv717, %sub767
  br i1 %cmp768, label %cond.true.878, label %lor.lhs.false.852

cond.false.770:                                   ; preds = %cond.true.710
  %243 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv771 = trunc i64 %243 to i16
  %conv772 = sext i16 %conv771 to i32
  %mul773 = mul nsw i32 0, %conv772
  %244 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv774 = trunc i64 %244 to i16
  %conv775 = sext i16 %conv774 to i32
  %add776 = add nsw i32 %mul773, %conv775
  %mul777 = mul nsw i32 0, %add776
  %sub778 = sub nsw i32 %mul777, 1
  %cmp779 = icmp slt i32 %sub778, 0
  br i1 %cmp779, label %cond.true.781, label %cond.false.794

cond.true.781:                                    ; preds = %cond.false.770
  %245 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv782 = trunc i64 %245 to i16
  %conv783 = sext i16 %conv782 to i32
  %mul784 = mul nsw i32 0, %conv783
  %246 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv785 = trunc i64 %246 to i16
  %conv786 = sext i16 %conv785 to i32
  %add787 = add nsw i32 %mul784, %conv786
  %mul788 = mul nsw i32 0, %add787
  %add789 = add nsw i32 %mul788, 1
  %shl790 = shl i32 %add789, 30
  %sub791 = sub nsw i32 %shl790, 1
  %mul792 = mul nsw i32 %sub791, 2
  %add793 = add nsw i32 %mul792, 1
  br label %cond.end.803

cond.false.794:                                   ; preds = %cond.false.770
  %247 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv795 = trunc i64 %247 to i16
  %conv796 = sext i16 %conv795 to i32
  %mul797 = mul nsw i32 0, %conv796
  %248 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv798 = trunc i64 %248 to i16
  %conv799 = sext i16 %conv798 to i32
  %add800 = add nsw i32 %mul797, %conv799
  %mul801 = mul nsw i32 0, %add800
  %sub802 = sub nsw i32 %mul801, 1
  br label %cond.end.803

cond.end.803:                                     ; preds = %cond.false.794, %cond.true.781
  %cond804 = phi i32 [ %add793, %cond.true.781 ], [ %sub802, %cond.false.794 ]
  %249 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv805 = trunc i64 %249 to i16
  %conv806 = sext i16 %conv805 to i32
  %sub807 = sub nsw i32 %cond804, %conv806
  %250 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv808 = trunc i64 %250 to i16
  %conv809 = sext i16 %conv808 to i32
  %cmp810 = icmp slt i32 %sub807, %conv809
  br i1 %cmp810, label %cond.true.878, label %lor.lhs.false.852

cond.false.812:                                   ; preds = %cond.end.706
  %251 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv813 = trunc i64 %251 to i16
  %conv814 = sext i16 %conv813 to i32
  %cmp815 = icmp slt i32 %conv814, 0
  br i1 %cmp815, label %cond.true.817, label %cond.false.827

cond.true.817:                                    ; preds = %cond.false.812
  %252 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv818 = trunc i64 %252 to i16
  %conv819 = sext i16 %conv818 to i32
  %253 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv820 = trunc i64 %253 to i16
  %conv821 = sext i16 %conv820 to i32
  %254 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv822 = trunc i64 %254 to i16
  %conv823 = sext i16 %conv822 to i32
  %add824 = add nsw i32 %conv821, %conv823
  %cmp825 = icmp sle i32 %conv819, %add824
  br i1 %cmp825, label %cond.true.878, label %lor.lhs.false.852

cond.false.827:                                   ; preds = %cond.false.812
  %255 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv828 = trunc i64 %255 to i16
  %conv829 = sext i16 %conv828 to i32
  %cmp830 = icmp slt i32 %conv829, 0
  br i1 %cmp830, label %cond.true.832, label %cond.false.842

cond.true.832:                                    ; preds = %cond.false.827
  %256 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv833 = trunc i64 %256 to i16
  %conv834 = sext i16 %conv833 to i32
  %257 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv835 = trunc i64 %257 to i16
  %conv836 = sext i16 %conv835 to i32
  %258 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv837 = trunc i64 %258 to i16
  %conv838 = sext i16 %conv837 to i32
  %add839 = add nsw i32 %conv836, %conv838
  %cmp840 = icmp sle i32 %conv834, %add839
  br i1 %cmp840, label %cond.true.878, label %lor.lhs.false.852

cond.false.842:                                   ; preds = %cond.false.827
  %259 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv843 = trunc i64 %259 to i16
  %conv844 = sext i16 %conv843 to i32
  %260 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv845 = trunc i64 %260 to i16
  %conv846 = sext i16 %conv845 to i32
  %add847 = add nsw i32 %conv844, %conv846
  %261 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv848 = trunc i64 %261 to i16
  %conv849 = sext i16 %conv848 to i32
  %cmp850 = icmp slt i32 %add847, %conv849
  br i1 %cmp850, label %cond.true.878, label %lor.lhs.false.852

lor.lhs.false.852:                                ; preds = %cond.false.842, %cond.true.832, %cond.true.817, %cond.end.803, %cond.end.763
  %262 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv853 = trunc i64 %262 to i16
  %conv854 = sext i16 %conv853 to i32
  %263 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv855 = trunc i64 %263 to i16
  %conv856 = sext i16 %conv855 to i32
  %add857 = add nsw i32 %conv854, %conv856
  %mul858 = mul nsw i32 0, %add857
  %sub859 = sub nsw i32 %mul858, 1
  %cmp860 = icmp slt i32 %sub859, 0
  br i1 %cmp860, label %land.lhs.true.862, label %lor.lhs.false.870

land.lhs.true.862:                                ; preds = %lor.lhs.false.852
  %264 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv863 = trunc i64 %264 to i16
  %conv864 = sext i16 %conv863 to i32
  %265 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv865 = trunc i64 %265 to i16
  %conv866 = sext i16 %conv865 to i32
  %add867 = add nsw i32 %conv864, %conv866
  %cmp868 = icmp slt i32 %add867, -32768
  br i1 %cmp868, label %cond.true.878, label %lor.lhs.false.870

lor.lhs.false.870:                                ; preds = %land.lhs.true.862, %lor.lhs.false.852
  %266 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv871 = trunc i64 %266 to i16
  %conv872 = sext i16 %conv871 to i32
  %267 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv873 = trunc i64 %267 to i16
  %conv874 = sext i16 %conv873 to i32
  %add875 = add nsw i32 %conv872, %conv874
  %cmp876 = icmp slt i32 32767, %add875
  br i1 %cmp876, label %cond.true.878, label %cond.false.907

cond.true.878:                                    ; preds = %lor.lhs.false.870, %land.lhs.true.862, %cond.false.842, %cond.true.832, %cond.true.817, %cond.end.803, %cond.end.763
  %268 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv879 = trunc i64 %268 to i16
  %conv880 = zext i16 %conv879 to i32
  %269 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv881 = trunc i64 %269 to i16
  %conv882 = zext i16 %conv881 to i32
  %add883 = add nsw i32 %conv880, %conv882
  %cmp884 = icmp sle i32 %add883, 32767
  br i1 %cmp884, label %cond.true.886, label %cond.false.894

cond.true.886:                                    ; preds = %cond.true.878
  %270 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv887 = trunc i64 %270 to i16
  %conv888 = zext i16 %conv887 to i32
  %271 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv889 = trunc i64 %271 to i16
  %conv890 = zext i16 %conv889 to i32
  %add891 = add nsw i32 %conv888, %conv890
  %conv892 = trunc i32 %add891 to i16
  %conv893 = sext i16 %conv892 to i32
  br label %cond.end.904

cond.false.894:                                   ; preds = %cond.true.878
  %272 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv895 = trunc i64 %272 to i16
  %conv896 = zext i16 %conv895 to i32
  %273 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv897 = trunc i64 %273 to i16
  %conv898 = zext i16 %conv897 to i32
  %add899 = add nsw i32 %conv896, %conv898
  %sub900 = sub nsw i32 %add899, -32768
  %conv901 = trunc i32 %sub900 to i16
  %conv902 = sext i16 %conv901 to i32
  %add903 = add nsw i32 %conv902, -32768
  br label %cond.end.904

cond.end.904:                                     ; preds = %cond.false.894, %cond.true.886
  %cond905 = phi i32 [ %conv893, %cond.true.886 ], [ %add903, %cond.false.894 ]
  %conv906 = sext i32 %cond905 to i64
  store i64 %conv906, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.907:                                   ; preds = %lor.lhs.false.870
  %274 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv908 = trunc i64 %274 to i16
  %conv909 = zext i16 %conv908 to i32
  %275 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv910 = trunc i64 %275 to i16
  %conv911 = zext i16 %conv910 to i32
  %add912 = add nsw i32 %conv909, %conv911
  %cmp913 = icmp sle i32 %add912, 32767
  br i1 %cmp913, label %cond.true.915, label %cond.false.923

cond.true.915:                                    ; preds = %cond.false.907
  %276 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv916 = trunc i64 %276 to i16
  %conv917 = zext i16 %conv916 to i32
  %277 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv918 = trunc i64 %277 to i16
  %conv919 = zext i16 %conv918 to i32
  %add920 = add nsw i32 %conv917, %conv919
  %conv921 = trunc i32 %add920 to i16
  %conv922 = sext i16 %conv921 to i32
  br label %cond.end.933

cond.false.923:                                   ; preds = %cond.false.907
  %278 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv924 = trunc i64 %278 to i16
  %conv925 = zext i16 %conv924 to i32
  %279 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv926 = trunc i64 %279 to i16
  %conv927 = zext i16 %conv926 to i32
  %add928 = add nsw i32 %conv925, %conv927
  %sub929 = sub nsw i32 %add928, -32768
  %conv930 = trunc i32 %sub929 to i16
  %conv931 = sext i16 %conv930 to i32
  %add932 = add nsw i32 %conv931, -32768
  br label %cond.end.933

cond.end.933:                                     ; preds = %cond.false.923, %cond.true.915
  %cond934 = phi i32 [ %conv922, %cond.true.915 ], [ %add932, %cond.false.923 ]
  %conv935 = sext i32 %cond934 to i64
  store i64 %conv935, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.936:                                   ; preds = %cond.true.659
  %280 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul937 = mul nsw i64 0, %280
  %281 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add938 = add nsw i64 %mul937, %281
  %mul939 = mul nsw i64 0, %add938
  %sub940 = sub nsw i64 %mul939, 1
  %cmp941 = icmp slt i64 %sub940, 0
  br i1 %cmp941, label %cond.true.943, label %cond.false.962

cond.true.943:                                    ; preds = %cond.false.936
  %282 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul944 = mul nsw i64 0, %282
  %283 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add945 = add nsw i64 %mul944, %283
  %mul946 = mul nsw i64 0, %add945
  %add947 = add nsw i64 %mul946, 0
  %neg948 = xor i64 %add947, -1
  %cmp949 = icmp eq i64 %neg948, -1
  %conv950 = zext i1 %cmp949 to i32
  %sub951 = sub nsw i32 0, %conv950
  %conv952 = sext i32 %sub951 to i64
  %284 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul953 = mul nsw i64 0, %284
  %285 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add954 = add nsw i64 %mul953, %285
  %mul955 = mul nsw i64 0, %add954
  %add956 = add nsw i64 %mul955, 1
  %shl957 = shl i64 %add956, 62
  %sub958 = sub nsw i64 %shl957, 1
  %mul959 = mul nsw i64 %sub958, 2
  %add960 = add nsw i64 %mul959, 1
  %sub961 = sub nsw i64 %conv952, %add960
  br label %cond.end.967

cond.false.962:                                   ; preds = %cond.false.936
  %286 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul963 = mul nsw i64 0, %286
  %287 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add964 = add nsw i64 %mul963, %287
  %mul965 = mul nsw i64 0, %add964
  %add966 = add nsw i64 %mul965, 0
  br label %cond.end.967

cond.end.967:                                     ; preds = %cond.false.962, %cond.true.943
  %cond968 = phi i64 [ %sub961, %cond.true.943 ], [ %add966, %cond.false.962 ]
  %cmp969 = icmp slt i64 %cond968, 0
  br i1 %cmp969, label %cond.true.971, label %cond.false.1036

cond.true.971:                                    ; preds = %cond.end.967
  %288 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp972 = icmp slt i64 %288, 0
  br i1 %cmp972, label %cond.true.974, label %cond.false.1010

cond.true.974:                                    ; preds = %cond.true.971
  %289 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %290 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul975 = mul nsw i64 0, %290
  %291 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add976 = add nsw i64 %mul975, %291
  %mul977 = mul nsw i64 0, %add976
  %sub978 = sub nsw i64 %mul977, 1
  %cmp979 = icmp slt i64 %sub978, 0
  br i1 %cmp979, label %cond.true.981, label %cond.false.1000

cond.true.981:                                    ; preds = %cond.true.974
  %292 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul982 = mul nsw i64 0, %292
  %293 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add983 = add nsw i64 %mul982, %293
  %mul984 = mul nsw i64 0, %add983
  %add985 = add nsw i64 %mul984, 0
  %neg986 = xor i64 %add985, -1
  %cmp987 = icmp eq i64 %neg986, -1
  %conv988 = zext i1 %cmp987 to i32
  %sub989 = sub nsw i32 0, %conv988
  %conv990 = sext i32 %sub989 to i64
  %294 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul991 = mul nsw i64 0, %294
  %295 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add992 = add nsw i64 %mul991, %295
  %mul993 = mul nsw i64 0, %add992
  %add994 = add nsw i64 %mul993, 1
  %shl995 = shl i64 %add994, 62
  %sub996 = sub nsw i64 %shl995, 1
  %mul997 = mul nsw i64 %sub996, 2
  %add998 = add nsw i64 %mul997, 1
  %sub999 = sub nsw i64 %conv990, %add998
  br label %cond.end.1005

cond.false.1000:                                  ; preds = %cond.true.974
  %296 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1001 = mul nsw i64 0, %296
  %297 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1002 = add nsw i64 %mul1001, %297
  %mul1003 = mul nsw i64 0, %add1002
  %add1004 = add nsw i64 %mul1003, 0
  br label %cond.end.1005

cond.end.1005:                                    ; preds = %cond.false.1000, %cond.true.981
  %cond1006 = phi i64 [ %sub999, %cond.true.981 ], [ %add1004, %cond.false.1000 ]
  %298 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1007 = sub nsw i64 %cond1006, %298
  %cmp1008 = icmp slt i64 %289, %sub1007
  br i1 %cmp1008, label %cond.true.1068, label %lor.lhs.false.1054

cond.false.1010:                                  ; preds = %cond.true.971
  %299 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1011 = mul nsw i64 0, %299
  %300 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1012 = add nsw i64 %mul1011, %300
  %mul1013 = mul nsw i64 0, %add1012
  %sub1014 = sub nsw i64 %mul1013, 1
  %cmp1015 = icmp slt i64 %sub1014, 0
  br i1 %cmp1015, label %cond.true.1017, label %cond.false.1026

cond.true.1017:                                   ; preds = %cond.false.1010
  %301 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1018 = mul nsw i64 0, %301
  %302 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1019 = add nsw i64 %mul1018, %302
  %mul1020 = mul nsw i64 0, %add1019
  %add1021 = add nsw i64 %mul1020, 1
  %shl1022 = shl i64 %add1021, 62
  %sub1023 = sub nsw i64 %shl1022, 1
  %mul1024 = mul nsw i64 %sub1023, 2
  %add1025 = add nsw i64 %mul1024, 1
  br label %cond.end.1031

cond.false.1026:                                  ; preds = %cond.false.1010
  %303 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1027 = mul nsw i64 0, %303
  %304 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1028 = add nsw i64 %mul1027, %304
  %mul1029 = mul nsw i64 0, %add1028
  %sub1030 = sub nsw i64 %mul1029, 1
  br label %cond.end.1031

cond.end.1031:                                    ; preds = %cond.false.1026, %cond.true.1017
  %cond1032 = phi i64 [ %add1025, %cond.true.1017 ], [ %sub1030, %cond.false.1026 ]
  %305 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1033 = sub nsw i64 %cond1032, %305
  %306 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1034 = icmp slt i64 %sub1033, %306
  br i1 %cmp1034, label %cond.true.1068, label %lor.lhs.false.1054

cond.false.1036:                                  ; preds = %cond.end.967
  %307 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1037 = icmp slt i64 %307, 0
  br i1 %cmp1037, label %cond.true.1039, label %cond.false.1043

cond.true.1039:                                   ; preds = %cond.false.1036
  %308 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %309 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %310 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1040 = add nsw i64 %309, %310
  %cmp1041 = icmp sle i64 %308, %add1040
  br i1 %cmp1041, label %cond.true.1068, label %lor.lhs.false.1054

cond.false.1043:                                  ; preds = %cond.false.1036
  %311 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1044 = icmp slt i64 %311, 0
  br i1 %cmp1044, label %cond.true.1046, label %cond.false.1050

cond.true.1046:                                   ; preds = %cond.false.1043
  %312 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %313 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %314 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1047 = add nsw i64 %313, %314
  %cmp1048 = icmp sle i64 %312, %add1047
  br i1 %cmp1048, label %cond.true.1068, label %lor.lhs.false.1054

cond.false.1050:                                  ; preds = %cond.false.1043
  %315 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %316 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1051 = add nsw i64 %315, %316
  %317 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1052 = icmp slt i64 %add1051, %317
  br i1 %cmp1052, label %cond.true.1068, label %lor.lhs.false.1054

lor.lhs.false.1054:                               ; preds = %cond.false.1050, %cond.true.1046, %cond.true.1039, %cond.end.1031, %cond.end.1005
  %318 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %319 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1055 = add nsw i64 %318, %319
  %mul1056 = mul nsw i64 0, %add1055
  %sub1057 = sub nsw i64 %mul1056, 1
  %cmp1058 = icmp slt i64 %sub1057, 0
  br i1 %cmp1058, label %land.lhs.true.1060, label %lor.lhs.false.1064

land.lhs.true.1060:                               ; preds = %lor.lhs.false.1054
  %320 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %321 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1061 = add nsw i64 %320, %321
  %cmp1062 = icmp slt i64 %add1061, -32768
  br i1 %cmp1062, label %cond.true.1068, label %lor.lhs.false.1064

lor.lhs.false.1064:                               ; preds = %land.lhs.true.1060, %lor.lhs.false.1054
  %322 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %323 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1065 = add nsw i64 %322, %323
  %cmp1066 = icmp slt i64 32767, %add1065
  br i1 %cmp1066, label %cond.true.1068, label %cond.false.1097

cond.true.1068:                                   ; preds = %lor.lhs.false.1064, %land.lhs.true.1060, %cond.false.1050, %cond.true.1046, %cond.true.1039, %cond.end.1031, %cond.end.1005
  %324 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1069 = trunc i64 %324 to i16
  %conv1070 = zext i16 %conv1069 to i32
  %325 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1071 = trunc i64 %325 to i16
  %conv1072 = zext i16 %conv1071 to i32
  %add1073 = add nsw i32 %conv1070, %conv1072
  %cmp1074 = icmp sle i32 %add1073, 32767
  br i1 %cmp1074, label %cond.true.1076, label %cond.false.1084

cond.true.1076:                                   ; preds = %cond.true.1068
  %326 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1077 = trunc i64 %326 to i16
  %conv1078 = zext i16 %conv1077 to i32
  %327 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1079 = trunc i64 %327 to i16
  %conv1080 = zext i16 %conv1079 to i32
  %add1081 = add nsw i32 %conv1078, %conv1080
  %conv1082 = trunc i32 %add1081 to i16
  %conv1083 = sext i16 %conv1082 to i32
  br label %cond.end.1094

cond.false.1084:                                  ; preds = %cond.true.1068
  %328 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1085 = trunc i64 %328 to i16
  %conv1086 = zext i16 %conv1085 to i32
  %329 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1087 = trunc i64 %329 to i16
  %conv1088 = zext i16 %conv1087 to i32
  %add1089 = add nsw i32 %conv1086, %conv1088
  %sub1090 = sub nsw i32 %add1089, -32768
  %conv1091 = trunc i32 %sub1090 to i16
  %conv1092 = sext i16 %conv1091 to i32
  %add1093 = add nsw i32 %conv1092, -32768
  br label %cond.end.1094

cond.end.1094:                                    ; preds = %cond.false.1084, %cond.true.1076
  %cond1095 = phi i32 [ %conv1083, %cond.true.1076 ], [ %add1093, %cond.false.1084 ]
  %conv1096 = sext i32 %cond1095 to i64
  store i64 %conv1096, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1097:                                  ; preds = %lor.lhs.false.1064
  %330 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1098 = trunc i64 %330 to i16
  %conv1099 = zext i16 %conv1098 to i32
  %331 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1100 = trunc i64 %331 to i16
  %conv1101 = zext i16 %conv1100 to i32
  %add1102 = add nsw i32 %conv1099, %conv1101
  %cmp1103 = icmp sle i32 %add1102, 32767
  br i1 %cmp1103, label %cond.true.1105, label %cond.false.1113

cond.true.1105:                                   ; preds = %cond.false.1097
  %332 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1106 = trunc i64 %332 to i16
  %conv1107 = zext i16 %conv1106 to i32
  %333 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1108 = trunc i64 %333 to i16
  %conv1109 = zext i16 %conv1108 to i32
  %add1110 = add nsw i32 %conv1107, %conv1109
  %conv1111 = trunc i32 %add1110 to i16
  %conv1112 = sext i16 %conv1111 to i32
  br label %cond.end.1123

cond.false.1113:                                  ; preds = %cond.false.1097
  %334 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1114 = trunc i64 %334 to i16
  %conv1115 = zext i16 %conv1114 to i32
  %335 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1116 = trunc i64 %335 to i16
  %conv1117 = zext i16 %conv1116 to i32
  %add1118 = add nsw i32 %conv1115, %conv1117
  %sub1119 = sub nsw i32 %add1118, -32768
  %conv1120 = trunc i32 %sub1119 to i16
  %conv1121 = sext i16 %conv1120 to i32
  %add1122 = add nsw i32 %conv1121, -32768
  br label %cond.end.1123

cond.end.1123:                                    ; preds = %cond.false.1113, %cond.true.1105
  %cond1124 = phi i32 [ %conv1112, %cond.true.1105 ], [ %add1122, %cond.false.1113 ]
  %conv1125 = sext i32 %cond1124 to i64
  store i64 %conv1125, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1126:                                  ; preds = %cond.false.658
  br i1 false, label %cond.true.1127, label %cond.false.1510

cond.true.1127:                                   ; preds = %cond.false.1126
  br i1 false, label %cond.true.1128, label %cond.false.1340

cond.true.1128:                                   ; preds = %cond.true.1127
  %336 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1129 = trunc i64 %336 to i32
  %mul1130 = mul nsw i32 0, %conv1129
  %337 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1131 = trunc i64 %337 to i32
  %add1132 = add nsw i32 %mul1130, %conv1131
  %mul1133 = mul nsw i32 0, %add1132
  %sub1134 = sub nsw i32 %mul1133, 1
  %cmp1135 = icmp slt i32 %sub1134, 0
  br i1 %cmp1135, label %cond.true.1137, label %cond.false.1159

cond.true.1137:                                   ; preds = %cond.true.1128
  %338 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1138 = trunc i64 %338 to i32
  %mul1139 = mul nsw i32 0, %conv1138
  %339 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1140 = trunc i64 %339 to i32
  %add1141 = add nsw i32 %mul1139, %conv1140
  %mul1142 = mul nsw i32 0, %add1141
  %add1143 = add nsw i32 %mul1142, 0
  %neg1144 = xor i32 %add1143, -1
  %cmp1145 = icmp eq i32 %neg1144, -1
  %conv1146 = zext i1 %cmp1145 to i32
  %sub1147 = sub nsw i32 0, %conv1146
  %340 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1148 = trunc i64 %340 to i32
  %mul1149 = mul nsw i32 0, %conv1148
  %341 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1150 = trunc i64 %341 to i32
  %add1151 = add nsw i32 %mul1149, %conv1150
  %mul1152 = mul nsw i32 0, %add1151
  %add1153 = add nsw i32 %mul1152, 1
  %shl1154 = shl i32 %add1153, 30
  %sub1155 = sub nsw i32 %shl1154, 1
  %mul1156 = mul nsw i32 %sub1155, 2
  %add1157 = add nsw i32 %mul1156, 1
  %sub1158 = sub nsw i32 %sub1147, %add1157
  br label %cond.end.1166

cond.false.1159:                                  ; preds = %cond.true.1128
  %342 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1160 = trunc i64 %342 to i32
  %mul1161 = mul nsw i32 0, %conv1160
  %343 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1162 = trunc i64 %343 to i32
  %add1163 = add nsw i32 %mul1161, %conv1162
  %mul1164 = mul nsw i32 0, %add1163
  %add1165 = add nsw i32 %mul1164, 0
  br label %cond.end.1166

cond.end.1166:                                    ; preds = %cond.false.1159, %cond.true.1137
  %cond1167 = phi i32 [ %sub1158, %cond.true.1137 ], [ %add1165, %cond.false.1159 ]
  %cmp1168 = icmp slt i32 %cond1167, 0
  br i1 %cmp1168, label %cond.true.1170, label %cond.false.1253

cond.true.1170:                                   ; preds = %cond.end.1166
  %344 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1171 = trunc i64 %344 to i32
  %cmp1172 = icmp slt i32 %conv1171, 0
  br i1 %cmp1172, label %cond.true.1174, label %cond.false.1219

cond.true.1174:                                   ; preds = %cond.true.1170
  %345 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1175 = trunc i64 %345 to i32
  %346 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1176 = trunc i64 %346 to i32
  %mul1177 = mul nsw i32 0, %conv1176
  %347 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1178 = trunc i64 %347 to i32
  %add1179 = add nsw i32 %mul1177, %conv1178
  %mul1180 = mul nsw i32 0, %add1179
  %sub1181 = sub nsw i32 %mul1180, 1
  %cmp1182 = icmp slt i32 %sub1181, 0
  br i1 %cmp1182, label %cond.true.1184, label %cond.false.1206

cond.true.1184:                                   ; preds = %cond.true.1174
  %348 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1185 = trunc i64 %348 to i32
  %mul1186 = mul nsw i32 0, %conv1185
  %349 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1187 = trunc i64 %349 to i32
  %add1188 = add nsw i32 %mul1186, %conv1187
  %mul1189 = mul nsw i32 0, %add1188
  %add1190 = add nsw i32 %mul1189, 0
  %neg1191 = xor i32 %add1190, -1
  %cmp1192 = icmp eq i32 %neg1191, -1
  %conv1193 = zext i1 %cmp1192 to i32
  %sub1194 = sub nsw i32 0, %conv1193
  %350 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1195 = trunc i64 %350 to i32
  %mul1196 = mul nsw i32 0, %conv1195
  %351 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1197 = trunc i64 %351 to i32
  %add1198 = add nsw i32 %mul1196, %conv1197
  %mul1199 = mul nsw i32 0, %add1198
  %add1200 = add nsw i32 %mul1199, 1
  %shl1201 = shl i32 %add1200, 30
  %sub1202 = sub nsw i32 %shl1201, 1
  %mul1203 = mul nsw i32 %sub1202, 2
  %add1204 = add nsw i32 %mul1203, 1
  %sub1205 = sub nsw i32 %sub1194, %add1204
  br label %cond.end.1213

cond.false.1206:                                  ; preds = %cond.true.1174
  %352 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1207 = trunc i64 %352 to i32
  %mul1208 = mul nsw i32 0, %conv1207
  %353 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1209 = trunc i64 %353 to i32
  %add1210 = add nsw i32 %mul1208, %conv1209
  %mul1211 = mul nsw i32 0, %add1210
  %add1212 = add nsw i32 %mul1211, 0
  br label %cond.end.1213

cond.end.1213:                                    ; preds = %cond.false.1206, %cond.true.1184
  %cond1214 = phi i32 [ %sub1205, %cond.true.1184 ], [ %add1212, %cond.false.1206 ]
  %354 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1215 = trunc i64 %354 to i32
  %sub1216 = sub nsw i32 %cond1214, %conv1215
  %cmp1217 = icmp slt i32 %conv1175, %sub1216
  br i1 %cmp1217, label %cond.true.1302, label %lor.lhs.false.1282

cond.false.1219:                                  ; preds = %cond.true.1170
  %355 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1220 = trunc i64 %355 to i32
  %mul1221 = mul nsw i32 0, %conv1220
  %356 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1222 = trunc i64 %356 to i32
  %add1223 = add nsw i32 %mul1221, %conv1222
  %mul1224 = mul nsw i32 0, %add1223
  %sub1225 = sub nsw i32 %mul1224, 1
  %cmp1226 = icmp slt i32 %sub1225, 0
  br i1 %cmp1226, label %cond.true.1228, label %cond.false.1239

cond.true.1228:                                   ; preds = %cond.false.1219
  %357 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1229 = trunc i64 %357 to i32
  %mul1230 = mul nsw i32 0, %conv1229
  %358 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1231 = trunc i64 %358 to i32
  %add1232 = add nsw i32 %mul1230, %conv1231
  %mul1233 = mul nsw i32 0, %add1232
  %add1234 = add nsw i32 %mul1233, 1
  %shl1235 = shl i32 %add1234, 30
  %sub1236 = sub nsw i32 %shl1235, 1
  %mul1237 = mul nsw i32 %sub1236, 2
  %add1238 = add nsw i32 %mul1237, 1
  br label %cond.end.1246

cond.false.1239:                                  ; preds = %cond.false.1219
  %359 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1240 = trunc i64 %359 to i32
  %mul1241 = mul nsw i32 0, %conv1240
  %360 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1242 = trunc i64 %360 to i32
  %add1243 = add nsw i32 %mul1241, %conv1242
  %mul1244 = mul nsw i32 0, %add1243
  %sub1245 = sub nsw i32 %mul1244, 1
  br label %cond.end.1246

cond.end.1246:                                    ; preds = %cond.false.1239, %cond.true.1228
  %cond1247 = phi i32 [ %add1238, %cond.true.1228 ], [ %sub1245, %cond.false.1239 ]
  %361 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1248 = trunc i64 %361 to i32
  %sub1249 = sub nsw i32 %cond1247, %conv1248
  %362 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1250 = trunc i64 %362 to i32
  %cmp1251 = icmp slt i32 %sub1249, %conv1250
  br i1 %cmp1251, label %cond.true.1302, label %lor.lhs.false.1282

cond.false.1253:                                  ; preds = %cond.end.1166
  %363 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1254 = trunc i64 %363 to i32
  %cmp1255 = icmp slt i32 %conv1254, 0
  br i1 %cmp1255, label %cond.true.1257, label %cond.false.1264

cond.true.1257:                                   ; preds = %cond.false.1253
  %364 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1258 = trunc i64 %364 to i32
  %365 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1259 = trunc i64 %365 to i32
  %366 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1260 = trunc i64 %366 to i32
  %add1261 = add nsw i32 %conv1259, %conv1260
  %cmp1262 = icmp sle i32 %conv1258, %add1261
  br i1 %cmp1262, label %cond.true.1302, label %lor.lhs.false.1282

cond.false.1264:                                  ; preds = %cond.false.1253
  %367 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1265 = trunc i64 %367 to i32
  %cmp1266 = icmp slt i32 %conv1265, 0
  br i1 %cmp1266, label %cond.true.1268, label %cond.false.1275

cond.true.1268:                                   ; preds = %cond.false.1264
  %368 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1269 = trunc i64 %368 to i32
  %369 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1270 = trunc i64 %369 to i32
  %370 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1271 = trunc i64 %370 to i32
  %add1272 = add nsw i32 %conv1270, %conv1271
  %cmp1273 = icmp sle i32 %conv1269, %add1272
  br i1 %cmp1273, label %cond.true.1302, label %lor.lhs.false.1282

cond.false.1275:                                  ; preds = %cond.false.1264
  %371 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1276 = trunc i64 %371 to i32
  %372 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1277 = trunc i64 %372 to i32
  %add1278 = add nsw i32 %conv1276, %conv1277
  %373 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1279 = trunc i64 %373 to i32
  %cmp1280 = icmp slt i32 %add1278, %conv1279
  br i1 %cmp1280, label %cond.true.1302, label %lor.lhs.false.1282

lor.lhs.false.1282:                               ; preds = %cond.false.1275, %cond.true.1268, %cond.true.1257, %cond.end.1246, %cond.end.1213
  %374 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1283 = trunc i64 %374 to i32
  %375 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1284 = trunc i64 %375 to i32
  %add1285 = add nsw i32 %conv1283, %conv1284
  %mul1286 = mul nsw i32 0, %add1285
  %sub1287 = sub nsw i32 %mul1286, 1
  %cmp1288 = icmp slt i32 %sub1287, 0
  br i1 %cmp1288, label %land.lhs.true.1290, label %lor.lhs.false.1296

land.lhs.true.1290:                               ; preds = %lor.lhs.false.1282
  %376 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1291 = trunc i64 %376 to i32
  %377 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1292 = trunc i64 %377 to i32
  %add1293 = add nsw i32 %conv1291, %conv1292
  %cmp1294 = icmp slt i32 %add1293, -2147483648
  br i1 %cmp1294, label %cond.true.1302, label %lor.lhs.false.1296

lor.lhs.false.1296:                               ; preds = %land.lhs.true.1290, %lor.lhs.false.1282
  %378 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1297 = trunc i64 %378 to i32
  %379 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1298 = trunc i64 %379 to i32
  %add1299 = add nsw i32 %conv1297, %conv1298
  %cmp1300 = icmp slt i32 2147483647, %add1299
  br i1 %cmp1300, label %cond.true.1302, label %cond.false.1321

cond.true.1302:                                   ; preds = %lor.lhs.false.1296, %land.lhs.true.1290, %cond.false.1275, %cond.true.1268, %cond.true.1257, %cond.end.1246, %cond.end.1213
  %380 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1303 = trunc i64 %380 to i32
  %381 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1304 = trunc i64 %381 to i32
  %add1305 = add i32 %conv1303, %conv1304
  %cmp1306 = icmp ule i32 %add1305, 2147483647
  br i1 %cmp1306, label %cond.true.1308, label %cond.false.1312

cond.true.1308:                                   ; preds = %cond.true.1302
  %382 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1309 = trunc i64 %382 to i32
  %383 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1310 = trunc i64 %383 to i32
  %add1311 = add i32 %conv1309, %conv1310
  br label %cond.end.1318

cond.false.1312:                                  ; preds = %cond.true.1302
  %384 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1313 = trunc i64 %384 to i32
  %385 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1314 = trunc i64 %385 to i32
  %add1315 = add i32 %conv1313, %conv1314
  %sub1316 = sub i32 %add1315, -2147483648
  %add1317 = add nsw i32 %sub1316, -2147483648
  br label %cond.end.1318

cond.end.1318:                                    ; preds = %cond.false.1312, %cond.true.1308
  %cond1319 = phi i32 [ %add1311, %cond.true.1308 ], [ %add1317, %cond.false.1312 ]
  %conv1320 = sext i32 %cond1319 to i64
  store i64 %conv1320, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1321:                                  ; preds = %lor.lhs.false.1296
  %386 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1322 = trunc i64 %386 to i32
  %387 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1323 = trunc i64 %387 to i32
  %add1324 = add i32 %conv1322, %conv1323
  %cmp1325 = icmp ule i32 %add1324, 2147483647
  br i1 %cmp1325, label %cond.true.1327, label %cond.false.1331

cond.true.1327:                                   ; preds = %cond.false.1321
  %388 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1328 = trunc i64 %388 to i32
  %389 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1329 = trunc i64 %389 to i32
  %add1330 = add i32 %conv1328, %conv1329
  br label %cond.end.1337

cond.false.1331:                                  ; preds = %cond.false.1321
  %390 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1332 = trunc i64 %390 to i32
  %391 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1333 = trunc i64 %391 to i32
  %add1334 = add i32 %conv1332, %conv1333
  %sub1335 = sub i32 %add1334, -2147483648
  %add1336 = add nsw i32 %sub1335, -2147483648
  br label %cond.end.1337

cond.end.1337:                                    ; preds = %cond.false.1331, %cond.true.1327
  %cond1338 = phi i32 [ %add1330, %cond.true.1327 ], [ %add1336, %cond.false.1331 ]
  %conv1339 = sext i32 %cond1338 to i64
  store i64 %conv1339, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1340:                                  ; preds = %cond.true.1127
  %392 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1341 = mul nsw i64 0, %392
  %393 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1342 = add nsw i64 %mul1341, %393
  %mul1343 = mul nsw i64 0, %add1342
  %sub1344 = sub nsw i64 %mul1343, 1
  %cmp1345 = icmp slt i64 %sub1344, 0
  br i1 %cmp1345, label %cond.true.1347, label %cond.false.1366

cond.true.1347:                                   ; preds = %cond.false.1340
  %394 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1348 = mul nsw i64 0, %394
  %395 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1349 = add nsw i64 %mul1348, %395
  %mul1350 = mul nsw i64 0, %add1349
  %add1351 = add nsw i64 %mul1350, 0
  %neg1352 = xor i64 %add1351, -1
  %cmp1353 = icmp eq i64 %neg1352, -1
  %conv1354 = zext i1 %cmp1353 to i32
  %sub1355 = sub nsw i32 0, %conv1354
  %conv1356 = sext i32 %sub1355 to i64
  %396 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1357 = mul nsw i64 0, %396
  %397 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1358 = add nsw i64 %mul1357, %397
  %mul1359 = mul nsw i64 0, %add1358
  %add1360 = add nsw i64 %mul1359, 1
  %shl1361 = shl i64 %add1360, 62
  %sub1362 = sub nsw i64 %shl1361, 1
  %mul1363 = mul nsw i64 %sub1362, 2
  %add1364 = add nsw i64 %mul1363, 1
  %sub1365 = sub nsw i64 %conv1356, %add1364
  br label %cond.end.1371

cond.false.1366:                                  ; preds = %cond.false.1340
  %398 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1367 = mul nsw i64 0, %398
  %399 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1368 = add nsw i64 %mul1367, %399
  %mul1369 = mul nsw i64 0, %add1368
  %add1370 = add nsw i64 %mul1369, 0
  br label %cond.end.1371

cond.end.1371:                                    ; preds = %cond.false.1366, %cond.true.1347
  %cond1372 = phi i64 [ %sub1365, %cond.true.1347 ], [ %add1370, %cond.false.1366 ]
  %cmp1373 = icmp slt i64 %cond1372, 0
  br i1 %cmp1373, label %cond.true.1375, label %cond.false.1440

cond.true.1375:                                   ; preds = %cond.end.1371
  %400 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1376 = icmp slt i64 %400, 0
  br i1 %cmp1376, label %cond.true.1378, label %cond.false.1414

cond.true.1378:                                   ; preds = %cond.true.1375
  %401 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %402 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1379 = mul nsw i64 0, %402
  %403 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1380 = add nsw i64 %mul1379, %403
  %mul1381 = mul nsw i64 0, %add1380
  %sub1382 = sub nsw i64 %mul1381, 1
  %cmp1383 = icmp slt i64 %sub1382, 0
  br i1 %cmp1383, label %cond.true.1385, label %cond.false.1404

cond.true.1385:                                   ; preds = %cond.true.1378
  %404 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1386 = mul nsw i64 0, %404
  %405 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1387 = add nsw i64 %mul1386, %405
  %mul1388 = mul nsw i64 0, %add1387
  %add1389 = add nsw i64 %mul1388, 0
  %neg1390 = xor i64 %add1389, -1
  %cmp1391 = icmp eq i64 %neg1390, -1
  %conv1392 = zext i1 %cmp1391 to i32
  %sub1393 = sub nsw i32 0, %conv1392
  %conv1394 = sext i32 %sub1393 to i64
  %406 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1395 = mul nsw i64 0, %406
  %407 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1396 = add nsw i64 %mul1395, %407
  %mul1397 = mul nsw i64 0, %add1396
  %add1398 = add nsw i64 %mul1397, 1
  %shl1399 = shl i64 %add1398, 62
  %sub1400 = sub nsw i64 %shl1399, 1
  %mul1401 = mul nsw i64 %sub1400, 2
  %add1402 = add nsw i64 %mul1401, 1
  %sub1403 = sub nsw i64 %conv1394, %add1402
  br label %cond.end.1409

cond.false.1404:                                  ; preds = %cond.true.1378
  %408 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1405 = mul nsw i64 0, %408
  %409 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1406 = add nsw i64 %mul1405, %409
  %mul1407 = mul nsw i64 0, %add1406
  %add1408 = add nsw i64 %mul1407, 0
  br label %cond.end.1409

cond.end.1409:                                    ; preds = %cond.false.1404, %cond.true.1385
  %cond1410 = phi i64 [ %sub1403, %cond.true.1385 ], [ %add1408, %cond.false.1404 ]
  %410 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1411 = sub nsw i64 %cond1410, %410
  %cmp1412 = icmp slt i64 %401, %sub1411
  br i1 %cmp1412, label %cond.true.1472, label %lor.lhs.false.1458

cond.false.1414:                                  ; preds = %cond.true.1375
  %411 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1415 = mul nsw i64 0, %411
  %412 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1416 = add nsw i64 %mul1415, %412
  %mul1417 = mul nsw i64 0, %add1416
  %sub1418 = sub nsw i64 %mul1417, 1
  %cmp1419 = icmp slt i64 %sub1418, 0
  br i1 %cmp1419, label %cond.true.1421, label %cond.false.1430

cond.true.1421:                                   ; preds = %cond.false.1414
  %413 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1422 = mul nsw i64 0, %413
  %414 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1423 = add nsw i64 %mul1422, %414
  %mul1424 = mul nsw i64 0, %add1423
  %add1425 = add nsw i64 %mul1424, 1
  %shl1426 = shl i64 %add1425, 62
  %sub1427 = sub nsw i64 %shl1426, 1
  %mul1428 = mul nsw i64 %sub1427, 2
  %add1429 = add nsw i64 %mul1428, 1
  br label %cond.end.1435

cond.false.1430:                                  ; preds = %cond.false.1414
  %415 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1431 = mul nsw i64 0, %415
  %416 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1432 = add nsw i64 %mul1431, %416
  %mul1433 = mul nsw i64 0, %add1432
  %sub1434 = sub nsw i64 %mul1433, 1
  br label %cond.end.1435

cond.end.1435:                                    ; preds = %cond.false.1430, %cond.true.1421
  %cond1436 = phi i64 [ %add1429, %cond.true.1421 ], [ %sub1434, %cond.false.1430 ]
  %417 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1437 = sub nsw i64 %cond1436, %417
  %418 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1438 = icmp slt i64 %sub1437, %418
  br i1 %cmp1438, label %cond.true.1472, label %lor.lhs.false.1458

cond.false.1440:                                  ; preds = %cond.end.1371
  %419 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1441 = icmp slt i64 %419, 0
  br i1 %cmp1441, label %cond.true.1443, label %cond.false.1447

cond.true.1443:                                   ; preds = %cond.false.1440
  %420 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %421 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %422 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1444 = add nsw i64 %421, %422
  %cmp1445 = icmp sle i64 %420, %add1444
  br i1 %cmp1445, label %cond.true.1472, label %lor.lhs.false.1458

cond.false.1447:                                  ; preds = %cond.false.1440
  %423 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1448 = icmp slt i64 %423, 0
  br i1 %cmp1448, label %cond.true.1450, label %cond.false.1454

cond.true.1450:                                   ; preds = %cond.false.1447
  %424 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %425 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %426 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1451 = add nsw i64 %425, %426
  %cmp1452 = icmp sle i64 %424, %add1451
  br i1 %cmp1452, label %cond.true.1472, label %lor.lhs.false.1458

cond.false.1454:                                  ; preds = %cond.false.1447
  %427 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %428 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1455 = add nsw i64 %427, %428
  %429 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1456 = icmp slt i64 %add1455, %429
  br i1 %cmp1456, label %cond.true.1472, label %lor.lhs.false.1458

lor.lhs.false.1458:                               ; preds = %cond.false.1454, %cond.true.1450, %cond.true.1443, %cond.end.1435, %cond.end.1409
  %430 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %431 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1459 = add nsw i64 %430, %431
  %mul1460 = mul nsw i64 0, %add1459
  %sub1461 = sub nsw i64 %mul1460, 1
  %cmp1462 = icmp slt i64 %sub1461, 0
  br i1 %cmp1462, label %land.lhs.true.1464, label %lor.lhs.false.1468

land.lhs.true.1464:                               ; preds = %lor.lhs.false.1458
  %432 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %433 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1465 = add nsw i64 %432, %433
  %cmp1466 = icmp slt i64 %add1465, -2147483648
  br i1 %cmp1466, label %cond.true.1472, label %lor.lhs.false.1468

lor.lhs.false.1468:                               ; preds = %land.lhs.true.1464, %lor.lhs.false.1458
  %434 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %435 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1469 = add nsw i64 %434, %435
  %cmp1470 = icmp slt i64 2147483647, %add1469
  br i1 %cmp1470, label %cond.true.1472, label %cond.false.1491

cond.true.1472:                                   ; preds = %lor.lhs.false.1468, %land.lhs.true.1464, %cond.false.1454, %cond.true.1450, %cond.true.1443, %cond.end.1435, %cond.end.1409
  %436 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1473 = trunc i64 %436 to i32
  %437 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1474 = trunc i64 %437 to i32
  %add1475 = add i32 %conv1473, %conv1474
  %cmp1476 = icmp ule i32 %add1475, 2147483647
  br i1 %cmp1476, label %cond.true.1478, label %cond.false.1482

cond.true.1478:                                   ; preds = %cond.true.1472
  %438 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1479 = trunc i64 %438 to i32
  %439 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1480 = trunc i64 %439 to i32
  %add1481 = add i32 %conv1479, %conv1480
  br label %cond.end.1488

cond.false.1482:                                  ; preds = %cond.true.1472
  %440 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1483 = trunc i64 %440 to i32
  %441 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1484 = trunc i64 %441 to i32
  %add1485 = add i32 %conv1483, %conv1484
  %sub1486 = sub i32 %add1485, -2147483648
  %add1487 = add nsw i32 %sub1486, -2147483648
  br label %cond.end.1488

cond.end.1488:                                    ; preds = %cond.false.1482, %cond.true.1478
  %cond1489 = phi i32 [ %add1481, %cond.true.1478 ], [ %add1487, %cond.false.1482 ]
  %conv1490 = sext i32 %cond1489 to i64
  store i64 %conv1490, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1491:                                  ; preds = %lor.lhs.false.1468
  %442 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1492 = trunc i64 %442 to i32
  %443 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1493 = trunc i64 %443 to i32
  %add1494 = add i32 %conv1492, %conv1493
  %cmp1495 = icmp ule i32 %add1494, 2147483647
  br i1 %cmp1495, label %cond.true.1497, label %cond.false.1501

cond.true.1497:                                   ; preds = %cond.false.1491
  %444 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1498 = trunc i64 %444 to i32
  %445 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1499 = trunc i64 %445 to i32
  %add1500 = add i32 %conv1498, %conv1499
  br label %cond.end.1507

cond.false.1501:                                  ; preds = %cond.false.1491
  %446 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %conv1502 = trunc i64 %446 to i32
  %447 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %conv1503 = trunc i64 %447 to i32
  %add1504 = add i32 %conv1502, %conv1503
  %sub1505 = sub i32 %add1504, -2147483648
  %add1506 = add nsw i32 %sub1505, -2147483648
  br label %cond.end.1507

cond.end.1507:                                    ; preds = %cond.false.1501, %cond.true.1497
  %cond1508 = phi i32 [ %add1500, %cond.true.1497 ], [ %add1506, %cond.false.1501 ]
  %conv1509 = sext i32 %cond1508 to i64
  store i64 %conv1509, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1510:                                  ; preds = %cond.false.1126
  br i1 true, label %cond.true.1511, label %cond.false.1824

cond.true.1511:                                   ; preds = %cond.false.1510
  br i1 false, label %cond.true.1512, label %cond.false.1668

cond.true.1512:                                   ; preds = %cond.true.1511
  %448 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1513 = mul nsw i64 0, %448
  %449 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1514 = add nsw i64 %mul1513, %449
  %mul1515 = mul nsw i64 0, %add1514
  %sub1516 = sub nsw i64 %mul1515, 1
  %cmp1517 = icmp slt i64 %sub1516, 0
  br i1 %cmp1517, label %cond.true.1519, label %cond.false.1538

cond.true.1519:                                   ; preds = %cond.true.1512
  %450 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1520 = mul nsw i64 0, %450
  %451 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1521 = add nsw i64 %mul1520, %451
  %mul1522 = mul nsw i64 0, %add1521
  %add1523 = add nsw i64 %mul1522, 0
  %neg1524 = xor i64 %add1523, -1
  %cmp1525 = icmp eq i64 %neg1524, -1
  %conv1526 = zext i1 %cmp1525 to i32
  %sub1527 = sub nsw i32 0, %conv1526
  %conv1528 = sext i32 %sub1527 to i64
  %452 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1529 = mul nsw i64 0, %452
  %453 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1530 = add nsw i64 %mul1529, %453
  %mul1531 = mul nsw i64 0, %add1530
  %add1532 = add nsw i64 %mul1531, 1
  %shl1533 = shl i64 %add1532, 62
  %sub1534 = sub nsw i64 %shl1533, 1
  %mul1535 = mul nsw i64 %sub1534, 2
  %add1536 = add nsw i64 %mul1535, 1
  %sub1537 = sub nsw i64 %conv1528, %add1536
  br label %cond.end.1543

cond.false.1538:                                  ; preds = %cond.true.1512
  %454 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1539 = mul nsw i64 0, %454
  %455 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1540 = add nsw i64 %mul1539, %455
  %mul1541 = mul nsw i64 0, %add1540
  %add1542 = add nsw i64 %mul1541, 0
  br label %cond.end.1543

cond.end.1543:                                    ; preds = %cond.false.1538, %cond.true.1519
  %cond1544 = phi i64 [ %sub1537, %cond.true.1519 ], [ %add1542, %cond.false.1538 ]
  %cmp1545 = icmp slt i64 %cond1544, 0
  br i1 %cmp1545, label %cond.true.1547, label %cond.false.1612

cond.true.1547:                                   ; preds = %cond.end.1543
  %456 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1548 = icmp slt i64 %456, 0
  br i1 %cmp1548, label %cond.true.1550, label %cond.false.1586

cond.true.1550:                                   ; preds = %cond.true.1547
  %457 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %458 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1551 = mul nsw i64 0, %458
  %459 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1552 = add nsw i64 %mul1551, %459
  %mul1553 = mul nsw i64 0, %add1552
  %sub1554 = sub nsw i64 %mul1553, 1
  %cmp1555 = icmp slt i64 %sub1554, 0
  br i1 %cmp1555, label %cond.true.1557, label %cond.false.1576

cond.true.1557:                                   ; preds = %cond.true.1550
  %460 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1558 = mul nsw i64 0, %460
  %461 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1559 = add nsw i64 %mul1558, %461
  %mul1560 = mul nsw i64 0, %add1559
  %add1561 = add nsw i64 %mul1560, 0
  %neg1562 = xor i64 %add1561, -1
  %cmp1563 = icmp eq i64 %neg1562, -1
  %conv1564 = zext i1 %cmp1563 to i32
  %sub1565 = sub nsw i32 0, %conv1564
  %conv1566 = sext i32 %sub1565 to i64
  %462 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1567 = mul nsw i64 0, %462
  %463 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1568 = add nsw i64 %mul1567, %463
  %mul1569 = mul nsw i64 0, %add1568
  %add1570 = add nsw i64 %mul1569, 1
  %shl1571 = shl i64 %add1570, 62
  %sub1572 = sub nsw i64 %shl1571, 1
  %mul1573 = mul nsw i64 %sub1572, 2
  %add1574 = add nsw i64 %mul1573, 1
  %sub1575 = sub nsw i64 %conv1566, %add1574
  br label %cond.end.1581

cond.false.1576:                                  ; preds = %cond.true.1550
  %464 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1577 = mul nsw i64 0, %464
  %465 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1578 = add nsw i64 %mul1577, %465
  %mul1579 = mul nsw i64 0, %add1578
  %add1580 = add nsw i64 %mul1579, 0
  br label %cond.end.1581

cond.end.1581:                                    ; preds = %cond.false.1576, %cond.true.1557
  %cond1582 = phi i64 [ %sub1575, %cond.true.1557 ], [ %add1580, %cond.false.1576 ]
  %466 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1583 = sub nsw i64 %cond1582, %466
  %cmp1584 = icmp slt i64 %457, %sub1583
  br i1 %cmp1584, label %cond.true.1644, label %lor.lhs.false.1630

cond.false.1586:                                  ; preds = %cond.true.1547
  %467 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1587 = mul nsw i64 0, %467
  %468 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1588 = add nsw i64 %mul1587, %468
  %mul1589 = mul nsw i64 0, %add1588
  %sub1590 = sub nsw i64 %mul1589, 1
  %cmp1591 = icmp slt i64 %sub1590, 0
  br i1 %cmp1591, label %cond.true.1593, label %cond.false.1602

cond.true.1593:                                   ; preds = %cond.false.1586
  %469 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1594 = mul nsw i64 0, %469
  %470 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1595 = add nsw i64 %mul1594, %470
  %mul1596 = mul nsw i64 0, %add1595
  %add1597 = add nsw i64 %mul1596, 1
  %shl1598 = shl i64 %add1597, 62
  %sub1599 = sub nsw i64 %shl1598, 1
  %mul1600 = mul nsw i64 %sub1599, 2
  %add1601 = add nsw i64 %mul1600, 1
  br label %cond.end.1607

cond.false.1602:                                  ; preds = %cond.false.1586
  %471 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1603 = mul nsw i64 0, %471
  %472 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1604 = add nsw i64 %mul1603, %472
  %mul1605 = mul nsw i64 0, %add1604
  %sub1606 = sub nsw i64 %mul1605, 1
  br label %cond.end.1607

cond.end.1607:                                    ; preds = %cond.false.1602, %cond.true.1593
  %cond1608 = phi i64 [ %add1601, %cond.true.1593 ], [ %sub1606, %cond.false.1602 ]
  %473 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1609 = sub nsw i64 %cond1608, %473
  %474 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1610 = icmp slt i64 %sub1609, %474
  br i1 %cmp1610, label %cond.true.1644, label %lor.lhs.false.1630

cond.false.1612:                                  ; preds = %cond.end.1543
  %475 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1613 = icmp slt i64 %475, 0
  br i1 %cmp1613, label %cond.true.1615, label %cond.false.1619

cond.true.1615:                                   ; preds = %cond.false.1612
  %476 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %477 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %478 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1616 = add nsw i64 %477, %478
  %cmp1617 = icmp sle i64 %476, %add1616
  br i1 %cmp1617, label %cond.true.1644, label %lor.lhs.false.1630

cond.false.1619:                                  ; preds = %cond.false.1612
  %479 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1620 = icmp slt i64 %479, 0
  br i1 %cmp1620, label %cond.true.1622, label %cond.false.1626

cond.true.1622:                                   ; preds = %cond.false.1619
  %480 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %481 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %482 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1623 = add nsw i64 %481, %482
  %cmp1624 = icmp sle i64 %480, %add1623
  br i1 %cmp1624, label %cond.true.1644, label %lor.lhs.false.1630

cond.false.1626:                                  ; preds = %cond.false.1619
  %483 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %484 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1627 = add nsw i64 %483, %484
  %485 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1628 = icmp slt i64 %add1627, %485
  br i1 %cmp1628, label %cond.true.1644, label %lor.lhs.false.1630

lor.lhs.false.1630:                               ; preds = %cond.false.1626, %cond.true.1622, %cond.true.1615, %cond.end.1607, %cond.end.1581
  %486 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %487 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1631 = add nsw i64 %486, %487
  %mul1632 = mul nsw i64 0, %add1631
  %sub1633 = sub nsw i64 %mul1632, 1
  %cmp1634 = icmp slt i64 %sub1633, 0
  br i1 %cmp1634, label %land.lhs.true.1636, label %lor.lhs.false.1640

land.lhs.true.1636:                               ; preds = %lor.lhs.false.1630
  %488 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %489 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1637 = add nsw i64 %488, %489
  %cmp1638 = icmp slt i64 %add1637, -9223372036854775808
  br i1 %cmp1638, label %cond.true.1644, label %lor.lhs.false.1640

lor.lhs.false.1640:                               ; preds = %land.lhs.true.1636, %lor.lhs.false.1630
  %490 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %491 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1641 = add nsw i64 %490, %491
  %cmp1642 = icmp slt i64 9223372036854775807, %add1641
  br i1 %cmp1642, label %cond.true.1644, label %cond.false.1656

cond.true.1644:                                   ; preds = %lor.lhs.false.1640, %land.lhs.true.1636, %cond.false.1626, %cond.true.1622, %cond.true.1615, %cond.end.1607, %cond.end.1581
  %492 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %493 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1645 = add i64 %492, %493
  %cmp1646 = icmp ule i64 %add1645, 9223372036854775807
  br i1 %cmp1646, label %cond.true.1648, label %cond.false.1650

cond.true.1648:                                   ; preds = %cond.true.1644
  %494 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %495 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1649 = add i64 %494, %495
  br label %cond.end.1654

cond.false.1650:                                  ; preds = %cond.true.1644
  %496 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %497 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1651 = add i64 %496, %497
  %sub1652 = sub i64 %add1651, -9223372036854775808
  %add1653 = add nsw i64 %sub1652, -9223372036854775808
  br label %cond.end.1654

cond.end.1654:                                    ; preds = %cond.false.1650, %cond.true.1648
  %cond1655 = phi i64 [ %add1649, %cond.true.1648 ], [ %add1653, %cond.false.1650 ]
  store i64 %cond1655, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1656:                                  ; preds = %lor.lhs.false.1640
  %498 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %499 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1657 = add i64 %498, %499
  %cmp1658 = icmp ule i64 %add1657, 9223372036854775807
  br i1 %cmp1658, label %cond.true.1660, label %cond.false.1662

cond.true.1660:                                   ; preds = %cond.false.1656
  %500 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %501 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1661 = add i64 %500, %501
  br label %cond.end.1666

cond.false.1662:                                  ; preds = %cond.false.1656
  %502 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %503 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1663 = add i64 %502, %503
  %sub1664 = sub i64 %add1663, -9223372036854775808
  %add1665 = add nsw i64 %sub1664, -9223372036854775808
  br label %cond.end.1666

cond.end.1666:                                    ; preds = %cond.false.1662, %cond.true.1660
  %cond1667 = phi i64 [ %add1661, %cond.true.1660 ], [ %add1665, %cond.false.1662 ]
  store i64 %cond1667, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1668:                                  ; preds = %cond.true.1511
  %504 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1669 = mul nsw i64 0, %504
  %505 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1670 = add nsw i64 %mul1669, %505
  %mul1671 = mul nsw i64 0, %add1670
  %sub1672 = sub nsw i64 %mul1671, 1
  %cmp1673 = icmp slt i64 %sub1672, 0
  br i1 %cmp1673, label %cond.true.1675, label %cond.false.1694

cond.true.1675:                                   ; preds = %cond.false.1668
  %506 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1676 = mul nsw i64 0, %506
  %507 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1677 = add nsw i64 %mul1676, %507
  %mul1678 = mul nsw i64 0, %add1677
  %add1679 = add nsw i64 %mul1678, 0
  %neg1680 = xor i64 %add1679, -1
  %cmp1681 = icmp eq i64 %neg1680, -1
  %conv1682 = zext i1 %cmp1681 to i32
  %sub1683 = sub nsw i32 0, %conv1682
  %conv1684 = sext i32 %sub1683 to i64
  %508 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1685 = mul nsw i64 0, %508
  %509 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1686 = add nsw i64 %mul1685, %509
  %mul1687 = mul nsw i64 0, %add1686
  %add1688 = add nsw i64 %mul1687, 1
  %shl1689 = shl i64 %add1688, 62
  %sub1690 = sub nsw i64 %shl1689, 1
  %mul1691 = mul nsw i64 %sub1690, 2
  %add1692 = add nsw i64 %mul1691, 1
  %sub1693 = sub nsw i64 %conv1684, %add1692
  br label %cond.end.1699

cond.false.1694:                                  ; preds = %cond.false.1668
  %510 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1695 = mul nsw i64 0, %510
  %511 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1696 = add nsw i64 %mul1695, %511
  %mul1697 = mul nsw i64 0, %add1696
  %add1698 = add nsw i64 %mul1697, 0
  br label %cond.end.1699

cond.end.1699:                                    ; preds = %cond.false.1694, %cond.true.1675
  %cond1700 = phi i64 [ %sub1693, %cond.true.1675 ], [ %add1698, %cond.false.1694 ]
  %cmp1701 = icmp slt i64 %cond1700, 0
  br i1 %cmp1701, label %cond.true.1703, label %cond.false.1768

cond.true.1703:                                   ; preds = %cond.end.1699
  %512 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1704 = icmp slt i64 %512, 0
  br i1 %cmp1704, label %cond.true.1706, label %cond.false.1742

cond.true.1706:                                   ; preds = %cond.true.1703
  %513 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %514 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1707 = mul nsw i64 0, %514
  %515 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1708 = add nsw i64 %mul1707, %515
  %mul1709 = mul nsw i64 0, %add1708
  %sub1710 = sub nsw i64 %mul1709, 1
  %cmp1711 = icmp slt i64 %sub1710, 0
  br i1 %cmp1711, label %cond.true.1713, label %cond.false.1732

cond.true.1713:                                   ; preds = %cond.true.1706
  %516 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1714 = mul nsw i64 0, %516
  %517 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1715 = add nsw i64 %mul1714, %517
  %mul1716 = mul nsw i64 0, %add1715
  %add1717 = add nsw i64 %mul1716, 0
  %neg1718 = xor i64 %add1717, -1
  %cmp1719 = icmp eq i64 %neg1718, -1
  %conv1720 = zext i1 %cmp1719 to i32
  %sub1721 = sub nsw i32 0, %conv1720
  %conv1722 = sext i32 %sub1721 to i64
  %518 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1723 = mul nsw i64 0, %518
  %519 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1724 = add nsw i64 %mul1723, %519
  %mul1725 = mul nsw i64 0, %add1724
  %add1726 = add nsw i64 %mul1725, 1
  %shl1727 = shl i64 %add1726, 62
  %sub1728 = sub nsw i64 %shl1727, 1
  %mul1729 = mul nsw i64 %sub1728, 2
  %add1730 = add nsw i64 %mul1729, 1
  %sub1731 = sub nsw i64 %conv1722, %add1730
  br label %cond.end.1737

cond.false.1732:                                  ; preds = %cond.true.1706
  %520 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1733 = mul nsw i64 0, %520
  %521 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1734 = add nsw i64 %mul1733, %521
  %mul1735 = mul nsw i64 0, %add1734
  %add1736 = add nsw i64 %mul1735, 0
  br label %cond.end.1737

cond.end.1737:                                    ; preds = %cond.false.1732, %cond.true.1713
  %cond1738 = phi i64 [ %sub1731, %cond.true.1713 ], [ %add1736, %cond.false.1732 ]
  %522 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1739 = sub nsw i64 %cond1738, %522
  %cmp1740 = icmp slt i64 %513, %sub1739
  br i1 %cmp1740, label %cond.true.1800, label %lor.lhs.false.1786

cond.false.1742:                                  ; preds = %cond.true.1703
  %523 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1743 = mul nsw i64 0, %523
  %524 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1744 = add nsw i64 %mul1743, %524
  %mul1745 = mul nsw i64 0, %add1744
  %sub1746 = sub nsw i64 %mul1745, 1
  %cmp1747 = icmp slt i64 %sub1746, 0
  br i1 %cmp1747, label %cond.true.1749, label %cond.false.1758

cond.true.1749:                                   ; preds = %cond.false.1742
  %525 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1750 = mul nsw i64 0, %525
  %526 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1751 = add nsw i64 %mul1750, %526
  %mul1752 = mul nsw i64 0, %add1751
  %add1753 = add nsw i64 %mul1752, 1
  %shl1754 = shl i64 %add1753, 62
  %sub1755 = sub nsw i64 %shl1754, 1
  %mul1756 = mul nsw i64 %sub1755, 2
  %add1757 = add nsw i64 %mul1756, 1
  br label %cond.end.1763

cond.false.1758:                                  ; preds = %cond.false.1742
  %527 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1759 = mul nsw i64 0, %527
  %528 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1760 = add nsw i64 %mul1759, %528
  %mul1761 = mul nsw i64 0, %add1760
  %sub1762 = sub nsw i64 %mul1761, 1
  br label %cond.end.1763

cond.end.1763:                                    ; preds = %cond.false.1758, %cond.true.1749
  %cond1764 = phi i64 [ %add1757, %cond.true.1749 ], [ %sub1762, %cond.false.1758 ]
  %529 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1765 = sub nsw i64 %cond1764, %529
  %530 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1766 = icmp slt i64 %sub1765, %530
  br i1 %cmp1766, label %cond.true.1800, label %lor.lhs.false.1786

cond.false.1768:                                  ; preds = %cond.end.1699
  %531 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1769 = icmp slt i64 %531, 0
  br i1 %cmp1769, label %cond.true.1771, label %cond.false.1775

cond.true.1771:                                   ; preds = %cond.false.1768
  %532 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %533 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %534 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1772 = add nsw i64 %533, %534
  %cmp1773 = icmp sle i64 %532, %add1772
  br i1 %cmp1773, label %cond.true.1800, label %lor.lhs.false.1786

cond.false.1775:                                  ; preds = %cond.false.1768
  %535 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1776 = icmp slt i64 %535, 0
  br i1 %cmp1776, label %cond.true.1778, label %cond.false.1782

cond.true.1778:                                   ; preds = %cond.false.1775
  %536 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %537 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %538 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1779 = add nsw i64 %537, %538
  %cmp1780 = icmp sle i64 %536, %add1779
  br i1 %cmp1780, label %cond.true.1800, label %lor.lhs.false.1786

cond.false.1782:                                  ; preds = %cond.false.1775
  %539 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %540 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1783 = add nsw i64 %539, %540
  %541 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1784 = icmp slt i64 %add1783, %541
  br i1 %cmp1784, label %cond.true.1800, label %lor.lhs.false.1786

lor.lhs.false.1786:                               ; preds = %cond.false.1782, %cond.true.1778, %cond.true.1771, %cond.end.1763, %cond.end.1737
  %542 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %543 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1787 = add nsw i64 %542, %543
  %mul1788 = mul nsw i64 0, %add1787
  %sub1789 = sub nsw i64 %mul1788, 1
  %cmp1790 = icmp slt i64 %sub1789, 0
  br i1 %cmp1790, label %land.lhs.true.1792, label %lor.lhs.false.1796

land.lhs.true.1792:                               ; preds = %lor.lhs.false.1786
  %544 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %545 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1793 = add nsw i64 %544, %545
  %cmp1794 = icmp slt i64 %add1793, -9223372036854775808
  br i1 %cmp1794, label %cond.true.1800, label %lor.lhs.false.1796

lor.lhs.false.1796:                               ; preds = %land.lhs.true.1792, %lor.lhs.false.1786
  %546 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %547 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1797 = add nsw i64 %546, %547
  %cmp1798 = icmp slt i64 9223372036854775807, %add1797
  br i1 %cmp1798, label %cond.true.1800, label %cond.false.1812

cond.true.1800:                                   ; preds = %lor.lhs.false.1796, %land.lhs.true.1792, %cond.false.1782, %cond.true.1778, %cond.true.1771, %cond.end.1763, %cond.end.1737
  %548 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %549 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1801 = add i64 %548, %549
  %cmp1802 = icmp ule i64 %add1801, 9223372036854775807
  br i1 %cmp1802, label %cond.true.1804, label %cond.false.1806

cond.true.1804:                                   ; preds = %cond.true.1800
  %550 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %551 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1805 = add i64 %550, %551
  br label %cond.end.1810

cond.false.1806:                                  ; preds = %cond.true.1800
  %552 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %553 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1807 = add i64 %552, %553
  %sub1808 = sub i64 %add1807, -9223372036854775808
  %add1809 = add nsw i64 %sub1808, -9223372036854775808
  br label %cond.end.1810

cond.end.1810:                                    ; preds = %cond.false.1806, %cond.true.1804
  %cond1811 = phi i64 [ %add1805, %cond.true.1804 ], [ %add1809, %cond.false.1806 ]
  store i64 %cond1811, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1812:                                  ; preds = %lor.lhs.false.1796
  %554 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %555 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1813 = add i64 %554, %555
  %cmp1814 = icmp ule i64 %add1813, 9223372036854775807
  br i1 %cmp1814, label %cond.true.1816, label %cond.false.1818

cond.true.1816:                                   ; preds = %cond.false.1812
  %556 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %557 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1817 = add i64 %556, %557
  br label %cond.end.1822

cond.false.1818:                                  ; preds = %cond.false.1812
  %558 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %559 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1819 = add i64 %558, %559
  %sub1820 = sub i64 %add1819, -9223372036854775808
  %add1821 = add nsw i64 %sub1820, -9223372036854775808
  br label %cond.end.1822

cond.end.1822:                                    ; preds = %cond.false.1818, %cond.true.1816
  %cond1823 = phi i64 [ %add1817, %cond.true.1816 ], [ %add1821, %cond.false.1818 ]
  store i64 %cond1823, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1824:                                  ; preds = %cond.false.1510
  br i1 false, label %cond.true.1825, label %cond.false.1981

cond.true.1825:                                   ; preds = %cond.false.1824
  %560 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1826 = mul nsw i64 0, %560
  %561 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1827 = add nsw i64 %mul1826, %561
  %mul1828 = mul nsw i64 0, %add1827
  %sub1829 = sub nsw i64 %mul1828, 1
  %cmp1830 = icmp slt i64 %sub1829, 0
  br i1 %cmp1830, label %cond.true.1832, label %cond.false.1851

cond.true.1832:                                   ; preds = %cond.true.1825
  %562 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1833 = mul nsw i64 0, %562
  %563 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1834 = add nsw i64 %mul1833, %563
  %mul1835 = mul nsw i64 0, %add1834
  %add1836 = add nsw i64 %mul1835, 0
  %neg1837 = xor i64 %add1836, -1
  %cmp1838 = icmp eq i64 %neg1837, -1
  %conv1839 = zext i1 %cmp1838 to i32
  %sub1840 = sub nsw i32 0, %conv1839
  %conv1841 = sext i32 %sub1840 to i64
  %564 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1842 = mul nsw i64 0, %564
  %565 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1843 = add nsw i64 %mul1842, %565
  %mul1844 = mul nsw i64 0, %add1843
  %add1845 = add nsw i64 %mul1844, 1
  %shl1846 = shl i64 %add1845, 62
  %sub1847 = sub nsw i64 %shl1846, 1
  %mul1848 = mul nsw i64 %sub1847, 2
  %add1849 = add nsw i64 %mul1848, 1
  %sub1850 = sub nsw i64 %conv1841, %add1849
  br label %cond.end.1856

cond.false.1851:                                  ; preds = %cond.true.1825
  %566 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1852 = mul nsw i64 0, %566
  %567 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1853 = add nsw i64 %mul1852, %567
  %mul1854 = mul nsw i64 0, %add1853
  %add1855 = add nsw i64 %mul1854, 0
  br label %cond.end.1856

cond.end.1856:                                    ; preds = %cond.false.1851, %cond.true.1832
  %cond1857 = phi i64 [ %sub1850, %cond.true.1832 ], [ %add1855, %cond.false.1851 ]
  %cmp1858 = icmp slt i64 %cond1857, 0
  br i1 %cmp1858, label %cond.true.1860, label %cond.false.1925

cond.true.1860:                                   ; preds = %cond.end.1856
  %568 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1861 = icmp slt i64 %568, 0
  br i1 %cmp1861, label %cond.true.1863, label %cond.false.1899

cond.true.1863:                                   ; preds = %cond.true.1860
  %569 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %570 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1864 = mul nsw i64 0, %570
  %571 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1865 = add nsw i64 %mul1864, %571
  %mul1866 = mul nsw i64 0, %add1865
  %sub1867 = sub nsw i64 %mul1866, 1
  %cmp1868 = icmp slt i64 %sub1867, 0
  br i1 %cmp1868, label %cond.true.1870, label %cond.false.1889

cond.true.1870:                                   ; preds = %cond.true.1863
  %572 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1871 = mul nsw i64 0, %572
  %573 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1872 = add nsw i64 %mul1871, %573
  %mul1873 = mul nsw i64 0, %add1872
  %add1874 = add nsw i64 %mul1873, 0
  %neg1875 = xor i64 %add1874, -1
  %cmp1876 = icmp eq i64 %neg1875, -1
  %conv1877 = zext i1 %cmp1876 to i32
  %sub1878 = sub nsw i32 0, %conv1877
  %conv1879 = sext i32 %sub1878 to i64
  %574 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1880 = mul nsw i64 0, %574
  %575 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1881 = add nsw i64 %mul1880, %575
  %mul1882 = mul nsw i64 0, %add1881
  %add1883 = add nsw i64 %mul1882, 1
  %shl1884 = shl i64 %add1883, 62
  %sub1885 = sub nsw i64 %shl1884, 1
  %mul1886 = mul nsw i64 %sub1885, 2
  %add1887 = add nsw i64 %mul1886, 1
  %sub1888 = sub nsw i64 %conv1879, %add1887
  br label %cond.end.1894

cond.false.1889:                                  ; preds = %cond.true.1863
  %576 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1890 = mul nsw i64 0, %576
  %577 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1891 = add nsw i64 %mul1890, %577
  %mul1892 = mul nsw i64 0, %add1891
  %add1893 = add nsw i64 %mul1892, 0
  br label %cond.end.1894

cond.end.1894:                                    ; preds = %cond.false.1889, %cond.true.1870
  %cond1895 = phi i64 [ %sub1888, %cond.true.1870 ], [ %add1893, %cond.false.1889 ]
  %578 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1896 = sub nsw i64 %cond1895, %578
  %cmp1897 = icmp slt i64 %569, %sub1896
  br i1 %cmp1897, label %cond.true.1957, label %lor.lhs.false.1943

cond.false.1899:                                  ; preds = %cond.true.1860
  %579 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1900 = mul nsw i64 0, %579
  %580 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1901 = add nsw i64 %mul1900, %580
  %mul1902 = mul nsw i64 0, %add1901
  %sub1903 = sub nsw i64 %mul1902, 1
  %cmp1904 = icmp slt i64 %sub1903, 0
  br i1 %cmp1904, label %cond.true.1906, label %cond.false.1915

cond.true.1906:                                   ; preds = %cond.false.1899
  %581 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1907 = mul nsw i64 0, %581
  %582 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1908 = add nsw i64 %mul1907, %582
  %mul1909 = mul nsw i64 0, %add1908
  %add1910 = add nsw i64 %mul1909, 1
  %shl1911 = shl i64 %add1910, 62
  %sub1912 = sub nsw i64 %shl1911, 1
  %mul1913 = mul nsw i64 %sub1912, 2
  %add1914 = add nsw i64 %mul1913, 1
  br label %cond.end.1920

cond.false.1915:                                  ; preds = %cond.false.1899
  %583 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1916 = mul nsw i64 0, %583
  %584 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1917 = add nsw i64 %mul1916, %584
  %mul1918 = mul nsw i64 0, %add1917
  %sub1919 = sub nsw i64 %mul1918, 1
  br label %cond.end.1920

cond.end.1920:                                    ; preds = %cond.false.1915, %cond.true.1906
  %cond1921 = phi i64 [ %add1914, %cond.true.1906 ], [ %sub1919, %cond.false.1915 ]
  %585 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub1922 = sub nsw i64 %cond1921, %585
  %586 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1923 = icmp slt i64 %sub1922, %586
  br i1 %cmp1923, label %cond.true.1957, label %lor.lhs.false.1943

cond.false.1925:                                  ; preds = %cond.end.1856
  %587 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp1926 = icmp slt i64 %587, 0
  br i1 %cmp1926, label %cond.true.1928, label %cond.false.1932

cond.true.1928:                                   ; preds = %cond.false.1925
  %588 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %589 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %590 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1929 = add nsw i64 %589, %590
  %cmp1930 = icmp sle i64 %588, %add1929
  br i1 %cmp1930, label %cond.true.1957, label %lor.lhs.false.1943

cond.false.1932:                                  ; preds = %cond.false.1925
  %591 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1933 = icmp slt i64 %591, 0
  br i1 %cmp1933, label %cond.true.1935, label %cond.false.1939

cond.true.1935:                                   ; preds = %cond.false.1932
  %592 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %593 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %594 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1936 = add nsw i64 %593, %594
  %cmp1937 = icmp sle i64 %592, %add1936
  br i1 %cmp1937, label %cond.true.1957, label %lor.lhs.false.1943

cond.false.1939:                                  ; preds = %cond.false.1932
  %595 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %596 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1940 = add nsw i64 %595, %596
  %597 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp1941 = icmp slt i64 %add1940, %597
  br i1 %cmp1941, label %cond.true.1957, label %lor.lhs.false.1943

lor.lhs.false.1943:                               ; preds = %cond.false.1939, %cond.true.1935, %cond.true.1928, %cond.end.1920, %cond.end.1894
  %598 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %599 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1944 = add nsw i64 %598, %599
  %mul1945 = mul nsw i64 0, %add1944
  %sub1946 = sub nsw i64 %mul1945, 1
  %cmp1947 = icmp slt i64 %sub1946, 0
  br i1 %cmp1947, label %land.lhs.true.1949, label %lor.lhs.false.1953

land.lhs.true.1949:                               ; preds = %lor.lhs.false.1943
  %600 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %601 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1950 = add nsw i64 %600, %601
  %cmp1951 = icmp slt i64 %add1950, -9223372036854775808
  br i1 %cmp1951, label %cond.true.1957, label %lor.lhs.false.1953

lor.lhs.false.1953:                               ; preds = %land.lhs.true.1949, %lor.lhs.false.1943
  %602 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %603 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1954 = add nsw i64 %602, %603
  %cmp1955 = icmp slt i64 9223372036854775807, %add1954
  br i1 %cmp1955, label %cond.true.1957, label %cond.false.1969

cond.true.1957:                                   ; preds = %lor.lhs.false.1953, %land.lhs.true.1949, %cond.false.1939, %cond.true.1935, %cond.true.1928, %cond.end.1920, %cond.end.1894
  %604 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %605 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1958 = add i64 %604, %605
  %cmp1959 = icmp ule i64 %add1958, 9223372036854775807
  br i1 %cmp1959, label %cond.true.1961, label %cond.false.1963

cond.true.1961:                                   ; preds = %cond.true.1957
  %606 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %607 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1962 = add i64 %606, %607
  br label %cond.end.1967

cond.false.1963:                                  ; preds = %cond.true.1957
  %608 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %609 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1964 = add i64 %608, %609
  %sub1965 = sub i64 %add1964, -9223372036854775808
  %add1966 = add nsw i64 %sub1965, -9223372036854775808
  br label %cond.end.1967

cond.end.1967:                                    ; preds = %cond.false.1963, %cond.true.1961
  %cond1968 = phi i64 [ %add1962, %cond.true.1961 ], [ %add1966, %cond.false.1963 ]
  store i64 %cond1968, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.1969:                                  ; preds = %lor.lhs.false.1953
  %610 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %611 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1970 = add i64 %610, %611
  %cmp1971 = icmp ule i64 %add1970, 9223372036854775807
  br i1 %cmp1971, label %cond.true.1973, label %cond.false.1975

cond.true.1973:                                   ; preds = %cond.false.1969
  %612 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %613 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1974 = add i64 %612, %613
  br label %cond.end.1979

cond.false.1975:                                  ; preds = %cond.false.1969
  %614 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %615 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add1976 = add i64 %614, %615
  %sub1977 = sub i64 %add1976, -9223372036854775808
  %add1978 = add nsw i64 %sub1977, -9223372036854775808
  br label %cond.end.1979

cond.end.1979:                                    ; preds = %cond.false.1975, %cond.true.1973
  %cond1980 = phi i64 [ %add1974, %cond.true.1973 ], [ %add1978, %cond.false.1975 ]
  store i64 %cond1980, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

cond.false.1981:                                  ; preds = %cond.false.1824
  %616 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1982 = mul nsw i64 0, %616
  %617 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1983 = add nsw i64 %mul1982, %617
  %mul1984 = mul nsw i64 0, %add1983
  %sub1985 = sub nsw i64 %mul1984, 1
  %cmp1986 = icmp slt i64 %sub1985, 0
  br i1 %cmp1986, label %cond.true.1988, label %cond.false.2007

cond.true.1988:                                   ; preds = %cond.false.1981
  %618 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1989 = mul nsw i64 0, %618
  %619 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1990 = add nsw i64 %mul1989, %619
  %mul1991 = mul nsw i64 0, %add1990
  %add1992 = add nsw i64 %mul1991, 0
  %neg1993 = xor i64 %add1992, -1
  %cmp1994 = icmp eq i64 %neg1993, -1
  %conv1995 = zext i1 %cmp1994 to i32
  %sub1996 = sub nsw i32 0, %conv1995
  %conv1997 = sext i32 %sub1996 to i64
  %620 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul1998 = mul nsw i64 0, %620
  %621 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add1999 = add nsw i64 %mul1998, %621
  %mul2000 = mul nsw i64 0, %add1999
  %add2001 = add nsw i64 %mul2000, 1
  %shl2002 = shl i64 %add2001, 62
  %sub2003 = sub nsw i64 %shl2002, 1
  %mul2004 = mul nsw i64 %sub2003, 2
  %add2005 = add nsw i64 %mul2004, 1
  %sub2006 = sub nsw i64 %conv1997, %add2005
  br label %cond.end.2012

cond.false.2007:                                  ; preds = %cond.false.1981
  %622 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2008 = mul nsw i64 0, %622
  %623 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2009 = add nsw i64 %mul2008, %623
  %mul2010 = mul nsw i64 0, %add2009
  %add2011 = add nsw i64 %mul2010, 0
  br label %cond.end.2012

cond.end.2012:                                    ; preds = %cond.false.2007, %cond.true.1988
  %cond2013 = phi i64 [ %sub2006, %cond.true.1988 ], [ %add2011, %cond.false.2007 ]
  %cmp2014 = icmp slt i64 %cond2013, 0
  br i1 %cmp2014, label %cond.true.2016, label %cond.false.2081

cond.true.2016:                                   ; preds = %cond.end.2012
  %624 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp2017 = icmp slt i64 %624, 0
  br i1 %cmp2017, label %cond.true.2019, label %cond.false.2055

cond.true.2019:                                   ; preds = %cond.true.2016
  %625 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %626 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2020 = mul nsw i64 0, %626
  %627 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2021 = add nsw i64 %mul2020, %627
  %mul2022 = mul nsw i64 0, %add2021
  %sub2023 = sub nsw i64 %mul2022, 1
  %cmp2024 = icmp slt i64 %sub2023, 0
  br i1 %cmp2024, label %cond.true.2026, label %cond.false.2045

cond.true.2026:                                   ; preds = %cond.true.2019
  %628 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2027 = mul nsw i64 0, %628
  %629 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2028 = add nsw i64 %mul2027, %629
  %mul2029 = mul nsw i64 0, %add2028
  %add2030 = add nsw i64 %mul2029, 0
  %neg2031 = xor i64 %add2030, -1
  %cmp2032 = icmp eq i64 %neg2031, -1
  %conv2033 = zext i1 %cmp2032 to i32
  %sub2034 = sub nsw i32 0, %conv2033
  %conv2035 = sext i32 %sub2034 to i64
  %630 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2036 = mul nsw i64 0, %630
  %631 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2037 = add nsw i64 %mul2036, %631
  %mul2038 = mul nsw i64 0, %add2037
  %add2039 = add nsw i64 %mul2038, 1
  %shl2040 = shl i64 %add2039, 62
  %sub2041 = sub nsw i64 %shl2040, 1
  %mul2042 = mul nsw i64 %sub2041, 2
  %add2043 = add nsw i64 %mul2042, 1
  %sub2044 = sub nsw i64 %conv2035, %add2043
  br label %cond.end.2050

cond.false.2045:                                  ; preds = %cond.true.2019
  %632 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2046 = mul nsw i64 0, %632
  %633 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2047 = add nsw i64 %mul2046, %633
  %mul2048 = mul nsw i64 0, %add2047
  %add2049 = add nsw i64 %mul2048, 0
  br label %cond.end.2050

cond.end.2050:                                    ; preds = %cond.false.2045, %cond.true.2026
  %cond2051 = phi i64 [ %sub2044, %cond.true.2026 ], [ %add2049, %cond.false.2045 ]
  %634 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub2052 = sub nsw i64 %cond2051, %634
  %cmp2053 = icmp slt i64 %625, %sub2052
  br i1 %cmp2053, label %cond.true.2113, label %lor.lhs.false.2099

cond.false.2055:                                  ; preds = %cond.true.2016
  %635 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2056 = mul nsw i64 0, %635
  %636 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2057 = add nsw i64 %mul2056, %636
  %mul2058 = mul nsw i64 0, %add2057
  %sub2059 = sub nsw i64 %mul2058, 1
  %cmp2060 = icmp slt i64 %sub2059, 0
  br i1 %cmp2060, label %cond.true.2062, label %cond.false.2071

cond.true.2062:                                   ; preds = %cond.false.2055
  %637 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2063 = mul nsw i64 0, %637
  %638 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2064 = add nsw i64 %mul2063, %638
  %mul2065 = mul nsw i64 0, %add2064
  %add2066 = add nsw i64 %mul2065, 1
  %shl2067 = shl i64 %add2066, 62
  %sub2068 = sub nsw i64 %shl2067, 1
  %mul2069 = mul nsw i64 %sub2068, 2
  %add2070 = add nsw i64 %mul2069, 1
  br label %cond.end.2076

cond.false.2071:                                  ; preds = %cond.false.2055
  %639 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %mul2072 = mul nsw i64 0, %639
  %640 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %add2073 = add nsw i64 %mul2072, %640
  %mul2074 = mul nsw i64 0, %add2073
  %sub2075 = sub nsw i64 %mul2074, 1
  br label %cond.end.2076

cond.end.2076:                                    ; preds = %cond.false.2071, %cond.true.2062
  %cond2077 = phi i64 [ %add2070, %cond.true.2062 ], [ %sub2075, %cond.false.2071 ]
  %641 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %sub2078 = sub nsw i64 %cond2077, %641
  %642 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp2079 = icmp slt i64 %sub2078, %642
  br i1 %cmp2079, label %cond.true.2113, label %lor.lhs.false.2099

cond.false.2081:                                  ; preds = %cond.end.2012
  %643 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %cmp2082 = icmp slt i64 %643, 0
  br i1 %cmp2082, label %cond.true.2084, label %cond.false.2088

cond.true.2084:                                   ; preds = %cond.false.2081
  %644 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %645 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %646 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2085 = add nsw i64 %645, %646
  %cmp2086 = icmp sle i64 %644, %add2085
  br i1 %cmp2086, label %cond.true.2113, label %lor.lhs.false.2099

cond.false.2088:                                  ; preds = %cond.false.2081
  %647 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp2089 = icmp slt i64 %647, 0
  br i1 %cmp2089, label %cond.true.2091, label %cond.false.2095

cond.true.2091:                                   ; preds = %cond.false.2088
  %648 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %649 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %650 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2092 = add nsw i64 %649, %650
  %cmp2093 = icmp sle i64 %648, %add2092
  br i1 %cmp2093, label %cond.true.2113, label %lor.lhs.false.2099

cond.false.2095:                                  ; preds = %cond.false.2088
  %651 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %652 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2096 = add nsw i64 %651, %652
  %653 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %cmp2097 = icmp slt i64 %add2096, %653
  br i1 %cmp2097, label %cond.true.2113, label %lor.lhs.false.2099

lor.lhs.false.2099:                               ; preds = %cond.false.2095, %cond.true.2091, %cond.true.2084, %cond.end.2076, %cond.end.2050
  %654 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %655 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2100 = add nsw i64 %654, %655
  %mul2101 = mul nsw i64 0, %add2100
  %sub2102 = sub nsw i64 %mul2101, 1
  %cmp2103 = icmp slt i64 %sub2102, 0
  br i1 %cmp2103, label %land.lhs.true.2105, label %lor.lhs.false.2109

land.lhs.true.2105:                               ; preds = %lor.lhs.false.2099
  %656 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %657 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2106 = add nsw i64 %656, %657
  %cmp2107 = icmp slt i64 %add2106, -9223372036854775808
  br i1 %cmp2107, label %cond.true.2113, label %lor.lhs.false.2109

lor.lhs.false.2109:                               ; preds = %land.lhs.true.2105, %lor.lhs.false.2099
  %658 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %659 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2110 = add nsw i64 %658, %659
  %cmp2111 = icmp slt i64 9223372036854775807, %add2110
  br i1 %cmp2111, label %cond.true.2113, label %cond.false.2125

cond.true.2113:                                   ; preds = %lor.lhs.false.2109, %land.lhs.true.2105, %cond.false.2095, %cond.true.2091, %cond.true.2084, %cond.end.2076, %cond.end.2050
  %660 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %661 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2114 = add i64 %660, %661
  %cmp2115 = icmp ule i64 %add2114, 9223372036854775807
  br i1 %cmp2115, label %cond.true.2117, label %cond.false.2119

cond.true.2117:                                   ; preds = %cond.true.2113
  %662 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %663 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2118 = add i64 %662, %663
  br label %cond.end.2123

cond.false.2119:                                  ; preds = %cond.true.2113
  %664 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %665 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2120 = add i64 %664, %665
  %sub2121 = sub i64 %add2120, -9223372036854775808
  %add2122 = add nsw i64 %sub2121, -9223372036854775808
  br label %cond.end.2123

cond.end.2123:                                    ; preds = %cond.false.2119, %cond.true.2117
  %cond2124 = phi i64 [ %add2118, %cond.true.2117 ], [ %add2122, %cond.false.2119 ]
  store i64 %cond2124, i64* %total, align 8
  br i1 true, label %if.then.2137, label %if.end.2138

cond.false.2125:                                  ; preds = %lor.lhs.false.2109
  %666 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %667 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2126 = add i64 %666, %667
  %cmp2127 = icmp ule i64 %add2126, 9223372036854775807
  br i1 %cmp2127, label %cond.true.2129, label %cond.false.2131

cond.true.2129:                                   ; preds = %cond.false.2125
  %668 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %669 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2130 = add i64 %668, %669
  br label %cond.end.2135

cond.false.2131:                                  ; preds = %cond.false.2125
  %670 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 3), align 8
  %671 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 3), align 8
  %add2132 = add i64 %670, %671
  %sub2133 = sub i64 %add2132, -9223372036854775808
  %add2134 = add nsw i64 %sub2133, -9223372036854775808
  br label %cond.end.2135

cond.end.2135:                                    ; preds = %cond.false.2131, %cond.true.2129
  %cond2136 = phi i64 [ %add2130, %cond.true.2129 ], [ %add2134, %cond.false.2131 ]
  store i64 %cond2136, i64* %total, align 8
  br i1 false, label %if.then.2137, label %if.end.2138

if.then.2137:                                     ; preds = %cond.end.2135, %cond.end.2123, %cond.end.1979, %cond.end.1967, %cond.end.1822, %cond.end.1810, %cond.end.1666, %cond.end.1654, %cond.end.1507, %cond.end.1488, %cond.end.1337, %cond.end.1318, %cond.end.1123, %cond.end.1094, %cond.end.933, %cond.end.904, %cond.end.655, %cond.end.626, %cond.end.465, %cond.end.436
  call void @memory_full(i64 -1) #8
  unreachable

if.end.2138:                                      ; preds = %cond.end.2135, %cond.end.2123, %cond.end.1979, %cond.end.1967, %cond.end.1822, %cond.end.1810, %cond.end.1666, %cond.end.1654, %cond.end.1507, %cond.end.1488, %cond.end.1337, %cond.end.1318, %cond.end.1123, %cond.end.1094, %cond.end.933, %cond.end.904, %cond.end.655, %cond.end.626, %cond.end.465, %cond.end.436
  %672 = load i64, i64* %total, align 8
  %673 = load i64, i64* @overlay_str_len, align 8
  %cmp2139 = icmp sgt i64 %672, %673
  br i1 %cmp2139, label %if.then.2141, label %if.end.2144

if.then.2141:                                     ; preds = %if.end.2138
  %674 = load i8*, i8** @overlay_str_buf, align 8
  %675 = load i64, i64* %total, align 8
  %676 = load i64, i64* @overlay_str_len, align 8
  %sub2142 = sub nsw i64 %675, %676
  %call2143 = call i8* @xpalloc(i8* %674, i64* @overlay_str_len, i64 %sub2142, i64 -1, i64 1)
  store i8* %call2143, i8** @overlay_str_buf, align 8
  br label %if.end.2144

if.end.2144:                                      ; preds = %if.then.2141, %if.end.2138
  %677 = load i8*, i8** @overlay_str_buf, align 8
  store i8* %677, i8** %p, align 8
  %678 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 2), align 8
  store i64 %678, i64* %i, align 8
  br label %for.cond.2145

for.cond.2145:                                    ; preds = %for.body.2148, %if.end.2144
  %679 = load i64, i64* %i, align 8
  %dec = add nsw i64 %679, -1
  store i64 %dec, i64* %i, align 8
  %cmp2146 = icmp sge i64 %dec, 0
  br i1 %cmp2146, label %for.body.2148, label %for.end.2154

for.body.2148:                                    ; preds = %for.cond.2145
  %680 = load i64, i64* %i, align 8
  %681 = load %struct.sortstr*, %struct.sortstr** getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_tails, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds %struct.sortstr, %struct.sortstr* %681, i64 %680
  %string = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx, i32 0, i32 0
  %682 = load i64, i64* %string, align 8
  store i64 %682, i64* %tem, align 8
  %683 = load i64, i64* %tem, align 8
  %call2149 = call i8* @SDATA(i64 %683)
  %684 = load i8*, i8** %p, align 8
  %685 = load i64, i64* %tem, align 8
  %call2150 = call i64 @SBYTES(i64 %685)
  %686 = load i64, i64* %tem, align 8
  %call2151 = call zeroext i1 @STRING_MULTIBYTE(i64 %686)
  %687 = load i8, i8* %multibyte, align 1
  %tobool2152 = trunc i8 %687 to i1
  %call2153 = call i64 @copy_text(i8* %call2149, i8* %684, i64 %call2150, i1 zeroext %call2151, i1 zeroext %tobool2152)
  store i64 %call2153, i64* %nbytes, align 8
  %688 = load i64, i64* %nbytes, align 8
  %689 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %689, i64 %688
  store i8* %add.ptr, i8** %p, align 8
  br label %for.cond.2145

for.end.2154:                                     ; preds = %for.cond.2145
  store i64 0, i64* %i, align 8
  br label %for.cond.2155

for.cond.2155:                                    ; preds = %for.inc.2178, %for.end.2154
  %690 = load i64, i64* %i, align 8
  %691 = load i64, i64* getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 2), align 8
  %cmp2156 = icmp slt i64 %690, %691
  br i1 %cmp2156, label %for.body.2158, label %for.end.2179

for.body.2158:                                    ; preds = %for.cond.2155
  %692 = load i64, i64* %i, align 8
  %693 = load %struct.sortstr*, %struct.sortstr** getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 0), align 8
  %arrayidx2160 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %693, i64 %692
  %string2161 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx2160, i32 0, i32 0
  %694 = load i64, i64* %string2161, align 8
  store i64 %694, i64* %tem, align 8
  %695 = load i64, i64* %tem, align 8
  %call2162 = call i8* @SDATA(i64 %695)
  %696 = load i8*, i8** %p, align 8
  %697 = load i64, i64* %tem, align 8
  %call2163 = call i64 @SBYTES(i64 %697)
  %698 = load i64, i64* %tem, align 8
  %call2164 = call zeroext i1 @STRING_MULTIBYTE(i64 %698)
  %699 = load i8, i8* %multibyte, align 1
  %tobool2165 = trunc i8 %699 to i1
  %call2166 = call i64 @copy_text(i8* %call2162, i8* %696, i64 %call2163, i1 zeroext %call2164, i1 zeroext %tobool2165)
  store i64 %call2166, i64* %nbytes2159, align 8
  %700 = load i64, i64* %nbytes2159, align 8
  %701 = load i8*, i8** %p, align 8
  %add.ptr2167 = getelementptr inbounds i8, i8* %701, i64 %700
  store i8* %add.ptr2167, i8** %p, align 8
  %702 = load i64, i64* %i, align 8
  %703 = load %struct.sortstr*, %struct.sortstr** getelementptr inbounds (%struct.sortstrlist, %struct.sortstrlist* @overlay_heads, i32 0, i32 0), align 8
  %arrayidx2168 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %703, i64 %702
  %string2 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx2168, i32 0, i32 1
  %704 = load i64, i64* %string2, align 8
  store i64 %704, i64* %tem, align 8
  %705 = load i64, i64* %tem, align 8
  %call2169 = call zeroext i1 @STRINGP(i64 %705)
  br i1 %call2169, label %if.then.2170, label %if.end.2177

if.then.2170:                                     ; preds = %for.body.2158
  %706 = load i64, i64* %tem, align 8
  %call2171 = call i8* @SDATA(i64 %706)
  %707 = load i8*, i8** %p, align 8
  %708 = load i64, i64* %tem, align 8
  %call2172 = call i64 @SBYTES(i64 %708)
  %709 = load i64, i64* %tem, align 8
  %call2173 = call zeroext i1 @STRING_MULTIBYTE(i64 %709)
  %710 = load i8, i8* %multibyte, align 1
  %tobool2174 = trunc i8 %710 to i1
  %call2175 = call i64 @copy_text(i8* %call2171, i8* %707, i64 %call2172, i1 zeroext %call2173, i1 zeroext %tobool2174)
  store i64 %call2175, i64* %nbytes2159, align 8
  %711 = load i64, i64* %nbytes2159, align 8
  %712 = load i8*, i8** %p, align 8
  %add.ptr2176 = getelementptr inbounds i8, i8* %712, i64 %711
  store i8* %add.ptr2176, i8** %p, align 8
  br label %if.end.2177

if.end.2177:                                      ; preds = %if.then.2170, %for.body.2158
  br label %for.inc.2178

for.inc.2178:                                     ; preds = %if.end.2177
  %713 = load i64, i64* %i, align 8
  %inc = add nsw i64 %713, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond.2155

for.end.2179:                                     ; preds = %for.cond.2155
  %714 = load i8*, i8** %p, align 8
  %715 = load i8*, i8** @overlay_str_buf, align 8
  %716 = load i64, i64* %total, align 8
  %add.ptr2180 = getelementptr inbounds i8, i8* %715, i64 %716
  %cmp2181 = icmp ne i8* %714, %add.ptr2180
  br i1 %cmp2181, label %if.then.2183, label %if.end.2184

if.then.2183:                                     ; preds = %for.end.2179
  call void @emacs_abort() #8
  unreachable

if.end.2184:                                      ; preds = %for.end.2179
  %717 = load i8**, i8*** %pstr.addr, align 8
  %tobool2185 = icmp ne i8** %717, null
  br i1 %tobool2185, label %if.then.2186, label %if.end.2187

if.then.2186:                                     ; preds = %if.end.2184
  %718 = load i8*, i8** @overlay_str_buf, align 8
  %719 = load i8**, i8*** %pstr.addr, align 8
  store i8* %718, i8** %719, align 8
  br label %if.end.2187

if.end.2187:                                      ; preds = %if.then.2186, %if.end.2184
  %720 = load i64, i64* %total, align 8
  store i64 %720, i64* %retval
  br label %return

if.end.2188:                                      ; preds = %lor.lhs.false
  store i64 0, i64* %retval
  br label %return

return:                                           ; preds = %if.end.2188, %if.end.2187
  %721 = load i64, i64* %retval
  ret i64 %721
}

; Function Attrs: nounwind uwtable
define internal void @record_overlay_string(%struct.sortstrlist* %ssl, i64 %str, i64 %str2, i64 %pri, i64 %size) #3 {
entry:
  %ssl.addr = alloca %struct.sortstrlist*, align 8
  %str.addr = alloca i64, align 8
  %str2.addr = alloca i64, align 8
  %pri.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %nbytes = alloca i64, align 8
  store %struct.sortstrlist* %ssl, %struct.sortstrlist** %ssl.addr, align 8
  store i64 %str, i64* %str.addr, align 8
  store i64 %str2, i64* %str2.addr, align 8
  store i64 %pri, i64* %pri.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %0, i32 0, i32 2
  %1 = load i64, i64* %used, align 8
  %2 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %size1 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %2, i32 0, i32 1
  %3 = load i64, i64* %size1, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %4, i32 0, i32 0
  %5 = load %struct.sortstr*, %struct.sortstr** %buf, align 8
  %6 = bitcast %struct.sortstr* %5 to i8*
  %7 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %size2 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %7, i32 0, i32 1
  %call = call i8* @xpalloc(i8* %6, i64* %size2, i64 5, i64 -1, i64 32)
  %8 = bitcast i8* %call to %struct.sortstr*
  %9 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf3 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %9, i32 0, i32 0
  store %struct.sortstr* %8, %struct.sortstr** %buf3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i64, i64* %str.addr, align 8
  %11 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used4 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %11, i32 0, i32 2
  %12 = load i64, i64* %used4, align 8
  %13 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf5 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %13, i32 0, i32 0
  %14 = load %struct.sortstr*, %struct.sortstr** %buf5, align 8
  %arrayidx = getelementptr inbounds %struct.sortstr, %struct.sortstr* %14, i64 %12
  %string = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx, i32 0, i32 0
  store i64 %10, i64* %string, align 8
  %15 = load i64, i64* %str2.addr, align 8
  %16 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used6 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %16, i32 0, i32 2
  %17 = load i64, i64* %used6, align 8
  %18 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf7 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %18, i32 0, i32 0
  %19 = load %struct.sortstr*, %struct.sortstr** %buf7, align 8
  %arrayidx8 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %19, i64 %17
  %string2 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx8, i32 0, i32 1
  store i64 %15, i64* %string2, align 8
  %20 = load i64, i64* %size.addr, align 8
  %21 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used9 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %21, i32 0, i32 2
  %22 = load i64, i64* %used9, align 8
  %23 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf10 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %23, i32 0, i32 0
  %24 = load %struct.sortstr*, %struct.sortstr** %buf10, align 8
  %arrayidx11 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %24, i64 %22
  %size12 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx11, i32 0, i32 2
  store i64 %20, i64* %size12, align 8
  %25 = load i64, i64* %pri.addr, align 8
  %and = and i64 %25, 7
  %conv = trunc i64 %and to i32
  %and13 = and i32 %conv, -5
  %cmp14 = icmp eq i32 %and13, 2
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %26 = load i64, i64* %pri.addr, align 8
  %shr = ashr i64 %26, 2
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr, %cond.true ], [ 0, %cond.false ]
  %27 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used16 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %27, i32 0, i32 2
  %28 = load i64, i64* %used16, align 8
  %29 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %buf17 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %29, i32 0, i32 0
  %30 = load %struct.sortstr*, %struct.sortstr** %buf17, align 8
  %arrayidx18 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %30, i64 %28
  %priority = getelementptr inbounds %struct.sortstr, %struct.sortstr* %arrayidx18, i32 0, i32 3
  store i64 %cond, i64* %priority, align 8
  %31 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %used19 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %31, i32 0, i32 2
  %32 = load i64, i64* %used19, align 8
  %inc = add nsw i64 %32, 1
  store i64 %inc, i64* %used19, align 8
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 39
  %34 = load i64, i64* %enable_multibyte_characters_, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %34, %call20
  br i1 %cmp21, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %cond.end
  %35 = load i64, i64* %str.addr, align 8
  %call24 = call i64 @SCHARS(i64 %35)
  store i64 %call24, i64* %nbytes, align 8
  br label %if.end.33

if.else:                                          ; preds = %cond.end
  %36 = load i64, i64* %str.addr, align 8
  %call25 = call zeroext i1 @STRING_MULTIBYTE(i64 %36)
  br i1 %call25, label %if.else.30, label %if.then.26

if.then.26:                                       ; preds = %if.else
  %37 = load i64, i64* %str.addr, align 8
  %call27 = call i8* @SDATA(i64 %37)
  %38 = load i64, i64* %str.addr, align 8
  %call28 = call i64 @SBYTES(i64 %38)
  %call29 = call i64 @count_size_as_multibyte(i8* %call27, i64 %call28)
  store i64 %call29, i64* %nbytes, align 8
  br label %if.end.32

if.else.30:                                       ; preds = %if.else
  %39 = load i64, i64* %str.addr, align 8
  %call31 = call i64 @SBYTES(i64 %39)
  store i64 %call31, i64* %nbytes, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.26
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.23
  br i1 false, label %cond.true.34, label %cond.false.547

cond.true.34:                                     ; preds = %if.end.33
  br i1 false, label %cond.true.35, label %cond.false.330

cond.true.35:                                     ; preds = %cond.true.34
  %40 = load i64, i64* %nbytes, align 8
  %conv36 = trunc i64 %40 to i8
  %conv37 = sext i8 %conv36 to i32
  %mul = mul nsw i32 0, %conv37
  %41 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %41, i32 0, i32 3
  %42 = load i64, i64* %bytes, align 8
  %conv38 = trunc i64 %42 to i8
  %conv39 = sext i8 %conv38 to i32
  %add = add nsw i32 %mul, %conv39
  %mul40 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul40, 1
  %cmp41 = icmp slt i32 %sub, 0
  br i1 %cmp41, label %cond.true.43, label %cond.false.69

cond.true.43:                                     ; preds = %cond.true.35
  %43 = load i64, i64* %nbytes, align 8
  %conv44 = trunc i64 %43 to i8
  %conv45 = sext i8 %conv44 to i32
  %mul46 = mul nsw i32 0, %conv45
  %44 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes47 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %44, i32 0, i32 3
  %45 = load i64, i64* %bytes47, align 8
  %conv48 = trunc i64 %45 to i8
  %conv49 = sext i8 %conv48 to i32
  %add50 = add nsw i32 %mul46, %conv49
  %mul51 = mul nsw i32 0, %add50
  %add52 = add nsw i32 %mul51, 0
  %neg = xor i32 %add52, -1
  %cmp53 = icmp eq i32 %neg, -1
  %conv54 = zext i1 %cmp53 to i32
  %sub55 = sub nsw i32 0, %conv54
  %46 = load i64, i64* %nbytes, align 8
  %conv56 = trunc i64 %46 to i8
  %conv57 = sext i8 %conv56 to i32
  %mul58 = mul nsw i32 0, %conv57
  %47 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes59 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %47, i32 0, i32 3
  %48 = load i64, i64* %bytes59, align 8
  %conv60 = trunc i64 %48 to i8
  %conv61 = sext i8 %conv60 to i32
  %add62 = add nsw i32 %mul58, %conv61
  %mul63 = mul nsw i32 0, %add62
  %add64 = add nsw i32 %mul63, 1
  %shl = shl i32 %add64, 30
  %sub65 = sub nsw i32 %shl, 1
  %mul66 = mul nsw i32 %sub65, 2
  %add67 = add nsw i32 %mul66, 1
  %sub68 = sub nsw i32 %sub55, %add67
  br label %cond.end.79

cond.false.69:                                    ; preds = %cond.true.35
  %49 = load i64, i64* %nbytes, align 8
  %conv70 = trunc i64 %49 to i8
  %conv71 = sext i8 %conv70 to i32
  %mul72 = mul nsw i32 0, %conv71
  %50 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes73 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %50, i32 0, i32 3
  %51 = load i64, i64* %bytes73, align 8
  %conv74 = trunc i64 %51 to i8
  %conv75 = sext i8 %conv74 to i32
  %add76 = add nsw i32 %mul72, %conv75
  %mul77 = mul nsw i32 0, %add76
  %add78 = add nsw i32 %mul77, 0
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.false.69, %cond.true.43
  %cond80 = phi i32 [ %sub68, %cond.true.43 ], [ %add78, %cond.false.69 ]
  %cmp81 = icmp slt i32 %cond80, 0
  br i1 %cmp81, label %cond.true.83, label %cond.false.194

cond.true.83:                                     ; preds = %cond.end.79
  %52 = load i64, i64* %nbytes, align 8
  %conv84 = trunc i64 %52 to i8
  %conv85 = sext i8 %conv84 to i32
  %cmp86 = icmp slt i32 %conv85, 0
  br i1 %cmp86, label %cond.true.88, label %cond.false.148

cond.true.88:                                     ; preds = %cond.true.83
  %53 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes89 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %53, i32 0, i32 3
  %54 = load i64, i64* %bytes89, align 8
  %conv90 = trunc i64 %54 to i8
  %conv91 = sext i8 %conv90 to i32
  %55 = load i64, i64* %nbytes, align 8
  %conv92 = trunc i64 %55 to i8
  %conv93 = sext i8 %conv92 to i32
  %mul94 = mul nsw i32 0, %conv93
  %56 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes95 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %56, i32 0, i32 3
  %57 = load i64, i64* %bytes95, align 8
  %conv96 = trunc i64 %57 to i8
  %conv97 = sext i8 %conv96 to i32
  %add98 = add nsw i32 %mul94, %conv97
  %mul99 = mul nsw i32 0, %add98
  %sub100 = sub nsw i32 %mul99, 1
  %cmp101 = icmp slt i32 %sub100, 0
  br i1 %cmp101, label %cond.true.103, label %cond.false.131

cond.true.103:                                    ; preds = %cond.true.88
  %58 = load i64, i64* %nbytes, align 8
  %conv104 = trunc i64 %58 to i8
  %conv105 = sext i8 %conv104 to i32
  %mul106 = mul nsw i32 0, %conv105
  %59 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes107 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %59, i32 0, i32 3
  %60 = load i64, i64* %bytes107, align 8
  %conv108 = trunc i64 %60 to i8
  %conv109 = sext i8 %conv108 to i32
  %add110 = add nsw i32 %mul106, %conv109
  %mul111 = mul nsw i32 0, %add110
  %add112 = add nsw i32 %mul111, 0
  %neg113 = xor i32 %add112, -1
  %cmp114 = icmp eq i32 %neg113, -1
  %conv115 = zext i1 %cmp114 to i32
  %sub116 = sub nsw i32 0, %conv115
  %61 = load i64, i64* %nbytes, align 8
  %conv117 = trunc i64 %61 to i8
  %conv118 = sext i8 %conv117 to i32
  %mul119 = mul nsw i32 0, %conv118
  %62 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes120 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %62, i32 0, i32 3
  %63 = load i64, i64* %bytes120, align 8
  %conv121 = trunc i64 %63 to i8
  %conv122 = sext i8 %conv121 to i32
  %add123 = add nsw i32 %mul119, %conv122
  %mul124 = mul nsw i32 0, %add123
  %add125 = add nsw i32 %mul124, 1
  %shl126 = shl i32 %add125, 30
  %sub127 = sub nsw i32 %shl126, 1
  %mul128 = mul nsw i32 %sub127, 2
  %add129 = add nsw i32 %mul128, 1
  %sub130 = sub nsw i32 %sub116, %add129
  br label %cond.end.141

cond.false.131:                                   ; preds = %cond.true.88
  %64 = load i64, i64* %nbytes, align 8
  %conv132 = trunc i64 %64 to i8
  %conv133 = sext i8 %conv132 to i32
  %mul134 = mul nsw i32 0, %conv133
  %65 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes135 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %65, i32 0, i32 3
  %66 = load i64, i64* %bytes135, align 8
  %conv136 = trunc i64 %66 to i8
  %conv137 = sext i8 %conv136 to i32
  %add138 = add nsw i32 %mul134, %conv137
  %mul139 = mul nsw i32 0, %add138
  %add140 = add nsw i32 %mul139, 0
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.131, %cond.true.103
  %cond142 = phi i32 [ %sub130, %cond.true.103 ], [ %add140, %cond.false.131 ]
  %67 = load i64, i64* %nbytes, align 8
  %conv143 = trunc i64 %67 to i8
  %conv144 = sext i8 %conv143 to i32
  %sub145 = sub nsw i32 %cond142, %conv144
  %cmp146 = icmp slt i32 %conv91, %sub145
  br i1 %cmp146, label %cond.true.266, label %lor.lhs.false

cond.false.148:                                   ; preds = %cond.true.83
  %68 = load i64, i64* %nbytes, align 8
  %conv149 = trunc i64 %68 to i8
  %conv150 = sext i8 %conv149 to i32
  %mul151 = mul nsw i32 0, %conv150
  %69 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes152 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %69, i32 0, i32 3
  %70 = load i64, i64* %bytes152, align 8
  %conv153 = trunc i64 %70 to i8
  %conv154 = sext i8 %conv153 to i32
  %add155 = add nsw i32 %mul151, %conv154
  %mul156 = mul nsw i32 0, %add155
  %sub157 = sub nsw i32 %mul156, 1
  %cmp158 = icmp slt i32 %sub157, 0
  br i1 %cmp158, label %cond.true.160, label %cond.false.174

cond.true.160:                                    ; preds = %cond.false.148
  %71 = load i64, i64* %nbytes, align 8
  %conv161 = trunc i64 %71 to i8
  %conv162 = sext i8 %conv161 to i32
  %mul163 = mul nsw i32 0, %conv162
  %72 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes164 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %72, i32 0, i32 3
  %73 = load i64, i64* %bytes164, align 8
  %conv165 = trunc i64 %73 to i8
  %conv166 = sext i8 %conv165 to i32
  %add167 = add nsw i32 %mul163, %conv166
  %mul168 = mul nsw i32 0, %add167
  %add169 = add nsw i32 %mul168, 1
  %shl170 = shl i32 %add169, 30
  %sub171 = sub nsw i32 %shl170, 1
  %mul172 = mul nsw i32 %sub171, 2
  %add173 = add nsw i32 %mul172, 1
  br label %cond.end.184

cond.false.174:                                   ; preds = %cond.false.148
  %74 = load i64, i64* %nbytes, align 8
  %conv175 = trunc i64 %74 to i8
  %conv176 = sext i8 %conv175 to i32
  %mul177 = mul nsw i32 0, %conv176
  %75 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes178 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %75, i32 0, i32 3
  %76 = load i64, i64* %bytes178, align 8
  %conv179 = trunc i64 %76 to i8
  %conv180 = sext i8 %conv179 to i32
  %add181 = add nsw i32 %mul177, %conv180
  %mul182 = mul nsw i32 0, %add181
  %sub183 = sub nsw i32 %mul182, 1
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.false.174, %cond.true.160
  %cond185 = phi i32 [ %add173, %cond.true.160 ], [ %sub183, %cond.false.174 ]
  %77 = load i64, i64* %nbytes, align 8
  %conv186 = trunc i64 %77 to i8
  %conv187 = sext i8 %conv186 to i32
  %sub188 = sub nsw i32 %cond185, %conv187
  %78 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes189 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %78, i32 0, i32 3
  %79 = load i64, i64* %bytes189, align 8
  %conv190 = trunc i64 %79 to i8
  %conv191 = sext i8 %conv190 to i32
  %cmp192 = icmp slt i32 %sub188, %conv191
  br i1 %cmp192, label %cond.true.266, label %lor.lhs.false

cond.false.194:                                   ; preds = %cond.end.79
  %80 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes195 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %80, i32 0, i32 3
  %81 = load i64, i64* %bytes195, align 8
  %conv196 = trunc i64 %81 to i8
  %conv197 = sext i8 %conv196 to i32
  %cmp198 = icmp slt i32 %conv197, 0
  br i1 %cmp198, label %cond.true.200, label %cond.false.211

cond.true.200:                                    ; preds = %cond.false.194
  %82 = load i64, i64* %nbytes, align 8
  %conv201 = trunc i64 %82 to i8
  %conv202 = sext i8 %conv201 to i32
  %83 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes203 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %83, i32 0, i32 3
  %84 = load i64, i64* %bytes203, align 8
  %conv204 = trunc i64 %84 to i8
  %conv205 = sext i8 %conv204 to i32
  %85 = load i64, i64* %nbytes, align 8
  %conv206 = trunc i64 %85 to i8
  %conv207 = sext i8 %conv206 to i32
  %add208 = add nsw i32 %conv205, %conv207
  %cmp209 = icmp sle i32 %conv202, %add208
  br i1 %cmp209, label %cond.true.266, label %lor.lhs.false

cond.false.211:                                   ; preds = %cond.false.194
  %86 = load i64, i64* %nbytes, align 8
  %conv212 = trunc i64 %86 to i8
  %conv213 = sext i8 %conv212 to i32
  %cmp214 = icmp slt i32 %conv213, 0
  br i1 %cmp214, label %cond.true.216, label %cond.false.228

cond.true.216:                                    ; preds = %cond.false.211
  %87 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes217 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %87, i32 0, i32 3
  %88 = load i64, i64* %bytes217, align 8
  %conv218 = trunc i64 %88 to i8
  %conv219 = sext i8 %conv218 to i32
  %89 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes220 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %89, i32 0, i32 3
  %90 = load i64, i64* %bytes220, align 8
  %conv221 = trunc i64 %90 to i8
  %conv222 = sext i8 %conv221 to i32
  %91 = load i64, i64* %nbytes, align 8
  %conv223 = trunc i64 %91 to i8
  %conv224 = sext i8 %conv223 to i32
  %add225 = add nsw i32 %conv222, %conv224
  %cmp226 = icmp sle i32 %conv219, %add225
  br i1 %cmp226, label %cond.true.266, label %lor.lhs.false

cond.false.228:                                   ; preds = %cond.false.211
  %92 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes229 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %92, i32 0, i32 3
  %93 = load i64, i64* %bytes229, align 8
  %conv230 = trunc i64 %93 to i8
  %conv231 = sext i8 %conv230 to i32
  %94 = load i64, i64* %nbytes, align 8
  %conv232 = trunc i64 %94 to i8
  %conv233 = sext i8 %conv232 to i32
  %add234 = add nsw i32 %conv231, %conv233
  %95 = load i64, i64* %nbytes, align 8
  %conv235 = trunc i64 %95 to i8
  %conv236 = sext i8 %conv235 to i32
  %cmp237 = icmp slt i32 %add234, %conv236
  br i1 %cmp237, label %cond.true.266, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.228, %cond.true.216, %cond.true.200, %cond.end.184, %cond.end.141
  %96 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes239 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %96, i32 0, i32 3
  %97 = load i64, i64* %bytes239, align 8
  %conv240 = trunc i64 %97 to i8
  %conv241 = sext i8 %conv240 to i32
  %98 = load i64, i64* %nbytes, align 8
  %conv242 = trunc i64 %98 to i8
  %conv243 = sext i8 %conv242 to i32
  %add244 = add nsw i32 %conv241, %conv243
  %mul245 = mul nsw i32 0, %add244
  %sub246 = sub nsw i32 %mul245, 1
  %cmp247 = icmp slt i32 %sub246, 0
  br i1 %cmp247, label %land.lhs.true, label %lor.lhs.false.257

land.lhs.true:                                    ; preds = %lor.lhs.false
  %99 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes249 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %99, i32 0, i32 3
  %100 = load i64, i64* %bytes249, align 8
  %conv250 = trunc i64 %100 to i8
  %conv251 = sext i8 %conv250 to i32
  %101 = load i64, i64* %nbytes, align 8
  %conv252 = trunc i64 %101 to i8
  %conv253 = sext i8 %conv252 to i32
  %add254 = add nsw i32 %conv251, %conv253
  %cmp255 = icmp slt i32 %add254, -128
  br i1 %cmp255, label %cond.true.266, label %lor.lhs.false.257

lor.lhs.false.257:                                ; preds = %land.lhs.true, %lor.lhs.false
  %102 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes258 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %102, i32 0, i32 3
  %103 = load i64, i64* %bytes258, align 8
  %conv259 = trunc i64 %103 to i8
  %conv260 = sext i8 %conv259 to i32
  %104 = load i64, i64* %nbytes, align 8
  %conv261 = trunc i64 %104 to i8
  %conv262 = sext i8 %conv261 to i32
  %add263 = add nsw i32 %conv260, %conv262
  %cmp264 = icmp slt i32 127, %add263
  br i1 %cmp264, label %cond.true.266, label %cond.false.298

cond.true.266:                                    ; preds = %lor.lhs.false.257, %land.lhs.true, %cond.false.228, %cond.true.216, %cond.true.200, %cond.end.184, %cond.end.141
  %105 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes267 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %105, i32 0, i32 3
  %106 = load i64, i64* %bytes267, align 8
  %conv268 = trunc i64 %106 to i8
  %conv269 = zext i8 %conv268 to i32
  %107 = load i64, i64* %nbytes, align 8
  %conv270 = trunc i64 %107 to i8
  %conv271 = zext i8 %conv270 to i32
  %add272 = add nsw i32 %conv269, %conv271
  %cmp273 = icmp sle i32 %add272, 127
  br i1 %cmp273, label %cond.true.275, label %cond.false.284

cond.true.275:                                    ; preds = %cond.true.266
  %108 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes276 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %108, i32 0, i32 3
  %109 = load i64, i64* %bytes276, align 8
  %conv277 = trunc i64 %109 to i8
  %conv278 = zext i8 %conv277 to i32
  %110 = load i64, i64* %nbytes, align 8
  %conv279 = trunc i64 %110 to i8
  %conv280 = zext i8 %conv279 to i32
  %add281 = add nsw i32 %conv278, %conv280
  %conv282 = trunc i32 %add281 to i8
  %conv283 = sext i8 %conv282 to i32
  br label %cond.end.295

cond.false.284:                                   ; preds = %cond.true.266
  %111 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes285 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %111, i32 0, i32 3
  %112 = load i64, i64* %bytes285, align 8
  %conv286 = trunc i64 %112 to i8
  %conv287 = zext i8 %conv286 to i32
  %113 = load i64, i64* %nbytes, align 8
  %conv288 = trunc i64 %113 to i8
  %conv289 = zext i8 %conv288 to i32
  %add290 = add nsw i32 %conv287, %conv289
  %sub291 = sub nsw i32 %add290, -128
  %conv292 = trunc i32 %sub291 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 %conv293, -128
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.284, %cond.true.275
  %cond296 = phi i32 [ %conv283, %cond.true.275 ], [ %add294, %cond.false.284 ]
  %conv297 = sext i32 %cond296 to i64
  store i64 %conv297, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.298:                                   ; preds = %lor.lhs.false.257
  %114 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes299 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %114, i32 0, i32 3
  %115 = load i64, i64* %bytes299, align 8
  %conv300 = trunc i64 %115 to i8
  %conv301 = zext i8 %conv300 to i32
  %116 = load i64, i64* %nbytes, align 8
  %conv302 = trunc i64 %116 to i8
  %conv303 = zext i8 %conv302 to i32
  %add304 = add nsw i32 %conv301, %conv303
  %cmp305 = icmp sle i32 %add304, 127
  br i1 %cmp305, label %cond.true.307, label %cond.false.316

cond.true.307:                                    ; preds = %cond.false.298
  %117 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes308 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %117, i32 0, i32 3
  %118 = load i64, i64* %bytes308, align 8
  %conv309 = trunc i64 %118 to i8
  %conv310 = zext i8 %conv309 to i32
  %119 = load i64, i64* %nbytes, align 8
  %conv311 = trunc i64 %119 to i8
  %conv312 = zext i8 %conv311 to i32
  %add313 = add nsw i32 %conv310, %conv312
  %conv314 = trunc i32 %add313 to i8
  %conv315 = sext i8 %conv314 to i32
  br label %cond.end.327

cond.false.316:                                   ; preds = %cond.false.298
  %120 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes317 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %120, i32 0, i32 3
  %121 = load i64, i64* %bytes317, align 8
  %conv318 = trunc i64 %121 to i8
  %conv319 = zext i8 %conv318 to i32
  %122 = load i64, i64* %nbytes, align 8
  %conv320 = trunc i64 %122 to i8
  %conv321 = zext i8 %conv320 to i32
  %add322 = add nsw i32 %conv319, %conv321
  %sub323 = sub nsw i32 %add322, -128
  %conv324 = trunc i32 %sub323 to i8
  %conv325 = sext i8 %conv324 to i32
  %add326 = add nsw i32 %conv325, -128
  br label %cond.end.327

cond.end.327:                                     ; preds = %cond.false.316, %cond.true.307
  %cond328 = phi i32 [ %conv315, %cond.true.307 ], [ %add326, %cond.false.316 ]
  %conv329 = sext i32 %cond328 to i64
  store i64 %conv329, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.330:                                   ; preds = %cond.true.34
  %123 = load i64, i64* %nbytes, align 8
  %mul331 = mul nsw i64 0, %123
  %124 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes332 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %124, i32 0, i32 3
  %125 = load i64, i64* %bytes332, align 8
  %add333 = add nsw i64 %mul331, %125
  %mul334 = mul nsw i64 0, %add333
  %sub335 = sub nsw i64 %mul334, 1
  %cmp336 = icmp slt i64 %sub335, 0
  br i1 %cmp336, label %cond.true.338, label %cond.false.359

cond.true.338:                                    ; preds = %cond.false.330
  %126 = load i64, i64* %nbytes, align 8
  %mul339 = mul nsw i64 0, %126
  %127 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes340 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %127, i32 0, i32 3
  %128 = load i64, i64* %bytes340, align 8
  %add341 = add nsw i64 %mul339, %128
  %mul342 = mul nsw i64 0, %add341
  %add343 = add nsw i64 %mul342, 0
  %neg344 = xor i64 %add343, -1
  %cmp345 = icmp eq i64 %neg344, -1
  %conv346 = zext i1 %cmp345 to i32
  %sub347 = sub nsw i32 0, %conv346
  %conv348 = sext i32 %sub347 to i64
  %129 = load i64, i64* %nbytes, align 8
  %mul349 = mul nsw i64 0, %129
  %130 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes350 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %130, i32 0, i32 3
  %131 = load i64, i64* %bytes350, align 8
  %add351 = add nsw i64 %mul349, %131
  %mul352 = mul nsw i64 0, %add351
  %add353 = add nsw i64 %mul352, 1
  %shl354 = shl i64 %add353, 62
  %sub355 = sub nsw i64 %shl354, 1
  %mul356 = mul nsw i64 %sub355, 2
  %add357 = add nsw i64 %mul356, 1
  %sub358 = sub nsw i64 %conv348, %add357
  br label %cond.end.365

cond.false.359:                                   ; preds = %cond.false.330
  %132 = load i64, i64* %nbytes, align 8
  %mul360 = mul nsw i64 0, %132
  %133 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes361 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %133, i32 0, i32 3
  %134 = load i64, i64* %bytes361, align 8
  %add362 = add nsw i64 %mul360, %134
  %mul363 = mul nsw i64 0, %add362
  %add364 = add nsw i64 %mul363, 0
  br label %cond.end.365

cond.end.365:                                     ; preds = %cond.false.359, %cond.true.338
  %cond366 = phi i64 [ %sub358, %cond.true.338 ], [ %add364, %cond.false.359 ]
  %cmp367 = icmp slt i64 %cond366, 0
  br i1 %cmp367, label %cond.true.369, label %cond.false.443

cond.true.369:                                    ; preds = %cond.end.365
  %135 = load i64, i64* %nbytes, align 8
  %cmp370 = icmp slt i64 %135, 0
  br i1 %cmp370, label %cond.true.372, label %cond.false.413

cond.true.372:                                    ; preds = %cond.true.369
  %136 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes373 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %136, i32 0, i32 3
  %137 = load i64, i64* %bytes373, align 8
  %138 = load i64, i64* %nbytes, align 8
  %mul374 = mul nsw i64 0, %138
  %139 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes375 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %139, i32 0, i32 3
  %140 = load i64, i64* %bytes375, align 8
  %add376 = add nsw i64 %mul374, %140
  %mul377 = mul nsw i64 0, %add376
  %sub378 = sub nsw i64 %mul377, 1
  %cmp379 = icmp slt i64 %sub378, 0
  br i1 %cmp379, label %cond.true.381, label %cond.false.402

cond.true.381:                                    ; preds = %cond.true.372
  %141 = load i64, i64* %nbytes, align 8
  %mul382 = mul nsw i64 0, %141
  %142 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes383 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %142, i32 0, i32 3
  %143 = load i64, i64* %bytes383, align 8
  %add384 = add nsw i64 %mul382, %143
  %mul385 = mul nsw i64 0, %add384
  %add386 = add nsw i64 %mul385, 0
  %neg387 = xor i64 %add386, -1
  %cmp388 = icmp eq i64 %neg387, -1
  %conv389 = zext i1 %cmp388 to i32
  %sub390 = sub nsw i32 0, %conv389
  %conv391 = sext i32 %sub390 to i64
  %144 = load i64, i64* %nbytes, align 8
  %mul392 = mul nsw i64 0, %144
  %145 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes393 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %145, i32 0, i32 3
  %146 = load i64, i64* %bytes393, align 8
  %add394 = add nsw i64 %mul392, %146
  %mul395 = mul nsw i64 0, %add394
  %add396 = add nsw i64 %mul395, 1
  %shl397 = shl i64 %add396, 62
  %sub398 = sub nsw i64 %shl397, 1
  %mul399 = mul nsw i64 %sub398, 2
  %add400 = add nsw i64 %mul399, 1
  %sub401 = sub nsw i64 %conv391, %add400
  br label %cond.end.408

cond.false.402:                                   ; preds = %cond.true.372
  %147 = load i64, i64* %nbytes, align 8
  %mul403 = mul nsw i64 0, %147
  %148 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes404 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %148, i32 0, i32 3
  %149 = load i64, i64* %bytes404, align 8
  %add405 = add nsw i64 %mul403, %149
  %mul406 = mul nsw i64 0, %add405
  %add407 = add nsw i64 %mul406, 0
  br label %cond.end.408

cond.end.408:                                     ; preds = %cond.false.402, %cond.true.381
  %cond409 = phi i64 [ %sub401, %cond.true.381 ], [ %add407, %cond.false.402 ]
  %150 = load i64, i64* %nbytes, align 8
  %sub410 = sub nsw i64 %cond409, %150
  %cmp411 = icmp slt i64 %137, %sub410
  br i1 %cmp411, label %cond.true.483, label %lor.lhs.false.466

cond.false.413:                                   ; preds = %cond.true.369
  %151 = load i64, i64* %nbytes, align 8
  %mul414 = mul nsw i64 0, %151
  %152 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes415 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %152, i32 0, i32 3
  %153 = load i64, i64* %bytes415, align 8
  %add416 = add nsw i64 %mul414, %153
  %mul417 = mul nsw i64 0, %add416
  %sub418 = sub nsw i64 %mul417, 1
  %cmp419 = icmp slt i64 %sub418, 0
  br i1 %cmp419, label %cond.true.421, label %cond.false.431

cond.true.421:                                    ; preds = %cond.false.413
  %154 = load i64, i64* %nbytes, align 8
  %mul422 = mul nsw i64 0, %154
  %155 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes423 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %155, i32 0, i32 3
  %156 = load i64, i64* %bytes423, align 8
  %add424 = add nsw i64 %mul422, %156
  %mul425 = mul nsw i64 0, %add424
  %add426 = add nsw i64 %mul425, 1
  %shl427 = shl i64 %add426, 62
  %sub428 = sub nsw i64 %shl427, 1
  %mul429 = mul nsw i64 %sub428, 2
  %add430 = add nsw i64 %mul429, 1
  br label %cond.end.437

cond.false.431:                                   ; preds = %cond.false.413
  %157 = load i64, i64* %nbytes, align 8
  %mul432 = mul nsw i64 0, %157
  %158 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes433 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %158, i32 0, i32 3
  %159 = load i64, i64* %bytes433, align 8
  %add434 = add nsw i64 %mul432, %159
  %mul435 = mul nsw i64 0, %add434
  %sub436 = sub nsw i64 %mul435, 1
  br label %cond.end.437

cond.end.437:                                     ; preds = %cond.false.431, %cond.true.421
  %cond438 = phi i64 [ %add430, %cond.true.421 ], [ %sub436, %cond.false.431 ]
  %160 = load i64, i64* %nbytes, align 8
  %sub439 = sub nsw i64 %cond438, %160
  %161 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes440 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %161, i32 0, i32 3
  %162 = load i64, i64* %bytes440, align 8
  %cmp441 = icmp slt i64 %sub439, %162
  br i1 %cmp441, label %cond.true.483, label %lor.lhs.false.466

cond.false.443:                                   ; preds = %cond.end.365
  %163 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes444 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %163, i32 0, i32 3
  %164 = load i64, i64* %bytes444, align 8
  %cmp445 = icmp slt i64 %164, 0
  br i1 %cmp445, label %cond.true.447, label %cond.false.452

cond.true.447:                                    ; preds = %cond.false.443
  %165 = load i64, i64* %nbytes, align 8
  %166 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes448 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %166, i32 0, i32 3
  %167 = load i64, i64* %bytes448, align 8
  %168 = load i64, i64* %nbytes, align 8
  %add449 = add nsw i64 %167, %168
  %cmp450 = icmp sle i64 %165, %add449
  br i1 %cmp450, label %cond.true.483, label %lor.lhs.false.466

cond.false.452:                                   ; preds = %cond.false.443
  %169 = load i64, i64* %nbytes, align 8
  %cmp453 = icmp slt i64 %169, 0
  br i1 %cmp453, label %cond.true.455, label %cond.false.461

cond.true.455:                                    ; preds = %cond.false.452
  %170 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes456 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %170, i32 0, i32 3
  %171 = load i64, i64* %bytes456, align 8
  %172 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes457 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %172, i32 0, i32 3
  %173 = load i64, i64* %bytes457, align 8
  %174 = load i64, i64* %nbytes, align 8
  %add458 = add nsw i64 %173, %174
  %cmp459 = icmp sle i64 %171, %add458
  br i1 %cmp459, label %cond.true.483, label %lor.lhs.false.466

cond.false.461:                                   ; preds = %cond.false.452
  %175 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes462 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %175, i32 0, i32 3
  %176 = load i64, i64* %bytes462, align 8
  %177 = load i64, i64* %nbytes, align 8
  %add463 = add nsw i64 %176, %177
  %178 = load i64, i64* %nbytes, align 8
  %cmp464 = icmp slt i64 %add463, %178
  br i1 %cmp464, label %cond.true.483, label %lor.lhs.false.466

lor.lhs.false.466:                                ; preds = %cond.false.461, %cond.true.455, %cond.true.447, %cond.end.437, %cond.end.408
  %179 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes467 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %179, i32 0, i32 3
  %180 = load i64, i64* %bytes467, align 8
  %181 = load i64, i64* %nbytes, align 8
  %add468 = add nsw i64 %180, %181
  %mul469 = mul nsw i64 0, %add468
  %sub470 = sub nsw i64 %mul469, 1
  %cmp471 = icmp slt i64 %sub470, 0
  br i1 %cmp471, label %land.lhs.true.473, label %lor.lhs.false.478

land.lhs.true.473:                                ; preds = %lor.lhs.false.466
  %182 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes474 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %182, i32 0, i32 3
  %183 = load i64, i64* %bytes474, align 8
  %184 = load i64, i64* %nbytes, align 8
  %add475 = add nsw i64 %183, %184
  %cmp476 = icmp slt i64 %add475, -128
  br i1 %cmp476, label %cond.true.483, label %lor.lhs.false.478

lor.lhs.false.478:                                ; preds = %land.lhs.true.473, %lor.lhs.false.466
  %185 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes479 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %185, i32 0, i32 3
  %186 = load i64, i64* %bytes479, align 8
  %187 = load i64, i64* %nbytes, align 8
  %add480 = add nsw i64 %186, %187
  %cmp481 = icmp slt i64 127, %add480
  br i1 %cmp481, label %cond.true.483, label %cond.false.515

cond.true.483:                                    ; preds = %lor.lhs.false.478, %land.lhs.true.473, %cond.false.461, %cond.true.455, %cond.true.447, %cond.end.437, %cond.end.408
  %188 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes484 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %188, i32 0, i32 3
  %189 = load i64, i64* %bytes484, align 8
  %conv485 = trunc i64 %189 to i8
  %conv486 = zext i8 %conv485 to i32
  %190 = load i64, i64* %nbytes, align 8
  %conv487 = trunc i64 %190 to i8
  %conv488 = zext i8 %conv487 to i32
  %add489 = add nsw i32 %conv486, %conv488
  %cmp490 = icmp sle i32 %add489, 127
  br i1 %cmp490, label %cond.true.492, label %cond.false.501

cond.true.492:                                    ; preds = %cond.true.483
  %191 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes493 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %191, i32 0, i32 3
  %192 = load i64, i64* %bytes493, align 8
  %conv494 = trunc i64 %192 to i8
  %conv495 = zext i8 %conv494 to i32
  %193 = load i64, i64* %nbytes, align 8
  %conv496 = trunc i64 %193 to i8
  %conv497 = zext i8 %conv496 to i32
  %add498 = add nsw i32 %conv495, %conv497
  %conv499 = trunc i32 %add498 to i8
  %conv500 = sext i8 %conv499 to i32
  br label %cond.end.512

cond.false.501:                                   ; preds = %cond.true.483
  %194 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes502 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %194, i32 0, i32 3
  %195 = load i64, i64* %bytes502, align 8
  %conv503 = trunc i64 %195 to i8
  %conv504 = zext i8 %conv503 to i32
  %196 = load i64, i64* %nbytes, align 8
  %conv505 = trunc i64 %196 to i8
  %conv506 = zext i8 %conv505 to i32
  %add507 = add nsw i32 %conv504, %conv506
  %sub508 = sub nsw i32 %add507, -128
  %conv509 = trunc i32 %sub508 to i8
  %conv510 = sext i8 %conv509 to i32
  %add511 = add nsw i32 %conv510, -128
  br label %cond.end.512

cond.end.512:                                     ; preds = %cond.false.501, %cond.true.492
  %cond513 = phi i32 [ %conv500, %cond.true.492 ], [ %add511, %cond.false.501 ]
  %conv514 = sext i32 %cond513 to i64
  store i64 %conv514, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.515:                                   ; preds = %lor.lhs.false.478
  %197 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes516 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %197, i32 0, i32 3
  %198 = load i64, i64* %bytes516, align 8
  %conv517 = trunc i64 %198 to i8
  %conv518 = zext i8 %conv517 to i32
  %199 = load i64, i64* %nbytes, align 8
  %conv519 = trunc i64 %199 to i8
  %conv520 = zext i8 %conv519 to i32
  %add521 = add nsw i32 %conv518, %conv520
  %cmp522 = icmp sle i32 %add521, 127
  br i1 %cmp522, label %cond.true.524, label %cond.false.533

cond.true.524:                                    ; preds = %cond.false.515
  %200 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes525 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %200, i32 0, i32 3
  %201 = load i64, i64* %bytes525, align 8
  %conv526 = trunc i64 %201 to i8
  %conv527 = zext i8 %conv526 to i32
  %202 = load i64, i64* %nbytes, align 8
  %conv528 = trunc i64 %202 to i8
  %conv529 = zext i8 %conv528 to i32
  %add530 = add nsw i32 %conv527, %conv529
  %conv531 = trunc i32 %add530 to i8
  %conv532 = sext i8 %conv531 to i32
  br label %cond.end.544

cond.false.533:                                   ; preds = %cond.false.515
  %203 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes534 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %203, i32 0, i32 3
  %204 = load i64, i64* %bytes534, align 8
  %conv535 = trunc i64 %204 to i8
  %conv536 = zext i8 %conv535 to i32
  %205 = load i64, i64* %nbytes, align 8
  %conv537 = trunc i64 %205 to i8
  %conv538 = zext i8 %conv537 to i32
  %add539 = add nsw i32 %conv536, %conv538
  %sub540 = sub nsw i32 %add539, -128
  %conv541 = trunc i32 %sub540 to i8
  %conv542 = sext i8 %conv541 to i32
  %add543 = add nsw i32 %conv542, -128
  br label %cond.end.544

cond.end.544:                                     ; preds = %cond.false.533, %cond.true.524
  %cond545 = phi i32 [ %conv532, %cond.true.524 ], [ %add543, %cond.false.533 ]
  %conv546 = sext i32 %cond545 to i64
  store i64 %conv546, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.547:                                   ; preds = %if.end.33
  br i1 false, label %cond.true.548, label %cond.false.1069

cond.true.548:                                    ; preds = %cond.false.547
  br i1 false, label %cond.true.549, label %cond.false.852

cond.true.549:                                    ; preds = %cond.true.548
  %206 = load i64, i64* %nbytes, align 8
  %conv550 = trunc i64 %206 to i16
  %conv551 = sext i16 %conv550 to i32
  %mul552 = mul nsw i32 0, %conv551
  %207 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes553 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %207, i32 0, i32 3
  %208 = load i64, i64* %bytes553, align 8
  %conv554 = trunc i64 %208 to i16
  %conv555 = sext i16 %conv554 to i32
  %add556 = add nsw i32 %mul552, %conv555
  %mul557 = mul nsw i32 0, %add556
  %sub558 = sub nsw i32 %mul557, 1
  %cmp559 = icmp slt i32 %sub558, 0
  br i1 %cmp559, label %cond.true.561, label %cond.false.589

cond.true.561:                                    ; preds = %cond.true.549
  %209 = load i64, i64* %nbytes, align 8
  %conv562 = trunc i64 %209 to i16
  %conv563 = sext i16 %conv562 to i32
  %mul564 = mul nsw i32 0, %conv563
  %210 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes565 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %210, i32 0, i32 3
  %211 = load i64, i64* %bytes565, align 8
  %conv566 = trunc i64 %211 to i16
  %conv567 = sext i16 %conv566 to i32
  %add568 = add nsw i32 %mul564, %conv567
  %mul569 = mul nsw i32 0, %add568
  %add570 = add nsw i32 %mul569, 0
  %neg571 = xor i32 %add570, -1
  %cmp572 = icmp eq i32 %neg571, -1
  %conv573 = zext i1 %cmp572 to i32
  %sub574 = sub nsw i32 0, %conv573
  %212 = load i64, i64* %nbytes, align 8
  %conv575 = trunc i64 %212 to i16
  %conv576 = sext i16 %conv575 to i32
  %mul577 = mul nsw i32 0, %conv576
  %213 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes578 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %213, i32 0, i32 3
  %214 = load i64, i64* %bytes578, align 8
  %conv579 = trunc i64 %214 to i16
  %conv580 = sext i16 %conv579 to i32
  %add581 = add nsw i32 %mul577, %conv580
  %mul582 = mul nsw i32 0, %add581
  %add583 = add nsw i32 %mul582, 1
  %shl584 = shl i32 %add583, 30
  %sub585 = sub nsw i32 %shl584, 1
  %mul586 = mul nsw i32 %sub585, 2
  %add587 = add nsw i32 %mul586, 1
  %sub588 = sub nsw i32 %sub574, %add587
  br label %cond.end.599

cond.false.589:                                   ; preds = %cond.true.549
  %215 = load i64, i64* %nbytes, align 8
  %conv590 = trunc i64 %215 to i16
  %conv591 = sext i16 %conv590 to i32
  %mul592 = mul nsw i32 0, %conv591
  %216 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes593 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %216, i32 0, i32 3
  %217 = load i64, i64* %bytes593, align 8
  %conv594 = trunc i64 %217 to i16
  %conv595 = sext i16 %conv594 to i32
  %add596 = add nsw i32 %mul592, %conv595
  %mul597 = mul nsw i32 0, %add596
  %add598 = add nsw i32 %mul597, 0
  br label %cond.end.599

cond.end.599:                                     ; preds = %cond.false.589, %cond.true.561
  %cond600 = phi i32 [ %sub588, %cond.true.561 ], [ %add598, %cond.false.589 ]
  %cmp601 = icmp slt i32 %cond600, 0
  br i1 %cmp601, label %cond.true.603, label %cond.false.714

cond.true.603:                                    ; preds = %cond.end.599
  %218 = load i64, i64* %nbytes, align 8
  %conv604 = trunc i64 %218 to i16
  %conv605 = sext i16 %conv604 to i32
  %cmp606 = icmp slt i32 %conv605, 0
  br i1 %cmp606, label %cond.true.608, label %cond.false.668

cond.true.608:                                    ; preds = %cond.true.603
  %219 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes609 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %219, i32 0, i32 3
  %220 = load i64, i64* %bytes609, align 8
  %conv610 = trunc i64 %220 to i16
  %conv611 = sext i16 %conv610 to i32
  %221 = load i64, i64* %nbytes, align 8
  %conv612 = trunc i64 %221 to i16
  %conv613 = sext i16 %conv612 to i32
  %mul614 = mul nsw i32 0, %conv613
  %222 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes615 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %222, i32 0, i32 3
  %223 = load i64, i64* %bytes615, align 8
  %conv616 = trunc i64 %223 to i16
  %conv617 = sext i16 %conv616 to i32
  %add618 = add nsw i32 %mul614, %conv617
  %mul619 = mul nsw i32 0, %add618
  %sub620 = sub nsw i32 %mul619, 1
  %cmp621 = icmp slt i32 %sub620, 0
  br i1 %cmp621, label %cond.true.623, label %cond.false.651

cond.true.623:                                    ; preds = %cond.true.608
  %224 = load i64, i64* %nbytes, align 8
  %conv624 = trunc i64 %224 to i16
  %conv625 = sext i16 %conv624 to i32
  %mul626 = mul nsw i32 0, %conv625
  %225 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes627 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %225, i32 0, i32 3
  %226 = load i64, i64* %bytes627, align 8
  %conv628 = trunc i64 %226 to i16
  %conv629 = sext i16 %conv628 to i32
  %add630 = add nsw i32 %mul626, %conv629
  %mul631 = mul nsw i32 0, %add630
  %add632 = add nsw i32 %mul631, 0
  %neg633 = xor i32 %add632, -1
  %cmp634 = icmp eq i32 %neg633, -1
  %conv635 = zext i1 %cmp634 to i32
  %sub636 = sub nsw i32 0, %conv635
  %227 = load i64, i64* %nbytes, align 8
  %conv637 = trunc i64 %227 to i16
  %conv638 = sext i16 %conv637 to i32
  %mul639 = mul nsw i32 0, %conv638
  %228 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes640 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %228, i32 0, i32 3
  %229 = load i64, i64* %bytes640, align 8
  %conv641 = trunc i64 %229 to i16
  %conv642 = sext i16 %conv641 to i32
  %add643 = add nsw i32 %mul639, %conv642
  %mul644 = mul nsw i32 0, %add643
  %add645 = add nsw i32 %mul644, 1
  %shl646 = shl i32 %add645, 30
  %sub647 = sub nsw i32 %shl646, 1
  %mul648 = mul nsw i32 %sub647, 2
  %add649 = add nsw i32 %mul648, 1
  %sub650 = sub nsw i32 %sub636, %add649
  br label %cond.end.661

cond.false.651:                                   ; preds = %cond.true.608
  %230 = load i64, i64* %nbytes, align 8
  %conv652 = trunc i64 %230 to i16
  %conv653 = sext i16 %conv652 to i32
  %mul654 = mul nsw i32 0, %conv653
  %231 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes655 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %231, i32 0, i32 3
  %232 = load i64, i64* %bytes655, align 8
  %conv656 = trunc i64 %232 to i16
  %conv657 = sext i16 %conv656 to i32
  %add658 = add nsw i32 %mul654, %conv657
  %mul659 = mul nsw i32 0, %add658
  %add660 = add nsw i32 %mul659, 0
  br label %cond.end.661

cond.end.661:                                     ; preds = %cond.false.651, %cond.true.623
  %cond662 = phi i32 [ %sub650, %cond.true.623 ], [ %add660, %cond.false.651 ]
  %233 = load i64, i64* %nbytes, align 8
  %conv663 = trunc i64 %233 to i16
  %conv664 = sext i16 %conv663 to i32
  %sub665 = sub nsw i32 %cond662, %conv664
  %cmp666 = icmp slt i32 %conv611, %sub665
  br i1 %cmp666, label %cond.true.788, label %lor.lhs.false.759

cond.false.668:                                   ; preds = %cond.true.603
  %234 = load i64, i64* %nbytes, align 8
  %conv669 = trunc i64 %234 to i16
  %conv670 = sext i16 %conv669 to i32
  %mul671 = mul nsw i32 0, %conv670
  %235 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes672 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %235, i32 0, i32 3
  %236 = load i64, i64* %bytes672, align 8
  %conv673 = trunc i64 %236 to i16
  %conv674 = sext i16 %conv673 to i32
  %add675 = add nsw i32 %mul671, %conv674
  %mul676 = mul nsw i32 0, %add675
  %sub677 = sub nsw i32 %mul676, 1
  %cmp678 = icmp slt i32 %sub677, 0
  br i1 %cmp678, label %cond.true.680, label %cond.false.694

cond.true.680:                                    ; preds = %cond.false.668
  %237 = load i64, i64* %nbytes, align 8
  %conv681 = trunc i64 %237 to i16
  %conv682 = sext i16 %conv681 to i32
  %mul683 = mul nsw i32 0, %conv682
  %238 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes684 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %238, i32 0, i32 3
  %239 = load i64, i64* %bytes684, align 8
  %conv685 = trunc i64 %239 to i16
  %conv686 = sext i16 %conv685 to i32
  %add687 = add nsw i32 %mul683, %conv686
  %mul688 = mul nsw i32 0, %add687
  %add689 = add nsw i32 %mul688, 1
  %shl690 = shl i32 %add689, 30
  %sub691 = sub nsw i32 %shl690, 1
  %mul692 = mul nsw i32 %sub691, 2
  %add693 = add nsw i32 %mul692, 1
  br label %cond.end.704

cond.false.694:                                   ; preds = %cond.false.668
  %240 = load i64, i64* %nbytes, align 8
  %conv695 = trunc i64 %240 to i16
  %conv696 = sext i16 %conv695 to i32
  %mul697 = mul nsw i32 0, %conv696
  %241 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes698 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %241, i32 0, i32 3
  %242 = load i64, i64* %bytes698, align 8
  %conv699 = trunc i64 %242 to i16
  %conv700 = sext i16 %conv699 to i32
  %add701 = add nsw i32 %mul697, %conv700
  %mul702 = mul nsw i32 0, %add701
  %sub703 = sub nsw i32 %mul702, 1
  br label %cond.end.704

cond.end.704:                                     ; preds = %cond.false.694, %cond.true.680
  %cond705 = phi i32 [ %add693, %cond.true.680 ], [ %sub703, %cond.false.694 ]
  %243 = load i64, i64* %nbytes, align 8
  %conv706 = trunc i64 %243 to i16
  %conv707 = sext i16 %conv706 to i32
  %sub708 = sub nsw i32 %cond705, %conv707
  %244 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes709 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %244, i32 0, i32 3
  %245 = load i64, i64* %bytes709, align 8
  %conv710 = trunc i64 %245 to i16
  %conv711 = sext i16 %conv710 to i32
  %cmp712 = icmp slt i32 %sub708, %conv711
  br i1 %cmp712, label %cond.true.788, label %lor.lhs.false.759

cond.false.714:                                   ; preds = %cond.end.599
  %246 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes715 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %246, i32 0, i32 3
  %247 = load i64, i64* %bytes715, align 8
  %conv716 = trunc i64 %247 to i16
  %conv717 = sext i16 %conv716 to i32
  %cmp718 = icmp slt i32 %conv717, 0
  br i1 %cmp718, label %cond.true.720, label %cond.false.731

cond.true.720:                                    ; preds = %cond.false.714
  %248 = load i64, i64* %nbytes, align 8
  %conv721 = trunc i64 %248 to i16
  %conv722 = sext i16 %conv721 to i32
  %249 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes723 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %249, i32 0, i32 3
  %250 = load i64, i64* %bytes723, align 8
  %conv724 = trunc i64 %250 to i16
  %conv725 = sext i16 %conv724 to i32
  %251 = load i64, i64* %nbytes, align 8
  %conv726 = trunc i64 %251 to i16
  %conv727 = sext i16 %conv726 to i32
  %add728 = add nsw i32 %conv725, %conv727
  %cmp729 = icmp sle i32 %conv722, %add728
  br i1 %cmp729, label %cond.true.788, label %lor.lhs.false.759

cond.false.731:                                   ; preds = %cond.false.714
  %252 = load i64, i64* %nbytes, align 8
  %conv732 = trunc i64 %252 to i16
  %conv733 = sext i16 %conv732 to i32
  %cmp734 = icmp slt i32 %conv733, 0
  br i1 %cmp734, label %cond.true.736, label %cond.false.748

cond.true.736:                                    ; preds = %cond.false.731
  %253 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes737 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %253, i32 0, i32 3
  %254 = load i64, i64* %bytes737, align 8
  %conv738 = trunc i64 %254 to i16
  %conv739 = sext i16 %conv738 to i32
  %255 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes740 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %255, i32 0, i32 3
  %256 = load i64, i64* %bytes740, align 8
  %conv741 = trunc i64 %256 to i16
  %conv742 = sext i16 %conv741 to i32
  %257 = load i64, i64* %nbytes, align 8
  %conv743 = trunc i64 %257 to i16
  %conv744 = sext i16 %conv743 to i32
  %add745 = add nsw i32 %conv742, %conv744
  %cmp746 = icmp sle i32 %conv739, %add745
  br i1 %cmp746, label %cond.true.788, label %lor.lhs.false.759

cond.false.748:                                   ; preds = %cond.false.731
  %258 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes749 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %258, i32 0, i32 3
  %259 = load i64, i64* %bytes749, align 8
  %conv750 = trunc i64 %259 to i16
  %conv751 = sext i16 %conv750 to i32
  %260 = load i64, i64* %nbytes, align 8
  %conv752 = trunc i64 %260 to i16
  %conv753 = sext i16 %conv752 to i32
  %add754 = add nsw i32 %conv751, %conv753
  %261 = load i64, i64* %nbytes, align 8
  %conv755 = trunc i64 %261 to i16
  %conv756 = sext i16 %conv755 to i32
  %cmp757 = icmp slt i32 %add754, %conv756
  br i1 %cmp757, label %cond.true.788, label %lor.lhs.false.759

lor.lhs.false.759:                                ; preds = %cond.false.748, %cond.true.736, %cond.true.720, %cond.end.704, %cond.end.661
  %262 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes760 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %262, i32 0, i32 3
  %263 = load i64, i64* %bytes760, align 8
  %conv761 = trunc i64 %263 to i16
  %conv762 = sext i16 %conv761 to i32
  %264 = load i64, i64* %nbytes, align 8
  %conv763 = trunc i64 %264 to i16
  %conv764 = sext i16 %conv763 to i32
  %add765 = add nsw i32 %conv762, %conv764
  %mul766 = mul nsw i32 0, %add765
  %sub767 = sub nsw i32 %mul766, 1
  %cmp768 = icmp slt i32 %sub767, 0
  br i1 %cmp768, label %land.lhs.true.770, label %lor.lhs.false.779

land.lhs.true.770:                                ; preds = %lor.lhs.false.759
  %265 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes771 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %265, i32 0, i32 3
  %266 = load i64, i64* %bytes771, align 8
  %conv772 = trunc i64 %266 to i16
  %conv773 = sext i16 %conv772 to i32
  %267 = load i64, i64* %nbytes, align 8
  %conv774 = trunc i64 %267 to i16
  %conv775 = sext i16 %conv774 to i32
  %add776 = add nsw i32 %conv773, %conv775
  %cmp777 = icmp slt i32 %add776, -32768
  br i1 %cmp777, label %cond.true.788, label %lor.lhs.false.779

lor.lhs.false.779:                                ; preds = %land.lhs.true.770, %lor.lhs.false.759
  %268 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes780 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %268, i32 0, i32 3
  %269 = load i64, i64* %bytes780, align 8
  %conv781 = trunc i64 %269 to i16
  %conv782 = sext i16 %conv781 to i32
  %270 = load i64, i64* %nbytes, align 8
  %conv783 = trunc i64 %270 to i16
  %conv784 = sext i16 %conv783 to i32
  %add785 = add nsw i32 %conv782, %conv784
  %cmp786 = icmp slt i32 32767, %add785
  br i1 %cmp786, label %cond.true.788, label %cond.false.820

cond.true.788:                                    ; preds = %lor.lhs.false.779, %land.lhs.true.770, %cond.false.748, %cond.true.736, %cond.true.720, %cond.end.704, %cond.end.661
  %271 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes789 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %271, i32 0, i32 3
  %272 = load i64, i64* %bytes789, align 8
  %conv790 = trunc i64 %272 to i16
  %conv791 = zext i16 %conv790 to i32
  %273 = load i64, i64* %nbytes, align 8
  %conv792 = trunc i64 %273 to i16
  %conv793 = zext i16 %conv792 to i32
  %add794 = add nsw i32 %conv791, %conv793
  %cmp795 = icmp sle i32 %add794, 32767
  br i1 %cmp795, label %cond.true.797, label %cond.false.806

cond.true.797:                                    ; preds = %cond.true.788
  %274 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes798 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %274, i32 0, i32 3
  %275 = load i64, i64* %bytes798, align 8
  %conv799 = trunc i64 %275 to i16
  %conv800 = zext i16 %conv799 to i32
  %276 = load i64, i64* %nbytes, align 8
  %conv801 = trunc i64 %276 to i16
  %conv802 = zext i16 %conv801 to i32
  %add803 = add nsw i32 %conv800, %conv802
  %conv804 = trunc i32 %add803 to i16
  %conv805 = sext i16 %conv804 to i32
  br label %cond.end.817

cond.false.806:                                   ; preds = %cond.true.788
  %277 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes807 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %277, i32 0, i32 3
  %278 = load i64, i64* %bytes807, align 8
  %conv808 = trunc i64 %278 to i16
  %conv809 = zext i16 %conv808 to i32
  %279 = load i64, i64* %nbytes, align 8
  %conv810 = trunc i64 %279 to i16
  %conv811 = zext i16 %conv810 to i32
  %add812 = add nsw i32 %conv809, %conv811
  %sub813 = sub nsw i32 %add812, -32768
  %conv814 = trunc i32 %sub813 to i16
  %conv815 = sext i16 %conv814 to i32
  %add816 = add nsw i32 %conv815, -32768
  br label %cond.end.817

cond.end.817:                                     ; preds = %cond.false.806, %cond.true.797
  %cond818 = phi i32 [ %conv805, %cond.true.797 ], [ %add816, %cond.false.806 ]
  %conv819 = sext i32 %cond818 to i64
  store i64 %conv819, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.820:                                   ; preds = %lor.lhs.false.779
  %280 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes821 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %280, i32 0, i32 3
  %281 = load i64, i64* %bytes821, align 8
  %conv822 = trunc i64 %281 to i16
  %conv823 = zext i16 %conv822 to i32
  %282 = load i64, i64* %nbytes, align 8
  %conv824 = trunc i64 %282 to i16
  %conv825 = zext i16 %conv824 to i32
  %add826 = add nsw i32 %conv823, %conv825
  %cmp827 = icmp sle i32 %add826, 32767
  br i1 %cmp827, label %cond.true.829, label %cond.false.838

cond.true.829:                                    ; preds = %cond.false.820
  %283 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes830 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %283, i32 0, i32 3
  %284 = load i64, i64* %bytes830, align 8
  %conv831 = trunc i64 %284 to i16
  %conv832 = zext i16 %conv831 to i32
  %285 = load i64, i64* %nbytes, align 8
  %conv833 = trunc i64 %285 to i16
  %conv834 = zext i16 %conv833 to i32
  %add835 = add nsw i32 %conv832, %conv834
  %conv836 = trunc i32 %add835 to i16
  %conv837 = sext i16 %conv836 to i32
  br label %cond.end.849

cond.false.838:                                   ; preds = %cond.false.820
  %286 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes839 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %286, i32 0, i32 3
  %287 = load i64, i64* %bytes839, align 8
  %conv840 = trunc i64 %287 to i16
  %conv841 = zext i16 %conv840 to i32
  %288 = load i64, i64* %nbytes, align 8
  %conv842 = trunc i64 %288 to i16
  %conv843 = zext i16 %conv842 to i32
  %add844 = add nsw i32 %conv841, %conv843
  %sub845 = sub nsw i32 %add844, -32768
  %conv846 = trunc i32 %sub845 to i16
  %conv847 = sext i16 %conv846 to i32
  %add848 = add nsw i32 %conv847, -32768
  br label %cond.end.849

cond.end.849:                                     ; preds = %cond.false.838, %cond.true.829
  %cond850 = phi i32 [ %conv837, %cond.true.829 ], [ %add848, %cond.false.838 ]
  %conv851 = sext i32 %cond850 to i64
  store i64 %conv851, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.852:                                   ; preds = %cond.true.548
  %289 = load i64, i64* %nbytes, align 8
  %mul853 = mul nsw i64 0, %289
  %290 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes854 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %290, i32 0, i32 3
  %291 = load i64, i64* %bytes854, align 8
  %add855 = add nsw i64 %mul853, %291
  %mul856 = mul nsw i64 0, %add855
  %sub857 = sub nsw i64 %mul856, 1
  %cmp858 = icmp slt i64 %sub857, 0
  br i1 %cmp858, label %cond.true.860, label %cond.false.881

cond.true.860:                                    ; preds = %cond.false.852
  %292 = load i64, i64* %nbytes, align 8
  %mul861 = mul nsw i64 0, %292
  %293 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes862 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %293, i32 0, i32 3
  %294 = load i64, i64* %bytes862, align 8
  %add863 = add nsw i64 %mul861, %294
  %mul864 = mul nsw i64 0, %add863
  %add865 = add nsw i64 %mul864, 0
  %neg866 = xor i64 %add865, -1
  %cmp867 = icmp eq i64 %neg866, -1
  %conv868 = zext i1 %cmp867 to i32
  %sub869 = sub nsw i32 0, %conv868
  %conv870 = sext i32 %sub869 to i64
  %295 = load i64, i64* %nbytes, align 8
  %mul871 = mul nsw i64 0, %295
  %296 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes872 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %296, i32 0, i32 3
  %297 = load i64, i64* %bytes872, align 8
  %add873 = add nsw i64 %mul871, %297
  %mul874 = mul nsw i64 0, %add873
  %add875 = add nsw i64 %mul874, 1
  %shl876 = shl i64 %add875, 62
  %sub877 = sub nsw i64 %shl876, 1
  %mul878 = mul nsw i64 %sub877, 2
  %add879 = add nsw i64 %mul878, 1
  %sub880 = sub nsw i64 %conv870, %add879
  br label %cond.end.887

cond.false.881:                                   ; preds = %cond.false.852
  %298 = load i64, i64* %nbytes, align 8
  %mul882 = mul nsw i64 0, %298
  %299 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes883 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %299, i32 0, i32 3
  %300 = load i64, i64* %bytes883, align 8
  %add884 = add nsw i64 %mul882, %300
  %mul885 = mul nsw i64 0, %add884
  %add886 = add nsw i64 %mul885, 0
  br label %cond.end.887

cond.end.887:                                     ; preds = %cond.false.881, %cond.true.860
  %cond888 = phi i64 [ %sub880, %cond.true.860 ], [ %add886, %cond.false.881 ]
  %cmp889 = icmp slt i64 %cond888, 0
  br i1 %cmp889, label %cond.true.891, label %cond.false.965

cond.true.891:                                    ; preds = %cond.end.887
  %301 = load i64, i64* %nbytes, align 8
  %cmp892 = icmp slt i64 %301, 0
  br i1 %cmp892, label %cond.true.894, label %cond.false.935

cond.true.894:                                    ; preds = %cond.true.891
  %302 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes895 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %302, i32 0, i32 3
  %303 = load i64, i64* %bytes895, align 8
  %304 = load i64, i64* %nbytes, align 8
  %mul896 = mul nsw i64 0, %304
  %305 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes897 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %305, i32 0, i32 3
  %306 = load i64, i64* %bytes897, align 8
  %add898 = add nsw i64 %mul896, %306
  %mul899 = mul nsw i64 0, %add898
  %sub900 = sub nsw i64 %mul899, 1
  %cmp901 = icmp slt i64 %sub900, 0
  br i1 %cmp901, label %cond.true.903, label %cond.false.924

cond.true.903:                                    ; preds = %cond.true.894
  %307 = load i64, i64* %nbytes, align 8
  %mul904 = mul nsw i64 0, %307
  %308 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes905 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %308, i32 0, i32 3
  %309 = load i64, i64* %bytes905, align 8
  %add906 = add nsw i64 %mul904, %309
  %mul907 = mul nsw i64 0, %add906
  %add908 = add nsw i64 %mul907, 0
  %neg909 = xor i64 %add908, -1
  %cmp910 = icmp eq i64 %neg909, -1
  %conv911 = zext i1 %cmp910 to i32
  %sub912 = sub nsw i32 0, %conv911
  %conv913 = sext i32 %sub912 to i64
  %310 = load i64, i64* %nbytes, align 8
  %mul914 = mul nsw i64 0, %310
  %311 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes915 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %311, i32 0, i32 3
  %312 = load i64, i64* %bytes915, align 8
  %add916 = add nsw i64 %mul914, %312
  %mul917 = mul nsw i64 0, %add916
  %add918 = add nsw i64 %mul917, 1
  %shl919 = shl i64 %add918, 62
  %sub920 = sub nsw i64 %shl919, 1
  %mul921 = mul nsw i64 %sub920, 2
  %add922 = add nsw i64 %mul921, 1
  %sub923 = sub nsw i64 %conv913, %add922
  br label %cond.end.930

cond.false.924:                                   ; preds = %cond.true.894
  %313 = load i64, i64* %nbytes, align 8
  %mul925 = mul nsw i64 0, %313
  %314 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes926 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %314, i32 0, i32 3
  %315 = load i64, i64* %bytes926, align 8
  %add927 = add nsw i64 %mul925, %315
  %mul928 = mul nsw i64 0, %add927
  %add929 = add nsw i64 %mul928, 0
  br label %cond.end.930

cond.end.930:                                     ; preds = %cond.false.924, %cond.true.903
  %cond931 = phi i64 [ %sub923, %cond.true.903 ], [ %add929, %cond.false.924 ]
  %316 = load i64, i64* %nbytes, align 8
  %sub932 = sub nsw i64 %cond931, %316
  %cmp933 = icmp slt i64 %303, %sub932
  br i1 %cmp933, label %cond.true.1005, label %lor.lhs.false.988

cond.false.935:                                   ; preds = %cond.true.891
  %317 = load i64, i64* %nbytes, align 8
  %mul936 = mul nsw i64 0, %317
  %318 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes937 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %318, i32 0, i32 3
  %319 = load i64, i64* %bytes937, align 8
  %add938 = add nsw i64 %mul936, %319
  %mul939 = mul nsw i64 0, %add938
  %sub940 = sub nsw i64 %mul939, 1
  %cmp941 = icmp slt i64 %sub940, 0
  br i1 %cmp941, label %cond.true.943, label %cond.false.953

cond.true.943:                                    ; preds = %cond.false.935
  %320 = load i64, i64* %nbytes, align 8
  %mul944 = mul nsw i64 0, %320
  %321 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes945 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %321, i32 0, i32 3
  %322 = load i64, i64* %bytes945, align 8
  %add946 = add nsw i64 %mul944, %322
  %mul947 = mul nsw i64 0, %add946
  %add948 = add nsw i64 %mul947, 1
  %shl949 = shl i64 %add948, 62
  %sub950 = sub nsw i64 %shl949, 1
  %mul951 = mul nsw i64 %sub950, 2
  %add952 = add nsw i64 %mul951, 1
  br label %cond.end.959

cond.false.953:                                   ; preds = %cond.false.935
  %323 = load i64, i64* %nbytes, align 8
  %mul954 = mul nsw i64 0, %323
  %324 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes955 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %324, i32 0, i32 3
  %325 = load i64, i64* %bytes955, align 8
  %add956 = add nsw i64 %mul954, %325
  %mul957 = mul nsw i64 0, %add956
  %sub958 = sub nsw i64 %mul957, 1
  br label %cond.end.959

cond.end.959:                                     ; preds = %cond.false.953, %cond.true.943
  %cond960 = phi i64 [ %add952, %cond.true.943 ], [ %sub958, %cond.false.953 ]
  %326 = load i64, i64* %nbytes, align 8
  %sub961 = sub nsw i64 %cond960, %326
  %327 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes962 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %327, i32 0, i32 3
  %328 = load i64, i64* %bytes962, align 8
  %cmp963 = icmp slt i64 %sub961, %328
  br i1 %cmp963, label %cond.true.1005, label %lor.lhs.false.988

cond.false.965:                                   ; preds = %cond.end.887
  %329 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes966 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %329, i32 0, i32 3
  %330 = load i64, i64* %bytes966, align 8
  %cmp967 = icmp slt i64 %330, 0
  br i1 %cmp967, label %cond.true.969, label %cond.false.974

cond.true.969:                                    ; preds = %cond.false.965
  %331 = load i64, i64* %nbytes, align 8
  %332 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes970 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %332, i32 0, i32 3
  %333 = load i64, i64* %bytes970, align 8
  %334 = load i64, i64* %nbytes, align 8
  %add971 = add nsw i64 %333, %334
  %cmp972 = icmp sle i64 %331, %add971
  br i1 %cmp972, label %cond.true.1005, label %lor.lhs.false.988

cond.false.974:                                   ; preds = %cond.false.965
  %335 = load i64, i64* %nbytes, align 8
  %cmp975 = icmp slt i64 %335, 0
  br i1 %cmp975, label %cond.true.977, label %cond.false.983

cond.true.977:                                    ; preds = %cond.false.974
  %336 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes978 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %336, i32 0, i32 3
  %337 = load i64, i64* %bytes978, align 8
  %338 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes979 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %338, i32 0, i32 3
  %339 = load i64, i64* %bytes979, align 8
  %340 = load i64, i64* %nbytes, align 8
  %add980 = add nsw i64 %339, %340
  %cmp981 = icmp sle i64 %337, %add980
  br i1 %cmp981, label %cond.true.1005, label %lor.lhs.false.988

cond.false.983:                                   ; preds = %cond.false.974
  %341 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes984 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %341, i32 0, i32 3
  %342 = load i64, i64* %bytes984, align 8
  %343 = load i64, i64* %nbytes, align 8
  %add985 = add nsw i64 %342, %343
  %344 = load i64, i64* %nbytes, align 8
  %cmp986 = icmp slt i64 %add985, %344
  br i1 %cmp986, label %cond.true.1005, label %lor.lhs.false.988

lor.lhs.false.988:                                ; preds = %cond.false.983, %cond.true.977, %cond.true.969, %cond.end.959, %cond.end.930
  %345 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes989 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %345, i32 0, i32 3
  %346 = load i64, i64* %bytes989, align 8
  %347 = load i64, i64* %nbytes, align 8
  %add990 = add nsw i64 %346, %347
  %mul991 = mul nsw i64 0, %add990
  %sub992 = sub nsw i64 %mul991, 1
  %cmp993 = icmp slt i64 %sub992, 0
  br i1 %cmp993, label %land.lhs.true.995, label %lor.lhs.false.1000

land.lhs.true.995:                                ; preds = %lor.lhs.false.988
  %348 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes996 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %348, i32 0, i32 3
  %349 = load i64, i64* %bytes996, align 8
  %350 = load i64, i64* %nbytes, align 8
  %add997 = add nsw i64 %349, %350
  %cmp998 = icmp slt i64 %add997, -32768
  br i1 %cmp998, label %cond.true.1005, label %lor.lhs.false.1000

lor.lhs.false.1000:                               ; preds = %land.lhs.true.995, %lor.lhs.false.988
  %351 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1001 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %351, i32 0, i32 3
  %352 = load i64, i64* %bytes1001, align 8
  %353 = load i64, i64* %nbytes, align 8
  %add1002 = add nsw i64 %352, %353
  %cmp1003 = icmp slt i64 32767, %add1002
  br i1 %cmp1003, label %cond.true.1005, label %cond.false.1037

cond.true.1005:                                   ; preds = %lor.lhs.false.1000, %land.lhs.true.995, %cond.false.983, %cond.true.977, %cond.true.969, %cond.end.959, %cond.end.930
  %354 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1006 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %354, i32 0, i32 3
  %355 = load i64, i64* %bytes1006, align 8
  %conv1007 = trunc i64 %355 to i16
  %conv1008 = zext i16 %conv1007 to i32
  %356 = load i64, i64* %nbytes, align 8
  %conv1009 = trunc i64 %356 to i16
  %conv1010 = zext i16 %conv1009 to i32
  %add1011 = add nsw i32 %conv1008, %conv1010
  %cmp1012 = icmp sle i32 %add1011, 32767
  br i1 %cmp1012, label %cond.true.1014, label %cond.false.1023

cond.true.1014:                                   ; preds = %cond.true.1005
  %357 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1015 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %357, i32 0, i32 3
  %358 = load i64, i64* %bytes1015, align 8
  %conv1016 = trunc i64 %358 to i16
  %conv1017 = zext i16 %conv1016 to i32
  %359 = load i64, i64* %nbytes, align 8
  %conv1018 = trunc i64 %359 to i16
  %conv1019 = zext i16 %conv1018 to i32
  %add1020 = add nsw i32 %conv1017, %conv1019
  %conv1021 = trunc i32 %add1020 to i16
  %conv1022 = sext i16 %conv1021 to i32
  br label %cond.end.1034

cond.false.1023:                                  ; preds = %cond.true.1005
  %360 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1024 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %360, i32 0, i32 3
  %361 = load i64, i64* %bytes1024, align 8
  %conv1025 = trunc i64 %361 to i16
  %conv1026 = zext i16 %conv1025 to i32
  %362 = load i64, i64* %nbytes, align 8
  %conv1027 = trunc i64 %362 to i16
  %conv1028 = zext i16 %conv1027 to i32
  %add1029 = add nsw i32 %conv1026, %conv1028
  %sub1030 = sub nsw i32 %add1029, -32768
  %conv1031 = trunc i32 %sub1030 to i16
  %conv1032 = sext i16 %conv1031 to i32
  %add1033 = add nsw i32 %conv1032, -32768
  br label %cond.end.1034

cond.end.1034:                                    ; preds = %cond.false.1023, %cond.true.1014
  %cond1035 = phi i32 [ %conv1022, %cond.true.1014 ], [ %add1033, %cond.false.1023 ]
  %conv1036 = sext i32 %cond1035 to i64
  store i64 %conv1036, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.1037:                                  ; preds = %lor.lhs.false.1000
  %363 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1038 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %363, i32 0, i32 3
  %364 = load i64, i64* %bytes1038, align 8
  %conv1039 = trunc i64 %364 to i16
  %conv1040 = zext i16 %conv1039 to i32
  %365 = load i64, i64* %nbytes, align 8
  %conv1041 = trunc i64 %365 to i16
  %conv1042 = zext i16 %conv1041 to i32
  %add1043 = add nsw i32 %conv1040, %conv1042
  %cmp1044 = icmp sle i32 %add1043, 32767
  br i1 %cmp1044, label %cond.true.1046, label %cond.false.1055

cond.true.1046:                                   ; preds = %cond.false.1037
  %366 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1047 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %366, i32 0, i32 3
  %367 = load i64, i64* %bytes1047, align 8
  %conv1048 = trunc i64 %367 to i16
  %conv1049 = zext i16 %conv1048 to i32
  %368 = load i64, i64* %nbytes, align 8
  %conv1050 = trunc i64 %368 to i16
  %conv1051 = zext i16 %conv1050 to i32
  %add1052 = add nsw i32 %conv1049, %conv1051
  %conv1053 = trunc i32 %add1052 to i16
  %conv1054 = sext i16 %conv1053 to i32
  br label %cond.end.1066

cond.false.1055:                                  ; preds = %cond.false.1037
  %369 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1056 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %369, i32 0, i32 3
  %370 = load i64, i64* %bytes1056, align 8
  %conv1057 = trunc i64 %370 to i16
  %conv1058 = zext i16 %conv1057 to i32
  %371 = load i64, i64* %nbytes, align 8
  %conv1059 = trunc i64 %371 to i16
  %conv1060 = zext i16 %conv1059 to i32
  %add1061 = add nsw i32 %conv1058, %conv1060
  %sub1062 = sub nsw i32 %add1061, -32768
  %conv1063 = trunc i32 %sub1062 to i16
  %conv1064 = sext i16 %conv1063 to i32
  %add1065 = add nsw i32 %conv1064, -32768
  br label %cond.end.1066

cond.end.1066:                                    ; preds = %cond.false.1055, %cond.true.1046
  %cond1067 = phi i32 [ %conv1054, %cond.true.1046 ], [ %add1065, %cond.false.1055 ]
  %conv1068 = sext i32 %cond1067 to i64
  store i64 %conv1068, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.1069:                                  ; preds = %cond.false.547
  br i1 false, label %cond.true.1070, label %cond.false.1507

cond.true.1070:                                   ; preds = %cond.false.1069
  br i1 false, label %cond.true.1071, label %cond.false.1310

cond.true.1071:                                   ; preds = %cond.true.1070
  %372 = load i64, i64* %nbytes, align 8
  %conv1072 = trunc i64 %372 to i32
  %mul1073 = mul nsw i32 0, %conv1072
  %373 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1074 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %373, i32 0, i32 3
  %374 = load i64, i64* %bytes1074, align 8
  %conv1075 = trunc i64 %374 to i32
  %add1076 = add nsw i32 %mul1073, %conv1075
  %mul1077 = mul nsw i32 0, %add1076
  %sub1078 = sub nsw i32 %mul1077, 1
  %cmp1079 = icmp slt i32 %sub1078, 0
  br i1 %cmp1079, label %cond.true.1081, label %cond.false.1105

cond.true.1081:                                   ; preds = %cond.true.1071
  %375 = load i64, i64* %nbytes, align 8
  %conv1082 = trunc i64 %375 to i32
  %mul1083 = mul nsw i32 0, %conv1082
  %376 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1084 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %376, i32 0, i32 3
  %377 = load i64, i64* %bytes1084, align 8
  %conv1085 = trunc i64 %377 to i32
  %add1086 = add nsw i32 %mul1083, %conv1085
  %mul1087 = mul nsw i32 0, %add1086
  %add1088 = add nsw i32 %mul1087, 0
  %neg1089 = xor i32 %add1088, -1
  %cmp1090 = icmp eq i32 %neg1089, -1
  %conv1091 = zext i1 %cmp1090 to i32
  %sub1092 = sub nsw i32 0, %conv1091
  %378 = load i64, i64* %nbytes, align 8
  %conv1093 = trunc i64 %378 to i32
  %mul1094 = mul nsw i32 0, %conv1093
  %379 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1095 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %379, i32 0, i32 3
  %380 = load i64, i64* %bytes1095, align 8
  %conv1096 = trunc i64 %380 to i32
  %add1097 = add nsw i32 %mul1094, %conv1096
  %mul1098 = mul nsw i32 0, %add1097
  %add1099 = add nsw i32 %mul1098, 1
  %shl1100 = shl i32 %add1099, 30
  %sub1101 = sub nsw i32 %shl1100, 1
  %mul1102 = mul nsw i32 %sub1101, 2
  %add1103 = add nsw i32 %mul1102, 1
  %sub1104 = sub nsw i32 %sub1092, %add1103
  br label %cond.end.1113

cond.false.1105:                                  ; preds = %cond.true.1071
  %381 = load i64, i64* %nbytes, align 8
  %conv1106 = trunc i64 %381 to i32
  %mul1107 = mul nsw i32 0, %conv1106
  %382 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1108 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %382, i32 0, i32 3
  %383 = load i64, i64* %bytes1108, align 8
  %conv1109 = trunc i64 %383 to i32
  %add1110 = add nsw i32 %mul1107, %conv1109
  %mul1111 = mul nsw i32 0, %add1110
  %add1112 = add nsw i32 %mul1111, 0
  br label %cond.end.1113

cond.end.1113:                                    ; preds = %cond.false.1105, %cond.true.1081
  %cond1114 = phi i32 [ %sub1104, %cond.true.1081 ], [ %add1112, %cond.false.1105 ]
  %cmp1115 = icmp slt i32 %cond1114, 0
  br i1 %cmp1115, label %cond.true.1117, label %cond.false.1209

cond.true.1117:                                   ; preds = %cond.end.1113
  %384 = load i64, i64* %nbytes, align 8
  %conv1118 = trunc i64 %384 to i32
  %cmp1119 = icmp slt i32 %conv1118, 0
  br i1 %cmp1119, label %cond.true.1121, label %cond.false.1171

cond.true.1121:                                   ; preds = %cond.true.1117
  %385 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1122 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %385, i32 0, i32 3
  %386 = load i64, i64* %bytes1122, align 8
  %conv1123 = trunc i64 %386 to i32
  %387 = load i64, i64* %nbytes, align 8
  %conv1124 = trunc i64 %387 to i32
  %mul1125 = mul nsw i32 0, %conv1124
  %388 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1126 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %388, i32 0, i32 3
  %389 = load i64, i64* %bytes1126, align 8
  %conv1127 = trunc i64 %389 to i32
  %add1128 = add nsw i32 %mul1125, %conv1127
  %mul1129 = mul nsw i32 0, %add1128
  %sub1130 = sub nsw i32 %mul1129, 1
  %cmp1131 = icmp slt i32 %sub1130, 0
  br i1 %cmp1131, label %cond.true.1133, label %cond.false.1157

cond.true.1133:                                   ; preds = %cond.true.1121
  %390 = load i64, i64* %nbytes, align 8
  %conv1134 = trunc i64 %390 to i32
  %mul1135 = mul nsw i32 0, %conv1134
  %391 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1136 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %391, i32 0, i32 3
  %392 = load i64, i64* %bytes1136, align 8
  %conv1137 = trunc i64 %392 to i32
  %add1138 = add nsw i32 %mul1135, %conv1137
  %mul1139 = mul nsw i32 0, %add1138
  %add1140 = add nsw i32 %mul1139, 0
  %neg1141 = xor i32 %add1140, -1
  %cmp1142 = icmp eq i32 %neg1141, -1
  %conv1143 = zext i1 %cmp1142 to i32
  %sub1144 = sub nsw i32 0, %conv1143
  %393 = load i64, i64* %nbytes, align 8
  %conv1145 = trunc i64 %393 to i32
  %mul1146 = mul nsw i32 0, %conv1145
  %394 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1147 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %394, i32 0, i32 3
  %395 = load i64, i64* %bytes1147, align 8
  %conv1148 = trunc i64 %395 to i32
  %add1149 = add nsw i32 %mul1146, %conv1148
  %mul1150 = mul nsw i32 0, %add1149
  %add1151 = add nsw i32 %mul1150, 1
  %shl1152 = shl i32 %add1151, 30
  %sub1153 = sub nsw i32 %shl1152, 1
  %mul1154 = mul nsw i32 %sub1153, 2
  %add1155 = add nsw i32 %mul1154, 1
  %sub1156 = sub nsw i32 %sub1144, %add1155
  br label %cond.end.1165

cond.false.1157:                                  ; preds = %cond.true.1121
  %396 = load i64, i64* %nbytes, align 8
  %conv1158 = trunc i64 %396 to i32
  %mul1159 = mul nsw i32 0, %conv1158
  %397 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1160 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %397, i32 0, i32 3
  %398 = load i64, i64* %bytes1160, align 8
  %conv1161 = trunc i64 %398 to i32
  %add1162 = add nsw i32 %mul1159, %conv1161
  %mul1163 = mul nsw i32 0, %add1162
  %add1164 = add nsw i32 %mul1163, 0
  br label %cond.end.1165

cond.end.1165:                                    ; preds = %cond.false.1157, %cond.true.1133
  %cond1166 = phi i32 [ %sub1156, %cond.true.1133 ], [ %add1164, %cond.false.1157 ]
  %399 = load i64, i64* %nbytes, align 8
  %conv1167 = trunc i64 %399 to i32
  %sub1168 = sub nsw i32 %cond1166, %conv1167
  %cmp1169 = icmp slt i32 %conv1123, %sub1168
  br i1 %cmp1169, label %cond.true.1266, label %lor.lhs.false.1243

cond.false.1171:                                  ; preds = %cond.true.1117
  %400 = load i64, i64* %nbytes, align 8
  %conv1172 = trunc i64 %400 to i32
  %mul1173 = mul nsw i32 0, %conv1172
  %401 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1174 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %401, i32 0, i32 3
  %402 = load i64, i64* %bytes1174, align 8
  %conv1175 = trunc i64 %402 to i32
  %add1176 = add nsw i32 %mul1173, %conv1175
  %mul1177 = mul nsw i32 0, %add1176
  %sub1178 = sub nsw i32 %mul1177, 1
  %cmp1179 = icmp slt i32 %sub1178, 0
  br i1 %cmp1179, label %cond.true.1181, label %cond.false.1193

cond.true.1181:                                   ; preds = %cond.false.1171
  %403 = load i64, i64* %nbytes, align 8
  %conv1182 = trunc i64 %403 to i32
  %mul1183 = mul nsw i32 0, %conv1182
  %404 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1184 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %404, i32 0, i32 3
  %405 = load i64, i64* %bytes1184, align 8
  %conv1185 = trunc i64 %405 to i32
  %add1186 = add nsw i32 %mul1183, %conv1185
  %mul1187 = mul nsw i32 0, %add1186
  %add1188 = add nsw i32 %mul1187, 1
  %shl1189 = shl i32 %add1188, 30
  %sub1190 = sub nsw i32 %shl1189, 1
  %mul1191 = mul nsw i32 %sub1190, 2
  %add1192 = add nsw i32 %mul1191, 1
  br label %cond.end.1201

cond.false.1193:                                  ; preds = %cond.false.1171
  %406 = load i64, i64* %nbytes, align 8
  %conv1194 = trunc i64 %406 to i32
  %mul1195 = mul nsw i32 0, %conv1194
  %407 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1196 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %407, i32 0, i32 3
  %408 = load i64, i64* %bytes1196, align 8
  %conv1197 = trunc i64 %408 to i32
  %add1198 = add nsw i32 %mul1195, %conv1197
  %mul1199 = mul nsw i32 0, %add1198
  %sub1200 = sub nsw i32 %mul1199, 1
  br label %cond.end.1201

cond.end.1201:                                    ; preds = %cond.false.1193, %cond.true.1181
  %cond1202 = phi i32 [ %add1192, %cond.true.1181 ], [ %sub1200, %cond.false.1193 ]
  %409 = load i64, i64* %nbytes, align 8
  %conv1203 = trunc i64 %409 to i32
  %sub1204 = sub nsw i32 %cond1202, %conv1203
  %410 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1205 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %410, i32 0, i32 3
  %411 = load i64, i64* %bytes1205, align 8
  %conv1206 = trunc i64 %411 to i32
  %cmp1207 = icmp slt i32 %sub1204, %conv1206
  br i1 %cmp1207, label %cond.true.1266, label %lor.lhs.false.1243

cond.false.1209:                                  ; preds = %cond.end.1113
  %412 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1210 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %412, i32 0, i32 3
  %413 = load i64, i64* %bytes1210, align 8
  %conv1211 = trunc i64 %413 to i32
  %cmp1212 = icmp slt i32 %conv1211, 0
  br i1 %cmp1212, label %cond.true.1214, label %cond.false.1222

cond.true.1214:                                   ; preds = %cond.false.1209
  %414 = load i64, i64* %nbytes, align 8
  %conv1215 = trunc i64 %414 to i32
  %415 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1216 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %415, i32 0, i32 3
  %416 = load i64, i64* %bytes1216, align 8
  %conv1217 = trunc i64 %416 to i32
  %417 = load i64, i64* %nbytes, align 8
  %conv1218 = trunc i64 %417 to i32
  %add1219 = add nsw i32 %conv1217, %conv1218
  %cmp1220 = icmp sle i32 %conv1215, %add1219
  br i1 %cmp1220, label %cond.true.1266, label %lor.lhs.false.1243

cond.false.1222:                                  ; preds = %cond.false.1209
  %418 = load i64, i64* %nbytes, align 8
  %conv1223 = trunc i64 %418 to i32
  %cmp1224 = icmp slt i32 %conv1223, 0
  br i1 %cmp1224, label %cond.true.1226, label %cond.false.1235

cond.true.1226:                                   ; preds = %cond.false.1222
  %419 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1227 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %419, i32 0, i32 3
  %420 = load i64, i64* %bytes1227, align 8
  %conv1228 = trunc i64 %420 to i32
  %421 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1229 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %421, i32 0, i32 3
  %422 = load i64, i64* %bytes1229, align 8
  %conv1230 = trunc i64 %422 to i32
  %423 = load i64, i64* %nbytes, align 8
  %conv1231 = trunc i64 %423 to i32
  %add1232 = add nsw i32 %conv1230, %conv1231
  %cmp1233 = icmp sle i32 %conv1228, %add1232
  br i1 %cmp1233, label %cond.true.1266, label %lor.lhs.false.1243

cond.false.1235:                                  ; preds = %cond.false.1222
  %424 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1236 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %424, i32 0, i32 3
  %425 = load i64, i64* %bytes1236, align 8
  %conv1237 = trunc i64 %425 to i32
  %426 = load i64, i64* %nbytes, align 8
  %conv1238 = trunc i64 %426 to i32
  %add1239 = add nsw i32 %conv1237, %conv1238
  %427 = load i64, i64* %nbytes, align 8
  %conv1240 = trunc i64 %427 to i32
  %cmp1241 = icmp slt i32 %add1239, %conv1240
  br i1 %cmp1241, label %cond.true.1266, label %lor.lhs.false.1243

lor.lhs.false.1243:                               ; preds = %cond.false.1235, %cond.true.1226, %cond.true.1214, %cond.end.1201, %cond.end.1165
  %428 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1244 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %428, i32 0, i32 3
  %429 = load i64, i64* %bytes1244, align 8
  %conv1245 = trunc i64 %429 to i32
  %430 = load i64, i64* %nbytes, align 8
  %conv1246 = trunc i64 %430 to i32
  %add1247 = add nsw i32 %conv1245, %conv1246
  %mul1248 = mul nsw i32 0, %add1247
  %sub1249 = sub nsw i32 %mul1248, 1
  %cmp1250 = icmp slt i32 %sub1249, 0
  br i1 %cmp1250, label %land.lhs.true.1252, label %lor.lhs.false.1259

land.lhs.true.1252:                               ; preds = %lor.lhs.false.1243
  %431 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1253 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %431, i32 0, i32 3
  %432 = load i64, i64* %bytes1253, align 8
  %conv1254 = trunc i64 %432 to i32
  %433 = load i64, i64* %nbytes, align 8
  %conv1255 = trunc i64 %433 to i32
  %add1256 = add nsw i32 %conv1254, %conv1255
  %cmp1257 = icmp slt i32 %add1256, -2147483648
  br i1 %cmp1257, label %cond.true.1266, label %lor.lhs.false.1259

lor.lhs.false.1259:                               ; preds = %land.lhs.true.1252, %lor.lhs.false.1243
  %434 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1260 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %434, i32 0, i32 3
  %435 = load i64, i64* %bytes1260, align 8
  %conv1261 = trunc i64 %435 to i32
  %436 = load i64, i64* %nbytes, align 8
  %conv1262 = trunc i64 %436 to i32
  %add1263 = add nsw i32 %conv1261, %conv1262
  %cmp1264 = icmp slt i32 2147483647, %add1263
  br i1 %cmp1264, label %cond.true.1266, label %cond.false.1288

cond.true.1266:                                   ; preds = %lor.lhs.false.1259, %land.lhs.true.1252, %cond.false.1235, %cond.true.1226, %cond.true.1214, %cond.end.1201, %cond.end.1165
  %437 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1267 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %437, i32 0, i32 3
  %438 = load i64, i64* %bytes1267, align 8
  %conv1268 = trunc i64 %438 to i32
  %439 = load i64, i64* %nbytes, align 8
  %conv1269 = trunc i64 %439 to i32
  %add1270 = add i32 %conv1268, %conv1269
  %cmp1271 = icmp ule i32 %add1270, 2147483647
  br i1 %cmp1271, label %cond.true.1273, label %cond.false.1278

cond.true.1273:                                   ; preds = %cond.true.1266
  %440 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1274 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %440, i32 0, i32 3
  %441 = load i64, i64* %bytes1274, align 8
  %conv1275 = trunc i64 %441 to i32
  %442 = load i64, i64* %nbytes, align 8
  %conv1276 = trunc i64 %442 to i32
  %add1277 = add i32 %conv1275, %conv1276
  br label %cond.end.1285

cond.false.1278:                                  ; preds = %cond.true.1266
  %443 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1279 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %443, i32 0, i32 3
  %444 = load i64, i64* %bytes1279, align 8
  %conv1280 = trunc i64 %444 to i32
  %445 = load i64, i64* %nbytes, align 8
  %conv1281 = trunc i64 %445 to i32
  %add1282 = add i32 %conv1280, %conv1281
  %sub1283 = sub i32 %add1282, -2147483648
  %add1284 = add nsw i32 %sub1283, -2147483648
  br label %cond.end.1285

cond.end.1285:                                    ; preds = %cond.false.1278, %cond.true.1273
  %cond1286 = phi i32 [ %add1277, %cond.true.1273 ], [ %add1284, %cond.false.1278 ]
  %conv1287 = sext i32 %cond1286 to i64
  store i64 %conv1287, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.1288:                                  ; preds = %lor.lhs.false.1259
  %446 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1289 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %446, i32 0, i32 3
  %447 = load i64, i64* %bytes1289, align 8
  %conv1290 = trunc i64 %447 to i32
  %448 = load i64, i64* %nbytes, align 8
  %conv1291 = trunc i64 %448 to i32
  %add1292 = add i32 %conv1290, %conv1291
  %cmp1293 = icmp ule i32 %add1292, 2147483647
  br i1 %cmp1293, label %cond.true.1295, label %cond.false.1300

cond.true.1295:                                   ; preds = %cond.false.1288
  %449 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1296 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %449, i32 0, i32 3
  %450 = load i64, i64* %bytes1296, align 8
  %conv1297 = trunc i64 %450 to i32
  %451 = load i64, i64* %nbytes, align 8
  %conv1298 = trunc i64 %451 to i32
  %add1299 = add i32 %conv1297, %conv1298
  br label %cond.end.1307

cond.false.1300:                                  ; preds = %cond.false.1288
  %452 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1301 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %452, i32 0, i32 3
  %453 = load i64, i64* %bytes1301, align 8
  %conv1302 = trunc i64 %453 to i32
  %454 = load i64, i64* %nbytes, align 8
  %conv1303 = trunc i64 %454 to i32
  %add1304 = add i32 %conv1302, %conv1303
  %sub1305 = sub i32 %add1304, -2147483648
  %add1306 = add nsw i32 %sub1305, -2147483648
  br label %cond.end.1307

cond.end.1307:                                    ; preds = %cond.false.1300, %cond.true.1295
  %cond1308 = phi i32 [ %add1299, %cond.true.1295 ], [ %add1306, %cond.false.1300 ]
  %conv1309 = sext i32 %cond1308 to i64
  store i64 %conv1309, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.1310:                                  ; preds = %cond.true.1070
  %455 = load i64, i64* %nbytes, align 8
  %mul1311 = mul nsw i64 0, %455
  %456 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1312 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %456, i32 0, i32 3
  %457 = load i64, i64* %bytes1312, align 8
  %add1313 = add nsw i64 %mul1311, %457
  %mul1314 = mul nsw i64 0, %add1313
  %sub1315 = sub nsw i64 %mul1314, 1
  %cmp1316 = icmp slt i64 %sub1315, 0
  br i1 %cmp1316, label %cond.true.1318, label %cond.false.1339

cond.true.1318:                                   ; preds = %cond.false.1310
  %458 = load i64, i64* %nbytes, align 8
  %mul1319 = mul nsw i64 0, %458
  %459 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1320 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %459, i32 0, i32 3
  %460 = load i64, i64* %bytes1320, align 8
  %add1321 = add nsw i64 %mul1319, %460
  %mul1322 = mul nsw i64 0, %add1321
  %add1323 = add nsw i64 %mul1322, 0
  %neg1324 = xor i64 %add1323, -1
  %cmp1325 = icmp eq i64 %neg1324, -1
  %conv1326 = zext i1 %cmp1325 to i32
  %sub1327 = sub nsw i32 0, %conv1326
  %conv1328 = sext i32 %sub1327 to i64
  %461 = load i64, i64* %nbytes, align 8
  %mul1329 = mul nsw i64 0, %461
  %462 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1330 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %462, i32 0, i32 3
  %463 = load i64, i64* %bytes1330, align 8
  %add1331 = add nsw i64 %mul1329, %463
  %mul1332 = mul nsw i64 0, %add1331
  %add1333 = add nsw i64 %mul1332, 1
  %shl1334 = shl i64 %add1333, 62
  %sub1335 = sub nsw i64 %shl1334, 1
  %mul1336 = mul nsw i64 %sub1335, 2
  %add1337 = add nsw i64 %mul1336, 1
  %sub1338 = sub nsw i64 %conv1328, %add1337
  br label %cond.end.1345

cond.false.1339:                                  ; preds = %cond.false.1310
  %464 = load i64, i64* %nbytes, align 8
  %mul1340 = mul nsw i64 0, %464
  %465 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1341 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %465, i32 0, i32 3
  %466 = load i64, i64* %bytes1341, align 8
  %add1342 = add nsw i64 %mul1340, %466
  %mul1343 = mul nsw i64 0, %add1342
  %add1344 = add nsw i64 %mul1343, 0
  br label %cond.end.1345

cond.end.1345:                                    ; preds = %cond.false.1339, %cond.true.1318
  %cond1346 = phi i64 [ %sub1338, %cond.true.1318 ], [ %add1344, %cond.false.1339 ]
  %cmp1347 = icmp slt i64 %cond1346, 0
  br i1 %cmp1347, label %cond.true.1349, label %cond.false.1423

cond.true.1349:                                   ; preds = %cond.end.1345
  %467 = load i64, i64* %nbytes, align 8
  %cmp1350 = icmp slt i64 %467, 0
  br i1 %cmp1350, label %cond.true.1352, label %cond.false.1393

cond.true.1352:                                   ; preds = %cond.true.1349
  %468 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1353 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %468, i32 0, i32 3
  %469 = load i64, i64* %bytes1353, align 8
  %470 = load i64, i64* %nbytes, align 8
  %mul1354 = mul nsw i64 0, %470
  %471 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1355 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %471, i32 0, i32 3
  %472 = load i64, i64* %bytes1355, align 8
  %add1356 = add nsw i64 %mul1354, %472
  %mul1357 = mul nsw i64 0, %add1356
  %sub1358 = sub nsw i64 %mul1357, 1
  %cmp1359 = icmp slt i64 %sub1358, 0
  br i1 %cmp1359, label %cond.true.1361, label %cond.false.1382

cond.true.1361:                                   ; preds = %cond.true.1352
  %473 = load i64, i64* %nbytes, align 8
  %mul1362 = mul nsw i64 0, %473
  %474 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1363 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %474, i32 0, i32 3
  %475 = load i64, i64* %bytes1363, align 8
  %add1364 = add nsw i64 %mul1362, %475
  %mul1365 = mul nsw i64 0, %add1364
  %add1366 = add nsw i64 %mul1365, 0
  %neg1367 = xor i64 %add1366, -1
  %cmp1368 = icmp eq i64 %neg1367, -1
  %conv1369 = zext i1 %cmp1368 to i32
  %sub1370 = sub nsw i32 0, %conv1369
  %conv1371 = sext i32 %sub1370 to i64
  %476 = load i64, i64* %nbytes, align 8
  %mul1372 = mul nsw i64 0, %476
  %477 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1373 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %477, i32 0, i32 3
  %478 = load i64, i64* %bytes1373, align 8
  %add1374 = add nsw i64 %mul1372, %478
  %mul1375 = mul nsw i64 0, %add1374
  %add1376 = add nsw i64 %mul1375, 1
  %shl1377 = shl i64 %add1376, 62
  %sub1378 = sub nsw i64 %shl1377, 1
  %mul1379 = mul nsw i64 %sub1378, 2
  %add1380 = add nsw i64 %mul1379, 1
  %sub1381 = sub nsw i64 %conv1371, %add1380
  br label %cond.end.1388

cond.false.1382:                                  ; preds = %cond.true.1352
  %479 = load i64, i64* %nbytes, align 8
  %mul1383 = mul nsw i64 0, %479
  %480 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1384 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %480, i32 0, i32 3
  %481 = load i64, i64* %bytes1384, align 8
  %add1385 = add nsw i64 %mul1383, %481
  %mul1386 = mul nsw i64 0, %add1385
  %add1387 = add nsw i64 %mul1386, 0
  br label %cond.end.1388

cond.end.1388:                                    ; preds = %cond.false.1382, %cond.true.1361
  %cond1389 = phi i64 [ %sub1381, %cond.true.1361 ], [ %add1387, %cond.false.1382 ]
  %482 = load i64, i64* %nbytes, align 8
  %sub1390 = sub nsw i64 %cond1389, %482
  %cmp1391 = icmp slt i64 %469, %sub1390
  br i1 %cmp1391, label %cond.true.1463, label %lor.lhs.false.1446

cond.false.1393:                                  ; preds = %cond.true.1349
  %483 = load i64, i64* %nbytes, align 8
  %mul1394 = mul nsw i64 0, %483
  %484 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1395 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %484, i32 0, i32 3
  %485 = load i64, i64* %bytes1395, align 8
  %add1396 = add nsw i64 %mul1394, %485
  %mul1397 = mul nsw i64 0, %add1396
  %sub1398 = sub nsw i64 %mul1397, 1
  %cmp1399 = icmp slt i64 %sub1398, 0
  br i1 %cmp1399, label %cond.true.1401, label %cond.false.1411

cond.true.1401:                                   ; preds = %cond.false.1393
  %486 = load i64, i64* %nbytes, align 8
  %mul1402 = mul nsw i64 0, %486
  %487 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1403 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %487, i32 0, i32 3
  %488 = load i64, i64* %bytes1403, align 8
  %add1404 = add nsw i64 %mul1402, %488
  %mul1405 = mul nsw i64 0, %add1404
  %add1406 = add nsw i64 %mul1405, 1
  %shl1407 = shl i64 %add1406, 62
  %sub1408 = sub nsw i64 %shl1407, 1
  %mul1409 = mul nsw i64 %sub1408, 2
  %add1410 = add nsw i64 %mul1409, 1
  br label %cond.end.1417

cond.false.1411:                                  ; preds = %cond.false.1393
  %489 = load i64, i64* %nbytes, align 8
  %mul1412 = mul nsw i64 0, %489
  %490 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1413 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %490, i32 0, i32 3
  %491 = load i64, i64* %bytes1413, align 8
  %add1414 = add nsw i64 %mul1412, %491
  %mul1415 = mul nsw i64 0, %add1414
  %sub1416 = sub nsw i64 %mul1415, 1
  br label %cond.end.1417

cond.end.1417:                                    ; preds = %cond.false.1411, %cond.true.1401
  %cond1418 = phi i64 [ %add1410, %cond.true.1401 ], [ %sub1416, %cond.false.1411 ]
  %492 = load i64, i64* %nbytes, align 8
  %sub1419 = sub nsw i64 %cond1418, %492
  %493 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1420 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %493, i32 0, i32 3
  %494 = load i64, i64* %bytes1420, align 8
  %cmp1421 = icmp slt i64 %sub1419, %494
  br i1 %cmp1421, label %cond.true.1463, label %lor.lhs.false.1446

cond.false.1423:                                  ; preds = %cond.end.1345
  %495 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1424 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %495, i32 0, i32 3
  %496 = load i64, i64* %bytes1424, align 8
  %cmp1425 = icmp slt i64 %496, 0
  br i1 %cmp1425, label %cond.true.1427, label %cond.false.1432

cond.true.1427:                                   ; preds = %cond.false.1423
  %497 = load i64, i64* %nbytes, align 8
  %498 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1428 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %498, i32 0, i32 3
  %499 = load i64, i64* %bytes1428, align 8
  %500 = load i64, i64* %nbytes, align 8
  %add1429 = add nsw i64 %499, %500
  %cmp1430 = icmp sle i64 %497, %add1429
  br i1 %cmp1430, label %cond.true.1463, label %lor.lhs.false.1446

cond.false.1432:                                  ; preds = %cond.false.1423
  %501 = load i64, i64* %nbytes, align 8
  %cmp1433 = icmp slt i64 %501, 0
  br i1 %cmp1433, label %cond.true.1435, label %cond.false.1441

cond.true.1435:                                   ; preds = %cond.false.1432
  %502 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1436 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %502, i32 0, i32 3
  %503 = load i64, i64* %bytes1436, align 8
  %504 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1437 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %504, i32 0, i32 3
  %505 = load i64, i64* %bytes1437, align 8
  %506 = load i64, i64* %nbytes, align 8
  %add1438 = add nsw i64 %505, %506
  %cmp1439 = icmp sle i64 %503, %add1438
  br i1 %cmp1439, label %cond.true.1463, label %lor.lhs.false.1446

cond.false.1441:                                  ; preds = %cond.false.1432
  %507 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1442 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %507, i32 0, i32 3
  %508 = load i64, i64* %bytes1442, align 8
  %509 = load i64, i64* %nbytes, align 8
  %add1443 = add nsw i64 %508, %509
  %510 = load i64, i64* %nbytes, align 8
  %cmp1444 = icmp slt i64 %add1443, %510
  br i1 %cmp1444, label %cond.true.1463, label %lor.lhs.false.1446

lor.lhs.false.1446:                               ; preds = %cond.false.1441, %cond.true.1435, %cond.true.1427, %cond.end.1417, %cond.end.1388
  %511 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1447 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %511, i32 0, i32 3
  %512 = load i64, i64* %bytes1447, align 8
  %513 = load i64, i64* %nbytes, align 8
  %add1448 = add nsw i64 %512, %513
  %mul1449 = mul nsw i64 0, %add1448
  %sub1450 = sub nsw i64 %mul1449, 1
  %cmp1451 = icmp slt i64 %sub1450, 0
  br i1 %cmp1451, label %land.lhs.true.1453, label %lor.lhs.false.1458

land.lhs.true.1453:                               ; preds = %lor.lhs.false.1446
  %514 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1454 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %514, i32 0, i32 3
  %515 = load i64, i64* %bytes1454, align 8
  %516 = load i64, i64* %nbytes, align 8
  %add1455 = add nsw i64 %515, %516
  %cmp1456 = icmp slt i64 %add1455, -2147483648
  br i1 %cmp1456, label %cond.true.1463, label %lor.lhs.false.1458

lor.lhs.false.1458:                               ; preds = %land.lhs.true.1453, %lor.lhs.false.1446
  %517 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1459 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %517, i32 0, i32 3
  %518 = load i64, i64* %bytes1459, align 8
  %519 = load i64, i64* %nbytes, align 8
  %add1460 = add nsw i64 %518, %519
  %cmp1461 = icmp slt i64 2147483647, %add1460
  br i1 %cmp1461, label %cond.true.1463, label %cond.false.1485

cond.true.1463:                                   ; preds = %lor.lhs.false.1458, %land.lhs.true.1453, %cond.false.1441, %cond.true.1435, %cond.true.1427, %cond.end.1417, %cond.end.1388
  %520 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1464 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %520, i32 0, i32 3
  %521 = load i64, i64* %bytes1464, align 8
  %conv1465 = trunc i64 %521 to i32
  %522 = load i64, i64* %nbytes, align 8
  %conv1466 = trunc i64 %522 to i32
  %add1467 = add i32 %conv1465, %conv1466
  %cmp1468 = icmp ule i32 %add1467, 2147483647
  br i1 %cmp1468, label %cond.true.1470, label %cond.false.1475

cond.true.1470:                                   ; preds = %cond.true.1463
  %523 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1471 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %523, i32 0, i32 3
  %524 = load i64, i64* %bytes1471, align 8
  %conv1472 = trunc i64 %524 to i32
  %525 = load i64, i64* %nbytes, align 8
  %conv1473 = trunc i64 %525 to i32
  %add1474 = add i32 %conv1472, %conv1473
  br label %cond.end.1482

cond.false.1475:                                  ; preds = %cond.true.1463
  %526 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1476 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %526, i32 0, i32 3
  %527 = load i64, i64* %bytes1476, align 8
  %conv1477 = trunc i64 %527 to i32
  %528 = load i64, i64* %nbytes, align 8
  %conv1478 = trunc i64 %528 to i32
  %add1479 = add i32 %conv1477, %conv1478
  %sub1480 = sub i32 %add1479, -2147483648
  %add1481 = add nsw i32 %sub1480, -2147483648
  br label %cond.end.1482

cond.end.1482:                                    ; preds = %cond.false.1475, %cond.true.1470
  %cond1483 = phi i32 [ %add1474, %cond.true.1470 ], [ %add1481, %cond.false.1475 ]
  %conv1484 = sext i32 %cond1483 to i64
  store i64 %conv1484, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.1485:                                  ; preds = %lor.lhs.false.1458
  %529 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1486 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %529, i32 0, i32 3
  %530 = load i64, i64* %bytes1486, align 8
  %conv1487 = trunc i64 %530 to i32
  %531 = load i64, i64* %nbytes, align 8
  %conv1488 = trunc i64 %531 to i32
  %add1489 = add i32 %conv1487, %conv1488
  %cmp1490 = icmp ule i32 %add1489, 2147483647
  br i1 %cmp1490, label %cond.true.1492, label %cond.false.1497

cond.true.1492:                                   ; preds = %cond.false.1485
  %532 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1493 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %532, i32 0, i32 3
  %533 = load i64, i64* %bytes1493, align 8
  %conv1494 = trunc i64 %533 to i32
  %534 = load i64, i64* %nbytes, align 8
  %conv1495 = trunc i64 %534 to i32
  %add1496 = add i32 %conv1494, %conv1495
  br label %cond.end.1504

cond.false.1497:                                  ; preds = %cond.false.1485
  %535 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1498 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %535, i32 0, i32 3
  %536 = load i64, i64* %bytes1498, align 8
  %conv1499 = trunc i64 %536 to i32
  %537 = load i64, i64* %nbytes, align 8
  %conv1500 = trunc i64 %537 to i32
  %add1501 = add i32 %conv1499, %conv1500
  %sub1502 = sub i32 %add1501, -2147483648
  %add1503 = add nsw i32 %sub1502, -2147483648
  br label %cond.end.1504

cond.end.1504:                                    ; preds = %cond.false.1497, %cond.true.1492
  %cond1505 = phi i32 [ %add1496, %cond.true.1492 ], [ %add1503, %cond.false.1497 ]
  %conv1506 = sext i32 %cond1505 to i64
  store i64 %conv1506, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.1507:                                  ; preds = %cond.false.1069
  br i1 true, label %cond.true.1508, label %cond.false.1875

cond.true.1508:                                   ; preds = %cond.false.1507
  br i1 false, label %cond.true.1509, label %cond.false.1692

cond.true.1509:                                   ; preds = %cond.true.1508
  %538 = load i64, i64* %nbytes, align 8
  %mul1510 = mul nsw i64 0, %538
  %539 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1511 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %539, i32 0, i32 3
  %540 = load i64, i64* %bytes1511, align 8
  %add1512 = add nsw i64 %mul1510, %540
  %mul1513 = mul nsw i64 0, %add1512
  %sub1514 = sub nsw i64 %mul1513, 1
  %cmp1515 = icmp slt i64 %sub1514, 0
  br i1 %cmp1515, label %cond.true.1517, label %cond.false.1538

cond.true.1517:                                   ; preds = %cond.true.1509
  %541 = load i64, i64* %nbytes, align 8
  %mul1518 = mul nsw i64 0, %541
  %542 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1519 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %542, i32 0, i32 3
  %543 = load i64, i64* %bytes1519, align 8
  %add1520 = add nsw i64 %mul1518, %543
  %mul1521 = mul nsw i64 0, %add1520
  %add1522 = add nsw i64 %mul1521, 0
  %neg1523 = xor i64 %add1522, -1
  %cmp1524 = icmp eq i64 %neg1523, -1
  %conv1525 = zext i1 %cmp1524 to i32
  %sub1526 = sub nsw i32 0, %conv1525
  %conv1527 = sext i32 %sub1526 to i64
  %544 = load i64, i64* %nbytes, align 8
  %mul1528 = mul nsw i64 0, %544
  %545 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1529 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %545, i32 0, i32 3
  %546 = load i64, i64* %bytes1529, align 8
  %add1530 = add nsw i64 %mul1528, %546
  %mul1531 = mul nsw i64 0, %add1530
  %add1532 = add nsw i64 %mul1531, 1
  %shl1533 = shl i64 %add1532, 62
  %sub1534 = sub nsw i64 %shl1533, 1
  %mul1535 = mul nsw i64 %sub1534, 2
  %add1536 = add nsw i64 %mul1535, 1
  %sub1537 = sub nsw i64 %conv1527, %add1536
  br label %cond.end.1544

cond.false.1538:                                  ; preds = %cond.true.1509
  %547 = load i64, i64* %nbytes, align 8
  %mul1539 = mul nsw i64 0, %547
  %548 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1540 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %548, i32 0, i32 3
  %549 = load i64, i64* %bytes1540, align 8
  %add1541 = add nsw i64 %mul1539, %549
  %mul1542 = mul nsw i64 0, %add1541
  %add1543 = add nsw i64 %mul1542, 0
  br label %cond.end.1544

cond.end.1544:                                    ; preds = %cond.false.1538, %cond.true.1517
  %cond1545 = phi i64 [ %sub1537, %cond.true.1517 ], [ %add1543, %cond.false.1538 ]
  %cmp1546 = icmp slt i64 %cond1545, 0
  br i1 %cmp1546, label %cond.true.1548, label %cond.false.1622

cond.true.1548:                                   ; preds = %cond.end.1544
  %550 = load i64, i64* %nbytes, align 8
  %cmp1549 = icmp slt i64 %550, 0
  br i1 %cmp1549, label %cond.true.1551, label %cond.false.1592

cond.true.1551:                                   ; preds = %cond.true.1548
  %551 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1552 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %551, i32 0, i32 3
  %552 = load i64, i64* %bytes1552, align 8
  %553 = load i64, i64* %nbytes, align 8
  %mul1553 = mul nsw i64 0, %553
  %554 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1554 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %554, i32 0, i32 3
  %555 = load i64, i64* %bytes1554, align 8
  %add1555 = add nsw i64 %mul1553, %555
  %mul1556 = mul nsw i64 0, %add1555
  %sub1557 = sub nsw i64 %mul1556, 1
  %cmp1558 = icmp slt i64 %sub1557, 0
  br i1 %cmp1558, label %cond.true.1560, label %cond.false.1581

cond.true.1560:                                   ; preds = %cond.true.1551
  %556 = load i64, i64* %nbytes, align 8
  %mul1561 = mul nsw i64 0, %556
  %557 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1562 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %557, i32 0, i32 3
  %558 = load i64, i64* %bytes1562, align 8
  %add1563 = add nsw i64 %mul1561, %558
  %mul1564 = mul nsw i64 0, %add1563
  %add1565 = add nsw i64 %mul1564, 0
  %neg1566 = xor i64 %add1565, -1
  %cmp1567 = icmp eq i64 %neg1566, -1
  %conv1568 = zext i1 %cmp1567 to i32
  %sub1569 = sub nsw i32 0, %conv1568
  %conv1570 = sext i32 %sub1569 to i64
  %559 = load i64, i64* %nbytes, align 8
  %mul1571 = mul nsw i64 0, %559
  %560 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1572 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %560, i32 0, i32 3
  %561 = load i64, i64* %bytes1572, align 8
  %add1573 = add nsw i64 %mul1571, %561
  %mul1574 = mul nsw i64 0, %add1573
  %add1575 = add nsw i64 %mul1574, 1
  %shl1576 = shl i64 %add1575, 62
  %sub1577 = sub nsw i64 %shl1576, 1
  %mul1578 = mul nsw i64 %sub1577, 2
  %add1579 = add nsw i64 %mul1578, 1
  %sub1580 = sub nsw i64 %conv1570, %add1579
  br label %cond.end.1587

cond.false.1581:                                  ; preds = %cond.true.1551
  %562 = load i64, i64* %nbytes, align 8
  %mul1582 = mul nsw i64 0, %562
  %563 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1583 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %563, i32 0, i32 3
  %564 = load i64, i64* %bytes1583, align 8
  %add1584 = add nsw i64 %mul1582, %564
  %mul1585 = mul nsw i64 0, %add1584
  %add1586 = add nsw i64 %mul1585, 0
  br label %cond.end.1587

cond.end.1587:                                    ; preds = %cond.false.1581, %cond.true.1560
  %cond1588 = phi i64 [ %sub1580, %cond.true.1560 ], [ %add1586, %cond.false.1581 ]
  %565 = load i64, i64* %nbytes, align 8
  %sub1589 = sub nsw i64 %cond1588, %565
  %cmp1590 = icmp slt i64 %552, %sub1589
  br i1 %cmp1590, label %cond.true.1662, label %lor.lhs.false.1645

cond.false.1592:                                  ; preds = %cond.true.1548
  %566 = load i64, i64* %nbytes, align 8
  %mul1593 = mul nsw i64 0, %566
  %567 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1594 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %567, i32 0, i32 3
  %568 = load i64, i64* %bytes1594, align 8
  %add1595 = add nsw i64 %mul1593, %568
  %mul1596 = mul nsw i64 0, %add1595
  %sub1597 = sub nsw i64 %mul1596, 1
  %cmp1598 = icmp slt i64 %sub1597, 0
  br i1 %cmp1598, label %cond.true.1600, label %cond.false.1610

cond.true.1600:                                   ; preds = %cond.false.1592
  %569 = load i64, i64* %nbytes, align 8
  %mul1601 = mul nsw i64 0, %569
  %570 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1602 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %570, i32 0, i32 3
  %571 = load i64, i64* %bytes1602, align 8
  %add1603 = add nsw i64 %mul1601, %571
  %mul1604 = mul nsw i64 0, %add1603
  %add1605 = add nsw i64 %mul1604, 1
  %shl1606 = shl i64 %add1605, 62
  %sub1607 = sub nsw i64 %shl1606, 1
  %mul1608 = mul nsw i64 %sub1607, 2
  %add1609 = add nsw i64 %mul1608, 1
  br label %cond.end.1616

cond.false.1610:                                  ; preds = %cond.false.1592
  %572 = load i64, i64* %nbytes, align 8
  %mul1611 = mul nsw i64 0, %572
  %573 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1612 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %573, i32 0, i32 3
  %574 = load i64, i64* %bytes1612, align 8
  %add1613 = add nsw i64 %mul1611, %574
  %mul1614 = mul nsw i64 0, %add1613
  %sub1615 = sub nsw i64 %mul1614, 1
  br label %cond.end.1616

cond.end.1616:                                    ; preds = %cond.false.1610, %cond.true.1600
  %cond1617 = phi i64 [ %add1609, %cond.true.1600 ], [ %sub1615, %cond.false.1610 ]
  %575 = load i64, i64* %nbytes, align 8
  %sub1618 = sub nsw i64 %cond1617, %575
  %576 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1619 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %576, i32 0, i32 3
  %577 = load i64, i64* %bytes1619, align 8
  %cmp1620 = icmp slt i64 %sub1618, %577
  br i1 %cmp1620, label %cond.true.1662, label %lor.lhs.false.1645

cond.false.1622:                                  ; preds = %cond.end.1544
  %578 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1623 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %578, i32 0, i32 3
  %579 = load i64, i64* %bytes1623, align 8
  %cmp1624 = icmp slt i64 %579, 0
  br i1 %cmp1624, label %cond.true.1626, label %cond.false.1631

cond.true.1626:                                   ; preds = %cond.false.1622
  %580 = load i64, i64* %nbytes, align 8
  %581 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1627 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %581, i32 0, i32 3
  %582 = load i64, i64* %bytes1627, align 8
  %583 = load i64, i64* %nbytes, align 8
  %add1628 = add nsw i64 %582, %583
  %cmp1629 = icmp sle i64 %580, %add1628
  br i1 %cmp1629, label %cond.true.1662, label %lor.lhs.false.1645

cond.false.1631:                                  ; preds = %cond.false.1622
  %584 = load i64, i64* %nbytes, align 8
  %cmp1632 = icmp slt i64 %584, 0
  br i1 %cmp1632, label %cond.true.1634, label %cond.false.1640

cond.true.1634:                                   ; preds = %cond.false.1631
  %585 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1635 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %585, i32 0, i32 3
  %586 = load i64, i64* %bytes1635, align 8
  %587 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1636 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %587, i32 0, i32 3
  %588 = load i64, i64* %bytes1636, align 8
  %589 = load i64, i64* %nbytes, align 8
  %add1637 = add nsw i64 %588, %589
  %cmp1638 = icmp sle i64 %586, %add1637
  br i1 %cmp1638, label %cond.true.1662, label %lor.lhs.false.1645

cond.false.1640:                                  ; preds = %cond.false.1631
  %590 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1641 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %590, i32 0, i32 3
  %591 = load i64, i64* %bytes1641, align 8
  %592 = load i64, i64* %nbytes, align 8
  %add1642 = add nsw i64 %591, %592
  %593 = load i64, i64* %nbytes, align 8
  %cmp1643 = icmp slt i64 %add1642, %593
  br i1 %cmp1643, label %cond.true.1662, label %lor.lhs.false.1645

lor.lhs.false.1645:                               ; preds = %cond.false.1640, %cond.true.1634, %cond.true.1626, %cond.end.1616, %cond.end.1587
  %594 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1646 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %594, i32 0, i32 3
  %595 = load i64, i64* %bytes1646, align 8
  %596 = load i64, i64* %nbytes, align 8
  %add1647 = add nsw i64 %595, %596
  %mul1648 = mul nsw i64 0, %add1647
  %sub1649 = sub nsw i64 %mul1648, 1
  %cmp1650 = icmp slt i64 %sub1649, 0
  br i1 %cmp1650, label %land.lhs.true.1652, label %lor.lhs.false.1657

land.lhs.true.1652:                               ; preds = %lor.lhs.false.1645
  %597 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1653 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %597, i32 0, i32 3
  %598 = load i64, i64* %bytes1653, align 8
  %599 = load i64, i64* %nbytes, align 8
  %add1654 = add nsw i64 %598, %599
  %cmp1655 = icmp slt i64 %add1654, -9223372036854775808
  br i1 %cmp1655, label %cond.true.1662, label %lor.lhs.false.1657

lor.lhs.false.1657:                               ; preds = %land.lhs.true.1652, %lor.lhs.false.1645
  %600 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1658 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %600, i32 0, i32 3
  %601 = load i64, i64* %bytes1658, align 8
  %602 = load i64, i64* %nbytes, align 8
  %add1659 = add nsw i64 %601, %602
  %cmp1660 = icmp slt i64 9223372036854775807, %add1659
  br i1 %cmp1660, label %cond.true.1662, label %cond.false.1677

cond.true.1662:                                   ; preds = %lor.lhs.false.1657, %land.lhs.true.1652, %cond.false.1640, %cond.true.1634, %cond.true.1626, %cond.end.1616, %cond.end.1587
  %603 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1663 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %603, i32 0, i32 3
  %604 = load i64, i64* %bytes1663, align 8
  %605 = load i64, i64* %nbytes, align 8
  %add1664 = add i64 %604, %605
  %cmp1665 = icmp ule i64 %add1664, 9223372036854775807
  br i1 %cmp1665, label %cond.true.1667, label %cond.false.1670

cond.true.1667:                                   ; preds = %cond.true.1662
  %606 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1668 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %606, i32 0, i32 3
  %607 = load i64, i64* %bytes1668, align 8
  %608 = load i64, i64* %nbytes, align 8
  %add1669 = add i64 %607, %608
  br label %cond.end.1675

cond.false.1670:                                  ; preds = %cond.true.1662
  %609 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1671 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %609, i32 0, i32 3
  %610 = load i64, i64* %bytes1671, align 8
  %611 = load i64, i64* %nbytes, align 8
  %add1672 = add i64 %610, %611
  %sub1673 = sub i64 %add1672, -9223372036854775808
  %add1674 = add nsw i64 %sub1673, -9223372036854775808
  br label %cond.end.1675

cond.end.1675:                                    ; preds = %cond.false.1670, %cond.true.1667
  %cond1676 = phi i64 [ %add1669, %cond.true.1667 ], [ %add1674, %cond.false.1670 ]
  store i64 %cond1676, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.1677:                                  ; preds = %lor.lhs.false.1657
  %612 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1678 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %612, i32 0, i32 3
  %613 = load i64, i64* %bytes1678, align 8
  %614 = load i64, i64* %nbytes, align 8
  %add1679 = add i64 %613, %614
  %cmp1680 = icmp ule i64 %add1679, 9223372036854775807
  br i1 %cmp1680, label %cond.true.1682, label %cond.false.1685

cond.true.1682:                                   ; preds = %cond.false.1677
  %615 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1683 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %615, i32 0, i32 3
  %616 = load i64, i64* %bytes1683, align 8
  %617 = load i64, i64* %nbytes, align 8
  %add1684 = add i64 %616, %617
  br label %cond.end.1690

cond.false.1685:                                  ; preds = %cond.false.1677
  %618 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1686 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %618, i32 0, i32 3
  %619 = load i64, i64* %bytes1686, align 8
  %620 = load i64, i64* %nbytes, align 8
  %add1687 = add i64 %619, %620
  %sub1688 = sub i64 %add1687, -9223372036854775808
  %add1689 = add nsw i64 %sub1688, -9223372036854775808
  br label %cond.end.1690

cond.end.1690:                                    ; preds = %cond.false.1685, %cond.true.1682
  %cond1691 = phi i64 [ %add1684, %cond.true.1682 ], [ %add1689, %cond.false.1685 ]
  store i64 %cond1691, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.1692:                                  ; preds = %cond.true.1508
  %621 = load i64, i64* %nbytes, align 8
  %mul1693 = mul nsw i64 0, %621
  %622 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1694 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %622, i32 0, i32 3
  %623 = load i64, i64* %bytes1694, align 8
  %add1695 = add nsw i64 %mul1693, %623
  %mul1696 = mul nsw i64 0, %add1695
  %sub1697 = sub nsw i64 %mul1696, 1
  %cmp1698 = icmp slt i64 %sub1697, 0
  br i1 %cmp1698, label %cond.true.1700, label %cond.false.1721

cond.true.1700:                                   ; preds = %cond.false.1692
  %624 = load i64, i64* %nbytes, align 8
  %mul1701 = mul nsw i64 0, %624
  %625 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1702 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %625, i32 0, i32 3
  %626 = load i64, i64* %bytes1702, align 8
  %add1703 = add nsw i64 %mul1701, %626
  %mul1704 = mul nsw i64 0, %add1703
  %add1705 = add nsw i64 %mul1704, 0
  %neg1706 = xor i64 %add1705, -1
  %cmp1707 = icmp eq i64 %neg1706, -1
  %conv1708 = zext i1 %cmp1707 to i32
  %sub1709 = sub nsw i32 0, %conv1708
  %conv1710 = sext i32 %sub1709 to i64
  %627 = load i64, i64* %nbytes, align 8
  %mul1711 = mul nsw i64 0, %627
  %628 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1712 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %628, i32 0, i32 3
  %629 = load i64, i64* %bytes1712, align 8
  %add1713 = add nsw i64 %mul1711, %629
  %mul1714 = mul nsw i64 0, %add1713
  %add1715 = add nsw i64 %mul1714, 1
  %shl1716 = shl i64 %add1715, 62
  %sub1717 = sub nsw i64 %shl1716, 1
  %mul1718 = mul nsw i64 %sub1717, 2
  %add1719 = add nsw i64 %mul1718, 1
  %sub1720 = sub nsw i64 %conv1710, %add1719
  br label %cond.end.1727

cond.false.1721:                                  ; preds = %cond.false.1692
  %630 = load i64, i64* %nbytes, align 8
  %mul1722 = mul nsw i64 0, %630
  %631 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1723 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %631, i32 0, i32 3
  %632 = load i64, i64* %bytes1723, align 8
  %add1724 = add nsw i64 %mul1722, %632
  %mul1725 = mul nsw i64 0, %add1724
  %add1726 = add nsw i64 %mul1725, 0
  br label %cond.end.1727

cond.end.1727:                                    ; preds = %cond.false.1721, %cond.true.1700
  %cond1728 = phi i64 [ %sub1720, %cond.true.1700 ], [ %add1726, %cond.false.1721 ]
  %cmp1729 = icmp slt i64 %cond1728, 0
  br i1 %cmp1729, label %cond.true.1731, label %cond.false.1805

cond.true.1731:                                   ; preds = %cond.end.1727
  %633 = load i64, i64* %nbytes, align 8
  %cmp1732 = icmp slt i64 %633, 0
  br i1 %cmp1732, label %cond.true.1734, label %cond.false.1775

cond.true.1734:                                   ; preds = %cond.true.1731
  %634 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1735 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %634, i32 0, i32 3
  %635 = load i64, i64* %bytes1735, align 8
  %636 = load i64, i64* %nbytes, align 8
  %mul1736 = mul nsw i64 0, %636
  %637 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1737 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %637, i32 0, i32 3
  %638 = load i64, i64* %bytes1737, align 8
  %add1738 = add nsw i64 %mul1736, %638
  %mul1739 = mul nsw i64 0, %add1738
  %sub1740 = sub nsw i64 %mul1739, 1
  %cmp1741 = icmp slt i64 %sub1740, 0
  br i1 %cmp1741, label %cond.true.1743, label %cond.false.1764

cond.true.1743:                                   ; preds = %cond.true.1734
  %639 = load i64, i64* %nbytes, align 8
  %mul1744 = mul nsw i64 0, %639
  %640 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1745 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %640, i32 0, i32 3
  %641 = load i64, i64* %bytes1745, align 8
  %add1746 = add nsw i64 %mul1744, %641
  %mul1747 = mul nsw i64 0, %add1746
  %add1748 = add nsw i64 %mul1747, 0
  %neg1749 = xor i64 %add1748, -1
  %cmp1750 = icmp eq i64 %neg1749, -1
  %conv1751 = zext i1 %cmp1750 to i32
  %sub1752 = sub nsw i32 0, %conv1751
  %conv1753 = sext i32 %sub1752 to i64
  %642 = load i64, i64* %nbytes, align 8
  %mul1754 = mul nsw i64 0, %642
  %643 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1755 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %643, i32 0, i32 3
  %644 = load i64, i64* %bytes1755, align 8
  %add1756 = add nsw i64 %mul1754, %644
  %mul1757 = mul nsw i64 0, %add1756
  %add1758 = add nsw i64 %mul1757, 1
  %shl1759 = shl i64 %add1758, 62
  %sub1760 = sub nsw i64 %shl1759, 1
  %mul1761 = mul nsw i64 %sub1760, 2
  %add1762 = add nsw i64 %mul1761, 1
  %sub1763 = sub nsw i64 %conv1753, %add1762
  br label %cond.end.1770

cond.false.1764:                                  ; preds = %cond.true.1734
  %645 = load i64, i64* %nbytes, align 8
  %mul1765 = mul nsw i64 0, %645
  %646 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1766 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %646, i32 0, i32 3
  %647 = load i64, i64* %bytes1766, align 8
  %add1767 = add nsw i64 %mul1765, %647
  %mul1768 = mul nsw i64 0, %add1767
  %add1769 = add nsw i64 %mul1768, 0
  br label %cond.end.1770

cond.end.1770:                                    ; preds = %cond.false.1764, %cond.true.1743
  %cond1771 = phi i64 [ %sub1763, %cond.true.1743 ], [ %add1769, %cond.false.1764 ]
  %648 = load i64, i64* %nbytes, align 8
  %sub1772 = sub nsw i64 %cond1771, %648
  %cmp1773 = icmp slt i64 %635, %sub1772
  br i1 %cmp1773, label %cond.true.1845, label %lor.lhs.false.1828

cond.false.1775:                                  ; preds = %cond.true.1731
  %649 = load i64, i64* %nbytes, align 8
  %mul1776 = mul nsw i64 0, %649
  %650 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1777 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %650, i32 0, i32 3
  %651 = load i64, i64* %bytes1777, align 8
  %add1778 = add nsw i64 %mul1776, %651
  %mul1779 = mul nsw i64 0, %add1778
  %sub1780 = sub nsw i64 %mul1779, 1
  %cmp1781 = icmp slt i64 %sub1780, 0
  br i1 %cmp1781, label %cond.true.1783, label %cond.false.1793

cond.true.1783:                                   ; preds = %cond.false.1775
  %652 = load i64, i64* %nbytes, align 8
  %mul1784 = mul nsw i64 0, %652
  %653 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1785 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %653, i32 0, i32 3
  %654 = load i64, i64* %bytes1785, align 8
  %add1786 = add nsw i64 %mul1784, %654
  %mul1787 = mul nsw i64 0, %add1786
  %add1788 = add nsw i64 %mul1787, 1
  %shl1789 = shl i64 %add1788, 62
  %sub1790 = sub nsw i64 %shl1789, 1
  %mul1791 = mul nsw i64 %sub1790, 2
  %add1792 = add nsw i64 %mul1791, 1
  br label %cond.end.1799

cond.false.1793:                                  ; preds = %cond.false.1775
  %655 = load i64, i64* %nbytes, align 8
  %mul1794 = mul nsw i64 0, %655
  %656 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1795 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %656, i32 0, i32 3
  %657 = load i64, i64* %bytes1795, align 8
  %add1796 = add nsw i64 %mul1794, %657
  %mul1797 = mul nsw i64 0, %add1796
  %sub1798 = sub nsw i64 %mul1797, 1
  br label %cond.end.1799

cond.end.1799:                                    ; preds = %cond.false.1793, %cond.true.1783
  %cond1800 = phi i64 [ %add1792, %cond.true.1783 ], [ %sub1798, %cond.false.1793 ]
  %658 = load i64, i64* %nbytes, align 8
  %sub1801 = sub nsw i64 %cond1800, %658
  %659 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1802 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %659, i32 0, i32 3
  %660 = load i64, i64* %bytes1802, align 8
  %cmp1803 = icmp slt i64 %sub1801, %660
  br i1 %cmp1803, label %cond.true.1845, label %lor.lhs.false.1828

cond.false.1805:                                  ; preds = %cond.end.1727
  %661 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1806 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %661, i32 0, i32 3
  %662 = load i64, i64* %bytes1806, align 8
  %cmp1807 = icmp slt i64 %662, 0
  br i1 %cmp1807, label %cond.true.1809, label %cond.false.1814

cond.true.1809:                                   ; preds = %cond.false.1805
  %663 = load i64, i64* %nbytes, align 8
  %664 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1810 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %664, i32 0, i32 3
  %665 = load i64, i64* %bytes1810, align 8
  %666 = load i64, i64* %nbytes, align 8
  %add1811 = add nsw i64 %665, %666
  %cmp1812 = icmp sle i64 %663, %add1811
  br i1 %cmp1812, label %cond.true.1845, label %lor.lhs.false.1828

cond.false.1814:                                  ; preds = %cond.false.1805
  %667 = load i64, i64* %nbytes, align 8
  %cmp1815 = icmp slt i64 %667, 0
  br i1 %cmp1815, label %cond.true.1817, label %cond.false.1823

cond.true.1817:                                   ; preds = %cond.false.1814
  %668 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1818 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %668, i32 0, i32 3
  %669 = load i64, i64* %bytes1818, align 8
  %670 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1819 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %670, i32 0, i32 3
  %671 = load i64, i64* %bytes1819, align 8
  %672 = load i64, i64* %nbytes, align 8
  %add1820 = add nsw i64 %671, %672
  %cmp1821 = icmp sle i64 %669, %add1820
  br i1 %cmp1821, label %cond.true.1845, label %lor.lhs.false.1828

cond.false.1823:                                  ; preds = %cond.false.1814
  %673 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1824 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %673, i32 0, i32 3
  %674 = load i64, i64* %bytes1824, align 8
  %675 = load i64, i64* %nbytes, align 8
  %add1825 = add nsw i64 %674, %675
  %676 = load i64, i64* %nbytes, align 8
  %cmp1826 = icmp slt i64 %add1825, %676
  br i1 %cmp1826, label %cond.true.1845, label %lor.lhs.false.1828

lor.lhs.false.1828:                               ; preds = %cond.false.1823, %cond.true.1817, %cond.true.1809, %cond.end.1799, %cond.end.1770
  %677 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1829 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %677, i32 0, i32 3
  %678 = load i64, i64* %bytes1829, align 8
  %679 = load i64, i64* %nbytes, align 8
  %add1830 = add nsw i64 %678, %679
  %mul1831 = mul nsw i64 0, %add1830
  %sub1832 = sub nsw i64 %mul1831, 1
  %cmp1833 = icmp slt i64 %sub1832, 0
  br i1 %cmp1833, label %land.lhs.true.1835, label %lor.lhs.false.1840

land.lhs.true.1835:                               ; preds = %lor.lhs.false.1828
  %680 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1836 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %680, i32 0, i32 3
  %681 = load i64, i64* %bytes1836, align 8
  %682 = load i64, i64* %nbytes, align 8
  %add1837 = add nsw i64 %681, %682
  %cmp1838 = icmp slt i64 %add1837, -9223372036854775808
  br i1 %cmp1838, label %cond.true.1845, label %lor.lhs.false.1840

lor.lhs.false.1840:                               ; preds = %land.lhs.true.1835, %lor.lhs.false.1828
  %683 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1841 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %683, i32 0, i32 3
  %684 = load i64, i64* %bytes1841, align 8
  %685 = load i64, i64* %nbytes, align 8
  %add1842 = add nsw i64 %684, %685
  %cmp1843 = icmp slt i64 9223372036854775807, %add1842
  br i1 %cmp1843, label %cond.true.1845, label %cond.false.1860

cond.true.1845:                                   ; preds = %lor.lhs.false.1840, %land.lhs.true.1835, %cond.false.1823, %cond.true.1817, %cond.true.1809, %cond.end.1799, %cond.end.1770
  %686 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1846 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %686, i32 0, i32 3
  %687 = load i64, i64* %bytes1846, align 8
  %688 = load i64, i64* %nbytes, align 8
  %add1847 = add i64 %687, %688
  %cmp1848 = icmp ule i64 %add1847, 9223372036854775807
  br i1 %cmp1848, label %cond.true.1850, label %cond.false.1853

cond.true.1850:                                   ; preds = %cond.true.1845
  %689 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1851 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %689, i32 0, i32 3
  %690 = load i64, i64* %bytes1851, align 8
  %691 = load i64, i64* %nbytes, align 8
  %add1852 = add i64 %690, %691
  br label %cond.end.1858

cond.false.1853:                                  ; preds = %cond.true.1845
  %692 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1854 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %692, i32 0, i32 3
  %693 = load i64, i64* %bytes1854, align 8
  %694 = load i64, i64* %nbytes, align 8
  %add1855 = add i64 %693, %694
  %sub1856 = sub i64 %add1855, -9223372036854775808
  %add1857 = add nsw i64 %sub1856, -9223372036854775808
  br label %cond.end.1858

cond.end.1858:                                    ; preds = %cond.false.1853, %cond.true.1850
  %cond1859 = phi i64 [ %add1852, %cond.true.1850 ], [ %add1857, %cond.false.1853 ]
  store i64 %cond1859, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.1860:                                  ; preds = %lor.lhs.false.1840
  %695 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1861 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %695, i32 0, i32 3
  %696 = load i64, i64* %bytes1861, align 8
  %697 = load i64, i64* %nbytes, align 8
  %add1862 = add i64 %696, %697
  %cmp1863 = icmp ule i64 %add1862, 9223372036854775807
  br i1 %cmp1863, label %cond.true.1865, label %cond.false.1868

cond.true.1865:                                   ; preds = %cond.false.1860
  %698 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1866 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %698, i32 0, i32 3
  %699 = load i64, i64* %bytes1866, align 8
  %700 = load i64, i64* %nbytes, align 8
  %add1867 = add i64 %699, %700
  br label %cond.end.1873

cond.false.1868:                                  ; preds = %cond.false.1860
  %701 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1869 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %701, i32 0, i32 3
  %702 = load i64, i64* %bytes1869, align 8
  %703 = load i64, i64* %nbytes, align 8
  %add1870 = add i64 %702, %703
  %sub1871 = sub i64 %add1870, -9223372036854775808
  %add1872 = add nsw i64 %sub1871, -9223372036854775808
  br label %cond.end.1873

cond.end.1873:                                    ; preds = %cond.false.1868, %cond.true.1865
  %cond1874 = phi i64 [ %add1867, %cond.true.1865 ], [ %add1872, %cond.false.1868 ]
  store i64 %cond1874, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.1875:                                  ; preds = %cond.false.1507
  br i1 false, label %cond.true.1876, label %cond.false.2059

cond.true.1876:                                   ; preds = %cond.false.1875
  %704 = load i64, i64* %nbytes, align 8
  %mul1877 = mul nsw i64 0, %704
  %705 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1878 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %705, i32 0, i32 3
  %706 = load i64, i64* %bytes1878, align 8
  %add1879 = add nsw i64 %mul1877, %706
  %mul1880 = mul nsw i64 0, %add1879
  %sub1881 = sub nsw i64 %mul1880, 1
  %cmp1882 = icmp slt i64 %sub1881, 0
  br i1 %cmp1882, label %cond.true.1884, label %cond.false.1905

cond.true.1884:                                   ; preds = %cond.true.1876
  %707 = load i64, i64* %nbytes, align 8
  %mul1885 = mul nsw i64 0, %707
  %708 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1886 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %708, i32 0, i32 3
  %709 = load i64, i64* %bytes1886, align 8
  %add1887 = add nsw i64 %mul1885, %709
  %mul1888 = mul nsw i64 0, %add1887
  %add1889 = add nsw i64 %mul1888, 0
  %neg1890 = xor i64 %add1889, -1
  %cmp1891 = icmp eq i64 %neg1890, -1
  %conv1892 = zext i1 %cmp1891 to i32
  %sub1893 = sub nsw i32 0, %conv1892
  %conv1894 = sext i32 %sub1893 to i64
  %710 = load i64, i64* %nbytes, align 8
  %mul1895 = mul nsw i64 0, %710
  %711 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1896 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %711, i32 0, i32 3
  %712 = load i64, i64* %bytes1896, align 8
  %add1897 = add nsw i64 %mul1895, %712
  %mul1898 = mul nsw i64 0, %add1897
  %add1899 = add nsw i64 %mul1898, 1
  %shl1900 = shl i64 %add1899, 62
  %sub1901 = sub nsw i64 %shl1900, 1
  %mul1902 = mul nsw i64 %sub1901, 2
  %add1903 = add nsw i64 %mul1902, 1
  %sub1904 = sub nsw i64 %conv1894, %add1903
  br label %cond.end.1911

cond.false.1905:                                  ; preds = %cond.true.1876
  %713 = load i64, i64* %nbytes, align 8
  %mul1906 = mul nsw i64 0, %713
  %714 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1907 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %714, i32 0, i32 3
  %715 = load i64, i64* %bytes1907, align 8
  %add1908 = add nsw i64 %mul1906, %715
  %mul1909 = mul nsw i64 0, %add1908
  %add1910 = add nsw i64 %mul1909, 0
  br label %cond.end.1911

cond.end.1911:                                    ; preds = %cond.false.1905, %cond.true.1884
  %cond1912 = phi i64 [ %sub1904, %cond.true.1884 ], [ %add1910, %cond.false.1905 ]
  %cmp1913 = icmp slt i64 %cond1912, 0
  br i1 %cmp1913, label %cond.true.1915, label %cond.false.1989

cond.true.1915:                                   ; preds = %cond.end.1911
  %716 = load i64, i64* %nbytes, align 8
  %cmp1916 = icmp slt i64 %716, 0
  br i1 %cmp1916, label %cond.true.1918, label %cond.false.1959

cond.true.1918:                                   ; preds = %cond.true.1915
  %717 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1919 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %717, i32 0, i32 3
  %718 = load i64, i64* %bytes1919, align 8
  %719 = load i64, i64* %nbytes, align 8
  %mul1920 = mul nsw i64 0, %719
  %720 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1921 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %720, i32 0, i32 3
  %721 = load i64, i64* %bytes1921, align 8
  %add1922 = add nsw i64 %mul1920, %721
  %mul1923 = mul nsw i64 0, %add1922
  %sub1924 = sub nsw i64 %mul1923, 1
  %cmp1925 = icmp slt i64 %sub1924, 0
  br i1 %cmp1925, label %cond.true.1927, label %cond.false.1948

cond.true.1927:                                   ; preds = %cond.true.1918
  %722 = load i64, i64* %nbytes, align 8
  %mul1928 = mul nsw i64 0, %722
  %723 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1929 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %723, i32 0, i32 3
  %724 = load i64, i64* %bytes1929, align 8
  %add1930 = add nsw i64 %mul1928, %724
  %mul1931 = mul nsw i64 0, %add1930
  %add1932 = add nsw i64 %mul1931, 0
  %neg1933 = xor i64 %add1932, -1
  %cmp1934 = icmp eq i64 %neg1933, -1
  %conv1935 = zext i1 %cmp1934 to i32
  %sub1936 = sub nsw i32 0, %conv1935
  %conv1937 = sext i32 %sub1936 to i64
  %725 = load i64, i64* %nbytes, align 8
  %mul1938 = mul nsw i64 0, %725
  %726 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1939 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %726, i32 0, i32 3
  %727 = load i64, i64* %bytes1939, align 8
  %add1940 = add nsw i64 %mul1938, %727
  %mul1941 = mul nsw i64 0, %add1940
  %add1942 = add nsw i64 %mul1941, 1
  %shl1943 = shl i64 %add1942, 62
  %sub1944 = sub nsw i64 %shl1943, 1
  %mul1945 = mul nsw i64 %sub1944, 2
  %add1946 = add nsw i64 %mul1945, 1
  %sub1947 = sub nsw i64 %conv1937, %add1946
  br label %cond.end.1954

cond.false.1948:                                  ; preds = %cond.true.1918
  %728 = load i64, i64* %nbytes, align 8
  %mul1949 = mul nsw i64 0, %728
  %729 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1950 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %729, i32 0, i32 3
  %730 = load i64, i64* %bytes1950, align 8
  %add1951 = add nsw i64 %mul1949, %730
  %mul1952 = mul nsw i64 0, %add1951
  %add1953 = add nsw i64 %mul1952, 0
  br label %cond.end.1954

cond.end.1954:                                    ; preds = %cond.false.1948, %cond.true.1927
  %cond1955 = phi i64 [ %sub1947, %cond.true.1927 ], [ %add1953, %cond.false.1948 ]
  %731 = load i64, i64* %nbytes, align 8
  %sub1956 = sub nsw i64 %cond1955, %731
  %cmp1957 = icmp slt i64 %718, %sub1956
  br i1 %cmp1957, label %cond.true.2029, label %lor.lhs.false.2012

cond.false.1959:                                  ; preds = %cond.true.1915
  %732 = load i64, i64* %nbytes, align 8
  %mul1960 = mul nsw i64 0, %732
  %733 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1961 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %733, i32 0, i32 3
  %734 = load i64, i64* %bytes1961, align 8
  %add1962 = add nsw i64 %mul1960, %734
  %mul1963 = mul nsw i64 0, %add1962
  %sub1964 = sub nsw i64 %mul1963, 1
  %cmp1965 = icmp slt i64 %sub1964, 0
  br i1 %cmp1965, label %cond.true.1967, label %cond.false.1977

cond.true.1967:                                   ; preds = %cond.false.1959
  %735 = load i64, i64* %nbytes, align 8
  %mul1968 = mul nsw i64 0, %735
  %736 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1969 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %736, i32 0, i32 3
  %737 = load i64, i64* %bytes1969, align 8
  %add1970 = add nsw i64 %mul1968, %737
  %mul1971 = mul nsw i64 0, %add1970
  %add1972 = add nsw i64 %mul1971, 1
  %shl1973 = shl i64 %add1972, 62
  %sub1974 = sub nsw i64 %shl1973, 1
  %mul1975 = mul nsw i64 %sub1974, 2
  %add1976 = add nsw i64 %mul1975, 1
  br label %cond.end.1983

cond.false.1977:                                  ; preds = %cond.false.1959
  %738 = load i64, i64* %nbytes, align 8
  %mul1978 = mul nsw i64 0, %738
  %739 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1979 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %739, i32 0, i32 3
  %740 = load i64, i64* %bytes1979, align 8
  %add1980 = add nsw i64 %mul1978, %740
  %mul1981 = mul nsw i64 0, %add1980
  %sub1982 = sub nsw i64 %mul1981, 1
  br label %cond.end.1983

cond.end.1983:                                    ; preds = %cond.false.1977, %cond.true.1967
  %cond1984 = phi i64 [ %add1976, %cond.true.1967 ], [ %sub1982, %cond.false.1977 ]
  %741 = load i64, i64* %nbytes, align 8
  %sub1985 = sub nsw i64 %cond1984, %741
  %742 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1986 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %742, i32 0, i32 3
  %743 = load i64, i64* %bytes1986, align 8
  %cmp1987 = icmp slt i64 %sub1985, %743
  br i1 %cmp1987, label %cond.true.2029, label %lor.lhs.false.2012

cond.false.1989:                                  ; preds = %cond.end.1911
  %744 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1990 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %744, i32 0, i32 3
  %745 = load i64, i64* %bytes1990, align 8
  %cmp1991 = icmp slt i64 %745, 0
  br i1 %cmp1991, label %cond.true.1993, label %cond.false.1998

cond.true.1993:                                   ; preds = %cond.false.1989
  %746 = load i64, i64* %nbytes, align 8
  %747 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes1994 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %747, i32 0, i32 3
  %748 = load i64, i64* %bytes1994, align 8
  %749 = load i64, i64* %nbytes, align 8
  %add1995 = add nsw i64 %748, %749
  %cmp1996 = icmp sle i64 %746, %add1995
  br i1 %cmp1996, label %cond.true.2029, label %lor.lhs.false.2012

cond.false.1998:                                  ; preds = %cond.false.1989
  %750 = load i64, i64* %nbytes, align 8
  %cmp1999 = icmp slt i64 %750, 0
  br i1 %cmp1999, label %cond.true.2001, label %cond.false.2007

cond.true.2001:                                   ; preds = %cond.false.1998
  %751 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2002 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %751, i32 0, i32 3
  %752 = load i64, i64* %bytes2002, align 8
  %753 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2003 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %753, i32 0, i32 3
  %754 = load i64, i64* %bytes2003, align 8
  %755 = load i64, i64* %nbytes, align 8
  %add2004 = add nsw i64 %754, %755
  %cmp2005 = icmp sle i64 %752, %add2004
  br i1 %cmp2005, label %cond.true.2029, label %lor.lhs.false.2012

cond.false.2007:                                  ; preds = %cond.false.1998
  %756 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2008 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %756, i32 0, i32 3
  %757 = load i64, i64* %bytes2008, align 8
  %758 = load i64, i64* %nbytes, align 8
  %add2009 = add nsw i64 %757, %758
  %759 = load i64, i64* %nbytes, align 8
  %cmp2010 = icmp slt i64 %add2009, %759
  br i1 %cmp2010, label %cond.true.2029, label %lor.lhs.false.2012

lor.lhs.false.2012:                               ; preds = %cond.false.2007, %cond.true.2001, %cond.true.1993, %cond.end.1983, %cond.end.1954
  %760 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2013 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %760, i32 0, i32 3
  %761 = load i64, i64* %bytes2013, align 8
  %762 = load i64, i64* %nbytes, align 8
  %add2014 = add nsw i64 %761, %762
  %mul2015 = mul nsw i64 0, %add2014
  %sub2016 = sub nsw i64 %mul2015, 1
  %cmp2017 = icmp slt i64 %sub2016, 0
  br i1 %cmp2017, label %land.lhs.true.2019, label %lor.lhs.false.2024

land.lhs.true.2019:                               ; preds = %lor.lhs.false.2012
  %763 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2020 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %763, i32 0, i32 3
  %764 = load i64, i64* %bytes2020, align 8
  %765 = load i64, i64* %nbytes, align 8
  %add2021 = add nsw i64 %764, %765
  %cmp2022 = icmp slt i64 %add2021, -9223372036854775808
  br i1 %cmp2022, label %cond.true.2029, label %lor.lhs.false.2024

lor.lhs.false.2024:                               ; preds = %land.lhs.true.2019, %lor.lhs.false.2012
  %766 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2025 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %766, i32 0, i32 3
  %767 = load i64, i64* %bytes2025, align 8
  %768 = load i64, i64* %nbytes, align 8
  %add2026 = add nsw i64 %767, %768
  %cmp2027 = icmp slt i64 9223372036854775807, %add2026
  br i1 %cmp2027, label %cond.true.2029, label %cond.false.2044

cond.true.2029:                                   ; preds = %lor.lhs.false.2024, %land.lhs.true.2019, %cond.false.2007, %cond.true.2001, %cond.true.1993, %cond.end.1983, %cond.end.1954
  %769 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2030 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %769, i32 0, i32 3
  %770 = load i64, i64* %bytes2030, align 8
  %771 = load i64, i64* %nbytes, align 8
  %add2031 = add i64 %770, %771
  %cmp2032 = icmp ule i64 %add2031, 9223372036854775807
  br i1 %cmp2032, label %cond.true.2034, label %cond.false.2037

cond.true.2034:                                   ; preds = %cond.true.2029
  %772 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2035 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %772, i32 0, i32 3
  %773 = load i64, i64* %bytes2035, align 8
  %774 = load i64, i64* %nbytes, align 8
  %add2036 = add i64 %773, %774
  br label %cond.end.2042

cond.false.2037:                                  ; preds = %cond.true.2029
  %775 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2038 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %775, i32 0, i32 3
  %776 = load i64, i64* %bytes2038, align 8
  %777 = load i64, i64* %nbytes, align 8
  %add2039 = add i64 %776, %777
  %sub2040 = sub i64 %add2039, -9223372036854775808
  %add2041 = add nsw i64 %sub2040, -9223372036854775808
  br label %cond.end.2042

cond.end.2042:                                    ; preds = %cond.false.2037, %cond.true.2034
  %cond2043 = phi i64 [ %add2036, %cond.true.2034 ], [ %add2041, %cond.false.2037 ]
  store i64 %cond2043, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.2044:                                  ; preds = %lor.lhs.false.2024
  %778 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2045 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %778, i32 0, i32 3
  %779 = load i64, i64* %bytes2045, align 8
  %780 = load i64, i64* %nbytes, align 8
  %add2046 = add i64 %779, %780
  %cmp2047 = icmp ule i64 %add2046, 9223372036854775807
  br i1 %cmp2047, label %cond.true.2049, label %cond.false.2052

cond.true.2049:                                   ; preds = %cond.false.2044
  %781 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2050 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %781, i32 0, i32 3
  %782 = load i64, i64* %bytes2050, align 8
  %783 = load i64, i64* %nbytes, align 8
  %add2051 = add i64 %782, %783
  br label %cond.end.2057

cond.false.2052:                                  ; preds = %cond.false.2044
  %784 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2053 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %784, i32 0, i32 3
  %785 = load i64, i64* %bytes2053, align 8
  %786 = load i64, i64* %nbytes, align 8
  %add2054 = add i64 %785, %786
  %sub2055 = sub i64 %add2054, -9223372036854775808
  %add2056 = add nsw i64 %sub2055, -9223372036854775808
  br label %cond.end.2057

cond.end.2057:                                    ; preds = %cond.false.2052, %cond.true.2049
  %cond2058 = phi i64 [ %add2051, %cond.true.2049 ], [ %add2056, %cond.false.2052 ]
  store i64 %cond2058, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

cond.false.2059:                                  ; preds = %cond.false.1875
  %787 = load i64, i64* %nbytes, align 8
  %mul2060 = mul nsw i64 0, %787
  %788 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2061 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %788, i32 0, i32 3
  %789 = load i64, i64* %bytes2061, align 8
  %add2062 = add nsw i64 %mul2060, %789
  %mul2063 = mul nsw i64 0, %add2062
  %sub2064 = sub nsw i64 %mul2063, 1
  %cmp2065 = icmp slt i64 %sub2064, 0
  br i1 %cmp2065, label %cond.true.2067, label %cond.false.2088

cond.true.2067:                                   ; preds = %cond.false.2059
  %790 = load i64, i64* %nbytes, align 8
  %mul2068 = mul nsw i64 0, %790
  %791 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2069 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %791, i32 0, i32 3
  %792 = load i64, i64* %bytes2069, align 8
  %add2070 = add nsw i64 %mul2068, %792
  %mul2071 = mul nsw i64 0, %add2070
  %add2072 = add nsw i64 %mul2071, 0
  %neg2073 = xor i64 %add2072, -1
  %cmp2074 = icmp eq i64 %neg2073, -1
  %conv2075 = zext i1 %cmp2074 to i32
  %sub2076 = sub nsw i32 0, %conv2075
  %conv2077 = sext i32 %sub2076 to i64
  %793 = load i64, i64* %nbytes, align 8
  %mul2078 = mul nsw i64 0, %793
  %794 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2079 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %794, i32 0, i32 3
  %795 = load i64, i64* %bytes2079, align 8
  %add2080 = add nsw i64 %mul2078, %795
  %mul2081 = mul nsw i64 0, %add2080
  %add2082 = add nsw i64 %mul2081, 1
  %shl2083 = shl i64 %add2082, 62
  %sub2084 = sub nsw i64 %shl2083, 1
  %mul2085 = mul nsw i64 %sub2084, 2
  %add2086 = add nsw i64 %mul2085, 1
  %sub2087 = sub nsw i64 %conv2077, %add2086
  br label %cond.end.2094

cond.false.2088:                                  ; preds = %cond.false.2059
  %796 = load i64, i64* %nbytes, align 8
  %mul2089 = mul nsw i64 0, %796
  %797 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2090 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %797, i32 0, i32 3
  %798 = load i64, i64* %bytes2090, align 8
  %add2091 = add nsw i64 %mul2089, %798
  %mul2092 = mul nsw i64 0, %add2091
  %add2093 = add nsw i64 %mul2092, 0
  br label %cond.end.2094

cond.end.2094:                                    ; preds = %cond.false.2088, %cond.true.2067
  %cond2095 = phi i64 [ %sub2087, %cond.true.2067 ], [ %add2093, %cond.false.2088 ]
  %cmp2096 = icmp slt i64 %cond2095, 0
  br i1 %cmp2096, label %cond.true.2098, label %cond.false.2172

cond.true.2098:                                   ; preds = %cond.end.2094
  %799 = load i64, i64* %nbytes, align 8
  %cmp2099 = icmp slt i64 %799, 0
  br i1 %cmp2099, label %cond.true.2101, label %cond.false.2142

cond.true.2101:                                   ; preds = %cond.true.2098
  %800 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2102 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %800, i32 0, i32 3
  %801 = load i64, i64* %bytes2102, align 8
  %802 = load i64, i64* %nbytes, align 8
  %mul2103 = mul nsw i64 0, %802
  %803 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2104 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %803, i32 0, i32 3
  %804 = load i64, i64* %bytes2104, align 8
  %add2105 = add nsw i64 %mul2103, %804
  %mul2106 = mul nsw i64 0, %add2105
  %sub2107 = sub nsw i64 %mul2106, 1
  %cmp2108 = icmp slt i64 %sub2107, 0
  br i1 %cmp2108, label %cond.true.2110, label %cond.false.2131

cond.true.2110:                                   ; preds = %cond.true.2101
  %805 = load i64, i64* %nbytes, align 8
  %mul2111 = mul nsw i64 0, %805
  %806 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2112 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %806, i32 0, i32 3
  %807 = load i64, i64* %bytes2112, align 8
  %add2113 = add nsw i64 %mul2111, %807
  %mul2114 = mul nsw i64 0, %add2113
  %add2115 = add nsw i64 %mul2114, 0
  %neg2116 = xor i64 %add2115, -1
  %cmp2117 = icmp eq i64 %neg2116, -1
  %conv2118 = zext i1 %cmp2117 to i32
  %sub2119 = sub nsw i32 0, %conv2118
  %conv2120 = sext i32 %sub2119 to i64
  %808 = load i64, i64* %nbytes, align 8
  %mul2121 = mul nsw i64 0, %808
  %809 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2122 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %809, i32 0, i32 3
  %810 = load i64, i64* %bytes2122, align 8
  %add2123 = add nsw i64 %mul2121, %810
  %mul2124 = mul nsw i64 0, %add2123
  %add2125 = add nsw i64 %mul2124, 1
  %shl2126 = shl i64 %add2125, 62
  %sub2127 = sub nsw i64 %shl2126, 1
  %mul2128 = mul nsw i64 %sub2127, 2
  %add2129 = add nsw i64 %mul2128, 1
  %sub2130 = sub nsw i64 %conv2120, %add2129
  br label %cond.end.2137

cond.false.2131:                                  ; preds = %cond.true.2101
  %811 = load i64, i64* %nbytes, align 8
  %mul2132 = mul nsw i64 0, %811
  %812 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2133 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %812, i32 0, i32 3
  %813 = load i64, i64* %bytes2133, align 8
  %add2134 = add nsw i64 %mul2132, %813
  %mul2135 = mul nsw i64 0, %add2134
  %add2136 = add nsw i64 %mul2135, 0
  br label %cond.end.2137

cond.end.2137:                                    ; preds = %cond.false.2131, %cond.true.2110
  %cond2138 = phi i64 [ %sub2130, %cond.true.2110 ], [ %add2136, %cond.false.2131 ]
  %814 = load i64, i64* %nbytes, align 8
  %sub2139 = sub nsw i64 %cond2138, %814
  %cmp2140 = icmp slt i64 %801, %sub2139
  br i1 %cmp2140, label %cond.true.2212, label %lor.lhs.false.2195

cond.false.2142:                                  ; preds = %cond.true.2098
  %815 = load i64, i64* %nbytes, align 8
  %mul2143 = mul nsw i64 0, %815
  %816 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2144 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %816, i32 0, i32 3
  %817 = load i64, i64* %bytes2144, align 8
  %add2145 = add nsw i64 %mul2143, %817
  %mul2146 = mul nsw i64 0, %add2145
  %sub2147 = sub nsw i64 %mul2146, 1
  %cmp2148 = icmp slt i64 %sub2147, 0
  br i1 %cmp2148, label %cond.true.2150, label %cond.false.2160

cond.true.2150:                                   ; preds = %cond.false.2142
  %818 = load i64, i64* %nbytes, align 8
  %mul2151 = mul nsw i64 0, %818
  %819 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2152 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %819, i32 0, i32 3
  %820 = load i64, i64* %bytes2152, align 8
  %add2153 = add nsw i64 %mul2151, %820
  %mul2154 = mul nsw i64 0, %add2153
  %add2155 = add nsw i64 %mul2154, 1
  %shl2156 = shl i64 %add2155, 62
  %sub2157 = sub nsw i64 %shl2156, 1
  %mul2158 = mul nsw i64 %sub2157, 2
  %add2159 = add nsw i64 %mul2158, 1
  br label %cond.end.2166

cond.false.2160:                                  ; preds = %cond.false.2142
  %821 = load i64, i64* %nbytes, align 8
  %mul2161 = mul nsw i64 0, %821
  %822 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2162 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %822, i32 0, i32 3
  %823 = load i64, i64* %bytes2162, align 8
  %add2163 = add nsw i64 %mul2161, %823
  %mul2164 = mul nsw i64 0, %add2163
  %sub2165 = sub nsw i64 %mul2164, 1
  br label %cond.end.2166

cond.end.2166:                                    ; preds = %cond.false.2160, %cond.true.2150
  %cond2167 = phi i64 [ %add2159, %cond.true.2150 ], [ %sub2165, %cond.false.2160 ]
  %824 = load i64, i64* %nbytes, align 8
  %sub2168 = sub nsw i64 %cond2167, %824
  %825 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2169 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %825, i32 0, i32 3
  %826 = load i64, i64* %bytes2169, align 8
  %cmp2170 = icmp slt i64 %sub2168, %826
  br i1 %cmp2170, label %cond.true.2212, label %lor.lhs.false.2195

cond.false.2172:                                  ; preds = %cond.end.2094
  %827 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2173 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %827, i32 0, i32 3
  %828 = load i64, i64* %bytes2173, align 8
  %cmp2174 = icmp slt i64 %828, 0
  br i1 %cmp2174, label %cond.true.2176, label %cond.false.2181

cond.true.2176:                                   ; preds = %cond.false.2172
  %829 = load i64, i64* %nbytes, align 8
  %830 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2177 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %830, i32 0, i32 3
  %831 = load i64, i64* %bytes2177, align 8
  %832 = load i64, i64* %nbytes, align 8
  %add2178 = add nsw i64 %831, %832
  %cmp2179 = icmp sle i64 %829, %add2178
  br i1 %cmp2179, label %cond.true.2212, label %lor.lhs.false.2195

cond.false.2181:                                  ; preds = %cond.false.2172
  %833 = load i64, i64* %nbytes, align 8
  %cmp2182 = icmp slt i64 %833, 0
  br i1 %cmp2182, label %cond.true.2184, label %cond.false.2190

cond.true.2184:                                   ; preds = %cond.false.2181
  %834 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2185 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %834, i32 0, i32 3
  %835 = load i64, i64* %bytes2185, align 8
  %836 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2186 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %836, i32 0, i32 3
  %837 = load i64, i64* %bytes2186, align 8
  %838 = load i64, i64* %nbytes, align 8
  %add2187 = add nsw i64 %837, %838
  %cmp2188 = icmp sle i64 %835, %add2187
  br i1 %cmp2188, label %cond.true.2212, label %lor.lhs.false.2195

cond.false.2190:                                  ; preds = %cond.false.2181
  %839 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2191 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %839, i32 0, i32 3
  %840 = load i64, i64* %bytes2191, align 8
  %841 = load i64, i64* %nbytes, align 8
  %add2192 = add nsw i64 %840, %841
  %842 = load i64, i64* %nbytes, align 8
  %cmp2193 = icmp slt i64 %add2192, %842
  br i1 %cmp2193, label %cond.true.2212, label %lor.lhs.false.2195

lor.lhs.false.2195:                               ; preds = %cond.false.2190, %cond.true.2184, %cond.true.2176, %cond.end.2166, %cond.end.2137
  %843 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2196 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %843, i32 0, i32 3
  %844 = load i64, i64* %bytes2196, align 8
  %845 = load i64, i64* %nbytes, align 8
  %add2197 = add nsw i64 %844, %845
  %mul2198 = mul nsw i64 0, %add2197
  %sub2199 = sub nsw i64 %mul2198, 1
  %cmp2200 = icmp slt i64 %sub2199, 0
  br i1 %cmp2200, label %land.lhs.true.2202, label %lor.lhs.false.2207

land.lhs.true.2202:                               ; preds = %lor.lhs.false.2195
  %846 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2203 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %846, i32 0, i32 3
  %847 = load i64, i64* %bytes2203, align 8
  %848 = load i64, i64* %nbytes, align 8
  %add2204 = add nsw i64 %847, %848
  %cmp2205 = icmp slt i64 %add2204, -9223372036854775808
  br i1 %cmp2205, label %cond.true.2212, label %lor.lhs.false.2207

lor.lhs.false.2207:                               ; preds = %land.lhs.true.2202, %lor.lhs.false.2195
  %849 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2208 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %849, i32 0, i32 3
  %850 = load i64, i64* %bytes2208, align 8
  %851 = load i64, i64* %nbytes, align 8
  %add2209 = add nsw i64 %850, %851
  %cmp2210 = icmp slt i64 9223372036854775807, %add2209
  br i1 %cmp2210, label %cond.true.2212, label %cond.false.2227

cond.true.2212:                                   ; preds = %lor.lhs.false.2207, %land.lhs.true.2202, %cond.false.2190, %cond.true.2184, %cond.true.2176, %cond.end.2166, %cond.end.2137
  %852 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2213 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %852, i32 0, i32 3
  %853 = load i64, i64* %bytes2213, align 8
  %854 = load i64, i64* %nbytes, align 8
  %add2214 = add i64 %853, %854
  %cmp2215 = icmp ule i64 %add2214, 9223372036854775807
  br i1 %cmp2215, label %cond.true.2217, label %cond.false.2220

cond.true.2217:                                   ; preds = %cond.true.2212
  %855 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2218 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %855, i32 0, i32 3
  %856 = load i64, i64* %bytes2218, align 8
  %857 = load i64, i64* %nbytes, align 8
  %add2219 = add i64 %856, %857
  br label %cond.end.2225

cond.false.2220:                                  ; preds = %cond.true.2212
  %858 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2221 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %858, i32 0, i32 3
  %859 = load i64, i64* %bytes2221, align 8
  %860 = load i64, i64* %nbytes, align 8
  %add2222 = add i64 %859, %860
  %sub2223 = sub i64 %add2222, -9223372036854775808
  %add2224 = add nsw i64 %sub2223, -9223372036854775808
  br label %cond.end.2225

cond.end.2225:                                    ; preds = %cond.false.2220, %cond.true.2217
  %cond2226 = phi i64 [ %add2219, %cond.true.2217 ], [ %add2224, %cond.false.2220 ]
  store i64 %cond2226, i64* %nbytes, align 8
  br i1 true, label %if.then.2242, label %if.end.2243

cond.false.2227:                                  ; preds = %lor.lhs.false.2207
  %861 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2228 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %861, i32 0, i32 3
  %862 = load i64, i64* %bytes2228, align 8
  %863 = load i64, i64* %nbytes, align 8
  %add2229 = add i64 %862, %863
  %cmp2230 = icmp ule i64 %add2229, 9223372036854775807
  br i1 %cmp2230, label %cond.true.2232, label %cond.false.2235

cond.true.2232:                                   ; preds = %cond.false.2227
  %864 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2233 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %864, i32 0, i32 3
  %865 = load i64, i64* %bytes2233, align 8
  %866 = load i64, i64* %nbytes, align 8
  %add2234 = add i64 %865, %866
  br label %cond.end.2240

cond.false.2235:                                  ; preds = %cond.false.2227
  %867 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2236 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %867, i32 0, i32 3
  %868 = load i64, i64* %bytes2236, align 8
  %869 = load i64, i64* %nbytes, align 8
  %add2237 = add i64 %868, %869
  %sub2238 = sub i64 %add2237, -9223372036854775808
  %add2239 = add nsw i64 %sub2238, -9223372036854775808
  br label %cond.end.2240

cond.end.2240:                                    ; preds = %cond.false.2235, %cond.true.2232
  %cond2241 = phi i64 [ %add2234, %cond.true.2232 ], [ %add2239, %cond.false.2235 ]
  store i64 %cond2241, i64* %nbytes, align 8
  br i1 false, label %if.then.2242, label %if.end.2243

if.then.2242:                                     ; preds = %cond.end.2240, %cond.end.2225, %cond.end.2057, %cond.end.2042, %cond.end.1873, %cond.end.1858, %cond.end.1690, %cond.end.1675, %cond.end.1504, %cond.end.1482, %cond.end.1307, %cond.end.1285, %cond.end.1066, %cond.end.1034, %cond.end.849, %cond.end.817, %cond.end.544, %cond.end.512, %cond.end.327, %cond.end.295
  call void @memory_full(i64 -1) #8
  unreachable

if.end.2243:                                      ; preds = %cond.end.2240, %cond.end.2225, %cond.end.2057, %cond.end.2042, %cond.end.1873, %cond.end.1858, %cond.end.1690, %cond.end.1675, %cond.end.1504, %cond.end.1482, %cond.end.1307, %cond.end.1285, %cond.end.1066, %cond.end.1034, %cond.end.849, %cond.end.817, %cond.end.544, %cond.end.512, %cond.end.327, %cond.end.295
  %870 = load i64, i64* %nbytes, align 8
  %871 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2244 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %871, i32 0, i32 3
  store i64 %870, i64* %bytes2244, align 8
  %872 = load i64, i64* %str2.addr, align 8
  %call2245 = call zeroext i1 @STRINGP(i64 %872)
  br i1 %call2245, label %if.then.2246, label %if.end.4482

if.then.2246:                                     ; preds = %if.end.2243
  %873 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2247 = getelementptr inbounds %struct.buffer, %struct.buffer* %873, i32 0, i32 39
  %874 = load i64, i64* %enable_multibyte_characters_2247, align 8
  %call2248 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2249 = icmp eq i64 %874, %call2248
  br i1 %cmp2249, label %if.then.2251, label %if.else.2253

if.then.2251:                                     ; preds = %if.then.2246
  %875 = load i64, i64* %str2.addr, align 8
  %call2252 = call i64 @SCHARS(i64 %875)
  store i64 %call2252, i64* %nbytes, align 8
  br label %if.end.2262

if.else.2253:                                     ; preds = %if.then.2246
  %876 = load i64, i64* %str2.addr, align 8
  %call2254 = call zeroext i1 @STRING_MULTIBYTE(i64 %876)
  br i1 %call2254, label %if.else.2259, label %if.then.2255

if.then.2255:                                     ; preds = %if.else.2253
  %877 = load i64, i64* %str2.addr, align 8
  %call2256 = call i8* @SDATA(i64 %877)
  %878 = load i64, i64* %str2.addr, align 8
  %call2257 = call i64 @SBYTES(i64 %878)
  %call2258 = call i64 @count_size_as_multibyte(i8* %call2256, i64 %call2257)
  store i64 %call2258, i64* %nbytes, align 8
  br label %if.end.2261

if.else.2259:                                     ; preds = %if.else.2253
  %879 = load i64, i64* %str2.addr, align 8
  %call2260 = call i64 @SBYTES(i64 %879)
  store i64 %call2260, i64* %nbytes, align 8
  br label %if.end.2261

if.end.2261:                                      ; preds = %if.else.2259, %if.then.2255
  br label %if.end.2262

if.end.2262:                                      ; preds = %if.end.2261, %if.then.2251
  br i1 false, label %cond.true.2263, label %cond.false.2784

cond.true.2263:                                   ; preds = %if.end.2262
  br i1 false, label %cond.true.2264, label %cond.false.2567

cond.true.2264:                                   ; preds = %cond.true.2263
  %880 = load i64, i64* %nbytes, align 8
  %conv2265 = trunc i64 %880 to i8
  %conv2266 = sext i8 %conv2265 to i32
  %mul2267 = mul nsw i32 0, %conv2266
  %881 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2268 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %881, i32 0, i32 3
  %882 = load i64, i64* %bytes2268, align 8
  %conv2269 = trunc i64 %882 to i8
  %conv2270 = sext i8 %conv2269 to i32
  %add2271 = add nsw i32 %mul2267, %conv2270
  %mul2272 = mul nsw i32 0, %add2271
  %sub2273 = sub nsw i32 %mul2272, 1
  %cmp2274 = icmp slt i32 %sub2273, 0
  br i1 %cmp2274, label %cond.true.2276, label %cond.false.2304

cond.true.2276:                                   ; preds = %cond.true.2264
  %883 = load i64, i64* %nbytes, align 8
  %conv2277 = trunc i64 %883 to i8
  %conv2278 = sext i8 %conv2277 to i32
  %mul2279 = mul nsw i32 0, %conv2278
  %884 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2280 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %884, i32 0, i32 3
  %885 = load i64, i64* %bytes2280, align 8
  %conv2281 = trunc i64 %885 to i8
  %conv2282 = sext i8 %conv2281 to i32
  %add2283 = add nsw i32 %mul2279, %conv2282
  %mul2284 = mul nsw i32 0, %add2283
  %add2285 = add nsw i32 %mul2284, 0
  %neg2286 = xor i32 %add2285, -1
  %cmp2287 = icmp eq i32 %neg2286, -1
  %conv2288 = zext i1 %cmp2287 to i32
  %sub2289 = sub nsw i32 0, %conv2288
  %886 = load i64, i64* %nbytes, align 8
  %conv2290 = trunc i64 %886 to i8
  %conv2291 = sext i8 %conv2290 to i32
  %mul2292 = mul nsw i32 0, %conv2291
  %887 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2293 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %887, i32 0, i32 3
  %888 = load i64, i64* %bytes2293, align 8
  %conv2294 = trunc i64 %888 to i8
  %conv2295 = sext i8 %conv2294 to i32
  %add2296 = add nsw i32 %mul2292, %conv2295
  %mul2297 = mul nsw i32 0, %add2296
  %add2298 = add nsw i32 %mul2297, 1
  %shl2299 = shl i32 %add2298, 30
  %sub2300 = sub nsw i32 %shl2299, 1
  %mul2301 = mul nsw i32 %sub2300, 2
  %add2302 = add nsw i32 %mul2301, 1
  %sub2303 = sub nsw i32 %sub2289, %add2302
  br label %cond.end.2314

cond.false.2304:                                  ; preds = %cond.true.2264
  %889 = load i64, i64* %nbytes, align 8
  %conv2305 = trunc i64 %889 to i8
  %conv2306 = sext i8 %conv2305 to i32
  %mul2307 = mul nsw i32 0, %conv2306
  %890 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2308 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %890, i32 0, i32 3
  %891 = load i64, i64* %bytes2308, align 8
  %conv2309 = trunc i64 %891 to i8
  %conv2310 = sext i8 %conv2309 to i32
  %add2311 = add nsw i32 %mul2307, %conv2310
  %mul2312 = mul nsw i32 0, %add2311
  %add2313 = add nsw i32 %mul2312, 0
  br label %cond.end.2314

cond.end.2314:                                    ; preds = %cond.false.2304, %cond.true.2276
  %cond2315 = phi i32 [ %sub2303, %cond.true.2276 ], [ %add2313, %cond.false.2304 ]
  %cmp2316 = icmp slt i32 %cond2315, 0
  br i1 %cmp2316, label %cond.true.2318, label %cond.false.2429

cond.true.2318:                                   ; preds = %cond.end.2314
  %892 = load i64, i64* %nbytes, align 8
  %conv2319 = trunc i64 %892 to i8
  %conv2320 = sext i8 %conv2319 to i32
  %cmp2321 = icmp slt i32 %conv2320, 0
  br i1 %cmp2321, label %cond.true.2323, label %cond.false.2383

cond.true.2323:                                   ; preds = %cond.true.2318
  %893 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2324 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %893, i32 0, i32 3
  %894 = load i64, i64* %bytes2324, align 8
  %conv2325 = trunc i64 %894 to i8
  %conv2326 = sext i8 %conv2325 to i32
  %895 = load i64, i64* %nbytes, align 8
  %conv2327 = trunc i64 %895 to i8
  %conv2328 = sext i8 %conv2327 to i32
  %mul2329 = mul nsw i32 0, %conv2328
  %896 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2330 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %896, i32 0, i32 3
  %897 = load i64, i64* %bytes2330, align 8
  %conv2331 = trunc i64 %897 to i8
  %conv2332 = sext i8 %conv2331 to i32
  %add2333 = add nsw i32 %mul2329, %conv2332
  %mul2334 = mul nsw i32 0, %add2333
  %sub2335 = sub nsw i32 %mul2334, 1
  %cmp2336 = icmp slt i32 %sub2335, 0
  br i1 %cmp2336, label %cond.true.2338, label %cond.false.2366

cond.true.2338:                                   ; preds = %cond.true.2323
  %898 = load i64, i64* %nbytes, align 8
  %conv2339 = trunc i64 %898 to i8
  %conv2340 = sext i8 %conv2339 to i32
  %mul2341 = mul nsw i32 0, %conv2340
  %899 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2342 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %899, i32 0, i32 3
  %900 = load i64, i64* %bytes2342, align 8
  %conv2343 = trunc i64 %900 to i8
  %conv2344 = sext i8 %conv2343 to i32
  %add2345 = add nsw i32 %mul2341, %conv2344
  %mul2346 = mul nsw i32 0, %add2345
  %add2347 = add nsw i32 %mul2346, 0
  %neg2348 = xor i32 %add2347, -1
  %cmp2349 = icmp eq i32 %neg2348, -1
  %conv2350 = zext i1 %cmp2349 to i32
  %sub2351 = sub nsw i32 0, %conv2350
  %901 = load i64, i64* %nbytes, align 8
  %conv2352 = trunc i64 %901 to i8
  %conv2353 = sext i8 %conv2352 to i32
  %mul2354 = mul nsw i32 0, %conv2353
  %902 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2355 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %902, i32 0, i32 3
  %903 = load i64, i64* %bytes2355, align 8
  %conv2356 = trunc i64 %903 to i8
  %conv2357 = sext i8 %conv2356 to i32
  %add2358 = add nsw i32 %mul2354, %conv2357
  %mul2359 = mul nsw i32 0, %add2358
  %add2360 = add nsw i32 %mul2359, 1
  %shl2361 = shl i32 %add2360, 30
  %sub2362 = sub nsw i32 %shl2361, 1
  %mul2363 = mul nsw i32 %sub2362, 2
  %add2364 = add nsw i32 %mul2363, 1
  %sub2365 = sub nsw i32 %sub2351, %add2364
  br label %cond.end.2376

cond.false.2366:                                  ; preds = %cond.true.2323
  %904 = load i64, i64* %nbytes, align 8
  %conv2367 = trunc i64 %904 to i8
  %conv2368 = sext i8 %conv2367 to i32
  %mul2369 = mul nsw i32 0, %conv2368
  %905 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2370 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %905, i32 0, i32 3
  %906 = load i64, i64* %bytes2370, align 8
  %conv2371 = trunc i64 %906 to i8
  %conv2372 = sext i8 %conv2371 to i32
  %add2373 = add nsw i32 %mul2369, %conv2372
  %mul2374 = mul nsw i32 0, %add2373
  %add2375 = add nsw i32 %mul2374, 0
  br label %cond.end.2376

cond.end.2376:                                    ; preds = %cond.false.2366, %cond.true.2338
  %cond2377 = phi i32 [ %sub2365, %cond.true.2338 ], [ %add2375, %cond.false.2366 ]
  %907 = load i64, i64* %nbytes, align 8
  %conv2378 = trunc i64 %907 to i8
  %conv2379 = sext i8 %conv2378 to i32
  %sub2380 = sub nsw i32 %cond2377, %conv2379
  %cmp2381 = icmp slt i32 %conv2326, %sub2380
  br i1 %cmp2381, label %cond.true.2503, label %lor.lhs.false.2474

cond.false.2383:                                  ; preds = %cond.true.2318
  %908 = load i64, i64* %nbytes, align 8
  %conv2384 = trunc i64 %908 to i8
  %conv2385 = sext i8 %conv2384 to i32
  %mul2386 = mul nsw i32 0, %conv2385
  %909 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2387 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %909, i32 0, i32 3
  %910 = load i64, i64* %bytes2387, align 8
  %conv2388 = trunc i64 %910 to i8
  %conv2389 = sext i8 %conv2388 to i32
  %add2390 = add nsw i32 %mul2386, %conv2389
  %mul2391 = mul nsw i32 0, %add2390
  %sub2392 = sub nsw i32 %mul2391, 1
  %cmp2393 = icmp slt i32 %sub2392, 0
  br i1 %cmp2393, label %cond.true.2395, label %cond.false.2409

cond.true.2395:                                   ; preds = %cond.false.2383
  %911 = load i64, i64* %nbytes, align 8
  %conv2396 = trunc i64 %911 to i8
  %conv2397 = sext i8 %conv2396 to i32
  %mul2398 = mul nsw i32 0, %conv2397
  %912 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2399 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %912, i32 0, i32 3
  %913 = load i64, i64* %bytes2399, align 8
  %conv2400 = trunc i64 %913 to i8
  %conv2401 = sext i8 %conv2400 to i32
  %add2402 = add nsw i32 %mul2398, %conv2401
  %mul2403 = mul nsw i32 0, %add2402
  %add2404 = add nsw i32 %mul2403, 1
  %shl2405 = shl i32 %add2404, 30
  %sub2406 = sub nsw i32 %shl2405, 1
  %mul2407 = mul nsw i32 %sub2406, 2
  %add2408 = add nsw i32 %mul2407, 1
  br label %cond.end.2419

cond.false.2409:                                  ; preds = %cond.false.2383
  %914 = load i64, i64* %nbytes, align 8
  %conv2410 = trunc i64 %914 to i8
  %conv2411 = sext i8 %conv2410 to i32
  %mul2412 = mul nsw i32 0, %conv2411
  %915 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2413 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %915, i32 0, i32 3
  %916 = load i64, i64* %bytes2413, align 8
  %conv2414 = trunc i64 %916 to i8
  %conv2415 = sext i8 %conv2414 to i32
  %add2416 = add nsw i32 %mul2412, %conv2415
  %mul2417 = mul nsw i32 0, %add2416
  %sub2418 = sub nsw i32 %mul2417, 1
  br label %cond.end.2419

cond.end.2419:                                    ; preds = %cond.false.2409, %cond.true.2395
  %cond2420 = phi i32 [ %add2408, %cond.true.2395 ], [ %sub2418, %cond.false.2409 ]
  %917 = load i64, i64* %nbytes, align 8
  %conv2421 = trunc i64 %917 to i8
  %conv2422 = sext i8 %conv2421 to i32
  %sub2423 = sub nsw i32 %cond2420, %conv2422
  %918 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2424 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %918, i32 0, i32 3
  %919 = load i64, i64* %bytes2424, align 8
  %conv2425 = trunc i64 %919 to i8
  %conv2426 = sext i8 %conv2425 to i32
  %cmp2427 = icmp slt i32 %sub2423, %conv2426
  br i1 %cmp2427, label %cond.true.2503, label %lor.lhs.false.2474

cond.false.2429:                                  ; preds = %cond.end.2314
  %920 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2430 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %920, i32 0, i32 3
  %921 = load i64, i64* %bytes2430, align 8
  %conv2431 = trunc i64 %921 to i8
  %conv2432 = sext i8 %conv2431 to i32
  %cmp2433 = icmp slt i32 %conv2432, 0
  br i1 %cmp2433, label %cond.true.2435, label %cond.false.2446

cond.true.2435:                                   ; preds = %cond.false.2429
  %922 = load i64, i64* %nbytes, align 8
  %conv2436 = trunc i64 %922 to i8
  %conv2437 = sext i8 %conv2436 to i32
  %923 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2438 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %923, i32 0, i32 3
  %924 = load i64, i64* %bytes2438, align 8
  %conv2439 = trunc i64 %924 to i8
  %conv2440 = sext i8 %conv2439 to i32
  %925 = load i64, i64* %nbytes, align 8
  %conv2441 = trunc i64 %925 to i8
  %conv2442 = sext i8 %conv2441 to i32
  %add2443 = add nsw i32 %conv2440, %conv2442
  %cmp2444 = icmp sle i32 %conv2437, %add2443
  br i1 %cmp2444, label %cond.true.2503, label %lor.lhs.false.2474

cond.false.2446:                                  ; preds = %cond.false.2429
  %926 = load i64, i64* %nbytes, align 8
  %conv2447 = trunc i64 %926 to i8
  %conv2448 = sext i8 %conv2447 to i32
  %cmp2449 = icmp slt i32 %conv2448, 0
  br i1 %cmp2449, label %cond.true.2451, label %cond.false.2463

cond.true.2451:                                   ; preds = %cond.false.2446
  %927 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2452 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %927, i32 0, i32 3
  %928 = load i64, i64* %bytes2452, align 8
  %conv2453 = trunc i64 %928 to i8
  %conv2454 = sext i8 %conv2453 to i32
  %929 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2455 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %929, i32 0, i32 3
  %930 = load i64, i64* %bytes2455, align 8
  %conv2456 = trunc i64 %930 to i8
  %conv2457 = sext i8 %conv2456 to i32
  %931 = load i64, i64* %nbytes, align 8
  %conv2458 = trunc i64 %931 to i8
  %conv2459 = sext i8 %conv2458 to i32
  %add2460 = add nsw i32 %conv2457, %conv2459
  %cmp2461 = icmp sle i32 %conv2454, %add2460
  br i1 %cmp2461, label %cond.true.2503, label %lor.lhs.false.2474

cond.false.2463:                                  ; preds = %cond.false.2446
  %932 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2464 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %932, i32 0, i32 3
  %933 = load i64, i64* %bytes2464, align 8
  %conv2465 = trunc i64 %933 to i8
  %conv2466 = sext i8 %conv2465 to i32
  %934 = load i64, i64* %nbytes, align 8
  %conv2467 = trunc i64 %934 to i8
  %conv2468 = sext i8 %conv2467 to i32
  %add2469 = add nsw i32 %conv2466, %conv2468
  %935 = load i64, i64* %nbytes, align 8
  %conv2470 = trunc i64 %935 to i8
  %conv2471 = sext i8 %conv2470 to i32
  %cmp2472 = icmp slt i32 %add2469, %conv2471
  br i1 %cmp2472, label %cond.true.2503, label %lor.lhs.false.2474

lor.lhs.false.2474:                               ; preds = %cond.false.2463, %cond.true.2451, %cond.true.2435, %cond.end.2419, %cond.end.2376
  %936 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2475 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %936, i32 0, i32 3
  %937 = load i64, i64* %bytes2475, align 8
  %conv2476 = trunc i64 %937 to i8
  %conv2477 = sext i8 %conv2476 to i32
  %938 = load i64, i64* %nbytes, align 8
  %conv2478 = trunc i64 %938 to i8
  %conv2479 = sext i8 %conv2478 to i32
  %add2480 = add nsw i32 %conv2477, %conv2479
  %mul2481 = mul nsw i32 0, %add2480
  %sub2482 = sub nsw i32 %mul2481, 1
  %cmp2483 = icmp slt i32 %sub2482, 0
  br i1 %cmp2483, label %land.lhs.true.2485, label %lor.lhs.false.2494

land.lhs.true.2485:                               ; preds = %lor.lhs.false.2474
  %939 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2486 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %939, i32 0, i32 3
  %940 = load i64, i64* %bytes2486, align 8
  %conv2487 = trunc i64 %940 to i8
  %conv2488 = sext i8 %conv2487 to i32
  %941 = load i64, i64* %nbytes, align 8
  %conv2489 = trunc i64 %941 to i8
  %conv2490 = sext i8 %conv2489 to i32
  %add2491 = add nsw i32 %conv2488, %conv2490
  %cmp2492 = icmp slt i32 %add2491, -128
  br i1 %cmp2492, label %cond.true.2503, label %lor.lhs.false.2494

lor.lhs.false.2494:                               ; preds = %land.lhs.true.2485, %lor.lhs.false.2474
  %942 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2495 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %942, i32 0, i32 3
  %943 = load i64, i64* %bytes2495, align 8
  %conv2496 = trunc i64 %943 to i8
  %conv2497 = sext i8 %conv2496 to i32
  %944 = load i64, i64* %nbytes, align 8
  %conv2498 = trunc i64 %944 to i8
  %conv2499 = sext i8 %conv2498 to i32
  %add2500 = add nsw i32 %conv2497, %conv2499
  %cmp2501 = icmp slt i32 127, %add2500
  br i1 %cmp2501, label %cond.true.2503, label %cond.false.2535

cond.true.2503:                                   ; preds = %lor.lhs.false.2494, %land.lhs.true.2485, %cond.false.2463, %cond.true.2451, %cond.true.2435, %cond.end.2419, %cond.end.2376
  %945 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2504 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %945, i32 0, i32 3
  %946 = load i64, i64* %bytes2504, align 8
  %conv2505 = trunc i64 %946 to i8
  %conv2506 = zext i8 %conv2505 to i32
  %947 = load i64, i64* %nbytes, align 8
  %conv2507 = trunc i64 %947 to i8
  %conv2508 = zext i8 %conv2507 to i32
  %add2509 = add nsw i32 %conv2506, %conv2508
  %cmp2510 = icmp sle i32 %add2509, 127
  br i1 %cmp2510, label %cond.true.2512, label %cond.false.2521

cond.true.2512:                                   ; preds = %cond.true.2503
  %948 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2513 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %948, i32 0, i32 3
  %949 = load i64, i64* %bytes2513, align 8
  %conv2514 = trunc i64 %949 to i8
  %conv2515 = zext i8 %conv2514 to i32
  %950 = load i64, i64* %nbytes, align 8
  %conv2516 = trunc i64 %950 to i8
  %conv2517 = zext i8 %conv2516 to i32
  %add2518 = add nsw i32 %conv2515, %conv2517
  %conv2519 = trunc i32 %add2518 to i8
  %conv2520 = sext i8 %conv2519 to i32
  br label %cond.end.2532

cond.false.2521:                                  ; preds = %cond.true.2503
  %951 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2522 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %951, i32 0, i32 3
  %952 = load i64, i64* %bytes2522, align 8
  %conv2523 = trunc i64 %952 to i8
  %conv2524 = zext i8 %conv2523 to i32
  %953 = load i64, i64* %nbytes, align 8
  %conv2525 = trunc i64 %953 to i8
  %conv2526 = zext i8 %conv2525 to i32
  %add2527 = add nsw i32 %conv2524, %conv2526
  %sub2528 = sub nsw i32 %add2527, -128
  %conv2529 = trunc i32 %sub2528 to i8
  %conv2530 = sext i8 %conv2529 to i32
  %add2531 = add nsw i32 %conv2530, -128
  br label %cond.end.2532

cond.end.2532:                                    ; preds = %cond.false.2521, %cond.true.2512
  %cond2533 = phi i32 [ %conv2520, %cond.true.2512 ], [ %add2531, %cond.false.2521 ]
  %conv2534 = sext i32 %cond2533 to i64
  store i64 %conv2534, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.2535:                                  ; preds = %lor.lhs.false.2494
  %954 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2536 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %954, i32 0, i32 3
  %955 = load i64, i64* %bytes2536, align 8
  %conv2537 = trunc i64 %955 to i8
  %conv2538 = zext i8 %conv2537 to i32
  %956 = load i64, i64* %nbytes, align 8
  %conv2539 = trunc i64 %956 to i8
  %conv2540 = zext i8 %conv2539 to i32
  %add2541 = add nsw i32 %conv2538, %conv2540
  %cmp2542 = icmp sle i32 %add2541, 127
  br i1 %cmp2542, label %cond.true.2544, label %cond.false.2553

cond.true.2544:                                   ; preds = %cond.false.2535
  %957 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2545 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %957, i32 0, i32 3
  %958 = load i64, i64* %bytes2545, align 8
  %conv2546 = trunc i64 %958 to i8
  %conv2547 = zext i8 %conv2546 to i32
  %959 = load i64, i64* %nbytes, align 8
  %conv2548 = trunc i64 %959 to i8
  %conv2549 = zext i8 %conv2548 to i32
  %add2550 = add nsw i32 %conv2547, %conv2549
  %conv2551 = trunc i32 %add2550 to i8
  %conv2552 = sext i8 %conv2551 to i32
  br label %cond.end.2564

cond.false.2553:                                  ; preds = %cond.false.2535
  %960 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2554 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %960, i32 0, i32 3
  %961 = load i64, i64* %bytes2554, align 8
  %conv2555 = trunc i64 %961 to i8
  %conv2556 = zext i8 %conv2555 to i32
  %962 = load i64, i64* %nbytes, align 8
  %conv2557 = trunc i64 %962 to i8
  %conv2558 = zext i8 %conv2557 to i32
  %add2559 = add nsw i32 %conv2556, %conv2558
  %sub2560 = sub nsw i32 %add2559, -128
  %conv2561 = trunc i32 %sub2560 to i8
  %conv2562 = sext i8 %conv2561 to i32
  %add2563 = add nsw i32 %conv2562, -128
  br label %cond.end.2564

cond.end.2564:                                    ; preds = %cond.false.2553, %cond.true.2544
  %cond2565 = phi i32 [ %conv2552, %cond.true.2544 ], [ %add2563, %cond.false.2553 ]
  %conv2566 = sext i32 %cond2565 to i64
  store i64 %conv2566, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.2567:                                  ; preds = %cond.true.2263
  %963 = load i64, i64* %nbytes, align 8
  %mul2568 = mul nsw i64 0, %963
  %964 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2569 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %964, i32 0, i32 3
  %965 = load i64, i64* %bytes2569, align 8
  %add2570 = add nsw i64 %mul2568, %965
  %mul2571 = mul nsw i64 0, %add2570
  %sub2572 = sub nsw i64 %mul2571, 1
  %cmp2573 = icmp slt i64 %sub2572, 0
  br i1 %cmp2573, label %cond.true.2575, label %cond.false.2596

cond.true.2575:                                   ; preds = %cond.false.2567
  %966 = load i64, i64* %nbytes, align 8
  %mul2576 = mul nsw i64 0, %966
  %967 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2577 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %967, i32 0, i32 3
  %968 = load i64, i64* %bytes2577, align 8
  %add2578 = add nsw i64 %mul2576, %968
  %mul2579 = mul nsw i64 0, %add2578
  %add2580 = add nsw i64 %mul2579, 0
  %neg2581 = xor i64 %add2580, -1
  %cmp2582 = icmp eq i64 %neg2581, -1
  %conv2583 = zext i1 %cmp2582 to i32
  %sub2584 = sub nsw i32 0, %conv2583
  %conv2585 = sext i32 %sub2584 to i64
  %969 = load i64, i64* %nbytes, align 8
  %mul2586 = mul nsw i64 0, %969
  %970 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2587 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %970, i32 0, i32 3
  %971 = load i64, i64* %bytes2587, align 8
  %add2588 = add nsw i64 %mul2586, %971
  %mul2589 = mul nsw i64 0, %add2588
  %add2590 = add nsw i64 %mul2589, 1
  %shl2591 = shl i64 %add2590, 62
  %sub2592 = sub nsw i64 %shl2591, 1
  %mul2593 = mul nsw i64 %sub2592, 2
  %add2594 = add nsw i64 %mul2593, 1
  %sub2595 = sub nsw i64 %conv2585, %add2594
  br label %cond.end.2602

cond.false.2596:                                  ; preds = %cond.false.2567
  %972 = load i64, i64* %nbytes, align 8
  %mul2597 = mul nsw i64 0, %972
  %973 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2598 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %973, i32 0, i32 3
  %974 = load i64, i64* %bytes2598, align 8
  %add2599 = add nsw i64 %mul2597, %974
  %mul2600 = mul nsw i64 0, %add2599
  %add2601 = add nsw i64 %mul2600, 0
  br label %cond.end.2602

cond.end.2602:                                    ; preds = %cond.false.2596, %cond.true.2575
  %cond2603 = phi i64 [ %sub2595, %cond.true.2575 ], [ %add2601, %cond.false.2596 ]
  %cmp2604 = icmp slt i64 %cond2603, 0
  br i1 %cmp2604, label %cond.true.2606, label %cond.false.2680

cond.true.2606:                                   ; preds = %cond.end.2602
  %975 = load i64, i64* %nbytes, align 8
  %cmp2607 = icmp slt i64 %975, 0
  br i1 %cmp2607, label %cond.true.2609, label %cond.false.2650

cond.true.2609:                                   ; preds = %cond.true.2606
  %976 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2610 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %976, i32 0, i32 3
  %977 = load i64, i64* %bytes2610, align 8
  %978 = load i64, i64* %nbytes, align 8
  %mul2611 = mul nsw i64 0, %978
  %979 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2612 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %979, i32 0, i32 3
  %980 = load i64, i64* %bytes2612, align 8
  %add2613 = add nsw i64 %mul2611, %980
  %mul2614 = mul nsw i64 0, %add2613
  %sub2615 = sub nsw i64 %mul2614, 1
  %cmp2616 = icmp slt i64 %sub2615, 0
  br i1 %cmp2616, label %cond.true.2618, label %cond.false.2639

cond.true.2618:                                   ; preds = %cond.true.2609
  %981 = load i64, i64* %nbytes, align 8
  %mul2619 = mul nsw i64 0, %981
  %982 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2620 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %982, i32 0, i32 3
  %983 = load i64, i64* %bytes2620, align 8
  %add2621 = add nsw i64 %mul2619, %983
  %mul2622 = mul nsw i64 0, %add2621
  %add2623 = add nsw i64 %mul2622, 0
  %neg2624 = xor i64 %add2623, -1
  %cmp2625 = icmp eq i64 %neg2624, -1
  %conv2626 = zext i1 %cmp2625 to i32
  %sub2627 = sub nsw i32 0, %conv2626
  %conv2628 = sext i32 %sub2627 to i64
  %984 = load i64, i64* %nbytes, align 8
  %mul2629 = mul nsw i64 0, %984
  %985 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2630 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %985, i32 0, i32 3
  %986 = load i64, i64* %bytes2630, align 8
  %add2631 = add nsw i64 %mul2629, %986
  %mul2632 = mul nsw i64 0, %add2631
  %add2633 = add nsw i64 %mul2632, 1
  %shl2634 = shl i64 %add2633, 62
  %sub2635 = sub nsw i64 %shl2634, 1
  %mul2636 = mul nsw i64 %sub2635, 2
  %add2637 = add nsw i64 %mul2636, 1
  %sub2638 = sub nsw i64 %conv2628, %add2637
  br label %cond.end.2645

cond.false.2639:                                  ; preds = %cond.true.2609
  %987 = load i64, i64* %nbytes, align 8
  %mul2640 = mul nsw i64 0, %987
  %988 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2641 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %988, i32 0, i32 3
  %989 = load i64, i64* %bytes2641, align 8
  %add2642 = add nsw i64 %mul2640, %989
  %mul2643 = mul nsw i64 0, %add2642
  %add2644 = add nsw i64 %mul2643, 0
  br label %cond.end.2645

cond.end.2645:                                    ; preds = %cond.false.2639, %cond.true.2618
  %cond2646 = phi i64 [ %sub2638, %cond.true.2618 ], [ %add2644, %cond.false.2639 ]
  %990 = load i64, i64* %nbytes, align 8
  %sub2647 = sub nsw i64 %cond2646, %990
  %cmp2648 = icmp slt i64 %977, %sub2647
  br i1 %cmp2648, label %cond.true.2720, label %lor.lhs.false.2703

cond.false.2650:                                  ; preds = %cond.true.2606
  %991 = load i64, i64* %nbytes, align 8
  %mul2651 = mul nsw i64 0, %991
  %992 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2652 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %992, i32 0, i32 3
  %993 = load i64, i64* %bytes2652, align 8
  %add2653 = add nsw i64 %mul2651, %993
  %mul2654 = mul nsw i64 0, %add2653
  %sub2655 = sub nsw i64 %mul2654, 1
  %cmp2656 = icmp slt i64 %sub2655, 0
  br i1 %cmp2656, label %cond.true.2658, label %cond.false.2668

cond.true.2658:                                   ; preds = %cond.false.2650
  %994 = load i64, i64* %nbytes, align 8
  %mul2659 = mul nsw i64 0, %994
  %995 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2660 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %995, i32 0, i32 3
  %996 = load i64, i64* %bytes2660, align 8
  %add2661 = add nsw i64 %mul2659, %996
  %mul2662 = mul nsw i64 0, %add2661
  %add2663 = add nsw i64 %mul2662, 1
  %shl2664 = shl i64 %add2663, 62
  %sub2665 = sub nsw i64 %shl2664, 1
  %mul2666 = mul nsw i64 %sub2665, 2
  %add2667 = add nsw i64 %mul2666, 1
  br label %cond.end.2674

cond.false.2668:                                  ; preds = %cond.false.2650
  %997 = load i64, i64* %nbytes, align 8
  %mul2669 = mul nsw i64 0, %997
  %998 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2670 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %998, i32 0, i32 3
  %999 = load i64, i64* %bytes2670, align 8
  %add2671 = add nsw i64 %mul2669, %999
  %mul2672 = mul nsw i64 0, %add2671
  %sub2673 = sub nsw i64 %mul2672, 1
  br label %cond.end.2674

cond.end.2674:                                    ; preds = %cond.false.2668, %cond.true.2658
  %cond2675 = phi i64 [ %add2667, %cond.true.2658 ], [ %sub2673, %cond.false.2668 ]
  %1000 = load i64, i64* %nbytes, align 8
  %sub2676 = sub nsw i64 %cond2675, %1000
  %1001 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2677 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1001, i32 0, i32 3
  %1002 = load i64, i64* %bytes2677, align 8
  %cmp2678 = icmp slt i64 %sub2676, %1002
  br i1 %cmp2678, label %cond.true.2720, label %lor.lhs.false.2703

cond.false.2680:                                  ; preds = %cond.end.2602
  %1003 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2681 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1003, i32 0, i32 3
  %1004 = load i64, i64* %bytes2681, align 8
  %cmp2682 = icmp slt i64 %1004, 0
  br i1 %cmp2682, label %cond.true.2684, label %cond.false.2689

cond.true.2684:                                   ; preds = %cond.false.2680
  %1005 = load i64, i64* %nbytes, align 8
  %1006 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2685 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1006, i32 0, i32 3
  %1007 = load i64, i64* %bytes2685, align 8
  %1008 = load i64, i64* %nbytes, align 8
  %add2686 = add nsw i64 %1007, %1008
  %cmp2687 = icmp sle i64 %1005, %add2686
  br i1 %cmp2687, label %cond.true.2720, label %lor.lhs.false.2703

cond.false.2689:                                  ; preds = %cond.false.2680
  %1009 = load i64, i64* %nbytes, align 8
  %cmp2690 = icmp slt i64 %1009, 0
  br i1 %cmp2690, label %cond.true.2692, label %cond.false.2698

cond.true.2692:                                   ; preds = %cond.false.2689
  %1010 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2693 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1010, i32 0, i32 3
  %1011 = load i64, i64* %bytes2693, align 8
  %1012 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2694 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1012, i32 0, i32 3
  %1013 = load i64, i64* %bytes2694, align 8
  %1014 = load i64, i64* %nbytes, align 8
  %add2695 = add nsw i64 %1013, %1014
  %cmp2696 = icmp sle i64 %1011, %add2695
  br i1 %cmp2696, label %cond.true.2720, label %lor.lhs.false.2703

cond.false.2698:                                  ; preds = %cond.false.2689
  %1015 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2699 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1015, i32 0, i32 3
  %1016 = load i64, i64* %bytes2699, align 8
  %1017 = load i64, i64* %nbytes, align 8
  %add2700 = add nsw i64 %1016, %1017
  %1018 = load i64, i64* %nbytes, align 8
  %cmp2701 = icmp slt i64 %add2700, %1018
  br i1 %cmp2701, label %cond.true.2720, label %lor.lhs.false.2703

lor.lhs.false.2703:                               ; preds = %cond.false.2698, %cond.true.2692, %cond.true.2684, %cond.end.2674, %cond.end.2645
  %1019 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2704 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1019, i32 0, i32 3
  %1020 = load i64, i64* %bytes2704, align 8
  %1021 = load i64, i64* %nbytes, align 8
  %add2705 = add nsw i64 %1020, %1021
  %mul2706 = mul nsw i64 0, %add2705
  %sub2707 = sub nsw i64 %mul2706, 1
  %cmp2708 = icmp slt i64 %sub2707, 0
  br i1 %cmp2708, label %land.lhs.true.2710, label %lor.lhs.false.2715

land.lhs.true.2710:                               ; preds = %lor.lhs.false.2703
  %1022 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2711 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1022, i32 0, i32 3
  %1023 = load i64, i64* %bytes2711, align 8
  %1024 = load i64, i64* %nbytes, align 8
  %add2712 = add nsw i64 %1023, %1024
  %cmp2713 = icmp slt i64 %add2712, -128
  br i1 %cmp2713, label %cond.true.2720, label %lor.lhs.false.2715

lor.lhs.false.2715:                               ; preds = %land.lhs.true.2710, %lor.lhs.false.2703
  %1025 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2716 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1025, i32 0, i32 3
  %1026 = load i64, i64* %bytes2716, align 8
  %1027 = load i64, i64* %nbytes, align 8
  %add2717 = add nsw i64 %1026, %1027
  %cmp2718 = icmp slt i64 127, %add2717
  br i1 %cmp2718, label %cond.true.2720, label %cond.false.2752

cond.true.2720:                                   ; preds = %lor.lhs.false.2715, %land.lhs.true.2710, %cond.false.2698, %cond.true.2692, %cond.true.2684, %cond.end.2674, %cond.end.2645
  %1028 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2721 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1028, i32 0, i32 3
  %1029 = load i64, i64* %bytes2721, align 8
  %conv2722 = trunc i64 %1029 to i8
  %conv2723 = zext i8 %conv2722 to i32
  %1030 = load i64, i64* %nbytes, align 8
  %conv2724 = trunc i64 %1030 to i8
  %conv2725 = zext i8 %conv2724 to i32
  %add2726 = add nsw i32 %conv2723, %conv2725
  %cmp2727 = icmp sle i32 %add2726, 127
  br i1 %cmp2727, label %cond.true.2729, label %cond.false.2738

cond.true.2729:                                   ; preds = %cond.true.2720
  %1031 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2730 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1031, i32 0, i32 3
  %1032 = load i64, i64* %bytes2730, align 8
  %conv2731 = trunc i64 %1032 to i8
  %conv2732 = zext i8 %conv2731 to i32
  %1033 = load i64, i64* %nbytes, align 8
  %conv2733 = trunc i64 %1033 to i8
  %conv2734 = zext i8 %conv2733 to i32
  %add2735 = add nsw i32 %conv2732, %conv2734
  %conv2736 = trunc i32 %add2735 to i8
  %conv2737 = sext i8 %conv2736 to i32
  br label %cond.end.2749

cond.false.2738:                                  ; preds = %cond.true.2720
  %1034 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2739 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1034, i32 0, i32 3
  %1035 = load i64, i64* %bytes2739, align 8
  %conv2740 = trunc i64 %1035 to i8
  %conv2741 = zext i8 %conv2740 to i32
  %1036 = load i64, i64* %nbytes, align 8
  %conv2742 = trunc i64 %1036 to i8
  %conv2743 = zext i8 %conv2742 to i32
  %add2744 = add nsw i32 %conv2741, %conv2743
  %sub2745 = sub nsw i32 %add2744, -128
  %conv2746 = trunc i32 %sub2745 to i8
  %conv2747 = sext i8 %conv2746 to i32
  %add2748 = add nsw i32 %conv2747, -128
  br label %cond.end.2749

cond.end.2749:                                    ; preds = %cond.false.2738, %cond.true.2729
  %cond2750 = phi i32 [ %conv2737, %cond.true.2729 ], [ %add2748, %cond.false.2738 ]
  %conv2751 = sext i32 %cond2750 to i64
  store i64 %conv2751, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.2752:                                  ; preds = %lor.lhs.false.2715
  %1037 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2753 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1037, i32 0, i32 3
  %1038 = load i64, i64* %bytes2753, align 8
  %conv2754 = trunc i64 %1038 to i8
  %conv2755 = zext i8 %conv2754 to i32
  %1039 = load i64, i64* %nbytes, align 8
  %conv2756 = trunc i64 %1039 to i8
  %conv2757 = zext i8 %conv2756 to i32
  %add2758 = add nsw i32 %conv2755, %conv2757
  %cmp2759 = icmp sle i32 %add2758, 127
  br i1 %cmp2759, label %cond.true.2761, label %cond.false.2770

cond.true.2761:                                   ; preds = %cond.false.2752
  %1040 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2762 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1040, i32 0, i32 3
  %1041 = load i64, i64* %bytes2762, align 8
  %conv2763 = trunc i64 %1041 to i8
  %conv2764 = zext i8 %conv2763 to i32
  %1042 = load i64, i64* %nbytes, align 8
  %conv2765 = trunc i64 %1042 to i8
  %conv2766 = zext i8 %conv2765 to i32
  %add2767 = add nsw i32 %conv2764, %conv2766
  %conv2768 = trunc i32 %add2767 to i8
  %conv2769 = sext i8 %conv2768 to i32
  br label %cond.end.2781

cond.false.2770:                                  ; preds = %cond.false.2752
  %1043 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2771 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1043, i32 0, i32 3
  %1044 = load i64, i64* %bytes2771, align 8
  %conv2772 = trunc i64 %1044 to i8
  %conv2773 = zext i8 %conv2772 to i32
  %1045 = load i64, i64* %nbytes, align 8
  %conv2774 = trunc i64 %1045 to i8
  %conv2775 = zext i8 %conv2774 to i32
  %add2776 = add nsw i32 %conv2773, %conv2775
  %sub2777 = sub nsw i32 %add2776, -128
  %conv2778 = trunc i32 %sub2777 to i8
  %conv2779 = sext i8 %conv2778 to i32
  %add2780 = add nsw i32 %conv2779, -128
  br label %cond.end.2781

cond.end.2781:                                    ; preds = %cond.false.2770, %cond.true.2761
  %cond2782 = phi i32 [ %conv2769, %cond.true.2761 ], [ %add2780, %cond.false.2770 ]
  %conv2783 = sext i32 %cond2782 to i64
  store i64 %conv2783, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.2784:                                  ; preds = %if.end.2262
  br i1 false, label %cond.true.2785, label %cond.false.3306

cond.true.2785:                                   ; preds = %cond.false.2784
  br i1 false, label %cond.true.2786, label %cond.false.3089

cond.true.2786:                                   ; preds = %cond.true.2785
  %1046 = load i64, i64* %nbytes, align 8
  %conv2787 = trunc i64 %1046 to i16
  %conv2788 = sext i16 %conv2787 to i32
  %mul2789 = mul nsw i32 0, %conv2788
  %1047 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2790 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1047, i32 0, i32 3
  %1048 = load i64, i64* %bytes2790, align 8
  %conv2791 = trunc i64 %1048 to i16
  %conv2792 = sext i16 %conv2791 to i32
  %add2793 = add nsw i32 %mul2789, %conv2792
  %mul2794 = mul nsw i32 0, %add2793
  %sub2795 = sub nsw i32 %mul2794, 1
  %cmp2796 = icmp slt i32 %sub2795, 0
  br i1 %cmp2796, label %cond.true.2798, label %cond.false.2826

cond.true.2798:                                   ; preds = %cond.true.2786
  %1049 = load i64, i64* %nbytes, align 8
  %conv2799 = trunc i64 %1049 to i16
  %conv2800 = sext i16 %conv2799 to i32
  %mul2801 = mul nsw i32 0, %conv2800
  %1050 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2802 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1050, i32 0, i32 3
  %1051 = load i64, i64* %bytes2802, align 8
  %conv2803 = trunc i64 %1051 to i16
  %conv2804 = sext i16 %conv2803 to i32
  %add2805 = add nsw i32 %mul2801, %conv2804
  %mul2806 = mul nsw i32 0, %add2805
  %add2807 = add nsw i32 %mul2806, 0
  %neg2808 = xor i32 %add2807, -1
  %cmp2809 = icmp eq i32 %neg2808, -1
  %conv2810 = zext i1 %cmp2809 to i32
  %sub2811 = sub nsw i32 0, %conv2810
  %1052 = load i64, i64* %nbytes, align 8
  %conv2812 = trunc i64 %1052 to i16
  %conv2813 = sext i16 %conv2812 to i32
  %mul2814 = mul nsw i32 0, %conv2813
  %1053 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2815 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1053, i32 0, i32 3
  %1054 = load i64, i64* %bytes2815, align 8
  %conv2816 = trunc i64 %1054 to i16
  %conv2817 = sext i16 %conv2816 to i32
  %add2818 = add nsw i32 %mul2814, %conv2817
  %mul2819 = mul nsw i32 0, %add2818
  %add2820 = add nsw i32 %mul2819, 1
  %shl2821 = shl i32 %add2820, 30
  %sub2822 = sub nsw i32 %shl2821, 1
  %mul2823 = mul nsw i32 %sub2822, 2
  %add2824 = add nsw i32 %mul2823, 1
  %sub2825 = sub nsw i32 %sub2811, %add2824
  br label %cond.end.2836

cond.false.2826:                                  ; preds = %cond.true.2786
  %1055 = load i64, i64* %nbytes, align 8
  %conv2827 = trunc i64 %1055 to i16
  %conv2828 = sext i16 %conv2827 to i32
  %mul2829 = mul nsw i32 0, %conv2828
  %1056 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2830 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1056, i32 0, i32 3
  %1057 = load i64, i64* %bytes2830, align 8
  %conv2831 = trunc i64 %1057 to i16
  %conv2832 = sext i16 %conv2831 to i32
  %add2833 = add nsw i32 %mul2829, %conv2832
  %mul2834 = mul nsw i32 0, %add2833
  %add2835 = add nsw i32 %mul2834, 0
  br label %cond.end.2836

cond.end.2836:                                    ; preds = %cond.false.2826, %cond.true.2798
  %cond2837 = phi i32 [ %sub2825, %cond.true.2798 ], [ %add2835, %cond.false.2826 ]
  %cmp2838 = icmp slt i32 %cond2837, 0
  br i1 %cmp2838, label %cond.true.2840, label %cond.false.2951

cond.true.2840:                                   ; preds = %cond.end.2836
  %1058 = load i64, i64* %nbytes, align 8
  %conv2841 = trunc i64 %1058 to i16
  %conv2842 = sext i16 %conv2841 to i32
  %cmp2843 = icmp slt i32 %conv2842, 0
  br i1 %cmp2843, label %cond.true.2845, label %cond.false.2905

cond.true.2845:                                   ; preds = %cond.true.2840
  %1059 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2846 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1059, i32 0, i32 3
  %1060 = load i64, i64* %bytes2846, align 8
  %conv2847 = trunc i64 %1060 to i16
  %conv2848 = sext i16 %conv2847 to i32
  %1061 = load i64, i64* %nbytes, align 8
  %conv2849 = trunc i64 %1061 to i16
  %conv2850 = sext i16 %conv2849 to i32
  %mul2851 = mul nsw i32 0, %conv2850
  %1062 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2852 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1062, i32 0, i32 3
  %1063 = load i64, i64* %bytes2852, align 8
  %conv2853 = trunc i64 %1063 to i16
  %conv2854 = sext i16 %conv2853 to i32
  %add2855 = add nsw i32 %mul2851, %conv2854
  %mul2856 = mul nsw i32 0, %add2855
  %sub2857 = sub nsw i32 %mul2856, 1
  %cmp2858 = icmp slt i32 %sub2857, 0
  br i1 %cmp2858, label %cond.true.2860, label %cond.false.2888

cond.true.2860:                                   ; preds = %cond.true.2845
  %1064 = load i64, i64* %nbytes, align 8
  %conv2861 = trunc i64 %1064 to i16
  %conv2862 = sext i16 %conv2861 to i32
  %mul2863 = mul nsw i32 0, %conv2862
  %1065 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2864 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1065, i32 0, i32 3
  %1066 = load i64, i64* %bytes2864, align 8
  %conv2865 = trunc i64 %1066 to i16
  %conv2866 = sext i16 %conv2865 to i32
  %add2867 = add nsw i32 %mul2863, %conv2866
  %mul2868 = mul nsw i32 0, %add2867
  %add2869 = add nsw i32 %mul2868, 0
  %neg2870 = xor i32 %add2869, -1
  %cmp2871 = icmp eq i32 %neg2870, -1
  %conv2872 = zext i1 %cmp2871 to i32
  %sub2873 = sub nsw i32 0, %conv2872
  %1067 = load i64, i64* %nbytes, align 8
  %conv2874 = trunc i64 %1067 to i16
  %conv2875 = sext i16 %conv2874 to i32
  %mul2876 = mul nsw i32 0, %conv2875
  %1068 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2877 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1068, i32 0, i32 3
  %1069 = load i64, i64* %bytes2877, align 8
  %conv2878 = trunc i64 %1069 to i16
  %conv2879 = sext i16 %conv2878 to i32
  %add2880 = add nsw i32 %mul2876, %conv2879
  %mul2881 = mul nsw i32 0, %add2880
  %add2882 = add nsw i32 %mul2881, 1
  %shl2883 = shl i32 %add2882, 30
  %sub2884 = sub nsw i32 %shl2883, 1
  %mul2885 = mul nsw i32 %sub2884, 2
  %add2886 = add nsw i32 %mul2885, 1
  %sub2887 = sub nsw i32 %sub2873, %add2886
  br label %cond.end.2898

cond.false.2888:                                  ; preds = %cond.true.2845
  %1070 = load i64, i64* %nbytes, align 8
  %conv2889 = trunc i64 %1070 to i16
  %conv2890 = sext i16 %conv2889 to i32
  %mul2891 = mul nsw i32 0, %conv2890
  %1071 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2892 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1071, i32 0, i32 3
  %1072 = load i64, i64* %bytes2892, align 8
  %conv2893 = trunc i64 %1072 to i16
  %conv2894 = sext i16 %conv2893 to i32
  %add2895 = add nsw i32 %mul2891, %conv2894
  %mul2896 = mul nsw i32 0, %add2895
  %add2897 = add nsw i32 %mul2896, 0
  br label %cond.end.2898

cond.end.2898:                                    ; preds = %cond.false.2888, %cond.true.2860
  %cond2899 = phi i32 [ %sub2887, %cond.true.2860 ], [ %add2897, %cond.false.2888 ]
  %1073 = load i64, i64* %nbytes, align 8
  %conv2900 = trunc i64 %1073 to i16
  %conv2901 = sext i16 %conv2900 to i32
  %sub2902 = sub nsw i32 %cond2899, %conv2901
  %cmp2903 = icmp slt i32 %conv2848, %sub2902
  br i1 %cmp2903, label %cond.true.3025, label %lor.lhs.false.2996

cond.false.2905:                                  ; preds = %cond.true.2840
  %1074 = load i64, i64* %nbytes, align 8
  %conv2906 = trunc i64 %1074 to i16
  %conv2907 = sext i16 %conv2906 to i32
  %mul2908 = mul nsw i32 0, %conv2907
  %1075 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2909 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1075, i32 0, i32 3
  %1076 = load i64, i64* %bytes2909, align 8
  %conv2910 = trunc i64 %1076 to i16
  %conv2911 = sext i16 %conv2910 to i32
  %add2912 = add nsw i32 %mul2908, %conv2911
  %mul2913 = mul nsw i32 0, %add2912
  %sub2914 = sub nsw i32 %mul2913, 1
  %cmp2915 = icmp slt i32 %sub2914, 0
  br i1 %cmp2915, label %cond.true.2917, label %cond.false.2931

cond.true.2917:                                   ; preds = %cond.false.2905
  %1077 = load i64, i64* %nbytes, align 8
  %conv2918 = trunc i64 %1077 to i16
  %conv2919 = sext i16 %conv2918 to i32
  %mul2920 = mul nsw i32 0, %conv2919
  %1078 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2921 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1078, i32 0, i32 3
  %1079 = load i64, i64* %bytes2921, align 8
  %conv2922 = trunc i64 %1079 to i16
  %conv2923 = sext i16 %conv2922 to i32
  %add2924 = add nsw i32 %mul2920, %conv2923
  %mul2925 = mul nsw i32 0, %add2924
  %add2926 = add nsw i32 %mul2925, 1
  %shl2927 = shl i32 %add2926, 30
  %sub2928 = sub nsw i32 %shl2927, 1
  %mul2929 = mul nsw i32 %sub2928, 2
  %add2930 = add nsw i32 %mul2929, 1
  br label %cond.end.2941

cond.false.2931:                                  ; preds = %cond.false.2905
  %1080 = load i64, i64* %nbytes, align 8
  %conv2932 = trunc i64 %1080 to i16
  %conv2933 = sext i16 %conv2932 to i32
  %mul2934 = mul nsw i32 0, %conv2933
  %1081 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2935 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1081, i32 0, i32 3
  %1082 = load i64, i64* %bytes2935, align 8
  %conv2936 = trunc i64 %1082 to i16
  %conv2937 = sext i16 %conv2936 to i32
  %add2938 = add nsw i32 %mul2934, %conv2937
  %mul2939 = mul nsw i32 0, %add2938
  %sub2940 = sub nsw i32 %mul2939, 1
  br label %cond.end.2941

cond.end.2941:                                    ; preds = %cond.false.2931, %cond.true.2917
  %cond2942 = phi i32 [ %add2930, %cond.true.2917 ], [ %sub2940, %cond.false.2931 ]
  %1083 = load i64, i64* %nbytes, align 8
  %conv2943 = trunc i64 %1083 to i16
  %conv2944 = sext i16 %conv2943 to i32
  %sub2945 = sub nsw i32 %cond2942, %conv2944
  %1084 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2946 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1084, i32 0, i32 3
  %1085 = load i64, i64* %bytes2946, align 8
  %conv2947 = trunc i64 %1085 to i16
  %conv2948 = sext i16 %conv2947 to i32
  %cmp2949 = icmp slt i32 %sub2945, %conv2948
  br i1 %cmp2949, label %cond.true.3025, label %lor.lhs.false.2996

cond.false.2951:                                  ; preds = %cond.end.2836
  %1086 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2952 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1086, i32 0, i32 3
  %1087 = load i64, i64* %bytes2952, align 8
  %conv2953 = trunc i64 %1087 to i16
  %conv2954 = sext i16 %conv2953 to i32
  %cmp2955 = icmp slt i32 %conv2954, 0
  br i1 %cmp2955, label %cond.true.2957, label %cond.false.2968

cond.true.2957:                                   ; preds = %cond.false.2951
  %1088 = load i64, i64* %nbytes, align 8
  %conv2958 = trunc i64 %1088 to i16
  %conv2959 = sext i16 %conv2958 to i32
  %1089 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2960 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1089, i32 0, i32 3
  %1090 = load i64, i64* %bytes2960, align 8
  %conv2961 = trunc i64 %1090 to i16
  %conv2962 = sext i16 %conv2961 to i32
  %1091 = load i64, i64* %nbytes, align 8
  %conv2963 = trunc i64 %1091 to i16
  %conv2964 = sext i16 %conv2963 to i32
  %add2965 = add nsw i32 %conv2962, %conv2964
  %cmp2966 = icmp sle i32 %conv2959, %add2965
  br i1 %cmp2966, label %cond.true.3025, label %lor.lhs.false.2996

cond.false.2968:                                  ; preds = %cond.false.2951
  %1092 = load i64, i64* %nbytes, align 8
  %conv2969 = trunc i64 %1092 to i16
  %conv2970 = sext i16 %conv2969 to i32
  %cmp2971 = icmp slt i32 %conv2970, 0
  br i1 %cmp2971, label %cond.true.2973, label %cond.false.2985

cond.true.2973:                                   ; preds = %cond.false.2968
  %1093 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2974 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1093, i32 0, i32 3
  %1094 = load i64, i64* %bytes2974, align 8
  %conv2975 = trunc i64 %1094 to i16
  %conv2976 = sext i16 %conv2975 to i32
  %1095 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2977 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1095, i32 0, i32 3
  %1096 = load i64, i64* %bytes2977, align 8
  %conv2978 = trunc i64 %1096 to i16
  %conv2979 = sext i16 %conv2978 to i32
  %1097 = load i64, i64* %nbytes, align 8
  %conv2980 = trunc i64 %1097 to i16
  %conv2981 = sext i16 %conv2980 to i32
  %add2982 = add nsw i32 %conv2979, %conv2981
  %cmp2983 = icmp sle i32 %conv2976, %add2982
  br i1 %cmp2983, label %cond.true.3025, label %lor.lhs.false.2996

cond.false.2985:                                  ; preds = %cond.false.2968
  %1098 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2986 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1098, i32 0, i32 3
  %1099 = load i64, i64* %bytes2986, align 8
  %conv2987 = trunc i64 %1099 to i16
  %conv2988 = sext i16 %conv2987 to i32
  %1100 = load i64, i64* %nbytes, align 8
  %conv2989 = trunc i64 %1100 to i16
  %conv2990 = sext i16 %conv2989 to i32
  %add2991 = add nsw i32 %conv2988, %conv2990
  %1101 = load i64, i64* %nbytes, align 8
  %conv2992 = trunc i64 %1101 to i16
  %conv2993 = sext i16 %conv2992 to i32
  %cmp2994 = icmp slt i32 %add2991, %conv2993
  br i1 %cmp2994, label %cond.true.3025, label %lor.lhs.false.2996

lor.lhs.false.2996:                               ; preds = %cond.false.2985, %cond.true.2973, %cond.true.2957, %cond.end.2941, %cond.end.2898
  %1102 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes2997 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1102, i32 0, i32 3
  %1103 = load i64, i64* %bytes2997, align 8
  %conv2998 = trunc i64 %1103 to i16
  %conv2999 = sext i16 %conv2998 to i32
  %1104 = load i64, i64* %nbytes, align 8
  %conv3000 = trunc i64 %1104 to i16
  %conv3001 = sext i16 %conv3000 to i32
  %add3002 = add nsw i32 %conv2999, %conv3001
  %mul3003 = mul nsw i32 0, %add3002
  %sub3004 = sub nsw i32 %mul3003, 1
  %cmp3005 = icmp slt i32 %sub3004, 0
  br i1 %cmp3005, label %land.lhs.true.3007, label %lor.lhs.false.3016

land.lhs.true.3007:                               ; preds = %lor.lhs.false.2996
  %1105 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3008 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1105, i32 0, i32 3
  %1106 = load i64, i64* %bytes3008, align 8
  %conv3009 = trunc i64 %1106 to i16
  %conv3010 = sext i16 %conv3009 to i32
  %1107 = load i64, i64* %nbytes, align 8
  %conv3011 = trunc i64 %1107 to i16
  %conv3012 = sext i16 %conv3011 to i32
  %add3013 = add nsw i32 %conv3010, %conv3012
  %cmp3014 = icmp slt i32 %add3013, -32768
  br i1 %cmp3014, label %cond.true.3025, label %lor.lhs.false.3016

lor.lhs.false.3016:                               ; preds = %land.lhs.true.3007, %lor.lhs.false.2996
  %1108 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3017 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1108, i32 0, i32 3
  %1109 = load i64, i64* %bytes3017, align 8
  %conv3018 = trunc i64 %1109 to i16
  %conv3019 = sext i16 %conv3018 to i32
  %1110 = load i64, i64* %nbytes, align 8
  %conv3020 = trunc i64 %1110 to i16
  %conv3021 = sext i16 %conv3020 to i32
  %add3022 = add nsw i32 %conv3019, %conv3021
  %cmp3023 = icmp slt i32 32767, %add3022
  br i1 %cmp3023, label %cond.true.3025, label %cond.false.3057

cond.true.3025:                                   ; preds = %lor.lhs.false.3016, %land.lhs.true.3007, %cond.false.2985, %cond.true.2973, %cond.true.2957, %cond.end.2941, %cond.end.2898
  %1111 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3026 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1111, i32 0, i32 3
  %1112 = load i64, i64* %bytes3026, align 8
  %conv3027 = trunc i64 %1112 to i16
  %conv3028 = zext i16 %conv3027 to i32
  %1113 = load i64, i64* %nbytes, align 8
  %conv3029 = trunc i64 %1113 to i16
  %conv3030 = zext i16 %conv3029 to i32
  %add3031 = add nsw i32 %conv3028, %conv3030
  %cmp3032 = icmp sle i32 %add3031, 32767
  br i1 %cmp3032, label %cond.true.3034, label %cond.false.3043

cond.true.3034:                                   ; preds = %cond.true.3025
  %1114 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3035 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1114, i32 0, i32 3
  %1115 = load i64, i64* %bytes3035, align 8
  %conv3036 = trunc i64 %1115 to i16
  %conv3037 = zext i16 %conv3036 to i32
  %1116 = load i64, i64* %nbytes, align 8
  %conv3038 = trunc i64 %1116 to i16
  %conv3039 = zext i16 %conv3038 to i32
  %add3040 = add nsw i32 %conv3037, %conv3039
  %conv3041 = trunc i32 %add3040 to i16
  %conv3042 = sext i16 %conv3041 to i32
  br label %cond.end.3054

cond.false.3043:                                  ; preds = %cond.true.3025
  %1117 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3044 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1117, i32 0, i32 3
  %1118 = load i64, i64* %bytes3044, align 8
  %conv3045 = trunc i64 %1118 to i16
  %conv3046 = zext i16 %conv3045 to i32
  %1119 = load i64, i64* %nbytes, align 8
  %conv3047 = trunc i64 %1119 to i16
  %conv3048 = zext i16 %conv3047 to i32
  %add3049 = add nsw i32 %conv3046, %conv3048
  %sub3050 = sub nsw i32 %add3049, -32768
  %conv3051 = trunc i32 %sub3050 to i16
  %conv3052 = sext i16 %conv3051 to i32
  %add3053 = add nsw i32 %conv3052, -32768
  br label %cond.end.3054

cond.end.3054:                                    ; preds = %cond.false.3043, %cond.true.3034
  %cond3055 = phi i32 [ %conv3042, %cond.true.3034 ], [ %add3053, %cond.false.3043 ]
  %conv3056 = sext i32 %cond3055 to i64
  store i64 %conv3056, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.3057:                                  ; preds = %lor.lhs.false.3016
  %1120 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3058 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1120, i32 0, i32 3
  %1121 = load i64, i64* %bytes3058, align 8
  %conv3059 = trunc i64 %1121 to i16
  %conv3060 = zext i16 %conv3059 to i32
  %1122 = load i64, i64* %nbytes, align 8
  %conv3061 = trunc i64 %1122 to i16
  %conv3062 = zext i16 %conv3061 to i32
  %add3063 = add nsw i32 %conv3060, %conv3062
  %cmp3064 = icmp sle i32 %add3063, 32767
  br i1 %cmp3064, label %cond.true.3066, label %cond.false.3075

cond.true.3066:                                   ; preds = %cond.false.3057
  %1123 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3067 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1123, i32 0, i32 3
  %1124 = load i64, i64* %bytes3067, align 8
  %conv3068 = trunc i64 %1124 to i16
  %conv3069 = zext i16 %conv3068 to i32
  %1125 = load i64, i64* %nbytes, align 8
  %conv3070 = trunc i64 %1125 to i16
  %conv3071 = zext i16 %conv3070 to i32
  %add3072 = add nsw i32 %conv3069, %conv3071
  %conv3073 = trunc i32 %add3072 to i16
  %conv3074 = sext i16 %conv3073 to i32
  br label %cond.end.3086

cond.false.3075:                                  ; preds = %cond.false.3057
  %1126 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3076 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1126, i32 0, i32 3
  %1127 = load i64, i64* %bytes3076, align 8
  %conv3077 = trunc i64 %1127 to i16
  %conv3078 = zext i16 %conv3077 to i32
  %1128 = load i64, i64* %nbytes, align 8
  %conv3079 = trunc i64 %1128 to i16
  %conv3080 = zext i16 %conv3079 to i32
  %add3081 = add nsw i32 %conv3078, %conv3080
  %sub3082 = sub nsw i32 %add3081, -32768
  %conv3083 = trunc i32 %sub3082 to i16
  %conv3084 = sext i16 %conv3083 to i32
  %add3085 = add nsw i32 %conv3084, -32768
  br label %cond.end.3086

cond.end.3086:                                    ; preds = %cond.false.3075, %cond.true.3066
  %cond3087 = phi i32 [ %conv3074, %cond.true.3066 ], [ %add3085, %cond.false.3075 ]
  %conv3088 = sext i32 %cond3087 to i64
  store i64 %conv3088, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.3089:                                  ; preds = %cond.true.2785
  %1129 = load i64, i64* %nbytes, align 8
  %mul3090 = mul nsw i64 0, %1129
  %1130 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3091 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1130, i32 0, i32 3
  %1131 = load i64, i64* %bytes3091, align 8
  %add3092 = add nsw i64 %mul3090, %1131
  %mul3093 = mul nsw i64 0, %add3092
  %sub3094 = sub nsw i64 %mul3093, 1
  %cmp3095 = icmp slt i64 %sub3094, 0
  br i1 %cmp3095, label %cond.true.3097, label %cond.false.3118

cond.true.3097:                                   ; preds = %cond.false.3089
  %1132 = load i64, i64* %nbytes, align 8
  %mul3098 = mul nsw i64 0, %1132
  %1133 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3099 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1133, i32 0, i32 3
  %1134 = load i64, i64* %bytes3099, align 8
  %add3100 = add nsw i64 %mul3098, %1134
  %mul3101 = mul nsw i64 0, %add3100
  %add3102 = add nsw i64 %mul3101, 0
  %neg3103 = xor i64 %add3102, -1
  %cmp3104 = icmp eq i64 %neg3103, -1
  %conv3105 = zext i1 %cmp3104 to i32
  %sub3106 = sub nsw i32 0, %conv3105
  %conv3107 = sext i32 %sub3106 to i64
  %1135 = load i64, i64* %nbytes, align 8
  %mul3108 = mul nsw i64 0, %1135
  %1136 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3109 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1136, i32 0, i32 3
  %1137 = load i64, i64* %bytes3109, align 8
  %add3110 = add nsw i64 %mul3108, %1137
  %mul3111 = mul nsw i64 0, %add3110
  %add3112 = add nsw i64 %mul3111, 1
  %shl3113 = shl i64 %add3112, 62
  %sub3114 = sub nsw i64 %shl3113, 1
  %mul3115 = mul nsw i64 %sub3114, 2
  %add3116 = add nsw i64 %mul3115, 1
  %sub3117 = sub nsw i64 %conv3107, %add3116
  br label %cond.end.3124

cond.false.3118:                                  ; preds = %cond.false.3089
  %1138 = load i64, i64* %nbytes, align 8
  %mul3119 = mul nsw i64 0, %1138
  %1139 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3120 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1139, i32 0, i32 3
  %1140 = load i64, i64* %bytes3120, align 8
  %add3121 = add nsw i64 %mul3119, %1140
  %mul3122 = mul nsw i64 0, %add3121
  %add3123 = add nsw i64 %mul3122, 0
  br label %cond.end.3124

cond.end.3124:                                    ; preds = %cond.false.3118, %cond.true.3097
  %cond3125 = phi i64 [ %sub3117, %cond.true.3097 ], [ %add3123, %cond.false.3118 ]
  %cmp3126 = icmp slt i64 %cond3125, 0
  br i1 %cmp3126, label %cond.true.3128, label %cond.false.3202

cond.true.3128:                                   ; preds = %cond.end.3124
  %1141 = load i64, i64* %nbytes, align 8
  %cmp3129 = icmp slt i64 %1141, 0
  br i1 %cmp3129, label %cond.true.3131, label %cond.false.3172

cond.true.3131:                                   ; preds = %cond.true.3128
  %1142 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3132 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1142, i32 0, i32 3
  %1143 = load i64, i64* %bytes3132, align 8
  %1144 = load i64, i64* %nbytes, align 8
  %mul3133 = mul nsw i64 0, %1144
  %1145 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3134 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1145, i32 0, i32 3
  %1146 = load i64, i64* %bytes3134, align 8
  %add3135 = add nsw i64 %mul3133, %1146
  %mul3136 = mul nsw i64 0, %add3135
  %sub3137 = sub nsw i64 %mul3136, 1
  %cmp3138 = icmp slt i64 %sub3137, 0
  br i1 %cmp3138, label %cond.true.3140, label %cond.false.3161

cond.true.3140:                                   ; preds = %cond.true.3131
  %1147 = load i64, i64* %nbytes, align 8
  %mul3141 = mul nsw i64 0, %1147
  %1148 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3142 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1148, i32 0, i32 3
  %1149 = load i64, i64* %bytes3142, align 8
  %add3143 = add nsw i64 %mul3141, %1149
  %mul3144 = mul nsw i64 0, %add3143
  %add3145 = add nsw i64 %mul3144, 0
  %neg3146 = xor i64 %add3145, -1
  %cmp3147 = icmp eq i64 %neg3146, -1
  %conv3148 = zext i1 %cmp3147 to i32
  %sub3149 = sub nsw i32 0, %conv3148
  %conv3150 = sext i32 %sub3149 to i64
  %1150 = load i64, i64* %nbytes, align 8
  %mul3151 = mul nsw i64 0, %1150
  %1151 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3152 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1151, i32 0, i32 3
  %1152 = load i64, i64* %bytes3152, align 8
  %add3153 = add nsw i64 %mul3151, %1152
  %mul3154 = mul nsw i64 0, %add3153
  %add3155 = add nsw i64 %mul3154, 1
  %shl3156 = shl i64 %add3155, 62
  %sub3157 = sub nsw i64 %shl3156, 1
  %mul3158 = mul nsw i64 %sub3157, 2
  %add3159 = add nsw i64 %mul3158, 1
  %sub3160 = sub nsw i64 %conv3150, %add3159
  br label %cond.end.3167

cond.false.3161:                                  ; preds = %cond.true.3131
  %1153 = load i64, i64* %nbytes, align 8
  %mul3162 = mul nsw i64 0, %1153
  %1154 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3163 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1154, i32 0, i32 3
  %1155 = load i64, i64* %bytes3163, align 8
  %add3164 = add nsw i64 %mul3162, %1155
  %mul3165 = mul nsw i64 0, %add3164
  %add3166 = add nsw i64 %mul3165, 0
  br label %cond.end.3167

cond.end.3167:                                    ; preds = %cond.false.3161, %cond.true.3140
  %cond3168 = phi i64 [ %sub3160, %cond.true.3140 ], [ %add3166, %cond.false.3161 ]
  %1156 = load i64, i64* %nbytes, align 8
  %sub3169 = sub nsw i64 %cond3168, %1156
  %cmp3170 = icmp slt i64 %1143, %sub3169
  br i1 %cmp3170, label %cond.true.3242, label %lor.lhs.false.3225

cond.false.3172:                                  ; preds = %cond.true.3128
  %1157 = load i64, i64* %nbytes, align 8
  %mul3173 = mul nsw i64 0, %1157
  %1158 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3174 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1158, i32 0, i32 3
  %1159 = load i64, i64* %bytes3174, align 8
  %add3175 = add nsw i64 %mul3173, %1159
  %mul3176 = mul nsw i64 0, %add3175
  %sub3177 = sub nsw i64 %mul3176, 1
  %cmp3178 = icmp slt i64 %sub3177, 0
  br i1 %cmp3178, label %cond.true.3180, label %cond.false.3190

cond.true.3180:                                   ; preds = %cond.false.3172
  %1160 = load i64, i64* %nbytes, align 8
  %mul3181 = mul nsw i64 0, %1160
  %1161 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3182 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1161, i32 0, i32 3
  %1162 = load i64, i64* %bytes3182, align 8
  %add3183 = add nsw i64 %mul3181, %1162
  %mul3184 = mul nsw i64 0, %add3183
  %add3185 = add nsw i64 %mul3184, 1
  %shl3186 = shl i64 %add3185, 62
  %sub3187 = sub nsw i64 %shl3186, 1
  %mul3188 = mul nsw i64 %sub3187, 2
  %add3189 = add nsw i64 %mul3188, 1
  br label %cond.end.3196

cond.false.3190:                                  ; preds = %cond.false.3172
  %1163 = load i64, i64* %nbytes, align 8
  %mul3191 = mul nsw i64 0, %1163
  %1164 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3192 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1164, i32 0, i32 3
  %1165 = load i64, i64* %bytes3192, align 8
  %add3193 = add nsw i64 %mul3191, %1165
  %mul3194 = mul nsw i64 0, %add3193
  %sub3195 = sub nsw i64 %mul3194, 1
  br label %cond.end.3196

cond.end.3196:                                    ; preds = %cond.false.3190, %cond.true.3180
  %cond3197 = phi i64 [ %add3189, %cond.true.3180 ], [ %sub3195, %cond.false.3190 ]
  %1166 = load i64, i64* %nbytes, align 8
  %sub3198 = sub nsw i64 %cond3197, %1166
  %1167 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3199 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1167, i32 0, i32 3
  %1168 = load i64, i64* %bytes3199, align 8
  %cmp3200 = icmp slt i64 %sub3198, %1168
  br i1 %cmp3200, label %cond.true.3242, label %lor.lhs.false.3225

cond.false.3202:                                  ; preds = %cond.end.3124
  %1169 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3203 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1169, i32 0, i32 3
  %1170 = load i64, i64* %bytes3203, align 8
  %cmp3204 = icmp slt i64 %1170, 0
  br i1 %cmp3204, label %cond.true.3206, label %cond.false.3211

cond.true.3206:                                   ; preds = %cond.false.3202
  %1171 = load i64, i64* %nbytes, align 8
  %1172 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3207 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1172, i32 0, i32 3
  %1173 = load i64, i64* %bytes3207, align 8
  %1174 = load i64, i64* %nbytes, align 8
  %add3208 = add nsw i64 %1173, %1174
  %cmp3209 = icmp sle i64 %1171, %add3208
  br i1 %cmp3209, label %cond.true.3242, label %lor.lhs.false.3225

cond.false.3211:                                  ; preds = %cond.false.3202
  %1175 = load i64, i64* %nbytes, align 8
  %cmp3212 = icmp slt i64 %1175, 0
  br i1 %cmp3212, label %cond.true.3214, label %cond.false.3220

cond.true.3214:                                   ; preds = %cond.false.3211
  %1176 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3215 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1176, i32 0, i32 3
  %1177 = load i64, i64* %bytes3215, align 8
  %1178 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3216 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1178, i32 0, i32 3
  %1179 = load i64, i64* %bytes3216, align 8
  %1180 = load i64, i64* %nbytes, align 8
  %add3217 = add nsw i64 %1179, %1180
  %cmp3218 = icmp sle i64 %1177, %add3217
  br i1 %cmp3218, label %cond.true.3242, label %lor.lhs.false.3225

cond.false.3220:                                  ; preds = %cond.false.3211
  %1181 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3221 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1181, i32 0, i32 3
  %1182 = load i64, i64* %bytes3221, align 8
  %1183 = load i64, i64* %nbytes, align 8
  %add3222 = add nsw i64 %1182, %1183
  %1184 = load i64, i64* %nbytes, align 8
  %cmp3223 = icmp slt i64 %add3222, %1184
  br i1 %cmp3223, label %cond.true.3242, label %lor.lhs.false.3225

lor.lhs.false.3225:                               ; preds = %cond.false.3220, %cond.true.3214, %cond.true.3206, %cond.end.3196, %cond.end.3167
  %1185 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3226 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1185, i32 0, i32 3
  %1186 = load i64, i64* %bytes3226, align 8
  %1187 = load i64, i64* %nbytes, align 8
  %add3227 = add nsw i64 %1186, %1187
  %mul3228 = mul nsw i64 0, %add3227
  %sub3229 = sub nsw i64 %mul3228, 1
  %cmp3230 = icmp slt i64 %sub3229, 0
  br i1 %cmp3230, label %land.lhs.true.3232, label %lor.lhs.false.3237

land.lhs.true.3232:                               ; preds = %lor.lhs.false.3225
  %1188 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3233 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1188, i32 0, i32 3
  %1189 = load i64, i64* %bytes3233, align 8
  %1190 = load i64, i64* %nbytes, align 8
  %add3234 = add nsw i64 %1189, %1190
  %cmp3235 = icmp slt i64 %add3234, -32768
  br i1 %cmp3235, label %cond.true.3242, label %lor.lhs.false.3237

lor.lhs.false.3237:                               ; preds = %land.lhs.true.3232, %lor.lhs.false.3225
  %1191 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3238 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1191, i32 0, i32 3
  %1192 = load i64, i64* %bytes3238, align 8
  %1193 = load i64, i64* %nbytes, align 8
  %add3239 = add nsw i64 %1192, %1193
  %cmp3240 = icmp slt i64 32767, %add3239
  br i1 %cmp3240, label %cond.true.3242, label %cond.false.3274

cond.true.3242:                                   ; preds = %lor.lhs.false.3237, %land.lhs.true.3232, %cond.false.3220, %cond.true.3214, %cond.true.3206, %cond.end.3196, %cond.end.3167
  %1194 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3243 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1194, i32 0, i32 3
  %1195 = load i64, i64* %bytes3243, align 8
  %conv3244 = trunc i64 %1195 to i16
  %conv3245 = zext i16 %conv3244 to i32
  %1196 = load i64, i64* %nbytes, align 8
  %conv3246 = trunc i64 %1196 to i16
  %conv3247 = zext i16 %conv3246 to i32
  %add3248 = add nsw i32 %conv3245, %conv3247
  %cmp3249 = icmp sle i32 %add3248, 32767
  br i1 %cmp3249, label %cond.true.3251, label %cond.false.3260

cond.true.3251:                                   ; preds = %cond.true.3242
  %1197 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3252 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1197, i32 0, i32 3
  %1198 = load i64, i64* %bytes3252, align 8
  %conv3253 = trunc i64 %1198 to i16
  %conv3254 = zext i16 %conv3253 to i32
  %1199 = load i64, i64* %nbytes, align 8
  %conv3255 = trunc i64 %1199 to i16
  %conv3256 = zext i16 %conv3255 to i32
  %add3257 = add nsw i32 %conv3254, %conv3256
  %conv3258 = trunc i32 %add3257 to i16
  %conv3259 = sext i16 %conv3258 to i32
  br label %cond.end.3271

cond.false.3260:                                  ; preds = %cond.true.3242
  %1200 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3261 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1200, i32 0, i32 3
  %1201 = load i64, i64* %bytes3261, align 8
  %conv3262 = trunc i64 %1201 to i16
  %conv3263 = zext i16 %conv3262 to i32
  %1202 = load i64, i64* %nbytes, align 8
  %conv3264 = trunc i64 %1202 to i16
  %conv3265 = zext i16 %conv3264 to i32
  %add3266 = add nsw i32 %conv3263, %conv3265
  %sub3267 = sub nsw i32 %add3266, -32768
  %conv3268 = trunc i32 %sub3267 to i16
  %conv3269 = sext i16 %conv3268 to i32
  %add3270 = add nsw i32 %conv3269, -32768
  br label %cond.end.3271

cond.end.3271:                                    ; preds = %cond.false.3260, %cond.true.3251
  %cond3272 = phi i32 [ %conv3259, %cond.true.3251 ], [ %add3270, %cond.false.3260 ]
  %conv3273 = sext i32 %cond3272 to i64
  store i64 %conv3273, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.3274:                                  ; preds = %lor.lhs.false.3237
  %1203 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3275 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1203, i32 0, i32 3
  %1204 = load i64, i64* %bytes3275, align 8
  %conv3276 = trunc i64 %1204 to i16
  %conv3277 = zext i16 %conv3276 to i32
  %1205 = load i64, i64* %nbytes, align 8
  %conv3278 = trunc i64 %1205 to i16
  %conv3279 = zext i16 %conv3278 to i32
  %add3280 = add nsw i32 %conv3277, %conv3279
  %cmp3281 = icmp sle i32 %add3280, 32767
  br i1 %cmp3281, label %cond.true.3283, label %cond.false.3292

cond.true.3283:                                   ; preds = %cond.false.3274
  %1206 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3284 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1206, i32 0, i32 3
  %1207 = load i64, i64* %bytes3284, align 8
  %conv3285 = trunc i64 %1207 to i16
  %conv3286 = zext i16 %conv3285 to i32
  %1208 = load i64, i64* %nbytes, align 8
  %conv3287 = trunc i64 %1208 to i16
  %conv3288 = zext i16 %conv3287 to i32
  %add3289 = add nsw i32 %conv3286, %conv3288
  %conv3290 = trunc i32 %add3289 to i16
  %conv3291 = sext i16 %conv3290 to i32
  br label %cond.end.3303

cond.false.3292:                                  ; preds = %cond.false.3274
  %1209 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3293 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1209, i32 0, i32 3
  %1210 = load i64, i64* %bytes3293, align 8
  %conv3294 = trunc i64 %1210 to i16
  %conv3295 = zext i16 %conv3294 to i32
  %1211 = load i64, i64* %nbytes, align 8
  %conv3296 = trunc i64 %1211 to i16
  %conv3297 = zext i16 %conv3296 to i32
  %add3298 = add nsw i32 %conv3295, %conv3297
  %sub3299 = sub nsw i32 %add3298, -32768
  %conv3300 = trunc i32 %sub3299 to i16
  %conv3301 = sext i16 %conv3300 to i32
  %add3302 = add nsw i32 %conv3301, -32768
  br label %cond.end.3303

cond.end.3303:                                    ; preds = %cond.false.3292, %cond.true.3283
  %cond3304 = phi i32 [ %conv3291, %cond.true.3283 ], [ %add3302, %cond.false.3292 ]
  %conv3305 = sext i32 %cond3304 to i64
  store i64 %conv3305, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.3306:                                  ; preds = %cond.false.2784
  br i1 false, label %cond.true.3307, label %cond.false.3744

cond.true.3307:                                   ; preds = %cond.false.3306
  br i1 false, label %cond.true.3308, label %cond.false.3547

cond.true.3308:                                   ; preds = %cond.true.3307
  %1212 = load i64, i64* %nbytes, align 8
  %conv3309 = trunc i64 %1212 to i32
  %mul3310 = mul nsw i32 0, %conv3309
  %1213 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3311 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1213, i32 0, i32 3
  %1214 = load i64, i64* %bytes3311, align 8
  %conv3312 = trunc i64 %1214 to i32
  %add3313 = add nsw i32 %mul3310, %conv3312
  %mul3314 = mul nsw i32 0, %add3313
  %sub3315 = sub nsw i32 %mul3314, 1
  %cmp3316 = icmp slt i32 %sub3315, 0
  br i1 %cmp3316, label %cond.true.3318, label %cond.false.3342

cond.true.3318:                                   ; preds = %cond.true.3308
  %1215 = load i64, i64* %nbytes, align 8
  %conv3319 = trunc i64 %1215 to i32
  %mul3320 = mul nsw i32 0, %conv3319
  %1216 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3321 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1216, i32 0, i32 3
  %1217 = load i64, i64* %bytes3321, align 8
  %conv3322 = trunc i64 %1217 to i32
  %add3323 = add nsw i32 %mul3320, %conv3322
  %mul3324 = mul nsw i32 0, %add3323
  %add3325 = add nsw i32 %mul3324, 0
  %neg3326 = xor i32 %add3325, -1
  %cmp3327 = icmp eq i32 %neg3326, -1
  %conv3328 = zext i1 %cmp3327 to i32
  %sub3329 = sub nsw i32 0, %conv3328
  %1218 = load i64, i64* %nbytes, align 8
  %conv3330 = trunc i64 %1218 to i32
  %mul3331 = mul nsw i32 0, %conv3330
  %1219 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3332 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1219, i32 0, i32 3
  %1220 = load i64, i64* %bytes3332, align 8
  %conv3333 = trunc i64 %1220 to i32
  %add3334 = add nsw i32 %mul3331, %conv3333
  %mul3335 = mul nsw i32 0, %add3334
  %add3336 = add nsw i32 %mul3335, 1
  %shl3337 = shl i32 %add3336, 30
  %sub3338 = sub nsw i32 %shl3337, 1
  %mul3339 = mul nsw i32 %sub3338, 2
  %add3340 = add nsw i32 %mul3339, 1
  %sub3341 = sub nsw i32 %sub3329, %add3340
  br label %cond.end.3350

cond.false.3342:                                  ; preds = %cond.true.3308
  %1221 = load i64, i64* %nbytes, align 8
  %conv3343 = trunc i64 %1221 to i32
  %mul3344 = mul nsw i32 0, %conv3343
  %1222 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3345 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1222, i32 0, i32 3
  %1223 = load i64, i64* %bytes3345, align 8
  %conv3346 = trunc i64 %1223 to i32
  %add3347 = add nsw i32 %mul3344, %conv3346
  %mul3348 = mul nsw i32 0, %add3347
  %add3349 = add nsw i32 %mul3348, 0
  br label %cond.end.3350

cond.end.3350:                                    ; preds = %cond.false.3342, %cond.true.3318
  %cond3351 = phi i32 [ %sub3341, %cond.true.3318 ], [ %add3349, %cond.false.3342 ]
  %cmp3352 = icmp slt i32 %cond3351, 0
  br i1 %cmp3352, label %cond.true.3354, label %cond.false.3446

cond.true.3354:                                   ; preds = %cond.end.3350
  %1224 = load i64, i64* %nbytes, align 8
  %conv3355 = trunc i64 %1224 to i32
  %cmp3356 = icmp slt i32 %conv3355, 0
  br i1 %cmp3356, label %cond.true.3358, label %cond.false.3408

cond.true.3358:                                   ; preds = %cond.true.3354
  %1225 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3359 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1225, i32 0, i32 3
  %1226 = load i64, i64* %bytes3359, align 8
  %conv3360 = trunc i64 %1226 to i32
  %1227 = load i64, i64* %nbytes, align 8
  %conv3361 = trunc i64 %1227 to i32
  %mul3362 = mul nsw i32 0, %conv3361
  %1228 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3363 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1228, i32 0, i32 3
  %1229 = load i64, i64* %bytes3363, align 8
  %conv3364 = trunc i64 %1229 to i32
  %add3365 = add nsw i32 %mul3362, %conv3364
  %mul3366 = mul nsw i32 0, %add3365
  %sub3367 = sub nsw i32 %mul3366, 1
  %cmp3368 = icmp slt i32 %sub3367, 0
  br i1 %cmp3368, label %cond.true.3370, label %cond.false.3394

cond.true.3370:                                   ; preds = %cond.true.3358
  %1230 = load i64, i64* %nbytes, align 8
  %conv3371 = trunc i64 %1230 to i32
  %mul3372 = mul nsw i32 0, %conv3371
  %1231 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3373 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1231, i32 0, i32 3
  %1232 = load i64, i64* %bytes3373, align 8
  %conv3374 = trunc i64 %1232 to i32
  %add3375 = add nsw i32 %mul3372, %conv3374
  %mul3376 = mul nsw i32 0, %add3375
  %add3377 = add nsw i32 %mul3376, 0
  %neg3378 = xor i32 %add3377, -1
  %cmp3379 = icmp eq i32 %neg3378, -1
  %conv3380 = zext i1 %cmp3379 to i32
  %sub3381 = sub nsw i32 0, %conv3380
  %1233 = load i64, i64* %nbytes, align 8
  %conv3382 = trunc i64 %1233 to i32
  %mul3383 = mul nsw i32 0, %conv3382
  %1234 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3384 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1234, i32 0, i32 3
  %1235 = load i64, i64* %bytes3384, align 8
  %conv3385 = trunc i64 %1235 to i32
  %add3386 = add nsw i32 %mul3383, %conv3385
  %mul3387 = mul nsw i32 0, %add3386
  %add3388 = add nsw i32 %mul3387, 1
  %shl3389 = shl i32 %add3388, 30
  %sub3390 = sub nsw i32 %shl3389, 1
  %mul3391 = mul nsw i32 %sub3390, 2
  %add3392 = add nsw i32 %mul3391, 1
  %sub3393 = sub nsw i32 %sub3381, %add3392
  br label %cond.end.3402

cond.false.3394:                                  ; preds = %cond.true.3358
  %1236 = load i64, i64* %nbytes, align 8
  %conv3395 = trunc i64 %1236 to i32
  %mul3396 = mul nsw i32 0, %conv3395
  %1237 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3397 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1237, i32 0, i32 3
  %1238 = load i64, i64* %bytes3397, align 8
  %conv3398 = trunc i64 %1238 to i32
  %add3399 = add nsw i32 %mul3396, %conv3398
  %mul3400 = mul nsw i32 0, %add3399
  %add3401 = add nsw i32 %mul3400, 0
  br label %cond.end.3402

cond.end.3402:                                    ; preds = %cond.false.3394, %cond.true.3370
  %cond3403 = phi i32 [ %sub3393, %cond.true.3370 ], [ %add3401, %cond.false.3394 ]
  %1239 = load i64, i64* %nbytes, align 8
  %conv3404 = trunc i64 %1239 to i32
  %sub3405 = sub nsw i32 %cond3403, %conv3404
  %cmp3406 = icmp slt i32 %conv3360, %sub3405
  br i1 %cmp3406, label %cond.true.3503, label %lor.lhs.false.3480

cond.false.3408:                                  ; preds = %cond.true.3354
  %1240 = load i64, i64* %nbytes, align 8
  %conv3409 = trunc i64 %1240 to i32
  %mul3410 = mul nsw i32 0, %conv3409
  %1241 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3411 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1241, i32 0, i32 3
  %1242 = load i64, i64* %bytes3411, align 8
  %conv3412 = trunc i64 %1242 to i32
  %add3413 = add nsw i32 %mul3410, %conv3412
  %mul3414 = mul nsw i32 0, %add3413
  %sub3415 = sub nsw i32 %mul3414, 1
  %cmp3416 = icmp slt i32 %sub3415, 0
  br i1 %cmp3416, label %cond.true.3418, label %cond.false.3430

cond.true.3418:                                   ; preds = %cond.false.3408
  %1243 = load i64, i64* %nbytes, align 8
  %conv3419 = trunc i64 %1243 to i32
  %mul3420 = mul nsw i32 0, %conv3419
  %1244 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3421 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1244, i32 0, i32 3
  %1245 = load i64, i64* %bytes3421, align 8
  %conv3422 = trunc i64 %1245 to i32
  %add3423 = add nsw i32 %mul3420, %conv3422
  %mul3424 = mul nsw i32 0, %add3423
  %add3425 = add nsw i32 %mul3424, 1
  %shl3426 = shl i32 %add3425, 30
  %sub3427 = sub nsw i32 %shl3426, 1
  %mul3428 = mul nsw i32 %sub3427, 2
  %add3429 = add nsw i32 %mul3428, 1
  br label %cond.end.3438

cond.false.3430:                                  ; preds = %cond.false.3408
  %1246 = load i64, i64* %nbytes, align 8
  %conv3431 = trunc i64 %1246 to i32
  %mul3432 = mul nsw i32 0, %conv3431
  %1247 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3433 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1247, i32 0, i32 3
  %1248 = load i64, i64* %bytes3433, align 8
  %conv3434 = trunc i64 %1248 to i32
  %add3435 = add nsw i32 %mul3432, %conv3434
  %mul3436 = mul nsw i32 0, %add3435
  %sub3437 = sub nsw i32 %mul3436, 1
  br label %cond.end.3438

cond.end.3438:                                    ; preds = %cond.false.3430, %cond.true.3418
  %cond3439 = phi i32 [ %add3429, %cond.true.3418 ], [ %sub3437, %cond.false.3430 ]
  %1249 = load i64, i64* %nbytes, align 8
  %conv3440 = trunc i64 %1249 to i32
  %sub3441 = sub nsw i32 %cond3439, %conv3440
  %1250 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3442 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1250, i32 0, i32 3
  %1251 = load i64, i64* %bytes3442, align 8
  %conv3443 = trunc i64 %1251 to i32
  %cmp3444 = icmp slt i32 %sub3441, %conv3443
  br i1 %cmp3444, label %cond.true.3503, label %lor.lhs.false.3480

cond.false.3446:                                  ; preds = %cond.end.3350
  %1252 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3447 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1252, i32 0, i32 3
  %1253 = load i64, i64* %bytes3447, align 8
  %conv3448 = trunc i64 %1253 to i32
  %cmp3449 = icmp slt i32 %conv3448, 0
  br i1 %cmp3449, label %cond.true.3451, label %cond.false.3459

cond.true.3451:                                   ; preds = %cond.false.3446
  %1254 = load i64, i64* %nbytes, align 8
  %conv3452 = trunc i64 %1254 to i32
  %1255 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3453 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1255, i32 0, i32 3
  %1256 = load i64, i64* %bytes3453, align 8
  %conv3454 = trunc i64 %1256 to i32
  %1257 = load i64, i64* %nbytes, align 8
  %conv3455 = trunc i64 %1257 to i32
  %add3456 = add nsw i32 %conv3454, %conv3455
  %cmp3457 = icmp sle i32 %conv3452, %add3456
  br i1 %cmp3457, label %cond.true.3503, label %lor.lhs.false.3480

cond.false.3459:                                  ; preds = %cond.false.3446
  %1258 = load i64, i64* %nbytes, align 8
  %conv3460 = trunc i64 %1258 to i32
  %cmp3461 = icmp slt i32 %conv3460, 0
  br i1 %cmp3461, label %cond.true.3463, label %cond.false.3472

cond.true.3463:                                   ; preds = %cond.false.3459
  %1259 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3464 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1259, i32 0, i32 3
  %1260 = load i64, i64* %bytes3464, align 8
  %conv3465 = trunc i64 %1260 to i32
  %1261 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3466 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1261, i32 0, i32 3
  %1262 = load i64, i64* %bytes3466, align 8
  %conv3467 = trunc i64 %1262 to i32
  %1263 = load i64, i64* %nbytes, align 8
  %conv3468 = trunc i64 %1263 to i32
  %add3469 = add nsw i32 %conv3467, %conv3468
  %cmp3470 = icmp sle i32 %conv3465, %add3469
  br i1 %cmp3470, label %cond.true.3503, label %lor.lhs.false.3480

cond.false.3472:                                  ; preds = %cond.false.3459
  %1264 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3473 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1264, i32 0, i32 3
  %1265 = load i64, i64* %bytes3473, align 8
  %conv3474 = trunc i64 %1265 to i32
  %1266 = load i64, i64* %nbytes, align 8
  %conv3475 = trunc i64 %1266 to i32
  %add3476 = add nsw i32 %conv3474, %conv3475
  %1267 = load i64, i64* %nbytes, align 8
  %conv3477 = trunc i64 %1267 to i32
  %cmp3478 = icmp slt i32 %add3476, %conv3477
  br i1 %cmp3478, label %cond.true.3503, label %lor.lhs.false.3480

lor.lhs.false.3480:                               ; preds = %cond.false.3472, %cond.true.3463, %cond.true.3451, %cond.end.3438, %cond.end.3402
  %1268 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3481 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1268, i32 0, i32 3
  %1269 = load i64, i64* %bytes3481, align 8
  %conv3482 = trunc i64 %1269 to i32
  %1270 = load i64, i64* %nbytes, align 8
  %conv3483 = trunc i64 %1270 to i32
  %add3484 = add nsw i32 %conv3482, %conv3483
  %mul3485 = mul nsw i32 0, %add3484
  %sub3486 = sub nsw i32 %mul3485, 1
  %cmp3487 = icmp slt i32 %sub3486, 0
  br i1 %cmp3487, label %land.lhs.true.3489, label %lor.lhs.false.3496

land.lhs.true.3489:                               ; preds = %lor.lhs.false.3480
  %1271 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3490 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1271, i32 0, i32 3
  %1272 = load i64, i64* %bytes3490, align 8
  %conv3491 = trunc i64 %1272 to i32
  %1273 = load i64, i64* %nbytes, align 8
  %conv3492 = trunc i64 %1273 to i32
  %add3493 = add nsw i32 %conv3491, %conv3492
  %cmp3494 = icmp slt i32 %add3493, -2147483648
  br i1 %cmp3494, label %cond.true.3503, label %lor.lhs.false.3496

lor.lhs.false.3496:                               ; preds = %land.lhs.true.3489, %lor.lhs.false.3480
  %1274 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3497 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1274, i32 0, i32 3
  %1275 = load i64, i64* %bytes3497, align 8
  %conv3498 = trunc i64 %1275 to i32
  %1276 = load i64, i64* %nbytes, align 8
  %conv3499 = trunc i64 %1276 to i32
  %add3500 = add nsw i32 %conv3498, %conv3499
  %cmp3501 = icmp slt i32 2147483647, %add3500
  br i1 %cmp3501, label %cond.true.3503, label %cond.false.3525

cond.true.3503:                                   ; preds = %lor.lhs.false.3496, %land.lhs.true.3489, %cond.false.3472, %cond.true.3463, %cond.true.3451, %cond.end.3438, %cond.end.3402
  %1277 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3504 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1277, i32 0, i32 3
  %1278 = load i64, i64* %bytes3504, align 8
  %conv3505 = trunc i64 %1278 to i32
  %1279 = load i64, i64* %nbytes, align 8
  %conv3506 = trunc i64 %1279 to i32
  %add3507 = add i32 %conv3505, %conv3506
  %cmp3508 = icmp ule i32 %add3507, 2147483647
  br i1 %cmp3508, label %cond.true.3510, label %cond.false.3515

cond.true.3510:                                   ; preds = %cond.true.3503
  %1280 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3511 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1280, i32 0, i32 3
  %1281 = load i64, i64* %bytes3511, align 8
  %conv3512 = trunc i64 %1281 to i32
  %1282 = load i64, i64* %nbytes, align 8
  %conv3513 = trunc i64 %1282 to i32
  %add3514 = add i32 %conv3512, %conv3513
  br label %cond.end.3522

cond.false.3515:                                  ; preds = %cond.true.3503
  %1283 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3516 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1283, i32 0, i32 3
  %1284 = load i64, i64* %bytes3516, align 8
  %conv3517 = trunc i64 %1284 to i32
  %1285 = load i64, i64* %nbytes, align 8
  %conv3518 = trunc i64 %1285 to i32
  %add3519 = add i32 %conv3517, %conv3518
  %sub3520 = sub i32 %add3519, -2147483648
  %add3521 = add nsw i32 %sub3520, -2147483648
  br label %cond.end.3522

cond.end.3522:                                    ; preds = %cond.false.3515, %cond.true.3510
  %cond3523 = phi i32 [ %add3514, %cond.true.3510 ], [ %add3521, %cond.false.3515 ]
  %conv3524 = sext i32 %cond3523 to i64
  store i64 %conv3524, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.3525:                                  ; preds = %lor.lhs.false.3496
  %1286 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3526 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1286, i32 0, i32 3
  %1287 = load i64, i64* %bytes3526, align 8
  %conv3527 = trunc i64 %1287 to i32
  %1288 = load i64, i64* %nbytes, align 8
  %conv3528 = trunc i64 %1288 to i32
  %add3529 = add i32 %conv3527, %conv3528
  %cmp3530 = icmp ule i32 %add3529, 2147483647
  br i1 %cmp3530, label %cond.true.3532, label %cond.false.3537

cond.true.3532:                                   ; preds = %cond.false.3525
  %1289 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3533 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1289, i32 0, i32 3
  %1290 = load i64, i64* %bytes3533, align 8
  %conv3534 = trunc i64 %1290 to i32
  %1291 = load i64, i64* %nbytes, align 8
  %conv3535 = trunc i64 %1291 to i32
  %add3536 = add i32 %conv3534, %conv3535
  br label %cond.end.3544

cond.false.3537:                                  ; preds = %cond.false.3525
  %1292 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3538 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1292, i32 0, i32 3
  %1293 = load i64, i64* %bytes3538, align 8
  %conv3539 = trunc i64 %1293 to i32
  %1294 = load i64, i64* %nbytes, align 8
  %conv3540 = trunc i64 %1294 to i32
  %add3541 = add i32 %conv3539, %conv3540
  %sub3542 = sub i32 %add3541, -2147483648
  %add3543 = add nsw i32 %sub3542, -2147483648
  br label %cond.end.3544

cond.end.3544:                                    ; preds = %cond.false.3537, %cond.true.3532
  %cond3545 = phi i32 [ %add3536, %cond.true.3532 ], [ %add3543, %cond.false.3537 ]
  %conv3546 = sext i32 %cond3545 to i64
  store i64 %conv3546, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.3547:                                  ; preds = %cond.true.3307
  %1295 = load i64, i64* %nbytes, align 8
  %mul3548 = mul nsw i64 0, %1295
  %1296 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3549 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1296, i32 0, i32 3
  %1297 = load i64, i64* %bytes3549, align 8
  %add3550 = add nsw i64 %mul3548, %1297
  %mul3551 = mul nsw i64 0, %add3550
  %sub3552 = sub nsw i64 %mul3551, 1
  %cmp3553 = icmp slt i64 %sub3552, 0
  br i1 %cmp3553, label %cond.true.3555, label %cond.false.3576

cond.true.3555:                                   ; preds = %cond.false.3547
  %1298 = load i64, i64* %nbytes, align 8
  %mul3556 = mul nsw i64 0, %1298
  %1299 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3557 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1299, i32 0, i32 3
  %1300 = load i64, i64* %bytes3557, align 8
  %add3558 = add nsw i64 %mul3556, %1300
  %mul3559 = mul nsw i64 0, %add3558
  %add3560 = add nsw i64 %mul3559, 0
  %neg3561 = xor i64 %add3560, -1
  %cmp3562 = icmp eq i64 %neg3561, -1
  %conv3563 = zext i1 %cmp3562 to i32
  %sub3564 = sub nsw i32 0, %conv3563
  %conv3565 = sext i32 %sub3564 to i64
  %1301 = load i64, i64* %nbytes, align 8
  %mul3566 = mul nsw i64 0, %1301
  %1302 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3567 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1302, i32 0, i32 3
  %1303 = load i64, i64* %bytes3567, align 8
  %add3568 = add nsw i64 %mul3566, %1303
  %mul3569 = mul nsw i64 0, %add3568
  %add3570 = add nsw i64 %mul3569, 1
  %shl3571 = shl i64 %add3570, 62
  %sub3572 = sub nsw i64 %shl3571, 1
  %mul3573 = mul nsw i64 %sub3572, 2
  %add3574 = add nsw i64 %mul3573, 1
  %sub3575 = sub nsw i64 %conv3565, %add3574
  br label %cond.end.3582

cond.false.3576:                                  ; preds = %cond.false.3547
  %1304 = load i64, i64* %nbytes, align 8
  %mul3577 = mul nsw i64 0, %1304
  %1305 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3578 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1305, i32 0, i32 3
  %1306 = load i64, i64* %bytes3578, align 8
  %add3579 = add nsw i64 %mul3577, %1306
  %mul3580 = mul nsw i64 0, %add3579
  %add3581 = add nsw i64 %mul3580, 0
  br label %cond.end.3582

cond.end.3582:                                    ; preds = %cond.false.3576, %cond.true.3555
  %cond3583 = phi i64 [ %sub3575, %cond.true.3555 ], [ %add3581, %cond.false.3576 ]
  %cmp3584 = icmp slt i64 %cond3583, 0
  br i1 %cmp3584, label %cond.true.3586, label %cond.false.3660

cond.true.3586:                                   ; preds = %cond.end.3582
  %1307 = load i64, i64* %nbytes, align 8
  %cmp3587 = icmp slt i64 %1307, 0
  br i1 %cmp3587, label %cond.true.3589, label %cond.false.3630

cond.true.3589:                                   ; preds = %cond.true.3586
  %1308 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3590 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1308, i32 0, i32 3
  %1309 = load i64, i64* %bytes3590, align 8
  %1310 = load i64, i64* %nbytes, align 8
  %mul3591 = mul nsw i64 0, %1310
  %1311 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3592 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1311, i32 0, i32 3
  %1312 = load i64, i64* %bytes3592, align 8
  %add3593 = add nsw i64 %mul3591, %1312
  %mul3594 = mul nsw i64 0, %add3593
  %sub3595 = sub nsw i64 %mul3594, 1
  %cmp3596 = icmp slt i64 %sub3595, 0
  br i1 %cmp3596, label %cond.true.3598, label %cond.false.3619

cond.true.3598:                                   ; preds = %cond.true.3589
  %1313 = load i64, i64* %nbytes, align 8
  %mul3599 = mul nsw i64 0, %1313
  %1314 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3600 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1314, i32 0, i32 3
  %1315 = load i64, i64* %bytes3600, align 8
  %add3601 = add nsw i64 %mul3599, %1315
  %mul3602 = mul nsw i64 0, %add3601
  %add3603 = add nsw i64 %mul3602, 0
  %neg3604 = xor i64 %add3603, -1
  %cmp3605 = icmp eq i64 %neg3604, -1
  %conv3606 = zext i1 %cmp3605 to i32
  %sub3607 = sub nsw i32 0, %conv3606
  %conv3608 = sext i32 %sub3607 to i64
  %1316 = load i64, i64* %nbytes, align 8
  %mul3609 = mul nsw i64 0, %1316
  %1317 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3610 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1317, i32 0, i32 3
  %1318 = load i64, i64* %bytes3610, align 8
  %add3611 = add nsw i64 %mul3609, %1318
  %mul3612 = mul nsw i64 0, %add3611
  %add3613 = add nsw i64 %mul3612, 1
  %shl3614 = shl i64 %add3613, 62
  %sub3615 = sub nsw i64 %shl3614, 1
  %mul3616 = mul nsw i64 %sub3615, 2
  %add3617 = add nsw i64 %mul3616, 1
  %sub3618 = sub nsw i64 %conv3608, %add3617
  br label %cond.end.3625

cond.false.3619:                                  ; preds = %cond.true.3589
  %1319 = load i64, i64* %nbytes, align 8
  %mul3620 = mul nsw i64 0, %1319
  %1320 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3621 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1320, i32 0, i32 3
  %1321 = load i64, i64* %bytes3621, align 8
  %add3622 = add nsw i64 %mul3620, %1321
  %mul3623 = mul nsw i64 0, %add3622
  %add3624 = add nsw i64 %mul3623, 0
  br label %cond.end.3625

cond.end.3625:                                    ; preds = %cond.false.3619, %cond.true.3598
  %cond3626 = phi i64 [ %sub3618, %cond.true.3598 ], [ %add3624, %cond.false.3619 ]
  %1322 = load i64, i64* %nbytes, align 8
  %sub3627 = sub nsw i64 %cond3626, %1322
  %cmp3628 = icmp slt i64 %1309, %sub3627
  br i1 %cmp3628, label %cond.true.3700, label %lor.lhs.false.3683

cond.false.3630:                                  ; preds = %cond.true.3586
  %1323 = load i64, i64* %nbytes, align 8
  %mul3631 = mul nsw i64 0, %1323
  %1324 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3632 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1324, i32 0, i32 3
  %1325 = load i64, i64* %bytes3632, align 8
  %add3633 = add nsw i64 %mul3631, %1325
  %mul3634 = mul nsw i64 0, %add3633
  %sub3635 = sub nsw i64 %mul3634, 1
  %cmp3636 = icmp slt i64 %sub3635, 0
  br i1 %cmp3636, label %cond.true.3638, label %cond.false.3648

cond.true.3638:                                   ; preds = %cond.false.3630
  %1326 = load i64, i64* %nbytes, align 8
  %mul3639 = mul nsw i64 0, %1326
  %1327 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3640 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1327, i32 0, i32 3
  %1328 = load i64, i64* %bytes3640, align 8
  %add3641 = add nsw i64 %mul3639, %1328
  %mul3642 = mul nsw i64 0, %add3641
  %add3643 = add nsw i64 %mul3642, 1
  %shl3644 = shl i64 %add3643, 62
  %sub3645 = sub nsw i64 %shl3644, 1
  %mul3646 = mul nsw i64 %sub3645, 2
  %add3647 = add nsw i64 %mul3646, 1
  br label %cond.end.3654

cond.false.3648:                                  ; preds = %cond.false.3630
  %1329 = load i64, i64* %nbytes, align 8
  %mul3649 = mul nsw i64 0, %1329
  %1330 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3650 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1330, i32 0, i32 3
  %1331 = load i64, i64* %bytes3650, align 8
  %add3651 = add nsw i64 %mul3649, %1331
  %mul3652 = mul nsw i64 0, %add3651
  %sub3653 = sub nsw i64 %mul3652, 1
  br label %cond.end.3654

cond.end.3654:                                    ; preds = %cond.false.3648, %cond.true.3638
  %cond3655 = phi i64 [ %add3647, %cond.true.3638 ], [ %sub3653, %cond.false.3648 ]
  %1332 = load i64, i64* %nbytes, align 8
  %sub3656 = sub nsw i64 %cond3655, %1332
  %1333 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3657 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1333, i32 0, i32 3
  %1334 = load i64, i64* %bytes3657, align 8
  %cmp3658 = icmp slt i64 %sub3656, %1334
  br i1 %cmp3658, label %cond.true.3700, label %lor.lhs.false.3683

cond.false.3660:                                  ; preds = %cond.end.3582
  %1335 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3661 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1335, i32 0, i32 3
  %1336 = load i64, i64* %bytes3661, align 8
  %cmp3662 = icmp slt i64 %1336, 0
  br i1 %cmp3662, label %cond.true.3664, label %cond.false.3669

cond.true.3664:                                   ; preds = %cond.false.3660
  %1337 = load i64, i64* %nbytes, align 8
  %1338 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3665 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1338, i32 0, i32 3
  %1339 = load i64, i64* %bytes3665, align 8
  %1340 = load i64, i64* %nbytes, align 8
  %add3666 = add nsw i64 %1339, %1340
  %cmp3667 = icmp sle i64 %1337, %add3666
  br i1 %cmp3667, label %cond.true.3700, label %lor.lhs.false.3683

cond.false.3669:                                  ; preds = %cond.false.3660
  %1341 = load i64, i64* %nbytes, align 8
  %cmp3670 = icmp slt i64 %1341, 0
  br i1 %cmp3670, label %cond.true.3672, label %cond.false.3678

cond.true.3672:                                   ; preds = %cond.false.3669
  %1342 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3673 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1342, i32 0, i32 3
  %1343 = load i64, i64* %bytes3673, align 8
  %1344 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3674 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1344, i32 0, i32 3
  %1345 = load i64, i64* %bytes3674, align 8
  %1346 = load i64, i64* %nbytes, align 8
  %add3675 = add nsw i64 %1345, %1346
  %cmp3676 = icmp sle i64 %1343, %add3675
  br i1 %cmp3676, label %cond.true.3700, label %lor.lhs.false.3683

cond.false.3678:                                  ; preds = %cond.false.3669
  %1347 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3679 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1347, i32 0, i32 3
  %1348 = load i64, i64* %bytes3679, align 8
  %1349 = load i64, i64* %nbytes, align 8
  %add3680 = add nsw i64 %1348, %1349
  %1350 = load i64, i64* %nbytes, align 8
  %cmp3681 = icmp slt i64 %add3680, %1350
  br i1 %cmp3681, label %cond.true.3700, label %lor.lhs.false.3683

lor.lhs.false.3683:                               ; preds = %cond.false.3678, %cond.true.3672, %cond.true.3664, %cond.end.3654, %cond.end.3625
  %1351 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3684 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1351, i32 0, i32 3
  %1352 = load i64, i64* %bytes3684, align 8
  %1353 = load i64, i64* %nbytes, align 8
  %add3685 = add nsw i64 %1352, %1353
  %mul3686 = mul nsw i64 0, %add3685
  %sub3687 = sub nsw i64 %mul3686, 1
  %cmp3688 = icmp slt i64 %sub3687, 0
  br i1 %cmp3688, label %land.lhs.true.3690, label %lor.lhs.false.3695

land.lhs.true.3690:                               ; preds = %lor.lhs.false.3683
  %1354 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3691 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1354, i32 0, i32 3
  %1355 = load i64, i64* %bytes3691, align 8
  %1356 = load i64, i64* %nbytes, align 8
  %add3692 = add nsw i64 %1355, %1356
  %cmp3693 = icmp slt i64 %add3692, -2147483648
  br i1 %cmp3693, label %cond.true.3700, label %lor.lhs.false.3695

lor.lhs.false.3695:                               ; preds = %land.lhs.true.3690, %lor.lhs.false.3683
  %1357 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3696 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1357, i32 0, i32 3
  %1358 = load i64, i64* %bytes3696, align 8
  %1359 = load i64, i64* %nbytes, align 8
  %add3697 = add nsw i64 %1358, %1359
  %cmp3698 = icmp slt i64 2147483647, %add3697
  br i1 %cmp3698, label %cond.true.3700, label %cond.false.3722

cond.true.3700:                                   ; preds = %lor.lhs.false.3695, %land.lhs.true.3690, %cond.false.3678, %cond.true.3672, %cond.true.3664, %cond.end.3654, %cond.end.3625
  %1360 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3701 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1360, i32 0, i32 3
  %1361 = load i64, i64* %bytes3701, align 8
  %conv3702 = trunc i64 %1361 to i32
  %1362 = load i64, i64* %nbytes, align 8
  %conv3703 = trunc i64 %1362 to i32
  %add3704 = add i32 %conv3702, %conv3703
  %cmp3705 = icmp ule i32 %add3704, 2147483647
  br i1 %cmp3705, label %cond.true.3707, label %cond.false.3712

cond.true.3707:                                   ; preds = %cond.true.3700
  %1363 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3708 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1363, i32 0, i32 3
  %1364 = load i64, i64* %bytes3708, align 8
  %conv3709 = trunc i64 %1364 to i32
  %1365 = load i64, i64* %nbytes, align 8
  %conv3710 = trunc i64 %1365 to i32
  %add3711 = add i32 %conv3709, %conv3710
  br label %cond.end.3719

cond.false.3712:                                  ; preds = %cond.true.3700
  %1366 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3713 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1366, i32 0, i32 3
  %1367 = load i64, i64* %bytes3713, align 8
  %conv3714 = trunc i64 %1367 to i32
  %1368 = load i64, i64* %nbytes, align 8
  %conv3715 = trunc i64 %1368 to i32
  %add3716 = add i32 %conv3714, %conv3715
  %sub3717 = sub i32 %add3716, -2147483648
  %add3718 = add nsw i32 %sub3717, -2147483648
  br label %cond.end.3719

cond.end.3719:                                    ; preds = %cond.false.3712, %cond.true.3707
  %cond3720 = phi i32 [ %add3711, %cond.true.3707 ], [ %add3718, %cond.false.3712 ]
  %conv3721 = sext i32 %cond3720 to i64
  store i64 %conv3721, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.3722:                                  ; preds = %lor.lhs.false.3695
  %1369 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3723 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1369, i32 0, i32 3
  %1370 = load i64, i64* %bytes3723, align 8
  %conv3724 = trunc i64 %1370 to i32
  %1371 = load i64, i64* %nbytes, align 8
  %conv3725 = trunc i64 %1371 to i32
  %add3726 = add i32 %conv3724, %conv3725
  %cmp3727 = icmp ule i32 %add3726, 2147483647
  br i1 %cmp3727, label %cond.true.3729, label %cond.false.3734

cond.true.3729:                                   ; preds = %cond.false.3722
  %1372 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3730 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1372, i32 0, i32 3
  %1373 = load i64, i64* %bytes3730, align 8
  %conv3731 = trunc i64 %1373 to i32
  %1374 = load i64, i64* %nbytes, align 8
  %conv3732 = trunc i64 %1374 to i32
  %add3733 = add i32 %conv3731, %conv3732
  br label %cond.end.3741

cond.false.3734:                                  ; preds = %cond.false.3722
  %1375 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3735 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1375, i32 0, i32 3
  %1376 = load i64, i64* %bytes3735, align 8
  %conv3736 = trunc i64 %1376 to i32
  %1377 = load i64, i64* %nbytes, align 8
  %conv3737 = trunc i64 %1377 to i32
  %add3738 = add i32 %conv3736, %conv3737
  %sub3739 = sub i32 %add3738, -2147483648
  %add3740 = add nsw i32 %sub3739, -2147483648
  br label %cond.end.3741

cond.end.3741:                                    ; preds = %cond.false.3734, %cond.true.3729
  %cond3742 = phi i32 [ %add3733, %cond.true.3729 ], [ %add3740, %cond.false.3734 ]
  %conv3743 = sext i32 %cond3742 to i64
  store i64 %conv3743, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.3744:                                  ; preds = %cond.false.3306
  br i1 true, label %cond.true.3745, label %cond.false.4112

cond.true.3745:                                   ; preds = %cond.false.3744
  br i1 false, label %cond.true.3746, label %cond.false.3929

cond.true.3746:                                   ; preds = %cond.true.3745
  %1378 = load i64, i64* %nbytes, align 8
  %mul3747 = mul nsw i64 0, %1378
  %1379 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3748 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1379, i32 0, i32 3
  %1380 = load i64, i64* %bytes3748, align 8
  %add3749 = add nsw i64 %mul3747, %1380
  %mul3750 = mul nsw i64 0, %add3749
  %sub3751 = sub nsw i64 %mul3750, 1
  %cmp3752 = icmp slt i64 %sub3751, 0
  br i1 %cmp3752, label %cond.true.3754, label %cond.false.3775

cond.true.3754:                                   ; preds = %cond.true.3746
  %1381 = load i64, i64* %nbytes, align 8
  %mul3755 = mul nsw i64 0, %1381
  %1382 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3756 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1382, i32 0, i32 3
  %1383 = load i64, i64* %bytes3756, align 8
  %add3757 = add nsw i64 %mul3755, %1383
  %mul3758 = mul nsw i64 0, %add3757
  %add3759 = add nsw i64 %mul3758, 0
  %neg3760 = xor i64 %add3759, -1
  %cmp3761 = icmp eq i64 %neg3760, -1
  %conv3762 = zext i1 %cmp3761 to i32
  %sub3763 = sub nsw i32 0, %conv3762
  %conv3764 = sext i32 %sub3763 to i64
  %1384 = load i64, i64* %nbytes, align 8
  %mul3765 = mul nsw i64 0, %1384
  %1385 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3766 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1385, i32 0, i32 3
  %1386 = load i64, i64* %bytes3766, align 8
  %add3767 = add nsw i64 %mul3765, %1386
  %mul3768 = mul nsw i64 0, %add3767
  %add3769 = add nsw i64 %mul3768, 1
  %shl3770 = shl i64 %add3769, 62
  %sub3771 = sub nsw i64 %shl3770, 1
  %mul3772 = mul nsw i64 %sub3771, 2
  %add3773 = add nsw i64 %mul3772, 1
  %sub3774 = sub nsw i64 %conv3764, %add3773
  br label %cond.end.3781

cond.false.3775:                                  ; preds = %cond.true.3746
  %1387 = load i64, i64* %nbytes, align 8
  %mul3776 = mul nsw i64 0, %1387
  %1388 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3777 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1388, i32 0, i32 3
  %1389 = load i64, i64* %bytes3777, align 8
  %add3778 = add nsw i64 %mul3776, %1389
  %mul3779 = mul nsw i64 0, %add3778
  %add3780 = add nsw i64 %mul3779, 0
  br label %cond.end.3781

cond.end.3781:                                    ; preds = %cond.false.3775, %cond.true.3754
  %cond3782 = phi i64 [ %sub3774, %cond.true.3754 ], [ %add3780, %cond.false.3775 ]
  %cmp3783 = icmp slt i64 %cond3782, 0
  br i1 %cmp3783, label %cond.true.3785, label %cond.false.3859

cond.true.3785:                                   ; preds = %cond.end.3781
  %1390 = load i64, i64* %nbytes, align 8
  %cmp3786 = icmp slt i64 %1390, 0
  br i1 %cmp3786, label %cond.true.3788, label %cond.false.3829

cond.true.3788:                                   ; preds = %cond.true.3785
  %1391 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3789 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1391, i32 0, i32 3
  %1392 = load i64, i64* %bytes3789, align 8
  %1393 = load i64, i64* %nbytes, align 8
  %mul3790 = mul nsw i64 0, %1393
  %1394 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3791 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1394, i32 0, i32 3
  %1395 = load i64, i64* %bytes3791, align 8
  %add3792 = add nsw i64 %mul3790, %1395
  %mul3793 = mul nsw i64 0, %add3792
  %sub3794 = sub nsw i64 %mul3793, 1
  %cmp3795 = icmp slt i64 %sub3794, 0
  br i1 %cmp3795, label %cond.true.3797, label %cond.false.3818

cond.true.3797:                                   ; preds = %cond.true.3788
  %1396 = load i64, i64* %nbytes, align 8
  %mul3798 = mul nsw i64 0, %1396
  %1397 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3799 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1397, i32 0, i32 3
  %1398 = load i64, i64* %bytes3799, align 8
  %add3800 = add nsw i64 %mul3798, %1398
  %mul3801 = mul nsw i64 0, %add3800
  %add3802 = add nsw i64 %mul3801, 0
  %neg3803 = xor i64 %add3802, -1
  %cmp3804 = icmp eq i64 %neg3803, -1
  %conv3805 = zext i1 %cmp3804 to i32
  %sub3806 = sub nsw i32 0, %conv3805
  %conv3807 = sext i32 %sub3806 to i64
  %1399 = load i64, i64* %nbytes, align 8
  %mul3808 = mul nsw i64 0, %1399
  %1400 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3809 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1400, i32 0, i32 3
  %1401 = load i64, i64* %bytes3809, align 8
  %add3810 = add nsw i64 %mul3808, %1401
  %mul3811 = mul nsw i64 0, %add3810
  %add3812 = add nsw i64 %mul3811, 1
  %shl3813 = shl i64 %add3812, 62
  %sub3814 = sub nsw i64 %shl3813, 1
  %mul3815 = mul nsw i64 %sub3814, 2
  %add3816 = add nsw i64 %mul3815, 1
  %sub3817 = sub nsw i64 %conv3807, %add3816
  br label %cond.end.3824

cond.false.3818:                                  ; preds = %cond.true.3788
  %1402 = load i64, i64* %nbytes, align 8
  %mul3819 = mul nsw i64 0, %1402
  %1403 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3820 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1403, i32 0, i32 3
  %1404 = load i64, i64* %bytes3820, align 8
  %add3821 = add nsw i64 %mul3819, %1404
  %mul3822 = mul nsw i64 0, %add3821
  %add3823 = add nsw i64 %mul3822, 0
  br label %cond.end.3824

cond.end.3824:                                    ; preds = %cond.false.3818, %cond.true.3797
  %cond3825 = phi i64 [ %sub3817, %cond.true.3797 ], [ %add3823, %cond.false.3818 ]
  %1405 = load i64, i64* %nbytes, align 8
  %sub3826 = sub nsw i64 %cond3825, %1405
  %cmp3827 = icmp slt i64 %1392, %sub3826
  br i1 %cmp3827, label %cond.true.3899, label %lor.lhs.false.3882

cond.false.3829:                                  ; preds = %cond.true.3785
  %1406 = load i64, i64* %nbytes, align 8
  %mul3830 = mul nsw i64 0, %1406
  %1407 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3831 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1407, i32 0, i32 3
  %1408 = load i64, i64* %bytes3831, align 8
  %add3832 = add nsw i64 %mul3830, %1408
  %mul3833 = mul nsw i64 0, %add3832
  %sub3834 = sub nsw i64 %mul3833, 1
  %cmp3835 = icmp slt i64 %sub3834, 0
  br i1 %cmp3835, label %cond.true.3837, label %cond.false.3847

cond.true.3837:                                   ; preds = %cond.false.3829
  %1409 = load i64, i64* %nbytes, align 8
  %mul3838 = mul nsw i64 0, %1409
  %1410 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3839 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1410, i32 0, i32 3
  %1411 = load i64, i64* %bytes3839, align 8
  %add3840 = add nsw i64 %mul3838, %1411
  %mul3841 = mul nsw i64 0, %add3840
  %add3842 = add nsw i64 %mul3841, 1
  %shl3843 = shl i64 %add3842, 62
  %sub3844 = sub nsw i64 %shl3843, 1
  %mul3845 = mul nsw i64 %sub3844, 2
  %add3846 = add nsw i64 %mul3845, 1
  br label %cond.end.3853

cond.false.3847:                                  ; preds = %cond.false.3829
  %1412 = load i64, i64* %nbytes, align 8
  %mul3848 = mul nsw i64 0, %1412
  %1413 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3849 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1413, i32 0, i32 3
  %1414 = load i64, i64* %bytes3849, align 8
  %add3850 = add nsw i64 %mul3848, %1414
  %mul3851 = mul nsw i64 0, %add3850
  %sub3852 = sub nsw i64 %mul3851, 1
  br label %cond.end.3853

cond.end.3853:                                    ; preds = %cond.false.3847, %cond.true.3837
  %cond3854 = phi i64 [ %add3846, %cond.true.3837 ], [ %sub3852, %cond.false.3847 ]
  %1415 = load i64, i64* %nbytes, align 8
  %sub3855 = sub nsw i64 %cond3854, %1415
  %1416 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3856 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1416, i32 0, i32 3
  %1417 = load i64, i64* %bytes3856, align 8
  %cmp3857 = icmp slt i64 %sub3855, %1417
  br i1 %cmp3857, label %cond.true.3899, label %lor.lhs.false.3882

cond.false.3859:                                  ; preds = %cond.end.3781
  %1418 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3860 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1418, i32 0, i32 3
  %1419 = load i64, i64* %bytes3860, align 8
  %cmp3861 = icmp slt i64 %1419, 0
  br i1 %cmp3861, label %cond.true.3863, label %cond.false.3868

cond.true.3863:                                   ; preds = %cond.false.3859
  %1420 = load i64, i64* %nbytes, align 8
  %1421 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3864 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1421, i32 0, i32 3
  %1422 = load i64, i64* %bytes3864, align 8
  %1423 = load i64, i64* %nbytes, align 8
  %add3865 = add nsw i64 %1422, %1423
  %cmp3866 = icmp sle i64 %1420, %add3865
  br i1 %cmp3866, label %cond.true.3899, label %lor.lhs.false.3882

cond.false.3868:                                  ; preds = %cond.false.3859
  %1424 = load i64, i64* %nbytes, align 8
  %cmp3869 = icmp slt i64 %1424, 0
  br i1 %cmp3869, label %cond.true.3871, label %cond.false.3877

cond.true.3871:                                   ; preds = %cond.false.3868
  %1425 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3872 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1425, i32 0, i32 3
  %1426 = load i64, i64* %bytes3872, align 8
  %1427 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3873 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1427, i32 0, i32 3
  %1428 = load i64, i64* %bytes3873, align 8
  %1429 = load i64, i64* %nbytes, align 8
  %add3874 = add nsw i64 %1428, %1429
  %cmp3875 = icmp sle i64 %1426, %add3874
  br i1 %cmp3875, label %cond.true.3899, label %lor.lhs.false.3882

cond.false.3877:                                  ; preds = %cond.false.3868
  %1430 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3878 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1430, i32 0, i32 3
  %1431 = load i64, i64* %bytes3878, align 8
  %1432 = load i64, i64* %nbytes, align 8
  %add3879 = add nsw i64 %1431, %1432
  %1433 = load i64, i64* %nbytes, align 8
  %cmp3880 = icmp slt i64 %add3879, %1433
  br i1 %cmp3880, label %cond.true.3899, label %lor.lhs.false.3882

lor.lhs.false.3882:                               ; preds = %cond.false.3877, %cond.true.3871, %cond.true.3863, %cond.end.3853, %cond.end.3824
  %1434 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3883 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1434, i32 0, i32 3
  %1435 = load i64, i64* %bytes3883, align 8
  %1436 = load i64, i64* %nbytes, align 8
  %add3884 = add nsw i64 %1435, %1436
  %mul3885 = mul nsw i64 0, %add3884
  %sub3886 = sub nsw i64 %mul3885, 1
  %cmp3887 = icmp slt i64 %sub3886, 0
  br i1 %cmp3887, label %land.lhs.true.3889, label %lor.lhs.false.3894

land.lhs.true.3889:                               ; preds = %lor.lhs.false.3882
  %1437 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3890 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1437, i32 0, i32 3
  %1438 = load i64, i64* %bytes3890, align 8
  %1439 = load i64, i64* %nbytes, align 8
  %add3891 = add nsw i64 %1438, %1439
  %cmp3892 = icmp slt i64 %add3891, -9223372036854775808
  br i1 %cmp3892, label %cond.true.3899, label %lor.lhs.false.3894

lor.lhs.false.3894:                               ; preds = %land.lhs.true.3889, %lor.lhs.false.3882
  %1440 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3895 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1440, i32 0, i32 3
  %1441 = load i64, i64* %bytes3895, align 8
  %1442 = load i64, i64* %nbytes, align 8
  %add3896 = add nsw i64 %1441, %1442
  %cmp3897 = icmp slt i64 9223372036854775807, %add3896
  br i1 %cmp3897, label %cond.true.3899, label %cond.false.3914

cond.true.3899:                                   ; preds = %lor.lhs.false.3894, %land.lhs.true.3889, %cond.false.3877, %cond.true.3871, %cond.true.3863, %cond.end.3853, %cond.end.3824
  %1443 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3900 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1443, i32 0, i32 3
  %1444 = load i64, i64* %bytes3900, align 8
  %1445 = load i64, i64* %nbytes, align 8
  %add3901 = add i64 %1444, %1445
  %cmp3902 = icmp ule i64 %add3901, 9223372036854775807
  br i1 %cmp3902, label %cond.true.3904, label %cond.false.3907

cond.true.3904:                                   ; preds = %cond.true.3899
  %1446 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3905 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1446, i32 0, i32 3
  %1447 = load i64, i64* %bytes3905, align 8
  %1448 = load i64, i64* %nbytes, align 8
  %add3906 = add i64 %1447, %1448
  br label %cond.end.3912

cond.false.3907:                                  ; preds = %cond.true.3899
  %1449 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3908 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1449, i32 0, i32 3
  %1450 = load i64, i64* %bytes3908, align 8
  %1451 = load i64, i64* %nbytes, align 8
  %add3909 = add i64 %1450, %1451
  %sub3910 = sub i64 %add3909, -9223372036854775808
  %add3911 = add nsw i64 %sub3910, -9223372036854775808
  br label %cond.end.3912

cond.end.3912:                                    ; preds = %cond.false.3907, %cond.true.3904
  %cond3913 = phi i64 [ %add3906, %cond.true.3904 ], [ %add3911, %cond.false.3907 ]
  store i64 %cond3913, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.3914:                                  ; preds = %lor.lhs.false.3894
  %1452 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3915 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1452, i32 0, i32 3
  %1453 = load i64, i64* %bytes3915, align 8
  %1454 = load i64, i64* %nbytes, align 8
  %add3916 = add i64 %1453, %1454
  %cmp3917 = icmp ule i64 %add3916, 9223372036854775807
  br i1 %cmp3917, label %cond.true.3919, label %cond.false.3922

cond.true.3919:                                   ; preds = %cond.false.3914
  %1455 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3920 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1455, i32 0, i32 3
  %1456 = load i64, i64* %bytes3920, align 8
  %1457 = load i64, i64* %nbytes, align 8
  %add3921 = add i64 %1456, %1457
  br label %cond.end.3927

cond.false.3922:                                  ; preds = %cond.false.3914
  %1458 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3923 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1458, i32 0, i32 3
  %1459 = load i64, i64* %bytes3923, align 8
  %1460 = load i64, i64* %nbytes, align 8
  %add3924 = add i64 %1459, %1460
  %sub3925 = sub i64 %add3924, -9223372036854775808
  %add3926 = add nsw i64 %sub3925, -9223372036854775808
  br label %cond.end.3927

cond.end.3927:                                    ; preds = %cond.false.3922, %cond.true.3919
  %cond3928 = phi i64 [ %add3921, %cond.true.3919 ], [ %add3926, %cond.false.3922 ]
  store i64 %cond3928, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.3929:                                  ; preds = %cond.true.3745
  %1461 = load i64, i64* %nbytes, align 8
  %mul3930 = mul nsw i64 0, %1461
  %1462 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3931 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1462, i32 0, i32 3
  %1463 = load i64, i64* %bytes3931, align 8
  %add3932 = add nsw i64 %mul3930, %1463
  %mul3933 = mul nsw i64 0, %add3932
  %sub3934 = sub nsw i64 %mul3933, 1
  %cmp3935 = icmp slt i64 %sub3934, 0
  br i1 %cmp3935, label %cond.true.3937, label %cond.false.3958

cond.true.3937:                                   ; preds = %cond.false.3929
  %1464 = load i64, i64* %nbytes, align 8
  %mul3938 = mul nsw i64 0, %1464
  %1465 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3939 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1465, i32 0, i32 3
  %1466 = load i64, i64* %bytes3939, align 8
  %add3940 = add nsw i64 %mul3938, %1466
  %mul3941 = mul nsw i64 0, %add3940
  %add3942 = add nsw i64 %mul3941, 0
  %neg3943 = xor i64 %add3942, -1
  %cmp3944 = icmp eq i64 %neg3943, -1
  %conv3945 = zext i1 %cmp3944 to i32
  %sub3946 = sub nsw i32 0, %conv3945
  %conv3947 = sext i32 %sub3946 to i64
  %1467 = load i64, i64* %nbytes, align 8
  %mul3948 = mul nsw i64 0, %1467
  %1468 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3949 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1468, i32 0, i32 3
  %1469 = load i64, i64* %bytes3949, align 8
  %add3950 = add nsw i64 %mul3948, %1469
  %mul3951 = mul nsw i64 0, %add3950
  %add3952 = add nsw i64 %mul3951, 1
  %shl3953 = shl i64 %add3952, 62
  %sub3954 = sub nsw i64 %shl3953, 1
  %mul3955 = mul nsw i64 %sub3954, 2
  %add3956 = add nsw i64 %mul3955, 1
  %sub3957 = sub nsw i64 %conv3947, %add3956
  br label %cond.end.3964

cond.false.3958:                                  ; preds = %cond.false.3929
  %1470 = load i64, i64* %nbytes, align 8
  %mul3959 = mul nsw i64 0, %1470
  %1471 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3960 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1471, i32 0, i32 3
  %1472 = load i64, i64* %bytes3960, align 8
  %add3961 = add nsw i64 %mul3959, %1472
  %mul3962 = mul nsw i64 0, %add3961
  %add3963 = add nsw i64 %mul3962, 0
  br label %cond.end.3964

cond.end.3964:                                    ; preds = %cond.false.3958, %cond.true.3937
  %cond3965 = phi i64 [ %sub3957, %cond.true.3937 ], [ %add3963, %cond.false.3958 ]
  %cmp3966 = icmp slt i64 %cond3965, 0
  br i1 %cmp3966, label %cond.true.3968, label %cond.false.4042

cond.true.3968:                                   ; preds = %cond.end.3964
  %1473 = load i64, i64* %nbytes, align 8
  %cmp3969 = icmp slt i64 %1473, 0
  br i1 %cmp3969, label %cond.true.3971, label %cond.false.4012

cond.true.3971:                                   ; preds = %cond.true.3968
  %1474 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3972 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1474, i32 0, i32 3
  %1475 = load i64, i64* %bytes3972, align 8
  %1476 = load i64, i64* %nbytes, align 8
  %mul3973 = mul nsw i64 0, %1476
  %1477 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3974 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1477, i32 0, i32 3
  %1478 = load i64, i64* %bytes3974, align 8
  %add3975 = add nsw i64 %mul3973, %1478
  %mul3976 = mul nsw i64 0, %add3975
  %sub3977 = sub nsw i64 %mul3976, 1
  %cmp3978 = icmp slt i64 %sub3977, 0
  br i1 %cmp3978, label %cond.true.3980, label %cond.false.4001

cond.true.3980:                                   ; preds = %cond.true.3971
  %1479 = load i64, i64* %nbytes, align 8
  %mul3981 = mul nsw i64 0, %1479
  %1480 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3982 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1480, i32 0, i32 3
  %1481 = load i64, i64* %bytes3982, align 8
  %add3983 = add nsw i64 %mul3981, %1481
  %mul3984 = mul nsw i64 0, %add3983
  %add3985 = add nsw i64 %mul3984, 0
  %neg3986 = xor i64 %add3985, -1
  %cmp3987 = icmp eq i64 %neg3986, -1
  %conv3988 = zext i1 %cmp3987 to i32
  %sub3989 = sub nsw i32 0, %conv3988
  %conv3990 = sext i32 %sub3989 to i64
  %1482 = load i64, i64* %nbytes, align 8
  %mul3991 = mul nsw i64 0, %1482
  %1483 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes3992 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1483, i32 0, i32 3
  %1484 = load i64, i64* %bytes3992, align 8
  %add3993 = add nsw i64 %mul3991, %1484
  %mul3994 = mul nsw i64 0, %add3993
  %add3995 = add nsw i64 %mul3994, 1
  %shl3996 = shl i64 %add3995, 62
  %sub3997 = sub nsw i64 %shl3996, 1
  %mul3998 = mul nsw i64 %sub3997, 2
  %add3999 = add nsw i64 %mul3998, 1
  %sub4000 = sub nsw i64 %conv3990, %add3999
  br label %cond.end.4007

cond.false.4001:                                  ; preds = %cond.true.3971
  %1485 = load i64, i64* %nbytes, align 8
  %mul4002 = mul nsw i64 0, %1485
  %1486 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4003 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1486, i32 0, i32 3
  %1487 = load i64, i64* %bytes4003, align 8
  %add4004 = add nsw i64 %mul4002, %1487
  %mul4005 = mul nsw i64 0, %add4004
  %add4006 = add nsw i64 %mul4005, 0
  br label %cond.end.4007

cond.end.4007:                                    ; preds = %cond.false.4001, %cond.true.3980
  %cond4008 = phi i64 [ %sub4000, %cond.true.3980 ], [ %add4006, %cond.false.4001 ]
  %1488 = load i64, i64* %nbytes, align 8
  %sub4009 = sub nsw i64 %cond4008, %1488
  %cmp4010 = icmp slt i64 %1475, %sub4009
  br i1 %cmp4010, label %cond.true.4082, label %lor.lhs.false.4065

cond.false.4012:                                  ; preds = %cond.true.3968
  %1489 = load i64, i64* %nbytes, align 8
  %mul4013 = mul nsw i64 0, %1489
  %1490 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4014 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1490, i32 0, i32 3
  %1491 = load i64, i64* %bytes4014, align 8
  %add4015 = add nsw i64 %mul4013, %1491
  %mul4016 = mul nsw i64 0, %add4015
  %sub4017 = sub nsw i64 %mul4016, 1
  %cmp4018 = icmp slt i64 %sub4017, 0
  br i1 %cmp4018, label %cond.true.4020, label %cond.false.4030

cond.true.4020:                                   ; preds = %cond.false.4012
  %1492 = load i64, i64* %nbytes, align 8
  %mul4021 = mul nsw i64 0, %1492
  %1493 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4022 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1493, i32 0, i32 3
  %1494 = load i64, i64* %bytes4022, align 8
  %add4023 = add nsw i64 %mul4021, %1494
  %mul4024 = mul nsw i64 0, %add4023
  %add4025 = add nsw i64 %mul4024, 1
  %shl4026 = shl i64 %add4025, 62
  %sub4027 = sub nsw i64 %shl4026, 1
  %mul4028 = mul nsw i64 %sub4027, 2
  %add4029 = add nsw i64 %mul4028, 1
  br label %cond.end.4036

cond.false.4030:                                  ; preds = %cond.false.4012
  %1495 = load i64, i64* %nbytes, align 8
  %mul4031 = mul nsw i64 0, %1495
  %1496 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4032 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1496, i32 0, i32 3
  %1497 = load i64, i64* %bytes4032, align 8
  %add4033 = add nsw i64 %mul4031, %1497
  %mul4034 = mul nsw i64 0, %add4033
  %sub4035 = sub nsw i64 %mul4034, 1
  br label %cond.end.4036

cond.end.4036:                                    ; preds = %cond.false.4030, %cond.true.4020
  %cond4037 = phi i64 [ %add4029, %cond.true.4020 ], [ %sub4035, %cond.false.4030 ]
  %1498 = load i64, i64* %nbytes, align 8
  %sub4038 = sub nsw i64 %cond4037, %1498
  %1499 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4039 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1499, i32 0, i32 3
  %1500 = load i64, i64* %bytes4039, align 8
  %cmp4040 = icmp slt i64 %sub4038, %1500
  br i1 %cmp4040, label %cond.true.4082, label %lor.lhs.false.4065

cond.false.4042:                                  ; preds = %cond.end.3964
  %1501 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4043 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1501, i32 0, i32 3
  %1502 = load i64, i64* %bytes4043, align 8
  %cmp4044 = icmp slt i64 %1502, 0
  br i1 %cmp4044, label %cond.true.4046, label %cond.false.4051

cond.true.4046:                                   ; preds = %cond.false.4042
  %1503 = load i64, i64* %nbytes, align 8
  %1504 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4047 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1504, i32 0, i32 3
  %1505 = load i64, i64* %bytes4047, align 8
  %1506 = load i64, i64* %nbytes, align 8
  %add4048 = add nsw i64 %1505, %1506
  %cmp4049 = icmp sle i64 %1503, %add4048
  br i1 %cmp4049, label %cond.true.4082, label %lor.lhs.false.4065

cond.false.4051:                                  ; preds = %cond.false.4042
  %1507 = load i64, i64* %nbytes, align 8
  %cmp4052 = icmp slt i64 %1507, 0
  br i1 %cmp4052, label %cond.true.4054, label %cond.false.4060

cond.true.4054:                                   ; preds = %cond.false.4051
  %1508 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4055 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1508, i32 0, i32 3
  %1509 = load i64, i64* %bytes4055, align 8
  %1510 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4056 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1510, i32 0, i32 3
  %1511 = load i64, i64* %bytes4056, align 8
  %1512 = load i64, i64* %nbytes, align 8
  %add4057 = add nsw i64 %1511, %1512
  %cmp4058 = icmp sle i64 %1509, %add4057
  br i1 %cmp4058, label %cond.true.4082, label %lor.lhs.false.4065

cond.false.4060:                                  ; preds = %cond.false.4051
  %1513 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4061 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1513, i32 0, i32 3
  %1514 = load i64, i64* %bytes4061, align 8
  %1515 = load i64, i64* %nbytes, align 8
  %add4062 = add nsw i64 %1514, %1515
  %1516 = load i64, i64* %nbytes, align 8
  %cmp4063 = icmp slt i64 %add4062, %1516
  br i1 %cmp4063, label %cond.true.4082, label %lor.lhs.false.4065

lor.lhs.false.4065:                               ; preds = %cond.false.4060, %cond.true.4054, %cond.true.4046, %cond.end.4036, %cond.end.4007
  %1517 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4066 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1517, i32 0, i32 3
  %1518 = load i64, i64* %bytes4066, align 8
  %1519 = load i64, i64* %nbytes, align 8
  %add4067 = add nsw i64 %1518, %1519
  %mul4068 = mul nsw i64 0, %add4067
  %sub4069 = sub nsw i64 %mul4068, 1
  %cmp4070 = icmp slt i64 %sub4069, 0
  br i1 %cmp4070, label %land.lhs.true.4072, label %lor.lhs.false.4077

land.lhs.true.4072:                               ; preds = %lor.lhs.false.4065
  %1520 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4073 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1520, i32 0, i32 3
  %1521 = load i64, i64* %bytes4073, align 8
  %1522 = load i64, i64* %nbytes, align 8
  %add4074 = add nsw i64 %1521, %1522
  %cmp4075 = icmp slt i64 %add4074, -9223372036854775808
  br i1 %cmp4075, label %cond.true.4082, label %lor.lhs.false.4077

lor.lhs.false.4077:                               ; preds = %land.lhs.true.4072, %lor.lhs.false.4065
  %1523 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4078 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1523, i32 0, i32 3
  %1524 = load i64, i64* %bytes4078, align 8
  %1525 = load i64, i64* %nbytes, align 8
  %add4079 = add nsw i64 %1524, %1525
  %cmp4080 = icmp slt i64 9223372036854775807, %add4079
  br i1 %cmp4080, label %cond.true.4082, label %cond.false.4097

cond.true.4082:                                   ; preds = %lor.lhs.false.4077, %land.lhs.true.4072, %cond.false.4060, %cond.true.4054, %cond.true.4046, %cond.end.4036, %cond.end.4007
  %1526 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4083 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1526, i32 0, i32 3
  %1527 = load i64, i64* %bytes4083, align 8
  %1528 = load i64, i64* %nbytes, align 8
  %add4084 = add i64 %1527, %1528
  %cmp4085 = icmp ule i64 %add4084, 9223372036854775807
  br i1 %cmp4085, label %cond.true.4087, label %cond.false.4090

cond.true.4087:                                   ; preds = %cond.true.4082
  %1529 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4088 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1529, i32 0, i32 3
  %1530 = load i64, i64* %bytes4088, align 8
  %1531 = load i64, i64* %nbytes, align 8
  %add4089 = add i64 %1530, %1531
  br label %cond.end.4095

cond.false.4090:                                  ; preds = %cond.true.4082
  %1532 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4091 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1532, i32 0, i32 3
  %1533 = load i64, i64* %bytes4091, align 8
  %1534 = load i64, i64* %nbytes, align 8
  %add4092 = add i64 %1533, %1534
  %sub4093 = sub i64 %add4092, -9223372036854775808
  %add4094 = add nsw i64 %sub4093, -9223372036854775808
  br label %cond.end.4095

cond.end.4095:                                    ; preds = %cond.false.4090, %cond.true.4087
  %cond4096 = phi i64 [ %add4089, %cond.true.4087 ], [ %add4094, %cond.false.4090 ]
  store i64 %cond4096, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.4097:                                  ; preds = %lor.lhs.false.4077
  %1535 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4098 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1535, i32 0, i32 3
  %1536 = load i64, i64* %bytes4098, align 8
  %1537 = load i64, i64* %nbytes, align 8
  %add4099 = add i64 %1536, %1537
  %cmp4100 = icmp ule i64 %add4099, 9223372036854775807
  br i1 %cmp4100, label %cond.true.4102, label %cond.false.4105

cond.true.4102:                                   ; preds = %cond.false.4097
  %1538 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4103 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1538, i32 0, i32 3
  %1539 = load i64, i64* %bytes4103, align 8
  %1540 = load i64, i64* %nbytes, align 8
  %add4104 = add i64 %1539, %1540
  br label %cond.end.4110

cond.false.4105:                                  ; preds = %cond.false.4097
  %1541 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4106 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1541, i32 0, i32 3
  %1542 = load i64, i64* %bytes4106, align 8
  %1543 = load i64, i64* %nbytes, align 8
  %add4107 = add i64 %1542, %1543
  %sub4108 = sub i64 %add4107, -9223372036854775808
  %add4109 = add nsw i64 %sub4108, -9223372036854775808
  br label %cond.end.4110

cond.end.4110:                                    ; preds = %cond.false.4105, %cond.true.4102
  %cond4111 = phi i64 [ %add4104, %cond.true.4102 ], [ %add4109, %cond.false.4105 ]
  store i64 %cond4111, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.4112:                                  ; preds = %cond.false.3744
  br i1 false, label %cond.true.4113, label %cond.false.4296

cond.true.4113:                                   ; preds = %cond.false.4112
  %1544 = load i64, i64* %nbytes, align 8
  %mul4114 = mul nsw i64 0, %1544
  %1545 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4115 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1545, i32 0, i32 3
  %1546 = load i64, i64* %bytes4115, align 8
  %add4116 = add nsw i64 %mul4114, %1546
  %mul4117 = mul nsw i64 0, %add4116
  %sub4118 = sub nsw i64 %mul4117, 1
  %cmp4119 = icmp slt i64 %sub4118, 0
  br i1 %cmp4119, label %cond.true.4121, label %cond.false.4142

cond.true.4121:                                   ; preds = %cond.true.4113
  %1547 = load i64, i64* %nbytes, align 8
  %mul4122 = mul nsw i64 0, %1547
  %1548 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4123 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1548, i32 0, i32 3
  %1549 = load i64, i64* %bytes4123, align 8
  %add4124 = add nsw i64 %mul4122, %1549
  %mul4125 = mul nsw i64 0, %add4124
  %add4126 = add nsw i64 %mul4125, 0
  %neg4127 = xor i64 %add4126, -1
  %cmp4128 = icmp eq i64 %neg4127, -1
  %conv4129 = zext i1 %cmp4128 to i32
  %sub4130 = sub nsw i32 0, %conv4129
  %conv4131 = sext i32 %sub4130 to i64
  %1550 = load i64, i64* %nbytes, align 8
  %mul4132 = mul nsw i64 0, %1550
  %1551 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4133 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1551, i32 0, i32 3
  %1552 = load i64, i64* %bytes4133, align 8
  %add4134 = add nsw i64 %mul4132, %1552
  %mul4135 = mul nsw i64 0, %add4134
  %add4136 = add nsw i64 %mul4135, 1
  %shl4137 = shl i64 %add4136, 62
  %sub4138 = sub nsw i64 %shl4137, 1
  %mul4139 = mul nsw i64 %sub4138, 2
  %add4140 = add nsw i64 %mul4139, 1
  %sub4141 = sub nsw i64 %conv4131, %add4140
  br label %cond.end.4148

cond.false.4142:                                  ; preds = %cond.true.4113
  %1553 = load i64, i64* %nbytes, align 8
  %mul4143 = mul nsw i64 0, %1553
  %1554 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4144 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1554, i32 0, i32 3
  %1555 = load i64, i64* %bytes4144, align 8
  %add4145 = add nsw i64 %mul4143, %1555
  %mul4146 = mul nsw i64 0, %add4145
  %add4147 = add nsw i64 %mul4146, 0
  br label %cond.end.4148

cond.end.4148:                                    ; preds = %cond.false.4142, %cond.true.4121
  %cond4149 = phi i64 [ %sub4141, %cond.true.4121 ], [ %add4147, %cond.false.4142 ]
  %cmp4150 = icmp slt i64 %cond4149, 0
  br i1 %cmp4150, label %cond.true.4152, label %cond.false.4226

cond.true.4152:                                   ; preds = %cond.end.4148
  %1556 = load i64, i64* %nbytes, align 8
  %cmp4153 = icmp slt i64 %1556, 0
  br i1 %cmp4153, label %cond.true.4155, label %cond.false.4196

cond.true.4155:                                   ; preds = %cond.true.4152
  %1557 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4156 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1557, i32 0, i32 3
  %1558 = load i64, i64* %bytes4156, align 8
  %1559 = load i64, i64* %nbytes, align 8
  %mul4157 = mul nsw i64 0, %1559
  %1560 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4158 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1560, i32 0, i32 3
  %1561 = load i64, i64* %bytes4158, align 8
  %add4159 = add nsw i64 %mul4157, %1561
  %mul4160 = mul nsw i64 0, %add4159
  %sub4161 = sub nsw i64 %mul4160, 1
  %cmp4162 = icmp slt i64 %sub4161, 0
  br i1 %cmp4162, label %cond.true.4164, label %cond.false.4185

cond.true.4164:                                   ; preds = %cond.true.4155
  %1562 = load i64, i64* %nbytes, align 8
  %mul4165 = mul nsw i64 0, %1562
  %1563 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4166 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1563, i32 0, i32 3
  %1564 = load i64, i64* %bytes4166, align 8
  %add4167 = add nsw i64 %mul4165, %1564
  %mul4168 = mul nsw i64 0, %add4167
  %add4169 = add nsw i64 %mul4168, 0
  %neg4170 = xor i64 %add4169, -1
  %cmp4171 = icmp eq i64 %neg4170, -1
  %conv4172 = zext i1 %cmp4171 to i32
  %sub4173 = sub nsw i32 0, %conv4172
  %conv4174 = sext i32 %sub4173 to i64
  %1565 = load i64, i64* %nbytes, align 8
  %mul4175 = mul nsw i64 0, %1565
  %1566 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4176 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1566, i32 0, i32 3
  %1567 = load i64, i64* %bytes4176, align 8
  %add4177 = add nsw i64 %mul4175, %1567
  %mul4178 = mul nsw i64 0, %add4177
  %add4179 = add nsw i64 %mul4178, 1
  %shl4180 = shl i64 %add4179, 62
  %sub4181 = sub nsw i64 %shl4180, 1
  %mul4182 = mul nsw i64 %sub4181, 2
  %add4183 = add nsw i64 %mul4182, 1
  %sub4184 = sub nsw i64 %conv4174, %add4183
  br label %cond.end.4191

cond.false.4185:                                  ; preds = %cond.true.4155
  %1568 = load i64, i64* %nbytes, align 8
  %mul4186 = mul nsw i64 0, %1568
  %1569 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4187 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1569, i32 0, i32 3
  %1570 = load i64, i64* %bytes4187, align 8
  %add4188 = add nsw i64 %mul4186, %1570
  %mul4189 = mul nsw i64 0, %add4188
  %add4190 = add nsw i64 %mul4189, 0
  br label %cond.end.4191

cond.end.4191:                                    ; preds = %cond.false.4185, %cond.true.4164
  %cond4192 = phi i64 [ %sub4184, %cond.true.4164 ], [ %add4190, %cond.false.4185 ]
  %1571 = load i64, i64* %nbytes, align 8
  %sub4193 = sub nsw i64 %cond4192, %1571
  %cmp4194 = icmp slt i64 %1558, %sub4193
  br i1 %cmp4194, label %cond.true.4266, label %lor.lhs.false.4249

cond.false.4196:                                  ; preds = %cond.true.4152
  %1572 = load i64, i64* %nbytes, align 8
  %mul4197 = mul nsw i64 0, %1572
  %1573 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4198 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1573, i32 0, i32 3
  %1574 = load i64, i64* %bytes4198, align 8
  %add4199 = add nsw i64 %mul4197, %1574
  %mul4200 = mul nsw i64 0, %add4199
  %sub4201 = sub nsw i64 %mul4200, 1
  %cmp4202 = icmp slt i64 %sub4201, 0
  br i1 %cmp4202, label %cond.true.4204, label %cond.false.4214

cond.true.4204:                                   ; preds = %cond.false.4196
  %1575 = load i64, i64* %nbytes, align 8
  %mul4205 = mul nsw i64 0, %1575
  %1576 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4206 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1576, i32 0, i32 3
  %1577 = load i64, i64* %bytes4206, align 8
  %add4207 = add nsw i64 %mul4205, %1577
  %mul4208 = mul nsw i64 0, %add4207
  %add4209 = add nsw i64 %mul4208, 1
  %shl4210 = shl i64 %add4209, 62
  %sub4211 = sub nsw i64 %shl4210, 1
  %mul4212 = mul nsw i64 %sub4211, 2
  %add4213 = add nsw i64 %mul4212, 1
  br label %cond.end.4220

cond.false.4214:                                  ; preds = %cond.false.4196
  %1578 = load i64, i64* %nbytes, align 8
  %mul4215 = mul nsw i64 0, %1578
  %1579 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4216 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1579, i32 0, i32 3
  %1580 = load i64, i64* %bytes4216, align 8
  %add4217 = add nsw i64 %mul4215, %1580
  %mul4218 = mul nsw i64 0, %add4217
  %sub4219 = sub nsw i64 %mul4218, 1
  br label %cond.end.4220

cond.end.4220:                                    ; preds = %cond.false.4214, %cond.true.4204
  %cond4221 = phi i64 [ %add4213, %cond.true.4204 ], [ %sub4219, %cond.false.4214 ]
  %1581 = load i64, i64* %nbytes, align 8
  %sub4222 = sub nsw i64 %cond4221, %1581
  %1582 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4223 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1582, i32 0, i32 3
  %1583 = load i64, i64* %bytes4223, align 8
  %cmp4224 = icmp slt i64 %sub4222, %1583
  br i1 %cmp4224, label %cond.true.4266, label %lor.lhs.false.4249

cond.false.4226:                                  ; preds = %cond.end.4148
  %1584 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4227 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1584, i32 0, i32 3
  %1585 = load i64, i64* %bytes4227, align 8
  %cmp4228 = icmp slt i64 %1585, 0
  br i1 %cmp4228, label %cond.true.4230, label %cond.false.4235

cond.true.4230:                                   ; preds = %cond.false.4226
  %1586 = load i64, i64* %nbytes, align 8
  %1587 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4231 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1587, i32 0, i32 3
  %1588 = load i64, i64* %bytes4231, align 8
  %1589 = load i64, i64* %nbytes, align 8
  %add4232 = add nsw i64 %1588, %1589
  %cmp4233 = icmp sle i64 %1586, %add4232
  br i1 %cmp4233, label %cond.true.4266, label %lor.lhs.false.4249

cond.false.4235:                                  ; preds = %cond.false.4226
  %1590 = load i64, i64* %nbytes, align 8
  %cmp4236 = icmp slt i64 %1590, 0
  br i1 %cmp4236, label %cond.true.4238, label %cond.false.4244

cond.true.4238:                                   ; preds = %cond.false.4235
  %1591 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4239 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1591, i32 0, i32 3
  %1592 = load i64, i64* %bytes4239, align 8
  %1593 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4240 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1593, i32 0, i32 3
  %1594 = load i64, i64* %bytes4240, align 8
  %1595 = load i64, i64* %nbytes, align 8
  %add4241 = add nsw i64 %1594, %1595
  %cmp4242 = icmp sle i64 %1592, %add4241
  br i1 %cmp4242, label %cond.true.4266, label %lor.lhs.false.4249

cond.false.4244:                                  ; preds = %cond.false.4235
  %1596 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4245 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1596, i32 0, i32 3
  %1597 = load i64, i64* %bytes4245, align 8
  %1598 = load i64, i64* %nbytes, align 8
  %add4246 = add nsw i64 %1597, %1598
  %1599 = load i64, i64* %nbytes, align 8
  %cmp4247 = icmp slt i64 %add4246, %1599
  br i1 %cmp4247, label %cond.true.4266, label %lor.lhs.false.4249

lor.lhs.false.4249:                               ; preds = %cond.false.4244, %cond.true.4238, %cond.true.4230, %cond.end.4220, %cond.end.4191
  %1600 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4250 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1600, i32 0, i32 3
  %1601 = load i64, i64* %bytes4250, align 8
  %1602 = load i64, i64* %nbytes, align 8
  %add4251 = add nsw i64 %1601, %1602
  %mul4252 = mul nsw i64 0, %add4251
  %sub4253 = sub nsw i64 %mul4252, 1
  %cmp4254 = icmp slt i64 %sub4253, 0
  br i1 %cmp4254, label %land.lhs.true.4256, label %lor.lhs.false.4261

land.lhs.true.4256:                               ; preds = %lor.lhs.false.4249
  %1603 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4257 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1603, i32 0, i32 3
  %1604 = load i64, i64* %bytes4257, align 8
  %1605 = load i64, i64* %nbytes, align 8
  %add4258 = add nsw i64 %1604, %1605
  %cmp4259 = icmp slt i64 %add4258, -9223372036854775808
  br i1 %cmp4259, label %cond.true.4266, label %lor.lhs.false.4261

lor.lhs.false.4261:                               ; preds = %land.lhs.true.4256, %lor.lhs.false.4249
  %1606 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4262 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1606, i32 0, i32 3
  %1607 = load i64, i64* %bytes4262, align 8
  %1608 = load i64, i64* %nbytes, align 8
  %add4263 = add nsw i64 %1607, %1608
  %cmp4264 = icmp slt i64 9223372036854775807, %add4263
  br i1 %cmp4264, label %cond.true.4266, label %cond.false.4281

cond.true.4266:                                   ; preds = %lor.lhs.false.4261, %land.lhs.true.4256, %cond.false.4244, %cond.true.4238, %cond.true.4230, %cond.end.4220, %cond.end.4191
  %1609 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4267 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1609, i32 0, i32 3
  %1610 = load i64, i64* %bytes4267, align 8
  %1611 = load i64, i64* %nbytes, align 8
  %add4268 = add i64 %1610, %1611
  %cmp4269 = icmp ule i64 %add4268, 9223372036854775807
  br i1 %cmp4269, label %cond.true.4271, label %cond.false.4274

cond.true.4271:                                   ; preds = %cond.true.4266
  %1612 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4272 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1612, i32 0, i32 3
  %1613 = load i64, i64* %bytes4272, align 8
  %1614 = load i64, i64* %nbytes, align 8
  %add4273 = add i64 %1613, %1614
  br label %cond.end.4279

cond.false.4274:                                  ; preds = %cond.true.4266
  %1615 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4275 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1615, i32 0, i32 3
  %1616 = load i64, i64* %bytes4275, align 8
  %1617 = load i64, i64* %nbytes, align 8
  %add4276 = add i64 %1616, %1617
  %sub4277 = sub i64 %add4276, -9223372036854775808
  %add4278 = add nsw i64 %sub4277, -9223372036854775808
  br label %cond.end.4279

cond.end.4279:                                    ; preds = %cond.false.4274, %cond.true.4271
  %cond4280 = phi i64 [ %add4273, %cond.true.4271 ], [ %add4278, %cond.false.4274 ]
  store i64 %cond4280, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.4281:                                  ; preds = %lor.lhs.false.4261
  %1618 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4282 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1618, i32 0, i32 3
  %1619 = load i64, i64* %bytes4282, align 8
  %1620 = load i64, i64* %nbytes, align 8
  %add4283 = add i64 %1619, %1620
  %cmp4284 = icmp ule i64 %add4283, 9223372036854775807
  br i1 %cmp4284, label %cond.true.4286, label %cond.false.4289

cond.true.4286:                                   ; preds = %cond.false.4281
  %1621 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4287 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1621, i32 0, i32 3
  %1622 = load i64, i64* %bytes4287, align 8
  %1623 = load i64, i64* %nbytes, align 8
  %add4288 = add i64 %1622, %1623
  br label %cond.end.4294

cond.false.4289:                                  ; preds = %cond.false.4281
  %1624 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4290 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1624, i32 0, i32 3
  %1625 = load i64, i64* %bytes4290, align 8
  %1626 = load i64, i64* %nbytes, align 8
  %add4291 = add i64 %1625, %1626
  %sub4292 = sub i64 %add4291, -9223372036854775808
  %add4293 = add nsw i64 %sub4292, -9223372036854775808
  br label %cond.end.4294

cond.end.4294:                                    ; preds = %cond.false.4289, %cond.true.4286
  %cond4295 = phi i64 [ %add4288, %cond.true.4286 ], [ %add4293, %cond.false.4289 ]
  store i64 %cond4295, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

cond.false.4296:                                  ; preds = %cond.false.4112
  %1627 = load i64, i64* %nbytes, align 8
  %mul4297 = mul nsw i64 0, %1627
  %1628 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4298 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1628, i32 0, i32 3
  %1629 = load i64, i64* %bytes4298, align 8
  %add4299 = add nsw i64 %mul4297, %1629
  %mul4300 = mul nsw i64 0, %add4299
  %sub4301 = sub nsw i64 %mul4300, 1
  %cmp4302 = icmp slt i64 %sub4301, 0
  br i1 %cmp4302, label %cond.true.4304, label %cond.false.4325

cond.true.4304:                                   ; preds = %cond.false.4296
  %1630 = load i64, i64* %nbytes, align 8
  %mul4305 = mul nsw i64 0, %1630
  %1631 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4306 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1631, i32 0, i32 3
  %1632 = load i64, i64* %bytes4306, align 8
  %add4307 = add nsw i64 %mul4305, %1632
  %mul4308 = mul nsw i64 0, %add4307
  %add4309 = add nsw i64 %mul4308, 0
  %neg4310 = xor i64 %add4309, -1
  %cmp4311 = icmp eq i64 %neg4310, -1
  %conv4312 = zext i1 %cmp4311 to i32
  %sub4313 = sub nsw i32 0, %conv4312
  %conv4314 = sext i32 %sub4313 to i64
  %1633 = load i64, i64* %nbytes, align 8
  %mul4315 = mul nsw i64 0, %1633
  %1634 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4316 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1634, i32 0, i32 3
  %1635 = load i64, i64* %bytes4316, align 8
  %add4317 = add nsw i64 %mul4315, %1635
  %mul4318 = mul nsw i64 0, %add4317
  %add4319 = add nsw i64 %mul4318, 1
  %shl4320 = shl i64 %add4319, 62
  %sub4321 = sub nsw i64 %shl4320, 1
  %mul4322 = mul nsw i64 %sub4321, 2
  %add4323 = add nsw i64 %mul4322, 1
  %sub4324 = sub nsw i64 %conv4314, %add4323
  br label %cond.end.4331

cond.false.4325:                                  ; preds = %cond.false.4296
  %1636 = load i64, i64* %nbytes, align 8
  %mul4326 = mul nsw i64 0, %1636
  %1637 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4327 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1637, i32 0, i32 3
  %1638 = load i64, i64* %bytes4327, align 8
  %add4328 = add nsw i64 %mul4326, %1638
  %mul4329 = mul nsw i64 0, %add4328
  %add4330 = add nsw i64 %mul4329, 0
  br label %cond.end.4331

cond.end.4331:                                    ; preds = %cond.false.4325, %cond.true.4304
  %cond4332 = phi i64 [ %sub4324, %cond.true.4304 ], [ %add4330, %cond.false.4325 ]
  %cmp4333 = icmp slt i64 %cond4332, 0
  br i1 %cmp4333, label %cond.true.4335, label %cond.false.4409

cond.true.4335:                                   ; preds = %cond.end.4331
  %1639 = load i64, i64* %nbytes, align 8
  %cmp4336 = icmp slt i64 %1639, 0
  br i1 %cmp4336, label %cond.true.4338, label %cond.false.4379

cond.true.4338:                                   ; preds = %cond.true.4335
  %1640 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4339 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1640, i32 0, i32 3
  %1641 = load i64, i64* %bytes4339, align 8
  %1642 = load i64, i64* %nbytes, align 8
  %mul4340 = mul nsw i64 0, %1642
  %1643 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4341 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1643, i32 0, i32 3
  %1644 = load i64, i64* %bytes4341, align 8
  %add4342 = add nsw i64 %mul4340, %1644
  %mul4343 = mul nsw i64 0, %add4342
  %sub4344 = sub nsw i64 %mul4343, 1
  %cmp4345 = icmp slt i64 %sub4344, 0
  br i1 %cmp4345, label %cond.true.4347, label %cond.false.4368

cond.true.4347:                                   ; preds = %cond.true.4338
  %1645 = load i64, i64* %nbytes, align 8
  %mul4348 = mul nsw i64 0, %1645
  %1646 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4349 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1646, i32 0, i32 3
  %1647 = load i64, i64* %bytes4349, align 8
  %add4350 = add nsw i64 %mul4348, %1647
  %mul4351 = mul nsw i64 0, %add4350
  %add4352 = add nsw i64 %mul4351, 0
  %neg4353 = xor i64 %add4352, -1
  %cmp4354 = icmp eq i64 %neg4353, -1
  %conv4355 = zext i1 %cmp4354 to i32
  %sub4356 = sub nsw i32 0, %conv4355
  %conv4357 = sext i32 %sub4356 to i64
  %1648 = load i64, i64* %nbytes, align 8
  %mul4358 = mul nsw i64 0, %1648
  %1649 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4359 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1649, i32 0, i32 3
  %1650 = load i64, i64* %bytes4359, align 8
  %add4360 = add nsw i64 %mul4358, %1650
  %mul4361 = mul nsw i64 0, %add4360
  %add4362 = add nsw i64 %mul4361, 1
  %shl4363 = shl i64 %add4362, 62
  %sub4364 = sub nsw i64 %shl4363, 1
  %mul4365 = mul nsw i64 %sub4364, 2
  %add4366 = add nsw i64 %mul4365, 1
  %sub4367 = sub nsw i64 %conv4357, %add4366
  br label %cond.end.4374

cond.false.4368:                                  ; preds = %cond.true.4338
  %1651 = load i64, i64* %nbytes, align 8
  %mul4369 = mul nsw i64 0, %1651
  %1652 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4370 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1652, i32 0, i32 3
  %1653 = load i64, i64* %bytes4370, align 8
  %add4371 = add nsw i64 %mul4369, %1653
  %mul4372 = mul nsw i64 0, %add4371
  %add4373 = add nsw i64 %mul4372, 0
  br label %cond.end.4374

cond.end.4374:                                    ; preds = %cond.false.4368, %cond.true.4347
  %cond4375 = phi i64 [ %sub4367, %cond.true.4347 ], [ %add4373, %cond.false.4368 ]
  %1654 = load i64, i64* %nbytes, align 8
  %sub4376 = sub nsw i64 %cond4375, %1654
  %cmp4377 = icmp slt i64 %1641, %sub4376
  br i1 %cmp4377, label %cond.true.4449, label %lor.lhs.false.4432

cond.false.4379:                                  ; preds = %cond.true.4335
  %1655 = load i64, i64* %nbytes, align 8
  %mul4380 = mul nsw i64 0, %1655
  %1656 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4381 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1656, i32 0, i32 3
  %1657 = load i64, i64* %bytes4381, align 8
  %add4382 = add nsw i64 %mul4380, %1657
  %mul4383 = mul nsw i64 0, %add4382
  %sub4384 = sub nsw i64 %mul4383, 1
  %cmp4385 = icmp slt i64 %sub4384, 0
  br i1 %cmp4385, label %cond.true.4387, label %cond.false.4397

cond.true.4387:                                   ; preds = %cond.false.4379
  %1658 = load i64, i64* %nbytes, align 8
  %mul4388 = mul nsw i64 0, %1658
  %1659 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4389 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1659, i32 0, i32 3
  %1660 = load i64, i64* %bytes4389, align 8
  %add4390 = add nsw i64 %mul4388, %1660
  %mul4391 = mul nsw i64 0, %add4390
  %add4392 = add nsw i64 %mul4391, 1
  %shl4393 = shl i64 %add4392, 62
  %sub4394 = sub nsw i64 %shl4393, 1
  %mul4395 = mul nsw i64 %sub4394, 2
  %add4396 = add nsw i64 %mul4395, 1
  br label %cond.end.4403

cond.false.4397:                                  ; preds = %cond.false.4379
  %1661 = load i64, i64* %nbytes, align 8
  %mul4398 = mul nsw i64 0, %1661
  %1662 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4399 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1662, i32 0, i32 3
  %1663 = load i64, i64* %bytes4399, align 8
  %add4400 = add nsw i64 %mul4398, %1663
  %mul4401 = mul nsw i64 0, %add4400
  %sub4402 = sub nsw i64 %mul4401, 1
  br label %cond.end.4403

cond.end.4403:                                    ; preds = %cond.false.4397, %cond.true.4387
  %cond4404 = phi i64 [ %add4396, %cond.true.4387 ], [ %sub4402, %cond.false.4397 ]
  %1664 = load i64, i64* %nbytes, align 8
  %sub4405 = sub nsw i64 %cond4404, %1664
  %1665 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4406 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1665, i32 0, i32 3
  %1666 = load i64, i64* %bytes4406, align 8
  %cmp4407 = icmp slt i64 %sub4405, %1666
  br i1 %cmp4407, label %cond.true.4449, label %lor.lhs.false.4432

cond.false.4409:                                  ; preds = %cond.end.4331
  %1667 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4410 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1667, i32 0, i32 3
  %1668 = load i64, i64* %bytes4410, align 8
  %cmp4411 = icmp slt i64 %1668, 0
  br i1 %cmp4411, label %cond.true.4413, label %cond.false.4418

cond.true.4413:                                   ; preds = %cond.false.4409
  %1669 = load i64, i64* %nbytes, align 8
  %1670 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4414 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1670, i32 0, i32 3
  %1671 = load i64, i64* %bytes4414, align 8
  %1672 = load i64, i64* %nbytes, align 8
  %add4415 = add nsw i64 %1671, %1672
  %cmp4416 = icmp sle i64 %1669, %add4415
  br i1 %cmp4416, label %cond.true.4449, label %lor.lhs.false.4432

cond.false.4418:                                  ; preds = %cond.false.4409
  %1673 = load i64, i64* %nbytes, align 8
  %cmp4419 = icmp slt i64 %1673, 0
  br i1 %cmp4419, label %cond.true.4421, label %cond.false.4427

cond.true.4421:                                   ; preds = %cond.false.4418
  %1674 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4422 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1674, i32 0, i32 3
  %1675 = load i64, i64* %bytes4422, align 8
  %1676 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4423 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1676, i32 0, i32 3
  %1677 = load i64, i64* %bytes4423, align 8
  %1678 = load i64, i64* %nbytes, align 8
  %add4424 = add nsw i64 %1677, %1678
  %cmp4425 = icmp sle i64 %1675, %add4424
  br i1 %cmp4425, label %cond.true.4449, label %lor.lhs.false.4432

cond.false.4427:                                  ; preds = %cond.false.4418
  %1679 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4428 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1679, i32 0, i32 3
  %1680 = load i64, i64* %bytes4428, align 8
  %1681 = load i64, i64* %nbytes, align 8
  %add4429 = add nsw i64 %1680, %1681
  %1682 = load i64, i64* %nbytes, align 8
  %cmp4430 = icmp slt i64 %add4429, %1682
  br i1 %cmp4430, label %cond.true.4449, label %lor.lhs.false.4432

lor.lhs.false.4432:                               ; preds = %cond.false.4427, %cond.true.4421, %cond.true.4413, %cond.end.4403, %cond.end.4374
  %1683 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4433 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1683, i32 0, i32 3
  %1684 = load i64, i64* %bytes4433, align 8
  %1685 = load i64, i64* %nbytes, align 8
  %add4434 = add nsw i64 %1684, %1685
  %mul4435 = mul nsw i64 0, %add4434
  %sub4436 = sub nsw i64 %mul4435, 1
  %cmp4437 = icmp slt i64 %sub4436, 0
  br i1 %cmp4437, label %land.lhs.true.4439, label %lor.lhs.false.4444

land.lhs.true.4439:                               ; preds = %lor.lhs.false.4432
  %1686 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4440 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1686, i32 0, i32 3
  %1687 = load i64, i64* %bytes4440, align 8
  %1688 = load i64, i64* %nbytes, align 8
  %add4441 = add nsw i64 %1687, %1688
  %cmp4442 = icmp slt i64 %add4441, -9223372036854775808
  br i1 %cmp4442, label %cond.true.4449, label %lor.lhs.false.4444

lor.lhs.false.4444:                               ; preds = %land.lhs.true.4439, %lor.lhs.false.4432
  %1689 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4445 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1689, i32 0, i32 3
  %1690 = load i64, i64* %bytes4445, align 8
  %1691 = load i64, i64* %nbytes, align 8
  %add4446 = add nsw i64 %1690, %1691
  %cmp4447 = icmp slt i64 9223372036854775807, %add4446
  br i1 %cmp4447, label %cond.true.4449, label %cond.false.4464

cond.true.4449:                                   ; preds = %lor.lhs.false.4444, %land.lhs.true.4439, %cond.false.4427, %cond.true.4421, %cond.true.4413, %cond.end.4403, %cond.end.4374
  %1692 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4450 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1692, i32 0, i32 3
  %1693 = load i64, i64* %bytes4450, align 8
  %1694 = load i64, i64* %nbytes, align 8
  %add4451 = add i64 %1693, %1694
  %cmp4452 = icmp ule i64 %add4451, 9223372036854775807
  br i1 %cmp4452, label %cond.true.4454, label %cond.false.4457

cond.true.4454:                                   ; preds = %cond.true.4449
  %1695 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4455 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1695, i32 0, i32 3
  %1696 = load i64, i64* %bytes4455, align 8
  %1697 = load i64, i64* %nbytes, align 8
  %add4456 = add i64 %1696, %1697
  br label %cond.end.4462

cond.false.4457:                                  ; preds = %cond.true.4449
  %1698 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4458 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1698, i32 0, i32 3
  %1699 = load i64, i64* %bytes4458, align 8
  %1700 = load i64, i64* %nbytes, align 8
  %add4459 = add i64 %1699, %1700
  %sub4460 = sub i64 %add4459, -9223372036854775808
  %add4461 = add nsw i64 %sub4460, -9223372036854775808
  br label %cond.end.4462

cond.end.4462:                                    ; preds = %cond.false.4457, %cond.true.4454
  %cond4463 = phi i64 [ %add4456, %cond.true.4454 ], [ %add4461, %cond.false.4457 ]
  store i64 %cond4463, i64* %nbytes, align 8
  br i1 true, label %if.then.4479, label %if.end.4480

cond.false.4464:                                  ; preds = %lor.lhs.false.4444
  %1701 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4465 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1701, i32 0, i32 3
  %1702 = load i64, i64* %bytes4465, align 8
  %1703 = load i64, i64* %nbytes, align 8
  %add4466 = add i64 %1702, %1703
  %cmp4467 = icmp ule i64 %add4466, 9223372036854775807
  br i1 %cmp4467, label %cond.true.4469, label %cond.false.4472

cond.true.4469:                                   ; preds = %cond.false.4464
  %1704 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4470 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1704, i32 0, i32 3
  %1705 = load i64, i64* %bytes4470, align 8
  %1706 = load i64, i64* %nbytes, align 8
  %add4471 = add i64 %1705, %1706
  br label %cond.end.4477

cond.false.4472:                                  ; preds = %cond.false.4464
  %1707 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4473 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1707, i32 0, i32 3
  %1708 = load i64, i64* %bytes4473, align 8
  %1709 = load i64, i64* %nbytes, align 8
  %add4474 = add i64 %1708, %1709
  %sub4475 = sub i64 %add4474, -9223372036854775808
  %add4476 = add nsw i64 %sub4475, -9223372036854775808
  br label %cond.end.4477

cond.end.4477:                                    ; preds = %cond.false.4472, %cond.true.4469
  %cond4478 = phi i64 [ %add4471, %cond.true.4469 ], [ %add4476, %cond.false.4472 ]
  store i64 %cond4478, i64* %nbytes, align 8
  br i1 false, label %if.then.4479, label %if.end.4480

if.then.4479:                                     ; preds = %cond.end.4477, %cond.end.4462, %cond.end.4294, %cond.end.4279, %cond.end.4110, %cond.end.4095, %cond.end.3927, %cond.end.3912, %cond.end.3741, %cond.end.3719, %cond.end.3544, %cond.end.3522, %cond.end.3303, %cond.end.3271, %cond.end.3086, %cond.end.3054, %cond.end.2781, %cond.end.2749, %cond.end.2564, %cond.end.2532
  call void @memory_full(i64 -1) #8
  unreachable

if.end.4480:                                      ; preds = %cond.end.4477, %cond.end.4462, %cond.end.4294, %cond.end.4279, %cond.end.4110, %cond.end.4095, %cond.end.3927, %cond.end.3912, %cond.end.3741, %cond.end.3719, %cond.end.3544, %cond.end.3522, %cond.end.3303, %cond.end.3271, %cond.end.3086, %cond.end.3054, %cond.end.2781, %cond.end.2749, %cond.end.2564, %cond.end.2532
  %1710 = load i64, i64* %nbytes, align 8
  %1711 = load %struct.sortstrlist*, %struct.sortstrlist** %ssl.addr, align 8
  %bytes4481 = getelementptr inbounds %struct.sortstrlist, %struct.sortstrlist* %1711, i32 0, i32 3
  store i64 %1710, i64* %bytes4481, align 8
  br label %if.end.4482

if.end.4482:                                      ; preds = %if.end.4480, %if.end.2243
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @cmp_for_strings(i8* %as1, i8* %as2) #3 {
entry:
  %retval = alloca i32, align 4
  %as1.addr = alloca i8*, align 8
  %as2.addr = alloca i8*, align 8
  %s1 = alloca %struct.sortstr*, align 8
  %s2 = alloca %struct.sortstr*, align 8
  store i8* %as1, i8** %as1.addr, align 8
  store i8* %as2, i8** %as2.addr, align 8
  %0 = load i8*, i8** %as1.addr, align 8
  %1 = bitcast i8* %0 to %struct.sortstr*
  store %struct.sortstr* %1, %struct.sortstr** %s1, align 8
  %2 = load i8*, i8** %as2.addr, align 8
  %3 = bitcast i8* %2 to %struct.sortstr*
  store %struct.sortstr* %3, %struct.sortstr** %s2, align 8
  %4 = load %struct.sortstr*, %struct.sortstr** %s1, align 8
  %size = getelementptr inbounds %struct.sortstr, %struct.sortstr* %4, i32 0, i32 2
  %5 = load i64, i64* %size, align 8
  %6 = load %struct.sortstr*, %struct.sortstr** %s2, align 8
  %size1 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %6, i32 0, i32 2
  %7 = load i64, i64* %size1, align 8
  %cmp = icmp ne i64 %5, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.sortstr*, %struct.sortstr** %s2, align 8
  %size2 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %8, i32 0, i32 2
  %9 = load i64, i64* %size2, align 8
  %10 = load %struct.sortstr*, %struct.sortstr** %s1, align 8
  %size3 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %10, i32 0, i32 2
  %11 = load i64, i64* %size3, align 8
  %cmp4 = icmp slt i64 %9, %11
  %cond = select i1 %cmp4, i32 -1, i32 1
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.sortstr*, %struct.sortstr** %s1, align 8
  %priority = getelementptr inbounds %struct.sortstr, %struct.sortstr* %12, i32 0, i32 3
  %13 = load i64, i64* %priority, align 8
  %14 = load %struct.sortstr*, %struct.sortstr** %s2, align 8
  %priority5 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %14, i32 0, i32 3
  %15 = load i64, i64* %priority5, align 8
  %cmp6 = icmp ne i64 %13, %15
  br i1 %cmp6, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end
  %16 = load %struct.sortstr*, %struct.sortstr** %s1, align 8
  %priority8 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %16, i32 0, i32 3
  %17 = load i64, i64* %priority8, align 8
  %18 = load %struct.sortstr*, %struct.sortstr** %s2, align 8
  %priority9 = getelementptr inbounds %struct.sortstr, %struct.sortstr* %18, i32 0, i32 3
  %19 = load i64, i64* %priority9, align 8
  %cmp10 = icmp slt i64 %17, %19
  %cond11 = select i1 %cmp10, i32 -1, i32 1
  store i32 %cond11, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.7, %if.then
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: noreturn
declare void @memory_full(i64) #2

declare i64 @copy_text(i8*, i8*, i64, i1 zeroext, i1 zeroext) #1

declare i64 @SBYTES(i64) #1

declare zeroext i1 @STRING_MULTIBYTE(i64) #1

; Function Attrs: nounwind uwtable
define void @recenter_overlay_lists(%struct.buffer* %buf, i64 %pos) #3 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %pos.addr = alloca i64, align 8
  %overlay = alloca i64, align 8
  %beg = alloca i64, align 8
  %end = alloca i64, align 8
  %prev = alloca %struct.Lisp_Overlay*, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %next = alloca %struct.Lisp_Overlay*, align 8
  %where = alloca i64, align 8
  %other = alloca %struct.Lisp_Overlay*, align 8
  %other_prev = alloca %struct.Lisp_Overlay*, align 8
  %otherbeg = alloca i64, align 8
  %otheroverlay = alloca i64, align 8
  %where105 = alloca i64, align 8
  %other119 = alloca %struct.Lisp_Overlay*, align 8
  %other_prev120 = alloca %struct.Lisp_Overlay*, align 8
  %otherend = alloca i64, align 8
  %otheroverlay130 = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %prev, align 8
  %0 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.60, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %for.body, label %for.end.61

for.body:                                         ; preds = %for.cond
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next1 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %3, i32 0, i32 1
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next1, align 8
  store %struct.Lisp_Overlay* %4, %struct.Lisp_Overlay** %next, align 8
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %6 = bitcast %struct.Lisp_Overlay* %5 to i8*
  %call = call i64 @make_lisp_ptr(i8* %6, i32 1)
  store i64 %call, i64* %overlay, align 8
  %7 = load i64, i64* %overlay, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 2
  %8 = load i64, i64* %start, align 8
  store i64 %8, i64* %beg, align 8
  %9 = load i64, i64* %overlay, align 8
  %call3 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %end4 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call3, i32 0, i32 3
  %10 = load i64, i64* %end4, align 8
  store i64 %10, i64* %end, align 8
  %11 = load i64, i64* %end, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %12 = load i64, i64* %end, align 8
  %call6 = call i32 @XMISCTYPE(i64 %12)
  %cmp7 = icmp eq i32 %call6, 24236
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %13 = load i64, i64* %end, align 8
  %call9 = call i64 @marker_position(i64 %13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %14, %cond.true
  %cond = phi i64 [ %call9, %cond.true ], [ 0, %14 ]
  %15 = load i64, i64* %pos.addr, align 8
  %cmp10 = icmp sgt i64 %cond, %15
  br i1 %cmp10, label %if.then, label %if.else.58

if.then:                                          ; preds = %cond.end
  %16 = load i64, i64* %beg, align 8
  %and12 = and i64 %16, 7
  %conv13 = trunc i64 %and12 to i32
  %cmp14 = icmp eq i32 %conv13, 1
  br i1 %cmp14, label %land.lhs.true.16, label %cond.false.22

land.lhs.true.16:                                 ; preds = %if.then
  %17 = load i64, i64* %beg, align 8
  %call17 = call i32 @XMISCTYPE(i64 %17)
  %cmp18 = icmp eq i32 %call17, 24236
  br i1 %cmp18, label %cond.true.20, label %cond.false.22

cond.true.20:                                     ; preds = %land.lhs.true.16
  %18 = load i64, i64* %beg, align 8
  %call21 = call i64 @marker_position(i64 %18)
  br label %cond.end.23

cond.false.22:                                    ; preds = %land.lhs.true.16, %if.then
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.23

cond.end.23:                                      ; preds = %19, %cond.true.20
  %cond24 = phi i64 [ %call21, %cond.true.20 ], [ 0, %19 ]
  store i64 %cond24, i64* %where, align 8
  %20 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  %tobool25 = icmp ne %struct.Lisp_Overlay* %20, null
  br i1 %tobool25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %cond.end.23
  %21 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  %22 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  %next27 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %22, i32 0, i32 1
  store %struct.Lisp_Overlay* %21, %struct.Lisp_Overlay** %next27, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end.23
  %23 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %24 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %23, %struct.Lisp_Overlay* %24)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.26
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %other_prev, align 8
  %25 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 96
  %26 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %26, %struct.Lisp_Overlay** %other, align 8
  br label %for.cond.28

for.cond.28:                                      ; preds = %for.inc, %if.end
  %27 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other, align 8
  %tobool29 = icmp ne %struct.Lisp_Overlay* %27, null
  br i1 %tobool29, label %for.body.30, label %for.end

for.body.30:                                      ; preds = %for.cond.28
  %28 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other, align 8
  %29 = bitcast %struct.Lisp_Overlay* %28 to i8*
  %call31 = call i64 @make_lisp_ptr(i8* %29, i32 1)
  store i64 %call31, i64* %otheroverlay, align 8
  %30 = load i64, i64* %otheroverlay, align 8
  %call32 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %30)
  %start33 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call32, i32 0, i32 2
  %31 = load i64, i64* %start33, align 8
  store i64 %31, i64* %otherbeg, align 8
  %32 = load i64, i64* %otherbeg, align 8
  %and34 = and i64 %32, 7
  %conv35 = trunc i64 %and34 to i32
  %cmp36 = icmp eq i32 %conv35, 1
  br i1 %cmp36, label %land.lhs.true.38, label %cond.false.44

land.lhs.true.38:                                 ; preds = %for.body.30
  %33 = load i64, i64* %otherbeg, align 8
  %call39 = call i32 @XMISCTYPE(i64 %33)
  %cmp40 = icmp eq i32 %call39, 24236
  br i1 %cmp40, label %cond.true.42, label %cond.false.44

cond.true.42:                                     ; preds = %land.lhs.true.38
  %34 = load i64, i64* %otherbeg, align 8
  %call43 = call i64 @marker_position(i64 %34)
  br label %cond.end.45

cond.false.44:                                    ; preds = %land.lhs.true.38, %for.body.30
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.45

cond.end.45:                                      ; preds = %35, %cond.true.42
  %cond46 = phi i64 [ %call43, %cond.true.42 ], [ 0, %35 ]
  %36 = load i64, i64* %where, align 8
  %cmp47 = icmp sge i64 %cond46, %36
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %cond.end.45
  br label %for.end

if.end.50:                                        ; preds = %cond.end.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.50
  %37 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other, align 8
  store %struct.Lisp_Overlay* %37, %struct.Lisp_Overlay** %other_prev, align 8
  %38 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other, align 8
  %next51 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %38, i32 0, i32 1
  %39 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next51, align 8
  store %struct.Lisp_Overlay* %39, %struct.Lisp_Overlay** %other, align 8
  br label %for.cond.28

for.end:                                          ; preds = %if.then.49, %for.cond.28
  %40 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other, align 8
  %41 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next52 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %41, i32 0, i32 1
  store %struct.Lisp_Overlay* %40, %struct.Lisp_Overlay** %next52, align 8
  %42 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other_prev, align 8
  %tobool53 = icmp ne %struct.Lisp_Overlay* %42, null
  br i1 %tobool53, label %if.then.54, label %if.else.56

if.then.54:                                       ; preds = %for.end
  %43 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %44 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other_prev, align 8
  %next55 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %44, i32 0, i32 1
  store %struct.Lisp_Overlay* %43, %struct.Lisp_Overlay** %next55, align 8
  br label %if.end.57

if.else.56:                                       ; preds = %for.end
  %45 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %46 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %45, %struct.Lisp_Overlay* %46)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.56, %if.then.54
  %47 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  store %struct.Lisp_Overlay* %47, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.59

if.else.58:                                       ; preds = %cond.end
  br label %for.end.61

if.end.59:                                        ; preds = %if.end.57
  br label %for.inc.60

for.inc.60:                                       ; preds = %if.end.59
  %48 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %48, %struct.Lisp_Overlay** %prev, align 8
  %49 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %49, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end.61:                                       ; preds = %if.else.58, %for.cond
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %prev, align 8
  %50 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %overlays_after62 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 96
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after62, align 8
  store %struct.Lisp_Overlay* %51, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.161, %for.end.61
  %52 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool64 = icmp ne %struct.Lisp_Overlay* %52, null
  br i1 %tobool64, label %for.body.65, label %for.end.162

for.body.65:                                      ; preds = %for.cond.63
  %53 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next66 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %53, i32 0, i32 1
  %54 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next66, align 8
  store %struct.Lisp_Overlay* %54, %struct.Lisp_Overlay** %next, align 8
  %55 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %56 = bitcast %struct.Lisp_Overlay* %55 to i8*
  %call67 = call i64 @make_lisp_ptr(i8* %56, i32 1)
  store i64 %call67, i64* %overlay, align 8
  %57 = load i64, i64* %overlay, align 8
  %call68 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %57)
  %start69 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call68, i32 0, i32 2
  %58 = load i64, i64* %start69, align 8
  store i64 %58, i64* %beg, align 8
  %59 = load i64, i64* %overlay, align 8
  %call70 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %59)
  %end71 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call70, i32 0, i32 3
  %60 = load i64, i64* %end71, align 8
  store i64 %60, i64* %end, align 8
  %61 = load i64, i64* %beg, align 8
  %and72 = and i64 %61, 7
  %conv73 = trunc i64 %and72 to i32
  %cmp74 = icmp eq i32 %conv73, 1
  br i1 %cmp74, label %land.lhs.true.76, label %cond.false.82

land.lhs.true.76:                                 ; preds = %for.body.65
  %62 = load i64, i64* %beg, align 8
  %call77 = call i32 @XMISCTYPE(i64 %62)
  %cmp78 = icmp eq i32 %call77, 24236
  br i1 %cmp78, label %cond.true.80, label %cond.false.82

cond.true.80:                                     ; preds = %land.lhs.true.76
  %63 = load i64, i64* %beg, align 8
  %call81 = call i64 @marker_position(i64 %63)
  br label %cond.end.83

cond.false.82:                                    ; preds = %land.lhs.true.76, %for.body.65
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.83

cond.end.83:                                      ; preds = %64, %cond.true.80
  %cond84 = phi i64 [ %call81, %cond.true.80 ], [ 0, %64 ]
  %65 = load i64, i64* %pos.addr, align 8
  %cmp85 = icmp sgt i64 %cond84, %65
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %cond.end.83
  br label %for.end.162

if.end.88:                                        ; preds = %cond.end.83
  %66 = load i64, i64* %end, align 8
  %and89 = and i64 %66, 7
  %conv90 = trunc i64 %and89 to i32
  %cmp91 = icmp eq i32 %conv90, 1
  br i1 %cmp91, label %land.lhs.true.93, label %cond.false.99

land.lhs.true.93:                                 ; preds = %if.end.88
  %67 = load i64, i64* %end, align 8
  %call94 = call i32 @XMISCTYPE(i64 %67)
  %cmp95 = icmp eq i32 %call94, 24236
  br i1 %cmp95, label %cond.true.97, label %cond.false.99

cond.true.97:                                     ; preds = %land.lhs.true.93
  %68 = load i64, i64* %end, align 8
  %call98 = call i64 @marker_position(i64 %68)
  br label %cond.end.100

cond.false.99:                                    ; preds = %land.lhs.true.93, %if.end.88
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.100

cond.end.100:                                     ; preds = %69, %cond.true.97
  %cond101 = phi i64 [ %call98, %cond.true.97 ], [ 0, %69 ]
  %70 = load i64, i64* %pos.addr, align 8
  %cmp102 = icmp sle i64 %cond101, %70
  br i1 %cmp102, label %if.then.104, label %if.end.160

if.then.104:                                      ; preds = %cond.end.100
  %71 = load i64, i64* %end, align 8
  %and106 = and i64 %71, 7
  %conv107 = trunc i64 %and106 to i32
  %cmp108 = icmp eq i32 %conv107, 1
  br i1 %cmp108, label %land.lhs.true.110, label %cond.false.116

land.lhs.true.110:                                ; preds = %if.then.104
  %72 = load i64, i64* %end, align 8
  %call111 = call i32 @XMISCTYPE(i64 %72)
  %cmp112 = icmp eq i32 %call111, 24236
  br i1 %cmp112, label %cond.true.114, label %cond.false.116

cond.true.114:                                    ; preds = %land.lhs.true.110
  %73 = load i64, i64* %end, align 8
  %call115 = call i64 @marker_position(i64 %73)
  br label %cond.end.117

cond.false.116:                                   ; preds = %land.lhs.true.110, %if.then.104
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.117

cond.end.117:                                     ; preds = %74, %cond.true.114
  %cond118 = phi i64 [ %call115, %cond.true.114 ], [ 0, %74 ]
  store i64 %cond118, i64* %where105, align 8
  %75 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  %tobool121 = icmp ne %struct.Lisp_Overlay* %75, null
  br i1 %tobool121, label %if.then.122, label %if.else.124

if.then.122:                                      ; preds = %cond.end.117
  %76 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  %77 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  %next123 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %77, i32 0, i32 1
  store %struct.Lisp_Overlay* %76, %struct.Lisp_Overlay** %next123, align 8
  br label %if.end.125

if.else.124:                                      ; preds = %cond.end.117
  %78 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %79 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %78, %struct.Lisp_Overlay* %79)
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.124, %if.then.122
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %other_prev120, align 8
  %80 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %overlays_before126 = getelementptr inbounds %struct.buffer, %struct.buffer* %80, i32 0, i32 95
  %81 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before126, align 8
  store %struct.Lisp_Overlay* %81, %struct.Lisp_Overlay** %other119, align 8
  br label %for.cond.127

for.cond.127:                                     ; preds = %for.inc.151, %if.end.125
  %82 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other119, align 8
  %tobool128 = icmp ne %struct.Lisp_Overlay* %82, null
  br i1 %tobool128, label %for.body.129, label %for.end.153

for.body.129:                                     ; preds = %for.cond.127
  %83 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other119, align 8
  %84 = bitcast %struct.Lisp_Overlay* %83 to i8*
  %call131 = call i64 @make_lisp_ptr(i8* %84, i32 1)
  store i64 %call131, i64* %otheroverlay130, align 8
  %85 = load i64, i64* %otheroverlay130, align 8
  %call132 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %85)
  %end133 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call132, i32 0, i32 3
  %86 = load i64, i64* %end133, align 8
  store i64 %86, i64* %otherend, align 8
  %87 = load i64, i64* %otherend, align 8
  %and134 = and i64 %87, 7
  %conv135 = trunc i64 %and134 to i32
  %cmp136 = icmp eq i32 %conv135, 1
  br i1 %cmp136, label %land.lhs.true.138, label %cond.false.144

land.lhs.true.138:                                ; preds = %for.body.129
  %88 = load i64, i64* %otherend, align 8
  %call139 = call i32 @XMISCTYPE(i64 %88)
  %cmp140 = icmp eq i32 %call139, 24236
  br i1 %cmp140, label %cond.true.142, label %cond.false.144

cond.true.142:                                    ; preds = %land.lhs.true.138
  %89 = load i64, i64* %otherend, align 8
  %call143 = call i64 @marker_position(i64 %89)
  br label %cond.end.145

cond.false.144:                                   ; preds = %land.lhs.true.138, %for.body.129
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.145

cond.end.145:                                     ; preds = %90, %cond.true.142
  %cond146 = phi i64 [ %call143, %cond.true.142 ], [ 0, %90 ]
  %91 = load i64, i64* %where105, align 8
  %cmp147 = icmp sle i64 %cond146, %91
  br i1 %cmp147, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %cond.end.145
  br label %for.end.153

if.end.150:                                       ; preds = %cond.end.145
  br label %for.inc.151

for.inc.151:                                      ; preds = %if.end.150
  %92 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other119, align 8
  store %struct.Lisp_Overlay* %92, %struct.Lisp_Overlay** %other_prev120, align 8
  %93 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other119, align 8
  %next152 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %93, i32 0, i32 1
  %94 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next152, align 8
  store %struct.Lisp_Overlay* %94, %struct.Lisp_Overlay** %other119, align 8
  br label %for.cond.127

for.end.153:                                      ; preds = %if.then.149, %for.cond.127
  %95 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other119, align 8
  %96 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next154 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %96, i32 0, i32 1
  store %struct.Lisp_Overlay* %95, %struct.Lisp_Overlay** %next154, align 8
  %97 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other_prev120, align 8
  %tobool155 = icmp ne %struct.Lisp_Overlay* %97, null
  br i1 %tobool155, label %if.then.156, label %if.else.158

if.then.156:                                      ; preds = %for.end.153
  %98 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %99 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %other_prev120, align 8
  %next157 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %99, i32 0, i32 1
  store %struct.Lisp_Overlay* %98, %struct.Lisp_Overlay** %next157, align 8
  br label %if.end.159

if.else.158:                                      ; preds = %for.end.153
  %100 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %101 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %100, %struct.Lisp_Overlay* %101)
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.158, %if.then.156
  %102 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %prev, align 8
  store %struct.Lisp_Overlay* %102, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159, %cond.end.100
  br label %for.inc.161

for.inc.161:                                      ; preds = %if.end.160
  %103 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %103, %struct.Lisp_Overlay** %prev, align 8
  %104 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %104, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.63

for.end.162:                                      ; preds = %if.then.87, %for.cond.63
  %105 = load i64, i64* %pos.addr, align 8
  %106 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 97
  store i64 %105, i64* %overlay_center, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @adjust_overlays_for_insert(i64 %pos, i64 %length) #3 {
entry:
  %pos.addr = alloca i64, align 8
  %length.addr = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 97
  %1 = load i64, i64* %overlay_center, align 8
  %2 = load i64, i64* %pos.addr, align 8
  %cmp = icmp sge i64 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %length.addr, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center1 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 97
  %5 = load i64, i64* %overlay_center1, align 8
  %add = add nsw i64 %5, %3
  store i64 %add, i64* %overlay_center1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @adjust_overlays_for_delete(i64 %pos, i64 %length) #3 {
entry:
  %pos.addr = alloca i64, align 8
  %length.addr = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 97
  %1 = load i64, i64* %overlay_center, align 8
  %2 = load i64, i64* %pos.addr, align 8
  %cmp = icmp slt i64 %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end.7

if.else:                                          ; preds = %entry
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center1 = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 97
  %4 = load i64, i64* %overlay_center1, align 8
  %5 = load i64, i64* %pos.addr, align 8
  %sub = sub nsw i64 %4, %5
  %6 = load i64, i64* %length.addr, align 8
  %cmp2 = icmp sgt i64 %sub, %6
  br i1 %cmp2, label %if.then.3, label %if.else.6

if.then.3:                                        ; preds = %if.else
  %7 = load i64, i64* %length.addr, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center4 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 97
  %9 = load i64, i64* %overlay_center4, align 8
  %sub5 = sub nsw i64 %9, %7
  store i64 %sub5, i64* %overlay_center4, align 8
  br label %if.end

if.else.6:                                        ; preds = %if.else
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %11 = load i64, i64* %pos.addr, align 8
  call void @recenter_overlay_lists(%struct.buffer* %10, i64 %11)
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.3
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @fix_start_end_in_overlays(i64 %start, i64 %end) #3 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %overlay = alloca i64, align 8
  %before_list = alloca %struct.Lisp_Overlay*, align 8
  %after_list = alloca %struct.Lisp_Overlay*, align 8
  %beforep = alloca %struct.Lisp_Overlay*, align 8
  %afterp = alloca %struct.Lisp_Overlay*, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %parent = alloca %struct.Lisp_Overlay*, align 8
  %startpos = alloca i64, align 8
  %endpos = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %beforep, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %afterp, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %parent, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.72, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %4 = bitcast %struct.Lisp_Overlay* %3 to i8*
  %call = call i64 @make_lisp_ptr(i8* %4, i32 1)
  store i64 %call, i64* %overlay, align 8
  %5 = load i64, i64* %overlay, align 8
  %call1 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %5)
  %end2 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call1, i32 0, i32 3
  %6 = load i64, i64* %end2, align 8
  %and = and i64 %6, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %7 = load i64, i64* %overlay, align 8
  %call4 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %end5 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call4, i32 0, i32 3
  %8 = load i64, i64* %end5, align 8
  %call6 = call i32 @XMISCTYPE(i64 %8)
  %cmp7 = icmp eq i32 %call6, 24236
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* %overlay, align 8
  %call9 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %end10 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call9, i32 0, i32 3
  %10 = load i64, i64* %end10, align 8
  %call11 = call i64 @marker_position(i64 %10)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  %cond = phi i64 [ %call11, %cond.true ], [ 0, %11 ]
  store i64 %cond, i64* %endpos, align 8
  %12 = load i64, i64* %overlay, align 8
  %call12 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %12)
  %start13 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call12, i32 0, i32 2
  %13 = load i64, i64* %start13, align 8
  %and14 = and i64 %13, 7
  %conv15 = trunc i64 %and14 to i32
  %cmp16 = icmp eq i32 %conv15, 1
  br i1 %cmp16, label %land.lhs.true.18, label %cond.false.28

land.lhs.true.18:                                 ; preds = %cond.end
  %14 = load i64, i64* %overlay, align 8
  %call19 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %14)
  %start20 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call19, i32 0, i32 2
  %15 = load i64, i64* %start20, align 8
  %call21 = call i32 @XMISCTYPE(i64 %15)
  %cmp22 = icmp eq i32 %call21, 24236
  br i1 %cmp22, label %cond.true.24, label %cond.false.28

cond.true.24:                                     ; preds = %land.lhs.true.18
  %16 = load i64, i64* %overlay, align 8
  %call25 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %16)
  %start26 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call25, i32 0, i32 2
  %17 = load i64, i64* %start26, align 8
  %call27 = call i64 @marker_position(i64 %17)
  br label %cond.end.29

cond.false.28:                                    ; preds = %land.lhs.true.18, %cond.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.29

cond.end.29:                                      ; preds = %18, %cond.true.24
  %cond30 = phi i64 [ %call27, %cond.true.24 ], [ 0, %18 ]
  store i64 %cond30, i64* %startpos, align 8
  %19 = load i64, i64* %endpos, align 8
  %20 = load i64, i64* %startpos, align 8
  %cmp31 = icmp slt i64 %19, %20
  br i1 %cmp31, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.29
  %21 = load i64, i64* %endpos, align 8
  store i64 %21, i64* %startpos, align 8
  %22 = load i64, i64* %overlay, align 8
  %call33 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %22)
  %start34 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call33, i32 0, i32 2
  %23 = load i64, i64* %start34, align 8
  %24 = load i64, i64* %startpos, align 8
  %shl = shl i64 %24, 2
  %add = add i64 %shl, 2
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %call36 = call i64 @Fset_marker(i64 %23, i64 %add, i64 %call35)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.29
  %25 = load i64, i64* %endpos, align 8
  %26 = load i64, i64* %start.addr, align 8
  %cmp37 = icmp slt i64 %25, %26
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end
  br label %for.end

if.end.40:                                        ; preds = %if.end
  %27 = load i64, i64* %endpos, align 8
  %28 = load i64, i64* %end.addr, align 8
  %cmp41 = icmp slt i64 %27, %28
  br i1 %cmp41, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.40
  %29 = load i64, i64* %startpos, align 8
  %30 = load i64, i64* %start.addr, align 8
  %cmp43 = icmp sge i64 %29, %30
  br i1 %cmp43, label %land.lhs.true.45, label %if.else.70

land.lhs.true.45:                                 ; preds = %lor.lhs.false
  %31 = load i64, i64* %startpos, align 8
  %32 = load i64, i64* %end.addr, align 8
  %cmp46 = icmp slt i64 %31, %32
  br i1 %cmp46, label %if.then.48, label %if.else.70

if.then.48:                                       ; preds = %land.lhs.true.45, %if.end.40
  %33 = load i64, i64* %endpos, align 8
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 97
  %35 = load i64, i64* %overlay_center, align 8
  %cmp49 = icmp slt i64 %33, %35
  br i1 %cmp49, label %if.then.51, label %if.else.55

if.then.51:                                       ; preds = %if.then.48
  %36 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %tobool52 = icmp ne %struct.Lisp_Overlay* %36, null
  br i1 %tobool52, label %if.else, label %if.then.53

if.then.53:                                       ; preds = %if.then.51
  %37 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %37, %struct.Lisp_Overlay** %after_list, align 8
  br label %if.end.54

if.else:                                          ; preds = %if.then.51
  %38 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %39 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %39, i32 0, i32 1
  store %struct.Lisp_Overlay* %38, %struct.Lisp_Overlay** %next, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.else, %if.then.53
  %40 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %40, %struct.Lisp_Overlay** %afterp, align 8
  br label %if.end.61

if.else.55:                                       ; preds = %if.then.48
  %41 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %tobool56 = icmp ne %struct.Lisp_Overlay* %41, null
  br i1 %tobool56, label %if.else.58, label %if.then.57

if.then.57:                                       ; preds = %if.else.55
  %42 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %42, %struct.Lisp_Overlay** %before_list, align 8
  br label %if.end.60

if.else.58:                                       ; preds = %if.else.55
  %43 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %44 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %next59 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %44, i32 0, i32 1
  store %struct.Lisp_Overlay* %43, %struct.Lisp_Overlay** %next59, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.58, %if.then.57
  %45 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %45, %struct.Lisp_Overlay** %beforep, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end.54
  %46 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %tobool62 = icmp ne %struct.Lisp_Overlay* %46, null
  br i1 %tobool62, label %if.else.65, label %if.then.63

if.then.63:                                       ; preds = %if.end.61
  %47 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %48 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next64 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %48, i32 0, i32 1
  %49 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next64, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %47, %struct.Lisp_Overlay* %49)
  br label %if.end.68

if.else.65:                                       ; preds = %if.end.61
  %50 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next66 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %50, i32 0, i32 1
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next66, align 8
  %52 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %next67 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %52, i32 0, i32 1
  store %struct.Lisp_Overlay* %51, %struct.Lisp_Overlay** %next67, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.63
  %53 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next69 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %53, i32 0, i32 1
  %54 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next69, align 8
  store %struct.Lisp_Overlay* %54, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.72

if.else.70:                                       ; preds = %land.lhs.true.45, %lor.lhs.false
  %55 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %55, %struct.Lisp_Overlay** %parent, align 8
  %56 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %next71 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %56, i32 0, i32 1
  %57 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next71, align 8
  store %struct.Lisp_Overlay* %57, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.70, %if.end.68
  br label %for.cond

for.end:                                          ; preds = %if.then.39, %for.cond
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %parent, align 8
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 96
  %59 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %59, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.73

for.cond.73:                                      ; preds = %if.end.164, %for.end
  %60 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool74 = icmp ne %struct.Lisp_Overlay* %60, null
  br i1 %tobool74, label %for.body.75, label %for.end.165

for.body.75:                                      ; preds = %for.cond.73
  %61 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %62 = bitcast %struct.Lisp_Overlay* %61 to i8*
  %call76 = call i64 @make_lisp_ptr(i8* %62, i32 1)
  store i64 %call76, i64* %overlay, align 8
  %63 = load i64, i64* %overlay, align 8
  %call77 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %63)
  %start78 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call77, i32 0, i32 2
  %64 = load i64, i64* %start78, align 8
  %and79 = and i64 %64, 7
  %conv80 = trunc i64 %and79 to i32
  %cmp81 = icmp eq i32 %conv80, 1
  br i1 %cmp81, label %land.lhs.true.83, label %cond.false.93

land.lhs.true.83:                                 ; preds = %for.body.75
  %65 = load i64, i64* %overlay, align 8
  %call84 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %65)
  %start85 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call84, i32 0, i32 2
  %66 = load i64, i64* %start85, align 8
  %call86 = call i32 @XMISCTYPE(i64 %66)
  %cmp87 = icmp eq i32 %call86, 24236
  br i1 %cmp87, label %cond.true.89, label %cond.false.93

cond.true.89:                                     ; preds = %land.lhs.true.83
  %67 = load i64, i64* %overlay, align 8
  %call90 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %67)
  %start91 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call90, i32 0, i32 2
  %68 = load i64, i64* %start91, align 8
  %call92 = call i64 @marker_position(i64 %68)
  br label %cond.end.94

cond.false.93:                                    ; preds = %land.lhs.true.83, %for.body.75
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.94

cond.end.94:                                      ; preds = %69, %cond.true.89
  %cond95 = phi i64 [ %call92, %cond.true.89 ], [ 0, %69 ]
  store i64 %cond95, i64* %startpos, align 8
  %70 = load i64, i64* %overlay, align 8
  %call96 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %70)
  %end97 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call96, i32 0, i32 3
  %71 = load i64, i64* %end97, align 8
  %and98 = and i64 %71, 7
  %conv99 = trunc i64 %and98 to i32
  %cmp100 = icmp eq i32 %conv99, 1
  br i1 %cmp100, label %land.lhs.true.102, label %cond.false.112

land.lhs.true.102:                                ; preds = %cond.end.94
  %72 = load i64, i64* %overlay, align 8
  %call103 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %72)
  %end104 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call103, i32 0, i32 3
  %73 = load i64, i64* %end104, align 8
  %call105 = call i32 @XMISCTYPE(i64 %73)
  %cmp106 = icmp eq i32 %call105, 24236
  br i1 %cmp106, label %cond.true.108, label %cond.false.112

cond.true.108:                                    ; preds = %land.lhs.true.102
  %74 = load i64, i64* %overlay, align 8
  %call109 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %74)
  %end110 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call109, i32 0, i32 3
  %75 = load i64, i64* %end110, align 8
  %call111 = call i64 @marker_position(i64 %75)
  br label %cond.end.113

cond.false.112:                                   ; preds = %land.lhs.true.102, %cond.end.94
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.113

cond.end.113:                                     ; preds = %76, %cond.true.108
  %cond114 = phi i64 [ %call111, %cond.true.108 ], [ 0, %76 ]
  store i64 %cond114, i64* %endpos, align 8
  %77 = load i64, i64* %endpos, align 8
  %78 = load i64, i64* %startpos, align 8
  %cmp115 = icmp slt i64 %77, %78
  br i1 %cmp115, label %if.then.117, label %if.end.124

if.then.117:                                      ; preds = %cond.end.113
  %79 = load i64, i64* %endpos, align 8
  store i64 %79, i64* %startpos, align 8
  %80 = load i64, i64* %overlay, align 8
  %call118 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %80)
  %start119 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call118, i32 0, i32 2
  %81 = load i64, i64* %start119, align 8
  %82 = load i64, i64* %startpos, align 8
  %shl120 = shl i64 %82, 2
  %add121 = add i64 %shl120, 2
  %call122 = call i64 @builtin_lisp_symbol(i32 0)
  %call123 = call i64 @Fset_marker(i64 %81, i64 %add121, i64 %call122)
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.117, %cond.end.113
  %83 = load i64, i64* %startpos, align 8
  %84 = load i64, i64* %end.addr, align 8
  %cmp125 = icmp sge i64 %83, %84
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.end.124
  br label %for.end.165

if.end.128:                                       ; preds = %if.end.124
  %85 = load i64, i64* %startpos, align 8
  %86 = load i64, i64* %start.addr, align 8
  %cmp129 = icmp sge i64 %85, %86
  br i1 %cmp129, label %if.then.137, label %lor.lhs.false.131

lor.lhs.false.131:                                ; preds = %if.end.128
  %87 = load i64, i64* %endpos, align 8
  %88 = load i64, i64* %start.addr, align 8
  %cmp132 = icmp sge i64 %87, %88
  br i1 %cmp132, label %land.lhs.true.134, label %if.else.162

land.lhs.true.134:                                ; preds = %lor.lhs.false.131
  %89 = load i64, i64* %endpos, align 8
  %90 = load i64, i64* %end.addr, align 8
  %cmp135 = icmp slt i64 %89, %90
  br i1 %cmp135, label %if.then.137, label %if.else.162

if.then.137:                                      ; preds = %land.lhs.true.134, %if.end.128
  %91 = load i64, i64* %endpos, align 8
  %92 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center138 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 97
  %93 = load i64, i64* %overlay_center138, align 8
  %cmp139 = icmp slt i64 %91, %93
  br i1 %cmp139, label %if.then.141, label %if.else.147

if.then.141:                                      ; preds = %if.then.137
  %94 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %tobool142 = icmp ne %struct.Lisp_Overlay* %94, null
  br i1 %tobool142, label %if.else.144, label %if.then.143

if.then.143:                                      ; preds = %if.then.141
  %95 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %95, %struct.Lisp_Overlay** %after_list, align 8
  br label %if.end.146

if.else.144:                                      ; preds = %if.then.141
  %96 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %97 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %next145 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %97, i32 0, i32 1
  store %struct.Lisp_Overlay* %96, %struct.Lisp_Overlay** %next145, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.144, %if.then.143
  %98 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %98, %struct.Lisp_Overlay** %afterp, align 8
  br label %if.end.153

if.else.147:                                      ; preds = %if.then.137
  %99 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %tobool148 = icmp ne %struct.Lisp_Overlay* %99, null
  br i1 %tobool148, label %if.else.150, label %if.then.149

if.then.149:                                      ; preds = %if.else.147
  %100 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %100, %struct.Lisp_Overlay** %before_list, align 8
  br label %if.end.152

if.else.150:                                      ; preds = %if.else.147
  %101 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %102 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %next151 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %102, i32 0, i32 1
  store %struct.Lisp_Overlay* %101, %struct.Lisp_Overlay** %next151, align 8
  br label %if.end.152

if.end.152:                                       ; preds = %if.else.150, %if.then.149
  %103 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %103, %struct.Lisp_Overlay** %beforep, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %if.end.146
  %104 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %tobool154 = icmp ne %struct.Lisp_Overlay* %104, null
  br i1 %tobool154, label %if.else.157, label %if.then.155

if.then.155:                                      ; preds = %if.end.153
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %106 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next156 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %106, i32 0, i32 1
  %107 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next156, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %105, %struct.Lisp_Overlay* %107)
  br label %if.end.160

if.else.157:                                      ; preds = %if.end.153
  %108 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next158 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %108, i32 0, i32 1
  %109 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next158, align 8
  %110 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %next159 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %110, i32 0, i32 1
  store %struct.Lisp_Overlay* %109, %struct.Lisp_Overlay** %next159, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.else.157, %if.then.155
  %111 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next161 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %111, i32 0, i32 1
  %112 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next161, align 8
  store %struct.Lisp_Overlay* %112, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.164

if.else.162:                                      ; preds = %land.lhs.true.134, %lor.lhs.false.131
  %113 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %113, %struct.Lisp_Overlay** %parent, align 8
  %114 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %next163 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %114, i32 0, i32 1
  %115 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next163, align 8
  store %struct.Lisp_Overlay* %115, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.else.162, %if.end.160
  br label %for.cond.73

for.end.165:                                      ; preds = %if.then.127, %for.cond.73
  %116 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %tobool166 = icmp ne %struct.Lisp_Overlay* %116, null
  br i1 %tobool166, label %if.then.167, label %if.end.170

if.then.167:                                      ; preds = %for.end.165
  %117 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before168 = getelementptr inbounds %struct.buffer, %struct.buffer* %117, i32 0, i32 95
  %118 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before168, align 8
  %119 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %beforep, align 8
  %next169 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %119, i32 0, i32 1
  store %struct.Lisp_Overlay* %118, %struct.Lisp_Overlay** %next169, align 8
  %120 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %121 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %before_list, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %120, %struct.Lisp_Overlay* %121)
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.167, %for.end.165
  %122 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %tobool171 = icmp ne %struct.Lisp_Overlay* %122, null
  br i1 %tobool171, label %if.then.172, label %if.end.175

if.then.172:                                      ; preds = %if.end.170
  %123 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after173 = getelementptr inbounds %struct.buffer, %struct.buffer* %123, i32 0, i32 96
  %124 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after173, align 8
  %125 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %afterp, align 8
  %next174 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %125, i32 0, i32 1
  store %struct.Lisp_Overlay* %124, %struct.Lisp_Overlay** %next174, align 8
  %126 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %127 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %after_list, align 8
  call void @set_buffer_overlays_after(%struct.buffer* %126, %struct.Lisp_Overlay* %127)
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.172, %if.end.170
  %128 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %129 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center176 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 97
  %130 = load i64, i64* %overlay_center176, align 8
  call void @recenter_overlay_lists(%struct.buffer* %128, i64 %130)
  ret void
}

; Function Attrs: nounwind uwtable
define void @fix_overlays_before(%struct.buffer* %bp, i64 %prev, i64 %pos) #3 {
entry:
  %bp.addr = alloca %struct.buffer*, align 8
  %prev.addr = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %parent = alloca %struct.Lisp_Overlay*, align 8
  %right_pair = alloca %struct.Lisp_Overlay*, align 8
  %tem = alloca i64, align 8
  %end = alloca i64, align 8
  %found = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %bp, %struct.buffer** %bp.addr, align 8
  store i64 %prev, i64* %prev.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %bp.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %parent, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %4 = bitcast %struct.Lisp_Overlay* %3 to i8*
  %call = call i64 @make_lisp_ptr(i8* %4, i32 1)
  store i64 %call, i64* %tem, align 8
  %5 = load i64, i64* %tem, align 8
  %call1 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %5)
  %end2 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call1, i32 0, i32 3
  %6 = load i64, i64* %end2, align 8
  %and = and i64 %6, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %land.rhs
  %7 = load i64, i64* %tem, align 8
  %call4 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %7)
  %end5 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call4, i32 0, i32 3
  %8 = load i64, i64* %end5, align 8
  %call6 = call i32 @XMISCTYPE(i64 %8)
  %cmp7 = icmp eq i32 %call6, 24236
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* %tem, align 8
  %call9 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %9)
  %end10 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call9, i32 0, i32 3
  %10 = load i64, i64* %end10, align 8
  %call11 = call i64 @marker_position(i64 %10)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %land.rhs
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  %cond = phi i64 [ %call11, %cond.true ], [ 0, %11 ]
  store i64 %cond, i64* %end, align 8
  %12 = load i64, i64* %pos.addr, align 8
  %cmp12 = icmp sge i64 %cond, %12
  br label %land.end

land.end:                                         ; preds = %cond.end, %while.cond
  %13 = phi i1 [ false, %while.cond ], [ %cmp12, %cond.end ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %14 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %14, %struct.Lisp_Overlay** %parent, align 8
  %15 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %15, i32 0, i32 1
  %16 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %16, %struct.Lisp_Overlay** %tail, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %17 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool14 = icmp ne %struct.Lisp_Overlay* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %while.end
  %18 = load i64, i64* %end, align 8
  %19 = load i64, i64* %prev.addr, align 8
  %cmp15 = icmp slt i64 %18, %19
  br i1 %cmp15, label %if.then, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false
  %20 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next18 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %20, i32 0, i32 1
  %21 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next18, align 8
  %tobool19 = icmp ne %struct.Lisp_Overlay* %21, null
  br i1 %tobool19, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.17, %lor.lhs.false, %while.end
  br label %while.end.65

if.end:                                           ; preds = %lor.lhs.false.17
  %22 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  store %struct.Lisp_Overlay* %22, %struct.Lisp_Overlay** %right_pair, align 8
  %23 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %23, %struct.Lisp_Overlay** %parent, align 8
  %24 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next20 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %24, i32 0, i32 1
  %25 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next20, align 8
  store %struct.Lisp_Overlay* %25, %struct.Lisp_Overlay** %tail, align 8
  br label %while.cond.21

while.cond.21:                                    ; preds = %if.end.64, %if.end
  %26 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool22 = icmp ne %struct.Lisp_Overlay* %26, null
  br i1 %tobool22, label %while.body.23, label %while.end.65

while.body.23:                                    ; preds = %while.cond.21
  %27 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %28 = bitcast %struct.Lisp_Overlay* %27 to i8*
  %call24 = call i64 @make_lisp_ptr(i8* %28, i32 1)
  store i64 %call24, i64* %tem, align 8
  %29 = load i64, i64* %tem, align 8
  %call25 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %29)
  %end26 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call25, i32 0, i32 3
  %30 = load i64, i64* %end26, align 8
  %and27 = and i64 %30, 7
  %conv28 = trunc i64 %and27 to i32
  %cmp29 = icmp eq i32 %conv28, 1
  br i1 %cmp29, label %land.lhs.true.31, label %cond.false.41

land.lhs.true.31:                                 ; preds = %while.body.23
  %31 = load i64, i64* %tem, align 8
  %call32 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %31)
  %end33 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call32, i32 0, i32 3
  %32 = load i64, i64* %end33, align 8
  %call34 = call i32 @XMISCTYPE(i64 %32)
  %cmp35 = icmp eq i32 %call34, 24236
  br i1 %cmp35, label %cond.true.37, label %cond.false.41

cond.true.37:                                     ; preds = %land.lhs.true.31
  %33 = load i64, i64* %tem, align 8
  %call38 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %33)
  %end39 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call38, i32 0, i32 3
  %34 = load i64, i64* %end39, align 8
  %call40 = call i64 @marker_position(i64 %34)
  br label %cond.end.42

cond.false.41:                                    ; preds = %land.lhs.true.31, %while.body.23
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.42

cond.end.42:                                      ; preds = %35, %cond.true.37
  %cond43 = phi i64 [ %call40, %cond.true.37 ], [ 0, %35 ]
  store i64 %cond43, i64* %end, align 8
  %36 = load i64, i64* %end, align 8
  %37 = load i64, i64* %pos.addr, align 8
  %cmp44 = icmp eq i64 %36, %37
  br i1 %cmp44, label %if.then.46, label %if.else.57

if.then.46:                                       ; preds = %cond.end.42
  %38 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %38, %struct.Lisp_Overlay** %found, align 8
  %39 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %found, align 8
  %next47 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %39, i32 0, i32 1
  %40 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next47, align 8
  store %struct.Lisp_Overlay* %40, %struct.Lisp_Overlay** %tail, align 8
  %41 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %42 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %parent, align 8
  %next48 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %42, i32 0, i32 1
  store %struct.Lisp_Overlay* %41, %struct.Lisp_Overlay** %next48, align 8
  %43 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %right_pair, align 8
  %tobool49 = icmp ne %struct.Lisp_Overlay* %43, null
  br i1 %tobool49, label %if.else, label %if.then.50

if.then.50:                                       ; preds = %if.then.46
  %44 = load %struct.buffer*, %struct.buffer** %bp.addr, align 8
  %overlays_before51 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 95
  %45 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before51, align 8
  %46 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %found, align 8
  %next52 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %46, i32 0, i32 1
  store %struct.Lisp_Overlay* %45, %struct.Lisp_Overlay** %next52, align 8
  %47 = load %struct.buffer*, %struct.buffer** %bp.addr, align 8
  %48 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %found, align 8
  call void @set_buffer_overlays_before(%struct.buffer* %47, %struct.Lisp_Overlay* %48)
  br label %if.end.56

if.else:                                          ; preds = %if.then.46
  %49 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %right_pair, align 8
  %next53 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %49, i32 0, i32 1
  %50 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next53, align 8
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %found, align 8
  %next54 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %51, i32 0, i32 1
  store %struct.Lisp_Overlay* %50, %struct.Lisp_Overlay** %next54, align 8
  %52 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %found, align 8
  %53 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %right_pair, align 8
  %next55 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %53, i32 0, i32 1
  store %struct.Lisp_Overlay* %52, %struct.Lisp_Overlay** %next55, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.else, %if.then.50
  br label %if.end.64

if.else.57:                                       ; preds = %cond.end.42
  %54 = load i64, i64* %end, align 8
  %55 = load i64, i64* %prev.addr, align 8
  %cmp58 = icmp eq i64 %54, %55
  br i1 %cmp58, label %if.then.60, label %if.else.62

if.then.60:                                       ; preds = %if.else.57
  %56 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %56, %struct.Lisp_Overlay** %parent, align 8
  %57 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next61 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %57, i32 0, i32 1
  %58 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next61, align 8
  store %struct.Lisp_Overlay* %58, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end.63

if.else.62:                                       ; preds = %if.else.57
  br label %while.end.65

if.end.63:                                        ; preds = %if.then.60
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.end.56
  br label %while.cond.21

while.end.65:                                     ; preds = %if.then, %if.else.62, %while.cond.21
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Foverlayp(i64 %object) #3 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @OVERLAYP(i64 %0)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fmake_overlay(i64 %beg, i64 %end, i64 %buffer, i64 %front_advance, i64 %rear_advance) #3 {
entry:
  %beg.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %front_advance.addr = alloca i64, align 8
  %rear_advance.addr = alloca i64, align 8
  %overlay = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %temp = alloca i64, align 8
  store i64 %beg, i64* %beg.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  store i64 %front_advance, i64* %front_advance.addr, align 8
  store i64 %rear_advance, i64* %rear_advance.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %2 = bitcast %struct.buffer* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %buffer.addr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i64, i64* %beg.addr, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 1
  br i1 %cmp2, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.end
  %5 = load i64, i64* %beg.addr, align 8
  %call4 = call i32 @XMISCTYPE(i64 %5)
  %cmp5 = icmp eq i32 %call4, 24236
  br i1 %cmp5, label %land.lhs.true.7, label %if.end.12

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %6 = load i64, i64* %beg.addr, align 8
  %call8 = call i64 @Fmarker_buffer(i64 %6)
  %7 = load i64, i64* %buffer.addr, align 8
  %cmp9 = icmp eq i64 %call8, %7
  br i1 %cmp9, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %land.lhs.true.7
  %8 = load i64, i64* %beg.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i32 0, i32 0), i64 %8) #8
  unreachable

if.end.12:                                        ; preds = %land.lhs.true.7, %land.lhs.true, %if.end
  %9 = load i64, i64* %end.addr, align 8
  %and13 = and i64 %9, 7
  %conv14 = trunc i64 %and13 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true.17, label %if.end.26

land.lhs.true.17:                                 ; preds = %if.end.12
  %10 = load i64, i64* %end.addr, align 8
  %call18 = call i32 @XMISCTYPE(i64 %10)
  %cmp19 = icmp eq i32 %call18, 24236
  br i1 %cmp19, label %land.lhs.true.21, label %if.end.26

land.lhs.true.21:                                 ; preds = %land.lhs.true.17
  %11 = load i64, i64* %end.addr, align 8
  %call22 = call i64 @Fmarker_buffer(i64 %11)
  %12 = load i64, i64* %buffer.addr, align 8
  %cmp23 = icmp eq i64 %call22, %12
  br i1 %cmp23, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.21
  %13 = load i64, i64* %end.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i32 0, i32 0), i64 %13) #8
  unreachable

if.end.26:                                        ; preds = %land.lhs.true.21, %land.lhs.true.17, %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.end.26
  %14 = load i64, i64* %beg.addr, align 8
  %and27 = and i64 %14, 7
  %conv28 = trunc i64 %and27 to i32
  %cmp29 = icmp eq i32 %conv28, 1
  br i1 %cmp29, label %land.lhs.true.31, label %if.else.38

land.lhs.true.31:                                 ; preds = %do.body
  %15 = load i64, i64* %beg.addr, align 8
  %call32 = call i32 @XMISCTYPE(i64 %15)
  %cmp33 = icmp eq i32 %call32, 24236
  br i1 %cmp33, label %if.then.35, label %if.else.38

if.then.35:                                       ; preds = %land.lhs.true.31
  %16 = load i64, i64* %beg.addr, align 8
  %call36 = call i64 @marker_position(i64 %16)
  %call37 = call i64 @make_natnum(i64 %call36)
  store i64 %call37, i64* %beg.addr, align 8
  br label %if.end.45

if.else.38:                                       ; preds = %land.lhs.true.31, %do.body
  %17 = load i64, i64* %beg.addr, align 8
  %and39 = and i64 %17, 7
  %conv40 = trunc i64 %and39 to i32
  %and41 = and i32 %conv40, -5
  %cmp42 = icmp eq i32 %and41, 2
  br i1 %cmp42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.38
  br label %cond.end

cond.false:                                       ; preds = %if.else.38
  %call44 = call i64 @builtin_lisp_symbol(i32 558)
  %18 = load i64, i64* %beg.addr, align 8
  %19 = call i64 @wrong_type_argument(i64 %call44, i64 %18) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %20, %cond.true
  br label %if.end.45

if.end.45:                                        ; preds = %cond.end, %if.then.35
  br label %do.end

do.end:                                           ; preds = %if.end.45
  br label %do.body.46

do.body.46:                                       ; preds = %do.end
  %21 = load i64, i64* %end.addr, align 8
  %and47 = and i64 %21, 7
  %conv48 = trunc i64 %and47 to i32
  %cmp49 = icmp eq i32 %conv48, 1
  br i1 %cmp49, label %land.lhs.true.51, label %if.else.58

land.lhs.true.51:                                 ; preds = %do.body.46
  %22 = load i64, i64* %end.addr, align 8
  %call52 = call i32 @XMISCTYPE(i64 %22)
  %cmp53 = icmp eq i32 %call52, 24236
  br i1 %cmp53, label %if.then.55, label %if.else.58

if.then.55:                                       ; preds = %land.lhs.true.51
  %23 = load i64, i64* %end.addr, align 8
  %call56 = call i64 @marker_position(i64 %23)
  %call57 = call i64 @make_natnum(i64 %call56)
  store i64 %call57, i64* %end.addr, align 8
  br label %if.end.68

if.else.58:                                       ; preds = %land.lhs.true.51, %do.body.46
  %24 = load i64, i64* %end.addr, align 8
  %and59 = and i64 %24, 7
  %conv60 = trunc i64 %and59 to i32
  %and61 = and i32 %conv60, -5
  %cmp62 = icmp eq i32 %and61, 2
  br i1 %cmp62, label %cond.true.64, label %cond.false.65

cond.true.64:                                     ; preds = %if.else.58
  br label %cond.end.67

cond.false.65:                                    ; preds = %if.else.58
  %call66 = call i64 @builtin_lisp_symbol(i32 558)
  %25 = load i64, i64* %end.addr, align 8
  %26 = call i64 @wrong_type_argument(i64 %call66, i64 %25) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.67

cond.end.67:                                      ; preds = %27, %cond.true.64
  br label %if.end.68

if.end.68:                                        ; preds = %cond.end.67, %if.then.55
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  %28 = load i64, i64* %beg.addr, align 8
  %shr = ashr i64 %28, 2
  %29 = load i64, i64* %end.addr, align 8
  %shr70 = ashr i64 %29, 2
  %cmp71 = icmp sgt i64 %shr, %shr70
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %do.end.69
  %30 = load i64, i64* %beg.addr, align 8
  store i64 %30, i64* %temp, align 8
  %31 = load i64, i64* %end.addr, align 8
  store i64 %31, i64* %beg.addr, align 8
  %32 = load i64, i64* %temp, align 8
  store i64 %32, i64* %end.addr, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.73, %do.end.69
  %33 = load i64, i64* %buffer.addr, align 8
  %call75 = call %struct.buffer* @XBUFFER(i64 %33)
  store %struct.buffer* %call75, %struct.buffer** %b, align 8
  %call76 = call i64 @Fmake_marker()
  %34 = load i64, i64* %beg.addr, align 8
  %35 = load i64, i64* %buffer.addr, align 8
  %call77 = call i64 @Fset_marker(i64 %call76, i64 %34, i64 %35)
  store i64 %call77, i64* %beg.addr, align 8
  %call78 = call i64 @Fmake_marker()
  %36 = load i64, i64* %end.addr, align 8
  %37 = load i64, i64* %buffer.addr, align 8
  %call79 = call i64 @Fset_marker(i64 %call78, i64 %36, i64 %37)
  store i64 %call79, i64* %end.addr, align 8
  %38 = load i64, i64* %front_advance.addr, align 8
  %call80 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp81 = icmp eq i64 %38, %call80
  br i1 %cmp81, label %if.end.85, label %if.then.83

if.then.83:                                       ; preds = %if.end.74
  %39 = load i64, i64* %beg.addr, align 8
  %call84 = call %struct.Lisp_Marker* @XMARKER(i64 %39)
  %40 = bitcast %struct.Lisp_Marker* %call84 to i32*
  %bf.load = load i32, i32* %40, align 8
  %bf.clear = and i32 %bf.load, 2147483647
  %bf.set = or i32 %bf.clear, -2147483648
  store i32 %bf.set, i32* %40, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.83, %if.end.74
  %41 = load i64, i64* %rear_advance.addr, align 8
  %call86 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp87 = icmp eq i64 %41, %call86
  br i1 %cmp87, label %if.end.94, label %if.then.89

if.then.89:                                       ; preds = %if.end.85
  %42 = load i64, i64* %end.addr, align 8
  %call90 = call %struct.Lisp_Marker* @XMARKER(i64 %42)
  %43 = bitcast %struct.Lisp_Marker* %call90 to i32*
  %bf.load91 = load i32, i32* %43, align 8
  %bf.clear92 = and i32 %bf.load91, 2147483647
  %bf.set93 = or i32 %bf.clear92, -2147483648
  store i32 %bf.set93, i32* %43, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.89, %if.end.85
  %44 = load i64, i64* %beg.addr, align 8
  %45 = load i64, i64* %end.addr, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %call96 = call i64 @build_overlay(i64 %44, i64 %45, i64 %call95)
  store i64 %call96, i64* %overlay, align 8
  %46 = load i64, i64* %overlay, align 8
  %call97 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %46)
  %end98 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call97, i32 0, i32 3
  %47 = load i64, i64* %end98, align 8
  store i64 %47, i64* %end.addr, align 8
  %48 = load i64, i64* %end.addr, align 8
  %and99 = and i64 %48, 7
  %conv100 = trunc i64 %and99 to i32
  %cmp101 = icmp eq i32 %conv100, 1
  br i1 %cmp101, label %land.lhs.true.103, label %cond.false.109

land.lhs.true.103:                                ; preds = %if.end.94
  %49 = load i64, i64* %end.addr, align 8
  %call104 = call i32 @XMISCTYPE(i64 %49)
  %cmp105 = icmp eq i32 %call104, 24236
  br i1 %cmp105, label %cond.true.107, label %cond.false.109

cond.true.107:                                    ; preds = %land.lhs.true.103
  %50 = load i64, i64* %end.addr, align 8
  %call108 = call i64 @marker_position(i64 %50)
  br label %cond.end.110

cond.false.109:                                   ; preds = %land.lhs.true.103, %if.end.94
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.110

cond.end.110:                                     ; preds = %51, %cond.true.107
  %cond = phi i64 [ %call108, %cond.true.107 ], [ 0, %51 ]
  %52 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 97
  %53 = load i64, i64* %overlay_center, align 8
  %cmp111 = icmp slt i64 %cond, %53
  br i1 %cmp111, label %if.then.113, label %if.else.116

if.then.113:                                      ; preds = %cond.end.110
  %54 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 96
  %55 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  %56 = load i64, i64* %overlay, align 8
  %call114 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %56)
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call114, i32 0, i32 1
  store %struct.Lisp_Overlay* %55, %struct.Lisp_Overlay** %next, align 8
  %57 = load %struct.buffer*, %struct.buffer** %b, align 8
  %58 = load i64, i64* %overlay, align 8
  %call115 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %58)
  call void @set_buffer_overlays_after(%struct.buffer* %57, %struct.Lisp_Overlay* %call115)
  br label %if.end.120

if.else.116:                                      ; preds = %cond.end.110
  %59 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 95
  %60 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  %61 = load i64, i64* %overlay, align 8
  %call117 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %61)
  %next118 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call117, i32 0, i32 1
  store %struct.Lisp_Overlay* %60, %struct.Lisp_Overlay** %next118, align 8
  %62 = load %struct.buffer*, %struct.buffer** %b, align 8
  %63 = load i64, i64* %overlay, align 8
  %call119 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %63)
  call void @set_buffer_overlays_before(%struct.buffer* %62, %struct.Lisp_Overlay* %call119)
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.116, %if.then.113
  %64 = load %struct.buffer*, %struct.buffer** %b, align 8
  %65 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlay_center121 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 97
  %66 = load i64, i64* %overlay_center121, align 8
  call void @recenter_overlay_lists(%struct.buffer* %64, i64 %66)
  %67 = load i64, i64* %overlay, align 8
  ret i64 %67
}

declare i64 @Fmarker_buffer(i64) #1

; Function Attrs: noreturn
declare void @signal_error(i8*, i64) #2

declare i64 @build_overlay(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fmove_overlay(i64 %overlay, i64 %beg, i64 %end, i64 %buffer) #3 {
entry:
  %retval = alloca i64, align 8
  %overlay.addr = alloca i64, align 8
  %beg.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %ob = alloca %struct.buffer*, align 8
  %obuffer = alloca i64, align 8
  %count = alloca i64, align 8
  %n_beg = alloca i64, align 8
  %n_end = alloca i64, align 8
  %o_beg = alloca i64, align 8
  %o_end = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  store i64 %beg, i64* %beg.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  store %struct.buffer* null, %struct.buffer** %ob, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %buffer.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %overlay.addr, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %2)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 2
  %3 = load i64, i64* %start, align 8
  %call3 = call i64 @Fmarker_buffer(i64 %3)
  store i64 %call3, i64* %buffer.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %buffer.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %4, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %6 = bitcast %struct.buffer* %5 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %6, i32 5)
  store i64 %call7, i64* %buffer.addr, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end
  %7 = load i64, i64* %buffer.addr, align 8
  call void @CHECK_BUFFER(i64 %7)
  %8 = load i64, i64* %buffer.addr, align 8
  %call9 = call i64 @Fbuffer_live_p(i64 %8)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.28, i32 0, i32 0)) #8
  unreachable

if.end.13:                                        ; preds = %if.end.8
  %9 = load i64, i64* %beg.addr, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp14 = icmp eq i32 %conv, 1
  br i1 %cmp14, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %if.end.13
  %10 = load i64, i64* %beg.addr, align 8
  %call16 = call i32 @XMISCTYPE(i64 %10)
  %cmp17 = icmp eq i32 %call16, 24236
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.24

land.lhs.true.19:                                 ; preds = %land.lhs.true
  %11 = load i64, i64* %beg.addr, align 8
  %call20 = call i64 @Fmarker_buffer(i64 %11)
  %12 = load i64, i64* %buffer.addr, align 8
  %cmp21 = icmp eq i64 %call20, %12
  br i1 %cmp21, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %land.lhs.true.19
  %13 = load i64, i64* %beg.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i32 0, i32 0), i64 %13) #8
  unreachable

if.end.24:                                        ; preds = %land.lhs.true.19, %land.lhs.true, %if.end.13
  %14 = load i64, i64* %end.addr, align 8
  %and25 = and i64 %14, 7
  %conv26 = trunc i64 %and25 to i32
  %cmp27 = icmp eq i32 %conv26, 1
  br i1 %cmp27, label %land.lhs.true.29, label %if.end.38

land.lhs.true.29:                                 ; preds = %if.end.24
  %15 = load i64, i64* %end.addr, align 8
  %call30 = call i32 @XMISCTYPE(i64 %15)
  %cmp31 = icmp eq i32 %call30, 24236
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.38

land.lhs.true.33:                                 ; preds = %land.lhs.true.29
  %16 = load i64, i64* %end.addr, align 8
  %call34 = call i64 @Fmarker_buffer(i64 %16)
  %17 = load i64, i64* %buffer.addr, align 8
  %cmp35 = icmp eq i64 %call34, %17
  br i1 %cmp35, label %if.end.38, label %if.then.37

if.then.37:                                       ; preds = %land.lhs.true.33
  %18 = load i64, i64* %end.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i32 0, i32 0), i64 %18) #8
  unreachable

if.end.38:                                        ; preds = %land.lhs.true.33, %land.lhs.true.29, %if.end.24
  br label %do.body

do.body:                                          ; preds = %if.end.38
  %19 = load i64, i64* %beg.addr, align 8
  %and39 = and i64 %19, 7
  %conv40 = trunc i64 %and39 to i32
  %cmp41 = icmp eq i32 %conv40, 1
  br i1 %cmp41, label %land.lhs.true.43, label %if.else

land.lhs.true.43:                                 ; preds = %do.body
  %20 = load i64, i64* %beg.addr, align 8
  %call44 = call i32 @XMISCTYPE(i64 %20)
  %cmp45 = icmp eq i32 %call44, 24236
  br i1 %cmp45, label %if.then.47, label %if.else

if.then.47:                                       ; preds = %land.lhs.true.43
  %21 = load i64, i64* %beg.addr, align 8
  %call48 = call i64 @marker_position(i64 %21)
  %call49 = call i64 @make_natnum(i64 %call48)
  store i64 %call49, i64* %beg.addr, align 8
  br label %if.end.56

if.else:                                          ; preds = %land.lhs.true.43, %do.body
  %22 = load i64, i64* %beg.addr, align 8
  %and50 = and i64 %22, 7
  %conv51 = trunc i64 %and50 to i32
  %and52 = and i32 %conv51, -5
  %cmp53 = icmp eq i32 %and52, 2
  br i1 %cmp53, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call55 = call i64 @builtin_lisp_symbol(i32 558)
  %23 = load i64, i64* %beg.addr, align 8
  %24 = call i64 @wrong_type_argument(i64 %call55, i64 %23) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %25, %cond.true
  br label %if.end.56

if.end.56:                                        ; preds = %cond.end, %if.then.47
  br label %do.end

do.end:                                           ; preds = %if.end.56
  br label %do.body.57

do.body.57:                                       ; preds = %do.end
  %26 = load i64, i64* %end.addr, align 8
  %and58 = and i64 %26, 7
  %conv59 = trunc i64 %and58 to i32
  %cmp60 = icmp eq i32 %conv59, 1
  br i1 %cmp60, label %land.lhs.true.62, label %if.else.69

land.lhs.true.62:                                 ; preds = %do.body.57
  %27 = load i64, i64* %end.addr, align 8
  %call63 = call i32 @XMISCTYPE(i64 %27)
  %cmp64 = icmp eq i32 %call63, 24236
  br i1 %cmp64, label %if.then.66, label %if.else.69

if.then.66:                                       ; preds = %land.lhs.true.62
  %28 = load i64, i64* %end.addr, align 8
  %call67 = call i64 @marker_position(i64 %28)
  %call68 = call i64 @make_natnum(i64 %call67)
  store i64 %call68, i64* %end.addr, align 8
  br label %if.end.79

if.else.69:                                       ; preds = %land.lhs.true.62, %do.body.57
  %29 = load i64, i64* %end.addr, align 8
  %and70 = and i64 %29, 7
  %conv71 = trunc i64 %and70 to i32
  %and72 = and i32 %conv71, -5
  %cmp73 = icmp eq i32 %and72, 2
  br i1 %cmp73, label %cond.true.75, label %cond.false.76

cond.true.75:                                     ; preds = %if.else.69
  br label %cond.end.78

cond.false.76:                                    ; preds = %if.else.69
  %call77 = call i64 @builtin_lisp_symbol(i32 558)
  %30 = load i64, i64* %end.addr, align 8
  %31 = call i64 @wrong_type_argument(i64 %call77, i64 %30) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.78

cond.end.78:                                      ; preds = %32, %cond.true.75
  br label %if.end.79

if.end.79:                                        ; preds = %cond.end.78, %if.then.66
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  %33 = load i64, i64* %beg.addr, align 8
  %shr = ashr i64 %33, 2
  %34 = load i64, i64* %end.addr, align 8
  %shr81 = ashr i64 %34, 2
  %cmp82 = icmp sgt i64 %shr, %shr81
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %do.end.80
  %35 = load i64, i64* %beg.addr, align 8
  store i64 %35, i64* %temp, align 8
  %36 = load i64, i64* %end.addr, align 8
  store i64 %36, i64* %beg.addr, align 8
  %37 = load i64, i64* %temp, align 8
  store i64 %37, i64* %end.addr, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.84, %do.end.80
  %call86 = call i64 @builtin_lisp_symbol(i32 546)
  %call87 = call i64 @builtin_lisp_symbol(i32 901)
  call void @specbind(i64 %call86, i64 %call87)
  %38 = load i64, i64* %overlay.addr, align 8
  %call88 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %38)
  %start89 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call88, i32 0, i32 2
  %39 = load i64, i64* %start89, align 8
  %call90 = call i64 @Fmarker_buffer(i64 %39)
  store i64 %call90, i64* %obuffer, align 8
  %40 = load i64, i64* %buffer.addr, align 8
  %call91 = call %struct.buffer* @XBUFFER(i64 %40)
  store %struct.buffer* %call91, %struct.buffer** %b, align 8
  %41 = load i64, i64* %obuffer, align 8
  %call92 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp93 = icmp eq i64 %41, %call92
  br i1 %cmp93, label %if.end.134, label %if.then.95

if.then.95:                                       ; preds = %if.end.85
  %42 = load i64, i64* %obuffer, align 8
  %call96 = call %struct.buffer* @XBUFFER(i64 %42)
  store %struct.buffer* %call96, %struct.buffer** %ob, align 8
  %43 = load i64, i64* %overlay.addr, align 8
  %call97 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %43)
  %start98 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call97, i32 0, i32 2
  %44 = load i64, i64* %start98, align 8
  %and99 = and i64 %44, 7
  %conv100 = trunc i64 %and99 to i32
  %cmp101 = icmp eq i32 %conv100, 1
  br i1 %cmp101, label %land.lhs.true.103, label %cond.false.113

land.lhs.true.103:                                ; preds = %if.then.95
  %45 = load i64, i64* %overlay.addr, align 8
  %call104 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %45)
  %start105 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call104, i32 0, i32 2
  %46 = load i64, i64* %start105, align 8
  %call106 = call i32 @XMISCTYPE(i64 %46)
  %cmp107 = icmp eq i32 %call106, 24236
  br i1 %cmp107, label %cond.true.109, label %cond.false.113

cond.true.109:                                    ; preds = %land.lhs.true.103
  %47 = load i64, i64* %overlay.addr, align 8
  %call110 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %47)
  %start111 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call110, i32 0, i32 2
  %48 = load i64, i64* %start111, align 8
  %call112 = call i64 @marker_position(i64 %48)
  br label %cond.end.114

cond.false.113:                                   ; preds = %land.lhs.true.103, %if.then.95
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.114

cond.end.114:                                     ; preds = %49, %cond.true.109
  %cond = phi i64 [ %call112, %cond.true.109 ], [ 0, %49 ]
  store i64 %cond, i64* %o_beg, align 8
  %50 = load i64, i64* %overlay.addr, align 8
  %call115 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %50)
  %end116 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call115, i32 0, i32 3
  %51 = load i64, i64* %end116, align 8
  %and117 = and i64 %51, 7
  %conv118 = trunc i64 %and117 to i32
  %cmp119 = icmp eq i32 %conv118, 1
  br i1 %cmp119, label %land.lhs.true.121, label %cond.false.131

land.lhs.true.121:                                ; preds = %cond.end.114
  %52 = load i64, i64* %overlay.addr, align 8
  %call122 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %52)
  %end123 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call122, i32 0, i32 3
  %53 = load i64, i64* %end123, align 8
  %call124 = call i32 @XMISCTYPE(i64 %53)
  %cmp125 = icmp eq i32 %call124, 24236
  br i1 %cmp125, label %cond.true.127, label %cond.false.131

cond.true.127:                                    ; preds = %land.lhs.true.121
  %54 = load i64, i64* %overlay.addr, align 8
  %call128 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %54)
  %end129 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call128, i32 0, i32 3
  %55 = load i64, i64* %end129, align 8
  %call130 = call i64 @marker_position(i64 %55)
  br label %cond.end.132

cond.false.131:                                   ; preds = %land.lhs.true.121, %cond.end.114
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.132

cond.end.132:                                     ; preds = %56, %cond.true.127
  %cond133 = phi i64 [ %call130, %cond.true.127 ], [ 0, %56 ]
  store i64 %cond133, i64* %o_end, align 8
  %57 = load %struct.buffer*, %struct.buffer** %ob, align 8
  %58 = load i64, i64* %overlay.addr, align 8
  call void @unchain_both(%struct.buffer* %57, i64 %58)
  br label %if.end.134

if.end.134:                                       ; preds = %cond.end.132, %if.end.85
  %59 = load i64, i64* %overlay.addr, align 8
  %call135 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %59)
  %start136 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call135, i32 0, i32 2
  %60 = load i64, i64* %start136, align 8
  %61 = load i64, i64* %beg.addr, align 8
  %62 = load i64, i64* %buffer.addr, align 8
  %call137 = call i64 @Fset_marker(i64 %60, i64 %61, i64 %62)
  %63 = load i64, i64* %overlay.addr, align 8
  %call138 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %63)
  %end139 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call138, i32 0, i32 3
  %64 = load i64, i64* %end139, align 8
  %65 = load i64, i64* %end.addr, align 8
  %66 = load i64, i64* %buffer.addr, align 8
  %call140 = call i64 @Fset_marker(i64 %64, i64 %65, i64 %66)
  %67 = load i64, i64* %overlay.addr, align 8
  %call141 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %67)
  %start142 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call141, i32 0, i32 2
  %68 = load i64, i64* %start142, align 8
  %call143 = call i64 @marker_position(i64 %68)
  store i64 %call143, i64* %n_beg, align 8
  %69 = load i64, i64* %overlay.addr, align 8
  %call144 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %69)
  %end145 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call144, i32 0, i32 3
  %70 = load i64, i64* %end145, align 8
  %call146 = call i64 @marker_position(i64 %70)
  store i64 %call146, i64* %n_end, align 8
  %71 = load i64, i64* %buffer.addr, align 8
  %72 = load i64, i64* %obuffer, align 8
  %cmp147 = icmp eq i64 %71, %72
  br i1 %cmp147, label %if.else.152, label %if.then.149

if.then.149:                                      ; preds = %if.end.134
  %73 = load %struct.buffer*, %struct.buffer** %ob, align 8
  %tobool = icmp ne %struct.buffer* %73, null
  br i1 %tobool, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %if.then.149
  %74 = load %struct.buffer*, %struct.buffer** %ob, align 8
  %75 = load i64, i64* %o_beg, align 8
  %76 = load i64, i64* %o_end, align 8
  call void @modify_overlay(%struct.buffer* %74, i64 %75, i64 %76)
  br label %if.end.151

if.end.151:                                       ; preds = %if.then.150, %if.then.149
  %77 = load %struct.buffer*, %struct.buffer** %b, align 8
  %78 = load i64, i64* %n_beg, align 8
  %79 = load i64, i64* %n_end, align 8
  call void @modify_overlay(%struct.buffer* %77, i64 %78, i64 %79)
  br label %if.end.175

if.else.152:                                      ; preds = %if.end.134
  %80 = load i64, i64* %o_beg, align 8
  %81 = load i64, i64* %n_beg, align 8
  %cmp153 = icmp eq i64 %80, %81
  br i1 %cmp153, label %if.then.155, label %if.else.156

if.then.155:                                      ; preds = %if.else.152
  %82 = load %struct.buffer*, %struct.buffer** %b, align 8
  %83 = load i64, i64* %o_end, align 8
  %84 = load i64, i64* %n_end, align 8
  call void @modify_overlay(%struct.buffer* %82, i64 %83, i64 %84)
  br label %if.end.174

if.else.156:                                      ; preds = %if.else.152
  %85 = load i64, i64* %o_end, align 8
  %86 = load i64, i64* %n_end, align 8
  %cmp157 = icmp eq i64 %85, %86
  br i1 %cmp157, label %if.then.159, label %if.else.160

if.then.159:                                      ; preds = %if.else.156
  %87 = load %struct.buffer*, %struct.buffer** %b, align 8
  %88 = load i64, i64* %o_beg, align 8
  %89 = load i64, i64* %n_beg, align 8
  call void @modify_overlay(%struct.buffer* %87, i64 %88, i64 %89)
  br label %if.end.173

if.else.160:                                      ; preds = %if.else.156
  %90 = load %struct.buffer*, %struct.buffer** %b, align 8
  %91 = load i64, i64* %o_beg, align 8
  %92 = load i64, i64* %n_beg, align 8
  %cmp161 = icmp slt i64 %91, %92
  br i1 %cmp161, label %cond.true.163, label %cond.false.164

cond.true.163:                                    ; preds = %if.else.160
  %93 = load i64, i64* %o_beg, align 8
  br label %cond.end.165

cond.false.164:                                   ; preds = %if.else.160
  %94 = load i64, i64* %n_beg, align 8
  br label %cond.end.165

cond.end.165:                                     ; preds = %cond.false.164, %cond.true.163
  %cond166 = phi i64 [ %93, %cond.true.163 ], [ %94, %cond.false.164 ]
  %95 = load i64, i64* %o_end, align 8
  %96 = load i64, i64* %n_end, align 8
  %cmp167 = icmp sgt i64 %95, %96
  br i1 %cmp167, label %cond.true.169, label %cond.false.170

cond.true.169:                                    ; preds = %cond.end.165
  %97 = load i64, i64* %o_end, align 8
  br label %cond.end.171

cond.false.170:                                   ; preds = %cond.end.165
  %98 = load i64, i64* %n_end, align 8
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.false.170, %cond.true.169
  %cond172 = phi i64 [ %97, %cond.true.169 ], [ %98, %cond.false.170 ]
  call void @modify_overlay(%struct.buffer* %90, i64 %cond166, i64 %cond172)
  br label %if.end.173

if.end.173:                                       ; preds = %cond.end.171, %if.then.159
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.173, %if.then.155
  br label %if.end.175

if.end.175:                                       ; preds = %if.end.174, %if.end.151
  %99 = load i64, i64* %n_beg, align 8
  %100 = load i64, i64* %n_end, align 8
  %cmp176 = icmp eq i64 %99, %100
  br i1 %cmp176, label %land.lhs.true.178, label %if.end.187

land.lhs.true.178:                                ; preds = %if.end.175
  %101 = load i64, i64* %overlay.addr, align 8
  %call179 = call i64 @builtin_lisp_symbol(i32 380)
  %call180 = call i64 @Foverlay_get(i64 %101, i64 %call179)
  %call181 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp182 = icmp eq i64 %call180, %call181
  br i1 %cmp182, label %if.end.187, label %if.then.184

if.then.184:                                      ; preds = %land.lhs.true.178
  %102 = load i64, i64* %count, align 8
  %103 = load i64, i64* %overlay.addr, align 8
  %call185 = call i64 @Fdelete_overlay(i64 %103)
  %call186 = call i64 @unbind_to(i64 %102, i64 %call185)
  store i64 %call186, i64* %retval
  br label %return

if.end.187:                                       ; preds = %land.lhs.true.178, %if.end.175
  %104 = load i64, i64* %n_end, align 8
  %105 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 97
  %106 = load i64, i64* %overlay_center, align 8
  %cmp188 = icmp slt i64 %104, %106
  br i1 %cmp188, label %if.then.190, label %if.else.193

if.then.190:                                      ; preds = %if.end.187
  %107 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %107, i32 0, i32 96
  %108 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  %109 = load i64, i64* %overlay.addr, align 8
  %call191 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %109)
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call191, i32 0, i32 1
  store %struct.Lisp_Overlay* %108, %struct.Lisp_Overlay** %next, align 8
  %110 = load %struct.buffer*, %struct.buffer** %b, align 8
  %111 = load i64, i64* %overlay.addr, align 8
  %call192 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %111)
  call void @set_buffer_overlays_after(%struct.buffer* %110, %struct.Lisp_Overlay* %call192)
  br label %if.end.197

if.else.193:                                      ; preds = %if.end.187
  %112 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %112, i32 0, i32 95
  %113 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  %114 = load i64, i64* %overlay.addr, align 8
  %call194 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %114)
  %next195 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call194, i32 0, i32 1
  store %struct.Lisp_Overlay* %113, %struct.Lisp_Overlay** %next195, align 8
  %115 = load %struct.buffer*, %struct.buffer** %b, align 8
  %116 = load i64, i64* %overlay.addr, align 8
  %call196 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %116)
  call void @set_buffer_overlays_before(%struct.buffer* %115, %struct.Lisp_Overlay* %call196)
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.193, %if.then.190
  %117 = load %struct.buffer*, %struct.buffer** %b, align 8
  %118 = load %struct.buffer*, %struct.buffer** %b, align 8
  %overlay_center198 = getelementptr inbounds %struct.buffer, %struct.buffer* %118, i32 0, i32 97
  %119 = load i64, i64* %overlay_center198, align 8
  call void @recenter_overlay_lists(%struct.buffer* %117, i64 %119)
  %120 = load i64, i64* %count, align 8
  %121 = load i64, i64* %overlay.addr, align 8
  %call199 = call i64 @unbind_to(i64 %120, i64 %121)
  store i64 %call199, i64* %retval
  br label %return

return:                                           ; preds = %if.end.197, %if.then.184
  %122 = load i64, i64* %retval
  ret i64 %122
}

; Function Attrs: nounwind uwtable
define internal void @CHECK_OVERLAY(i64 %x) #3 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64, i64* %x.addr, align 8
  %call = call zeroext i1 @OVERLAYP(i64 %0)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 733)
  %1 = load i64, i64* %x.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call1, i64 %1) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  ret void
}

declare void @specbind(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @unchain_both(%struct.buffer* %b, i64 %overlay) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %overlay.addr = alloca i64, align 8
  %ov = alloca %struct.Lisp_Overlay*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %0)
  store %struct.Lisp_Overlay* %call, %struct.Lisp_Overlay** %ov, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %2 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 95
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %call1 = call %struct.Lisp_Overlay* @unchain_overlay(%struct.Lisp_Overlay* %3, %struct.Lisp_Overlay* %4)
  call void @set_buffer_overlays_before(%struct.buffer* %1, %struct.Lisp_Overlay* %call1)
  %5 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %6 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 96
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  %8 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ov, align 8
  %call2 = call %struct.Lisp_Overlay* @unchain_overlay(%struct.Lisp_Overlay* %7, %struct.Lisp_Overlay* %8)
  call void @set_buffer_overlays_after(%struct.buffer* %5, %struct.Lisp_Overlay* %call2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @modify_overlay(%struct.buffer* %buf, i64 %start, i64 %end) #3 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  %1 = load i64, i64* %end.addr, align 8
  %cmp = icmp sgt i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %start.addr, align 8
  store i64 %2, i64* %temp, align 8
  %3 = load i64, i64* %end.addr, align 8
  store i64 %3, i64* %start.addr, align 8
  %4 = load i64, i64* %temp, align 8
  store i64 %4, i64* %end.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 73
  %6 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %unchanged_modified = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %6, i32 0, i32 13
  %7 = load i64, i64* %unchanged_modified, align 8
  %8 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 73
  %9 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %9, i32 0, i32 6
  %10 = load i64, i64* %modiff, align 8
  %cmp2 = icmp eq i64 %7, %10
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %11 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %overlay_unchanged_modified = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 14
  %13 = load i64, i64* %overlay_unchanged_modified, align 8
  %14 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %overlay_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 9
  %16 = load i64, i64* %overlay_modiff, align 8
  %cmp5 = icmp eq i64 %13, %16
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %land.lhs.true
  %17 = load i64, i64* %start.addr, align 8
  %sub = sub nsw i64 %17, 1
  %18 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %beg_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 11
  store i64 %sub, i64* %beg_unchanged, align 8
  %20 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 2
  %22 = load i64, i64* %z, align 8
  %23 = load i64, i64* %end.addr, align 8
  %sub9 = sub nsw i64 %22, %23
  %24 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text10 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 73
  %25 = load %struct.buffer_text*, %struct.buffer_text** %text10, align 8
  %end_unchanged = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %25, i32 0, i32 12
  store i64 %sub9, i64* %end_unchanged, align 8
  br label %if.end.33

if.else:                                          ; preds = %land.lhs.true, %do.body
  %26 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text11 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 73
  %27 = load %struct.buffer_text*, %struct.buffer_text** %text11, align 8
  %z12 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %27, i32 0, i32 2
  %28 = load i64, i64* %z12, align 8
  %29 = load i64, i64* %end.addr, align 8
  %sub13 = sub nsw i64 %28, %29
  %30 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text14 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 73
  %31 = load %struct.buffer_text*, %struct.buffer_text** %text14, align 8
  %end_unchanged15 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %31, i32 0, i32 12
  %32 = load i64, i64* %end_unchanged15, align 8
  %cmp16 = icmp slt i64 %sub13, %32
  br i1 %cmp16, label %if.then.17, label %if.end.23

if.then.17:                                       ; preds = %if.else
  %33 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 73
  %34 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %z19 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %34, i32 0, i32 2
  %35 = load i64, i64* %z19, align 8
  %36 = load i64, i64* %end.addr, align 8
  %sub20 = sub nsw i64 %35, %36
  %37 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text21 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 73
  %38 = load %struct.buffer_text*, %struct.buffer_text** %text21, align 8
  %end_unchanged22 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %38, i32 0, i32 12
  store i64 %sub20, i64* %end_unchanged22, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.17, %if.else
  %39 = load i64, i64* %start.addr, align 8
  %sub24 = sub nsw i64 %39, 1
  %40 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %beg_unchanged26 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 11
  %42 = load i64, i64* %beg_unchanged26, align 8
  %cmp27 = icmp slt i64 %sub24, %42
  br i1 %cmp27, label %if.then.28, label %if.end.32

if.then.28:                                       ; preds = %if.end.23
  %43 = load i64, i64* %start.addr, align 8
  %sub29 = sub nsw i64 %43, 1
  %44 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 73
  %45 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %beg_unchanged31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %45, i32 0, i32 11
  store i64 %sub29, i64* %beg_unchanged31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.28, %if.end.23
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.33
  %46 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  call void @bset_redisplay(%struct.buffer* %46)
  %47 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8
  %text34 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 73
  %48 = load %struct.buffer_text*, %struct.buffer_text** %text34, align 8
  %overlay_modiff35 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %48, i32 0, i32 9
  %49 = load i64, i64* %overlay_modiff35, align 8
  %inc = add nsw i64 %49, 1
  store i64 %inc, i64* %overlay_modiff35, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fdelete_overlay(i64 %overlay) #3 {
entry:
  %retval = alloca i64, align 8
  %overlay.addr = alloca i64, align 8
  %buffer = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %count = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call1 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call1, i32 0, i32 2
  %2 = load i64, i64* %start, align 8
  %call2 = call i64 @Fmarker_buffer(i64 %2)
  store i64 %call2, i64* %buffer, align 8
  %3 = load i64, i64* %buffer, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %buffer, align 8
  %call5 = call %struct.buffer* @XBUFFER(i64 %4)
  store %struct.buffer* %call5, %struct.buffer** %b, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 546)
  %call7 = call i64 @builtin_lisp_symbol(i32 901)
  call void @specbind(i64 %call6, i64 %call7)
  %5 = load %struct.buffer*, %struct.buffer** %b, align 8
  %6 = load i64, i64* %overlay.addr, align 8
  call void @unchain_both(%struct.buffer* %5, i64 %6)
  %7 = load %struct.buffer*, %struct.buffer** %b, align 8
  %8 = load i64, i64* %overlay.addr, align 8
  %call8 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %8)
  call void @drop_overlay(%struct.buffer* %7, %struct.Lisp_Overlay* %call8)
  %9 = load i32, i32* @windows_or_buffers_changed, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end.18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %10 = load i64, i64* %overlay.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 199)
  %call10 = call i64 @Foverlay_get(i64 %10, i64 %call9)
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %call10, %call11
  br i1 %cmp12, label %lor.lhs.false, label %if.then.17

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load i64, i64* %overlay.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 168)
  %call14 = call i64 @Foverlay_get(i64 %11, i64 %call13)
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp16 = icmp eq i64 %call14, %call15
  br i1 %cmp16, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load %struct.buffer*, %struct.buffer** %b, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 94
  %bf.load = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %lor.lhs.false, %if.end
  %13 = load i64, i64* %count, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %call20 = call i64 @unbind_to(i64 %13, i64 %call19)
  store i64 %call20, i64* %retval
  br label %return

return:                                           ; preds = %if.end.18, %if.then
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define i64 @Fdelete_all_overlays(i64 %buffer) #3 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @decode_buffer(i64 %0)
  call void @delete_all_overlays(%struct.buffer* %call)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Foverlay_start(i64 %overlay) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 2
  %2 = load i64, i64* %start, align 8
  %call1 = call i64 @Fmarker_position(i64 %2)
  ret i64 %call1
}

declare i64 @Fmarker_position(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Foverlay_end(i64 %overlay) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 3
  %2 = load i64, i64* %end, align 8
  %call1 = call i64 @Fmarker_position(i64 %2)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Foverlay_buffer(i64 %overlay) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 2
  %2 = load i64, i64* %start, align 8
  %call1 = call i64 @Fmarker_buffer(i64 %2)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Foverlay_properties(i64 %overlay) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %plist = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 4
  %2 = load i64, i64* %plist, align 8
  %call1 = call i64 @Fcopy_sequence(i64 %2)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Foverlays_at(i64 %pos, i64 %sorted) #3 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %sorted.addr = alloca i64, align 8
  %len = alloca i64, align 8
  %noverlays = alloca i64, align 8
  %overlay_vec = alloca i64*, align 8
  %result = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %sorted, i64* %sorted.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %pos.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %1 = load i64, i64* %pos.addr, align 8
  %call = call i32 @XMISCTYPE(i64 %1)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %pos.addr, align 8
  %call4 = call i64 @marker_position(i64 %2)
  %call5 = call i64 @make_natnum(i64 %call4)
  store i64 %call5, i64* %pos.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %3 = load i64, i64* %pos.addr, align 8
  %and6 = and i64 %3, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %4 = load i64, i64* %pos.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call11, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %call12 = call zeroext i1 @buffer_has_overlays()
  br i1 %call12, label %if.end.15, label %if.then.13

if.then.13:                                       ; preds = %do.end
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call14, i64* %retval
  br label %return

if.end.15:                                        ; preds = %do.end
  store i64 10, i64* %len, align 8
  %7 = load i64, i64* %len, align 8
  %mul = mul i64 %7, 8
  %call16 = call noalias i8* @xmalloc(i64 %mul)
  %8 = bitcast i8* %call16 to i64*
  store i64* %8, i64** %overlay_vec, align 8
  %9 = load i64, i64* %pos.addr, align 8
  %shr = ashr i64 %9, 2
  %call17 = call i64 @overlays_at(i64 %shr, i1 zeroext true, i64** %overlay_vec, i64* %len, i64* null, i64* null, i1 zeroext false)
  store i64 %call17, i64* %noverlays, align 8
  %10 = load i64, i64* %sorted.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %10, %call18
  br i1 %cmp19, label %if.end.29, label %if.then.21

if.then.21:                                       ; preds = %if.end.15
  %11 = load i64*, i64** %overlay_vec, align 8
  %12 = load i64, i64* %noverlays, align 8
  %13 = load i64, i64* %sorted.addr, align 8
  %call22 = call zeroext i1 @WINDOWP(i64 %13)
  br i1 %call22, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %if.then.21
  %14 = load i64, i64* %sorted.addr, align 8
  %call25 = call %struct.window* @XWINDOW(i64 %14)
  br label %cond.end.27

cond.false.26:                                    ; preds = %if.then.21
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.24
  %cond = phi %struct.window* [ %call25, %cond.true.24 ], [ null, %cond.false.26 ]
  %call28 = call i64 @sort_overlays(i64* %11, i64 %12, %struct.window* %cond)
  store i64 %call28, i64* %noverlays, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %cond.end.27, %if.end.15
  %15 = load i64, i64* %noverlays, align 8
  %16 = load i64*, i64** %overlay_vec, align 8
  %call30 = call i64 @Flist(i64 %15, i64* %16)
  store i64 %call30, i64* %result, align 8
  %17 = load i64*, i64** %overlay_vec, align 8
  %18 = bitcast i64* %17 to i8*
  call void @xfree(i8* %18)
  %19 = load i64, i64* %result, align 8
  store i64 %19, i64* %retval
  br label %return

return:                                           ; preds = %if.end.29, %if.then.13
  %20 = load i64, i64* %retval
  ret i64 %20
}

declare zeroext i1 @buffer_has_overlays() #1

declare noalias i8* @xmalloc(i64) #1

declare i64 @Flist(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Foverlays_in(i64 %beg, i64 %end) #3 {
entry:
  %retval = alloca i64, align 8
  %beg.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %len = alloca i64, align 8
  %noverlays = alloca i64, align 8
  %overlay_vec = alloca i64*, align 8
  %result = alloca i64, align 8
  store i64 %beg, i64* %beg.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %beg.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %1 = load i64, i64* %beg.addr, align 8
  %call = call i32 @XMISCTYPE(i64 %1)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %beg.addr, align 8
  %call4 = call i64 @marker_position(i64 %2)
  %call5 = call i64 @make_natnum(i64 %call4)
  store i64 %call5, i64* %beg.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %3 = load i64, i64* %beg.addr, align 8
  %and6 = and i64 %3, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %4 = load i64, i64* %beg.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call11, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.12

do.body.12:                                       ; preds = %do.end
  %7 = load i64, i64* %end.addr, align 8
  %and13 = and i64 %7, 7
  %conv14 = trunc i64 %and13 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true.17, label %if.else.24

land.lhs.true.17:                                 ; preds = %do.body.12
  %8 = load i64, i64* %end.addr, align 8
  %call18 = call i32 @XMISCTYPE(i64 %8)
  %cmp19 = icmp eq i32 %call18, 24236
  br i1 %cmp19, label %if.then.21, label %if.else.24

if.then.21:                                       ; preds = %land.lhs.true.17
  %9 = load i64, i64* %end.addr, align 8
  %call22 = call i64 @marker_position(i64 %9)
  %call23 = call i64 @make_natnum(i64 %call22)
  store i64 %call23, i64* %end.addr, align 8
  br label %if.end.34

if.else.24:                                       ; preds = %land.lhs.true.17, %do.body.12
  %10 = load i64, i64* %end.addr, align 8
  %and25 = and i64 %10, 7
  %conv26 = trunc i64 %and25 to i32
  %and27 = and i32 %conv26, -5
  %cmp28 = icmp eq i32 %and27, 2
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %if.else.24
  br label %cond.end.33

cond.false.31:                                    ; preds = %if.else.24
  %call32 = call i64 @builtin_lisp_symbol(i32 558)
  %11 = load i64, i64* %end.addr, align 8
  %12 = call i64 @wrong_type_argument(i64 %call32, i64 %11) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.33

cond.end.33:                                      ; preds = %13, %cond.true.30
  br label %if.end.34

if.end.34:                                        ; preds = %cond.end.33, %if.then.21
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  %call36 = call zeroext i1 @buffer_has_overlays()
  br i1 %call36, label %if.end.39, label %if.then.37

if.then.37:                                       ; preds = %do.end.35
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call38, i64* %retval
  br label %return

if.end.39:                                        ; preds = %do.end.35
  store i64 10, i64* %len, align 8
  %14 = load i64, i64* %len, align 8
  %mul = mul i64 %14, 8
  %call40 = call noalias i8* @xmalloc(i64 %mul)
  %15 = bitcast i8* %call40 to i64*
  store i64* %15, i64** %overlay_vec, align 8
  %16 = load i64, i64* %beg.addr, align 8
  %shr = ashr i64 %16, 2
  %17 = load i64, i64* %end.addr, align 8
  %shr41 = ashr i64 %17, 2
  %call42 = call i64 @overlays_in(i64 %shr, i64 %shr41, i1 zeroext true, i64** %overlay_vec, i64* %len, i64* null, i64* null)
  store i64 %call42, i64* %noverlays, align 8
  %18 = load i64, i64* %noverlays, align 8
  %19 = load i64*, i64** %overlay_vec, align 8
  %call43 = call i64 @Flist(i64 %18, i64* %19)
  store i64 %call43, i64* %result, align 8
  %20 = load i64*, i64** %overlay_vec, align 8
  %21 = bitcast i64* %20 to i8*
  call void @xfree(i8* %21)
  %22 = load i64, i64* %result, align 8
  store i64 %22, i64* %retval
  br label %return

return:                                           ; preds = %if.end.39, %if.then.37
  %23 = load i64, i64* %retval
  ret i64 %23
}

; Function Attrs: nounwind uwtable
define i64 @Fnext_overlay_change(i64 %pos) #3 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %noverlays = alloca i64, align 8
  %endpos = alloca i64, align 8
  %overlay_vec = alloca i64*, align 8
  %oend = alloca i64, align 8
  %oendpos = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %pos.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %1 = load i64, i64* %pos.addr, align 8
  %call = call i32 @XMISCTYPE(i64 %1)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %pos.addr, align 8
  %call4 = call i64 @marker_position(i64 %2)
  %call5 = call i64 @make_natnum(i64 %call4)
  store i64 %call5, i64* %pos.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %3 = load i64, i64* %pos.addr, align 8
  %and6 = and i64 %3, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %4 = load i64, i64* %pos.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call11, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %call12 = call zeroext i1 @buffer_has_overlays()
  br i1 %call12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %do.end
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 79
  %8 = load i64, i64* %zv, align 8
  %shl = shl i64 %8, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.end.14:                                        ; preds = %do.end
  store i64 10, i64* %len, align 8
  %9 = load i64, i64* %len, align 8
  %mul = mul i64 %9, 8
  %call15 = call noalias i8* @xmalloc(i64 %mul)
  %10 = bitcast i8* %call15 to i64*
  store i64* %10, i64** %overlay_vec, align 8
  %11 = load i64, i64* %pos.addr, align 8
  %shr = ashr i64 %11, 2
  %call16 = call i64 @overlays_at(i64 %shr, i1 zeroext true, i64** %overlay_vec, i64* %len, i64* %endpos, i64* null, i1 zeroext true)
  store i64 %call16, i64* %noverlays, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %noverlays, align 8
  %cmp17 = icmp slt i64 %12, %13
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i64, i64* %i, align 8
  %15 = load i64*, i64** %overlay_vec, align 8
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %14
  %16 = load i64, i64* %arrayidx, align 8
  %call19 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %16)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call19, i32 0, i32 3
  %17 = load i64, i64* %end, align 8
  store i64 %17, i64* %oend, align 8
  %18 = load i64, i64* %oend, align 8
  %and20 = and i64 %18, 7
  %conv21 = trunc i64 %and20 to i32
  %cmp22 = icmp eq i32 %conv21, 1
  br i1 %cmp22, label %land.lhs.true.24, label %cond.false.30

land.lhs.true.24:                                 ; preds = %for.body
  %19 = load i64, i64* %oend, align 8
  %call25 = call i32 @XMISCTYPE(i64 %19)
  %cmp26 = icmp eq i32 %call25, 24236
  br i1 %cmp26, label %cond.true.28, label %cond.false.30

cond.true.28:                                     ; preds = %land.lhs.true.24
  %20 = load i64, i64* %oend, align 8
  %call29 = call i64 @marker_position(i64 %20)
  br label %cond.end.31

cond.false.30:                                    ; preds = %land.lhs.true.24, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.31

cond.end.31:                                      ; preds = %21, %cond.true.28
  %cond = phi i64 [ %call29, %cond.true.28 ], [ 0, %21 ]
  store i64 %cond, i64* %oendpos, align 8
  %22 = load i64, i64* %oendpos, align 8
  %23 = load i64, i64* %endpos, align 8
  %cmp32 = icmp slt i64 %22, %23
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %cond.end.31
  %24 = load i64, i64* %oendpos, align 8
  store i64 %24, i64* %endpos, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %cond.end.31
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %25 = load i64, i64* %i, align 8
  %inc = add nsw i64 %25, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i64*, i64** %overlay_vec, align 8
  %27 = bitcast i64* %26 to i8*
  call void @xfree(i8* %27)
  %28 = load i64, i64* %endpos, align 8
  %shl36 = shl i64 %28, 2
  %add37 = add i64 %shl36, 2
  store i64 %add37, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.13
  %29 = load i64, i64* %retval
  ret i64 %29
}

; Function Attrs: nounwind uwtable
define i64 @Fprevious_overlay_change(i64 %pos) #3 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %prevpos = alloca i64, align 8
  %overlay_vec = alloca i64*, align 8
  %len = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %pos.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %1 = load i64, i64* %pos.addr, align 8
  %call = call i32 @XMISCTYPE(i64 %1)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %pos.addr, align 8
  %call4 = call i64 @marker_position(i64 %2)
  %call5 = call i64 @make_natnum(i64 %call4)
  store i64 %call5, i64* %pos.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %3 = load i64, i64* %pos.addr, align 8
  %and6 = and i64 %3, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %4 = load i64, i64* %pos.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call11, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %call12 = call zeroext i1 @buffer_has_overlays()
  br i1 %call12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %do.end
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 77
  %8 = load i64, i64* %begv, align 8
  %shl = shl i64 %8, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.end.14:                                        ; preds = %do.end
  %9 = load i64, i64* %pos.addr, align 8
  %shr = ashr i64 %9, 2
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv15 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 77
  %11 = load i64, i64* %begv15, align 8
  %cmp16 = icmp eq i64 %shr, %11
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.14
  %12 = load i64, i64* %pos.addr, align 8
  store i64 %12, i64* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.14
  store i64 10, i64* %len, align 8
  %13 = load i64, i64* %len, align 8
  %mul = mul i64 %13, 8
  %call20 = call noalias i8* @xmalloc(i64 %mul)
  %14 = bitcast i8* %call20 to i64*
  store i64* %14, i64** %overlay_vec, align 8
  %15 = load i64, i64* %pos.addr, align 8
  %shr21 = ashr i64 %15, 2
  %call22 = call i64 @overlays_at(i64 %shr21, i1 zeroext true, i64** %overlay_vec, i64* %len, i64* null, i64* %prevpos, i1 zeroext true)
  %16 = load i64*, i64** %overlay_vec, align 8
  %17 = bitcast i64* %16 to i8*
  call void @xfree(i8* %17)
  %18 = load i64, i64* %prevpos, align 8
  %shl23 = shl i64 %18, 2
  %add24 = add i64 %shl23, 2
  store i64 %add24, i64* %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.18, %if.then.13
  %19 = load i64, i64* %retval
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define i64 @Foverlay_lists() #3 {
entry:
  %ol = alloca %struct.Lisp_Overlay*, align 8
  %before = alloca i64, align 8
  %after = alloca i64, align 8
  %tmp = alloca i64, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %before, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %after, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 95
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %1, %struct.Lisp_Overlay** %ol, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %4 = bitcast %struct.Lisp_Overlay* %3 to i8*
  %call2 = call i64 @make_lisp_ptr(i8* %4, i32 1)
  store i64 %call2, i64* %tmp, align 8
  %5 = load i64, i64* %tmp, align 8
  %6 = load i64, i64* %before, align 8
  %call3 = call i64 @Fcons(i64 %5, i64 %6)
  store i64 %call3, i64* %before, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %7, i32 0, i32 1
  %8 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %8, %struct.Lisp_Overlay** %ol, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 96
  %10 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %10, %struct.Lisp_Overlay** %ol, align 8
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.9, %for.end
  %11 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %tobool5 = icmp ne %struct.Lisp_Overlay* %11, null
  br i1 %tobool5, label %for.body.6, label %for.end.11

for.body.6:                                       ; preds = %for.cond.4
  %12 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %13 = bitcast %struct.Lisp_Overlay* %12 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %13, i32 1)
  store i64 %call7, i64* %tmp, align 8
  %14 = load i64, i64* %tmp, align 8
  %15 = load i64, i64* %after, align 8
  %call8 = call i64 @Fcons(i64 %14, i64 %15)
  store i64 %call8, i64* %after, align 8
  br label %for.inc.9

for.inc.9:                                        ; preds = %for.body.6
  %16 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %ol, align 8
  %next10 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %16, i32 0, i32 1
  %17 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next10, align 8
  store %struct.Lisp_Overlay* %17, %struct.Lisp_Overlay** %ol, align 8
  br label %for.cond.4

for.end.11:                                       ; preds = %for.cond.4
  %18 = load i64, i64* %before, align 8
  %call12 = call i64 @Fnreverse(i64 %18)
  %19 = load i64, i64* %after, align 8
  %call13 = call i64 @Fnreverse(i64 %19)
  %call14 = call i64 @Fcons(i64 %call12, i64 %call13)
  ret i64 %call14
}

; Function Attrs: nounwind uwtable
define i64 @Foverlay_recenter(i64 %pos) #3 {
entry:
  %pos.addr = alloca i64, align 8
  %p = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %pos.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %1 = load i64, i64* %pos.addr, align 8
  %call = call i32 @XMISCTYPE(i64 %1)
  %cmp2 = icmp eq i32 %call, 24236
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %pos.addr, align 8
  %call4 = call i64 @marker_position(i64 %2)
  %call5 = call i64 @make_natnum(i64 %call4)
  store i64 %call5, i64* %pos.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %do.body
  %3 = load i64, i64* %pos.addr, align 8
  %and6 = and i64 %3, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call11 = call i64 @builtin_lisp_symbol(i32 558)
  %4 = load i64, i64* %pos.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call11, i64 %4) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %7 = load i64, i64* %pos.addr, align 8
  %shr = ashr i64 %7, 2
  %call12 = call i64 @clip_to_bounds(i64 -9223372036854775808, i64 %shr, i64 9223372036854775807)
  store i64 %call12, i64* %p, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %9 = load i64, i64* %p, align 8
  call void @recenter_overlay_lists(%struct.buffer* %8, i64 %9)
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call13
}

declare i64 @lookup_char_property(i64, i64, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define i64 @Foverlay_put(i64 %overlay, i64 %prop, i64 %value) #3 {
entry:
  %overlay.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %value.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %buffer = alloca i64, align 8
  %changed = alloca i8, align 1
  store i64 %overlay, i64* %overlay.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load i64, i64* %overlay.addr, align 8
  call void @CHECK_OVERLAY(i64 %0)
  %1 = load i64, i64* %overlay.addr, align 8
  %call = call %struct.Lisp_Overlay* @XOVERLAY(i64 %1)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call, i32 0, i32 2
  %2 = load i64, i64* %start, align 8
  %call1 = call i64 @Fmarker_buffer(i64 %2)
  store i64 %call1, i64* %buffer, align 8
  %3 = load i64, i64* %overlay.addr, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %3)
  %plist = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 4
  %4 = load i64, i64* %plist, align 8
  store i64 %4, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %tail, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %9 = load i64, i64* %cdr, align 8
  %and4 = and i64 %9, 7
  %conv5 = trunc i64 %and4 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp6, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i64, i64* %tail, align 8
  %sub8 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub8 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car, align 8
  %15 = load i64, i64* %prop.addr, align 8
  %cmp9 = icmp eq i64 %14, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %16 = load i64, i64* %tail, align 8
  %sub11 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub11 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u12 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr13 = bitcast %union.anon.11* %u12 to i64*
  %19 = load i64, i64* %cdr13, align 8
  %sub14 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub14 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car15 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car15, align 8
  %23 = load i64, i64* %value.addr, align 8
  %cmp16 = icmp eq i64 %22, %23
  %lnot = xor i1 %cmp16, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %changed, align 1
  %24 = load i64, i64* %tail, align 8
  %sub18 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub18 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr20 = bitcast %union.anon.11* %u19 to i64*
  %27 = load i64, i64* %cdr20, align 8
  %28 = load i64, i64* %value.addr, align 8
  call void @XSETCAR(i64 %27, i64 %28)
  br label %found

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %29 = load i64, i64* %tail, align 8
  %sub21 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub21 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr23 = bitcast %union.anon.11* %u22 to i64*
  %32 = load i64, i64* %cdr23, align 8
  %sub24 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub24 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr26 = bitcast %union.anon.11* %u25 to i64*
  %35 = load i64, i64* %cdr26, align 8
  store i64 %35, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %36 = load i64, i64* %value.addr, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp28 = icmp eq i64 %36, %call27
  %lnot30 = xor i1 %cmp28, true
  %frombool31 = zext i1 %lnot30 to i8
  store i8 %frombool31, i8* %changed, align 1
  %37 = load i64, i64* %overlay.addr, align 8
  %38 = load i64, i64* %prop.addr, align 8
  %39 = load i64, i64* %value.addr, align 8
  %40 = load i64, i64* %overlay.addr, align 8
  %call32 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %40)
  %plist33 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call32, i32 0, i32 4
  %41 = load i64, i64* %plist33, align 8
  %call34 = call i64 @Fcons(i64 %39, i64 %41)
  %call35 = call i64 @Fcons(i64 %38, i64 %call34)
  call void @set_overlay_plist(i64 %37, i64 %call35)
  br label %found

found:                                            ; preds = %for.end, %if.then
  %42 = load i64, i64* %buffer, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp37 = icmp eq i64 %42, %call36
  br i1 %cmp37, label %if.end.94, label %if.then.39

if.then.39:                                       ; preds = %found
  %43 = load i8, i8* %changed, align 1
  %tobool = trunc i8 %43 to i1
  br i1 %tobool, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %if.then.39
  %44 = load i64, i64* %buffer, align 8
  %call41 = call %struct.buffer* @XBUFFER(i64 %44)
  %45 = load i64, i64* %overlay.addr, align 8
  %call42 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %45)
  %start43 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call42, i32 0, i32 2
  %46 = load i64, i64* %start43, align 8
  %call44 = call i64 @marker_position(i64 %46)
  %47 = load i64, i64* %overlay.addr, align 8
  %call45 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %47)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call45, i32 0, i32 3
  %48 = load i64, i64* %end, align 8
  %call46 = call i64 @marker_position(i64 %48)
  call void @modify_overlay(%struct.buffer* %call41, i64 %call44, i64 %call46)
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.40, %if.then.39
  %49 = load i64, i64* %prop.addr, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 380)
  %cmp49 = icmp eq i64 %49, %call48
  br i1 %cmp49, label %land.lhs.true, label %if.end.93

land.lhs.true:                                    ; preds = %if.end.47
  %50 = load i64, i64* %value.addr, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp52 = icmp eq i64 %50, %call51
  br i1 %cmp52, label %if.end.93, label %land.lhs.true.54

land.lhs.true.54:                                 ; preds = %land.lhs.true
  %51 = load i64, i64* %overlay.addr, align 8
  %call55 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %51)
  %start56 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call55, i32 0, i32 2
  %52 = load i64, i64* %start56, align 8
  %and57 = and i64 %52, 7
  %conv58 = trunc i64 %and57 to i32
  %cmp59 = icmp eq i32 %conv58, 1
  br i1 %cmp59, label %land.lhs.true.61, label %cond.false

land.lhs.true.61:                                 ; preds = %land.lhs.true.54
  %53 = load i64, i64* %overlay.addr, align 8
  %call62 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %53)
  %start63 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call62, i32 0, i32 2
  %54 = load i64, i64* %start63, align 8
  %call64 = call i32 @XMISCTYPE(i64 %54)
  %cmp65 = icmp eq i32 %call64, 24236
  br i1 %cmp65, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.61
  %55 = load i64, i64* %overlay.addr, align 8
  %call67 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %55)
  %start68 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call67, i32 0, i32 2
  %56 = load i64, i64* %start68, align 8
  %call69 = call i64 @marker_position(i64 %56)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.61, %land.lhs.true.54
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %57, %cond.true
  %cond = phi i64 [ %call69, %cond.true ], [ 0, %57 ]
  %58 = load i64, i64* %overlay.addr, align 8
  %call70 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %58)
  %end71 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call70, i32 0, i32 3
  %59 = load i64, i64* %end71, align 8
  %and72 = and i64 %59, 7
  %conv73 = trunc i64 %and72 to i32
  %cmp74 = icmp eq i32 %conv73, 1
  br i1 %cmp74, label %land.lhs.true.76, label %cond.false.86

land.lhs.true.76:                                 ; preds = %cond.end
  %60 = load i64, i64* %overlay.addr, align 8
  %call77 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %60)
  %end78 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call77, i32 0, i32 3
  %61 = load i64, i64* %end78, align 8
  %call79 = call i32 @XMISCTYPE(i64 %61)
  %cmp80 = icmp eq i32 %call79, 24236
  br i1 %cmp80, label %cond.true.82, label %cond.false.86

cond.true.82:                                     ; preds = %land.lhs.true.76
  %62 = load i64, i64* %overlay.addr, align 8
  %call83 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %62)
  %end84 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call83, i32 0, i32 3
  %63 = load i64, i64* %end84, align 8
  %call85 = call i64 @marker_position(i64 %63)
  br label %cond.end.87

cond.false.86:                                    ; preds = %land.lhs.true.76, %cond.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.87

cond.end.87:                                      ; preds = %64, %cond.true.82
  %cond88 = phi i64 [ %call85, %cond.true.82 ], [ 0, %64 ]
  %cmp89 = icmp eq i64 %cond, %cond88
  br i1 %cmp89, label %if.then.91, label %if.end.93

if.then.91:                                       ; preds = %cond.end.87
  %65 = load i64, i64* %overlay.addr, align 8
  %call92 = call i64 @Fdelete_overlay(i64 %65)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.91, %cond.end.87, %land.lhs.true, %if.end.47
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %found
  %66 = load i64, i64* %value.addr, align 8
  ret i64 %66
}

declare void @XSETCAR(i64, i64) #1

declare void @set_overlay_plist(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @report_overlay_modification(i64 %start, i64 %end, i1 zeroext %after, i64 %arg1, i64 %arg2, i64 %arg3) #3 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %after.addr = alloca i8, align 1
  %arg1.addr = alloca i64, align 8
  %arg2.addr = alloca i64, align 8
  %arg3.addr = alloca i64, align 8
  %prop = alloca i64, align 8
  %overlay = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %insertion = alloca i8, align 1
  %startpos = alloca i64, align 8
  %endpos = alloca i64, align 8
  %ostart = alloca i64, align 8
  %oend = alloca i64, align 8
  %startpos96 = alloca i64, align 8
  %endpos97 = alloca i64, align 8
  %ostart98 = alloca i64, align 8
  %oend99 = alloca i64, align 8
  %size = alloca i64, align 8
  %copy = alloca i64*, align 8
  %i = alloca i64, align 8
  %ovl = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  %prop_i = alloca i64, align 8
  %overlay_i = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %frombool = zext i1 %after to i8
  store i8 %frombool, i8* %after.addr, align 1
  store i64 %arg1, i64* %arg1.addr, align 8
  store i64 %arg2, i64* %arg2.addr, align 8
  store i64 %arg3, i64* %arg3.addr, align 8
  %0 = load i8, i8* %after.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %arg3.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp eq i64 %shr, 0
  %conv = zext i1 %cmp to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %start.addr, align 8
  %3 = load i64, i64* %end.addr, align 8
  %cmp1 = icmp eq i64 %2, %3
  %conv2 = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv2, %cond.false ]
  %tobool3 = icmp ne i32 %cond, 0
  %frombool4 = zext i1 %tobool3 to i8
  store i8 %frombool4, i8* %insertion, align 1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %overlay, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %tail, align 8
  %4 = load i8, i8* %after.addr, align 1
  %tobool5 = trunc i8 %4 to i1
  br i1 %tobool5, label %if.end.193, label %if.then

if.then:                                          ; preds = %cond.end
  store i64 0, i64* @last_overlay_modification_hooks_used, align 8
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 95
  %6 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %6, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool6 = icmp ne %struct.Lisp_Overlay* %7, null
  br i1 %tobool6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %9 = bitcast %struct.Lisp_Overlay* %8 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %9, i32 1)
  store i64 %call7, i64* %overlay, align 8
  %10 = load i64, i64* %overlay, align 8
  %call8 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %10)
  %start9 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call8, i32 0, i32 2
  %11 = load i64, i64* %start9, align 8
  store i64 %11, i64* %ostart, align 8
  %12 = load i64, i64* %overlay, align 8
  %call10 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %12)
  %end11 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call10, i32 0, i32 3
  %13 = load i64, i64* %end11, align 8
  store i64 %13, i64* %oend, align 8
  %14 = load i64, i64* %oend, align 8
  %and = and i64 %14, 7
  %conv12 = trunc i64 %and to i32
  %cmp13 = icmp eq i32 %conv12, 1
  br i1 %cmp13, label %land.lhs.true, label %cond.false.20

land.lhs.true:                                    ; preds = %for.body
  %15 = load i64, i64* %oend, align 8
  %call15 = call i32 @XMISCTYPE(i64 %15)
  %cmp16 = icmp eq i32 %call15, 24236
  br i1 %cmp16, label %cond.true.18, label %cond.false.20

cond.true.18:                                     ; preds = %land.lhs.true
  %16 = load i64, i64* %oend, align 8
  %call19 = call i64 @marker_position(i64 %16)
  br label %cond.end.21

cond.false.20:                                    ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.21

cond.end.21:                                      ; preds = %17, %cond.true.18
  %cond22 = phi i64 [ %call19, %cond.true.18 ], [ 0, %17 ]
  store i64 %cond22, i64* %endpos, align 8
  %18 = load i64, i64* %start.addr, align 8
  %shr23 = ashr i64 %18, 2
  %19 = load i64, i64* %endpos, align 8
  %cmp24 = icmp sgt i64 %shr23, %19
  br i1 %cmp24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %cond.end.21
  br label %for.end

if.end:                                           ; preds = %cond.end.21
  %20 = load i64, i64* %ostart, align 8
  %and27 = and i64 %20, 7
  %conv28 = trunc i64 %and27 to i32
  %cmp29 = icmp eq i32 %conv28, 1
  br i1 %cmp29, label %land.lhs.true.31, label %cond.false.37

land.lhs.true.31:                                 ; preds = %if.end
  %21 = load i64, i64* %ostart, align 8
  %call32 = call i32 @XMISCTYPE(i64 %21)
  %cmp33 = icmp eq i32 %call32, 24236
  br i1 %cmp33, label %cond.true.35, label %cond.false.37

cond.true.35:                                     ; preds = %land.lhs.true.31
  %22 = load i64, i64* %ostart, align 8
  %call36 = call i64 @marker_position(i64 %22)
  br label %cond.end.38

cond.false.37:                                    ; preds = %land.lhs.true.31, %if.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.38

cond.end.38:                                      ; preds = %23, %cond.true.35
  %cond39 = phi i64 [ %call36, %cond.true.35 ], [ 0, %23 ]
  store i64 %cond39, i64* %startpos, align 8
  %24 = load i8, i8* %insertion, align 1
  %tobool40 = trunc i8 %24 to i1
  br i1 %tobool40, label %land.lhs.true.42, label %if.end.57

land.lhs.true.42:                                 ; preds = %cond.end.38
  %25 = load i64, i64* %start.addr, align 8
  %shr43 = ashr i64 %25, 2
  %26 = load i64, i64* %startpos, align 8
  %cmp44 = icmp eq i64 %shr43, %26
  br i1 %cmp44, label %if.then.49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.42
  %27 = load i64, i64* %end.addr, align 8
  %shr46 = ashr i64 %27, 2
  %28 = load i64, i64* %startpos, align 8
  %cmp47 = icmp eq i64 %shr46, %28
  br i1 %cmp47, label %if.then.49, label %if.end.57

if.then.49:                                       ; preds = %lor.lhs.false, %land.lhs.true.42
  %29 = load i64, i64* %overlay, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 554)
  %call51 = call i64 @Foverlay_get(i64 %29, i64 %call50)
  store i64 %call51, i64* %prop, align 8
  %30 = load i64, i64* %prop, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp53 = icmp eq i64 %30, %call52
  br i1 %cmp53, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.then.49
  %31 = load i64, i64* %prop, align 8
  %32 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %31, i64 %32)
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %if.then.49
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %lor.lhs.false, %cond.end.38
  %33 = load i8, i8* %insertion, align 1
  %tobool58 = trunc i8 %33 to i1
  br i1 %tobool58, label %land.lhs.true.60, label %if.end.76

land.lhs.true.60:                                 ; preds = %if.end.57
  %34 = load i64, i64* %start.addr, align 8
  %shr61 = ashr i64 %34, 2
  %35 = load i64, i64* %endpos, align 8
  %cmp62 = icmp eq i64 %shr61, %35
  br i1 %cmp62, label %if.then.68, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %land.lhs.true.60
  %36 = load i64, i64* %end.addr, align 8
  %shr65 = ashr i64 %36, 2
  %37 = load i64, i64* %endpos, align 8
  %cmp66 = icmp eq i64 %shr65, %37
  br i1 %cmp66, label %if.then.68, label %if.end.76

if.then.68:                                       ; preds = %lor.lhs.false.64, %land.lhs.true.60
  %38 = load i64, i64* %overlay, align 8
  %call69 = call i64 @builtin_lisp_symbol(i32 552)
  %call70 = call i64 @Foverlay_get(i64 %38, i64 %call69)
  store i64 %call70, i64* %prop, align 8
  %39 = load i64, i64* %prop, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp72 = icmp eq i64 %39, %call71
  br i1 %cmp72, label %if.end.75, label %if.then.74

if.then.74:                                       ; preds = %if.then.68
  %40 = load i64, i64* %prop, align 8
  %41 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %40, i64 %41)
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %if.then.68
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %lor.lhs.false.64, %if.end.57
  %42 = load i64, i64* %end.addr, align 8
  %shr77 = ashr i64 %42, 2
  %43 = load i64, i64* %startpos, align 8
  %cmp78 = icmp sgt i64 %shr77, %43
  br i1 %cmp78, label %land.lhs.true.80, label %if.end.92

land.lhs.true.80:                                 ; preds = %if.end.76
  %44 = load i64, i64* %start.addr, align 8
  %shr81 = ashr i64 %44, 2
  %45 = load i64, i64* %endpos, align 8
  %cmp82 = icmp slt i64 %shr81, %45
  br i1 %cmp82, label %if.then.84, label %if.end.92

if.then.84:                                       ; preds = %land.lhs.true.80
  %46 = load i64, i64* %overlay, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 676)
  %call86 = call i64 @Foverlay_get(i64 %46, i64 %call85)
  store i64 %call86, i64* %prop, align 8
  %47 = load i64, i64* %prop, align 8
  %call87 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp88 = icmp eq i64 %47, %call87
  br i1 %cmp88, label %if.end.91, label %if.then.90

if.then.90:                                       ; preds = %if.then.84
  %48 = load i64, i64* %prop, align 8
  %49 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %48, i64 %49)
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.90, %if.then.84
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %land.lhs.true.80, %if.end.76
  br label %for.inc

for.inc:                                          ; preds = %if.end.92
  %50 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %50, i32 0, i32 1
  %51 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %51, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.26, %for.cond
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 96
  %53 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %53, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.93

for.cond.93:                                      ; preds = %for.inc.190, %for.end
  %54 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool94 = icmp ne %struct.Lisp_Overlay* %54, null
  br i1 %tobool94, label %for.body.95, label %for.end.192

for.body.95:                                      ; preds = %for.cond.93
  %55 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %56 = bitcast %struct.Lisp_Overlay* %55 to i8*
  %call100 = call i64 @make_lisp_ptr(i8* %56, i32 1)
  store i64 %call100, i64* %overlay, align 8
  %57 = load i64, i64* %overlay, align 8
  %call101 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %57)
  %start102 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call101, i32 0, i32 2
  %58 = load i64, i64* %start102, align 8
  store i64 %58, i64* %ostart98, align 8
  %59 = load i64, i64* %overlay, align 8
  %call103 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %59)
  %end104 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call103, i32 0, i32 3
  %60 = load i64, i64* %end104, align 8
  store i64 %60, i64* %oend99, align 8
  %61 = load i64, i64* %ostart98, align 8
  %and105 = and i64 %61, 7
  %conv106 = trunc i64 %and105 to i32
  %cmp107 = icmp eq i32 %conv106, 1
  br i1 %cmp107, label %land.lhs.true.109, label %cond.false.115

land.lhs.true.109:                                ; preds = %for.body.95
  %62 = load i64, i64* %ostart98, align 8
  %call110 = call i32 @XMISCTYPE(i64 %62)
  %cmp111 = icmp eq i32 %call110, 24236
  br i1 %cmp111, label %cond.true.113, label %cond.false.115

cond.true.113:                                    ; preds = %land.lhs.true.109
  %63 = load i64, i64* %ostart98, align 8
  %call114 = call i64 @marker_position(i64 %63)
  br label %cond.end.116

cond.false.115:                                   ; preds = %land.lhs.true.109, %for.body.95
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.116

cond.end.116:                                     ; preds = %64, %cond.true.113
  %cond117 = phi i64 [ %call114, %cond.true.113 ], [ 0, %64 ]
  store i64 %cond117, i64* %startpos96, align 8
  %65 = load i64, i64* %oend99, align 8
  %and118 = and i64 %65, 7
  %conv119 = trunc i64 %and118 to i32
  %cmp120 = icmp eq i32 %conv119, 1
  br i1 %cmp120, label %land.lhs.true.122, label %cond.false.128

land.lhs.true.122:                                ; preds = %cond.end.116
  %66 = load i64, i64* %oend99, align 8
  %call123 = call i32 @XMISCTYPE(i64 %66)
  %cmp124 = icmp eq i32 %call123, 24236
  br i1 %cmp124, label %cond.true.126, label %cond.false.128

cond.true.126:                                    ; preds = %land.lhs.true.122
  %67 = load i64, i64* %oend99, align 8
  %call127 = call i64 @marker_position(i64 %67)
  br label %cond.end.129

cond.false.128:                                   ; preds = %land.lhs.true.122, %cond.end.116
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.129

cond.end.129:                                     ; preds = %68, %cond.true.126
  %cond130 = phi i64 [ %call127, %cond.true.126 ], [ 0, %68 ]
  store i64 %cond130, i64* %endpos97, align 8
  %69 = load i64, i64* %end.addr, align 8
  %shr131 = ashr i64 %69, 2
  %70 = load i64, i64* %startpos96, align 8
  %cmp132 = icmp slt i64 %shr131, %70
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %cond.end.129
  br label %for.end.192

if.end.135:                                       ; preds = %cond.end.129
  %71 = load i8, i8* %insertion, align 1
  %tobool136 = trunc i8 %71 to i1
  br i1 %tobool136, label %land.lhs.true.138, label %if.end.154

land.lhs.true.138:                                ; preds = %if.end.135
  %72 = load i64, i64* %start.addr, align 8
  %shr139 = ashr i64 %72, 2
  %73 = load i64, i64* %startpos96, align 8
  %cmp140 = icmp eq i64 %shr139, %73
  br i1 %cmp140, label %if.then.146, label %lor.lhs.false.142

lor.lhs.false.142:                                ; preds = %land.lhs.true.138
  %74 = load i64, i64* %end.addr, align 8
  %shr143 = ashr i64 %74, 2
  %75 = load i64, i64* %startpos96, align 8
  %cmp144 = icmp eq i64 %shr143, %75
  br i1 %cmp144, label %if.then.146, label %if.end.154

if.then.146:                                      ; preds = %lor.lhs.false.142, %land.lhs.true.138
  %76 = load i64, i64* %overlay, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 554)
  %call148 = call i64 @Foverlay_get(i64 %76, i64 %call147)
  store i64 %call148, i64* %prop, align 8
  %77 = load i64, i64* %prop, align 8
  %call149 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp150 = icmp eq i64 %77, %call149
  br i1 %cmp150, label %if.end.153, label %if.then.152

if.then.152:                                      ; preds = %if.then.146
  %78 = load i64, i64* %prop, align 8
  %79 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %78, i64 %79)
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.152, %if.then.146
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %lor.lhs.false.142, %if.end.135
  %80 = load i8, i8* %insertion, align 1
  %tobool155 = trunc i8 %80 to i1
  br i1 %tobool155, label %land.lhs.true.157, label %if.end.173

land.lhs.true.157:                                ; preds = %if.end.154
  %81 = load i64, i64* %start.addr, align 8
  %shr158 = ashr i64 %81, 2
  %82 = load i64, i64* %endpos97, align 8
  %cmp159 = icmp eq i64 %shr158, %82
  br i1 %cmp159, label %if.then.165, label %lor.lhs.false.161

lor.lhs.false.161:                                ; preds = %land.lhs.true.157
  %83 = load i64, i64* %end.addr, align 8
  %shr162 = ashr i64 %83, 2
  %84 = load i64, i64* %endpos97, align 8
  %cmp163 = icmp eq i64 %shr162, %84
  br i1 %cmp163, label %if.then.165, label %if.end.173

if.then.165:                                      ; preds = %lor.lhs.false.161, %land.lhs.true.157
  %85 = load i64, i64* %overlay, align 8
  %call166 = call i64 @builtin_lisp_symbol(i32 552)
  %call167 = call i64 @Foverlay_get(i64 %85, i64 %call166)
  store i64 %call167, i64* %prop, align 8
  %86 = load i64, i64* %prop, align 8
  %call168 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp169 = icmp eq i64 %86, %call168
  br i1 %cmp169, label %if.end.172, label %if.then.171

if.then.171:                                      ; preds = %if.then.165
  %87 = load i64, i64* %prop, align 8
  %88 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %87, i64 %88)
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.171, %if.then.165
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %lor.lhs.false.161, %if.end.154
  %89 = load i64, i64* %end.addr, align 8
  %shr174 = ashr i64 %89, 2
  %90 = load i64, i64* %startpos96, align 8
  %cmp175 = icmp sgt i64 %shr174, %90
  br i1 %cmp175, label %land.lhs.true.177, label %if.end.189

land.lhs.true.177:                                ; preds = %if.end.173
  %91 = load i64, i64* %start.addr, align 8
  %shr178 = ashr i64 %91, 2
  %92 = load i64, i64* %endpos97, align 8
  %cmp179 = icmp slt i64 %shr178, %92
  br i1 %cmp179, label %if.then.181, label %if.end.189

if.then.181:                                      ; preds = %land.lhs.true.177
  %93 = load i64, i64* %overlay, align 8
  %call182 = call i64 @builtin_lisp_symbol(i32 676)
  %call183 = call i64 @Foverlay_get(i64 %93, i64 %call182)
  store i64 %call183, i64* %prop, align 8
  %94 = load i64, i64* %prop, align 8
  %call184 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp185 = icmp eq i64 %94, %call184
  br i1 %cmp185, label %if.end.188, label %if.then.187

if.then.187:                                      ; preds = %if.then.181
  %95 = load i64, i64* %prop, align 8
  %96 = load i64, i64* %overlay, align 8
  call void @add_overlay_mod_hooklist(i64 %95, i64 %96)
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.187, %if.then.181
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %land.lhs.true.177, %if.end.173
  br label %for.inc.190

for.inc.190:                                      ; preds = %if.end.189
  %97 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next191 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %97, i32 0, i32 1
  %98 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next191, align 8
  store %struct.Lisp_Overlay* %98, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.93

for.end.192:                                      ; preds = %if.then.134, %for.cond.93
  br label %if.end.193

if.end.193:                                       ; preds = %for.end.192, %cond.end
  %99 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  store i64 %99, i64* %size, align 8
  %100 = load i64, i64* %size, align 8
  %tobool194 = icmp ne i64 %100, 0
  br i1 %tobool194, label %if.then.195, label %if.end.204

if.then.195:                                      ; preds = %if.end.193
  %101 = load i64, i64* @last_overlay_modification_hooks, align 8
  %call196 = call %struct.Lisp_Vector* @XVECTOR(i64 %101)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call196, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 1
  %102 = load i64, i64* %arrayidx, align 8
  store i64 %102, i64* %ovl, align 8
  %103 = load i64, i64* %ovl, align 8
  %call197 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %103)
  %start198 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call197, i32 0, i32 2
  %104 = load i64, i64* %start198, align 8
  %call199 = call %struct.Lisp_Marker* @XMARKER(i64 %104)
  %buffer = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call199, i32 0, i32 1
  %105 = load %struct.buffer*, %struct.buffer** %buffer, align 8
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp200 = icmp ne %struct.buffer* %105, %106
  br i1 %cmp200, label %if.then.202, label %if.end.203

if.then.202:                                      ; preds = %if.then.195
  br label %do.end.2404

if.end.203:                                       ; preds = %if.then.195
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %if.end.193
  store i64 16384, i64* %sa_avail, align 8
  %call205 = call i64 @SPECPDL_INDEX()
  store i64 %call205, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %if.end.204
  br i1 false, label %cond.true.206, label %cond.false.684

cond.true.206:                                    ; preds = %do.body
  br i1 false, label %cond.true.207, label %cond.false.469

cond.true.207:                                    ; preds = %cond.true.206
  %107 = load i64, i64* %size, align 8
  %conv208 = trunc i64 %107 to i8
  %conv209 = sext i8 %conv208 to i32
  %add = add nsw i32 0, %conv209
  %mul = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul, 1
  %cmp210 = icmp slt i32 %sub, 0
  br i1 %cmp210, label %cond.true.212, label %cond.false.230

cond.true.212:                                    ; preds = %cond.true.207
  %108 = load i64, i64* %size, align 8
  %conv213 = trunc i64 %108 to i8
  %conv214 = sext i8 %conv213 to i32
  %add215 = add nsw i32 0, %conv214
  %mul216 = mul nsw i32 0, %add215
  %add217 = add nsw i32 %mul216, 0
  %neg = xor i32 %add217, -1
  %cmp218 = icmp eq i32 %neg, -1
  %conv219 = zext i1 %cmp218 to i32
  %sub220 = sub nsw i32 0, %conv219
  %109 = load i64, i64* %size, align 8
  %conv221 = trunc i64 %109 to i8
  %conv222 = sext i8 %conv221 to i32
  %add223 = add nsw i32 0, %conv222
  %mul224 = mul nsw i32 0, %add223
  %add225 = add nsw i32 %mul224, 1
  %shl = shl i32 %add225, 30
  %sub226 = sub nsw i32 %shl, 1
  %mul227 = mul nsw i32 %sub226, 2
  %add228 = add nsw i32 %mul227, 1
  %sub229 = sub nsw i32 %sub220, %add228
  br label %cond.end.236

cond.false.230:                                   ; preds = %cond.true.207
  %110 = load i64, i64* %size, align 8
  %conv231 = trunc i64 %110 to i8
  %conv232 = sext i8 %conv231 to i32
  %add233 = add nsw i32 0, %conv232
  %mul234 = mul nsw i32 0, %add233
  %add235 = add nsw i32 %mul234, 0
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.false.230, %cond.true.212
  %cond237 = phi i32 [ %sub229, %cond.true.212 ], [ %add235, %cond.false.230 ]
  %cmp238 = icmp eq i32 %cond237, 0
  br i1 %cmp238, label %land.lhs.true.240, label %lor.lhs.false.245

land.lhs.true.240:                                ; preds = %cond.end.236
  %111 = load i64, i64* %size, align 8
  %conv241 = trunc i64 %111 to i8
  %conv242 = sext i8 %conv241 to i32
  %cmp243 = icmp slt i32 %conv242, 0
  br i1 %cmp243, label %cond.true.423, label %lor.lhs.false.245

lor.lhs.false.245:                                ; preds = %land.lhs.true.240, %cond.end.236
  br i1 false, label %cond.true.246, label %cond.false.324

cond.true.246:                                    ; preds = %lor.lhs.false.245
  %112 = load i64, i64* %size, align 8
  %conv247 = trunc i64 %112 to i8
  %conv248 = sext i8 %conv247 to i32
  %cmp249 = icmp slt i32 %conv248, 0
  br i1 %cmp249, label %cond.true.251, label %cond.false.281

cond.true.251:                                    ; preds = %cond.true.246
  %113 = load i64, i64* %size, align 8
  %conv252 = trunc i64 %113 to i8
  %conv253 = sext i8 %conv252 to i32
  %114 = load i64, i64* %size, align 8
  %conv254 = trunc i64 %114 to i8
  %conv255 = sext i8 %conv254 to i32
  %add256 = add nsw i32 0, %conv255
  %mul257 = mul nsw i32 0, %add256
  %sub258 = sub nsw i32 %mul257, 1
  %cmp259 = icmp slt i32 %sub258, 0
  br i1 %cmp259, label %cond.true.261, label %cond.false.271

cond.true.261:                                    ; preds = %cond.true.251
  %115 = load i64, i64* %size, align 8
  %conv262 = trunc i64 %115 to i8
  %conv263 = sext i8 %conv262 to i32
  %add264 = add nsw i32 0, %conv263
  %mul265 = mul nsw i32 0, %add264
  %add266 = add nsw i32 %mul265, 1
  %shl267 = shl i32 %add266, 30
  %sub268 = sub nsw i32 %shl267, 1
  %mul269 = mul nsw i32 %sub268, 2
  %add270 = add nsw i32 %mul269, 1
  br label %cond.end.277

cond.false.271:                                   ; preds = %cond.true.251
  %116 = load i64, i64* %size, align 8
  %conv272 = trunc i64 %116 to i8
  %conv273 = sext i8 %conv272 to i32
  %add274 = add nsw i32 0, %conv273
  %mul275 = mul nsw i32 0, %add274
  %sub276 = sub nsw i32 %mul275, 1
  br label %cond.end.277

cond.end.277:                                     ; preds = %cond.false.271, %cond.true.261
  %cond278 = phi i32 [ %add270, %cond.true.261 ], [ %sub276, %cond.false.271 ]
  %div = sdiv i32 %cond278, 8
  %cmp279 = icmp slt i32 %conv253, %div
  br i1 %cmp279, label %cond.true.423, label %lor.lhs.false.403

cond.false.281:                                   ; preds = %cond.true.246
  br i1 false, label %cond.true.282, label %cond.false.283

cond.true.282:                                    ; preds = %cond.false.281
  br i1 false, label %cond.true.423, label %lor.lhs.false.403

cond.false.283:                                   ; preds = %cond.false.281
  %117 = load i64, i64* %size, align 8
  %conv284 = trunc i64 %117 to i8
  %conv285 = sext i8 %conv284 to i32
  %add286 = add nsw i32 0, %conv285
  %mul287 = mul nsw i32 0, %add286
  %sub288 = sub nsw i32 %mul287, 1
  %cmp289 = icmp slt i32 %sub288, 0
  br i1 %cmp289, label %cond.true.291, label %cond.false.311

cond.true.291:                                    ; preds = %cond.false.283
  %118 = load i64, i64* %size, align 8
  %conv292 = trunc i64 %118 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 0, %conv293
  %mul295 = mul nsw i32 0, %add294
  %add296 = add nsw i32 %mul295, 0
  %neg297 = xor i32 %add296, -1
  %cmp298 = icmp eq i32 %neg297, -1
  %conv299 = zext i1 %cmp298 to i32
  %sub300 = sub nsw i32 0, %conv299
  %119 = load i64, i64* %size, align 8
  %conv301 = trunc i64 %119 to i8
  %conv302 = sext i8 %conv301 to i32
  %add303 = add nsw i32 0, %conv302
  %mul304 = mul nsw i32 0, %add303
  %add305 = add nsw i32 %mul304, 1
  %shl306 = shl i32 %add305, 30
  %sub307 = sub nsw i32 %shl306, 1
  %mul308 = mul nsw i32 %sub307, 2
  %add309 = add nsw i32 %mul308, 1
  %sub310 = sub nsw i32 %sub300, %add309
  br label %cond.end.317

cond.false.311:                                   ; preds = %cond.false.283
  %120 = load i64, i64* %size, align 8
  %conv312 = trunc i64 %120 to i8
  %conv313 = sext i8 %conv312 to i32
  %add314 = add nsw i32 0, %conv313
  %mul315 = mul nsw i32 0, %add314
  %add316 = add nsw i32 %mul315, 0
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.false.311, %cond.true.291
  %cond318 = phi i32 [ %sub310, %cond.true.291 ], [ %add316, %cond.false.311 ]
  %div319 = sdiv i32 %cond318, 8
  %121 = load i64, i64* %size, align 8
  %conv320 = trunc i64 %121 to i8
  %conv321 = sext i8 %conv320 to i32
  %cmp322 = icmp slt i32 %div319, %conv321
  br i1 %cmp322, label %cond.true.423, label %lor.lhs.false.403

cond.false.324:                                   ; preds = %lor.lhs.false.245
  br i1 false, label %cond.true.325, label %cond.false.326

cond.true.325:                                    ; preds = %cond.false.324
  br i1 false, label %cond.true.423, label %lor.lhs.false.403

cond.false.326:                                   ; preds = %cond.false.324
  %122 = load i64, i64* %size, align 8
  %conv327 = trunc i64 %122 to i8
  %conv328 = sext i8 %conv327 to i32
  %cmp329 = icmp slt i32 %conv328, 0
  br i1 %cmp329, label %cond.true.331, label %cond.false.372

cond.true.331:                                    ; preds = %cond.false.326
  %123 = load i64, i64* %size, align 8
  %conv332 = trunc i64 %123 to i8
  %conv333 = sext i8 %conv332 to i32
  %124 = load i64, i64* %size, align 8
  %conv334 = trunc i64 %124 to i8
  %conv335 = sext i8 %conv334 to i32
  %add336 = add nsw i32 0, %conv335
  %mul337 = mul nsw i32 0, %add336
  %sub338 = sub nsw i32 %mul337, 1
  %cmp339 = icmp slt i32 %sub338, 0
  br i1 %cmp339, label %cond.true.341, label %cond.false.361

cond.true.341:                                    ; preds = %cond.true.331
  %125 = load i64, i64* %size, align 8
  %conv342 = trunc i64 %125 to i8
  %conv343 = sext i8 %conv342 to i32
  %add344 = add nsw i32 0, %conv343
  %mul345 = mul nsw i32 0, %add344
  %add346 = add nsw i32 %mul345, 0
  %neg347 = xor i32 %add346, -1
  %cmp348 = icmp eq i32 %neg347, -1
  %conv349 = zext i1 %cmp348 to i32
  %sub350 = sub nsw i32 0, %conv349
  %126 = load i64, i64* %size, align 8
  %conv351 = trunc i64 %126 to i8
  %conv352 = sext i8 %conv351 to i32
  %add353 = add nsw i32 0, %conv352
  %mul354 = mul nsw i32 0, %add353
  %add355 = add nsw i32 %mul354, 1
  %shl356 = shl i32 %add355, 30
  %sub357 = sub nsw i32 %shl356, 1
  %mul358 = mul nsw i32 %sub357, 2
  %add359 = add nsw i32 %mul358, 1
  %sub360 = sub nsw i32 %sub350, %add359
  br label %cond.end.367

cond.false.361:                                   ; preds = %cond.true.331
  %127 = load i64, i64* %size, align 8
  %conv362 = trunc i64 %127 to i8
  %conv363 = sext i8 %conv362 to i32
  %add364 = add nsw i32 0, %conv363
  %mul365 = mul nsw i32 0, %add364
  %add366 = add nsw i32 %mul365, 0
  br label %cond.end.367

cond.end.367:                                     ; preds = %cond.false.361, %cond.true.341
  %cond368 = phi i32 [ %sub360, %cond.true.341 ], [ %add366, %cond.false.361 ]
  %div369 = sdiv i32 %cond368, 8
  %cmp370 = icmp slt i32 %conv333, %div369
  br i1 %cmp370, label %cond.true.423, label %lor.lhs.false.403

cond.false.372:                                   ; preds = %cond.false.326
  %128 = load i64, i64* %size, align 8
  %conv373 = trunc i64 %128 to i8
  %conv374 = sext i8 %conv373 to i32
  %add375 = add nsw i32 0, %conv374
  %mul376 = mul nsw i32 0, %add375
  %sub377 = sub nsw i32 %mul376, 1
  %cmp378 = icmp slt i32 %sub377, 0
  br i1 %cmp378, label %cond.true.380, label %cond.false.390

cond.true.380:                                    ; preds = %cond.false.372
  %129 = load i64, i64* %size, align 8
  %conv381 = trunc i64 %129 to i8
  %conv382 = sext i8 %conv381 to i32
  %add383 = add nsw i32 0, %conv382
  %mul384 = mul nsw i32 0, %add383
  %add385 = add nsw i32 %mul384, 1
  %shl386 = shl i32 %add385, 30
  %sub387 = sub nsw i32 %shl386, 1
  %mul388 = mul nsw i32 %sub387, 2
  %add389 = add nsw i32 %mul388, 1
  br label %cond.end.396

cond.false.390:                                   ; preds = %cond.false.372
  %130 = load i64, i64* %size, align 8
  %conv391 = trunc i64 %130 to i8
  %conv392 = sext i8 %conv391 to i32
  %add393 = add nsw i32 0, %conv392
  %mul394 = mul nsw i32 0, %add393
  %sub395 = sub nsw i32 %mul394, 1
  br label %cond.end.396

cond.end.396:                                     ; preds = %cond.false.390, %cond.true.380
  %cond397 = phi i32 [ %add389, %cond.true.380 ], [ %sub395, %cond.false.390 ]
  %div398 = sdiv i32 %cond397, 8
  %131 = load i64, i64* %size, align 8
  %conv399 = trunc i64 %131 to i8
  %conv400 = sext i8 %conv399 to i32
  %cmp401 = icmp slt i32 %div398, %conv400
  br i1 %cmp401, label %cond.true.423, label %lor.lhs.false.403

lor.lhs.false.403:                                ; preds = %cond.end.396, %cond.end.367, %cond.true.325, %cond.end.317, %cond.true.282, %cond.end.277
  %132 = load i64, i64* %size, align 8
  %conv404 = trunc i64 %132 to i8
  %conv405 = sext i8 %conv404 to i32
  %mul406 = mul nsw i32 %conv405, 8
  %mul407 = mul nsw i32 0, %mul406
  %sub408 = sub nsw i32 %mul407, 1
  %cmp409 = icmp slt i32 %sub408, 0
  br i1 %cmp409, label %land.lhs.true.411, label %lor.lhs.false.417

land.lhs.true.411:                                ; preds = %lor.lhs.false.403
  %133 = load i64, i64* %size, align 8
  %conv412 = trunc i64 %133 to i8
  %conv413 = sext i8 %conv412 to i32
  %mul414 = mul nsw i32 %conv413, 8
  %cmp415 = icmp slt i32 %mul414, -128
  br i1 %cmp415, label %cond.true.423, label %lor.lhs.false.417

lor.lhs.false.417:                                ; preds = %land.lhs.true.411, %lor.lhs.false.403
  %134 = load i64, i64* %size, align 8
  %conv418 = trunc i64 %134 to i8
  %conv419 = sext i8 %conv418 to i32
  %mul420 = mul nsw i32 %conv419, 8
  %cmp421 = icmp slt i32 127, %mul420
  br i1 %cmp421, label %cond.true.423, label %cond.false.446

cond.true.423:                                    ; preds = %lor.lhs.false.417, %land.lhs.true.411, %cond.end.396, %cond.end.367, %cond.true.325, %cond.end.317, %cond.true.282, %cond.end.277, %land.lhs.true.240
  %135 = load i64, i64* %size, align 8
  %conv424 = trunc i64 %135 to i8
  %conv425 = zext i8 %conv424 to i32
  %mul426 = mul nsw i32 %conv425, 8
  %cmp427 = icmp sle i32 %mul426, 127
  br i1 %cmp427, label %cond.true.429, label %cond.false.435

cond.true.429:                                    ; preds = %cond.true.423
  %136 = load i64, i64* %size, align 8
  %conv430 = trunc i64 %136 to i8
  %conv431 = zext i8 %conv430 to i32
  %mul432 = mul nsw i32 %conv431, 8
  %conv433 = trunc i32 %mul432 to i8
  %conv434 = sext i8 %conv433 to i32
  br label %cond.end.443

cond.false.435:                                   ; preds = %cond.true.423
  %137 = load i64, i64* %size, align 8
  %conv436 = trunc i64 %137 to i8
  %conv437 = zext i8 %conv436 to i32
  %mul438 = mul nsw i32 %conv437, 8
  %sub439 = sub nsw i32 %mul438, -128
  %conv440 = trunc i32 %sub439 to i8
  %conv441 = sext i8 %conv440 to i32
  %add442 = add nsw i32 %conv441, -128
  br label %cond.end.443

cond.end.443:                                     ; preds = %cond.false.435, %cond.true.429
  %cond444 = phi i32 [ %conv434, %cond.true.429 ], [ %add442, %cond.false.435 ]
  %conv445 = sext i32 %cond444 to i64
  store i64 %conv445, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.446:                                   ; preds = %lor.lhs.false.417
  %138 = load i64, i64* %size, align 8
  %conv447 = trunc i64 %138 to i8
  %conv448 = zext i8 %conv447 to i32
  %mul449 = mul nsw i32 %conv448, 8
  %cmp450 = icmp sle i32 %mul449, 127
  br i1 %cmp450, label %cond.true.452, label %cond.false.458

cond.true.452:                                    ; preds = %cond.false.446
  %139 = load i64, i64* %size, align 8
  %conv453 = trunc i64 %139 to i8
  %conv454 = zext i8 %conv453 to i32
  %mul455 = mul nsw i32 %conv454, 8
  %conv456 = trunc i32 %mul455 to i8
  %conv457 = sext i8 %conv456 to i32
  br label %cond.end.466

cond.false.458:                                   ; preds = %cond.false.446
  %140 = load i64, i64* %size, align 8
  %conv459 = trunc i64 %140 to i8
  %conv460 = zext i8 %conv459 to i32
  %mul461 = mul nsw i32 %conv460, 8
  %sub462 = sub nsw i32 %mul461, -128
  %conv463 = trunc i32 %sub462 to i8
  %conv464 = sext i8 %conv463 to i32
  %add465 = add nsw i32 %conv464, -128
  br label %cond.end.466

cond.end.466:                                     ; preds = %cond.false.458, %cond.true.452
  %cond467 = phi i32 [ %conv457, %cond.true.452 ], [ %add465, %cond.false.458 ]
  %conv468 = sext i32 %cond467 to i64
  store i64 %conv468, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.469:                                   ; preds = %cond.true.206
  %141 = load i64, i64* %size, align 8
  %add470 = add nsw i64 0, %141
  %mul471 = mul nsw i64 0, %add470
  %sub472 = sub nsw i64 %mul471, 1
  %cmp473 = icmp slt i64 %sub472, 0
  br i1 %cmp473, label %cond.true.475, label %cond.false.492

cond.true.475:                                    ; preds = %cond.false.469
  %142 = load i64, i64* %size, align 8
  %add476 = add nsw i64 0, %142
  %mul477 = mul nsw i64 0, %add476
  %add478 = add nsw i64 %mul477, 0
  %neg479 = xor i64 %add478, -1
  %cmp480 = icmp eq i64 %neg479, -1
  %conv481 = zext i1 %cmp480 to i32
  %sub482 = sub nsw i32 0, %conv481
  %conv483 = sext i32 %sub482 to i64
  %143 = load i64, i64* %size, align 8
  %add484 = add nsw i64 0, %143
  %mul485 = mul nsw i64 0, %add484
  %add486 = add nsw i64 %mul485, 1
  %shl487 = shl i64 %add486, 62
  %sub488 = sub nsw i64 %shl487, 1
  %mul489 = mul nsw i64 %sub488, 2
  %add490 = add nsw i64 %mul489, 1
  %sub491 = sub nsw i64 %conv483, %add490
  br label %cond.end.496

cond.false.492:                                   ; preds = %cond.false.469
  %144 = load i64, i64* %size, align 8
  %add493 = add nsw i64 0, %144
  %mul494 = mul nsw i64 0, %add493
  %add495 = add nsw i64 %mul494, 0
  br label %cond.end.496

cond.end.496:                                     ; preds = %cond.false.492, %cond.true.475
  %cond497 = phi i64 [ %sub491, %cond.true.475 ], [ %add495, %cond.false.492 ]
  %cmp498 = icmp eq i64 %cond497, 0
  br i1 %cmp498, label %land.lhs.true.500, label %lor.lhs.false.503

land.lhs.true.500:                                ; preds = %cond.end.496
  %145 = load i64, i64* %size, align 8
  %cmp501 = icmp slt i64 %145, 0
  br i1 %cmp501, label %cond.true.638, label %lor.lhs.false.503

lor.lhs.false.503:                                ; preds = %land.lhs.true.500, %cond.end.496
  br i1 false, label %cond.true.504, label %cond.false.564

cond.true.504:                                    ; preds = %lor.lhs.false.503
  %146 = load i64, i64* %size, align 8
  %cmp505 = icmp slt i64 %146, 0
  br i1 %cmp505, label %cond.true.507, label %cond.false.530

cond.true.507:                                    ; preds = %cond.true.504
  %147 = load i64, i64* %size, align 8
  %148 = load i64, i64* %size, align 8
  %add508 = add nsw i64 0, %148
  %mul509 = mul nsw i64 0, %add508
  %sub510 = sub nsw i64 %mul509, 1
  %cmp511 = icmp slt i64 %sub510, 0
  br i1 %cmp511, label %cond.true.513, label %cond.false.521

cond.true.513:                                    ; preds = %cond.true.507
  %149 = load i64, i64* %size, align 8
  %add514 = add nsw i64 0, %149
  %mul515 = mul nsw i64 0, %add514
  %add516 = add nsw i64 %mul515, 1
  %shl517 = shl i64 %add516, 62
  %sub518 = sub nsw i64 %shl517, 1
  %mul519 = mul nsw i64 %sub518, 2
  %add520 = add nsw i64 %mul519, 1
  br label %cond.end.525

cond.false.521:                                   ; preds = %cond.true.507
  %150 = load i64, i64* %size, align 8
  %add522 = add nsw i64 0, %150
  %mul523 = mul nsw i64 0, %add522
  %sub524 = sub nsw i64 %mul523, 1
  br label %cond.end.525

cond.end.525:                                     ; preds = %cond.false.521, %cond.true.513
  %cond526 = phi i64 [ %add520, %cond.true.513 ], [ %sub524, %cond.false.521 ]
  %div527 = sdiv i64 %cond526, 8
  %cmp528 = icmp slt i64 %147, %div527
  br i1 %cmp528, label %cond.true.638, label %lor.lhs.false.624

cond.false.530:                                   ; preds = %cond.true.504
  br i1 false, label %cond.true.531, label %cond.false.532

cond.true.531:                                    ; preds = %cond.false.530
  br i1 false, label %cond.true.638, label %lor.lhs.false.624

cond.false.532:                                   ; preds = %cond.false.530
  %151 = load i64, i64* %size, align 8
  %add533 = add nsw i64 0, %151
  %mul534 = mul nsw i64 0, %add533
  %sub535 = sub nsw i64 %mul534, 1
  %cmp536 = icmp slt i64 %sub535, 0
  br i1 %cmp536, label %cond.true.538, label %cond.false.555

cond.true.538:                                    ; preds = %cond.false.532
  %152 = load i64, i64* %size, align 8
  %add539 = add nsw i64 0, %152
  %mul540 = mul nsw i64 0, %add539
  %add541 = add nsw i64 %mul540, 0
  %neg542 = xor i64 %add541, -1
  %cmp543 = icmp eq i64 %neg542, -1
  %conv544 = zext i1 %cmp543 to i32
  %sub545 = sub nsw i32 0, %conv544
  %conv546 = sext i32 %sub545 to i64
  %153 = load i64, i64* %size, align 8
  %add547 = add nsw i64 0, %153
  %mul548 = mul nsw i64 0, %add547
  %add549 = add nsw i64 %mul548, 1
  %shl550 = shl i64 %add549, 62
  %sub551 = sub nsw i64 %shl550, 1
  %mul552 = mul nsw i64 %sub551, 2
  %add553 = add nsw i64 %mul552, 1
  %sub554 = sub nsw i64 %conv546, %add553
  br label %cond.end.559

cond.false.555:                                   ; preds = %cond.false.532
  %154 = load i64, i64* %size, align 8
  %add556 = add nsw i64 0, %154
  %mul557 = mul nsw i64 0, %add556
  %add558 = add nsw i64 %mul557, 0
  br label %cond.end.559

cond.end.559:                                     ; preds = %cond.false.555, %cond.true.538
  %cond560 = phi i64 [ %sub554, %cond.true.538 ], [ %add558, %cond.false.555 ]
  %div561 = sdiv i64 %cond560, 8
  %155 = load i64, i64* %size, align 8
  %cmp562 = icmp slt i64 %div561, %155
  br i1 %cmp562, label %cond.true.638, label %lor.lhs.false.624

cond.false.564:                                   ; preds = %lor.lhs.false.503
  br i1 false, label %cond.true.565, label %cond.false.566

cond.true.565:                                    ; preds = %cond.false.564
  br i1 false, label %cond.true.638, label %lor.lhs.false.624

cond.false.566:                                   ; preds = %cond.false.564
  %156 = load i64, i64* %size, align 8
  %cmp567 = icmp slt i64 %156, 0
  br i1 %cmp567, label %cond.true.569, label %cond.false.601

cond.true.569:                                    ; preds = %cond.false.566
  %157 = load i64, i64* %size, align 8
  %158 = load i64, i64* %size, align 8
  %add570 = add nsw i64 0, %158
  %mul571 = mul nsw i64 0, %add570
  %sub572 = sub nsw i64 %mul571, 1
  %cmp573 = icmp slt i64 %sub572, 0
  br i1 %cmp573, label %cond.true.575, label %cond.false.592

cond.true.575:                                    ; preds = %cond.true.569
  %159 = load i64, i64* %size, align 8
  %add576 = add nsw i64 0, %159
  %mul577 = mul nsw i64 0, %add576
  %add578 = add nsw i64 %mul577, 0
  %neg579 = xor i64 %add578, -1
  %cmp580 = icmp eq i64 %neg579, -1
  %conv581 = zext i1 %cmp580 to i32
  %sub582 = sub nsw i32 0, %conv581
  %conv583 = sext i32 %sub582 to i64
  %160 = load i64, i64* %size, align 8
  %add584 = add nsw i64 0, %160
  %mul585 = mul nsw i64 0, %add584
  %add586 = add nsw i64 %mul585, 1
  %shl587 = shl i64 %add586, 62
  %sub588 = sub nsw i64 %shl587, 1
  %mul589 = mul nsw i64 %sub588, 2
  %add590 = add nsw i64 %mul589, 1
  %sub591 = sub nsw i64 %conv583, %add590
  br label %cond.end.596

cond.false.592:                                   ; preds = %cond.true.569
  %161 = load i64, i64* %size, align 8
  %add593 = add nsw i64 0, %161
  %mul594 = mul nsw i64 0, %add593
  %add595 = add nsw i64 %mul594, 0
  br label %cond.end.596

cond.end.596:                                     ; preds = %cond.false.592, %cond.true.575
  %cond597 = phi i64 [ %sub591, %cond.true.575 ], [ %add595, %cond.false.592 ]
  %div598 = sdiv i64 %cond597, 8
  %cmp599 = icmp slt i64 %157, %div598
  br i1 %cmp599, label %cond.true.638, label %lor.lhs.false.624

cond.false.601:                                   ; preds = %cond.false.566
  %162 = load i64, i64* %size, align 8
  %add602 = add nsw i64 0, %162
  %mul603 = mul nsw i64 0, %add602
  %sub604 = sub nsw i64 %mul603, 1
  %cmp605 = icmp slt i64 %sub604, 0
  br i1 %cmp605, label %cond.true.607, label %cond.false.615

cond.true.607:                                    ; preds = %cond.false.601
  %163 = load i64, i64* %size, align 8
  %add608 = add nsw i64 0, %163
  %mul609 = mul nsw i64 0, %add608
  %add610 = add nsw i64 %mul609, 1
  %shl611 = shl i64 %add610, 62
  %sub612 = sub nsw i64 %shl611, 1
  %mul613 = mul nsw i64 %sub612, 2
  %add614 = add nsw i64 %mul613, 1
  br label %cond.end.619

cond.false.615:                                   ; preds = %cond.false.601
  %164 = load i64, i64* %size, align 8
  %add616 = add nsw i64 0, %164
  %mul617 = mul nsw i64 0, %add616
  %sub618 = sub nsw i64 %mul617, 1
  br label %cond.end.619

cond.end.619:                                     ; preds = %cond.false.615, %cond.true.607
  %cond620 = phi i64 [ %add614, %cond.true.607 ], [ %sub618, %cond.false.615 ]
  %div621 = sdiv i64 %cond620, 8
  %165 = load i64, i64* %size, align 8
  %cmp622 = icmp slt i64 %div621, %165
  br i1 %cmp622, label %cond.true.638, label %lor.lhs.false.624

lor.lhs.false.624:                                ; preds = %cond.end.619, %cond.end.596, %cond.true.565, %cond.end.559, %cond.true.531, %cond.end.525
  %166 = load i64, i64* %size, align 8
  %mul625 = mul nsw i64 %166, 8
  %mul626 = mul nsw i64 0, %mul625
  %sub627 = sub nsw i64 %mul626, 1
  %cmp628 = icmp slt i64 %sub627, 0
  br i1 %cmp628, label %land.lhs.true.630, label %lor.lhs.false.634

land.lhs.true.630:                                ; preds = %lor.lhs.false.624
  %167 = load i64, i64* %size, align 8
  %mul631 = mul nsw i64 %167, 8
  %cmp632 = icmp slt i64 %mul631, -128
  br i1 %cmp632, label %cond.true.638, label %lor.lhs.false.634

lor.lhs.false.634:                                ; preds = %land.lhs.true.630, %lor.lhs.false.624
  %168 = load i64, i64* %size, align 8
  %mul635 = mul nsw i64 %168, 8
  %cmp636 = icmp slt i64 127, %mul635
  br i1 %cmp636, label %cond.true.638, label %cond.false.661

cond.true.638:                                    ; preds = %lor.lhs.false.634, %land.lhs.true.630, %cond.end.619, %cond.end.596, %cond.true.565, %cond.end.559, %cond.true.531, %cond.end.525, %land.lhs.true.500
  %169 = load i64, i64* %size, align 8
  %conv639 = trunc i64 %169 to i8
  %conv640 = zext i8 %conv639 to i32
  %mul641 = mul nsw i32 %conv640, 8
  %cmp642 = icmp sle i32 %mul641, 127
  br i1 %cmp642, label %cond.true.644, label %cond.false.650

cond.true.644:                                    ; preds = %cond.true.638
  %170 = load i64, i64* %size, align 8
  %conv645 = trunc i64 %170 to i8
  %conv646 = zext i8 %conv645 to i32
  %mul647 = mul nsw i32 %conv646, 8
  %conv648 = trunc i32 %mul647 to i8
  %conv649 = sext i8 %conv648 to i32
  br label %cond.end.658

cond.false.650:                                   ; preds = %cond.true.638
  %171 = load i64, i64* %size, align 8
  %conv651 = trunc i64 %171 to i8
  %conv652 = zext i8 %conv651 to i32
  %mul653 = mul nsw i32 %conv652, 8
  %sub654 = sub nsw i32 %mul653, -128
  %conv655 = trunc i32 %sub654 to i8
  %conv656 = sext i8 %conv655 to i32
  %add657 = add nsw i32 %conv656, -128
  br label %cond.end.658

cond.end.658:                                     ; preds = %cond.false.650, %cond.true.644
  %cond659 = phi i32 [ %conv649, %cond.true.644 ], [ %add657, %cond.false.650 ]
  %conv660 = sext i32 %cond659 to i64
  store i64 %conv660, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.661:                                   ; preds = %lor.lhs.false.634
  %172 = load i64, i64* %size, align 8
  %conv662 = trunc i64 %172 to i8
  %conv663 = zext i8 %conv662 to i32
  %mul664 = mul nsw i32 %conv663, 8
  %cmp665 = icmp sle i32 %mul664, 127
  br i1 %cmp665, label %cond.true.667, label %cond.false.673

cond.true.667:                                    ; preds = %cond.false.661
  %173 = load i64, i64* %size, align 8
  %conv668 = trunc i64 %173 to i8
  %conv669 = zext i8 %conv668 to i32
  %mul670 = mul nsw i32 %conv669, 8
  %conv671 = trunc i32 %mul670 to i8
  %conv672 = sext i8 %conv671 to i32
  br label %cond.end.681

cond.false.673:                                   ; preds = %cond.false.661
  %174 = load i64, i64* %size, align 8
  %conv674 = trunc i64 %174 to i8
  %conv675 = zext i8 %conv674 to i32
  %mul676 = mul nsw i32 %conv675, 8
  %sub677 = sub nsw i32 %mul676, -128
  %conv678 = trunc i32 %sub677 to i8
  %conv679 = sext i8 %conv678 to i32
  %add680 = add nsw i32 %conv679, -128
  br label %cond.end.681

cond.end.681:                                     ; preds = %cond.false.673, %cond.true.667
  %cond682 = phi i32 [ %conv672, %cond.true.667 ], [ %add680, %cond.false.673 ]
  %conv683 = sext i32 %cond682 to i64
  store i64 %conv683, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.684:                                   ; preds = %do.body
  br i1 false, label %cond.true.685, label %cond.false.1169

cond.true.685:                                    ; preds = %cond.false.684
  br i1 false, label %cond.true.686, label %cond.false.954

cond.true.686:                                    ; preds = %cond.true.685
  %175 = load i64, i64* %size, align 8
  %conv687 = trunc i64 %175 to i16
  %conv688 = sext i16 %conv687 to i32
  %add689 = add nsw i32 0, %conv688
  %mul690 = mul nsw i32 0, %add689
  %sub691 = sub nsw i32 %mul690, 1
  %cmp692 = icmp slt i32 %sub691, 0
  br i1 %cmp692, label %cond.true.694, label %cond.false.714

cond.true.694:                                    ; preds = %cond.true.686
  %176 = load i64, i64* %size, align 8
  %conv695 = trunc i64 %176 to i16
  %conv696 = sext i16 %conv695 to i32
  %add697 = add nsw i32 0, %conv696
  %mul698 = mul nsw i32 0, %add697
  %add699 = add nsw i32 %mul698, 0
  %neg700 = xor i32 %add699, -1
  %cmp701 = icmp eq i32 %neg700, -1
  %conv702 = zext i1 %cmp701 to i32
  %sub703 = sub nsw i32 0, %conv702
  %177 = load i64, i64* %size, align 8
  %conv704 = trunc i64 %177 to i16
  %conv705 = sext i16 %conv704 to i32
  %add706 = add nsw i32 0, %conv705
  %mul707 = mul nsw i32 0, %add706
  %add708 = add nsw i32 %mul707, 1
  %shl709 = shl i32 %add708, 30
  %sub710 = sub nsw i32 %shl709, 1
  %mul711 = mul nsw i32 %sub710, 2
  %add712 = add nsw i32 %mul711, 1
  %sub713 = sub nsw i32 %sub703, %add712
  br label %cond.end.720

cond.false.714:                                   ; preds = %cond.true.686
  %178 = load i64, i64* %size, align 8
  %conv715 = trunc i64 %178 to i16
  %conv716 = sext i16 %conv715 to i32
  %add717 = add nsw i32 0, %conv716
  %mul718 = mul nsw i32 0, %add717
  %add719 = add nsw i32 %mul718, 0
  br label %cond.end.720

cond.end.720:                                     ; preds = %cond.false.714, %cond.true.694
  %cond721 = phi i32 [ %sub713, %cond.true.694 ], [ %add719, %cond.false.714 ]
  %cmp722 = icmp eq i32 %cond721, 0
  br i1 %cmp722, label %land.lhs.true.724, label %lor.lhs.false.729

land.lhs.true.724:                                ; preds = %cond.end.720
  %179 = load i64, i64* %size, align 8
  %conv725 = trunc i64 %179 to i16
  %conv726 = sext i16 %conv725 to i32
  %cmp727 = icmp slt i32 %conv726, 0
  br i1 %cmp727, label %cond.true.908, label %lor.lhs.false.729

lor.lhs.false.729:                                ; preds = %land.lhs.true.724, %cond.end.720
  br i1 false, label %cond.true.730, label %cond.false.809

cond.true.730:                                    ; preds = %lor.lhs.false.729
  %180 = load i64, i64* %size, align 8
  %conv731 = trunc i64 %180 to i16
  %conv732 = sext i16 %conv731 to i32
  %cmp733 = icmp slt i32 %conv732, 0
  br i1 %cmp733, label %cond.true.735, label %cond.false.766

cond.true.735:                                    ; preds = %cond.true.730
  %181 = load i64, i64* %size, align 8
  %conv736 = trunc i64 %181 to i16
  %conv737 = sext i16 %conv736 to i32
  %182 = load i64, i64* %size, align 8
  %conv738 = trunc i64 %182 to i16
  %conv739 = sext i16 %conv738 to i32
  %add740 = add nsw i32 0, %conv739
  %mul741 = mul nsw i32 0, %add740
  %sub742 = sub nsw i32 %mul741, 1
  %cmp743 = icmp slt i32 %sub742, 0
  br i1 %cmp743, label %cond.true.745, label %cond.false.755

cond.true.745:                                    ; preds = %cond.true.735
  %183 = load i64, i64* %size, align 8
  %conv746 = trunc i64 %183 to i16
  %conv747 = sext i16 %conv746 to i32
  %add748 = add nsw i32 0, %conv747
  %mul749 = mul nsw i32 0, %add748
  %add750 = add nsw i32 %mul749, 1
  %shl751 = shl i32 %add750, 30
  %sub752 = sub nsw i32 %shl751, 1
  %mul753 = mul nsw i32 %sub752, 2
  %add754 = add nsw i32 %mul753, 1
  br label %cond.end.761

cond.false.755:                                   ; preds = %cond.true.735
  %184 = load i64, i64* %size, align 8
  %conv756 = trunc i64 %184 to i16
  %conv757 = sext i16 %conv756 to i32
  %add758 = add nsw i32 0, %conv757
  %mul759 = mul nsw i32 0, %add758
  %sub760 = sub nsw i32 %mul759, 1
  br label %cond.end.761

cond.end.761:                                     ; preds = %cond.false.755, %cond.true.745
  %cond762 = phi i32 [ %add754, %cond.true.745 ], [ %sub760, %cond.false.755 ]
  %div763 = sdiv i32 %cond762, 8
  %cmp764 = icmp slt i32 %conv737, %div763
  br i1 %cmp764, label %cond.true.908, label %lor.lhs.false.888

cond.false.766:                                   ; preds = %cond.true.730
  br i1 false, label %cond.true.767, label %cond.false.768

cond.true.767:                                    ; preds = %cond.false.766
  br i1 false, label %cond.true.908, label %lor.lhs.false.888

cond.false.768:                                   ; preds = %cond.false.766
  %185 = load i64, i64* %size, align 8
  %conv769 = trunc i64 %185 to i16
  %conv770 = sext i16 %conv769 to i32
  %add771 = add nsw i32 0, %conv770
  %mul772 = mul nsw i32 0, %add771
  %sub773 = sub nsw i32 %mul772, 1
  %cmp774 = icmp slt i32 %sub773, 0
  br i1 %cmp774, label %cond.true.776, label %cond.false.796

cond.true.776:                                    ; preds = %cond.false.768
  %186 = load i64, i64* %size, align 8
  %conv777 = trunc i64 %186 to i16
  %conv778 = sext i16 %conv777 to i32
  %add779 = add nsw i32 0, %conv778
  %mul780 = mul nsw i32 0, %add779
  %add781 = add nsw i32 %mul780, 0
  %neg782 = xor i32 %add781, -1
  %cmp783 = icmp eq i32 %neg782, -1
  %conv784 = zext i1 %cmp783 to i32
  %sub785 = sub nsw i32 0, %conv784
  %187 = load i64, i64* %size, align 8
  %conv786 = trunc i64 %187 to i16
  %conv787 = sext i16 %conv786 to i32
  %add788 = add nsw i32 0, %conv787
  %mul789 = mul nsw i32 0, %add788
  %add790 = add nsw i32 %mul789, 1
  %shl791 = shl i32 %add790, 30
  %sub792 = sub nsw i32 %shl791, 1
  %mul793 = mul nsw i32 %sub792, 2
  %add794 = add nsw i32 %mul793, 1
  %sub795 = sub nsw i32 %sub785, %add794
  br label %cond.end.802

cond.false.796:                                   ; preds = %cond.false.768
  %188 = load i64, i64* %size, align 8
  %conv797 = trunc i64 %188 to i16
  %conv798 = sext i16 %conv797 to i32
  %add799 = add nsw i32 0, %conv798
  %mul800 = mul nsw i32 0, %add799
  %add801 = add nsw i32 %mul800, 0
  br label %cond.end.802

cond.end.802:                                     ; preds = %cond.false.796, %cond.true.776
  %cond803 = phi i32 [ %sub795, %cond.true.776 ], [ %add801, %cond.false.796 ]
  %div804 = sdiv i32 %cond803, 8
  %189 = load i64, i64* %size, align 8
  %conv805 = trunc i64 %189 to i16
  %conv806 = sext i16 %conv805 to i32
  %cmp807 = icmp slt i32 %div804, %conv806
  br i1 %cmp807, label %cond.true.908, label %lor.lhs.false.888

cond.false.809:                                   ; preds = %lor.lhs.false.729
  br i1 false, label %cond.true.810, label %cond.false.811

cond.true.810:                                    ; preds = %cond.false.809
  br i1 false, label %cond.true.908, label %lor.lhs.false.888

cond.false.811:                                   ; preds = %cond.false.809
  %190 = load i64, i64* %size, align 8
  %conv812 = trunc i64 %190 to i16
  %conv813 = sext i16 %conv812 to i32
  %cmp814 = icmp slt i32 %conv813, 0
  br i1 %cmp814, label %cond.true.816, label %cond.false.857

cond.true.816:                                    ; preds = %cond.false.811
  %191 = load i64, i64* %size, align 8
  %conv817 = trunc i64 %191 to i16
  %conv818 = sext i16 %conv817 to i32
  %192 = load i64, i64* %size, align 8
  %conv819 = trunc i64 %192 to i16
  %conv820 = sext i16 %conv819 to i32
  %add821 = add nsw i32 0, %conv820
  %mul822 = mul nsw i32 0, %add821
  %sub823 = sub nsw i32 %mul822, 1
  %cmp824 = icmp slt i32 %sub823, 0
  br i1 %cmp824, label %cond.true.826, label %cond.false.846

cond.true.826:                                    ; preds = %cond.true.816
  %193 = load i64, i64* %size, align 8
  %conv827 = trunc i64 %193 to i16
  %conv828 = sext i16 %conv827 to i32
  %add829 = add nsw i32 0, %conv828
  %mul830 = mul nsw i32 0, %add829
  %add831 = add nsw i32 %mul830, 0
  %neg832 = xor i32 %add831, -1
  %cmp833 = icmp eq i32 %neg832, -1
  %conv834 = zext i1 %cmp833 to i32
  %sub835 = sub nsw i32 0, %conv834
  %194 = load i64, i64* %size, align 8
  %conv836 = trunc i64 %194 to i16
  %conv837 = sext i16 %conv836 to i32
  %add838 = add nsw i32 0, %conv837
  %mul839 = mul nsw i32 0, %add838
  %add840 = add nsw i32 %mul839, 1
  %shl841 = shl i32 %add840, 30
  %sub842 = sub nsw i32 %shl841, 1
  %mul843 = mul nsw i32 %sub842, 2
  %add844 = add nsw i32 %mul843, 1
  %sub845 = sub nsw i32 %sub835, %add844
  br label %cond.end.852

cond.false.846:                                   ; preds = %cond.true.816
  %195 = load i64, i64* %size, align 8
  %conv847 = trunc i64 %195 to i16
  %conv848 = sext i16 %conv847 to i32
  %add849 = add nsw i32 0, %conv848
  %mul850 = mul nsw i32 0, %add849
  %add851 = add nsw i32 %mul850, 0
  br label %cond.end.852

cond.end.852:                                     ; preds = %cond.false.846, %cond.true.826
  %cond853 = phi i32 [ %sub845, %cond.true.826 ], [ %add851, %cond.false.846 ]
  %div854 = sdiv i32 %cond853, 8
  %cmp855 = icmp slt i32 %conv818, %div854
  br i1 %cmp855, label %cond.true.908, label %lor.lhs.false.888

cond.false.857:                                   ; preds = %cond.false.811
  %196 = load i64, i64* %size, align 8
  %conv858 = trunc i64 %196 to i16
  %conv859 = sext i16 %conv858 to i32
  %add860 = add nsw i32 0, %conv859
  %mul861 = mul nsw i32 0, %add860
  %sub862 = sub nsw i32 %mul861, 1
  %cmp863 = icmp slt i32 %sub862, 0
  br i1 %cmp863, label %cond.true.865, label %cond.false.875

cond.true.865:                                    ; preds = %cond.false.857
  %197 = load i64, i64* %size, align 8
  %conv866 = trunc i64 %197 to i16
  %conv867 = sext i16 %conv866 to i32
  %add868 = add nsw i32 0, %conv867
  %mul869 = mul nsw i32 0, %add868
  %add870 = add nsw i32 %mul869, 1
  %shl871 = shl i32 %add870, 30
  %sub872 = sub nsw i32 %shl871, 1
  %mul873 = mul nsw i32 %sub872, 2
  %add874 = add nsw i32 %mul873, 1
  br label %cond.end.881

cond.false.875:                                   ; preds = %cond.false.857
  %198 = load i64, i64* %size, align 8
  %conv876 = trunc i64 %198 to i16
  %conv877 = sext i16 %conv876 to i32
  %add878 = add nsw i32 0, %conv877
  %mul879 = mul nsw i32 0, %add878
  %sub880 = sub nsw i32 %mul879, 1
  br label %cond.end.881

cond.end.881:                                     ; preds = %cond.false.875, %cond.true.865
  %cond882 = phi i32 [ %add874, %cond.true.865 ], [ %sub880, %cond.false.875 ]
  %div883 = sdiv i32 %cond882, 8
  %199 = load i64, i64* %size, align 8
  %conv884 = trunc i64 %199 to i16
  %conv885 = sext i16 %conv884 to i32
  %cmp886 = icmp slt i32 %div883, %conv885
  br i1 %cmp886, label %cond.true.908, label %lor.lhs.false.888

lor.lhs.false.888:                                ; preds = %cond.end.881, %cond.end.852, %cond.true.810, %cond.end.802, %cond.true.767, %cond.end.761
  %200 = load i64, i64* %size, align 8
  %conv889 = trunc i64 %200 to i16
  %conv890 = sext i16 %conv889 to i32
  %mul891 = mul nsw i32 %conv890, 8
  %mul892 = mul nsw i32 0, %mul891
  %sub893 = sub nsw i32 %mul892, 1
  %cmp894 = icmp slt i32 %sub893, 0
  br i1 %cmp894, label %land.lhs.true.896, label %lor.lhs.false.902

land.lhs.true.896:                                ; preds = %lor.lhs.false.888
  %201 = load i64, i64* %size, align 8
  %conv897 = trunc i64 %201 to i16
  %conv898 = sext i16 %conv897 to i32
  %mul899 = mul nsw i32 %conv898, 8
  %cmp900 = icmp slt i32 %mul899, -32768
  br i1 %cmp900, label %cond.true.908, label %lor.lhs.false.902

lor.lhs.false.902:                                ; preds = %land.lhs.true.896, %lor.lhs.false.888
  %202 = load i64, i64* %size, align 8
  %conv903 = trunc i64 %202 to i16
  %conv904 = sext i16 %conv903 to i32
  %mul905 = mul nsw i32 %conv904, 8
  %cmp906 = icmp slt i32 32767, %mul905
  br i1 %cmp906, label %cond.true.908, label %cond.false.931

cond.true.908:                                    ; preds = %lor.lhs.false.902, %land.lhs.true.896, %cond.end.881, %cond.end.852, %cond.true.810, %cond.end.802, %cond.true.767, %cond.end.761, %land.lhs.true.724
  %203 = load i64, i64* %size, align 8
  %conv909 = trunc i64 %203 to i16
  %conv910 = zext i16 %conv909 to i32
  %mul911 = mul nsw i32 %conv910, 8
  %cmp912 = icmp sle i32 %mul911, 32767
  br i1 %cmp912, label %cond.true.914, label %cond.false.920

cond.true.914:                                    ; preds = %cond.true.908
  %204 = load i64, i64* %size, align 8
  %conv915 = trunc i64 %204 to i16
  %conv916 = zext i16 %conv915 to i32
  %mul917 = mul nsw i32 %conv916, 8
  %conv918 = trunc i32 %mul917 to i16
  %conv919 = sext i16 %conv918 to i32
  br label %cond.end.928

cond.false.920:                                   ; preds = %cond.true.908
  %205 = load i64, i64* %size, align 8
  %conv921 = trunc i64 %205 to i16
  %conv922 = zext i16 %conv921 to i32
  %mul923 = mul nsw i32 %conv922, 8
  %sub924 = sub nsw i32 %mul923, -32768
  %conv925 = trunc i32 %sub924 to i16
  %conv926 = sext i16 %conv925 to i32
  %add927 = add nsw i32 %conv926, -32768
  br label %cond.end.928

cond.end.928:                                     ; preds = %cond.false.920, %cond.true.914
  %cond929 = phi i32 [ %conv919, %cond.true.914 ], [ %add927, %cond.false.920 ]
  %conv930 = sext i32 %cond929 to i64
  store i64 %conv930, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.931:                                   ; preds = %lor.lhs.false.902
  %206 = load i64, i64* %size, align 8
  %conv932 = trunc i64 %206 to i16
  %conv933 = zext i16 %conv932 to i32
  %mul934 = mul nsw i32 %conv933, 8
  %cmp935 = icmp sle i32 %mul934, 32767
  br i1 %cmp935, label %cond.true.937, label %cond.false.943

cond.true.937:                                    ; preds = %cond.false.931
  %207 = load i64, i64* %size, align 8
  %conv938 = trunc i64 %207 to i16
  %conv939 = zext i16 %conv938 to i32
  %mul940 = mul nsw i32 %conv939, 8
  %conv941 = trunc i32 %mul940 to i16
  %conv942 = sext i16 %conv941 to i32
  br label %cond.end.951

cond.false.943:                                   ; preds = %cond.false.931
  %208 = load i64, i64* %size, align 8
  %conv944 = trunc i64 %208 to i16
  %conv945 = zext i16 %conv944 to i32
  %mul946 = mul nsw i32 %conv945, 8
  %sub947 = sub nsw i32 %mul946, -32768
  %conv948 = trunc i32 %sub947 to i16
  %conv949 = sext i16 %conv948 to i32
  %add950 = add nsw i32 %conv949, -32768
  br label %cond.end.951

cond.end.951:                                     ; preds = %cond.false.943, %cond.true.937
  %cond952 = phi i32 [ %conv942, %cond.true.937 ], [ %add950, %cond.false.943 ]
  %conv953 = sext i32 %cond952 to i64
  store i64 %conv953, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.954:                                   ; preds = %cond.true.685
  %209 = load i64, i64* %size, align 8
  %add955 = add nsw i64 0, %209
  %mul956 = mul nsw i64 0, %add955
  %sub957 = sub nsw i64 %mul956, 1
  %cmp958 = icmp slt i64 %sub957, 0
  br i1 %cmp958, label %cond.true.960, label %cond.false.977

cond.true.960:                                    ; preds = %cond.false.954
  %210 = load i64, i64* %size, align 8
  %add961 = add nsw i64 0, %210
  %mul962 = mul nsw i64 0, %add961
  %add963 = add nsw i64 %mul962, 0
  %neg964 = xor i64 %add963, -1
  %cmp965 = icmp eq i64 %neg964, -1
  %conv966 = zext i1 %cmp965 to i32
  %sub967 = sub nsw i32 0, %conv966
  %conv968 = sext i32 %sub967 to i64
  %211 = load i64, i64* %size, align 8
  %add969 = add nsw i64 0, %211
  %mul970 = mul nsw i64 0, %add969
  %add971 = add nsw i64 %mul970, 1
  %shl972 = shl i64 %add971, 62
  %sub973 = sub nsw i64 %shl972, 1
  %mul974 = mul nsw i64 %sub973, 2
  %add975 = add nsw i64 %mul974, 1
  %sub976 = sub nsw i64 %conv968, %add975
  br label %cond.end.981

cond.false.977:                                   ; preds = %cond.false.954
  %212 = load i64, i64* %size, align 8
  %add978 = add nsw i64 0, %212
  %mul979 = mul nsw i64 0, %add978
  %add980 = add nsw i64 %mul979, 0
  br label %cond.end.981

cond.end.981:                                     ; preds = %cond.false.977, %cond.true.960
  %cond982 = phi i64 [ %sub976, %cond.true.960 ], [ %add980, %cond.false.977 ]
  %cmp983 = icmp eq i64 %cond982, 0
  br i1 %cmp983, label %land.lhs.true.985, label %lor.lhs.false.988

land.lhs.true.985:                                ; preds = %cond.end.981
  %213 = load i64, i64* %size, align 8
  %cmp986 = icmp slt i64 %213, 0
  br i1 %cmp986, label %cond.true.1123, label %lor.lhs.false.988

lor.lhs.false.988:                                ; preds = %land.lhs.true.985, %cond.end.981
  br i1 false, label %cond.true.989, label %cond.false.1049

cond.true.989:                                    ; preds = %lor.lhs.false.988
  %214 = load i64, i64* %size, align 8
  %cmp990 = icmp slt i64 %214, 0
  br i1 %cmp990, label %cond.true.992, label %cond.false.1015

cond.true.992:                                    ; preds = %cond.true.989
  %215 = load i64, i64* %size, align 8
  %216 = load i64, i64* %size, align 8
  %add993 = add nsw i64 0, %216
  %mul994 = mul nsw i64 0, %add993
  %sub995 = sub nsw i64 %mul994, 1
  %cmp996 = icmp slt i64 %sub995, 0
  br i1 %cmp996, label %cond.true.998, label %cond.false.1006

cond.true.998:                                    ; preds = %cond.true.992
  %217 = load i64, i64* %size, align 8
  %add999 = add nsw i64 0, %217
  %mul1000 = mul nsw i64 0, %add999
  %add1001 = add nsw i64 %mul1000, 1
  %shl1002 = shl i64 %add1001, 62
  %sub1003 = sub nsw i64 %shl1002, 1
  %mul1004 = mul nsw i64 %sub1003, 2
  %add1005 = add nsw i64 %mul1004, 1
  br label %cond.end.1010

cond.false.1006:                                  ; preds = %cond.true.992
  %218 = load i64, i64* %size, align 8
  %add1007 = add nsw i64 0, %218
  %mul1008 = mul nsw i64 0, %add1007
  %sub1009 = sub nsw i64 %mul1008, 1
  br label %cond.end.1010

cond.end.1010:                                    ; preds = %cond.false.1006, %cond.true.998
  %cond1011 = phi i64 [ %add1005, %cond.true.998 ], [ %sub1009, %cond.false.1006 ]
  %div1012 = sdiv i64 %cond1011, 8
  %cmp1013 = icmp slt i64 %215, %div1012
  br i1 %cmp1013, label %cond.true.1123, label %lor.lhs.false.1109

cond.false.1015:                                  ; preds = %cond.true.989
  br i1 false, label %cond.true.1016, label %cond.false.1017

cond.true.1016:                                   ; preds = %cond.false.1015
  br i1 false, label %cond.true.1123, label %lor.lhs.false.1109

cond.false.1017:                                  ; preds = %cond.false.1015
  %219 = load i64, i64* %size, align 8
  %add1018 = add nsw i64 0, %219
  %mul1019 = mul nsw i64 0, %add1018
  %sub1020 = sub nsw i64 %mul1019, 1
  %cmp1021 = icmp slt i64 %sub1020, 0
  br i1 %cmp1021, label %cond.true.1023, label %cond.false.1040

cond.true.1023:                                   ; preds = %cond.false.1017
  %220 = load i64, i64* %size, align 8
  %add1024 = add nsw i64 0, %220
  %mul1025 = mul nsw i64 0, %add1024
  %add1026 = add nsw i64 %mul1025, 0
  %neg1027 = xor i64 %add1026, -1
  %cmp1028 = icmp eq i64 %neg1027, -1
  %conv1029 = zext i1 %cmp1028 to i32
  %sub1030 = sub nsw i32 0, %conv1029
  %conv1031 = sext i32 %sub1030 to i64
  %221 = load i64, i64* %size, align 8
  %add1032 = add nsw i64 0, %221
  %mul1033 = mul nsw i64 0, %add1032
  %add1034 = add nsw i64 %mul1033, 1
  %shl1035 = shl i64 %add1034, 62
  %sub1036 = sub nsw i64 %shl1035, 1
  %mul1037 = mul nsw i64 %sub1036, 2
  %add1038 = add nsw i64 %mul1037, 1
  %sub1039 = sub nsw i64 %conv1031, %add1038
  br label %cond.end.1044

cond.false.1040:                                  ; preds = %cond.false.1017
  %222 = load i64, i64* %size, align 8
  %add1041 = add nsw i64 0, %222
  %mul1042 = mul nsw i64 0, %add1041
  %add1043 = add nsw i64 %mul1042, 0
  br label %cond.end.1044

cond.end.1044:                                    ; preds = %cond.false.1040, %cond.true.1023
  %cond1045 = phi i64 [ %sub1039, %cond.true.1023 ], [ %add1043, %cond.false.1040 ]
  %div1046 = sdiv i64 %cond1045, 8
  %223 = load i64, i64* %size, align 8
  %cmp1047 = icmp slt i64 %div1046, %223
  br i1 %cmp1047, label %cond.true.1123, label %lor.lhs.false.1109

cond.false.1049:                                  ; preds = %lor.lhs.false.988
  br i1 false, label %cond.true.1050, label %cond.false.1051

cond.true.1050:                                   ; preds = %cond.false.1049
  br i1 false, label %cond.true.1123, label %lor.lhs.false.1109

cond.false.1051:                                  ; preds = %cond.false.1049
  %224 = load i64, i64* %size, align 8
  %cmp1052 = icmp slt i64 %224, 0
  br i1 %cmp1052, label %cond.true.1054, label %cond.false.1086

cond.true.1054:                                   ; preds = %cond.false.1051
  %225 = load i64, i64* %size, align 8
  %226 = load i64, i64* %size, align 8
  %add1055 = add nsw i64 0, %226
  %mul1056 = mul nsw i64 0, %add1055
  %sub1057 = sub nsw i64 %mul1056, 1
  %cmp1058 = icmp slt i64 %sub1057, 0
  br i1 %cmp1058, label %cond.true.1060, label %cond.false.1077

cond.true.1060:                                   ; preds = %cond.true.1054
  %227 = load i64, i64* %size, align 8
  %add1061 = add nsw i64 0, %227
  %mul1062 = mul nsw i64 0, %add1061
  %add1063 = add nsw i64 %mul1062, 0
  %neg1064 = xor i64 %add1063, -1
  %cmp1065 = icmp eq i64 %neg1064, -1
  %conv1066 = zext i1 %cmp1065 to i32
  %sub1067 = sub nsw i32 0, %conv1066
  %conv1068 = sext i32 %sub1067 to i64
  %228 = load i64, i64* %size, align 8
  %add1069 = add nsw i64 0, %228
  %mul1070 = mul nsw i64 0, %add1069
  %add1071 = add nsw i64 %mul1070, 1
  %shl1072 = shl i64 %add1071, 62
  %sub1073 = sub nsw i64 %shl1072, 1
  %mul1074 = mul nsw i64 %sub1073, 2
  %add1075 = add nsw i64 %mul1074, 1
  %sub1076 = sub nsw i64 %conv1068, %add1075
  br label %cond.end.1081

cond.false.1077:                                  ; preds = %cond.true.1054
  %229 = load i64, i64* %size, align 8
  %add1078 = add nsw i64 0, %229
  %mul1079 = mul nsw i64 0, %add1078
  %add1080 = add nsw i64 %mul1079, 0
  br label %cond.end.1081

cond.end.1081:                                    ; preds = %cond.false.1077, %cond.true.1060
  %cond1082 = phi i64 [ %sub1076, %cond.true.1060 ], [ %add1080, %cond.false.1077 ]
  %div1083 = sdiv i64 %cond1082, 8
  %cmp1084 = icmp slt i64 %225, %div1083
  br i1 %cmp1084, label %cond.true.1123, label %lor.lhs.false.1109

cond.false.1086:                                  ; preds = %cond.false.1051
  %230 = load i64, i64* %size, align 8
  %add1087 = add nsw i64 0, %230
  %mul1088 = mul nsw i64 0, %add1087
  %sub1089 = sub nsw i64 %mul1088, 1
  %cmp1090 = icmp slt i64 %sub1089, 0
  br i1 %cmp1090, label %cond.true.1092, label %cond.false.1100

cond.true.1092:                                   ; preds = %cond.false.1086
  %231 = load i64, i64* %size, align 8
  %add1093 = add nsw i64 0, %231
  %mul1094 = mul nsw i64 0, %add1093
  %add1095 = add nsw i64 %mul1094, 1
  %shl1096 = shl i64 %add1095, 62
  %sub1097 = sub nsw i64 %shl1096, 1
  %mul1098 = mul nsw i64 %sub1097, 2
  %add1099 = add nsw i64 %mul1098, 1
  br label %cond.end.1104

cond.false.1100:                                  ; preds = %cond.false.1086
  %232 = load i64, i64* %size, align 8
  %add1101 = add nsw i64 0, %232
  %mul1102 = mul nsw i64 0, %add1101
  %sub1103 = sub nsw i64 %mul1102, 1
  br label %cond.end.1104

cond.end.1104:                                    ; preds = %cond.false.1100, %cond.true.1092
  %cond1105 = phi i64 [ %add1099, %cond.true.1092 ], [ %sub1103, %cond.false.1100 ]
  %div1106 = sdiv i64 %cond1105, 8
  %233 = load i64, i64* %size, align 8
  %cmp1107 = icmp slt i64 %div1106, %233
  br i1 %cmp1107, label %cond.true.1123, label %lor.lhs.false.1109

lor.lhs.false.1109:                               ; preds = %cond.end.1104, %cond.end.1081, %cond.true.1050, %cond.end.1044, %cond.true.1016, %cond.end.1010
  %234 = load i64, i64* %size, align 8
  %mul1110 = mul nsw i64 %234, 8
  %mul1111 = mul nsw i64 0, %mul1110
  %sub1112 = sub nsw i64 %mul1111, 1
  %cmp1113 = icmp slt i64 %sub1112, 0
  br i1 %cmp1113, label %land.lhs.true.1115, label %lor.lhs.false.1119

land.lhs.true.1115:                               ; preds = %lor.lhs.false.1109
  %235 = load i64, i64* %size, align 8
  %mul1116 = mul nsw i64 %235, 8
  %cmp1117 = icmp slt i64 %mul1116, -32768
  br i1 %cmp1117, label %cond.true.1123, label %lor.lhs.false.1119

lor.lhs.false.1119:                               ; preds = %land.lhs.true.1115, %lor.lhs.false.1109
  %236 = load i64, i64* %size, align 8
  %mul1120 = mul nsw i64 %236, 8
  %cmp1121 = icmp slt i64 32767, %mul1120
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1146

cond.true.1123:                                   ; preds = %lor.lhs.false.1119, %land.lhs.true.1115, %cond.end.1104, %cond.end.1081, %cond.true.1050, %cond.end.1044, %cond.true.1016, %cond.end.1010, %land.lhs.true.985
  %237 = load i64, i64* %size, align 8
  %conv1124 = trunc i64 %237 to i16
  %conv1125 = zext i16 %conv1124 to i32
  %mul1126 = mul nsw i32 %conv1125, 8
  %cmp1127 = icmp sle i32 %mul1126, 32767
  br i1 %cmp1127, label %cond.true.1129, label %cond.false.1135

cond.true.1129:                                   ; preds = %cond.true.1123
  %238 = load i64, i64* %size, align 8
  %conv1130 = trunc i64 %238 to i16
  %conv1131 = zext i16 %conv1130 to i32
  %mul1132 = mul nsw i32 %conv1131, 8
  %conv1133 = trunc i32 %mul1132 to i16
  %conv1134 = sext i16 %conv1133 to i32
  br label %cond.end.1143

cond.false.1135:                                  ; preds = %cond.true.1123
  %239 = load i64, i64* %size, align 8
  %conv1136 = trunc i64 %239 to i16
  %conv1137 = zext i16 %conv1136 to i32
  %mul1138 = mul nsw i32 %conv1137, 8
  %sub1139 = sub nsw i32 %mul1138, -32768
  %conv1140 = trunc i32 %sub1139 to i16
  %conv1141 = sext i16 %conv1140 to i32
  %add1142 = add nsw i32 %conv1141, -32768
  br label %cond.end.1143

cond.end.1143:                                    ; preds = %cond.false.1135, %cond.true.1129
  %cond1144 = phi i32 [ %conv1134, %cond.true.1129 ], [ %add1142, %cond.false.1135 ]
  %conv1145 = sext i32 %cond1144 to i64
  store i64 %conv1145, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1146:                                  ; preds = %lor.lhs.false.1119
  %240 = load i64, i64* %size, align 8
  %conv1147 = trunc i64 %240 to i16
  %conv1148 = zext i16 %conv1147 to i32
  %mul1149 = mul nsw i32 %conv1148, 8
  %cmp1150 = icmp sle i32 %mul1149, 32767
  br i1 %cmp1150, label %cond.true.1152, label %cond.false.1158

cond.true.1152:                                   ; preds = %cond.false.1146
  %241 = load i64, i64* %size, align 8
  %conv1153 = trunc i64 %241 to i16
  %conv1154 = zext i16 %conv1153 to i32
  %mul1155 = mul nsw i32 %conv1154, 8
  %conv1156 = trunc i32 %mul1155 to i16
  %conv1157 = sext i16 %conv1156 to i32
  br label %cond.end.1166

cond.false.1158:                                  ; preds = %cond.false.1146
  %242 = load i64, i64* %size, align 8
  %conv1159 = trunc i64 %242 to i16
  %conv1160 = zext i16 %conv1159 to i32
  %mul1161 = mul nsw i32 %conv1160, 8
  %sub1162 = sub nsw i32 %mul1161, -32768
  %conv1163 = trunc i32 %sub1162 to i16
  %conv1164 = sext i16 %conv1163 to i32
  %add1165 = add nsw i32 %conv1164, -32768
  br label %cond.end.1166

cond.end.1166:                                    ; preds = %cond.false.1158, %cond.true.1152
  %cond1167 = phi i32 [ %conv1157, %cond.true.1152 ], [ %add1165, %cond.false.1158 ]
  %conv1168 = sext i32 %cond1167 to i64
  store i64 %conv1168, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1169:                                  ; preds = %cond.false.684
  br i1 false, label %cond.true.1170, label %cond.false.1598

cond.true.1170:                                   ; preds = %cond.false.1169
  br i1 false, label %cond.true.1171, label %cond.false.1397

cond.true.1171:                                   ; preds = %cond.true.1170
  %243 = load i64, i64* %size, align 8
  %conv1172 = trunc i64 %243 to i32
  %add1173 = add nsw i32 0, %conv1172
  %mul1174 = mul nsw i32 0, %add1173
  %sub1175 = sub nsw i32 %mul1174, 1
  %cmp1176 = icmp slt i32 %sub1175, 0
  br i1 %cmp1176, label %cond.true.1178, label %cond.false.1196

cond.true.1178:                                   ; preds = %cond.true.1171
  %244 = load i64, i64* %size, align 8
  %conv1179 = trunc i64 %244 to i32
  %add1180 = add nsw i32 0, %conv1179
  %mul1181 = mul nsw i32 0, %add1180
  %add1182 = add nsw i32 %mul1181, 0
  %neg1183 = xor i32 %add1182, -1
  %cmp1184 = icmp eq i32 %neg1183, -1
  %conv1185 = zext i1 %cmp1184 to i32
  %sub1186 = sub nsw i32 0, %conv1185
  %245 = load i64, i64* %size, align 8
  %conv1187 = trunc i64 %245 to i32
  %add1188 = add nsw i32 0, %conv1187
  %mul1189 = mul nsw i32 0, %add1188
  %add1190 = add nsw i32 %mul1189, 1
  %shl1191 = shl i32 %add1190, 30
  %sub1192 = sub nsw i32 %shl1191, 1
  %mul1193 = mul nsw i32 %sub1192, 2
  %add1194 = add nsw i32 %mul1193, 1
  %sub1195 = sub nsw i32 %sub1186, %add1194
  br label %cond.end.1201

cond.false.1196:                                  ; preds = %cond.true.1171
  %246 = load i64, i64* %size, align 8
  %conv1197 = trunc i64 %246 to i32
  %add1198 = add nsw i32 0, %conv1197
  %mul1199 = mul nsw i32 0, %add1198
  %add1200 = add nsw i32 %mul1199, 0
  br label %cond.end.1201

cond.end.1201:                                    ; preds = %cond.false.1196, %cond.true.1178
  %cond1202 = phi i32 [ %sub1195, %cond.true.1178 ], [ %add1200, %cond.false.1196 ]
  %cmp1203 = icmp eq i32 %cond1202, 0
  br i1 %cmp1203, label %land.lhs.true.1205, label %lor.lhs.false.1209

land.lhs.true.1205:                               ; preds = %cond.end.1201
  %247 = load i64, i64* %size, align 8
  %conv1206 = trunc i64 %247 to i32
  %cmp1207 = icmp slt i32 %conv1206, 0
  br i1 %cmp1207, label %cond.true.1365, label %lor.lhs.false.1209

lor.lhs.false.1209:                               ; preds = %land.lhs.true.1205, %cond.end.1201
  br i1 false, label %cond.true.1210, label %cond.false.1279

cond.true.1210:                                   ; preds = %lor.lhs.false.1209
  %248 = load i64, i64* %size, align 8
  %conv1211 = trunc i64 %248 to i32
  %cmp1212 = icmp slt i32 %conv1211, 0
  br i1 %cmp1212, label %cond.true.1214, label %cond.false.1241

cond.true.1214:                                   ; preds = %cond.true.1210
  %249 = load i64, i64* %size, align 8
  %conv1215 = trunc i64 %249 to i32
  %250 = load i64, i64* %size, align 8
  %conv1216 = trunc i64 %250 to i32
  %add1217 = add nsw i32 0, %conv1216
  %mul1218 = mul nsw i32 0, %add1217
  %sub1219 = sub nsw i32 %mul1218, 1
  %cmp1220 = icmp slt i32 %sub1219, 0
  br i1 %cmp1220, label %cond.true.1222, label %cond.false.1231

cond.true.1222:                                   ; preds = %cond.true.1214
  %251 = load i64, i64* %size, align 8
  %conv1223 = trunc i64 %251 to i32
  %add1224 = add nsw i32 0, %conv1223
  %mul1225 = mul nsw i32 0, %add1224
  %add1226 = add nsw i32 %mul1225, 1
  %shl1227 = shl i32 %add1226, 30
  %sub1228 = sub nsw i32 %shl1227, 1
  %mul1229 = mul nsw i32 %sub1228, 2
  %add1230 = add nsw i32 %mul1229, 1
  br label %cond.end.1236

cond.false.1231:                                  ; preds = %cond.true.1214
  %252 = load i64, i64* %size, align 8
  %conv1232 = trunc i64 %252 to i32
  %add1233 = add nsw i32 0, %conv1232
  %mul1234 = mul nsw i32 0, %add1233
  %sub1235 = sub nsw i32 %mul1234, 1
  br label %cond.end.1236

cond.end.1236:                                    ; preds = %cond.false.1231, %cond.true.1222
  %cond1237 = phi i32 [ %add1230, %cond.true.1222 ], [ %sub1235, %cond.false.1231 ]
  %div1238 = sdiv i32 %cond1237, 8
  %cmp1239 = icmp slt i32 %conv1215, %div1238
  br i1 %cmp1239, label %cond.true.1365, label %lor.lhs.false.1348

cond.false.1241:                                  ; preds = %cond.true.1210
  br i1 false, label %cond.true.1242, label %cond.false.1243

cond.true.1242:                                   ; preds = %cond.false.1241
  br i1 false, label %cond.true.1365, label %lor.lhs.false.1348

cond.false.1243:                                  ; preds = %cond.false.1241
  %253 = load i64, i64* %size, align 8
  %conv1244 = trunc i64 %253 to i32
  %add1245 = add nsw i32 0, %conv1244
  %mul1246 = mul nsw i32 0, %add1245
  %sub1247 = sub nsw i32 %mul1246, 1
  %cmp1248 = icmp slt i32 %sub1247, 0
  br i1 %cmp1248, label %cond.true.1250, label %cond.false.1268

cond.true.1250:                                   ; preds = %cond.false.1243
  %254 = load i64, i64* %size, align 8
  %conv1251 = trunc i64 %254 to i32
  %add1252 = add nsw i32 0, %conv1251
  %mul1253 = mul nsw i32 0, %add1252
  %add1254 = add nsw i32 %mul1253, 0
  %neg1255 = xor i32 %add1254, -1
  %cmp1256 = icmp eq i32 %neg1255, -1
  %conv1257 = zext i1 %cmp1256 to i32
  %sub1258 = sub nsw i32 0, %conv1257
  %255 = load i64, i64* %size, align 8
  %conv1259 = trunc i64 %255 to i32
  %add1260 = add nsw i32 0, %conv1259
  %mul1261 = mul nsw i32 0, %add1260
  %add1262 = add nsw i32 %mul1261, 1
  %shl1263 = shl i32 %add1262, 30
  %sub1264 = sub nsw i32 %shl1263, 1
  %mul1265 = mul nsw i32 %sub1264, 2
  %add1266 = add nsw i32 %mul1265, 1
  %sub1267 = sub nsw i32 %sub1258, %add1266
  br label %cond.end.1273

cond.false.1268:                                  ; preds = %cond.false.1243
  %256 = load i64, i64* %size, align 8
  %conv1269 = trunc i64 %256 to i32
  %add1270 = add nsw i32 0, %conv1269
  %mul1271 = mul nsw i32 0, %add1270
  %add1272 = add nsw i32 %mul1271, 0
  br label %cond.end.1273

cond.end.1273:                                    ; preds = %cond.false.1268, %cond.true.1250
  %cond1274 = phi i32 [ %sub1267, %cond.true.1250 ], [ %add1272, %cond.false.1268 ]
  %div1275 = sdiv i32 %cond1274, 8
  %257 = load i64, i64* %size, align 8
  %conv1276 = trunc i64 %257 to i32
  %cmp1277 = icmp slt i32 %div1275, %conv1276
  br i1 %cmp1277, label %cond.true.1365, label %lor.lhs.false.1348

cond.false.1279:                                  ; preds = %lor.lhs.false.1209
  br i1 false, label %cond.true.1280, label %cond.false.1281

cond.true.1280:                                   ; preds = %cond.false.1279
  br i1 false, label %cond.true.1365, label %lor.lhs.false.1348

cond.false.1281:                                  ; preds = %cond.false.1279
  %258 = load i64, i64* %size, align 8
  %conv1282 = trunc i64 %258 to i32
  %cmp1283 = icmp slt i32 %conv1282, 0
  br i1 %cmp1283, label %cond.true.1285, label %cond.false.1321

cond.true.1285:                                   ; preds = %cond.false.1281
  %259 = load i64, i64* %size, align 8
  %conv1286 = trunc i64 %259 to i32
  %260 = load i64, i64* %size, align 8
  %conv1287 = trunc i64 %260 to i32
  %add1288 = add nsw i32 0, %conv1287
  %mul1289 = mul nsw i32 0, %add1288
  %sub1290 = sub nsw i32 %mul1289, 1
  %cmp1291 = icmp slt i32 %sub1290, 0
  br i1 %cmp1291, label %cond.true.1293, label %cond.false.1311

cond.true.1293:                                   ; preds = %cond.true.1285
  %261 = load i64, i64* %size, align 8
  %conv1294 = trunc i64 %261 to i32
  %add1295 = add nsw i32 0, %conv1294
  %mul1296 = mul nsw i32 0, %add1295
  %add1297 = add nsw i32 %mul1296, 0
  %neg1298 = xor i32 %add1297, -1
  %cmp1299 = icmp eq i32 %neg1298, -1
  %conv1300 = zext i1 %cmp1299 to i32
  %sub1301 = sub nsw i32 0, %conv1300
  %262 = load i64, i64* %size, align 8
  %conv1302 = trunc i64 %262 to i32
  %add1303 = add nsw i32 0, %conv1302
  %mul1304 = mul nsw i32 0, %add1303
  %add1305 = add nsw i32 %mul1304, 1
  %shl1306 = shl i32 %add1305, 30
  %sub1307 = sub nsw i32 %shl1306, 1
  %mul1308 = mul nsw i32 %sub1307, 2
  %add1309 = add nsw i32 %mul1308, 1
  %sub1310 = sub nsw i32 %sub1301, %add1309
  br label %cond.end.1316

cond.false.1311:                                  ; preds = %cond.true.1285
  %263 = load i64, i64* %size, align 8
  %conv1312 = trunc i64 %263 to i32
  %add1313 = add nsw i32 0, %conv1312
  %mul1314 = mul nsw i32 0, %add1313
  %add1315 = add nsw i32 %mul1314, 0
  br label %cond.end.1316

cond.end.1316:                                    ; preds = %cond.false.1311, %cond.true.1293
  %cond1317 = phi i32 [ %sub1310, %cond.true.1293 ], [ %add1315, %cond.false.1311 ]
  %div1318 = sdiv i32 %cond1317, 8
  %cmp1319 = icmp slt i32 %conv1286, %div1318
  br i1 %cmp1319, label %cond.true.1365, label %lor.lhs.false.1348

cond.false.1321:                                  ; preds = %cond.false.1281
  %264 = load i64, i64* %size, align 8
  %conv1322 = trunc i64 %264 to i32
  %add1323 = add nsw i32 0, %conv1322
  %mul1324 = mul nsw i32 0, %add1323
  %sub1325 = sub nsw i32 %mul1324, 1
  %cmp1326 = icmp slt i32 %sub1325, 0
  br i1 %cmp1326, label %cond.true.1328, label %cond.false.1337

cond.true.1328:                                   ; preds = %cond.false.1321
  %265 = load i64, i64* %size, align 8
  %conv1329 = trunc i64 %265 to i32
  %add1330 = add nsw i32 0, %conv1329
  %mul1331 = mul nsw i32 0, %add1330
  %add1332 = add nsw i32 %mul1331, 1
  %shl1333 = shl i32 %add1332, 30
  %sub1334 = sub nsw i32 %shl1333, 1
  %mul1335 = mul nsw i32 %sub1334, 2
  %add1336 = add nsw i32 %mul1335, 1
  br label %cond.end.1342

cond.false.1337:                                  ; preds = %cond.false.1321
  %266 = load i64, i64* %size, align 8
  %conv1338 = trunc i64 %266 to i32
  %add1339 = add nsw i32 0, %conv1338
  %mul1340 = mul nsw i32 0, %add1339
  %sub1341 = sub nsw i32 %mul1340, 1
  br label %cond.end.1342

cond.end.1342:                                    ; preds = %cond.false.1337, %cond.true.1328
  %cond1343 = phi i32 [ %add1336, %cond.true.1328 ], [ %sub1341, %cond.false.1337 ]
  %div1344 = sdiv i32 %cond1343, 8
  %267 = load i64, i64* %size, align 8
  %conv1345 = trunc i64 %267 to i32
  %cmp1346 = icmp slt i32 %div1344, %conv1345
  br i1 %cmp1346, label %cond.true.1365, label %lor.lhs.false.1348

lor.lhs.false.1348:                               ; preds = %cond.end.1342, %cond.end.1316, %cond.true.1280, %cond.end.1273, %cond.true.1242, %cond.end.1236
  %268 = load i64, i64* %size, align 8
  %conv1349 = trunc i64 %268 to i32
  %mul1350 = mul nsw i32 %conv1349, 8
  %mul1351 = mul nsw i32 0, %mul1350
  %sub1352 = sub nsw i32 %mul1351, 1
  %cmp1353 = icmp slt i32 %sub1352, 0
  br i1 %cmp1353, label %land.lhs.true.1355, label %lor.lhs.false.1360

land.lhs.true.1355:                               ; preds = %lor.lhs.false.1348
  %269 = load i64, i64* %size, align 8
  %conv1356 = trunc i64 %269 to i32
  %mul1357 = mul nsw i32 %conv1356, 8
  %cmp1358 = icmp slt i32 %mul1357, -2147483648
  br i1 %cmp1358, label %cond.true.1365, label %lor.lhs.false.1360

lor.lhs.false.1360:                               ; preds = %land.lhs.true.1355, %lor.lhs.false.1348
  %270 = load i64, i64* %size, align 8
  %conv1361 = trunc i64 %270 to i32
  %mul1362 = mul nsw i32 %conv1361, 8
  %cmp1363 = icmp slt i32 2147483647, %mul1362
  br i1 %cmp1363, label %cond.true.1365, label %cond.false.1381

cond.true.1365:                                   ; preds = %lor.lhs.false.1360, %land.lhs.true.1355, %cond.end.1342, %cond.end.1316, %cond.true.1280, %cond.end.1273, %cond.true.1242, %cond.end.1236, %land.lhs.true.1205
  %271 = load i64, i64* %size, align 8
  %conv1366 = trunc i64 %271 to i32
  %mul1367 = mul i32 %conv1366, 8
  %cmp1368 = icmp ule i32 %mul1367, 2147483647
  br i1 %cmp1368, label %cond.true.1370, label %cond.false.1373

cond.true.1370:                                   ; preds = %cond.true.1365
  %272 = load i64, i64* %size, align 8
  %conv1371 = trunc i64 %272 to i32
  %mul1372 = mul i32 %conv1371, 8
  br label %cond.end.1378

cond.false.1373:                                  ; preds = %cond.true.1365
  %273 = load i64, i64* %size, align 8
  %conv1374 = trunc i64 %273 to i32
  %mul1375 = mul i32 %conv1374, 8
  %sub1376 = sub i32 %mul1375, -2147483648
  %add1377 = add nsw i32 %sub1376, -2147483648
  br label %cond.end.1378

cond.end.1378:                                    ; preds = %cond.false.1373, %cond.true.1370
  %cond1379 = phi i32 [ %mul1372, %cond.true.1370 ], [ %add1377, %cond.false.1373 ]
  %conv1380 = sext i32 %cond1379 to i64
  store i64 %conv1380, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1381:                                  ; preds = %lor.lhs.false.1360
  %274 = load i64, i64* %size, align 8
  %conv1382 = trunc i64 %274 to i32
  %mul1383 = mul i32 %conv1382, 8
  %cmp1384 = icmp ule i32 %mul1383, 2147483647
  br i1 %cmp1384, label %cond.true.1386, label %cond.false.1389

cond.true.1386:                                   ; preds = %cond.false.1381
  %275 = load i64, i64* %size, align 8
  %conv1387 = trunc i64 %275 to i32
  %mul1388 = mul i32 %conv1387, 8
  br label %cond.end.1394

cond.false.1389:                                  ; preds = %cond.false.1381
  %276 = load i64, i64* %size, align 8
  %conv1390 = trunc i64 %276 to i32
  %mul1391 = mul i32 %conv1390, 8
  %sub1392 = sub i32 %mul1391, -2147483648
  %add1393 = add nsw i32 %sub1392, -2147483648
  br label %cond.end.1394

cond.end.1394:                                    ; preds = %cond.false.1389, %cond.true.1386
  %cond1395 = phi i32 [ %mul1388, %cond.true.1386 ], [ %add1393, %cond.false.1389 ]
  %conv1396 = sext i32 %cond1395 to i64
  store i64 %conv1396, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1397:                                  ; preds = %cond.true.1170
  %277 = load i64, i64* %size, align 8
  %add1398 = add nsw i64 0, %277
  %mul1399 = mul nsw i64 0, %add1398
  %sub1400 = sub nsw i64 %mul1399, 1
  %cmp1401 = icmp slt i64 %sub1400, 0
  br i1 %cmp1401, label %cond.true.1403, label %cond.false.1420

cond.true.1403:                                   ; preds = %cond.false.1397
  %278 = load i64, i64* %size, align 8
  %add1404 = add nsw i64 0, %278
  %mul1405 = mul nsw i64 0, %add1404
  %add1406 = add nsw i64 %mul1405, 0
  %neg1407 = xor i64 %add1406, -1
  %cmp1408 = icmp eq i64 %neg1407, -1
  %conv1409 = zext i1 %cmp1408 to i32
  %sub1410 = sub nsw i32 0, %conv1409
  %conv1411 = sext i32 %sub1410 to i64
  %279 = load i64, i64* %size, align 8
  %add1412 = add nsw i64 0, %279
  %mul1413 = mul nsw i64 0, %add1412
  %add1414 = add nsw i64 %mul1413, 1
  %shl1415 = shl i64 %add1414, 62
  %sub1416 = sub nsw i64 %shl1415, 1
  %mul1417 = mul nsw i64 %sub1416, 2
  %add1418 = add nsw i64 %mul1417, 1
  %sub1419 = sub nsw i64 %conv1411, %add1418
  br label %cond.end.1424

cond.false.1420:                                  ; preds = %cond.false.1397
  %280 = load i64, i64* %size, align 8
  %add1421 = add nsw i64 0, %280
  %mul1422 = mul nsw i64 0, %add1421
  %add1423 = add nsw i64 %mul1422, 0
  br label %cond.end.1424

cond.end.1424:                                    ; preds = %cond.false.1420, %cond.true.1403
  %cond1425 = phi i64 [ %sub1419, %cond.true.1403 ], [ %add1423, %cond.false.1420 ]
  %cmp1426 = icmp eq i64 %cond1425, 0
  br i1 %cmp1426, label %land.lhs.true.1428, label %lor.lhs.false.1431

land.lhs.true.1428:                               ; preds = %cond.end.1424
  %281 = load i64, i64* %size, align 8
  %cmp1429 = icmp slt i64 %281, 0
  br i1 %cmp1429, label %cond.true.1566, label %lor.lhs.false.1431

lor.lhs.false.1431:                               ; preds = %land.lhs.true.1428, %cond.end.1424
  br i1 false, label %cond.true.1432, label %cond.false.1492

cond.true.1432:                                   ; preds = %lor.lhs.false.1431
  %282 = load i64, i64* %size, align 8
  %cmp1433 = icmp slt i64 %282, 0
  br i1 %cmp1433, label %cond.true.1435, label %cond.false.1458

cond.true.1435:                                   ; preds = %cond.true.1432
  %283 = load i64, i64* %size, align 8
  %284 = load i64, i64* %size, align 8
  %add1436 = add nsw i64 0, %284
  %mul1437 = mul nsw i64 0, %add1436
  %sub1438 = sub nsw i64 %mul1437, 1
  %cmp1439 = icmp slt i64 %sub1438, 0
  br i1 %cmp1439, label %cond.true.1441, label %cond.false.1449

cond.true.1441:                                   ; preds = %cond.true.1435
  %285 = load i64, i64* %size, align 8
  %add1442 = add nsw i64 0, %285
  %mul1443 = mul nsw i64 0, %add1442
  %add1444 = add nsw i64 %mul1443, 1
  %shl1445 = shl i64 %add1444, 62
  %sub1446 = sub nsw i64 %shl1445, 1
  %mul1447 = mul nsw i64 %sub1446, 2
  %add1448 = add nsw i64 %mul1447, 1
  br label %cond.end.1453

cond.false.1449:                                  ; preds = %cond.true.1435
  %286 = load i64, i64* %size, align 8
  %add1450 = add nsw i64 0, %286
  %mul1451 = mul nsw i64 0, %add1450
  %sub1452 = sub nsw i64 %mul1451, 1
  br label %cond.end.1453

cond.end.1453:                                    ; preds = %cond.false.1449, %cond.true.1441
  %cond1454 = phi i64 [ %add1448, %cond.true.1441 ], [ %sub1452, %cond.false.1449 ]
  %div1455 = sdiv i64 %cond1454, 8
  %cmp1456 = icmp slt i64 %283, %div1455
  br i1 %cmp1456, label %cond.true.1566, label %lor.lhs.false.1552

cond.false.1458:                                  ; preds = %cond.true.1432
  br i1 false, label %cond.true.1459, label %cond.false.1460

cond.true.1459:                                   ; preds = %cond.false.1458
  br i1 false, label %cond.true.1566, label %lor.lhs.false.1552

cond.false.1460:                                  ; preds = %cond.false.1458
  %287 = load i64, i64* %size, align 8
  %add1461 = add nsw i64 0, %287
  %mul1462 = mul nsw i64 0, %add1461
  %sub1463 = sub nsw i64 %mul1462, 1
  %cmp1464 = icmp slt i64 %sub1463, 0
  br i1 %cmp1464, label %cond.true.1466, label %cond.false.1483

cond.true.1466:                                   ; preds = %cond.false.1460
  %288 = load i64, i64* %size, align 8
  %add1467 = add nsw i64 0, %288
  %mul1468 = mul nsw i64 0, %add1467
  %add1469 = add nsw i64 %mul1468, 0
  %neg1470 = xor i64 %add1469, -1
  %cmp1471 = icmp eq i64 %neg1470, -1
  %conv1472 = zext i1 %cmp1471 to i32
  %sub1473 = sub nsw i32 0, %conv1472
  %conv1474 = sext i32 %sub1473 to i64
  %289 = load i64, i64* %size, align 8
  %add1475 = add nsw i64 0, %289
  %mul1476 = mul nsw i64 0, %add1475
  %add1477 = add nsw i64 %mul1476, 1
  %shl1478 = shl i64 %add1477, 62
  %sub1479 = sub nsw i64 %shl1478, 1
  %mul1480 = mul nsw i64 %sub1479, 2
  %add1481 = add nsw i64 %mul1480, 1
  %sub1482 = sub nsw i64 %conv1474, %add1481
  br label %cond.end.1487

cond.false.1483:                                  ; preds = %cond.false.1460
  %290 = load i64, i64* %size, align 8
  %add1484 = add nsw i64 0, %290
  %mul1485 = mul nsw i64 0, %add1484
  %add1486 = add nsw i64 %mul1485, 0
  br label %cond.end.1487

cond.end.1487:                                    ; preds = %cond.false.1483, %cond.true.1466
  %cond1488 = phi i64 [ %sub1482, %cond.true.1466 ], [ %add1486, %cond.false.1483 ]
  %div1489 = sdiv i64 %cond1488, 8
  %291 = load i64, i64* %size, align 8
  %cmp1490 = icmp slt i64 %div1489, %291
  br i1 %cmp1490, label %cond.true.1566, label %lor.lhs.false.1552

cond.false.1492:                                  ; preds = %lor.lhs.false.1431
  br i1 false, label %cond.true.1493, label %cond.false.1494

cond.true.1493:                                   ; preds = %cond.false.1492
  br i1 false, label %cond.true.1566, label %lor.lhs.false.1552

cond.false.1494:                                  ; preds = %cond.false.1492
  %292 = load i64, i64* %size, align 8
  %cmp1495 = icmp slt i64 %292, 0
  br i1 %cmp1495, label %cond.true.1497, label %cond.false.1529

cond.true.1497:                                   ; preds = %cond.false.1494
  %293 = load i64, i64* %size, align 8
  %294 = load i64, i64* %size, align 8
  %add1498 = add nsw i64 0, %294
  %mul1499 = mul nsw i64 0, %add1498
  %sub1500 = sub nsw i64 %mul1499, 1
  %cmp1501 = icmp slt i64 %sub1500, 0
  br i1 %cmp1501, label %cond.true.1503, label %cond.false.1520

cond.true.1503:                                   ; preds = %cond.true.1497
  %295 = load i64, i64* %size, align 8
  %add1504 = add nsw i64 0, %295
  %mul1505 = mul nsw i64 0, %add1504
  %add1506 = add nsw i64 %mul1505, 0
  %neg1507 = xor i64 %add1506, -1
  %cmp1508 = icmp eq i64 %neg1507, -1
  %conv1509 = zext i1 %cmp1508 to i32
  %sub1510 = sub nsw i32 0, %conv1509
  %conv1511 = sext i32 %sub1510 to i64
  %296 = load i64, i64* %size, align 8
  %add1512 = add nsw i64 0, %296
  %mul1513 = mul nsw i64 0, %add1512
  %add1514 = add nsw i64 %mul1513, 1
  %shl1515 = shl i64 %add1514, 62
  %sub1516 = sub nsw i64 %shl1515, 1
  %mul1517 = mul nsw i64 %sub1516, 2
  %add1518 = add nsw i64 %mul1517, 1
  %sub1519 = sub nsw i64 %conv1511, %add1518
  br label %cond.end.1524

cond.false.1520:                                  ; preds = %cond.true.1497
  %297 = load i64, i64* %size, align 8
  %add1521 = add nsw i64 0, %297
  %mul1522 = mul nsw i64 0, %add1521
  %add1523 = add nsw i64 %mul1522, 0
  br label %cond.end.1524

cond.end.1524:                                    ; preds = %cond.false.1520, %cond.true.1503
  %cond1525 = phi i64 [ %sub1519, %cond.true.1503 ], [ %add1523, %cond.false.1520 ]
  %div1526 = sdiv i64 %cond1525, 8
  %cmp1527 = icmp slt i64 %293, %div1526
  br i1 %cmp1527, label %cond.true.1566, label %lor.lhs.false.1552

cond.false.1529:                                  ; preds = %cond.false.1494
  %298 = load i64, i64* %size, align 8
  %add1530 = add nsw i64 0, %298
  %mul1531 = mul nsw i64 0, %add1530
  %sub1532 = sub nsw i64 %mul1531, 1
  %cmp1533 = icmp slt i64 %sub1532, 0
  br i1 %cmp1533, label %cond.true.1535, label %cond.false.1543

cond.true.1535:                                   ; preds = %cond.false.1529
  %299 = load i64, i64* %size, align 8
  %add1536 = add nsw i64 0, %299
  %mul1537 = mul nsw i64 0, %add1536
  %add1538 = add nsw i64 %mul1537, 1
  %shl1539 = shl i64 %add1538, 62
  %sub1540 = sub nsw i64 %shl1539, 1
  %mul1541 = mul nsw i64 %sub1540, 2
  %add1542 = add nsw i64 %mul1541, 1
  br label %cond.end.1547

cond.false.1543:                                  ; preds = %cond.false.1529
  %300 = load i64, i64* %size, align 8
  %add1544 = add nsw i64 0, %300
  %mul1545 = mul nsw i64 0, %add1544
  %sub1546 = sub nsw i64 %mul1545, 1
  br label %cond.end.1547

cond.end.1547:                                    ; preds = %cond.false.1543, %cond.true.1535
  %cond1548 = phi i64 [ %add1542, %cond.true.1535 ], [ %sub1546, %cond.false.1543 ]
  %div1549 = sdiv i64 %cond1548, 8
  %301 = load i64, i64* %size, align 8
  %cmp1550 = icmp slt i64 %div1549, %301
  br i1 %cmp1550, label %cond.true.1566, label %lor.lhs.false.1552

lor.lhs.false.1552:                               ; preds = %cond.end.1547, %cond.end.1524, %cond.true.1493, %cond.end.1487, %cond.true.1459, %cond.end.1453
  %302 = load i64, i64* %size, align 8
  %mul1553 = mul nsw i64 %302, 8
  %mul1554 = mul nsw i64 0, %mul1553
  %sub1555 = sub nsw i64 %mul1554, 1
  %cmp1556 = icmp slt i64 %sub1555, 0
  br i1 %cmp1556, label %land.lhs.true.1558, label %lor.lhs.false.1562

land.lhs.true.1558:                               ; preds = %lor.lhs.false.1552
  %303 = load i64, i64* %size, align 8
  %mul1559 = mul nsw i64 %303, 8
  %cmp1560 = icmp slt i64 %mul1559, -2147483648
  br i1 %cmp1560, label %cond.true.1566, label %lor.lhs.false.1562

lor.lhs.false.1562:                               ; preds = %land.lhs.true.1558, %lor.lhs.false.1552
  %304 = load i64, i64* %size, align 8
  %mul1563 = mul nsw i64 %304, 8
  %cmp1564 = icmp slt i64 2147483647, %mul1563
  br i1 %cmp1564, label %cond.true.1566, label %cond.false.1582

cond.true.1566:                                   ; preds = %lor.lhs.false.1562, %land.lhs.true.1558, %cond.end.1547, %cond.end.1524, %cond.true.1493, %cond.end.1487, %cond.true.1459, %cond.end.1453, %land.lhs.true.1428
  %305 = load i64, i64* %size, align 8
  %conv1567 = trunc i64 %305 to i32
  %mul1568 = mul i32 %conv1567, 8
  %cmp1569 = icmp ule i32 %mul1568, 2147483647
  br i1 %cmp1569, label %cond.true.1571, label %cond.false.1574

cond.true.1571:                                   ; preds = %cond.true.1566
  %306 = load i64, i64* %size, align 8
  %conv1572 = trunc i64 %306 to i32
  %mul1573 = mul i32 %conv1572, 8
  br label %cond.end.1579

cond.false.1574:                                  ; preds = %cond.true.1566
  %307 = load i64, i64* %size, align 8
  %conv1575 = trunc i64 %307 to i32
  %mul1576 = mul i32 %conv1575, 8
  %sub1577 = sub i32 %mul1576, -2147483648
  %add1578 = add nsw i32 %sub1577, -2147483648
  br label %cond.end.1579

cond.end.1579:                                    ; preds = %cond.false.1574, %cond.true.1571
  %cond1580 = phi i32 [ %mul1573, %cond.true.1571 ], [ %add1578, %cond.false.1574 ]
  %conv1581 = sext i32 %cond1580 to i64
  store i64 %conv1581, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1582:                                  ; preds = %lor.lhs.false.1562
  %308 = load i64, i64* %size, align 8
  %conv1583 = trunc i64 %308 to i32
  %mul1584 = mul i32 %conv1583, 8
  %cmp1585 = icmp ule i32 %mul1584, 2147483647
  br i1 %cmp1585, label %cond.true.1587, label %cond.false.1590

cond.true.1587:                                   ; preds = %cond.false.1582
  %309 = load i64, i64* %size, align 8
  %conv1588 = trunc i64 %309 to i32
  %mul1589 = mul i32 %conv1588, 8
  br label %cond.end.1595

cond.false.1590:                                  ; preds = %cond.false.1582
  %310 = load i64, i64* %size, align 8
  %conv1591 = trunc i64 %310 to i32
  %mul1592 = mul i32 %conv1591, 8
  %sub1593 = sub i32 %mul1592, -2147483648
  %add1594 = add nsw i32 %sub1593, -2147483648
  br label %cond.end.1595

cond.end.1595:                                    ; preds = %cond.false.1590, %cond.true.1587
  %cond1596 = phi i32 [ %mul1589, %cond.true.1587 ], [ %add1594, %cond.false.1590 ]
  %conv1597 = sext i32 %cond1596 to i64
  store i64 %conv1597, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1598:                                  ; preds = %cond.false.1169
  br i1 true, label %cond.true.1599, label %cond.false.1986

cond.true.1599:                                   ; preds = %cond.false.1598
  br i1 false, label %cond.true.1600, label %cond.false.1793

cond.true.1600:                                   ; preds = %cond.true.1599
  %311 = load i64, i64* %size, align 8
  %add1601 = add nsw i64 0, %311
  %mul1602 = mul nsw i64 0, %add1601
  %sub1603 = sub nsw i64 %mul1602, 1
  %cmp1604 = icmp slt i64 %sub1603, 0
  br i1 %cmp1604, label %cond.true.1606, label %cond.false.1623

cond.true.1606:                                   ; preds = %cond.true.1600
  %312 = load i64, i64* %size, align 8
  %add1607 = add nsw i64 0, %312
  %mul1608 = mul nsw i64 0, %add1607
  %add1609 = add nsw i64 %mul1608, 0
  %neg1610 = xor i64 %add1609, -1
  %cmp1611 = icmp eq i64 %neg1610, -1
  %conv1612 = zext i1 %cmp1611 to i32
  %sub1613 = sub nsw i32 0, %conv1612
  %conv1614 = sext i32 %sub1613 to i64
  %313 = load i64, i64* %size, align 8
  %add1615 = add nsw i64 0, %313
  %mul1616 = mul nsw i64 0, %add1615
  %add1617 = add nsw i64 %mul1616, 1
  %shl1618 = shl i64 %add1617, 62
  %sub1619 = sub nsw i64 %shl1618, 1
  %mul1620 = mul nsw i64 %sub1619, 2
  %add1621 = add nsw i64 %mul1620, 1
  %sub1622 = sub nsw i64 %conv1614, %add1621
  br label %cond.end.1627

cond.false.1623:                                  ; preds = %cond.true.1600
  %314 = load i64, i64* %size, align 8
  %add1624 = add nsw i64 0, %314
  %mul1625 = mul nsw i64 0, %add1624
  %add1626 = add nsw i64 %mul1625, 0
  br label %cond.end.1627

cond.end.1627:                                    ; preds = %cond.false.1623, %cond.true.1606
  %cond1628 = phi i64 [ %sub1622, %cond.true.1606 ], [ %add1626, %cond.false.1623 ]
  %cmp1629 = icmp eq i64 %cond1628, 0
  br i1 %cmp1629, label %land.lhs.true.1631, label %lor.lhs.false.1634

land.lhs.true.1631:                               ; preds = %cond.end.1627
  %315 = load i64, i64* %size, align 8
  %cmp1632 = icmp slt i64 %315, 0
  br i1 %cmp1632, label %cond.true.1769, label %lor.lhs.false.1634

lor.lhs.false.1634:                               ; preds = %land.lhs.true.1631, %cond.end.1627
  br i1 false, label %cond.true.1635, label %cond.false.1695

cond.true.1635:                                   ; preds = %lor.lhs.false.1634
  %316 = load i64, i64* %size, align 8
  %cmp1636 = icmp slt i64 %316, 0
  br i1 %cmp1636, label %cond.true.1638, label %cond.false.1661

cond.true.1638:                                   ; preds = %cond.true.1635
  %317 = load i64, i64* %size, align 8
  %318 = load i64, i64* %size, align 8
  %add1639 = add nsw i64 0, %318
  %mul1640 = mul nsw i64 0, %add1639
  %sub1641 = sub nsw i64 %mul1640, 1
  %cmp1642 = icmp slt i64 %sub1641, 0
  br i1 %cmp1642, label %cond.true.1644, label %cond.false.1652

cond.true.1644:                                   ; preds = %cond.true.1638
  %319 = load i64, i64* %size, align 8
  %add1645 = add nsw i64 0, %319
  %mul1646 = mul nsw i64 0, %add1645
  %add1647 = add nsw i64 %mul1646, 1
  %shl1648 = shl i64 %add1647, 62
  %sub1649 = sub nsw i64 %shl1648, 1
  %mul1650 = mul nsw i64 %sub1649, 2
  %add1651 = add nsw i64 %mul1650, 1
  br label %cond.end.1656

cond.false.1652:                                  ; preds = %cond.true.1638
  %320 = load i64, i64* %size, align 8
  %add1653 = add nsw i64 0, %320
  %mul1654 = mul nsw i64 0, %add1653
  %sub1655 = sub nsw i64 %mul1654, 1
  br label %cond.end.1656

cond.end.1656:                                    ; preds = %cond.false.1652, %cond.true.1644
  %cond1657 = phi i64 [ %add1651, %cond.true.1644 ], [ %sub1655, %cond.false.1652 ]
  %div1658 = sdiv i64 %cond1657, 8
  %cmp1659 = icmp slt i64 %317, %div1658
  br i1 %cmp1659, label %cond.true.1769, label %lor.lhs.false.1755

cond.false.1661:                                  ; preds = %cond.true.1635
  br i1 false, label %cond.true.1662, label %cond.false.1663

cond.true.1662:                                   ; preds = %cond.false.1661
  br i1 false, label %cond.true.1769, label %lor.lhs.false.1755

cond.false.1663:                                  ; preds = %cond.false.1661
  %321 = load i64, i64* %size, align 8
  %add1664 = add nsw i64 0, %321
  %mul1665 = mul nsw i64 0, %add1664
  %sub1666 = sub nsw i64 %mul1665, 1
  %cmp1667 = icmp slt i64 %sub1666, 0
  br i1 %cmp1667, label %cond.true.1669, label %cond.false.1686

cond.true.1669:                                   ; preds = %cond.false.1663
  %322 = load i64, i64* %size, align 8
  %add1670 = add nsw i64 0, %322
  %mul1671 = mul nsw i64 0, %add1670
  %add1672 = add nsw i64 %mul1671, 0
  %neg1673 = xor i64 %add1672, -1
  %cmp1674 = icmp eq i64 %neg1673, -1
  %conv1675 = zext i1 %cmp1674 to i32
  %sub1676 = sub nsw i32 0, %conv1675
  %conv1677 = sext i32 %sub1676 to i64
  %323 = load i64, i64* %size, align 8
  %add1678 = add nsw i64 0, %323
  %mul1679 = mul nsw i64 0, %add1678
  %add1680 = add nsw i64 %mul1679, 1
  %shl1681 = shl i64 %add1680, 62
  %sub1682 = sub nsw i64 %shl1681, 1
  %mul1683 = mul nsw i64 %sub1682, 2
  %add1684 = add nsw i64 %mul1683, 1
  %sub1685 = sub nsw i64 %conv1677, %add1684
  br label %cond.end.1690

cond.false.1686:                                  ; preds = %cond.false.1663
  %324 = load i64, i64* %size, align 8
  %add1687 = add nsw i64 0, %324
  %mul1688 = mul nsw i64 0, %add1687
  %add1689 = add nsw i64 %mul1688, 0
  br label %cond.end.1690

cond.end.1690:                                    ; preds = %cond.false.1686, %cond.true.1669
  %cond1691 = phi i64 [ %sub1685, %cond.true.1669 ], [ %add1689, %cond.false.1686 ]
  %div1692 = sdiv i64 %cond1691, 8
  %325 = load i64, i64* %size, align 8
  %cmp1693 = icmp slt i64 %div1692, %325
  br i1 %cmp1693, label %cond.true.1769, label %lor.lhs.false.1755

cond.false.1695:                                  ; preds = %lor.lhs.false.1634
  br i1 false, label %cond.true.1696, label %cond.false.1697

cond.true.1696:                                   ; preds = %cond.false.1695
  br i1 false, label %cond.true.1769, label %lor.lhs.false.1755

cond.false.1697:                                  ; preds = %cond.false.1695
  %326 = load i64, i64* %size, align 8
  %cmp1698 = icmp slt i64 %326, 0
  br i1 %cmp1698, label %cond.true.1700, label %cond.false.1732

cond.true.1700:                                   ; preds = %cond.false.1697
  %327 = load i64, i64* %size, align 8
  %328 = load i64, i64* %size, align 8
  %add1701 = add nsw i64 0, %328
  %mul1702 = mul nsw i64 0, %add1701
  %sub1703 = sub nsw i64 %mul1702, 1
  %cmp1704 = icmp slt i64 %sub1703, 0
  br i1 %cmp1704, label %cond.true.1706, label %cond.false.1723

cond.true.1706:                                   ; preds = %cond.true.1700
  %329 = load i64, i64* %size, align 8
  %add1707 = add nsw i64 0, %329
  %mul1708 = mul nsw i64 0, %add1707
  %add1709 = add nsw i64 %mul1708, 0
  %neg1710 = xor i64 %add1709, -1
  %cmp1711 = icmp eq i64 %neg1710, -1
  %conv1712 = zext i1 %cmp1711 to i32
  %sub1713 = sub nsw i32 0, %conv1712
  %conv1714 = sext i32 %sub1713 to i64
  %330 = load i64, i64* %size, align 8
  %add1715 = add nsw i64 0, %330
  %mul1716 = mul nsw i64 0, %add1715
  %add1717 = add nsw i64 %mul1716, 1
  %shl1718 = shl i64 %add1717, 62
  %sub1719 = sub nsw i64 %shl1718, 1
  %mul1720 = mul nsw i64 %sub1719, 2
  %add1721 = add nsw i64 %mul1720, 1
  %sub1722 = sub nsw i64 %conv1714, %add1721
  br label %cond.end.1727

cond.false.1723:                                  ; preds = %cond.true.1700
  %331 = load i64, i64* %size, align 8
  %add1724 = add nsw i64 0, %331
  %mul1725 = mul nsw i64 0, %add1724
  %add1726 = add nsw i64 %mul1725, 0
  br label %cond.end.1727

cond.end.1727:                                    ; preds = %cond.false.1723, %cond.true.1706
  %cond1728 = phi i64 [ %sub1722, %cond.true.1706 ], [ %add1726, %cond.false.1723 ]
  %div1729 = sdiv i64 %cond1728, 8
  %cmp1730 = icmp slt i64 %327, %div1729
  br i1 %cmp1730, label %cond.true.1769, label %lor.lhs.false.1755

cond.false.1732:                                  ; preds = %cond.false.1697
  %332 = load i64, i64* %size, align 8
  %add1733 = add nsw i64 0, %332
  %mul1734 = mul nsw i64 0, %add1733
  %sub1735 = sub nsw i64 %mul1734, 1
  %cmp1736 = icmp slt i64 %sub1735, 0
  br i1 %cmp1736, label %cond.true.1738, label %cond.false.1746

cond.true.1738:                                   ; preds = %cond.false.1732
  %333 = load i64, i64* %size, align 8
  %add1739 = add nsw i64 0, %333
  %mul1740 = mul nsw i64 0, %add1739
  %add1741 = add nsw i64 %mul1740, 1
  %shl1742 = shl i64 %add1741, 62
  %sub1743 = sub nsw i64 %shl1742, 1
  %mul1744 = mul nsw i64 %sub1743, 2
  %add1745 = add nsw i64 %mul1744, 1
  br label %cond.end.1750

cond.false.1746:                                  ; preds = %cond.false.1732
  %334 = load i64, i64* %size, align 8
  %add1747 = add nsw i64 0, %334
  %mul1748 = mul nsw i64 0, %add1747
  %sub1749 = sub nsw i64 %mul1748, 1
  br label %cond.end.1750

cond.end.1750:                                    ; preds = %cond.false.1746, %cond.true.1738
  %cond1751 = phi i64 [ %add1745, %cond.true.1738 ], [ %sub1749, %cond.false.1746 ]
  %div1752 = sdiv i64 %cond1751, 8
  %335 = load i64, i64* %size, align 8
  %cmp1753 = icmp slt i64 %div1752, %335
  br i1 %cmp1753, label %cond.true.1769, label %lor.lhs.false.1755

lor.lhs.false.1755:                               ; preds = %cond.end.1750, %cond.end.1727, %cond.true.1696, %cond.end.1690, %cond.true.1662, %cond.end.1656
  %336 = load i64, i64* %size, align 8
  %mul1756 = mul nsw i64 %336, 8
  %mul1757 = mul nsw i64 0, %mul1756
  %sub1758 = sub nsw i64 %mul1757, 1
  %cmp1759 = icmp slt i64 %sub1758, 0
  br i1 %cmp1759, label %land.lhs.true.1761, label %lor.lhs.false.1765

land.lhs.true.1761:                               ; preds = %lor.lhs.false.1755
  %337 = load i64, i64* %size, align 8
  %mul1762 = mul nsw i64 %337, 8
  %cmp1763 = icmp slt i64 %mul1762, -9223372036854775808
  br i1 %cmp1763, label %cond.true.1769, label %lor.lhs.false.1765

lor.lhs.false.1765:                               ; preds = %land.lhs.true.1761, %lor.lhs.false.1755
  %338 = load i64, i64* %size, align 8
  %mul1766 = mul nsw i64 %338, 8
  %cmp1767 = icmp slt i64 9223372036854775807, %mul1766
  br i1 %cmp1767, label %cond.true.1769, label %cond.false.1781

cond.true.1769:                                   ; preds = %lor.lhs.false.1765, %land.lhs.true.1761, %cond.end.1750, %cond.end.1727, %cond.true.1696, %cond.end.1690, %cond.true.1662, %cond.end.1656, %land.lhs.true.1631
  %339 = load i64, i64* %size, align 8
  %mul1770 = mul i64 %339, 8
  %cmp1771 = icmp ule i64 %mul1770, 9223372036854775807
  br i1 %cmp1771, label %cond.true.1773, label %cond.false.1775

cond.true.1773:                                   ; preds = %cond.true.1769
  %340 = load i64, i64* %size, align 8
  %mul1774 = mul i64 %340, 8
  br label %cond.end.1779

cond.false.1775:                                  ; preds = %cond.true.1769
  %341 = load i64, i64* %size, align 8
  %mul1776 = mul i64 %341, 8
  %sub1777 = sub i64 %mul1776, -9223372036854775808
  %add1778 = add nsw i64 %sub1777, -9223372036854775808
  br label %cond.end.1779

cond.end.1779:                                    ; preds = %cond.false.1775, %cond.true.1773
  %cond1780 = phi i64 [ %mul1774, %cond.true.1773 ], [ %add1778, %cond.false.1775 ]
  store i64 %cond1780, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1781:                                  ; preds = %lor.lhs.false.1765
  %342 = load i64, i64* %size, align 8
  %mul1782 = mul i64 %342, 8
  %cmp1783 = icmp ule i64 %mul1782, 9223372036854775807
  br i1 %cmp1783, label %cond.true.1785, label %cond.false.1787

cond.true.1785:                                   ; preds = %cond.false.1781
  %343 = load i64, i64* %size, align 8
  %mul1786 = mul i64 %343, 8
  br label %cond.end.1791

cond.false.1787:                                  ; preds = %cond.false.1781
  %344 = load i64, i64* %size, align 8
  %mul1788 = mul i64 %344, 8
  %sub1789 = sub i64 %mul1788, -9223372036854775808
  %add1790 = add nsw i64 %sub1789, -9223372036854775808
  br label %cond.end.1791

cond.end.1791:                                    ; preds = %cond.false.1787, %cond.true.1785
  %cond1792 = phi i64 [ %mul1786, %cond.true.1785 ], [ %add1790, %cond.false.1787 ]
  store i64 %cond1792, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1793:                                  ; preds = %cond.true.1599
  %345 = load i64, i64* %size, align 8
  %add1794 = add nsw i64 0, %345
  %mul1795 = mul nsw i64 0, %add1794
  %sub1796 = sub nsw i64 %mul1795, 1
  %cmp1797 = icmp slt i64 %sub1796, 0
  br i1 %cmp1797, label %cond.true.1799, label %cond.false.1816

cond.true.1799:                                   ; preds = %cond.false.1793
  %346 = load i64, i64* %size, align 8
  %add1800 = add nsw i64 0, %346
  %mul1801 = mul nsw i64 0, %add1800
  %add1802 = add nsw i64 %mul1801, 0
  %neg1803 = xor i64 %add1802, -1
  %cmp1804 = icmp eq i64 %neg1803, -1
  %conv1805 = zext i1 %cmp1804 to i32
  %sub1806 = sub nsw i32 0, %conv1805
  %conv1807 = sext i32 %sub1806 to i64
  %347 = load i64, i64* %size, align 8
  %add1808 = add nsw i64 0, %347
  %mul1809 = mul nsw i64 0, %add1808
  %add1810 = add nsw i64 %mul1809, 1
  %shl1811 = shl i64 %add1810, 62
  %sub1812 = sub nsw i64 %shl1811, 1
  %mul1813 = mul nsw i64 %sub1812, 2
  %add1814 = add nsw i64 %mul1813, 1
  %sub1815 = sub nsw i64 %conv1807, %add1814
  br label %cond.end.1820

cond.false.1816:                                  ; preds = %cond.false.1793
  %348 = load i64, i64* %size, align 8
  %add1817 = add nsw i64 0, %348
  %mul1818 = mul nsw i64 0, %add1817
  %add1819 = add nsw i64 %mul1818, 0
  br label %cond.end.1820

cond.end.1820:                                    ; preds = %cond.false.1816, %cond.true.1799
  %cond1821 = phi i64 [ %sub1815, %cond.true.1799 ], [ %add1819, %cond.false.1816 ]
  %cmp1822 = icmp eq i64 %cond1821, 0
  br i1 %cmp1822, label %land.lhs.true.1824, label %lor.lhs.false.1827

land.lhs.true.1824:                               ; preds = %cond.end.1820
  %349 = load i64, i64* %size, align 8
  %cmp1825 = icmp slt i64 %349, 0
  br i1 %cmp1825, label %cond.true.1962, label %lor.lhs.false.1827

lor.lhs.false.1827:                               ; preds = %land.lhs.true.1824, %cond.end.1820
  br i1 false, label %cond.true.1828, label %cond.false.1888

cond.true.1828:                                   ; preds = %lor.lhs.false.1827
  %350 = load i64, i64* %size, align 8
  %cmp1829 = icmp slt i64 %350, 0
  br i1 %cmp1829, label %cond.true.1831, label %cond.false.1854

cond.true.1831:                                   ; preds = %cond.true.1828
  %351 = load i64, i64* %size, align 8
  %352 = load i64, i64* %size, align 8
  %add1832 = add nsw i64 0, %352
  %mul1833 = mul nsw i64 0, %add1832
  %sub1834 = sub nsw i64 %mul1833, 1
  %cmp1835 = icmp slt i64 %sub1834, 0
  br i1 %cmp1835, label %cond.true.1837, label %cond.false.1845

cond.true.1837:                                   ; preds = %cond.true.1831
  %353 = load i64, i64* %size, align 8
  %add1838 = add nsw i64 0, %353
  %mul1839 = mul nsw i64 0, %add1838
  %add1840 = add nsw i64 %mul1839, 1
  %shl1841 = shl i64 %add1840, 62
  %sub1842 = sub nsw i64 %shl1841, 1
  %mul1843 = mul nsw i64 %sub1842, 2
  %add1844 = add nsw i64 %mul1843, 1
  br label %cond.end.1849

cond.false.1845:                                  ; preds = %cond.true.1831
  %354 = load i64, i64* %size, align 8
  %add1846 = add nsw i64 0, %354
  %mul1847 = mul nsw i64 0, %add1846
  %sub1848 = sub nsw i64 %mul1847, 1
  br label %cond.end.1849

cond.end.1849:                                    ; preds = %cond.false.1845, %cond.true.1837
  %cond1850 = phi i64 [ %add1844, %cond.true.1837 ], [ %sub1848, %cond.false.1845 ]
  %div1851 = sdiv i64 %cond1850, 8
  %cmp1852 = icmp slt i64 %351, %div1851
  br i1 %cmp1852, label %cond.true.1962, label %lor.lhs.false.1948

cond.false.1854:                                  ; preds = %cond.true.1828
  br i1 false, label %cond.true.1855, label %cond.false.1856

cond.true.1855:                                   ; preds = %cond.false.1854
  br i1 false, label %cond.true.1962, label %lor.lhs.false.1948

cond.false.1856:                                  ; preds = %cond.false.1854
  %355 = load i64, i64* %size, align 8
  %add1857 = add nsw i64 0, %355
  %mul1858 = mul nsw i64 0, %add1857
  %sub1859 = sub nsw i64 %mul1858, 1
  %cmp1860 = icmp slt i64 %sub1859, 0
  br i1 %cmp1860, label %cond.true.1862, label %cond.false.1879

cond.true.1862:                                   ; preds = %cond.false.1856
  %356 = load i64, i64* %size, align 8
  %add1863 = add nsw i64 0, %356
  %mul1864 = mul nsw i64 0, %add1863
  %add1865 = add nsw i64 %mul1864, 0
  %neg1866 = xor i64 %add1865, -1
  %cmp1867 = icmp eq i64 %neg1866, -1
  %conv1868 = zext i1 %cmp1867 to i32
  %sub1869 = sub nsw i32 0, %conv1868
  %conv1870 = sext i32 %sub1869 to i64
  %357 = load i64, i64* %size, align 8
  %add1871 = add nsw i64 0, %357
  %mul1872 = mul nsw i64 0, %add1871
  %add1873 = add nsw i64 %mul1872, 1
  %shl1874 = shl i64 %add1873, 62
  %sub1875 = sub nsw i64 %shl1874, 1
  %mul1876 = mul nsw i64 %sub1875, 2
  %add1877 = add nsw i64 %mul1876, 1
  %sub1878 = sub nsw i64 %conv1870, %add1877
  br label %cond.end.1883

cond.false.1879:                                  ; preds = %cond.false.1856
  %358 = load i64, i64* %size, align 8
  %add1880 = add nsw i64 0, %358
  %mul1881 = mul nsw i64 0, %add1880
  %add1882 = add nsw i64 %mul1881, 0
  br label %cond.end.1883

cond.end.1883:                                    ; preds = %cond.false.1879, %cond.true.1862
  %cond1884 = phi i64 [ %sub1878, %cond.true.1862 ], [ %add1882, %cond.false.1879 ]
  %div1885 = sdiv i64 %cond1884, 8
  %359 = load i64, i64* %size, align 8
  %cmp1886 = icmp slt i64 %div1885, %359
  br i1 %cmp1886, label %cond.true.1962, label %lor.lhs.false.1948

cond.false.1888:                                  ; preds = %lor.lhs.false.1827
  br i1 false, label %cond.true.1889, label %cond.false.1890

cond.true.1889:                                   ; preds = %cond.false.1888
  br i1 false, label %cond.true.1962, label %lor.lhs.false.1948

cond.false.1890:                                  ; preds = %cond.false.1888
  %360 = load i64, i64* %size, align 8
  %cmp1891 = icmp slt i64 %360, 0
  br i1 %cmp1891, label %cond.true.1893, label %cond.false.1925

cond.true.1893:                                   ; preds = %cond.false.1890
  %361 = load i64, i64* %size, align 8
  %362 = load i64, i64* %size, align 8
  %add1894 = add nsw i64 0, %362
  %mul1895 = mul nsw i64 0, %add1894
  %sub1896 = sub nsw i64 %mul1895, 1
  %cmp1897 = icmp slt i64 %sub1896, 0
  br i1 %cmp1897, label %cond.true.1899, label %cond.false.1916

cond.true.1899:                                   ; preds = %cond.true.1893
  %363 = load i64, i64* %size, align 8
  %add1900 = add nsw i64 0, %363
  %mul1901 = mul nsw i64 0, %add1900
  %add1902 = add nsw i64 %mul1901, 0
  %neg1903 = xor i64 %add1902, -1
  %cmp1904 = icmp eq i64 %neg1903, -1
  %conv1905 = zext i1 %cmp1904 to i32
  %sub1906 = sub nsw i32 0, %conv1905
  %conv1907 = sext i32 %sub1906 to i64
  %364 = load i64, i64* %size, align 8
  %add1908 = add nsw i64 0, %364
  %mul1909 = mul nsw i64 0, %add1908
  %add1910 = add nsw i64 %mul1909, 1
  %shl1911 = shl i64 %add1910, 62
  %sub1912 = sub nsw i64 %shl1911, 1
  %mul1913 = mul nsw i64 %sub1912, 2
  %add1914 = add nsw i64 %mul1913, 1
  %sub1915 = sub nsw i64 %conv1907, %add1914
  br label %cond.end.1920

cond.false.1916:                                  ; preds = %cond.true.1893
  %365 = load i64, i64* %size, align 8
  %add1917 = add nsw i64 0, %365
  %mul1918 = mul nsw i64 0, %add1917
  %add1919 = add nsw i64 %mul1918, 0
  br label %cond.end.1920

cond.end.1920:                                    ; preds = %cond.false.1916, %cond.true.1899
  %cond1921 = phi i64 [ %sub1915, %cond.true.1899 ], [ %add1919, %cond.false.1916 ]
  %div1922 = sdiv i64 %cond1921, 8
  %cmp1923 = icmp slt i64 %361, %div1922
  br i1 %cmp1923, label %cond.true.1962, label %lor.lhs.false.1948

cond.false.1925:                                  ; preds = %cond.false.1890
  %366 = load i64, i64* %size, align 8
  %add1926 = add nsw i64 0, %366
  %mul1927 = mul nsw i64 0, %add1926
  %sub1928 = sub nsw i64 %mul1927, 1
  %cmp1929 = icmp slt i64 %sub1928, 0
  br i1 %cmp1929, label %cond.true.1931, label %cond.false.1939

cond.true.1931:                                   ; preds = %cond.false.1925
  %367 = load i64, i64* %size, align 8
  %add1932 = add nsw i64 0, %367
  %mul1933 = mul nsw i64 0, %add1932
  %add1934 = add nsw i64 %mul1933, 1
  %shl1935 = shl i64 %add1934, 62
  %sub1936 = sub nsw i64 %shl1935, 1
  %mul1937 = mul nsw i64 %sub1936, 2
  %add1938 = add nsw i64 %mul1937, 1
  br label %cond.end.1943

cond.false.1939:                                  ; preds = %cond.false.1925
  %368 = load i64, i64* %size, align 8
  %add1940 = add nsw i64 0, %368
  %mul1941 = mul nsw i64 0, %add1940
  %sub1942 = sub nsw i64 %mul1941, 1
  br label %cond.end.1943

cond.end.1943:                                    ; preds = %cond.false.1939, %cond.true.1931
  %cond1944 = phi i64 [ %add1938, %cond.true.1931 ], [ %sub1942, %cond.false.1939 ]
  %div1945 = sdiv i64 %cond1944, 8
  %369 = load i64, i64* %size, align 8
  %cmp1946 = icmp slt i64 %div1945, %369
  br i1 %cmp1946, label %cond.true.1962, label %lor.lhs.false.1948

lor.lhs.false.1948:                               ; preds = %cond.end.1943, %cond.end.1920, %cond.true.1889, %cond.end.1883, %cond.true.1855, %cond.end.1849
  %370 = load i64, i64* %size, align 8
  %mul1949 = mul nsw i64 %370, 8
  %mul1950 = mul nsw i64 0, %mul1949
  %sub1951 = sub nsw i64 %mul1950, 1
  %cmp1952 = icmp slt i64 %sub1951, 0
  br i1 %cmp1952, label %land.lhs.true.1954, label %lor.lhs.false.1958

land.lhs.true.1954:                               ; preds = %lor.lhs.false.1948
  %371 = load i64, i64* %size, align 8
  %mul1955 = mul nsw i64 %371, 8
  %cmp1956 = icmp slt i64 %mul1955, -9223372036854775808
  br i1 %cmp1956, label %cond.true.1962, label %lor.lhs.false.1958

lor.lhs.false.1958:                               ; preds = %land.lhs.true.1954, %lor.lhs.false.1948
  %372 = load i64, i64* %size, align 8
  %mul1959 = mul nsw i64 %372, 8
  %cmp1960 = icmp slt i64 9223372036854775807, %mul1959
  br i1 %cmp1960, label %cond.true.1962, label %cond.false.1974

cond.true.1962:                                   ; preds = %lor.lhs.false.1958, %land.lhs.true.1954, %cond.end.1943, %cond.end.1920, %cond.true.1889, %cond.end.1883, %cond.true.1855, %cond.end.1849, %land.lhs.true.1824
  %373 = load i64, i64* %size, align 8
  %mul1963 = mul i64 %373, 8
  %cmp1964 = icmp ule i64 %mul1963, 9223372036854775807
  br i1 %cmp1964, label %cond.true.1966, label %cond.false.1968

cond.true.1966:                                   ; preds = %cond.true.1962
  %374 = load i64, i64* %size, align 8
  %mul1967 = mul i64 %374, 8
  br label %cond.end.1972

cond.false.1968:                                  ; preds = %cond.true.1962
  %375 = load i64, i64* %size, align 8
  %mul1969 = mul i64 %375, 8
  %sub1970 = sub i64 %mul1969, -9223372036854775808
  %add1971 = add nsw i64 %sub1970, -9223372036854775808
  br label %cond.end.1972

cond.end.1972:                                    ; preds = %cond.false.1968, %cond.true.1966
  %cond1973 = phi i64 [ %mul1967, %cond.true.1966 ], [ %add1971, %cond.false.1968 ]
  store i64 %cond1973, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1974:                                  ; preds = %lor.lhs.false.1958
  %376 = load i64, i64* %size, align 8
  %mul1975 = mul i64 %376, 8
  %cmp1976 = icmp ule i64 %mul1975, 9223372036854775807
  br i1 %cmp1976, label %cond.true.1978, label %cond.false.1980

cond.true.1978:                                   ; preds = %cond.false.1974
  %377 = load i64, i64* %size, align 8
  %mul1979 = mul i64 %377, 8
  br label %cond.end.1984

cond.false.1980:                                  ; preds = %cond.false.1974
  %378 = load i64, i64* %size, align 8
  %mul1981 = mul i64 %378, 8
  %sub1982 = sub i64 %mul1981, -9223372036854775808
  %add1983 = add nsw i64 %sub1982, -9223372036854775808
  br label %cond.end.1984

cond.end.1984:                                    ; preds = %cond.false.1980, %cond.true.1978
  %cond1985 = phi i64 [ %mul1979, %cond.true.1978 ], [ %add1983, %cond.false.1980 ]
  store i64 %cond1985, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.1986:                                  ; preds = %cond.false.1598
  br i1 false, label %cond.true.1987, label %cond.false.2180

cond.true.1987:                                   ; preds = %cond.false.1986
  %379 = load i64, i64* %size, align 8
  %add1988 = add nsw i64 0, %379
  %mul1989 = mul nsw i64 0, %add1988
  %sub1990 = sub nsw i64 %mul1989, 1
  %cmp1991 = icmp slt i64 %sub1990, 0
  br i1 %cmp1991, label %cond.true.1993, label %cond.false.2010

cond.true.1993:                                   ; preds = %cond.true.1987
  %380 = load i64, i64* %size, align 8
  %add1994 = add nsw i64 0, %380
  %mul1995 = mul nsw i64 0, %add1994
  %add1996 = add nsw i64 %mul1995, 0
  %neg1997 = xor i64 %add1996, -1
  %cmp1998 = icmp eq i64 %neg1997, -1
  %conv1999 = zext i1 %cmp1998 to i32
  %sub2000 = sub nsw i32 0, %conv1999
  %conv2001 = sext i32 %sub2000 to i64
  %381 = load i64, i64* %size, align 8
  %add2002 = add nsw i64 0, %381
  %mul2003 = mul nsw i64 0, %add2002
  %add2004 = add nsw i64 %mul2003, 1
  %shl2005 = shl i64 %add2004, 62
  %sub2006 = sub nsw i64 %shl2005, 1
  %mul2007 = mul nsw i64 %sub2006, 2
  %add2008 = add nsw i64 %mul2007, 1
  %sub2009 = sub nsw i64 %conv2001, %add2008
  br label %cond.end.2014

cond.false.2010:                                  ; preds = %cond.true.1987
  %382 = load i64, i64* %size, align 8
  %add2011 = add nsw i64 0, %382
  %mul2012 = mul nsw i64 0, %add2011
  %add2013 = add nsw i64 %mul2012, 0
  br label %cond.end.2014

cond.end.2014:                                    ; preds = %cond.false.2010, %cond.true.1993
  %cond2015 = phi i64 [ %sub2009, %cond.true.1993 ], [ %add2013, %cond.false.2010 ]
  %cmp2016 = icmp eq i64 %cond2015, 0
  br i1 %cmp2016, label %land.lhs.true.2018, label %lor.lhs.false.2021

land.lhs.true.2018:                               ; preds = %cond.end.2014
  %383 = load i64, i64* %size, align 8
  %cmp2019 = icmp slt i64 %383, 0
  br i1 %cmp2019, label %cond.true.2156, label %lor.lhs.false.2021

lor.lhs.false.2021:                               ; preds = %land.lhs.true.2018, %cond.end.2014
  br i1 false, label %cond.true.2022, label %cond.false.2082

cond.true.2022:                                   ; preds = %lor.lhs.false.2021
  %384 = load i64, i64* %size, align 8
  %cmp2023 = icmp slt i64 %384, 0
  br i1 %cmp2023, label %cond.true.2025, label %cond.false.2048

cond.true.2025:                                   ; preds = %cond.true.2022
  %385 = load i64, i64* %size, align 8
  %386 = load i64, i64* %size, align 8
  %add2026 = add nsw i64 0, %386
  %mul2027 = mul nsw i64 0, %add2026
  %sub2028 = sub nsw i64 %mul2027, 1
  %cmp2029 = icmp slt i64 %sub2028, 0
  br i1 %cmp2029, label %cond.true.2031, label %cond.false.2039

cond.true.2031:                                   ; preds = %cond.true.2025
  %387 = load i64, i64* %size, align 8
  %add2032 = add nsw i64 0, %387
  %mul2033 = mul nsw i64 0, %add2032
  %add2034 = add nsw i64 %mul2033, 1
  %shl2035 = shl i64 %add2034, 62
  %sub2036 = sub nsw i64 %shl2035, 1
  %mul2037 = mul nsw i64 %sub2036, 2
  %add2038 = add nsw i64 %mul2037, 1
  br label %cond.end.2043

cond.false.2039:                                  ; preds = %cond.true.2025
  %388 = load i64, i64* %size, align 8
  %add2040 = add nsw i64 0, %388
  %mul2041 = mul nsw i64 0, %add2040
  %sub2042 = sub nsw i64 %mul2041, 1
  br label %cond.end.2043

cond.end.2043:                                    ; preds = %cond.false.2039, %cond.true.2031
  %cond2044 = phi i64 [ %add2038, %cond.true.2031 ], [ %sub2042, %cond.false.2039 ]
  %div2045 = sdiv i64 %cond2044, 8
  %cmp2046 = icmp slt i64 %385, %div2045
  br i1 %cmp2046, label %cond.true.2156, label %lor.lhs.false.2142

cond.false.2048:                                  ; preds = %cond.true.2022
  br i1 false, label %cond.true.2049, label %cond.false.2050

cond.true.2049:                                   ; preds = %cond.false.2048
  br i1 false, label %cond.true.2156, label %lor.lhs.false.2142

cond.false.2050:                                  ; preds = %cond.false.2048
  %389 = load i64, i64* %size, align 8
  %add2051 = add nsw i64 0, %389
  %mul2052 = mul nsw i64 0, %add2051
  %sub2053 = sub nsw i64 %mul2052, 1
  %cmp2054 = icmp slt i64 %sub2053, 0
  br i1 %cmp2054, label %cond.true.2056, label %cond.false.2073

cond.true.2056:                                   ; preds = %cond.false.2050
  %390 = load i64, i64* %size, align 8
  %add2057 = add nsw i64 0, %390
  %mul2058 = mul nsw i64 0, %add2057
  %add2059 = add nsw i64 %mul2058, 0
  %neg2060 = xor i64 %add2059, -1
  %cmp2061 = icmp eq i64 %neg2060, -1
  %conv2062 = zext i1 %cmp2061 to i32
  %sub2063 = sub nsw i32 0, %conv2062
  %conv2064 = sext i32 %sub2063 to i64
  %391 = load i64, i64* %size, align 8
  %add2065 = add nsw i64 0, %391
  %mul2066 = mul nsw i64 0, %add2065
  %add2067 = add nsw i64 %mul2066, 1
  %shl2068 = shl i64 %add2067, 62
  %sub2069 = sub nsw i64 %shl2068, 1
  %mul2070 = mul nsw i64 %sub2069, 2
  %add2071 = add nsw i64 %mul2070, 1
  %sub2072 = sub nsw i64 %conv2064, %add2071
  br label %cond.end.2077

cond.false.2073:                                  ; preds = %cond.false.2050
  %392 = load i64, i64* %size, align 8
  %add2074 = add nsw i64 0, %392
  %mul2075 = mul nsw i64 0, %add2074
  %add2076 = add nsw i64 %mul2075, 0
  br label %cond.end.2077

cond.end.2077:                                    ; preds = %cond.false.2073, %cond.true.2056
  %cond2078 = phi i64 [ %sub2072, %cond.true.2056 ], [ %add2076, %cond.false.2073 ]
  %div2079 = sdiv i64 %cond2078, 8
  %393 = load i64, i64* %size, align 8
  %cmp2080 = icmp slt i64 %div2079, %393
  br i1 %cmp2080, label %cond.true.2156, label %lor.lhs.false.2142

cond.false.2082:                                  ; preds = %lor.lhs.false.2021
  br i1 false, label %cond.true.2083, label %cond.false.2084

cond.true.2083:                                   ; preds = %cond.false.2082
  br i1 false, label %cond.true.2156, label %lor.lhs.false.2142

cond.false.2084:                                  ; preds = %cond.false.2082
  %394 = load i64, i64* %size, align 8
  %cmp2085 = icmp slt i64 %394, 0
  br i1 %cmp2085, label %cond.true.2087, label %cond.false.2119

cond.true.2087:                                   ; preds = %cond.false.2084
  %395 = load i64, i64* %size, align 8
  %396 = load i64, i64* %size, align 8
  %add2088 = add nsw i64 0, %396
  %mul2089 = mul nsw i64 0, %add2088
  %sub2090 = sub nsw i64 %mul2089, 1
  %cmp2091 = icmp slt i64 %sub2090, 0
  br i1 %cmp2091, label %cond.true.2093, label %cond.false.2110

cond.true.2093:                                   ; preds = %cond.true.2087
  %397 = load i64, i64* %size, align 8
  %add2094 = add nsw i64 0, %397
  %mul2095 = mul nsw i64 0, %add2094
  %add2096 = add nsw i64 %mul2095, 0
  %neg2097 = xor i64 %add2096, -1
  %cmp2098 = icmp eq i64 %neg2097, -1
  %conv2099 = zext i1 %cmp2098 to i32
  %sub2100 = sub nsw i32 0, %conv2099
  %conv2101 = sext i32 %sub2100 to i64
  %398 = load i64, i64* %size, align 8
  %add2102 = add nsw i64 0, %398
  %mul2103 = mul nsw i64 0, %add2102
  %add2104 = add nsw i64 %mul2103, 1
  %shl2105 = shl i64 %add2104, 62
  %sub2106 = sub nsw i64 %shl2105, 1
  %mul2107 = mul nsw i64 %sub2106, 2
  %add2108 = add nsw i64 %mul2107, 1
  %sub2109 = sub nsw i64 %conv2101, %add2108
  br label %cond.end.2114

cond.false.2110:                                  ; preds = %cond.true.2087
  %399 = load i64, i64* %size, align 8
  %add2111 = add nsw i64 0, %399
  %mul2112 = mul nsw i64 0, %add2111
  %add2113 = add nsw i64 %mul2112, 0
  br label %cond.end.2114

cond.end.2114:                                    ; preds = %cond.false.2110, %cond.true.2093
  %cond2115 = phi i64 [ %sub2109, %cond.true.2093 ], [ %add2113, %cond.false.2110 ]
  %div2116 = sdiv i64 %cond2115, 8
  %cmp2117 = icmp slt i64 %395, %div2116
  br i1 %cmp2117, label %cond.true.2156, label %lor.lhs.false.2142

cond.false.2119:                                  ; preds = %cond.false.2084
  %400 = load i64, i64* %size, align 8
  %add2120 = add nsw i64 0, %400
  %mul2121 = mul nsw i64 0, %add2120
  %sub2122 = sub nsw i64 %mul2121, 1
  %cmp2123 = icmp slt i64 %sub2122, 0
  br i1 %cmp2123, label %cond.true.2125, label %cond.false.2133

cond.true.2125:                                   ; preds = %cond.false.2119
  %401 = load i64, i64* %size, align 8
  %add2126 = add nsw i64 0, %401
  %mul2127 = mul nsw i64 0, %add2126
  %add2128 = add nsw i64 %mul2127, 1
  %shl2129 = shl i64 %add2128, 62
  %sub2130 = sub nsw i64 %shl2129, 1
  %mul2131 = mul nsw i64 %sub2130, 2
  %add2132 = add nsw i64 %mul2131, 1
  br label %cond.end.2137

cond.false.2133:                                  ; preds = %cond.false.2119
  %402 = load i64, i64* %size, align 8
  %add2134 = add nsw i64 0, %402
  %mul2135 = mul nsw i64 0, %add2134
  %sub2136 = sub nsw i64 %mul2135, 1
  br label %cond.end.2137

cond.end.2137:                                    ; preds = %cond.false.2133, %cond.true.2125
  %cond2138 = phi i64 [ %add2132, %cond.true.2125 ], [ %sub2136, %cond.false.2133 ]
  %div2139 = sdiv i64 %cond2138, 8
  %403 = load i64, i64* %size, align 8
  %cmp2140 = icmp slt i64 %div2139, %403
  br i1 %cmp2140, label %cond.true.2156, label %lor.lhs.false.2142

lor.lhs.false.2142:                               ; preds = %cond.end.2137, %cond.end.2114, %cond.true.2083, %cond.end.2077, %cond.true.2049, %cond.end.2043
  %404 = load i64, i64* %size, align 8
  %mul2143 = mul nsw i64 %404, 8
  %mul2144 = mul nsw i64 0, %mul2143
  %sub2145 = sub nsw i64 %mul2144, 1
  %cmp2146 = icmp slt i64 %sub2145, 0
  br i1 %cmp2146, label %land.lhs.true.2148, label %lor.lhs.false.2152

land.lhs.true.2148:                               ; preds = %lor.lhs.false.2142
  %405 = load i64, i64* %size, align 8
  %mul2149 = mul nsw i64 %405, 8
  %cmp2150 = icmp slt i64 %mul2149, -9223372036854775808
  br i1 %cmp2150, label %cond.true.2156, label %lor.lhs.false.2152

lor.lhs.false.2152:                               ; preds = %land.lhs.true.2148, %lor.lhs.false.2142
  %406 = load i64, i64* %size, align 8
  %mul2153 = mul nsw i64 %406, 8
  %cmp2154 = icmp slt i64 9223372036854775807, %mul2153
  br i1 %cmp2154, label %cond.true.2156, label %cond.false.2168

cond.true.2156:                                   ; preds = %lor.lhs.false.2152, %land.lhs.true.2148, %cond.end.2137, %cond.end.2114, %cond.true.2083, %cond.end.2077, %cond.true.2049, %cond.end.2043, %land.lhs.true.2018
  %407 = load i64, i64* %size, align 8
  %mul2157 = mul i64 %407, 8
  %cmp2158 = icmp ule i64 %mul2157, 9223372036854775807
  br i1 %cmp2158, label %cond.true.2160, label %cond.false.2162

cond.true.2160:                                   ; preds = %cond.true.2156
  %408 = load i64, i64* %size, align 8
  %mul2161 = mul i64 %408, 8
  br label %cond.end.2166

cond.false.2162:                                  ; preds = %cond.true.2156
  %409 = load i64, i64* %size, align 8
  %mul2163 = mul i64 %409, 8
  %sub2164 = sub i64 %mul2163, -9223372036854775808
  %add2165 = add nsw i64 %sub2164, -9223372036854775808
  br label %cond.end.2166

cond.end.2166:                                    ; preds = %cond.false.2162, %cond.true.2160
  %cond2167 = phi i64 [ %mul2161, %cond.true.2160 ], [ %add2165, %cond.false.2162 ]
  store i64 %cond2167, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.2168:                                  ; preds = %lor.lhs.false.2152
  %410 = load i64, i64* %size, align 8
  %mul2169 = mul i64 %410, 8
  %cmp2170 = icmp ule i64 %mul2169, 9223372036854775807
  br i1 %cmp2170, label %cond.true.2172, label %cond.false.2174

cond.true.2172:                                   ; preds = %cond.false.2168
  %411 = load i64, i64* %size, align 8
  %mul2173 = mul i64 %411, 8
  br label %cond.end.2178

cond.false.2174:                                  ; preds = %cond.false.2168
  %412 = load i64, i64* %size, align 8
  %mul2175 = mul i64 %412, 8
  %sub2176 = sub i64 %mul2175, -9223372036854775808
  %add2177 = add nsw i64 %sub2176, -9223372036854775808
  br label %cond.end.2178

cond.end.2178:                                    ; preds = %cond.false.2174, %cond.true.2172
  %cond2179 = phi i64 [ %mul2173, %cond.true.2172 ], [ %add2177, %cond.false.2174 ]
  store i64 %cond2179, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

cond.false.2180:                                  ; preds = %cond.false.1986
  %413 = load i64, i64* %size, align 8
  %add2181 = add nsw i64 0, %413
  %mul2182 = mul nsw i64 0, %add2181
  %sub2183 = sub nsw i64 %mul2182, 1
  %cmp2184 = icmp slt i64 %sub2183, 0
  br i1 %cmp2184, label %cond.true.2186, label %cond.false.2203

cond.true.2186:                                   ; preds = %cond.false.2180
  %414 = load i64, i64* %size, align 8
  %add2187 = add nsw i64 0, %414
  %mul2188 = mul nsw i64 0, %add2187
  %add2189 = add nsw i64 %mul2188, 0
  %neg2190 = xor i64 %add2189, -1
  %cmp2191 = icmp eq i64 %neg2190, -1
  %conv2192 = zext i1 %cmp2191 to i32
  %sub2193 = sub nsw i32 0, %conv2192
  %conv2194 = sext i32 %sub2193 to i64
  %415 = load i64, i64* %size, align 8
  %add2195 = add nsw i64 0, %415
  %mul2196 = mul nsw i64 0, %add2195
  %add2197 = add nsw i64 %mul2196, 1
  %shl2198 = shl i64 %add2197, 62
  %sub2199 = sub nsw i64 %shl2198, 1
  %mul2200 = mul nsw i64 %sub2199, 2
  %add2201 = add nsw i64 %mul2200, 1
  %sub2202 = sub nsw i64 %conv2194, %add2201
  br label %cond.end.2207

cond.false.2203:                                  ; preds = %cond.false.2180
  %416 = load i64, i64* %size, align 8
  %add2204 = add nsw i64 0, %416
  %mul2205 = mul nsw i64 0, %add2204
  %add2206 = add nsw i64 %mul2205, 0
  br label %cond.end.2207

cond.end.2207:                                    ; preds = %cond.false.2203, %cond.true.2186
  %cond2208 = phi i64 [ %sub2202, %cond.true.2186 ], [ %add2206, %cond.false.2203 ]
  %cmp2209 = icmp eq i64 %cond2208, 0
  br i1 %cmp2209, label %land.lhs.true.2211, label %lor.lhs.false.2214

land.lhs.true.2211:                               ; preds = %cond.end.2207
  %417 = load i64, i64* %size, align 8
  %cmp2212 = icmp slt i64 %417, 0
  br i1 %cmp2212, label %cond.true.2349, label %lor.lhs.false.2214

lor.lhs.false.2214:                               ; preds = %land.lhs.true.2211, %cond.end.2207
  br i1 false, label %cond.true.2215, label %cond.false.2275

cond.true.2215:                                   ; preds = %lor.lhs.false.2214
  %418 = load i64, i64* %size, align 8
  %cmp2216 = icmp slt i64 %418, 0
  br i1 %cmp2216, label %cond.true.2218, label %cond.false.2241

cond.true.2218:                                   ; preds = %cond.true.2215
  %419 = load i64, i64* %size, align 8
  %420 = load i64, i64* %size, align 8
  %add2219 = add nsw i64 0, %420
  %mul2220 = mul nsw i64 0, %add2219
  %sub2221 = sub nsw i64 %mul2220, 1
  %cmp2222 = icmp slt i64 %sub2221, 0
  br i1 %cmp2222, label %cond.true.2224, label %cond.false.2232

cond.true.2224:                                   ; preds = %cond.true.2218
  %421 = load i64, i64* %size, align 8
  %add2225 = add nsw i64 0, %421
  %mul2226 = mul nsw i64 0, %add2225
  %add2227 = add nsw i64 %mul2226, 1
  %shl2228 = shl i64 %add2227, 62
  %sub2229 = sub nsw i64 %shl2228, 1
  %mul2230 = mul nsw i64 %sub2229, 2
  %add2231 = add nsw i64 %mul2230, 1
  br label %cond.end.2236

cond.false.2232:                                  ; preds = %cond.true.2218
  %422 = load i64, i64* %size, align 8
  %add2233 = add nsw i64 0, %422
  %mul2234 = mul nsw i64 0, %add2233
  %sub2235 = sub nsw i64 %mul2234, 1
  br label %cond.end.2236

cond.end.2236:                                    ; preds = %cond.false.2232, %cond.true.2224
  %cond2237 = phi i64 [ %add2231, %cond.true.2224 ], [ %sub2235, %cond.false.2232 ]
  %div2238 = sdiv i64 %cond2237, 8
  %cmp2239 = icmp slt i64 %419, %div2238
  br i1 %cmp2239, label %cond.true.2349, label %lor.lhs.false.2335

cond.false.2241:                                  ; preds = %cond.true.2215
  br i1 false, label %cond.true.2242, label %cond.false.2243

cond.true.2242:                                   ; preds = %cond.false.2241
  br i1 false, label %cond.true.2349, label %lor.lhs.false.2335

cond.false.2243:                                  ; preds = %cond.false.2241
  %423 = load i64, i64* %size, align 8
  %add2244 = add nsw i64 0, %423
  %mul2245 = mul nsw i64 0, %add2244
  %sub2246 = sub nsw i64 %mul2245, 1
  %cmp2247 = icmp slt i64 %sub2246, 0
  br i1 %cmp2247, label %cond.true.2249, label %cond.false.2266

cond.true.2249:                                   ; preds = %cond.false.2243
  %424 = load i64, i64* %size, align 8
  %add2250 = add nsw i64 0, %424
  %mul2251 = mul nsw i64 0, %add2250
  %add2252 = add nsw i64 %mul2251, 0
  %neg2253 = xor i64 %add2252, -1
  %cmp2254 = icmp eq i64 %neg2253, -1
  %conv2255 = zext i1 %cmp2254 to i32
  %sub2256 = sub nsw i32 0, %conv2255
  %conv2257 = sext i32 %sub2256 to i64
  %425 = load i64, i64* %size, align 8
  %add2258 = add nsw i64 0, %425
  %mul2259 = mul nsw i64 0, %add2258
  %add2260 = add nsw i64 %mul2259, 1
  %shl2261 = shl i64 %add2260, 62
  %sub2262 = sub nsw i64 %shl2261, 1
  %mul2263 = mul nsw i64 %sub2262, 2
  %add2264 = add nsw i64 %mul2263, 1
  %sub2265 = sub nsw i64 %conv2257, %add2264
  br label %cond.end.2270

cond.false.2266:                                  ; preds = %cond.false.2243
  %426 = load i64, i64* %size, align 8
  %add2267 = add nsw i64 0, %426
  %mul2268 = mul nsw i64 0, %add2267
  %add2269 = add nsw i64 %mul2268, 0
  br label %cond.end.2270

cond.end.2270:                                    ; preds = %cond.false.2266, %cond.true.2249
  %cond2271 = phi i64 [ %sub2265, %cond.true.2249 ], [ %add2269, %cond.false.2266 ]
  %div2272 = sdiv i64 %cond2271, 8
  %427 = load i64, i64* %size, align 8
  %cmp2273 = icmp slt i64 %div2272, %427
  br i1 %cmp2273, label %cond.true.2349, label %lor.lhs.false.2335

cond.false.2275:                                  ; preds = %lor.lhs.false.2214
  br i1 false, label %cond.true.2276, label %cond.false.2277

cond.true.2276:                                   ; preds = %cond.false.2275
  br i1 false, label %cond.true.2349, label %lor.lhs.false.2335

cond.false.2277:                                  ; preds = %cond.false.2275
  %428 = load i64, i64* %size, align 8
  %cmp2278 = icmp slt i64 %428, 0
  br i1 %cmp2278, label %cond.true.2280, label %cond.false.2312

cond.true.2280:                                   ; preds = %cond.false.2277
  %429 = load i64, i64* %size, align 8
  %430 = load i64, i64* %size, align 8
  %add2281 = add nsw i64 0, %430
  %mul2282 = mul nsw i64 0, %add2281
  %sub2283 = sub nsw i64 %mul2282, 1
  %cmp2284 = icmp slt i64 %sub2283, 0
  br i1 %cmp2284, label %cond.true.2286, label %cond.false.2303

cond.true.2286:                                   ; preds = %cond.true.2280
  %431 = load i64, i64* %size, align 8
  %add2287 = add nsw i64 0, %431
  %mul2288 = mul nsw i64 0, %add2287
  %add2289 = add nsw i64 %mul2288, 0
  %neg2290 = xor i64 %add2289, -1
  %cmp2291 = icmp eq i64 %neg2290, -1
  %conv2292 = zext i1 %cmp2291 to i32
  %sub2293 = sub nsw i32 0, %conv2292
  %conv2294 = sext i32 %sub2293 to i64
  %432 = load i64, i64* %size, align 8
  %add2295 = add nsw i64 0, %432
  %mul2296 = mul nsw i64 0, %add2295
  %add2297 = add nsw i64 %mul2296, 1
  %shl2298 = shl i64 %add2297, 62
  %sub2299 = sub nsw i64 %shl2298, 1
  %mul2300 = mul nsw i64 %sub2299, 2
  %add2301 = add nsw i64 %mul2300, 1
  %sub2302 = sub nsw i64 %conv2294, %add2301
  br label %cond.end.2307

cond.false.2303:                                  ; preds = %cond.true.2280
  %433 = load i64, i64* %size, align 8
  %add2304 = add nsw i64 0, %433
  %mul2305 = mul nsw i64 0, %add2304
  %add2306 = add nsw i64 %mul2305, 0
  br label %cond.end.2307

cond.end.2307:                                    ; preds = %cond.false.2303, %cond.true.2286
  %cond2308 = phi i64 [ %sub2302, %cond.true.2286 ], [ %add2306, %cond.false.2303 ]
  %div2309 = sdiv i64 %cond2308, 8
  %cmp2310 = icmp slt i64 %429, %div2309
  br i1 %cmp2310, label %cond.true.2349, label %lor.lhs.false.2335

cond.false.2312:                                  ; preds = %cond.false.2277
  %434 = load i64, i64* %size, align 8
  %add2313 = add nsw i64 0, %434
  %mul2314 = mul nsw i64 0, %add2313
  %sub2315 = sub nsw i64 %mul2314, 1
  %cmp2316 = icmp slt i64 %sub2315, 0
  br i1 %cmp2316, label %cond.true.2318, label %cond.false.2326

cond.true.2318:                                   ; preds = %cond.false.2312
  %435 = load i64, i64* %size, align 8
  %add2319 = add nsw i64 0, %435
  %mul2320 = mul nsw i64 0, %add2319
  %add2321 = add nsw i64 %mul2320, 1
  %shl2322 = shl i64 %add2321, 62
  %sub2323 = sub nsw i64 %shl2322, 1
  %mul2324 = mul nsw i64 %sub2323, 2
  %add2325 = add nsw i64 %mul2324, 1
  br label %cond.end.2330

cond.false.2326:                                  ; preds = %cond.false.2312
  %436 = load i64, i64* %size, align 8
  %add2327 = add nsw i64 0, %436
  %mul2328 = mul nsw i64 0, %add2327
  %sub2329 = sub nsw i64 %mul2328, 1
  br label %cond.end.2330

cond.end.2330:                                    ; preds = %cond.false.2326, %cond.true.2318
  %cond2331 = phi i64 [ %add2325, %cond.true.2318 ], [ %sub2329, %cond.false.2326 ]
  %div2332 = sdiv i64 %cond2331, 8
  %437 = load i64, i64* %size, align 8
  %cmp2333 = icmp slt i64 %div2332, %437
  br i1 %cmp2333, label %cond.true.2349, label %lor.lhs.false.2335

lor.lhs.false.2335:                               ; preds = %cond.end.2330, %cond.end.2307, %cond.true.2276, %cond.end.2270, %cond.true.2242, %cond.end.2236
  %438 = load i64, i64* %size, align 8
  %mul2336 = mul nsw i64 %438, 8
  %mul2337 = mul nsw i64 0, %mul2336
  %sub2338 = sub nsw i64 %mul2337, 1
  %cmp2339 = icmp slt i64 %sub2338, 0
  br i1 %cmp2339, label %land.lhs.true.2341, label %lor.lhs.false.2345

land.lhs.true.2341:                               ; preds = %lor.lhs.false.2335
  %439 = load i64, i64* %size, align 8
  %mul2342 = mul nsw i64 %439, 8
  %cmp2343 = icmp slt i64 %mul2342, -9223372036854775808
  br i1 %cmp2343, label %cond.true.2349, label %lor.lhs.false.2345

lor.lhs.false.2345:                               ; preds = %land.lhs.true.2341, %lor.lhs.false.2335
  %440 = load i64, i64* %size, align 8
  %mul2346 = mul nsw i64 %440, 8
  %cmp2347 = icmp slt i64 9223372036854775807, %mul2346
  br i1 %cmp2347, label %cond.true.2349, label %cond.false.2361

cond.true.2349:                                   ; preds = %lor.lhs.false.2345, %land.lhs.true.2341, %cond.end.2330, %cond.end.2307, %cond.true.2276, %cond.end.2270, %cond.true.2242, %cond.end.2236, %land.lhs.true.2211
  %441 = load i64, i64* %size, align 8
  %mul2350 = mul i64 %441, 8
  %cmp2351 = icmp ule i64 %mul2350, 9223372036854775807
  br i1 %cmp2351, label %cond.true.2353, label %cond.false.2355

cond.true.2353:                                   ; preds = %cond.true.2349
  %442 = load i64, i64* %size, align 8
  %mul2354 = mul i64 %442, 8
  br label %cond.end.2359

cond.false.2355:                                  ; preds = %cond.true.2349
  %443 = load i64, i64* %size, align 8
  %mul2356 = mul i64 %443, 8
  %sub2357 = sub i64 %mul2356, -9223372036854775808
  %add2358 = add nsw i64 %sub2357, -9223372036854775808
  br label %cond.end.2359

cond.end.2359:                                    ; preds = %cond.false.2355, %cond.true.2353
  %cond2360 = phi i64 [ %mul2354, %cond.true.2353 ], [ %add2358, %cond.false.2355 ]
  store i64 %cond2360, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2376, label %lor.lhs.false.2373

cond.false.2361:                                  ; preds = %lor.lhs.false.2345
  %444 = load i64, i64* %size, align 8
  %mul2362 = mul i64 %444, 8
  %cmp2363 = icmp ule i64 %mul2362, 9223372036854775807
  br i1 %cmp2363, label %cond.true.2365, label %cond.false.2367

cond.true.2365:                                   ; preds = %cond.false.2361
  %445 = load i64, i64* %size, align 8
  %mul2366 = mul i64 %445, 8
  br label %cond.end.2371

cond.false.2367:                                  ; preds = %cond.false.2361
  %446 = load i64, i64* %size, align 8
  %mul2368 = mul i64 %446, 8
  %sub2369 = sub i64 %mul2368, -9223372036854775808
  %add2370 = add nsw i64 %sub2369, -9223372036854775808
  br label %cond.end.2371

cond.end.2371:                                    ; preds = %cond.false.2367, %cond.true.2365
  %cond2372 = phi i64 [ %mul2366, %cond.true.2365 ], [ %add2370, %cond.false.2367 ]
  store i64 %cond2372, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2376, label %lor.lhs.false.2373

lor.lhs.false.2373:                               ; preds = %cond.end.2371, %cond.end.2359, %cond.end.2178, %cond.end.2166, %cond.end.1984, %cond.end.1972, %cond.end.1791, %cond.end.1779, %cond.end.1595, %cond.end.1579, %cond.end.1394, %cond.end.1378, %cond.end.1166, %cond.end.1143, %cond.end.951, %cond.end.928, %cond.end.681, %cond.end.658, %cond.end.466, %cond.end.443
  %447 = load i64, i64* %alloca_nbytes, align 8
  %cmp2374 = icmp ult i64 -1, %447
  br i1 %cmp2374, label %if.then.2376, label %if.else

if.then.2376:                                     ; preds = %lor.lhs.false.2373, %cond.end.2371, %cond.end.2359, %cond.end.2178, %cond.end.2166, %cond.end.1984, %cond.end.1972, %cond.end.1791, %cond.end.1779, %cond.end.1595, %cond.end.1579, %cond.end.1394, %cond.end.1378, %cond.end.1166, %cond.end.1143, %cond.end.951, %cond.end.928, %cond.end.681, %cond.end.658, %cond.end.466, %cond.end.443
  call void @memory_full(i64 -1) #8
  unreachable

if.else:                                          ; preds = %lor.lhs.false.2373
  %448 = load i64, i64* %alloca_nbytes, align 8
  %449 = load i64, i64* %sa_avail, align 8
  %cmp2377 = icmp sle i64 %448, %449
  br i1 %cmp2377, label %if.then.2379, label %if.else.2381

if.then.2379:                                     ; preds = %if.else
  %450 = load i64, i64* %alloca_nbytes, align 8
  %451 = load i64, i64* %sa_avail, align 8
  %sub2380 = sub nsw i64 %451, %450
  store i64 %sub2380, i64* %sa_avail, align 8
  %452 = load i64, i64* %alloca_nbytes, align 8
  %453 = alloca i8, i64 %452
  %454 = bitcast i8* %453 to i64*
  store i64* %454, i64** %copy, align 8
  br label %if.end.2384

if.else.2381:                                     ; preds = %if.else
  %455 = load i64, i64* %alloca_nbytes, align 8
  %call2382 = call noalias i8* @xmalloc(i64 %455)
  %456 = bitcast i8* %call2382 to i64*
  store i64* %456, i64** %copy, align 8
  %457 = load i64*, i64** %copy, align 8
  %458 = load i64, i64* %size, align 8
  %call2383 = call i64 @make_save_memory(i64* %457, i64 %458)
  store i64 %call2383, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %459 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %459)
  br label %if.end.2384

if.end.2384:                                      ; preds = %if.else.2381, %if.then.2379
  br label %if.end.2385

if.end.2385:                                      ; preds = %if.end.2384
  br label %do.end

do.end:                                           ; preds = %if.end.2385
  %460 = load i64*, i64** %copy, align 8
  %461 = bitcast i64* %460 to i8*
  %462 = load i64, i64* @last_overlay_modification_hooks, align 8
  %call2386 = call %struct.Lisp_Vector* @XVECTOR(i64 %462)
  %contents2387 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call2386, i32 0, i32 1
  %463 = bitcast [0 x i64]* %contents2387 to i8*
  %464 = load i64, i64* %size, align 8
  %mul2388 = mul nsw i64 %464, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %461, i8* %463, i64 %mul2388, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  br label %for.cond.2389

for.cond.2389:                                    ; preds = %for.body.2392, %do.end
  %465 = load i64, i64* %i, align 8
  %466 = load i64, i64* %size, align 8
  %cmp2390 = icmp slt i64 %465, %466
  br i1 %cmp2390, label %for.body.2392, label %for.end.2397

for.body.2392:                                    ; preds = %for.cond.2389
  %467 = load i64, i64* %i, align 8
  %inc = add nsw i64 %467, 1
  store i64 %inc, i64* %i, align 8
  %468 = load i64*, i64** %copy, align 8
  %arrayidx2393 = getelementptr inbounds i64, i64* %468, i64 %467
  %469 = load i64, i64* %arrayidx2393, align 8
  store i64 %469, i64* %prop_i, align 8
  %470 = load i64, i64* %i, align 8
  %inc2394 = add nsw i64 %470, 1
  store i64 %inc2394, i64* %i, align 8
  %471 = load i64*, i64** %copy, align 8
  %arrayidx2395 = getelementptr inbounds i64, i64* %471, i64 %470
  %472 = load i64, i64* %arrayidx2395, align 8
  store i64 %472, i64* %overlay_i, align 8
  %473 = load i64, i64* %prop_i, align 8
  %474 = load i64, i64* %overlay_i, align 8
  %475 = load i8, i8* %after.addr, align 1
  %tobool2396 = trunc i8 %475 to i1
  %476 = load i64, i64* %arg1.addr, align 8
  %477 = load i64, i64* %arg2.addr, align 8
  %478 = load i64, i64* %arg3.addr, align 8
  call void @call_overlay_mod_hooks(i64 %473, i64 %474, i1 zeroext %tobool2396, i64 %476, i64 %477, i64 %478)
  br label %for.cond.2389

for.end.2397:                                     ; preds = %for.cond.2389
  br label %do.body.2398

do.body.2398:                                     ; preds = %for.end.2397
  %479 = load i8, i8* %sa_must_free, align 1
  %tobool2399 = trunc i8 %479 to i1
  br i1 %tobool2399, label %if.then.2400, label %if.end.2403

if.then.2400:                                     ; preds = %do.body.2398
  store i8 0, i8* %sa_must_free, align 1
  %480 = load i64, i64* %sa_count, align 8
  %call2401 = call i64 @builtin_lisp_symbol(i32 0)
  %call2402 = call i64 @unbind_to(i64 %480, i64 %call2401)
  br label %if.end.2403

if.end.2403:                                      ; preds = %if.then.2400, %do.body.2398
  br label %do.end.2404

do.end.2404:                                      ; preds = %if.then.202, %if.end.2403
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_overlay_mod_hooklist(i64 %functionlist, i64 %overlay) #3 {
entry:
  %functionlist.addr = alloca i64, align 8
  %overlay.addr = alloca i64, align 8
  %oldsize = alloca i64, align 8
  store i64 %functionlist, i64* %functionlist.addr, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %0 = load i64, i64* @last_overlay_modification_hooks, align 8
  %call = call i64 @ASIZE(i64 %0)
  store i64 %call, i64* %oldsize, align 8
  %1 = load i64, i64* %oldsize, align 8
  %sub = sub nsw i64 %1, 1
  %2 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  %cmp = icmp sle i64 %sub, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* @last_overlay_modification_hooks, align 8
  %call1 = call i64 @larger_vector(i64 %3, i64 2, i64 -1)
  store i64 %call1, i64* @last_overlay_modification_hooks, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* @last_overlay_modification_hooks, align 8
  %5 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  %6 = load i64, i64* %functionlist.addr, align 8
  call void @ASET(i64 %4, i64 %5, i64 %6)
  %7 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, i64* @last_overlay_modification_hooks_used, align 8
  %8 = load i64, i64* @last_overlay_modification_hooks, align 8
  %9 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  %10 = load i64, i64* %overlay.addr, align 8
  call void @ASET(i64 %8, i64 %9, i64 %10)
  %11 = load i64, i64* @last_overlay_modification_hooks_used, align 8
  %inc2 = add nsw i64 %11, 1
  store i64 %inc2, i64* @last_overlay_modification_hooks_used, align 8
  ret void
}

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

declare i64 @make_save_memory(i64*, i64) #1

declare void @free_save_value(i64) #1

; Function Attrs: nounwind uwtable
define internal void @call_overlay_mod_hooks(i64 %list, i64 %overlay, i1 zeroext %after, i64 %arg1, i64 %arg2, i64 %arg3) #3 {
entry:
  %list.addr = alloca i64, align 8
  %overlay.addr = alloca i64, align 8
  %after.addr = alloca i8, align 1
  %arg1.addr = alloca i64, align 8
  %arg2.addr = alloca i64, align 8
  %arg3.addr = alloca i64, align 8
  store i64 %list, i64* %list.addr, align 8
  store i64 %overlay, i64* %overlay.addr, align 8
  %frombool = zext i1 %after to i8
  store i8 %frombool, i8* %after.addr, align 1
  store i64 %arg1, i64* %arg1.addr, align 8
  store i64 %arg2, i64* %arg2.addr, align 8
  store i64 %arg3, i64* %arg3.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %list.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %arg3.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %1, %call
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %2 = load i64, i64* %list.addr, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  %6 = load i64, i64* %overlay.addr, align 8
  %7 = load i8, i8* %after.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call5, %cond.true ], [ %call6, %cond.false ]
  %8 = load i64, i64* %arg1.addr, align 8
  %9 = load i64, i64* %arg2.addr, align 8
  %call7 = call i64 @call4(i64 %5, i64 %6, i64 %cond, i64 %8, i64 %9)
  br label %if.end

if.else:                                          ; preds = %while.body
  %10 = load i64, i64* %list.addr, align 8
  %sub8 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub8 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car9 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car9, align 8
  %14 = load i64, i64* %overlay.addr, align 8
  %15 = load i8, i8* %after.addr, align 1
  %tobool10 = trunc i8 %15 to i1
  br i1 %tobool10, label %cond.true.12, label %cond.false.14

cond.true.12:                                     ; preds = %if.else
  %call13 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.16

cond.false.14:                                    ; preds = %if.else
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.14, %cond.true.12
  %cond17 = phi i64 [ %call13, %cond.true.12 ], [ %call15, %cond.false.14 ]
  %16 = load i64, i64* %arg1.addr, align 8
  %17 = load i64, i64* %arg2.addr, align 8
  %18 = load i64, i64* %arg3.addr, align 8
  %call18 = call i64 @call5(i64 %13, i64 %14, i64 %cond17, i64 %16, i64 %17, i64 %18)
  br label %if.end

if.end:                                           ; preds = %cond.end.16, %cond.end
  %19 = load i64, i64* %list.addr, align 8
  %sub19 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub19 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %22 = load i64, i64* %cdr, align 8
  store i64 %22, i64* %list.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @evaporate_overlays(i64 %pos) #3 {
entry:
  %pos.addr = alloca i64, align 8
  %overlay = alloca i64, align 8
  %hit_list = alloca i64, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %endpos = alloca i64, align 8
  %startpos = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %hit_list, align 8
  %0 = load i64, i64* %pos.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlay_center = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 97
  %2 = load i64, i64* %overlay_center, align 8
  %cmp = icmp sle i64 %0, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_before = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 95
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_before, align 8
  store %struct.Lisp_Overlay* %4, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %7 = bitcast %struct.Lisp_Overlay* %6 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %7, i32 1)
  store i64 %call1, i64* %overlay, align 8
  %8 = load i64, i64* %overlay, align 8
  %call2 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %8)
  %end = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call2, i32 0, i32 3
  %9 = load i64, i64* %end, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 1
  br i1 %cmp3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %10 = load i64, i64* %overlay, align 8
  %call5 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %10)
  %end6 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call5, i32 0, i32 3
  %11 = load i64, i64* %end6, align 8
  %call7 = call i32 @XMISCTYPE(i64 %11)
  %cmp8 = icmp eq i32 %call7, 24236
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load i64, i64* %overlay, align 8
  %call10 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %12)
  %end11 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call10, i32 0, i32 3
  %13 = load i64, i64* %end11, align 8
  %call12 = call i64 @marker_position(i64 %13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %14, %cond.true
  %cond = phi i64 [ %call12, %cond.true ], [ 0, %14 ]
  store i64 %cond, i64* %endpos, align 8
  %15 = load i64, i64* %endpos, align 8
  %16 = load i64, i64* %pos.addr, align 8
  %cmp13 = icmp slt i64 %15, %16
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %cond.end
  br label %for.end

if.end:                                           ; preds = %cond.end
  %17 = load i64, i64* %endpos, align 8
  %18 = load i64, i64* %pos.addr, align 8
  %cmp16 = icmp eq i64 %17, %18
  br i1 %cmp16, label %land.lhs.true.18, label %if.end.47

land.lhs.true.18:                                 ; preds = %if.end
  %19 = load i64, i64* %overlay, align 8
  %call19 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %19)
  %start = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call19, i32 0, i32 2
  %20 = load i64, i64* %start, align 8
  %and20 = and i64 %20, 7
  %conv21 = trunc i64 %and20 to i32
  %cmp22 = icmp eq i32 %conv21, 1
  br i1 %cmp22, label %land.lhs.true.24, label %cond.false.34

land.lhs.true.24:                                 ; preds = %land.lhs.true.18
  %21 = load i64, i64* %overlay, align 8
  %call25 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %21)
  %start26 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call25, i32 0, i32 2
  %22 = load i64, i64* %start26, align 8
  %call27 = call i32 @XMISCTYPE(i64 %22)
  %cmp28 = icmp eq i32 %call27, 24236
  br i1 %cmp28, label %cond.true.30, label %cond.false.34

cond.true.30:                                     ; preds = %land.lhs.true.24
  %23 = load i64, i64* %overlay, align 8
  %call31 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %23)
  %start32 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call31, i32 0, i32 2
  %24 = load i64, i64* %start32, align 8
  %call33 = call i64 @marker_position(i64 %24)
  br label %cond.end.35

cond.false.34:                                    ; preds = %land.lhs.true.24, %land.lhs.true.18
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.35

cond.end.35:                                      ; preds = %25, %cond.true.30
  %cond36 = phi i64 [ %call33, %cond.true.30 ], [ 0, %25 ]
  %26 = load i64, i64* %pos.addr, align 8
  %cmp37 = icmp eq i64 %cond36, %26
  br i1 %cmp37, label %land.lhs.true.39, label %if.end.47

land.lhs.true.39:                                 ; preds = %cond.end.35
  %27 = load i64, i64* %overlay, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 380)
  %call41 = call i64 @Foverlay_get(i64 %27, i64 %call40)
  %call42 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp43 = icmp eq i64 %call41, %call42
  br i1 %cmp43, label %if.end.47, label %if.then.45

if.then.45:                                       ; preds = %land.lhs.true.39
  %28 = load i64, i64* %overlay, align 8
  %29 = load i64, i64* %hit_list, align 8
  %call46 = call i64 @Fcons(i64 %28, i64 %29)
  store i64 %call46, i64* %hit_list, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %land.lhs.true.39, %cond.end.35, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.47
  %30 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %30, i32 0, i32 1
  %31 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %31, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.15, %for.cond
  br label %if.end.111

if.else:                                          ; preds = %entry
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overlays_after = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 96
  %33 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlays_after, align 8
  store %struct.Lisp_Overlay* %33, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.108, %if.else
  %34 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool49 = icmp ne %struct.Lisp_Overlay* %34, null
  br i1 %tobool49, label %for.body.50, label %for.end.110

for.body.50:                                      ; preds = %for.cond.48
  %35 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %36 = bitcast %struct.Lisp_Overlay* %35 to i8*
  %call51 = call i64 @make_lisp_ptr(i8* %36, i32 1)
  store i64 %call51, i64* %overlay, align 8
  %37 = load i64, i64* %overlay, align 8
  %call52 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %37)
  %start53 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call52, i32 0, i32 2
  %38 = load i64, i64* %start53, align 8
  %and54 = and i64 %38, 7
  %conv55 = trunc i64 %and54 to i32
  %cmp56 = icmp eq i32 %conv55, 1
  br i1 %cmp56, label %land.lhs.true.58, label %cond.false.68

land.lhs.true.58:                                 ; preds = %for.body.50
  %39 = load i64, i64* %overlay, align 8
  %call59 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %39)
  %start60 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call59, i32 0, i32 2
  %40 = load i64, i64* %start60, align 8
  %call61 = call i32 @XMISCTYPE(i64 %40)
  %cmp62 = icmp eq i32 %call61, 24236
  br i1 %cmp62, label %cond.true.64, label %cond.false.68

cond.true.64:                                     ; preds = %land.lhs.true.58
  %41 = load i64, i64* %overlay, align 8
  %call65 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %41)
  %start66 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call65, i32 0, i32 2
  %42 = load i64, i64* %start66, align 8
  %call67 = call i64 @marker_position(i64 %42)
  br label %cond.end.69

cond.false.68:                                    ; preds = %land.lhs.true.58, %for.body.50
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.69

cond.end.69:                                      ; preds = %43, %cond.true.64
  %cond70 = phi i64 [ %call67, %cond.true.64 ], [ 0, %43 ]
  store i64 %cond70, i64* %startpos, align 8
  %44 = load i64, i64* %startpos, align 8
  %45 = load i64, i64* %pos.addr, align 8
  %cmp71 = icmp sgt i64 %44, %45
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %cond.end.69
  br label %for.end.110

if.end.74:                                        ; preds = %cond.end.69
  %46 = load i64, i64* %startpos, align 8
  %47 = load i64, i64* %pos.addr, align 8
  %cmp75 = icmp eq i64 %46, %47
  br i1 %cmp75, label %land.lhs.true.77, label %if.end.107

land.lhs.true.77:                                 ; preds = %if.end.74
  %48 = load i64, i64* %overlay, align 8
  %call78 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %48)
  %end79 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call78, i32 0, i32 3
  %49 = load i64, i64* %end79, align 8
  %and80 = and i64 %49, 7
  %conv81 = trunc i64 %and80 to i32
  %cmp82 = icmp eq i32 %conv81, 1
  br i1 %cmp82, label %land.lhs.true.84, label %cond.false.94

land.lhs.true.84:                                 ; preds = %land.lhs.true.77
  %50 = load i64, i64* %overlay, align 8
  %call85 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %50)
  %end86 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call85, i32 0, i32 3
  %51 = load i64, i64* %end86, align 8
  %call87 = call i32 @XMISCTYPE(i64 %51)
  %cmp88 = icmp eq i32 %call87, 24236
  br i1 %cmp88, label %cond.true.90, label %cond.false.94

cond.true.90:                                     ; preds = %land.lhs.true.84
  %52 = load i64, i64* %overlay, align 8
  %call91 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %52)
  %end92 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %call91, i32 0, i32 3
  %53 = load i64, i64* %end92, align 8
  %call93 = call i64 @marker_position(i64 %53)
  br label %cond.end.95

cond.false.94:                                    ; preds = %land.lhs.true.84, %land.lhs.true.77
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.95

cond.end.95:                                      ; preds = %54, %cond.true.90
  %cond96 = phi i64 [ %call93, %cond.true.90 ], [ 0, %54 ]
  %55 = load i64, i64* %pos.addr, align 8
  %cmp97 = icmp eq i64 %cond96, %55
  br i1 %cmp97, label %land.lhs.true.99, label %if.end.107

land.lhs.true.99:                                 ; preds = %cond.end.95
  %56 = load i64, i64* %overlay, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 380)
  %call101 = call i64 @Foverlay_get(i64 %56, i64 %call100)
  %call102 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp103 = icmp eq i64 %call101, %call102
  br i1 %cmp103, label %if.end.107, label %if.then.105

if.then.105:                                      ; preds = %land.lhs.true.99
  %57 = load i64, i64* %overlay, align 8
  %58 = load i64, i64* %hit_list, align 8
  %call106 = call i64 @Fcons(i64 %57, i64 %58)
  store i64 %call106, i64* %hit_list, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.105, %land.lhs.true.99, %cond.end.95, %if.end.74
  br label %for.inc.108

for.inc.108:                                      ; preds = %if.end.107
  %59 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next109 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %59, i32 0, i32 1
  %60 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next109, align 8
  store %struct.Lisp_Overlay* %60, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond.48

for.end.110:                                      ; preds = %if.then.73, %for.cond.48
  br label %if.end.111

if.end.111:                                       ; preds = %for.end.110, %for.end
  br label %for.cond.112

for.cond.112:                                     ; preds = %for.inc.119, %if.end.111
  %61 = load i64, i64* %hit_list, align 8
  %and113 = and i64 %61, 7
  %conv114 = trunc i64 %and113 to i32
  %cmp115 = icmp eq i32 %conv114, 3
  br i1 %cmp115, label %for.body.117, label %for.end.121

for.body.117:                                     ; preds = %for.cond.112
  %62 = load i64, i64* %hit_list, align 8
  %sub = sub nsw i64 %62, 3
  %63 = inttoptr i64 %sub to i8*
  %64 = bitcast i8* %63 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %64, i32 0, i32 0
  %65 = load i64, i64* %car, align 8
  %call118 = call i64 @Fdelete_overlay(i64 %65)
  br label %for.inc.119

for.inc.119:                                      ; preds = %for.body.117
  %66 = load i64, i64* %hit_list, align 8
  %sub120 = sub nsw i64 %66, 3
  %67 = inttoptr i64 %sub120 to i8*
  %68 = bitcast i8* %67 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %68, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %69 = load i64, i64* %cdr, align 8
  store i64 %69, i64* %hit_list, align 8
  br label %for.cond.112

for.end.121:                                      ; preds = %for.cond.112
  ret void
}

; Function Attrs: nounwind uwtable
define void @enlarge_buffer_text(%struct.buffer* %b, i64 %delta) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %delta.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %nbytes = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %delta, i64* %delta.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 73
  %1 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1, i32 0, i32 4
  %2 = load i64, i64* %z_byte, align 8
  %sub = sub nsw i64 %2, 1
  %3 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 73
  %4 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %4, i32 0, i32 5
  %5 = load i64, i64* %gap_size, align 8
  %add = add nsw i64 %sub, %5
  %add2 = add nsw i64 %add, 1
  %6 = load i64, i64* %delta.addr, align 8
  %add3 = add nsw i64 %add2, %6
  store i64 %add3, i64* %nbytes, align 8
  call void @block_input()
  %7 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 73
  %8 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %8, i32 0, i32 0
  %9 = load i8*, i8** %beg, align 8
  %10 = load i64, i64* %nbytes, align 8
  %call = call i8* @xrealloc(i8* %9, i64 %10)
  store i8* %call, i8** %p, align 8
  %11 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @unblock_input()
  %12 = load i64, i64* %nbytes, align 8
  call void @memory_full(i64 %12) #8
  unreachable

if.end:                                           ; preds = %entry
  %13 = load i8*, i8** %p, align 8
  %14 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %text5 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text5, align 8
  %beg6 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 0
  store i8* %13, i8** %beg6, align 8
  call void @unblock_input()
  ret void
}

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define void @init_buffer_once() #3 {
entry:
  %idx = alloca i32, align 4
  call void @llvm.memset.p0i8.i64(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @buffer_permanent_local_flags, i32 0, i32 0), i8 0, i64 50, i32 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct.buffer* @buffer_local_flags to i8*), i8 0, i64 976, i32 8, i1 false)
  call void @bset_filename(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_directory(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_backed_up(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_save_length(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_auto_save_file_name(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_read_only(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_major_mode(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_mode_name(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_undo_list(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_mark_active(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_point_before_scroll(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_file_truename(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_invisibility_spec(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_file_format(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_auto_save_file_format(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_display_count(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_display_time(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_enable_multibyte_characters(%struct.buffer* @buffer_local_flags, i64 -2)
  call void @bset_name(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_mark(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_local_var_alist(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_keymap(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_downcase_table(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_upcase_table(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_case_canon_table(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_case_eqv_table(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_minor_modes(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_width_table(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_pt_marker(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_begv_marker(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_zv_marker(%struct.buffer* @buffer_local_flags, i64 2)
  call void @bset_last_selected_window(%struct.buffer* @buffer_local_flags, i64 2)
  store i32 1, i32* %idx, align 4
  %0 = load i32, i32* %idx, align 4
  %conv = sext i32 %0 to i64
  %call = call i64 @make_natnum(i64 %conv)
  store i64 %call, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 12), align 8
  %1 = load i32, i32* %idx, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %idx, align 4
  %2 = load i32, i32* %idx, align 4
  %conv1 = sext i32 %2 to i64
  %call2 = call i64 @make_natnum(i64 %conv1)
  store i64 %call2, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 36), align 8
  %3 = load i32, i32* %idx, align 4
  %inc3 = add nsw i32 %3, 1
  store i32 %inc3, i32* %idx, align 4
  %4 = load i32, i32* %idx, align 4
  %conv4 = sext i32 %4 to i64
  %call5 = call i64 @make_natnum(i64 %conv4)
  store i64 %call5, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 35), align 8
  %5 = load i32, i32* %idx, align 4
  %inc6 = add nsw i32 %5, 1
  store i32 %inc6, i32* %idx, align 4
  %6 = load i32, i32* %idx, align 4
  %conv7 = sext i32 %6 to i64
  %call8 = call i64 @make_natnum(i64 %conv7)
  store i64 %call8, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 18), align 8
  %7 = load i32, i32* %idx, align 4
  %inc9 = add nsw i32 %7, 1
  store i32 %inc9, i32* %idx, align 4
  %8 = load i32, i32* %idx, align 4
  %conv10 = sext i32 %8 to i64
  %call11 = call i64 @make_natnum(i64 %conv10)
  store i64 %call11, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 22), align 8
  %9 = load i32, i32* %idx, align 4
  %inc12 = add nsw i32 %9, 1
  store i32 %inc12, i32* %idx, align 4
  %10 = load i32, i32* %idx, align 4
  %conv13 = sext i32 %10 to i64
  %call14 = call i64 @make_natnum(i64 %conv13)
  store i64 %call14, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 32), align 8
  %11 = load i32, i32* %idx, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %idx, align 4
  %12 = load i32, i32* %idx, align 4
  %conv16 = sext i32 %12 to i64
  %call17 = call i64 @make_natnum(i64 %conv16)
  store i64 %call17, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 33), align 8
  %13 = load i32, i32* %idx, align 4
  %inc18 = add nsw i32 %13, 1
  store i32 %inc18, i32* %idx, align 4
  %14 = load i32, i32* %idx, align 4
  %conv19 = sext i32 %14 to i64
  %call20 = call i64 @make_natnum(i64 %conv19)
  store i64 %call20, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 19), align 8
  %15 = load i32, i32* %idx, align 4
  %inc21 = add nsw i32 %15, 1
  store i32 %inc21, i32* %idx, align 4
  %16 = load i32, i32* %idx, align 4
  %conv22 = sext i32 %16 to i64
  %call23 = call i64 @make_natnum(i64 %conv22)
  store i64 %call23, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 27), align 8
  %17 = load i32, i32* %idx, align 4
  %inc24 = add nsw i32 %17, 1
  store i32 %inc24, i32* %idx, align 4
  %18 = load i32, i32* %idx, align 4
  %conv25 = sext i32 %18 to i64
  %call26 = call i64 @make_natnum(i64 %conv25)
  store i64 %call26, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 28), align 8
  %19 = load i32, i32* %idx, align 4
  %inc27 = add nsw i32 %19, 1
  store i32 %inc27, i32* %idx, align 4
  %20 = load i32, i32* %idx, align 4
  %conv28 = sext i32 %20 to i64
  %call29 = call i64 @make_natnum(i64 %conv28)
  store i64 %call29, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 29), align 8
  %21 = load i32, i32* %idx, align 4
  %inc30 = add nsw i32 %21, 1
  store i32 %inc30, i32* %idx, align 4
  %22 = load i32, i32* %idx, align 4
  %conv31 = sext i32 %22 to i64
  %call32 = call i64 @make_natnum(i64 %conv31)
  store i64 %call32, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 20), align 8
  %23 = load i32, i32* %idx, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %idx, align 4
  %24 = load i32, i32* %idx, align 4
  %conv34 = sext i32 %24 to i64
  %call35 = call i64 @make_natnum(i64 %conv34)
  store i64 %call35, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 21), align 8
  %25 = load i32, i32* %idx, align 4
  %inc36 = add nsw i32 %25, 1
  store i32 %inc36, i32* %idx, align 4
  %26 = load i32, i32* %idx, align 4
  %conv37 = sext i32 %26 to i64
  %call38 = call i64 @make_natnum(i64 %conv37)
  store i64 %call38, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 15), align 8
  %27 = load i32, i32* %idx, align 4
  %inc39 = add nsw i32 %27, 1
  store i32 %inc39, i32* %idx, align 4
  %28 = load i32, i32* %idx, align 4
  %conv40 = sext i32 %28 to i64
  %call41 = call i64 @make_natnum(i64 %conv40)
  store i64 %call41, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 37), align 8
  %29 = load i32, i32* %idx, align 4
  %inc42 = add nsw i32 %29, 1
  store i32 %inc42, i32* %idx, align 4
  %30 = load i32, i32* %idx, align 4
  %conv43 = sext i32 %30 to i64
  %call44 = call i64 @make_natnum(i64 %conv43)
  store i64 %call44, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 16), align 8
  %31 = load i32, i32* %idx, align 4
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* %idx, align 4
  %32 = load i32, i32* %idx, align 4
  %conv46 = sext i32 %32 to i64
  %call47 = call i64 @make_natnum(i64 %conv46)
  store i64 %call47, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 43), align 8
  %33 = load i32, i32* %idx, align 4
  %inc48 = add nsw i32 %33, 1
  store i32 %inc48, i32* %idx, align 4
  %34 = load i32, i32* %idx, align 4
  %conv49 = sext i32 %34 to i64
  %call50 = call i64 @make_natnum(i64 %conv49)
  store i64 %call50, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 17), align 8
  %35 = load i32, i32* %idx, align 4
  %inc51 = add nsw i32 %35, 1
  store i32 %inc51, i32* %idx, align 4
  %36 = load i32, i32* %idx, align 4
  %conv52 = sext i32 %36 to i64
  %call53 = call i64 @make_natnum(i64 %conv52)
  store i64 %call53, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 30), align 8
  %37 = load i32, i32* %idx, align 4
  %inc54 = add nsw i32 %37, 1
  store i32 %inc54, i32* %idx, align 4
  %38 = load i32, i32* %idx, align 4
  %conv55 = sext i32 %38 to i64
  %call56 = call i64 @make_natnum(i64 %conv55)
  store i64 %call56, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 31), align 8
  %39 = load i32, i32* %idx, align 4
  %inc57 = add nsw i32 %39, 1
  store i32 %inc57, i32* %idx, align 4
  %40 = load i32, i32* %idx, align 4
  %conv58 = sext i32 %40 to i64
  %call59 = call i64 @make_natnum(i64 %conv58)
  store i64 %call59, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 40), align 8
  %41 = load i32, i32* %idx, align 4
  %inc60 = add nsw i32 %41, 1
  store i32 %inc60, i32* %idx, align 4
  %idxprom = sext i32 %41 to i64
  %arrayidx = getelementptr inbounds [50 x i8], [50 x i8]* @buffer_permanent_local_flags, i32 0, i64 %idxprom
  store i8 1, i8* %arrayidx, align 1
  %42 = load i32, i32* %idx, align 4
  %conv61 = sext i32 %42 to i64
  %call62 = call i64 @make_natnum(i64 %conv61)
  store i64 %call62, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 53), align 8
  %43 = load i32, i32* %idx, align 4
  %inc63 = add nsw i32 %43, 1
  store i32 %inc63, i32* %idx, align 4
  %44 = load i32, i32* %idx, align 4
  %conv64 = sext i32 %44 to i64
  %call65 = call i64 @make_natnum(i64 %conv64)
  store i64 %call65, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 54), align 8
  %45 = load i32, i32* %idx, align 4
  %inc66 = add nsw i32 %45, 1
  store i32 %inc66, i32* %idx, align 4
  %46 = load i32, i32* %idx, align 4
  %conv67 = sext i32 %46 to i64
  %call68 = call i64 @make_natnum(i64 %conv67)
  store i64 %call68, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 55), align 8
  %47 = load i32, i32* %idx, align 4
  %inc69 = add nsw i32 %47, 1
  store i32 %inc69, i32* %idx, align 4
  %48 = load i32, i32* %idx, align 4
  %conv70 = sext i32 %48 to i64
  %call71 = call i64 @make_natnum(i64 %conv70)
  store i64 %call71, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 56), align 8
  %49 = load i32, i32* %idx, align 4
  %inc72 = add nsw i32 %49, 1
  store i32 %inc72, i32* %idx, align 4
  %50 = load i32, i32* %idx, align 4
  %conv73 = sext i32 %50 to i64
  %call74 = call i64 @make_natnum(i64 %conv73)
  store i64 %call74, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 57), align 8
  %51 = load i32, i32* %idx, align 4
  %inc75 = add nsw i32 %51, 1
  store i32 %inc75, i32* %idx, align 4
  %52 = load i32, i32* %idx, align 4
  %conv76 = sext i32 %52 to i64
  %call77 = call i64 @make_natnum(i64 %conv76)
  store i64 %call77, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 58), align 8
  %53 = load i32, i32* %idx, align 4
  %inc78 = add nsw i32 %53, 1
  store i32 %inc78, i32* %idx, align 4
  %54 = load i32, i32* %idx, align 4
  %conv79 = sext i32 %54 to i64
  %call80 = call i64 @make_natnum(i64 %conv79)
  store i64 %call80, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 59), align 8
  %55 = load i32, i32* %idx, align 4
  %inc81 = add nsw i32 %55, 1
  store i32 %inc81, i32* %idx, align 4
  %56 = load i32, i32* %idx, align 4
  %conv82 = sext i32 %56 to i64
  %call83 = call i64 @make_natnum(i64 %conv82)
  store i64 %call83, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 60), align 8
  %57 = load i32, i32* %idx, align 4
  %inc84 = add nsw i32 %57, 1
  store i32 %inc84, i32* %idx, align 4
  %58 = load i32, i32* %idx, align 4
  %conv85 = sext i32 %58 to i64
  %call86 = call i64 @make_natnum(i64 %conv85)
  store i64 %call86, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 61), align 8
  %59 = load i32, i32* %idx, align 4
  %inc87 = add nsw i32 %59, 1
  store i32 %inc87, i32* %idx, align 4
  %60 = load i32, i32* %idx, align 4
  %conv88 = sext i32 %60 to i64
  %call89 = call i64 @make_natnum(i64 %conv88)
  store i64 %call89, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 62), align 8
  %61 = load i32, i32* %idx, align 4
  %inc90 = add nsw i32 %61, 1
  store i32 %inc90, i32* %idx, align 4
  %62 = load i32, i32* %idx, align 4
  %conv91 = sext i32 %62 to i64
  %call92 = call i64 @make_natnum(i64 %conv91)
  store i64 %call92, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 63), align 8
  %63 = load i32, i32* %idx, align 4
  %inc93 = add nsw i32 %63, 1
  store i32 %inc93, i32* %idx, align 4
  %64 = load i32, i32* %idx, align 4
  %conv94 = sext i32 %64 to i64
  %call95 = call i64 @make_natnum(i64 %conv94)
  store i64 %call95, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 64), align 8
  %65 = load i32, i32* %idx, align 4
  %inc96 = add nsw i32 %65, 1
  store i32 %inc96, i32* %idx, align 4
  %66 = load i32, i32* %idx, align 4
  %conv97 = sext i32 %66 to i64
  %call98 = call i64 @make_natnum(i64 %conv97)
  store i64 %call98, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 65), align 8
  %67 = load i32, i32* %idx, align 4
  %inc99 = add nsw i32 %67, 1
  store i32 %inc99, i32* %idx, align 4
  %68 = load i32, i32* %idx, align 4
  %conv100 = sext i32 %68 to i64
  %call101 = call i64 @make_natnum(i64 %conv100)
  store i64 %call101, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 67), align 8
  %69 = load i32, i32* %idx, align 4
  %inc102 = add nsw i32 %69, 1
  store i32 %inc102, i32* %idx, align 4
  %70 = load i32, i32* %idx, align 4
  %conv103 = sext i32 %70 to i64
  %call104 = call i64 @make_natnum(i64 %conv103)
  store i64 %call104, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 68), align 8
  %71 = load i32, i32* %idx, align 4
  %inc105 = add nsw i32 %71, 1
  store i32 %inc105, i32* %idx, align 4
  %72 = load i32, i32* %idx, align 4
  %conv106 = sext i32 %72 to i64
  %call107 = call i64 @make_natnum(i64 %conv106)
  store i64 %call107, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 13), align 8
  %73 = load i32, i32* %idx, align 4
  %inc108 = add nsw i32 %73, 1
  store i32 %inc108, i32* %idx, align 4
  %74 = load i32, i32* %idx, align 4
  %conv109 = sext i32 %74 to i64
  %call110 = call i64 @make_natnum(i64 %conv109)
  store i64 %call110, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 69), align 8
  %75 = load i32, i32* %idx, align 4
  %inc111 = add nsw i32 %75, 1
  store i32 %inc111, i32* %idx, align 4
  %76 = load i32, i32* %idx, align 4
  %conv112 = sext i32 %76 to i64
  %call113 = call i64 @make_natnum(i64 %conv112)
  store i64 %call113, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 70), align 8
  %77 = load i32, i32* %idx, align 4
  %inc114 = add nsw i32 %77, 1
  store i32 %inc114, i32* %idx, align 4
  %78 = load i32, i32* %idx, align 4
  %conv115 = sext i32 %78 to i64
  %call116 = call i64 @make_natnum(i64 %conv115)
  store i64 %call116, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_flags, i32 0, i32 71), align 8
  %79 = load i32, i32* %idx, align 4
  %inc117 = add nsw i32 %79, 1
  store i32 %inc117, i32* %idx, align 4
  %80 = load i32, i32* %idx, align 4
  %cmp = icmp sge i32 %80, 50
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @emacs_abort() #8
  unreachable

if.end:                                           ; preds = %entry
  %81 = load i32, i32* %idx, align 4
  store i32 %81, i32* @last_per_buffer_idx, align 4
  call void @reset_buffer(%struct.buffer* @buffer_defaults)
  call void @reset_buffer_local_variables(%struct.buffer* @buffer_defaults, i1 zeroext true)
  call void @reset_buffer(%struct.buffer* @buffer_local_symbols)
  call void @reset_buffer_local_variables(%struct.buffer* @buffer_local_symbols, i1 zeroext true)
  store %struct.buffer_text* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 72), %struct.buffer_text** getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 73), align 8
  store %struct.buffer_text* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_symbols, i32 0, i32 72), %struct.buffer_text** getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_symbols, i32 0, i32 73), align 8
  store i32 0, i32* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 82), align 4
  store i32 0, i32* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_symbols, i32 0, i32 82), align 4
  store i32 0, i32* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 83), align 4
  store i32 0, i32* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_symbols, i32 0, i32 83), align 4
  call void @set_buffer_intervals(%struct.buffer* @buffer_defaults, %struct.interval* null)
  call void @set_buffer_intervals(%struct.buffer* @buffer_local_symbols, %struct.interval* null)
  %call119 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i32 0, i32 0))
  call void @bset_name(%struct.buffer* @buffer_defaults, i64 %call119)
  %call120 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i32 0, i32 0))
  call void @bset_name(%struct.buffer* @buffer_local_symbols, i64 %call120)
  store i64 4611686018528256071, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 0, i32 0), align 8
  store i64 4611686018528256071, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_local_symbols, i32 0, i32 0, i32 0), align 8
  %call121 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0))
  call void @bset_mode_line_format(%struct.buffer* @buffer_defaults, i64 %call121)
  %call122 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_header_line_format(%struct.buffer* @buffer_defaults, i64 %call122)
  %call123 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_abbrev_mode(%struct.buffer* @buffer_defaults, i64 %call123)
  %call124 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_overwrite_mode(%struct.buffer* @buffer_defaults, i64 %call124)
  %call125 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_case_fold_search(%struct.buffer* @buffer_defaults, i64 %call125)
  %call126 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_auto_fill_function(%struct.buffer* @buffer_defaults, i64 %call126)
  %call127 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_selective_display(%struct.buffer* @buffer_defaults, i64 %call127)
  %call128 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_selective_display_ellipses(%struct.buffer* @buffer_defaults, i64 %call128)
  %call129 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_abbrev_table(%struct.buffer* @buffer_defaults, i64 %call129)
  %call130 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_display_table(%struct.buffer* @buffer_defaults, i64 %call130)
  %call131 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_undo_list(%struct.buffer* @buffer_defaults, i64 %call131)
  %call132 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_mark_active(%struct.buffer* @buffer_defaults, i64 %call132)
  %call133 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_file_format(%struct.buffer* @buffer_defaults, i64 %call133)
  %call134 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_auto_save_file_format(%struct.buffer* @buffer_defaults, i64 %call134)
  call void @set_buffer_overlays_before(%struct.buffer* @buffer_defaults, %struct.Lisp_Overlay* null)
  call void @set_buffer_overlays_after(%struct.buffer* @buffer_defaults, %struct.Lisp_Overlay* null)
  store i64 1, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 97), align 8
  %call135 = call i64 @make_natnum(i64 8)
  store i64 %call135, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 19), align 8
  %call136 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_truncate_lines(%struct.buffer* @buffer_defaults, i64 %call136)
  %call137 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_word_wrap(%struct.buffer* @buffer_defaults, i64 %call137)
  %call138 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_ctl_arrow(%struct.buffer* @buffer_defaults, i64 %call138)
  %call139 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_bidi_display_reordering(%struct.buffer* @buffer_defaults, i64 %call139)
  %call140 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_bidi_paragraph_direction(%struct.buffer* @buffer_defaults, i64 %call140)
  %call141 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_cursor_type(%struct.buffer* @buffer_defaults, i64 %call141)
  %call142 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_extra_line_spacing(%struct.buffer* @buffer_defaults, i64 %call142)
  %call143 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_cursor_in_non_selected_windows(%struct.buffer* @buffer_defaults, i64 %call143)
  %call144 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_enable_multibyte_characters(%struct.buffer* @buffer_defaults, i64 %call144)
  %call145 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_buffer_file_coding_system(%struct.buffer* @buffer_defaults, i64 %call145)
  %call146 = call i64 @make_natnum(i64 70)
  store i64 %call146, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 20), align 8
  %call147 = call i64 @make_natnum(i64 0)
  store i64 %call147, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 21), align 8
  %call148 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_cache_long_scans(%struct.buffer* @buffer_defaults, i64 %call148)
  %call149 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_file_truename(%struct.buffer* @buffer_defaults, i64 %call149)
  %call150 = call i64 @make_natnum(i64 0)
  store i64 %call150, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 52), align 8
  %call151 = call i64 @make_natnum(i64 0)
  store i64 %call151, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 53), align 8
  %call152 = call i64 @make_natnum(i64 0)
  store i64 %call152, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 54), align 8
  %call153 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_left_fringe_width(%struct.buffer* @buffer_defaults, i64 %call153)
  %call154 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_right_fringe_width(%struct.buffer* @buffer_defaults, i64 %call154)
  %call155 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_fringes_outside_margins(%struct.buffer* @buffer_defaults, i64 %call155)
  %call156 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_scroll_bar_width(%struct.buffer* @buffer_defaults, i64 %call156)
  %call157 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_scroll_bar_height(%struct.buffer* @buffer_defaults, i64 %call157)
  %call158 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_vertical_scroll_bar_type(%struct.buffer* @buffer_defaults, i64 %call158)
  %call159 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_horizontal_scroll_bar_type(%struct.buffer* @buffer_defaults, i64 %call159)
  %call160 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_indicate_empty_lines(%struct.buffer* @buffer_defaults, i64 %call160)
  %call161 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_indicate_buffer_boundaries(%struct.buffer* @buffer_defaults, i64 %call161)
  %call162 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_fringe_indicator_alist(%struct.buffer* @buffer_defaults, i64 %call162)
  %call163 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_fringe_cursor_alist(%struct.buffer* @buffer_defaults, i64 %call163)
  %call164 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_scroll_up_aggressively(%struct.buffer* @buffer_defaults, i64 %call164)
  %call165 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_scroll_down_aggressively(%struct.buffer* @buffer_defaults, i64 %call165)
  %call166 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_display_time(%struct.buffer* @buffer_defaults, i64 %call166)
  %call167 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call167, i64* @Vbuffer_alist, align 8
  store %struct.buffer* null, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* null, %struct.buffer** @all_buffers, align 8
  %call168 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0))
  store i64 %call168, i64* @QSFundamental, align 8
  %call169 = call i64 @builtin_lisp_symbol(i32 479)
  call void @bset_major_mode(%struct.buffer* @buffer_defaults, i64 %call169)
  %call170 = call i64 @builtin_lisp_symbol(i32 592)
  %call171 = call i64 @builtin_lisp_symbol(i32 747)
  %call172 = call i64 @builtin_lisp_symbol(i32 901)
  %call173 = call i64 @Fput(i64 %call170, i64 %call171, i64 %call172)
  %call174 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0))
  %call175 = call i64 @Fget_buffer_create(i64 %call174)
  store i64 %call175, i64* @Vprin1_to_string_buffer, align 8
  %call176 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call176, i64* @Vbuffer_alist, align 8
  %call177 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0))
  %call178 = call i64 @Fget_buffer_create(i64 %call177)
  %call179 = call i64 @Fset_buffer(i64 %call178)
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 456), align 1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal void @bset_save_length(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %save_length_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 5
  store i64 %0, i64* %save_length_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_major_mode(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %major_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 10
  store i64 %0, i64* %major_mode_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_mode_name(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %mode_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 11
  store i64 %0, i64* %mode_name_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_invisibility_spec(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %invisibility_spec_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 50
  store i64 %0, i64* %invisibility_spec_, align 8
  ret void
}

declare void @bset_local_var_alist(%struct.buffer*, i64) #1

declare void @bset_keymap(%struct.buffer*, i64) #1

declare void @bset_downcase_table(%struct.buffer*, i64) #1

declare void @bset_upcase_table(%struct.buffer*, i64) #1

declare void @bset_case_canon_table(%struct.buffer*, i64) #1

declare void @bset_case_eqv_table(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_minor_modes(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %minor_modes_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 34
  store i64 %0, i64* %minor_modes_, align 8
  ret void
}

declare i64 @build_pure_c_string(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @bset_mode_line_format(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 12
  store i64 %0, i64* %mode_line_format_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_header_line_format(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 13
  store i64 %0, i64* %header_line_format_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_abbrev_mode(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %abbrev_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 36
  store i64 %0, i64* %abbrev_mode_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_overwrite_mode(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %overwrite_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 35
  store i64 %0, i64* %overwrite_mode_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_case_fold_search(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %case_fold_search_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 18
  store i64 %0, i64* %case_fold_search_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_auto_fill_function(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %auto_fill_function_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 22
  store i64 %0, i64* %auto_fill_function_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_selective_display(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %selective_display_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 32
  store i64 %0, i64* %selective_display_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_selective_display_ellipses(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %selective_display_ellipses_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 33
  store i64 %0, i64* %selective_display_ellipses_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_abbrev_table(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %abbrev_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 15
  store i64 %0, i64* %abbrev_table_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_display_table(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %display_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 37
  store i64 %0, i64* %display_table_, align 8
  ret void
}

declare void @bset_truncate_lines(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_word_wrap(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %word_wrap_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 28
  store i64 %0, i64* %word_wrap_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_ctl_arrow(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 29
  store i64 %0, i64* %ctl_arrow_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_cursor_in_non_selected_windows(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %cursor_in_non_selected_windows_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 71
  store i64 %0, i64* %cursor_in_non_selected_windows_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_buffer_file_coding_system(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %buffer_file_coding_system_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 40
  store i64 %0, i64* %buffer_file_coding_system_, align 8
  ret void
}

declare void @bset_cache_long_scans(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @bset_left_fringe_width(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %left_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 55
  store i64 %0, i64* %left_fringe_width_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_right_fringe_width(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %right_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 56
  store i64 %0, i64* %right_fringe_width_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_fringes_outside_margins(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %fringes_outside_margins_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 57
  store i64 %0, i64* %fringes_outside_margins_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_scroll_bar_width(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %scroll_bar_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 58
  store i64 %0, i64* %scroll_bar_width_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_scroll_bar_height(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %scroll_bar_height_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 59
  store i64 %0, i64* %scroll_bar_height_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_vertical_scroll_bar_type(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %vertical_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 60
  store i64 %0, i64* %vertical_scroll_bar_type_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_horizontal_scroll_bar_type(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %horizontal_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 61
  store i64 %0, i64* %horizontal_scroll_bar_type_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_indicate_empty_lines(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %indicate_empty_lines_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 62
  store i64 %0, i64* %indicate_empty_lines_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_indicate_buffer_boundaries(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %indicate_buffer_boundaries_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 63
  store i64 %0, i64* %indicate_buffer_boundaries_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_fringe_indicator_alist(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %fringe_indicator_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 64
  store i64 %0, i64* %fringe_indicator_alist_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_fringe_cursor_alist(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %fringe_cursor_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 65
  store i64 %0, i64* %fringe_cursor_alist_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_scroll_up_aggressively(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %scroll_up_aggressively_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 67
  store i64 %0, i64* %scroll_up_aggressively_, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bset_scroll_down_aggressively(%struct.buffer* %b, i64 %val) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %scroll_down_aggressively_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 68
  store i64 %0, i64* %scroll_down_aggressively_, align 8
  ret void
}

declare i64 @Fput(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @init_buffer(i32 %initialized) #3 {
entry:
  %initialized.addr = alloca i32, align 4
  %pwd = alloca i8*, align 8
  %temp = alloca i64, align 8
  %len = alloca i64, align 8
  %scratch = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  %slash_colon = alloca i64, align 8
  %.compoundliteral38 = alloca %union.Aligned_String, align 8
  store i32 %initialized, i32* %initialized.addr, align 4
  %0 = load i32, i32* %initialized.addr, align 4
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 9, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8** %data, align 8
  %s1 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %1 = bitcast %struct.Lisp_String* %s1 to i8*
  %call = call i64 @make_lisp_ptr(i8* %1, i32 4)
  store i64 %call, i64* %scratch, align 8
  %2 = load i64, i64* %scratch, align 8
  %call2 = call i64 @Fget_buffer_create(i64 %2)
  %call3 = call i64 @Fset_buffer(i64 %call2)
  %3 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 39), align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %call6 = call i64 @Fset_buffer_multibyte(i64 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call7 = call i8* @get_current_dir_name() #4
  store i8* %call7, i8** %pwd, align 8
  %4 = load i8*, i8** %pwd, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.else, label %if.then.8

if.then.8:                                        ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call9 = call i32* @__errno_location() #10
  %6 = load i32, i32* %call9, align 4
  %call10 = call i8* @emacs_strerror(i32 %6)
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34, i32 0, i32 0), i8* %call10)
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_directory(%struct.buffer* %7, i64 %call12)
  br label %if.end.49

if.else:                                          ; preds = %if.end
  %8 = load i8*, i8** %pwd, align 8
  %call13 = call i64 @strlen(i8* %8) #9
  store i64 %call13, i64* %len, align 8
  %9 = load i64, i64* %len, align 8
  %sub = sub nsw i64 %9, 1
  %10 = load i8*, i8** %pwd, align 8
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %sub
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %cmp14 = icmp eq i32 %conv, 47
  br i1 %cmp14, label %if.end.26, label %if.then.16

if.then.16:                                       ; preds = %if.else
  %12 = load i8*, i8** %pwd, align 8
  %13 = load i64, i64* %len, align 8
  %add = add nsw i64 %13, 2
  %call17 = call i8* @realloc(i8* %12, i64 %add) #4
  store i8* %call17, i8** %pwd, align 8
  %14 = load i8*, i8** %pwd, align 8
  %tobool18 = icmp ne i8* %14, null
  br i1 %tobool18, label %if.end.22, label %if.then.19

if.then.19:                                       ; preds = %if.then.16
  %call20 = call i32* @__errno_location() #10
  %15 = load i32, i32* %call20, align 4
  %call21 = call i8* @strerror(i32 %15) #4
  call void (i8*, ...) @fatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i32 0, i32 0), i8* %call21) #8
  unreachable

if.end.22:                                        ; preds = %if.then.16
  %16 = load i64, i64* %len, align 8
  %17 = load i8*, i8** %pwd, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %17, i64 %16
  store i8 47, i8* %arrayidx23, align 1
  %18 = load i64, i64* %len, align 8
  %add24 = add nsw i64 %18, 1
  %19 = load i8*, i8** %pwd, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %19, i64 %add24
  store i8 0, i8* %arrayidx25, align 1
  %20 = load i64, i64* %len, align 8
  %inc = add nsw i64 %20, 1
  store i64 %inc, i64* %len, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.22, %if.else
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %22 = load i8*, i8** %pwd, align 8
  %23 = load i64, i64* %len, align 8
  %call27 = call i64 @make_unibyte_string(i8* %22, i64 %23)
  call void @bset_directory(%struct.buffer* %21, i64 %call27)
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_ = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 3
  %25 = load i64, i64* %directory_, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 901)
  %call29 = call i64 @Ffind_file_name_handler(i64 %25, i64 %call28)
  store i64 %call29, i64* %temp, align 8
  %26 = load i64, i64* %temp, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %26, %call30
  br i1 %cmp31, label %if.end.48, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.26
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_33 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 3
  %28 = load i64, i64* %directory_33, align 8
  %call34 = call i8* @SSDATA(i64 %28)
  %call35 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0), i8* %call34) #9
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.end.48

if.then.37:                                       ; preds = %land.lhs.true
  %s39 = bitcast %union.Aligned_String* %.compoundliteral38 to %struct.Lisp_String*
  %size40 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s39, i32 0, i32 0
  store i64 2, i64* %size40, align 8
  %size_byte41 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s39, i32 0, i32 1
  store i64 -1, i64* %size_byte41, align 8
  %intervals42 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s39, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals42, align 8
  %data43 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s39, i32 0, i32 3
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i8** %data43, align 8
  %s44 = bitcast %union.Aligned_String* %.compoundliteral38 to %struct.Lisp_String*
  %29 = bitcast %struct.Lisp_String* %s44 to i8*
  %call45 = call i64 @make_lisp_ptr(i8* %29, i32 4)
  store i64 %call45, i64* %slash_colon, align 8
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %31 = load i64, i64* %slash_colon, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_46 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 3
  %33 = load i64, i64* %directory_46, align 8
  %call47 = call i64 @concat2(i64 %31, i64 %33)
  call void @bset_directory(%struct.buffer* %30, i64 %call47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.37, %land.lhs.true, %if.end.26
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.then.8
  %call50 = call i64 @get_minibuffer(i64 0)
  store i64 %call50, i64* %temp, align 8
  %34 = load i64, i64* %temp, align 8
  %call51 = call %struct.buffer* @XBUFFER(i64 %34)
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_52 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 3
  %36 = load i64, i64* %directory_52, align 8
  call void @bset_directory(%struct.buffer* %call51, i64 %36)
  %37 = load i8*, i8** %pwd, align 8
  call void @free(i8* %37) #4
  ret void
}

; Function Attrs: nounwind
declare i8* @get_current_dir_name() #6

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare i8* @emacs_strerror(i32) #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #7

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #6

; Function Attrs: noreturn
declare void @fatal(i8*, ...) #2

; Function Attrs: nounwind
declare i8* @strerror(i32) #6

declare i64 @make_unibyte_string(i8*, i64) #1

declare i64 @get_minibuffer(i64) #1

; Function Attrs: nounwind
declare void @free(i8*) #6

; Function Attrs: nounwind uwtable
define void @syms_of_buffer() #3 {
entry:
  call void @staticpro(i64* @last_overlay_modification_hooks)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fmake_vector(i64 42, i64 %call)
  store i64 %call1, i64* @last_overlay_modification_hooks, align 8
  call void @staticpro(i64* @QSFundamental)
  call void @staticpro(i64* @Vbuffer_alist)
  %call2 = call i64 @builtin_lisp_symbol(i32 1002)
  %call3 = call i64 @builtin_lisp_symbol(i32 263)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @builtin_lisp_symbol(i32 901)
  %call6 = call i64 @builtin_lisp_symbol(i32 607)
  %call7 = call i64 @builtin_lisp_symbol(i32 811)
  %call8 = call i64 @list4(i64 %call4, i64 %call5, i64 %call6, i64 %call7)
  %call9 = call i64 @Fput(i64 %call2, i64 %call3, i64 %call8)
  %call10 = call i64 @builtin_lisp_symbol(i32 455)
  %call11 = call i64 @builtin_lisp_symbol(i32 785)
  %call12 = call i64 @make_float(double 0.000000e+00)
  %call13 = call i64 @make_float(double 1.000000e+00)
  %call14 = call i64 @Fcons(i64 %call12, i64 %call13)
  %call15 = call i64 @Fput(i64 %call10, i64 %call11, i64 %call14)
  %call16 = call i64 @builtin_lisp_symbol(i32 736)
  %call17 = call i64 @builtin_lisp_symbol(i32 263)
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %call19 = call i64 @intern(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.38, i32 0, i32 0))
  %call20 = call i64 @builtin_lisp_symbol(i32 737)
  %call21 = call i64 @list3(i64 %call18, i64 %call19, i64 %call20)
  %call22 = call i64 @Fput(i64 %call16, i64 %call17, i64 %call21)
  %call23 = call i64 @builtin_lisp_symbol(i32 778)
  %call24 = call i64 @builtin_lisp_symbol(i32 373)
  %call25 = call i64 @builtin_lisp_symbol(i32 778)
  %call26 = call i64 @builtin_lisp_symbol(i32 372)
  %call27 = call i64 (i32, i64, i64, ...) @listn(i32 1, i64 2, i64 %call25, i64 %call26)
  %call28 = call i64 @Fput(i64 %call23, i64 %call24, i64 %call27)
  %call29 = call i64 @builtin_lisp_symbol(i32 778)
  %call30 = call i64 @builtin_lisp_symbol(i32 374)
  %call31 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i32 0, i32 0))
  %call32 = call i64 @Fput(i64 %call29, i64 %call30, i64 %call31)
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 12))
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.33

do.body.33:                                       ; preds = %do.end
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.41, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 13))
  br label %do.end.34

do.end.34:                                        ; preds = %do.body.33
  br label %do.body.35

do.body.35:                                       ; preds = %do.end.34
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.43, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.44, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 69))
  br label %do.end.36

do.end.36:                                        ; preds = %do.body.35
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.36
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 70))
  br label %do.end.38

do.end.38:                                        ; preds = %do.body.37
  br label %do.body.39

do.body.39:                                       ; preds = %do.end.38
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.47, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.48, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 71))
  br label %do.end.40

do.end.40:                                        ; preds = %do.body.39
  br label %do.body.41

do.body.41:                                       ; preds = %do.end.40
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.49, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 36))
  br label %do.end.42

do.end.42:                                        ; preds = %do.body.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.51, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.52, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 29))
  br label %do.end.44

do.end.44:                                        ; preds = %do.body.43
  br label %do.body.45

do.body.45:                                       ; preds = %do.end.44
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.53, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 39))
  br label %do.end.46

do.end.46:                                        ; preds = %do.body.45
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.55, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.56, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 40))
  br label %do.end.48

do.end.48:                                        ; preds = %do.body.47
  br label %do.body.49

do.body.49:                                       ; preds = %do.end.48
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.57, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.58, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 27))
  br label %do.end.50

do.end.50:                                        ; preds = %do.body.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.59, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.60, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 20))
  br label %do.end.52

do.end.52:                                        ; preds = %do.body.51
  br label %do.body.53

do.body.53:                                       ; preds = %do.end.52
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.61, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 21))
  br label %do.end.54

do.end.54:                                        ; preds = %do.body.53
  br label %do.body.55

do.body.55:                                       ; preds = %do.end.54
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.63, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 19))
  br label %do.end.56

do.end.56:                                        ; preds = %do.body.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.65, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.66, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 18))
  br label %do.end.58

do.end.58:                                        ; preds = %do.body.57
  br label %do.body.59

do.body.59:                                       ; preds = %do.end.58
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.67, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.68, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 53))
  br label %do.end.60

do.end.60:                                        ; preds = %do.body.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.69, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.70, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 54))
  br label %do.end.62

do.end.62:                                        ; preds = %do.body.61
  br label %do.body.63

do.body.63:                                       ; preds = %do.end.62
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.71, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 55))
  br label %do.end.64

do.end.64:                                        ; preds = %do.body.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.73, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.74, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 56))
  br label %do.end.66

do.end.66:                                        ; preds = %do.body.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.75, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 57))
  br label %do.end.68

do.end.68:                                        ; preds = %do.body.67
  br label %do.body.69

do.body.69:                                       ; preds = %do.end.68
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.77, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.78, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 58))
  br label %do.end.70

do.end.70:                                        ; preds = %do.body.69
  br label %do.body.71

do.body.71:                                       ; preds = %do.end.70
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.79, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.80, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 60))
  br label %do.end.72

do.end.72:                                        ; preds = %do.body.71
  br label %do.body.73

do.body.73:                                       ; preds = %do.end.72
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.81, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.82, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 62))
  br label %do.end.74

do.end.74:                                        ; preds = %do.body.73
  br label %do.body.75

do.body.75:                                       ; preds = %do.end.74
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.83, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.84, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 63))
  br label %do.end.76

do.end.76:                                        ; preds = %do.body.75
  br label %do.body.77

do.body.77:                                       ; preds = %do.end.76
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.85, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.86, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 64))
  br label %do.end.78

do.end.78:                                        ; preds = %do.body.77
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.78
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.87, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.88, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 65))
  br label %do.end.80

do.end.80:                                        ; preds = %do.body.79
  br label %do.body.81

do.body.81:                                       ; preds = %do.end.80
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.89, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.90, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 67))
  br label %do.end.82

do.end.82:                                        ; preds = %do.body.81
  br label %do.body.83

do.body.83:                                       ; preds = %do.end.82
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.91, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.92, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 68))
  br label %do.end.84

do.end.84:                                        ; preds = %do.body.83
  br label %do.body.85

do.body.85:                                       ; preds = %do.end.84
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 13
  %call86 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.93, i32 0, i32 0), i64* %header_line_format_, i64 %call86)
  br label %do.end.87

do.end.87:                                        ; preds = %do.body.85
  br label %do.body.88

do.body.88:                                       ; preds = %do.end.87
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 12
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.94, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i32 0, i32 0), i64* %mode_line_format_, i64 %call89)
  br label %do.end.90

do.end.90:                                        ; preds = %do.body.88
  br label %do.body.91

do.body.91:                                       ; preds = %do.end.90
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.96, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.97, i32 0, i32 0), i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 10))
  br label %do.end.92

do.end.92:                                        ; preds = %do.body.91
  br label %do.body.93

do.body.93:                                       ; preds = %do.end.92
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %major_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 10
  %call94 = call i64 @builtin_lisp_symbol(i32 897)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.98, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.99, i32 0, i32 0), i64* %major_mode_, i64 %call94)
  br label %do.end.95

do.end.95:                                        ; preds = %do.body.93
  br label %do.body.96

do.body.96:                                       ; preds = %do.end.95
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %mode_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 11
  %call97 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.100, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.101, i32 0, i32 0), i64* %mode_name_, i64 %call97)
  br label %do.end.98

do.end.98:                                        ; preds = %do.body.96
  br label %do.body.99

do.body.99:                                       ; preds = %do.end.98
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %abbrev_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 15
  %call100 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.102, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.103, i32 0, i32 0), i64* %abbrev_table_, i64 %call100)
  br label %do.end.101

do.end.101:                                       ; preds = %do.body.99
  br label %do.body.102

do.body.102:                                      ; preds = %do.end.101
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %abbrev_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 36
  %call103 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.104, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.105, i32 0, i32 0), i64* %abbrev_mode_, i64 %call103)
  br label %do.end.104

do.end.104:                                       ; preds = %do.body.102
  br label %do.body.105

do.body.105:                                      ; preds = %do.end.104
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %case_fold_search_ = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 18
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.106, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.107, i32 0, i32 0), i64* %case_fold_search_, i64 %call106)
  br label %do.end.107

do.end.107:                                       ; preds = %do.body.105
  br label %do.body.108

do.body.108:                                      ; preds = %do.end.107
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %fill_column_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 20
  %call109 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.108, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i32 0, i32 0), i64* %fill_column_, i64 %call109)
  br label %do.end.110

do.end.110:                                       ; preds = %do.body.108
  br label %do.body.111

do.body.111:                                      ; preds = %do.end.110
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %left_margin_ = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 21
  %call112 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.110, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.111, i32 0, i32 0), i64* %left_margin_, i64 %call112)
  br label %do.end.113

do.end.113:                                       ; preds = %do.body.111
  br label %do.body.114

do.body.114:                                      ; preds = %do.end.113
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 19
  %call115 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.112, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.113, i32 0, i32 0), i64* %tab_width_, i64 %call115)
  br label %do.end.116

do.end.116:                                       ; preds = %do.body.114
  br label %do.body.117

do.body.117:                                      ; preds = %do.end.116
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 29
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.114, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.115, i32 0, i32 0), i64* %ctl_arrow_, i64 %call118)
  br label %do.end.119

do.end.119:                                       ; preds = %do.body.117
  br label %do.body.120

do.body.120:                                      ; preds = %do.end.119
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 39
  %call121 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.116, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.117, i32 0, i32 0), i64* %enable_multibyte_characters_, i64 %call121)
  br label %do.end.122

do.end.122:                                       ; preds = %do.body.120
  %call123 = call i64 @intern_c_string(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.117, i32 0, i32 0))
  %sub = sub nsw i64 %call123, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub
  %12 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  %13 = bitcast %struct.Lisp_Symbol* %12 to i16*
  %bf.load = load i16, i16* %13, align 8
  %bf.clear = and i16 %bf.load, -49
  %bf.set = or i16 %bf.clear, 16
  store i16 %bf.set, i16* %13, align 8
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.122
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %buffer_file_coding_system_ = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 40
  %call125 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.118, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.119, i32 0, i32 0), i64* %buffer_file_coding_system_, i64 %call125)
  br label %do.end.126

do.end.126:                                       ; preds = %do.body.124
  br label %do.body.127

do.body.127:                                      ; preds = %do.end.126
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_display_reordering_ = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 30
  %call128 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.120, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.121, i32 0, i32 0), i64* %bidi_display_reordering_, i64 %call128)
  br label %do.end.129

do.end.129:                                       ; preds = %do.body.127
  br label %do.body.130

do.body.130:                                      ; preds = %do.end.129
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %bidi_paragraph_direction_ = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 31
  %call131 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.122, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.123, i32 0, i32 0), i64* %bidi_paragraph_direction_, i64 %call131)
  br label %do.end.132

do.end.132:                                       ; preds = %do.body.130
  br label %do.body.133

do.body.133:                                      ; preds = %do.end.132
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %truncate_lines_ = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 27
  %call134 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.124, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.125, i32 0, i32 0), i64* %truncate_lines_, i64 %call134)
  br label %do.end.135

do.end.135:                                       ; preds = %do.body.133
  br label %do.body.136

do.body.136:                                      ; preds = %do.end.135
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %word_wrap_ = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 28
  %call137 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.126, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.127, i32 0, i32 0), i64* %word_wrap_, i64 %call137)
  br label %do.end.138

do.end.138:                                       ; preds = %do.body.136
  br label %do.body.139

do.body.139:                                      ; preds = %do.end.138
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_ = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 3
  %call140 = call i64 @builtin_lisp_symbol(i32 885)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.128, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.129, i32 0, i32 0), i64* %directory_, i64 %call140)
  br label %do.end.141

do.end.141:                                       ; preds = %do.body.139
  br label %do.body.142

do.body.142:                                      ; preds = %do.end.141
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %auto_fill_function_ = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 22
  %call143 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.130, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i64* %auto_fill_function_, i64 %call143)
  br label %do.end.144

do.end.144:                                       ; preds = %do.body.142
  br label %do.body.145

do.body.145:                                      ; preds = %do.end.144
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %filename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 2
  %call146 = call i64 @builtin_lisp_symbol(i32 885)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.132, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.133, i32 0, i32 0), i64* %filename_, i64 %call146)
  br label %do.end.147

do.end.147:                                       ; preds = %do.body.145
  br label %do.body.148

do.body.148:                                      ; preds = %do.end.147
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %file_truename_ = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 49
  %call149 = call i64 @builtin_lisp_symbol(i32 885)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.134, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.135, i32 0, i32 0), i64* %file_truename_, i64 %call149)
  br label %do.end.150

do.end.150:                                       ; preds = %do.body.148
  br label %do.body.151

do.body.151:                                      ; preds = %do.end.150
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %auto_save_file_name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 6
  %call152 = call i64 @builtin_lisp_symbol(i32 885)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.136, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.137, i32 0, i32 0), i64* %auto_save_file_name_, i64 %call152)
  br label %do.end.153

do.end.153:                                       ; preds = %do.body.151
  br label %do.body.154

do.body.154:                                      ; preds = %do.end.153
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %read_only_ = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 7
  %call155 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.138, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.139, i32 0, i32 0), i64* %read_only_, i64 %call155)
  br label %do.end.156

do.end.156:                                       ; preds = %do.body.154
  br label %do.body.157

do.body.157:                                      ; preds = %do.end.156
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %backed_up_ = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 4
  %call158 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.140, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.141, i32 0, i32 0), i64* %backed_up_, i64 %call158)
  br label %do.end.159

do.end.159:                                       ; preds = %do.body.157
  br label %do.body.160

do.body.160:                                      ; preds = %do.end.159
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %save_length_ = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 5
  %call161 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.142, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.143, i32 0, i32 0), i64* %save_length_, i64 %call161)
  br label %do.end.162

do.end.162:                                       ; preds = %do.body.160
  br label %do.body.163

do.body.163:                                      ; preds = %do.end.162
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %selective_display_ = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 32
  %call164 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.144, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.145, i32 0, i32 0), i64* %selective_display_, i64 %call164)
  br label %do.end.165

do.end.165:                                       ; preds = %do.body.163
  br label %do.body.166

do.body.166:                                      ; preds = %do.end.165
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %selective_display_ellipses_ = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 33
  %call167 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.146, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.147, i32 0, i32 0), i64* %selective_display_ellipses_, i64 %call167)
  br label %do.end.168

do.end.168:                                       ; preds = %do.body.166
  br label %do.body.169

do.body.169:                                      ; preds = %do.end.168
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %overwrite_mode_ = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 35
  %call170 = call i64 @builtin_lisp_symbol(i32 736)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.148, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.149, i32 0, i32 0), i64* %overwrite_mode_, i64 %call170)
  br label %do.end.171

do.end.171:                                       ; preds = %do.body.169
  br label %do.body.172

do.body.172:                                      ; preds = %do.end.171
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %display_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 37
  %call173 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.150, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.151, i32 0, i32 0), i64* %display_table_, i64 %call173)
  br label %do.end.174

do.end.174:                                       ; preds = %do.body.172
  br label %do.body.175

do.body.175:                                      ; preds = %do.end.174
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %left_margin_cols_ = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 53
  %call176 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.152, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.153, i32 0, i32 0), i64* %left_margin_cols_, i64 %call176)
  br label %do.end.177

do.end.177:                                       ; preds = %do.body.175
  br label %do.body.178

do.body.178:                                      ; preds = %do.end.177
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %right_margin_cols_ = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 54
  %call179 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.154, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.155, i32 0, i32 0), i64* %right_margin_cols_, i64 %call179)
  br label %do.end.180

do.end.180:                                       ; preds = %do.body.178
  br label %do.body.181

do.body.181:                                      ; preds = %do.end.180
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %left_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 55
  %call182 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.156, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.157, i32 0, i32 0), i64* %left_fringe_width_, i64 %call182)
  br label %do.end.183

do.end.183:                                       ; preds = %do.body.181
  br label %do.body.184

do.body.184:                                      ; preds = %do.end.183
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %right_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 56
  %call185 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.158, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.159, i32 0, i32 0), i64* %right_fringe_width_, i64 %call185)
  br label %do.end.186

do.end.186:                                       ; preds = %do.body.184
  br label %do.body.187

do.body.187:                                      ; preds = %do.end.186
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %fringes_outside_margins_ = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 57
  %call188 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.160, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.161, i32 0, i32 0), i64* %fringes_outside_margins_, i64 %call188)
  br label %do.end.189

do.end.189:                                       ; preds = %do.body.187
  br label %do.body.190

do.body.190:                                      ; preds = %do.end.189
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %scroll_bar_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 58
  %call191 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.162, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.163, i32 0, i32 0), i64* %scroll_bar_width_, i64 %call191)
  br label %do.end.192

do.end.192:                                       ; preds = %do.body.190
  br label %do.body.193

do.body.193:                                      ; preds = %do.end.192
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %scroll_bar_height_ = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 59
  %call194 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.164, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.165, i32 0, i32 0), i64* %scroll_bar_height_, i64 %call194)
  br label %do.end.195

do.end.195:                                       ; preds = %do.body.193
  br label %do.body.196

do.body.196:                                      ; preds = %do.end.195
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %vertical_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 60
  %call197 = call i64 @builtin_lisp_symbol(i32 1002)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.166, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.167, i32 0, i32 0), i64* %vertical_scroll_bar_type_, i64 %call197)
  br label %do.end.198

do.end.198:                                       ; preds = %do.body.196
  br label %do.body.199

do.body.199:                                      ; preds = %do.end.198
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %horizontal_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 61
  %call200 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.168, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.169, i32 0, i32 0), i64* %horizontal_scroll_bar_type_, i64 %call200)
  br label %do.end.201

do.end.201:                                       ; preds = %do.body.199
  br label %do.body.202

do.body.202:                                      ; preds = %do.end.201
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %indicate_empty_lines_ = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 62
  %call203 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.170, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.171, i32 0, i32 0), i64* %indicate_empty_lines_, i64 %call203)
  br label %do.end.204

do.end.204:                                       ; preds = %do.body.202
  br label %do.body.205

do.body.205:                                      ; preds = %do.end.204
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %indicate_buffer_boundaries_ = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 63
  %call206 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.172, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.173, i32 0, i32 0), i64* %indicate_buffer_boundaries_, i64 %call206)
  br label %do.end.207

do.end.207:                                       ; preds = %do.body.205
  br label %do.body.208

do.body.208:                                      ; preds = %do.end.207
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %fringe_indicator_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 64
  %call209 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.174, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.175, i32 0, i32 0), i64* %fringe_indicator_alist_, i64 %call209)
  br label %do.end.210

do.end.210:                                       ; preds = %do.body.208
  br label %do.body.211

do.body.211:                                      ; preds = %do.end.210
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %fringe_cursor_alist_ = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 65
  %call212 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.176, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.177, i32 0, i32 0), i64* %fringe_cursor_alist_, i64 %call212)
  br label %do.end.213

do.end.213:                                       ; preds = %do.body.211
  br label %do.body.214

do.body.214:                                      ; preds = %do.end.213
  %44 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %scroll_up_aggressively_ = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 67
  %call215 = call i64 @builtin_lisp_symbol(i32 455)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.178, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.179, i32 0, i32 0), i64* %scroll_up_aggressively_, i64 %call215)
  br label %do.end.216

do.end.216:                                       ; preds = %do.body.214
  br label %do.body.217

do.body.217:                                      ; preds = %do.end.216
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %scroll_down_aggressively_ = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 68
  %call218 = call i64 @builtin_lisp_symbol(i32 455)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.180, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.181, i32 0, i32 0), i64* %scroll_down_aggressively_, i64 %call218)
  br label %do.end.219

do.end.219:                                       ; preds = %do.body.217
  br label %do.body.220

do.body.220:                                      ; preds = %do.end.219
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.182, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.183, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 13))
  br label %do.end.221

do.end.221:                                       ; preds = %do.body.220
  %call222 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call222, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 13), align 8
  br label %do.body.223

do.body.223:                                      ; preds = %do.end.221
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.184, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.185, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 0))
  br label %do.end.224

do.end.224:                                       ; preds = %do.body.223
  %call225 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call225, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 0), align 8
  br label %do.body.226

do.body.226:                                      ; preds = %do.end.224
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.186, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.187, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 97))
  br label %do.end.227

do.end.227:                                       ; preds = %do.body.226
  %call228 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call228, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 97), align 8
  br label %do.body.229

do.body.229:                                      ; preds = %do.end.227
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 98
  %call230 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.188, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.189, i32 0, i32 0), i64* %undo_list_, i64 %call230)
  br label %do.end.231

do.end.231:                                       ; preds = %do.body.229
  br label %do.body.232

do.body.232:                                      ; preds = %do.end.231
  %47 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %mark_active_ = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 38
  %call233 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.190, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.191, i32 0, i32 0), i64* %mark_active_, i64 %call233)
  br label %do.end.234

do.end.234:                                       ; preds = %do.body.232
  br label %do.body.235

do.body.235:                                      ; preds = %do.end.234
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cache_long_scans_ = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 43
  %call236 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.192, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.193, i32 0, i32 0), i64* %cache_long_scans_, i64 %call236)
  br label %do.end.237

do.end.237:                                       ; preds = %do.body.235
  br label %do.body.238

do.body.238:                                      ; preds = %do.end.237
  %49 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %point_before_scroll_ = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 48
  %call239 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.194, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.195, i32 0, i32 0), i64* %point_before_scroll_, i64 %call239)
  br label %do.end.240

do.end.240:                                       ; preds = %do.body.238
  br label %do.body.241

do.body.241:                                      ; preds = %do.end.240
  %50 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %file_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 41
  %call242 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.196, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.197, i32 0, i32 0), i64* %file_format_, i64 %call242)
  br label %do.end.243

do.end.243:                                       ; preds = %do.body.241
  br label %do.body.244

do.body.244:                                      ; preds = %do.end.243
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %auto_save_file_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 42
  %call245 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.198, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.199, i32 0, i32 0), i64* %auto_save_file_format_, i64 %call245)
  br label %do.end.246

do.end.246:                                       ; preds = %do.body.244
  br label %do.body.247

do.body.247:                                      ; preds = %do.end.246
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %invisibility_spec_ = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 50
  %call248 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.200, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.201, i32 0, i32 0), i64* %invisibility_spec_, i64 %call248)
  br label %do.end.249

do.end.249:                                       ; preds = %do.body.247
  br label %do.body.250

do.body.250:                                      ; preds = %do.end.249
  %53 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %display_count_ = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 52
  %call251 = call i64 @builtin_lisp_symbol(i32 559)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.202, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.203, i32 0, i32 0), i64* %display_count_, i64 %call251)
  br label %do.end.252

do.end.252:                                       ; preds = %do.body.250
  br label %do.body.253

do.body.253:                                      ; preds = %do.end.252
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %display_time_ = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 66
  %call254 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.204, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.205, i32 0, i32 0), i64* %display_time_, i64 %call254)
  br label %do.end.255

do.end.255:                                       ; preds = %do.body.253
  br label %do.body.256

do.body.256:                                      ; preds = %do.end.255
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.206, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.207, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 305))
  br label %do.end.257

do.end.257:                                       ; preds = %do.body.256
  %call258 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call258, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 305), align 8
  br label %do.body.259

do.body.259:                                      ; preds = %do.end.257
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.208, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.209, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 139))
  br label %do.end.260

do.end.260:                                       ; preds = %do.body.259
  %call261 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call261, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 139), align 8
  br label %do.body.262

do.body.262:                                      ; preds = %do.end.260
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cursor_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 69
  %call263 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.210, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.211, i32 0, i32 0), i64* %cursor_type_, i64 %call263)
  br label %do.end.264

do.end.264:                                       ; preds = %do.body.262
  br label %do.body.265

do.body.265:                                      ; preds = %do.end.264
  %56 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %extra_line_spacing_ = getelementptr inbounds %struct.buffer, %struct.buffer* %56, i32 0, i32 70
  %call266 = call i64 @builtin_lisp_symbol(i32 711)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.212, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.213, i32 0, i32 0), i64* %extra_line_spacing_, i64 %call266)
  br label %do.end.267

do.end.267:                                       ; preds = %do.body.265
  br label %do.body.268

do.body.268:                                      ; preds = %do.end.267
  %57 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cursor_in_non_selected_windows_ = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 71
  %call269 = call i64 @builtin_lisp_symbol(i32 0)
  call void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* @syms_of_buffer.bo_fwd.214, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.215, i32 0, i32 0), i64* %cursor_in_non_selected_windows_, i64 %call269)
  br label %do.end.270

do.end.270:                                       ; preds = %do.body.268
  br label %do.body.271

do.body.271:                                      ; preds = %do.end.270
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.216, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.217, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 152))
  br label %do.end.272

do.end.272:                                       ; preds = %do.body.271
  %call273 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call273, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 152), align 8
  br label %do.body.274

do.body.274:                                      ; preds = %do.end.272
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.218, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.219, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 24))
  br label %do.end.275

do.end.275:                                       ; preds = %do.body.274
  %call276 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call276, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 24), align 8
  br label %do.body.277

do.body.277:                                      ; preds = %do.end.275
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_buffer.o_fwd.220, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.221, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 18))
  br label %do.end.278

do.end.278:                                       ; preds = %do.body.277
  %call279 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call279, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 18), align 8
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_live_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_list to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sget_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sget_file_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sget_buffer_create to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smake_indirect_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sgenerate_new_buffer_name to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_name to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_file_name to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_base_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_local_value to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_local_variables to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_modified_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sforce_mode_line_update to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_buffer_modified_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_modified_tick to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_chars_modified_tick to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Srename_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sother_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_enable_undo to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Skill_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbury_buffer_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_buffer_major_mode to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Scurrent_buffer)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbarf_if_buffer_read_only to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Serase_buffer)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbuffer_swap_text to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_buffer_multibyte to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Skill_all_local_variables)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlayp to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smake_overlay to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sdelete_overlay to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sdelete_all_overlays to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smove_overlay to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_start to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_end to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_properties to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlays_at to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlays_in to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Snext_overlay_change to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sprevious_overlay_change to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_recenter to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Soverlay_lists)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_get to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Soverlay_put to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Srestore_buffer_modified_p to %struct.Lisp_Subr*))
  %call280 = call i64 @intern_c_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.222, i32 0, i32 0))
  %call281 = call i64 @builtin_lisp_symbol(i32 343)
  %call282 = call i64 @builtin_lisp_symbol(i32 901)
  %call283 = call i64 @Fput(i64 %call280, i64 %call281, i64 %call282)
  ret void
}

declare void @staticpro(i64*) #1

declare i64 @Fmake_vector(i64, i64) #1

declare i64 @list4(i64, i64, i64, i64) #1

declare i64 @make_float(double) #1

declare i64 @listn(i32, i64, i64, ...) #1

declare void @defvar_lisp_nopro(%struct.Lisp_Objfwd*, i8*, i64*) #1

; Function Attrs: nounwind uwtable
define internal void @defvar_per_buffer(%struct.Lisp_Buffer_Objfwd* %bo_fwd, i8* %namestring, i64* %address, i64 %predicate) #3 {
entry:
  %bo_fwd.addr = alloca %struct.Lisp_Buffer_Objfwd*, align 8
  %namestring.addr = alloca i8*, align 8
  %address.addr = alloca i64*, align 8
  %predicate.addr = alloca i64, align 8
  %sym = alloca %struct.Lisp_Symbol*, align 8
  %offset = alloca i32, align 4
  store %struct.Lisp_Buffer_Objfwd* %bo_fwd, %struct.Lisp_Buffer_Objfwd** %bo_fwd.addr, align 8
  store i8* %namestring, i8** %namestring.addr, align 8
  store i64* %address, i64** %address.addr, align 8
  store i64 %predicate, i64* %predicate.addr, align 8
  %0 = load i8*, i8** %namestring.addr, align 8
  %call = call i64 @intern(i8* %0)
  %sub = sub nsw i64 %call, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub
  %1 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  store %struct.Lisp_Symbol* %1, %struct.Lisp_Symbol** %sym, align 8
  %2 = load i64*, i64** %address.addr, align 8
  %3 = bitcast i64* %2 to i8*
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %5 = bitcast %struct.buffer* %4 to i8*
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* %offset, align 4
  %6 = load %struct.Lisp_Buffer_Objfwd*, %struct.Lisp_Buffer_Objfwd** %bo_fwd.addr, align 8
  %type = getelementptr inbounds %struct.Lisp_Buffer_Objfwd, %struct.Lisp_Buffer_Objfwd* %6, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %7 = load i32, i32* %offset, align 4
  %8 = load %struct.Lisp_Buffer_Objfwd*, %struct.Lisp_Buffer_Objfwd** %bo_fwd.addr, align 8
  %offset1 = getelementptr inbounds %struct.Lisp_Buffer_Objfwd, %struct.Lisp_Buffer_Objfwd* %8, i32 0, i32 1
  store i32 %7, i32* %offset1, align 4
  %9 = load i64, i64* %predicate.addr, align 8
  %10 = load %struct.Lisp_Buffer_Objfwd*, %struct.Lisp_Buffer_Objfwd** %bo_fwd.addr, align 8
  %predicate2 = getelementptr inbounds %struct.Lisp_Buffer_Objfwd, %struct.Lisp_Buffer_Objfwd* %10, i32 0, i32 2
  store i64 %9, i64* %predicate2, align 8
  %11 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %12 = bitcast %struct.Lisp_Symbol* %11 to i16*
  %bf.load = load i16, i16* %12, align 8
  %bf.clear = and i16 %bf.load, -257
  %bf.set = or i16 %bf.clear, 256
  store i16 %bf.set, i16* %12, align 8
  %13 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %14 = bitcast %struct.Lisp_Symbol* %13 to i16*
  %bf.load3 = load i16, i16* %14, align 8
  %bf.clear4 = and i16 %bf.load3, -15
  %bf.set5 = or i16 %bf.clear4, 6
  store i16 %bf.set5, i16* %14, align 8
  %15 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %16 = load %struct.Lisp_Buffer_Objfwd*, %struct.Lisp_Buffer_Objfwd** %bo_fwd.addr, align 8
  %17 = bitcast %struct.Lisp_Buffer_Objfwd* %16 to %union.Lisp_Fwd*
  call void @SET_SYMBOL_FWD(%struct.Lisp_Symbol* %15, %union.Lisp_Fwd* %17)
  %18 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call6 = call i64 @make_lisp_symbol(%struct.Lisp_Symbol* %18)
  %19 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %19 to i64
  %add.ptr7 = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_symbols to i8*), i64 %idx.ext
  %20 = bitcast i8* %add.ptr7 to i64*
  store i64 %call6, i64* %20, align 8
  %21 = load i32, i32* %offset, align 4
  %idx.ext8 = sext i32 %21 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* bitcast (%struct.buffer* @buffer_local_flags to i8*), i64 %idx.ext8
  %22 = bitcast i8* %add.ptr9 to i64*
  %23 = load i64, i64* %22, align 8
  %shr = ashr i64 %23, 2
  %cmp = icmp eq i64 %shr, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @emacs_abort() #8
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

declare i64 @intern_c_string(i8*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

; Function Attrs: nounwind uwtable
define void @keys_of_buffer() #3 {
entry:
  %0 = load i64, i64* @control_x_map, align 8
  call void @initial_define_key(i64 %0, i32 98, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.223, i32 0, i32 0))
  %1 = load i64, i64* @control_x_map, align 8
  call void @initial_define_key(i64 %1, i32 107, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.224, i32 0, i32 0))
  ret void
}

declare void @initial_define_key(i64, i32, i8*) #1

declare i64 @Fcar(i64) #1

declare void @set_per_buffer_value(%struct.buffer*, i32, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.Lisp_Overlay* @copy_overlays(%struct.buffer* %b, %struct.Lisp_Overlay* %list) #3 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %list.addr = alloca %struct.Lisp_Overlay*, align 8
  %result = alloca %struct.Lisp_Overlay*, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %overlay = alloca i64, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %m = alloca %struct.Lisp_Marker*, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store %struct.Lisp_Overlay* %list, %struct.Lisp_Overlay** %list.addr, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %result, align 8
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %0, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  %start1 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %1, i32 0, i32 2
  %2 = load i64, i64* %start1, align 8
  %call = call %struct.Lisp_Marker* @XMARKER(i64 %2)
  store %struct.Lisp_Marker* %call, %struct.Lisp_Marker** %m, align 8
  %3 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %4 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %charpos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %4, i32 0, i32 3
  %5 = load i64, i64* %charpos, align 8
  %6 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %bytepos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %6, i32 0, i32 4
  %7 = load i64, i64* %bytepos, align 8
  %call2 = call i64 @build_marker(%struct.buffer* %3, i64 %5, i64 %7)
  store i64 %call2, i64* %start, align 8
  %8 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %9 = bitcast %struct.Lisp_Marker* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load, 31
  %bf.cast = trunc i32 %bf.lshr to i1
  %10 = load i64, i64* %start, align 8
  %call3 = call %struct.Lisp_Marker* @XMARKER(i64 %10)
  %11 = bitcast %struct.Lisp_Marker* %call3 to i32*
  %12 = zext i1 %bf.cast to i32
  %bf.load4 = load i32, i32* %11, align 8
  %bf.shl = shl i32 %12, 31
  %bf.clear = and i32 %bf.load4, 2147483647
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %11, align 8
  %bf.result.cast = trunc i32 %12 to i8
  %tobool5 = trunc i8 %bf.result.cast to i1
  %13 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  %end6 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %13, i32 0, i32 3
  %14 = load i64, i64* %end6, align 8
  %call7 = call %struct.Lisp_Marker* @XMARKER(i64 %14)
  store %struct.Lisp_Marker* %call7, %struct.Lisp_Marker** %m, align 8
  %15 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %16 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %charpos8 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %16, i32 0, i32 3
  %17 = load i64, i64* %charpos8, align 8
  %18 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %bytepos9 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %18, i32 0, i32 4
  %19 = load i64, i64* %bytepos9, align 8
  %call10 = call i64 @build_marker(%struct.buffer* %15, i64 %17, i64 %19)
  store i64 %call10, i64* %end, align 8
  %20 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %m, align 8
  %21 = bitcast %struct.Lisp_Marker* %20 to i32*
  %bf.load11 = load i32, i32* %21, align 8
  %bf.lshr12 = lshr i32 %bf.load11, 31
  %bf.cast13 = trunc i32 %bf.lshr12 to i1
  %22 = load i64, i64* %end, align 8
  %call14 = call %struct.Lisp_Marker* @XMARKER(i64 %22)
  %23 = bitcast %struct.Lisp_Marker* %call14 to i32*
  %24 = zext i1 %bf.cast13 to i32
  %bf.load15 = load i32, i32* %23, align 8
  %bf.shl16 = shl i32 %24, 31
  %bf.clear17 = and i32 %bf.load15, 2147483647
  %bf.set18 = or i32 %bf.clear17, %bf.shl16
  store i32 %bf.set18, i32* %23, align 8
  %bf.result.cast19 = trunc i32 %24 to i8
  %tobool20 = trunc i8 %bf.result.cast19 to i1
  %25 = load i64, i64* %start, align 8
  %26 = load i64, i64* %end, align 8
  %27 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  %plist = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %27, i32 0, i32 4
  %28 = load i64, i64* %plist, align 8
  %call21 = call i64 @Fcopy_sequence(i64 %28)
  %call22 = call i64 @build_overlay(i64 %25, i64 %26, i64 %call21)
  store i64 %call22, i64* %overlay, align 8
  %29 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool23 = icmp ne %struct.Lisp_Overlay* %29, null
  br i1 %tobool23, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %30 = load i64, i64* %overlay, align 8
  %call24 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %30)
  %31 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %31, i32 0, i32 1
  store %struct.Lisp_Overlay* %call24, %struct.Lisp_Overlay** %next, align 8
  store %struct.Lisp_Overlay* %call24, %struct.Lisp_Overlay** %tail, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %32 = load i64, i64* %overlay, align 8
  %call25 = call %struct.Lisp_Overlay* @XOVERLAY(i64 %32)
  store %struct.Lisp_Overlay* %call25, %struct.Lisp_Overlay** %tail, align 8
  store %struct.Lisp_Overlay* %call25, %struct.Lisp_Overlay** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %33 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  %next26 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %33, i32 0, i32 1
  %34 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next26, align 8
  store %struct.Lisp_Overlay* %34, %struct.Lisp_Overlay** %list.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %result, align 8
  ret %struct.Lisp_Overlay* %35
}

declare void @unchain_marker(%struct.Lisp_Marker*) #1

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare %struct.Lisp_Char_Table* @XCHAR_TABLE(i64) #1

declare i64 @Fset_standard_case_table(i64) #1

declare i64 @per_buffer_default(i32) #1

declare i64 @set_marker_both(i64, i64, i64, i64) #1

declare i64 @marker_byte_position(i64) #1

declare void @swap_in_global_binding(%struct.Lisp_Symbol*) #1

declare i64 @count_size_as_multibyte(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.Lisp_Overlay* @unchain_overlay(%struct.Lisp_Overlay* %list, %struct.Lisp_Overlay* %overlay) #3 {
entry:
  %list.addr = alloca %struct.Lisp_Overlay*, align 8
  %overlay.addr = alloca %struct.Lisp_Overlay*, align 8
  %tail = alloca %struct.Lisp_Overlay*, align 8
  %prev = alloca %struct.Lisp_Overlay**, align 8
  store %struct.Lisp_Overlay* %list, %struct.Lisp_Overlay** %list.addr, align 8
  store %struct.Lisp_Overlay* %overlay, %struct.Lisp_Overlay** %overlay.addr, align 8
  store %struct.Lisp_Overlay** %list.addr, %struct.Lisp_Overlay*** %prev, align 8
  %0 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  store %struct.Lisp_Overlay* %0, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %tobool = icmp ne %struct.Lisp_Overlay* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %3 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlay.addr, align 8
  %cmp = icmp eq %struct.Lisp_Overlay* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlay.addr, align 8
  %next = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %4, i32 0, i32 1
  %5 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %next, align 8
  %6 = load %struct.Lisp_Overlay**, %struct.Lisp_Overlay*** %prev, align 8
  store %struct.Lisp_Overlay* %5, %struct.Lisp_Overlay** %6, align 8
  %7 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %overlay.addr, align 8
  %next1 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %7, i32 0, i32 1
  store %struct.Lisp_Overlay* null, %struct.Lisp_Overlay** %next1, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %tail, align 8
  %next2 = getelementptr inbounds %struct.Lisp_Overlay, %struct.Lisp_Overlay* %8, i32 0, i32 1
  store %struct.Lisp_Overlay** %next2, %struct.Lisp_Overlay*** %prev, align 8
  %9 = load %struct.Lisp_Overlay**, %struct.Lisp_Overlay*** %prev, align 8
  %10 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %9, align 8
  store %struct.Lisp_Overlay* %10, %struct.Lisp_Overlay** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load %struct.Lisp_Overlay*, %struct.Lisp_Overlay** %list.addr, align 8
  ret %struct.Lisp_Overlay* %11
}

declare void @bset_redisplay(%struct.buffer*) #1

declare i64 @ASIZE(i64) #1

declare i64 @larger_vector(i64, i64, i64) #1

declare void @ASET(i64, i64, i64) #1

declare i64 @call4(i64, i64, i64, i64, i64) #1

declare i64 @call5(i64, i64, i64, i64, i64, i64) #1

declare void @SET_SYMBOL_FWD(%struct.Lisp_Symbol*, %union.Lisp_Fwd*) #1

attributes #0 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
