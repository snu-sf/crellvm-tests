; ModuleID = './src/window.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Intfwd = type { i32, i64* }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.12, i16, i16, i8*, i8*, i8* }
%union.anon.12 = type { i64 ()* }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.text_pos = type { i64, i64 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct._XDisplay = type opaque
%struct.XChar2b = type { i8, i8 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%struct.xwidget = type opaque
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type { %struct.tty_display_info*, i8*, i8*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct.emacs_tty*, i8, i32, %struct.terminal*, %struct.cm*, i64, %struct.frame*, i32, %struct.Mouse_HLInfo, [4096 x i8], [4096 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.emacs_tty = type opaque
%struct.cm = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.coding_system = type { i64, i32, i32, %union.anon.5, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.5 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.6, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type { %struct.tty_display_info* }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.check_window_data = type { i64*, i32, i32, i32* }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.position = type { i64, i64, i64, i64, i64, i32 }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }
%struct.save_window_data = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.saved_window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }

@selected_window = common global i64 0, align 8
@selected_frame = external global i64, align 8
@.str = private unnamed_addr constant [55 x i8] c"In `set-frame-selected-window', WINDOW is not on FRAME\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Combination limit is meaningful for internal windows only\00", align 1
@globals = external global %struct.emacs_globals, align 8
@minibuf_level = external global i64, align 8
@minibuf_selected_window = common global i64 0, align 8
@minibuf_window = common global i64 0, align 8
@current_buffer = external global %struct.buffer*, align 8
@windows_or_buffers_changed = external global i32, align 4
@noninteractive = external global i8, align 1
@Vwindow_list = common global i64 0, align 8
@Vframe_list = external global i64, align 8
@.str.2 = private unnamed_addr constant [31 x i8] c"Window is on a different frame\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"Specified root is not an ancestor of specified window\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Can't expand minibuffer to full frame\00", align 1
@Vrun_hooks = external global i64, align 8
@.str.5 = private unnamed_addr constant [34 x i8] c"Attempt to display deleted buffer\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Window is deleted\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"Window is dedicated to `%s'\00", align 1
@update_mode_lines = external global i32, align 4
@sequence_number = internal global i64 0, align 8
@.str.8 = private unnamed_addr constant [35 x i8] c"Attempt to split minibuffer window\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"Size of new window too small (after split)\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Window sizes don't fit\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"Resizing old window failed\00", align 1
@.str.12 = private unnamed_addr constant [45 x i8] c"Sum of sizes of old and new window don't fit\00", align 1
@.str.13 = private unnamed_addr constant [53 x i8] c"Attempt to delete minibuffer or sole ordinary window\00", align 1
@.str.14 = private unnamed_addr constant [40 x i8] c"Attempt to delete sole window of parent\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"Deletion failed\00", align 1
@.str.16 = private unnamed_addr constant [30 x i8] c"Not a valid minibuffer window\00", align 1
@.str.17 = private unnamed_addr constant [38 x i8] c"Cannot resize a minibuffer-only frame\00", align 1
@.str.18 = private unnamed_addr constant [35 x i8] c"Failed to resize minibuffer window\00", align 1
@.str.19 = private unnamed_addr constant [25 x i8] c"There is no other window\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"`recenter'ing a window that does not display current-buffer.\00", align 1
@n_compositions = external global i64, align 8
@composition_table = external global %struct.composition**, align 8
@frame_garbaged = external global i8, align 1
@.str.21 = private unnamed_addr constant [49 x i8] c"move-to-window-line called from unrelated buffer\00", align 1
@window_scroll_pixel_based_preserve_x = internal global i32 0, align 4
@window_scroll_pixel_based_preserve_y = internal global i32 0, align 4
@window_scroll_preserve_hpos = internal global i64 0, align 8
@window_scroll_preserve_vpos = internal global i64 0, align 8
@syms_of_window.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.22 = private unnamed_addr constant [26 x i8] c"temp-buffer-show-function\00", align 1
@syms_of_window.o_fwd.23 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.24 = private unnamed_addr constant [25 x i8] c"minibuffer-scroll-window\00", align 1
@syms_of_window.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.25 = private unnamed_addr constant [34 x i8] c"mode-line-in-non-selected-windows\00", align 1
@syms_of_window.o_fwd.26 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.27 = private unnamed_addr constant [27 x i8] c"other-window-scroll-buffer\00", align 1
@syms_of_window.b_fwd.28 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.29 = private unnamed_addr constant [20 x i8] c"auto-window-vscroll\00", align 1
@syms_of_window.i_fwd = internal global %struct.Lisp_Intfwd zeroinitializer, align 8
@.str.30 = private unnamed_addr constant [26 x i8] c"next-screen-context-lines\00", align 1
@syms_of_window.o_fwd.31 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.32 = private unnamed_addr constant [32 x i8] c"scroll-preserve-screen-position\00", align 1
@syms_of_window.o_fwd.33 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.34 = private unnamed_addr constant [28 x i8] c"window-point-insertion-type\00", align 1
@syms_of_window.o_fwd.35 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.36 = private unnamed_addr constant [33 x i8] c"window-configuration-change-hook\00", align 1
@syms_of_window.o_fwd.37 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.38 = private unnamed_addr constant [19 x i8] c"recenter-redisplay\00", align 1
@syms_of_window.o_fwd.39 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.40 = private unnamed_addr constant [26 x i8] c"window-combination-resize\00", align 1
@syms_of_window.o_fwd.41 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.42 = private unnamed_addr constant [25 x i8] c"window-combination-limit\00", align 1
@syms_of_window.o_fwd.43 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.44 = private unnamed_addr constant [29 x i8] c"window-persistent-parameters\00", align 1
@syms_of_window.b_fwd.45 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.46 = private unnamed_addr constant [24 x i8] c"window-resize-pixelwise\00", align 1
@syms_of_window.b_fwd.47 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.48 = private unnamed_addr constant [29 x i8] c"fast-but-imprecise-scrolling\00", align 1
@Sselected_window = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.12 { i64 ()* @Fselected_window }, i16 0, i16 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i32 0, i32 0), i8* null, i8* null }, align 8
@Sother_window_for_scrolling = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.12 { i64 ()* @Fother_window_for_scrolling }, i16 0, i16 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.136, i32 0, i32 0), i8* null, i8* null }, align 8
@Sminibuffer_selected_window = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.12 { i64 ()* @Fminibuffer_selected_window }, i16 0, i16 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.138, i32 0, i32 0), i8* null, i8* null }, align 8
@control_x_map = external global i64, align 8
@.str.49 = private unnamed_addr constant [12 x i8] c"scroll-left\00", align 1
@.str.50 = private unnamed_addr constant [13 x i8] c"scroll-right\00", align 1
@global_map = external global i64, align 8
@.str.51 = private unnamed_addr constant [18 x i8] c"scroll-up-command\00", align 1
@meta_map = external global i64, align 8
@.str.52 = private unnamed_addr constant [20 x i8] c"scroll-other-window\00", align 1
@.str.53 = private unnamed_addr constant [20 x i8] c"scroll-down-command\00", align 1
@window_select_count = common global i64 0, align 8
@immediate_quit = external global i8, align 1
@current_kboard = external global %struct.kboard*, align 8
@.str.54 = private unnamed_addr constant [36 x i8] c"Invalid type of vertical scroll bar\00", align 1
@.str.55 = private unnamed_addr constant [38 x i8] c"Invalid type of horizontal scroll bar\00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"selected-window\00", align 1
@.str.57 = private unnamed_addr constant [18 x i8] c"minibuffer-window\00", align 1
@Sminibuffer_window = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fminibuffer_window }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.57, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.58 = private unnamed_addr constant [20 x i8] c"window-minibuffer-p\00", align 1
@Swindow_minibuffer_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_minibuffer_p }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.58, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.59 = private unnamed_addr constant [8 x i8] c"windowp\00", align 1
@Swindowp = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindowp }, i16 1, i16 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.60 = private unnamed_addr constant [15 x i8] c"window-valid-p\00", align 1
@Swindow_valid_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_valid_p }, i16 1, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.61 = private unnamed_addr constant [14 x i8] c"window-live-p\00", align 1
@Swindow_live_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_live_p }, i16 1, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.62 = private unnamed_addr constant [13 x i8] c"window-frame\00", align 1
@Swindow_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_frame }, i16 0, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.63 = private unnamed_addr constant [18 x i8] c"frame-root-window\00", align 1
@Sframe_root_window = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_root_window }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.64 = private unnamed_addr constant [19 x i8] c"frame-first-window\00", align 1
@Sframe_first_window = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_first_window }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.64, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.65 = private unnamed_addr constant [22 x i8] c"frame-selected-window\00", align 1
@Sframe_selected_window = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_selected_window }, i16 0, i16 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.66 = private unnamed_addr constant [26 x i8] c"set-frame-selected-window\00", align 1
@Sset_frame_selected_window = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_frame_selected_window }, i16 2, i16 3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.66, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.67 = private unnamed_addr constant [24 x i8] c"pos-visible-in-window-p\00", align 1
@Spos_visible_in_window_p = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fpos_visible_in_window_p }, i16 0, i16 3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.67, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.68 = private unnamed_addr constant [19 x i8] c"window-line-height\00", align 1
@Swindow_line_height = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_line_height }, i16 0, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.68, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.69 = private unnamed_addr constant [14 x i8] c"window-buffer\00", align 1
@Swindow_buffer = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_buffer }, i16 0, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.69, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.70 = private unnamed_addr constant [14 x i8] c"window-parent\00", align 1
@Swindow_parent = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_parent }, i16 0, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.71 = private unnamed_addr constant [17 x i8] c"window-top-child\00", align 1
@Swindow_top_child = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_top_child }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.71, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.72 = private unnamed_addr constant [18 x i8] c"window-left-child\00", align 1
@Swindow_left_child = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_left_child }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.72, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.73 = private unnamed_addr constant [20 x i8] c"window-next-sibling\00", align 1
@Swindow_next_sibling = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_next_sibling }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.73, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.74 = private unnamed_addr constant [20 x i8] c"window-prev-sibling\00", align 1
@Swindow_prev_sibling = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_prev_sibling }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.74, i32 0, i32 0), i8* null, i8* null }, align 8
@Swindow_combination_limit = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_combination_limit }, i16 1, i16 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.42, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.75 = private unnamed_addr constant [29 x i8] c"set-window-combination-limit\00", align 1
@Sset_window_combination_limit = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_combination_limit }, i16 2, i16 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.75, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.76 = private unnamed_addr constant [16 x i8] c"window-use-time\00", align 1
@Swindow_use_time = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_use_time }, i16 0, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.76, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.77 = private unnamed_addr constant [19 x i8] c"window-pixel-width\00", align 1
@Swindow_pixel_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_pixel_width }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.77, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.78 = private unnamed_addr constant [20 x i8] c"window-pixel-height\00", align 1
@Swindow_pixel_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_pixel_height }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.79 = private unnamed_addr constant [19 x i8] c"window-total-width\00", align 1
@Swindow_total_width = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_total_width }, i16 0, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.79, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.80 = private unnamed_addr constant [20 x i8] c"window-total-height\00", align 1
@Swindow_total_height = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_total_height }, i16 0, i16 2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.80, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.81 = private unnamed_addr constant [19 x i8] c"window-normal-size\00", align 1
@Swindow_normal_size = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_normal_size }, i16 0, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.81, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.82 = private unnamed_addr constant [17 x i8] c"window-new-pixel\00", align 1
@Swindow_new_pixel = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_new_pixel }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.82, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.83 = private unnamed_addr constant [17 x i8] c"window-new-total\00", align 1
@Swindow_new_total = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_new_total }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.83, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.84 = private unnamed_addr constant [18 x i8] c"window-new-normal\00", align 1
@Swindow_new_normal = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_new_normal }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.84, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.85 = private unnamed_addr constant [18 x i8] c"window-pixel-left\00", align 1
@Swindow_pixel_left = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_pixel_left }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.85, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.86 = private unnamed_addr constant [17 x i8] c"window-pixel-top\00", align 1
@Swindow_pixel_top = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_pixel_top }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.86, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.87 = private unnamed_addr constant [19 x i8] c"window-left-column\00", align 1
@Swindow_left_column = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_left_column }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.87, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.88 = private unnamed_addr constant [16 x i8] c"window-top-line\00", align 1
@Swindow_top_line = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_top_line }, i16 0, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.88, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.89 = private unnamed_addr constant [21 x i8] c"set-window-new-pixel\00", align 1
@Sset_window_new_pixel = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_new_pixel }, i16 2, i16 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.89, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.90 = private unnamed_addr constant [21 x i8] c"set-window-new-total\00", align 1
@Sset_window_new_total = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_new_total }, i16 2, i16 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.90, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.91 = private unnamed_addr constant [22 x i8] c"set-window-new-normal\00", align 1
@Sset_window_new_normal = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_new_normal }, i16 1, i16 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.92 = private unnamed_addr constant [20 x i8] c"window-resize-apply\00", align 1
@Swindow_resize_apply = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_resize_apply }, i16 0, i16 2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.92, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.93 = private unnamed_addr constant [26 x i8] c"window-resize-apply-total\00", align 1
@Swindow_resize_apply_total = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_resize_apply_total }, i16 0, i16 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.93, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.94 = private unnamed_addr constant [19 x i8] c"window-body-height\00", align 1
@Swindow_body_height = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_body_height }, i16 0, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.94, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.95 = private unnamed_addr constant [18 x i8] c"window-body-width\00", align 1
@Swindow_body_width = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_body_width }, i16 0, i16 2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.95, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.96 = private unnamed_addr constant [15 x i8] c"window-hscroll\00", align 1
@Swindow_hscroll = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_hscroll }, i16 0, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.96, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.97 = private unnamed_addr constant [19 x i8] c"set-window-hscroll\00", align 1
@Sset_window_hscroll = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_hscroll }, i16 2, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.97, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.98 = private unnamed_addr constant [29 x i8] c"window-redisplay-end-trigger\00", align 1
@Swindow_redisplay_end_trigger = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_redisplay_end_trigger }, i16 0, i16 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.98, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.99 = private unnamed_addr constant [33 x i8] c"set-window-redisplay-end-trigger\00", align 1
@Sset_window_redisplay_end_trigger = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_redisplay_end_trigger }, i16 2, i16 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.99, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.100 = private unnamed_addr constant [24 x i8] c"window-mode-line-height\00", align 1
@Swindow_mode_line_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_mode_line_height }, i16 0, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.100, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.101 = private unnamed_addr constant [26 x i8] c"window-header-line-height\00", align 1
@Swindow_header_line_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_header_line_height }, i16 0, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.101, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.102 = private unnamed_addr constant [27 x i8] c"window-right-divider-width\00", align 1
@Swindow_right_divider_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_right_divider_width }, i16 0, i16 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.102, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.103 = private unnamed_addr constant [28 x i8] c"window-bottom-divider-width\00", align 1
@Swindow_bottom_divider_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_bottom_divider_width }, i16 0, i16 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.103, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.104 = private unnamed_addr constant [24 x i8] c"window-scroll-bar-width\00", align 1
@Swindow_scroll_bar_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_scroll_bar_width }, i16 0, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.104, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.105 = private unnamed_addr constant [25 x i8] c"window-scroll-bar-height\00", align 1
@Swindow_scroll_bar_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_scroll_bar_height }, i16 0, i16 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.105, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.106 = private unnamed_addr constant [24 x i8] c"coordinates-in-window-p\00", align 1
@Scoordinates_in_window_p = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fcoordinates_in_window_p }, i16 2, i16 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.106, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.107 = private unnamed_addr constant [10 x i8] c"window-at\00", align 1
@Swindow_at = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fwindow_at }, i16 2, i16 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.108 = private unnamed_addr constant [13 x i8] c"window-point\00", align 1
@Swindow_point = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_point }, i16 0, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.108, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.109 = private unnamed_addr constant [17 x i8] c"window-old-point\00", align 1
@Swindow_old_point = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_old_point }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.110 = private unnamed_addr constant [13 x i8] c"window-start\00", align 1
@Swindow_start = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_start }, i16 0, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.111 = private unnamed_addr constant [11 x i8] c"window-end\00", align 1
@Swindow_end = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_end }, i16 0, i16 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.112 = private unnamed_addr constant [17 x i8] c"set-window-point\00", align 1
@Sset_window_point = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_point }, i16 2, i16 2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.112, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.113 = private unnamed_addr constant [17 x i8] c"set-window-start\00", align 1
@Sset_window_start = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_start }, i16 2, i16 3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.113, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.114 = private unnamed_addr constant [19 x i8] c"window-dedicated-p\00", align 1
@Swindow_dedicated_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_dedicated_p }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.115 = private unnamed_addr constant [23 x i8] c"set-window-dedicated-p\00", align 1
@Sset_window_dedicated_p = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_dedicated_p }, i16 2, i16 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.115, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.116 = private unnamed_addr constant [21 x i8] c"window-display-table\00", align 1
@Swindow_display_table = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_display_table }, i16 0, i16 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.116, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.117 = private unnamed_addr constant [25 x i8] c"set-window-display-table\00", align 1
@Sset_window_display_table = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_display_table }, i16 2, i16 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.117, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.118 = private unnamed_addr constant [12 x i8] c"next-window\00", align 1
@Snext_window = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fnext_window }, i16 0, i16 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.119 = private unnamed_addr constant [16 x i8] c"previous-window\00", align 1
@Sprevious_window = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fprevious_window }, i16 0, i16 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.119, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.120 = private unnamed_addr constant [30 x i8] c"window--sanitize-window-sizes\00", align 1
@Swindow__sanitize_window_sizes = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow__sanitize_window_sizes }, i16 2, i16 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.120, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.121 = private unnamed_addr constant [18 x i8] c"get-buffer-window\00", align 1
@Sget_buffer_window = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fget_buffer_window }, i16 0, i16 2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.121, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.122 = private unnamed_addr constant [30 x i8] c"delete-other-windows-internal\00", align 1
@.str.123 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@Sdelete_other_windows_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fdelete_other_windows_internal }, i16 0, i16 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.123, i32 0, i32 0), i8* null }, align 8
@.str.124 = private unnamed_addr constant [23 x i8] c"delete-window-internal\00", align 1
@Sdelete_window_internal = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fdelete_window_internal }, i16 1, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.124, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.125 = private unnamed_addr constant [28 x i8] c"resize-mini-window-internal\00", align 1
@Sresize_mini_window_internal = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fresize_mini_window_internal }, i16 1, i16 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.125, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.126 = private unnamed_addr constant [18 x i8] c"set-window-buffer\00", align 1
@Sset_window_buffer = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_buffer }, i16 2, i16 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.126, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.127 = private unnamed_addr constant [37 x i8] c"run-window-configuration-change-hook\00", align 1
@Srun_window_configuration_change_hook = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Frun_window_configuration_change_hook }, i16 0, i16 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.127, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.128 = private unnamed_addr constant [28 x i8] c"run-window-scroll-functions\00", align 1
@Srun_window_scroll_functions = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Frun_window_scroll_functions }, i16 0, i16 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.128, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.129 = private unnamed_addr constant [14 x i8] c"select-window\00", align 1
@Sselect_window = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fselect_window }, i16 1, i16 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.129, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.130 = private unnamed_addr constant [20 x i8] c"force-window-update\00", align 1
@Sforce_window_update = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fforce_window_update }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.130, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.131 = private unnamed_addr constant [22 x i8] c"split-window-internal\00", align 1
@Ssplit_window_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fsplit_window_internal }, i16 4, i16 4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.131, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.132 = private unnamed_addr constant [10 x i8] c"scroll-up\00", align 1
@.str.133 = private unnamed_addr constant [3 x i8] c"^P\00", align 1
@Sscroll_up = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fscroll_up }, i16 0, i16 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i8* null }, align 8
@.str.134 = private unnamed_addr constant [12 x i8] c"scroll-down\00", align 1
@Sscroll_down = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fscroll_down }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i8* null }, align 8
@.str.135 = private unnamed_addr constant [5 x i8] c"^P\0Ap\00", align 1
@Sscroll_left = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fscroll_left }, i16 0, i16 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0), i8* null }, align 8
@Sscroll_right = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fscroll_right }, i16 0, i16 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0), i8* null }, align 8
@.str.136 = private unnamed_addr constant [27 x i8] c"other-window-for-scrolling\00", align 1
@.str.137 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@Sscroll_other_window = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fscroll_other_window }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i32 0, i32 0), i8* null }, align 8
@.str.138 = private unnamed_addr constant [27 x i8] c"minibuffer-selected-window\00", align 1
@.str.139 = private unnamed_addr constant [9 x i8] c"recenter\00", align 1
@Srecenter = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Frecenter }, i16 0, i16 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i32 0, i32 0), i8* null }, align 8
@.str.140 = private unnamed_addr constant [18 x i8] c"window-text-width\00", align 1
@Swindow_text_width = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_text_width }, i16 0, i16 2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.140, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.141 = private unnamed_addr constant [19 x i8] c"window-text-height\00", align 1
@Swindow_text_height = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_text_height }, i16 0, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.141, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.142 = private unnamed_addr constant [20 x i8] c"move-to-window-line\00", align 1
@Smove_to_window_line = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fmove_to_window_line }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i32 0, i32 0), i8* null }, align 8
@.str.143 = private unnamed_addr constant [23 x i8] c"window-configuration-p\00", align 1
@Swindow_configuration_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_configuration_p }, i16 1, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.143, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.144 = private unnamed_addr constant [27 x i8] c"window-configuration-frame\00", align 1
@Swindow_configuration_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_configuration_frame }, i16 1, i16 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.144, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.145 = private unnamed_addr constant [25 x i8] c"set-window-configuration\00", align 1
@Sset_window_configuration = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_window_configuration }, i16 1, i16 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.145, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.146 = private unnamed_addr constant [29 x i8] c"current-window-configuration\00", align 1
@Scurrent_window_configuration = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcurrent_window_configuration }, i16 0, i16 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.146, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.147 = private unnamed_addr constant [19 x i8] c"set-window-margins\00", align 1
@Sset_window_margins = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_margins }, i16 2, i16 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.147, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.148 = private unnamed_addr constant [15 x i8] c"window-margins\00", align 1
@Swindow_margins = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_margins }, i16 0, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.148, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.149 = private unnamed_addr constant [19 x i8] c"set-window-fringes\00", align 1
@Sset_window_fringes = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fset_window_fringes }, i16 2, i16 4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.149, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.150 = private unnamed_addr constant [15 x i8] c"window-fringes\00", align 1
@Swindow_fringes = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_fringes }, i16 0, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.150, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.151 = private unnamed_addr constant [23 x i8] c"set-window-scroll-bars\00", align 1
@Sset_window_scroll_bars = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64, i64)* @Fset_window_scroll_bars }, i16 1, i16 5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.151, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.152 = private unnamed_addr constant [19 x i8] c"window-scroll-bars\00", align 1
@Swindow_scroll_bars = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_scroll_bars }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.152, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.153 = private unnamed_addr constant [15 x i8] c"window-vscroll\00", align 1
@Swindow_vscroll = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_vscroll }, i16 0, i16 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.153, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.154 = private unnamed_addr constant [19 x i8] c"set-window-vscroll\00", align 1
@Sset_window_vscroll = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_vscroll }, i16 2, i16 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.154, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.155 = private unnamed_addr constant [30 x i8] c"compare-window-configurations\00", align 1
@Scompare_window_configurations = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fcompare_window_configurations }, i16 2, i16 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.155, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.156 = private unnamed_addr constant [12 x i8] c"window-list\00", align 1
@Swindow_list = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fwindow_list }, i16 0, i16 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.156, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.157 = private unnamed_addr constant [14 x i8] c"window-list-1\00", align 1
@Swindow_list_1 = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fwindow_list_1 }, i16 0, i16 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.157, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.158 = private unnamed_addr constant [20 x i8] c"window-prev-buffers\00", align 1
@Swindow_prev_buffers = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_prev_buffers }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.158, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.159 = private unnamed_addr constant [24 x i8] c"set-window-prev-buffers\00", align 1
@Sset_window_prev_buffers = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_prev_buffers }, i16 2, i16 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.159, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.160 = private unnamed_addr constant [20 x i8] c"window-next-buffers\00", align 1
@Swindow_next_buffers = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_next_buffers }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.160, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.161 = private unnamed_addr constant [24 x i8] c"set-window-next-buffers\00", align 1
@Sset_window_next_buffers = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_window_next_buffers }, i16 2, i16 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.161, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.162 = private unnamed_addr constant [18 x i8] c"window-parameters\00", align 1
@Swindow_parameters = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_parameters }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.162, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.163 = private unnamed_addr constant [17 x i8] c"window-parameter\00", align 1
@Swindow_parameter = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fwindow_parameter }, i16 2, i16 2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.163, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.164 = private unnamed_addr constant [21 x i8] c"set-window-parameter\00", align 1
@Sset_window_parameter = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_window_parameter }, i16 3, i16 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.164, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define zeroext i1 @window_outdated(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %b = alloca %struct.buffer*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %1)
  store %struct.buffer* %call, %struct.buffer** %b, align 8
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %last_modified = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 41
  %3 = load i64, i64* %last_modified, align 8
  %4 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 73
  %5 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %5, i32 0, i32 6
  %6 = load i64, i64* %modiff, align 8
  %cmp = icmp slt i64 %3, %6
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %last_overlay_modified = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 42
  %8 = load i64, i64* %last_overlay_modified, align 8
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %overlay_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 9
  %11 = load i64, i64* %overlay_modiff, align 8
  %cmp2 = icmp slt i64 %8, %11
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  ret i1 %12
}

declare %struct.buffer* @XBUFFER(i64) #1

; Function Attrs: nounwind uwtable
define %struct.window* @decode_live_window(i64 %window) #0 {
entry:
  %retval = alloca %struct.window*, align 8
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %window.addr, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %3)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call4 = call zeroext i1 @BUFFERP(i64 %4)
  br i1 %call4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call5 = call i64 @builtin_lisp_symbol(i32 1027)
  %5 = load i64, i64* %window.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call5, i64 %5) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %8 = load i64, i64* %window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %8)
  store %struct.window* %call6, %struct.window** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %9 = load %struct.window*, %struct.window** %retval
  ret %struct.window* %9
}

declare i64 @builtin_lisp_symbol(i32) #1

declare %struct.window* @XWINDOW(i64) #1

declare zeroext i1 @WINDOWP(i64) #1

declare zeroext i1 @BUFFERP(i64) #1

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

; Function Attrs: nounwind uwtable
define %struct.window* @decode_any_window(i64 %window) #0 {
entry:
  %retval = alloca %struct.window*, align 8
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %window.addr, align 8
  call void @CHECK_WINDOW(i64 %2)
  %3 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %3)
  store %struct.window* %call2, %struct.window** %w, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  store %struct.window* %4, %struct.window** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.window*, %struct.window** %retval
  ret %struct.window* %5
}

declare void @CHECK_WINDOW(i64) #1

; Function Attrs: nounwind uwtable
define void @wset_buffer(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @adjust_window_count(%struct.window* %0, i32 -1)
  %1 = load i64, i64* %val.addr, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %val.addr, align 8
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  store i64 %2, i64* %contents, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @adjust_window_count(%struct.window* %4, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @adjust_window_count(%struct.window* %w, i32 %arg) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %arg.addr = alloca i32, align 4
  %b = alloca %struct.buffer*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %arg, i32* %arg.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents1, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  store %struct.buffer* %call2, %struct.buffer** %b, align 8
  %4 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 81
  %5 = load %struct.buffer*, %struct.buffer** %base_buffer, align 8
  %tobool = icmp ne %struct.buffer* %5, null
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %6 = load %struct.buffer*, %struct.buffer** %b, align 8
  %base_buffer4 = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 81
  %7 = load %struct.buffer*, %struct.buffer** %base_buffer4, align 8
  store %struct.buffer* %7, %struct.buffer** %b, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %8 = load i32, i32* %arg.addr, align 4
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %window_count = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 83
  %10 = load i32, i32* %window_count, align 4
  %add = add nsw i32 %10, %8
  store i32 %add, i32* %window_count, align 4
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 67
  %bf.load = load i16, i16* %window_end_valid, align 4
  %bf.clear = and i16 %bf.load, -8193
  store i16 %bf.clear, i16* %window_end_valid, align 4
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %base_line_pos = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 45
  store i64 0, i64* %base_line_pos, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fwindowp(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_valid_p(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_live_p(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_frame(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define internal %struct.window* @decode_valid_window(i64 %window) #0 {
entry:
  %retval = alloca %struct.window*, align 8
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %window.addr, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %3)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %4, %call4
  br i1 %cmp5, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call6 = call i64 @builtin_lisp_symbol(i32 1036)
  %5 = load i64, i64* %window.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call6, i64 %5) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %8 = load i64, i64* %window.addr, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %8)
  store %struct.window* %call7, %struct.window** %w, align 8
  %9 = load %struct.window*, %struct.window** %w, align 8
  store %struct.window* %9, %struct.window** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %10 = load %struct.window*, %struct.window** %retval
  ret %struct.window* %10
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_root_window(i64 %frame_or_window) #0 {
entry:
  %frame_or_window.addr = alloca i64, align 8
  %window = alloca i64, align 8
  store i64 %frame_or_window, i64* %frame_or_window.addr, align 8
  %0 = load i64, i64* %frame_or_window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %5, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %6 = load i64, i64* @selected_frame, align 8
  %sub3 = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub3 to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %cond = phi %struct.frame* [ %8, %cond.true ], [ null, %9 ]
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %cond, i32 0, i32 5
  %10 = load i64, i64* %root_window, align 8
  store i64 %10, i64* %window, align 8
  br label %if.end.25

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %frame_or_window.addr, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %11)
  br i1 %call4, label %land.lhs.true.5, label %if.else.13

land.lhs.true.5:                                  ; preds = %if.else
  %12 = load i64, i64* %frame_or_window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %12)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 10
  %13 = load i64, i64* %contents, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %13, %call7
  br i1 %cmp8, label %if.else.13, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.5
  %14 = load i64, i64* %frame_or_window.addr, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %14)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 1
  %15 = load i64, i64* %frame, align 8
  %sub11 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub11 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %root_window12 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 5
  %18 = load i64, i64* %root_window12, align 8
  store i64 %18, i64* %window, align 8
  br label %if.end

if.else.13:                                       ; preds = %land.lhs.true.5, %if.else
  %19 = load i64, i64* %frame_or_window.addr, align 8
  %call14 = call zeroext i1 @FRAMEP(i64 %19)
  br i1 %call14, label %land.lhs.true.15, label %cond.false.20

land.lhs.true.15:                                 ; preds = %if.else.13
  %20 = load i64, i64* %frame_or_window.addr, align 8
  %sub16 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub16 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %terminal17 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 61
  %23 = load %struct.terminal*, %struct.terminal** %terminal17, align 8
  %cmp18 = icmp ne %struct.terminal* %23, null
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %land.lhs.true.15
  br label %cond.end.22

cond.false.20:                                    ; preds = %land.lhs.true.15, %if.else.13
  %call21 = call i64 @builtin_lisp_symbol(i32 458)
  %24 = load i64, i64* %frame_or_window.addr, align 8
  %25 = call i64 @wrong_type_argument(i64 %call21, i64 %24) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.22

cond.end.22:                                      ; preds = %26, %cond.true.19
  %27 = load i64, i64* %frame_or_window.addr, align 8
  %sub23 = sub nsw i64 %27, 5
  %28 = inttoptr i64 %sub23 to i8*
  %29 = bitcast i8* %28 to %struct.frame*
  %root_window24 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 5
  %30 = load i64, i64* %root_window24, align 8
  store i64 %30, i64* %window, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end.22, %if.then.9
  br label %if.end.25

if.end.25:                                        ; preds = %if.end, %cond.end
  %31 = load i64, i64* %window, align 8
  ret i64 %31
}

declare zeroext i1 @FRAMEP(i64) #1

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define i64 @Fminibuffer_window(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 7
  %1 = load i64, i64* %minibuffer_window, align 8
  ret i64 %1
}

declare %struct.frame* @decode_live_frame(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_minibuffer_p(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_first_window(i64 %frame_or_window) #0 {
entry:
  %frame_or_window.addr = alloca i64, align 8
  %window = alloca i64, align 8
  store i64 %frame_or_window, i64* %frame_or_window.addr, align 8
  %0 = load i64, i64* %frame_or_window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %5, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %6 = load i64, i64* @selected_frame, align 8
  %sub3 = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub3 to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %cond = phi %struct.frame* [ %8, %cond.true ], [ null, %9 ]
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %cond, i32 0, i32 5
  %10 = load i64, i64* %root_window, align 8
  store i64 %10, i64* %window, align 8
  br label %if.end.25

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %frame_or_window.addr, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %11)
  br i1 %call4, label %land.lhs.true.5, label %if.else.13

land.lhs.true.5:                                  ; preds = %if.else
  %12 = load i64, i64* %frame_or_window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %12)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 10
  %13 = load i64, i64* %contents, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %13, %call7
  br i1 %cmp8, label %if.else.13, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.5
  %14 = load i64, i64* %frame_or_window.addr, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %14)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 1
  %15 = load i64, i64* %frame, align 8
  %sub11 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub11 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %root_window12 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 5
  %18 = load i64, i64* %root_window12, align 8
  store i64 %18, i64* %window, align 8
  br label %if.end

if.else.13:                                       ; preds = %land.lhs.true.5, %if.else
  %19 = load i64, i64* %frame_or_window.addr, align 8
  %call14 = call zeroext i1 @FRAMEP(i64 %19)
  br i1 %call14, label %land.lhs.true.15, label %cond.false.20

land.lhs.true.15:                                 ; preds = %if.else.13
  %20 = load i64, i64* %frame_or_window.addr, align 8
  %sub16 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub16 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %terminal17 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 61
  %23 = load %struct.terminal*, %struct.terminal** %terminal17, align 8
  %cmp18 = icmp ne %struct.terminal* %23, null
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %land.lhs.true.15
  br label %cond.end.22

cond.false.20:                                    ; preds = %land.lhs.true.15, %if.else.13
  %call21 = call i64 @builtin_lisp_symbol(i32 458)
  %24 = load i64, i64* %frame_or_window.addr, align 8
  %25 = call i64 @wrong_type_argument(i64 %call21, i64 %24) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.22

cond.end.22:                                      ; preds = %26, %cond.true.19
  %27 = load i64, i64* %frame_or_window.addr, align 8
  %sub23 = sub nsw i64 %27, 5
  %28 = inttoptr i64 %sub23 to i8*
  %29 = bitcast i8* %28 to %struct.frame*
  %root_window24 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 5
  %30 = load i64, i64* %root_window24, align 8
  store i64 %30, i64* %window, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end.22, %if.then.9
  br label %if.end.25

if.end.25:                                        ; preds = %if.end, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.25
  %31 = load i64, i64* %window, align 8
  %call26 = call %struct.window* @XWINDOW(i64 %31)
  %contents27 = getelementptr inbounds %struct.window, %struct.window* %call26, i32 0, i32 10
  %32 = load i64, i64* %contents27, align 8
  %call28 = call zeroext i1 @WINDOWP(i64 %32)
  br i1 %call28, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load i64, i64* %window, align 8
  %call29 = call %struct.window* @XWINDOW(i64 %33)
  %contents30 = getelementptr inbounds %struct.window, %struct.window* %call29, i32 0, i32 10
  %34 = load i64, i64* %contents30, align 8
  store i64 %34, i64* %window, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %35 = load i64, i64* %window, align 8
  ret i64 %35
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_selected_window(i64 %frame_or_window) #0 {
entry:
  %frame_or_window.addr = alloca i64, align 8
  %window = alloca i64, align 8
  store i64 %frame_or_window, i64* %frame_or_window.addr, align 8
  %0 = load i64, i64* %frame_or_window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %5, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %6 = load i64, i64* @selected_frame, align 8
  %sub3 = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub3 to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %cond = phi %struct.frame* [ %8, %cond.true ], [ null, %9 ]
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %cond, i32 0, i32 6
  %10 = load i64, i64* %selected_window, align 8
  store i64 %10, i64* %window, align 8
  br label %if.end.25

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %frame_or_window.addr, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %11)
  br i1 %call4, label %land.lhs.true.5, label %if.else.13

land.lhs.true.5:                                  ; preds = %if.else
  %12 = load i64, i64* %frame_or_window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %12)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 10
  %13 = load i64, i64* %contents, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %13, %call7
  br i1 %cmp8, label %if.else.13, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true.5
  %14 = load i64, i64* %frame_or_window.addr, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %14)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 1
  %15 = load i64, i64* %frame, align 8
  %sub11 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub11 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %selected_window12 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 6
  %18 = load i64, i64* %selected_window12, align 8
  store i64 %18, i64* %window, align 8
  br label %if.end

if.else.13:                                       ; preds = %land.lhs.true.5, %if.else
  %19 = load i64, i64* %frame_or_window.addr, align 8
  %call14 = call zeroext i1 @FRAMEP(i64 %19)
  br i1 %call14, label %land.lhs.true.15, label %cond.false.20

land.lhs.true.15:                                 ; preds = %if.else.13
  %20 = load i64, i64* %frame_or_window.addr, align 8
  %sub16 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub16 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %terminal17 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 61
  %23 = load %struct.terminal*, %struct.terminal** %terminal17, align 8
  %cmp18 = icmp ne %struct.terminal* %23, null
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %land.lhs.true.15
  br label %cond.end.22

cond.false.20:                                    ; preds = %land.lhs.true.15, %if.else.13
  %call21 = call i64 @builtin_lisp_symbol(i32 458)
  %24 = load i64, i64* %frame_or_window.addr, align 8
  %25 = call i64 @wrong_type_argument(i64 %call21, i64 %24) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.22

cond.end.22:                                      ; preds = %26, %cond.true.19
  %27 = load i64, i64* %frame_or_window.addr, align 8
  %sub23 = sub nsw i64 %27, 5
  %28 = inttoptr i64 %sub23 to i8*
  %29 = bitcast i8* %28 to %struct.frame*
  %selected_window24 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 6
  %30 = load i64, i64* %selected_window24, align 8
  store i64 %30, i64* %window, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end.22, %if.then.9
  br label %if.end.25

if.end.25:                                        ; preds = %if.end, %cond.end
  %31 = load i64, i64* %window, align 8
  ret i64 %31
}

; Function Attrs: nounwind uwtable
define i64 @Fset_frame_selected_window(i64 %frame, i64 %window, i64 %norecord) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %norecord.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %norecord, i64* %norecord.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %6, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call3 = call i64 @builtin_lisp_symbol(i32 458)
  %7 = load i64, i64* %frame.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call3, i64 %7) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %10 = load i64, i64* %window.addr, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %10)
  br i1 %call4, label %land.lhs.true.5, label %cond.false.9

land.lhs.true.5:                                  ; preds = %cond.end
  %11 = load i64, i64* %window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %11)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 10
  %12 = load i64, i64* %contents, align 8
  %call7 = call zeroext i1 @BUFFERP(i64 %12)
  br i1 %call7, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %land.lhs.true.5
  br label %cond.end.11

cond.false.9:                                     ; preds = %land.lhs.true.5, %cond.end
  %call10 = call i64 @builtin_lisp_symbol(i32 1027)
  %13 = load i64, i64* %window.addr, align 8
  %14 = call i64 @wrong_type_argument(i64 %call10, i64 %13) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.11

cond.end.11:                                      ; preds = %15, %cond.true.8
  %16 = load i64, i64* %frame.addr, align 8
  %17 = load i64, i64* %window.addr, align 8
  %call12 = call %struct.window* @XWINDOW(i64 %17)
  %frame13 = getelementptr inbounds %struct.window, %struct.window* %call12, i32 0, i32 1
  %18 = load i64, i64* %frame13, align 8
  %cmp14 = icmp eq i64 %16, %18
  br i1 %cmp14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %cond.end.11
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i32 0, i32 0)) #5
  unreachable

if.end.16:                                        ; preds = %cond.end.11
  %19 = load i64, i64* %frame.addr, align 8
  %20 = load i64, i64* @selected_frame, align 8
  %cmp17 = icmp eq i64 %19, %20
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.end.16
  %21 = load i64, i64* %window.addr, align 8
  %22 = load i64, i64* %norecord.addr, align 8
  %call19 = call i64 @Fselect_window(i64 %21, i64 %22)
  store i64 %call19, i64* %retval
  br label %return

if.else:                                          ; preds = %if.end.16
  %23 = load i64, i64* %frame.addr, align 8
  %sub20 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub20 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %26 = load i64, i64* %window.addr, align 8
  call void @fset_selected_window(%struct.frame* %25, i64 %26)
  %27 = load i64, i64* %window.addr, align 8
  store i64 %27, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.18
  %28 = load i64, i64* %retval
  ret i64 %28
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

; Function Attrs: nounwind uwtable
define i64 @Fselect_window(i64 %window, i64 %norecord) #0 {
entry:
  %window.addr = alloca i64, align 8
  %norecord.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %norecord, i64* %norecord.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %1 = load i64, i64* %norecord.addr, align 8
  %call = call i64 @select_window(i64 %0, i64 %1, i1 zeroext false)
  ret i64 %call
}

declare void @fset_selected_window(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fselected_window() #0 {
entry:
  %0 = load i64, i64* @selected_window, align 8
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal i64 @select_window(i64 %window, i64 %norecord, i1 zeroext %inhibit_point_swap) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %norecord.addr = alloca i64, align 8
  %inhibit_point_swap.addr = alloca i8, align 1
  %w = alloca %struct.window*, align 8
  %sf = alloca %struct.frame*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %norecord, i64* %norecord.addr, align 8
  %frombool = zext i1 %inhibit_point_swap to i8
  store i8 %frombool, i8* %inhibit_point_swap.addr, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 1027)
  %3 = load i64, i64* %window.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call3, i64 %3) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %window.addr, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %6)
  store %struct.window* %call4, %struct.window** %w, align 8
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents5, align 8
  %call6 = call i64 @Fset_buffer(i64 %8)
  %9 = load i64, i64* %window.addr, align 8
  %10 = load i64, i64* @selected_window, align 8
  %cmp = icmp eq i64 %9, %10
  br i1 %cmp, label %land.lhs.true.7, label %if.end

land.lhs.true.7:                                  ; preds = %cond.end
  %11 = load i8, i8* %inhibit_point_swap.addr, align 1
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.7
  br label %record_and_return

if.end:                                           ; preds = %land.lhs.true.7, %cond.end
  %12 = load i64, i64* %norecord.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %12, %call8
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %13 = load i64, i64* @selected_window, align 8
  %call11 = call %struct.window* @XWINDOW(i64 %13)
  call void @wset_redisplay(%struct.window* %call11)
  %14 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_redisplay(%struct.window* %14)
  br label %if.end.12

if.else:                                          ; preds = %if.end
  call void @redisplay_other_windows()
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  %15 = load i64, i64* @selected_frame, align 8
  %call13 = call zeroext i1 @FRAMEP(i64 %15)
  br i1 %call13, label %land.lhs.true.14, label %cond.false.18

land.lhs.true.14:                                 ; preds = %if.end.12
  %16 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 61
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp15 = icmp ne %struct.terminal* %19, null
  br i1 %cmp15, label %cond.true.16, label %cond.false.18

cond.true.16:                                     ; preds = %land.lhs.true.14
  %20 = load i64, i64* @selected_frame, align 8
  %sub17 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub17 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  br label %cond.end.19

cond.false.18:                                    ; preds = %land.lhs.true.14, %if.end.12
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.19

cond.end.19:                                      ; preds = %23, %cond.true.16
  %cond = phi %struct.frame* [ %22, %cond.true.16 ], [ null, %23 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %24 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 1
  %25 = load i64, i64* %frame, align 8
  %sub20 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub20 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  %28 = load %struct.frame*, %struct.frame** %sf, align 8
  %cmp21 = icmp ne %struct.frame* %27, %28
  br i1 %cmp21, label %if.then.22, label %if.else.27

if.then.22:                                       ; preds = %cond.end.19
  %29 = load %struct.window*, %struct.window** %w, align 8
  %frame23 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 1
  %30 = load i64, i64* %frame23, align 8
  %sub24 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub24 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %33 = load i64, i64* %window.addr, align 8
  call void @fset_selected_window(%struct.frame* %32, i64 %33)
  %34 = load %struct.window*, %struct.window** %w, align 8
  %frame25 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 1
  %35 = load i64, i64* %frame25, align 8
  %36 = load i64, i64* %norecord.addr, align 8
  %call26 = call i64 @Fselect_frame(i64 %35, i64 %36)
  %37 = load i64, i64* %window.addr, align 8
  store i64 %37, i64* %retval
  br label %return

if.else.27:                                       ; preds = %cond.end.19
  %38 = load %struct.frame*, %struct.frame** %sf, align 8
  %39 = load i64, i64* %window.addr, align 8
  call void @fset_selected_window(%struct.frame* %38, i64 %39)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.27
  %40 = load i64, i64* %window.addr, align 8
  %41 = load i8, i8* %inhibit_point_swap.addr, align 1
  %tobool29 = trunc i8 %41 to i1
  call void @select_window_1(i64 %40, i1 zeroext %tobool29)
  %42 = load %struct.window*, %struct.window** %w, align 8
  %contents30 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 10
  %43 = load i64, i64* %contents30, align 8
  %call31 = call %struct.buffer* @XBUFFER(i64 %43)
  %44 = load i64, i64* %window.addr, align 8
  call void @bset_last_selected_window(%struct.buffer* %call31, i64 %44)
  br label %record_and_return

record_and_return:                                ; preds = %if.end.28, %if.then
  %45 = load i64, i64* %norecord.addr, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %45, %call32
  br i1 %cmp33, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %record_and_return
  %46 = load i64, i64* @window_select_count, align 8
  %inc = add nsw i64 %46, 1
  store i64 %inc, i64* @window_select_count, align 8
  %47 = load %struct.window*, %struct.window** %w, align 8
  %use_time = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 28
  store i64 %inc, i64* %use_time, align 8
  %48 = load %struct.window*, %struct.window** %w, align 8
  %contents35 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 10
  %49 = load i64, i64* %contents35, align 8
  call void @record_buffer(i64 %49)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %record_and_return
  %50 = load i64, i64* %window.addr, align 8
  store i64 %50, i64* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.22
  %51 = load i64, i64* %retval
  ret i64 %51
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_buffer(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_any_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents2, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_parent(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %parent = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 4
  %1 = load i64, i64* %parent, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_top_child(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.window*, %struct.window** %w, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents2, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_left_child(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.window*, %struct.window** %w, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents2, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_next_sibling(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %next = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 2
  %1 = load i64, i64* %next, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_prev_sibling(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %prev = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 3
  %1 = load i64, i64* %prev, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_combination_limit(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 1036)
  %3 = load i64, i64* %window.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call3, i64 %3) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %window.addr, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %6)
  store %struct.window* %call4, %struct.window** %w, align 8
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents5, align 8
  %call6 = call zeroext i1 @BUFFERP(i64 %8)
  br i1 %call6, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %cond.end
  %9 = load %struct.window*, %struct.window** %w, align 8
  %combination_limit = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 22
  %10 = load i64, i64* %combination_limit, align 8
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_combination_limit(i64 %window, i64 %limit) #0 {
entry:
  %window.addr = alloca i64, align 8
  %limit.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %limit, i64* %limit.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 1036)
  %3 = load i64, i64* %window.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call3, i64 %3) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %window.addr, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %6)
  store %struct.window* %call4, %struct.window** %w, align 8
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents5, align 8
  %call6 = call zeroext i1 @BUFFERP(i64 %8)
  br i1 %call6, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %cond.end
  %9 = load %struct.window*, %struct.window** %w, align 8
  %10 = load i64, i64* %limit.addr, align 8
  call void @wset_combination_limit(%struct.window* %9, i64 %10)
  %11 = load i64, i64* %limit.addr, align 8
  ret i64 %11
}

; Function Attrs: nounwind uwtable
define internal void @wset_combination_limit(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %combination_limit = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 22
  store i64 %0, i64* %combination_limit, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_use_time(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %use_time = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 28
  %1 = load i64, i64* %use_time, align 8
  %shl = shl i64 %1, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_pixel_width(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 34
  %1 = load i32, i32* %pixel_width, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_pixel_height(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 35
  %1 = load i32, i32* %pixel_height, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_total_height(i64 %window, i64 %round) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %round.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %unit = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i64 %round, i64* %round.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %round.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 436)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %round.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 250)
  %cmp3 = icmp eq i64 %2, %call2
  br i1 %cmp3, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 37
  %4 = load i32, i32* %total_lines, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 1
  %6 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 60
  %9 = load i32, i32* %line_height, align 4
  store i32 %9, i32* %unit, align 4
  %10 = load i64, i64* %round.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 250)
  %cmp5 = icmp eq i64 %10, %call4
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %11 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 35
  %12 = load i32, i32* %pixel_height, align 4
  %13 = load i32, i32* %unit, align 4
  %add7 = add nsw i32 %12, %13
  %sub8 = sub nsw i32 %add7, 1
  %14 = load i32, i32* %unit, align 4
  %div = sdiv i32 %sub8, %14
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %15 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height9 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 35
  %16 = load i32, i32* %pixel_height9, align 4
  %17 = load i32, i32* %unit, align 4
  %div10 = sdiv i32 %16, %17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %div10, %cond.false ]
  %conv11 = sext i32 %cond to i64
  %shl12 = shl i64 %conv11, 2
  %add13 = add i64 %shl12, 2
  store i64 %add13, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %18 = load i64, i64* %retval
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_total_width(i64 %window, i64 %round) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %round.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %unit = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i64 %round, i64* %round.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %round.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 436)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %round.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 250)
  %cmp3 = icmp eq i64 %2, %call2
  br i1 %cmp3, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.window*, %struct.window** %w, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 36
  %4 = load i32, i32* %total_cols, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 1
  %6 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 59
  %9 = load i32, i32* %column_width, align 4
  store i32 %9, i32* %unit, align 4
  %10 = load i64, i64* %round.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 250)
  %cmp5 = icmp eq i64 %10, %call4
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %11 = load %struct.window*, %struct.window** %w, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 34
  %12 = load i32, i32* %pixel_width, align 4
  %13 = load i32, i32* %unit, align 4
  %add7 = add nsw i32 %12, %13
  %sub8 = sub nsw i32 %add7, 1
  %14 = load i32, i32* %unit, align 4
  %div = sdiv i32 %sub8, %14
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %15 = load %struct.window*, %struct.window** %w, align 8
  %pixel_width9 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 34
  %16 = load i32, i32* %pixel_width9, align 4
  %17 = load i32, i32* %unit, align 4
  %div10 = sdiv i32 %16, %17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %div10, %cond.false ]
  %conv11 = sext i32 %cond to i64
  %shl12 = shl i64 %conv11, 2
  %add13 = add i64 %shl12, 2
  store i64 %add13, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %18 = load i64, i64* %retval
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_new_total(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %new_total = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 7
  %1 = load i64, i64* %new_total, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_normal_size(i64 %window, i64 %horizontal) #0 {
entry:
  %window.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %horizontal.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 5
  %3 = load i64, i64* %normal_lines, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 6
  %5 = load i64, i64* %normal_cols, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %5, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_new_normal(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %new_normal = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 8
  %1 = load i64, i64* %new_normal, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_new_pixel(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 9
  %1 = load i64, i64* %new_pixel, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_pixel_left(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 30
  %1 = load i32, i32* %pixel_left, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_pixel_top(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 31
  %1 = load i32, i32* %pixel_top, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_left_column(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %left_col = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 32
  %1 = load i32, i32* %left_col, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_top_line(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %top_line = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 33
  %1 = load i32, i32* %top_line, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i32 @window_body_width(%struct.window* %w, i1 zeroext %pixelwise) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %pixelwise.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %width = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %pixelwise to i8
  store i8 %frombool, i8* %pixelwise.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 34
  %5 = load i32, i32* %pixel_width, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 30
  %7 = load i32, i32* %pixel_left, align 4
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 34
  %9 = load i32, i32* %pixel_width1, align 4
  %add = add nsw i32 %7, %9
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame2 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 1
  %11 = load i64, i64* %frame2, align 8
  %sub3 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 5
  %14 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %14)
  %pixel_left4 = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 30
  %15 = load i32, i32* %pixel_left4, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame5 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 1
  %17 = load i64, i64* %frame5, align 8
  %sub6 = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub6 to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %root_window7 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 5
  %20 = load i64, i64* %root_window7, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %20)
  %pixel_width9 = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 34
  %21 = load i32, i32* %pixel_width9, align 4
  %add10 = add nsw i32 %15, %21
  %cmp = icmp eq i32 %add, %add10
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame11 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 1
  %24 = load i64, i64* %frame11, align 8
  %sub12 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub12 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 52
  %27 = load i32, i32* %right_divider_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %27, %cond.false ]
  %sub13 = sub nsw i32 %5, %cond
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 67
  %bf.load14 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load14, 11
  %bf.clear15 = and i16 %bf.lshr, 1
  %bf.cast16 = trunc i16 %bf.clear15 to i1
  br i1 %bf.cast16, label %cond.true.17, label %cond.false.18

cond.true.17:                                     ; preds = %cond.end
  br label %cond.end.43

cond.false.18:                                    ; preds = %cond.end
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 16
  %30 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp20 = icmp eq i64 %30, %call19
  br i1 %cmp20, label %cond.true.21, label %cond.false.29

cond.true.21:                                     ; preds = %cond.false.18
  %31 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame22 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 1
  %32 = load i64, i64* %frame22, align 8
  %sub23 = sub nsw i64 %32, 5
  %33 = inttoptr i64 %sub23 to i8*
  %34 = bitcast i8* %33 to %struct.frame*
  %vertical_scroll_bar_type24 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 26
  %35 = bitcast i48* %vertical_scroll_bar_type24 to i64*
  %bf.load25 = load i64, i64* %35, align 8
  %bf.lshr26 = lshr i64 %bf.load25, 30
  %bf.clear27 = and i64 %bf.lshr26, 3
  %bf.cast28 = trunc i64 %bf.clear27 to i32
  br label %cond.end.41

cond.false.29:                                    ; preds = %cond.false.18
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type30 = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 16
  %37 = load i64, i64* %vertical_scroll_bar_type30, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp32 = icmp eq i64 %37, %call31
  br i1 %cmp32, label %cond.true.33, label %cond.false.34

cond.true.33:                                     ; preds = %cond.false.29
  br label %cond.end.39

cond.false.34:                                    ; preds = %cond.false.29
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type35 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 16
  %39 = load i64, i64* %vertical_scroll_bar_type35, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp37 = icmp eq i64 %39, %call36
  %cond38 = select i1 %cmp37, i32 2, i32 0
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.34, %cond.true.33
  %cond40 = phi i32 [ 1, %cond.true.33 ], [ %cond38, %cond.false.34 ]
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.end.39, %cond.true.21
  %cond42 = phi i32 [ %bf.cast28, %cond.true.21 ], [ %cond40, %cond.end.39 ]
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.end.41, %cond.true.17
  %cond44 = phi i32 [ 0, %cond.true.17 ], [ %cond42, %cond.end.41 ]
  %cmp45 = icmp eq i32 %cond44, 1
  br i1 %cmp45, label %cond.true.82, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %cond.end.43
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p47 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 67
  %bf.load48 = load i16, i16* %pseudo_window_p47, align 4
  %bf.lshr49 = lshr i16 %bf.load48, 11
  %bf.clear50 = and i16 %bf.lshr49, 1
  %bf.cast51 = trunc i16 %bf.clear50 to i1
  br i1 %bf.cast51, label %cond.true.52, label %cond.false.53

cond.true.52:                                     ; preds = %lor.lhs.false.46
  br label %cond.end.79

cond.false.53:                                    ; preds = %lor.lhs.false.46
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type54 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 16
  %42 = load i64, i64* %vertical_scroll_bar_type54, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp56 = icmp eq i64 %42, %call55
  br i1 %cmp56, label %cond.true.57, label %cond.false.65

cond.true.57:                                     ; preds = %cond.false.53
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame58 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 1
  %44 = load i64, i64* %frame58, align 8
  %sub59 = sub nsw i64 %44, 5
  %45 = inttoptr i64 %sub59 to i8*
  %46 = bitcast i8* %45 to %struct.frame*
  %vertical_scroll_bar_type60 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 26
  %47 = bitcast i48* %vertical_scroll_bar_type60 to i64*
  %bf.load61 = load i64, i64* %47, align 8
  %bf.lshr62 = lshr i64 %bf.load61, 30
  %bf.clear63 = and i64 %bf.lshr62, 3
  %bf.cast64 = trunc i64 %bf.clear63 to i32
  br label %cond.end.77

cond.false.65:                                    ; preds = %cond.false.53
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type66 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 16
  %49 = load i64, i64* %vertical_scroll_bar_type66, align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp68 = icmp eq i64 %49, %call67
  br i1 %cmp68, label %cond.true.69, label %cond.false.70

cond.true.69:                                     ; preds = %cond.false.65
  br label %cond.end.75

cond.false.70:                                    ; preds = %cond.false.65
  %50 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type71 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 16
  %51 = load i64, i64* %vertical_scroll_bar_type71, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp73 = icmp eq i64 %51, %call72
  %cond74 = select i1 %cmp73, i32 2, i32 0
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.70, %cond.true.69
  %cond76 = phi i32 [ 1, %cond.true.69 ], [ %cond74, %cond.false.70 ]
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.end.75, %cond.true.57
  %cond78 = phi i32 [ %bf.cast64, %cond.true.57 ], [ %cond76, %cond.end.75 ]
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.end.77, %cond.true.52
  %cond80 = phi i32 [ 0, %cond.true.52 ], [ %cond78, %cond.end.77 ]
  %cmp81 = icmp eq i32 %cond80, 2
  br i1 %cmp81, label %cond.true.82, label %cond.false.166

cond.true.82:                                     ; preds = %cond.end.79, %cond.end.43
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p83 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 67
  %bf.load84 = load i16, i16* %pseudo_window_p83, align 4
  %bf.lshr85 = lshr i16 %bf.load84, 11
  %bf.clear86 = and i16 %bf.lshr85, 1
  %bf.cast87 = trunc i16 %bf.clear86 to i1
  br i1 %bf.cast87, label %cond.true.88, label %cond.false.89

cond.true.88:                                     ; preds = %cond.true.82
  br label %cond.end.115

cond.false.89:                                    ; preds = %cond.true.82
  %53 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type90 = getelementptr inbounds %struct.window, %struct.window* %53, i32 0, i32 16
  %54 = load i64, i64* %vertical_scroll_bar_type90, align 8
  %call91 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp92 = icmp eq i64 %54, %call91
  br i1 %cmp92, label %cond.true.93, label %cond.false.101

cond.true.93:                                     ; preds = %cond.false.89
  %55 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame94 = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 1
  %56 = load i64, i64* %frame94, align 8
  %sub95 = sub nsw i64 %56, 5
  %57 = inttoptr i64 %sub95 to i8*
  %58 = bitcast i8* %57 to %struct.frame*
  %vertical_scroll_bar_type96 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 26
  %59 = bitcast i48* %vertical_scroll_bar_type96 to i64*
  %bf.load97 = load i64, i64* %59, align 8
  %bf.lshr98 = lshr i64 %bf.load97, 30
  %bf.clear99 = and i64 %bf.lshr98, 3
  %bf.cast100 = trunc i64 %bf.clear99 to i32
  br label %cond.end.113

cond.false.101:                                   ; preds = %cond.false.89
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type102 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 16
  %61 = load i64, i64* %vertical_scroll_bar_type102, align 8
  %call103 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp104 = icmp eq i64 %61, %call103
  br i1 %cmp104, label %cond.true.105, label %cond.false.106

cond.true.105:                                    ; preds = %cond.false.101
  br label %cond.end.111

cond.false.106:                                   ; preds = %cond.false.101
  %62 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type107 = getelementptr inbounds %struct.window, %struct.window* %62, i32 0, i32 16
  %63 = load i64, i64* %vertical_scroll_bar_type107, align 8
  %call108 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp109 = icmp eq i64 %63, %call108
  %cond110 = select i1 %cmp109, i32 2, i32 0
  br label %cond.end.111

cond.end.111:                                     ; preds = %cond.false.106, %cond.true.105
  %cond112 = phi i32 [ 1, %cond.true.105 ], [ %cond110, %cond.false.106 ]
  br label %cond.end.113

cond.end.113:                                     ; preds = %cond.end.111, %cond.true.93
  %cond114 = phi i32 [ %bf.cast100, %cond.true.93 ], [ %cond112, %cond.end.111 ]
  br label %cond.end.115

cond.end.115:                                     ; preds = %cond.end.113, %cond.true.88
  %cond116 = phi i32 [ 0, %cond.true.88 ], [ %cond114, %cond.end.113 ]
  %cmp117 = icmp eq i32 %cond116, 1
  br i1 %cmp117, label %cond.true.154, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %cond.end.115
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p119 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 67
  %bf.load120 = load i16, i16* %pseudo_window_p119, align 4
  %bf.lshr121 = lshr i16 %bf.load120, 11
  %bf.clear122 = and i16 %bf.lshr121, 1
  %bf.cast123 = trunc i16 %bf.clear122 to i1
  br i1 %bf.cast123, label %cond.true.124, label %cond.false.125

cond.true.124:                                    ; preds = %lor.lhs.false.118
  br label %cond.end.151

cond.false.125:                                   ; preds = %lor.lhs.false.118
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type126 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 16
  %66 = load i64, i64* %vertical_scroll_bar_type126, align 8
  %call127 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp128 = icmp eq i64 %66, %call127
  br i1 %cmp128, label %cond.true.129, label %cond.false.137

cond.true.129:                                    ; preds = %cond.false.125
  %67 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame130 = getelementptr inbounds %struct.window, %struct.window* %67, i32 0, i32 1
  %68 = load i64, i64* %frame130, align 8
  %sub131 = sub nsw i64 %68, 5
  %69 = inttoptr i64 %sub131 to i8*
  %70 = bitcast i8* %69 to %struct.frame*
  %vertical_scroll_bar_type132 = getelementptr inbounds %struct.frame, %struct.frame* %70, i32 0, i32 26
  %71 = bitcast i48* %vertical_scroll_bar_type132 to i64*
  %bf.load133 = load i64, i64* %71, align 8
  %bf.lshr134 = lshr i64 %bf.load133, 30
  %bf.clear135 = and i64 %bf.lshr134, 3
  %bf.cast136 = trunc i64 %bf.clear135 to i32
  br label %cond.end.149

cond.false.137:                                   ; preds = %cond.false.125
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type138 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 16
  %73 = load i64, i64* %vertical_scroll_bar_type138, align 8
  %call139 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp140 = icmp eq i64 %73, %call139
  br i1 %cmp140, label %cond.true.141, label %cond.false.142

cond.true.141:                                    ; preds = %cond.false.137
  br label %cond.end.147

cond.false.142:                                   ; preds = %cond.false.137
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type143 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 16
  %75 = load i64, i64* %vertical_scroll_bar_type143, align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp145 = icmp eq i64 %75, %call144
  %cond146 = select i1 %cmp145, i32 2, i32 0
  br label %cond.end.147

cond.end.147:                                     ; preds = %cond.false.142, %cond.true.141
  %cond148 = phi i32 [ 1, %cond.true.141 ], [ %cond146, %cond.false.142 ]
  br label %cond.end.149

cond.end.149:                                     ; preds = %cond.end.147, %cond.true.129
  %cond150 = phi i32 [ %bf.cast136, %cond.true.129 ], [ %cond148, %cond.end.147 ]
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.end.149, %cond.true.124
  %cond152 = phi i32 [ 0, %cond.true.124 ], [ %cond150, %cond.end.149 ]
  %cmp153 = icmp eq i32 %cond152, 2
  br i1 %cmp153, label %cond.true.154, label %cond.false.163

cond.true.154:                                    ; preds = %cond.end.151, %cond.end.115
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 61
  %77 = load i32, i32* %scroll_bar_width, align 4
  %cmp155 = icmp sge i32 %77, 0
  br i1 %cmp155, label %cond.true.156, label %cond.false.158

cond.true.156:                                    ; preds = %cond.true.154
  %78 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width157 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 61
  %79 = load i32, i32* %scroll_bar_width157, align 4
  br label %cond.end.161

cond.false.158:                                   ; preds = %cond.true.154
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame159 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 1
  %81 = load i64, i64* %frame159, align 8
  %sub160 = sub nsw i64 %81, 5
  %82 = inttoptr i64 %sub160 to i8*
  %83 = bitcast i8* %82 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 69
  %84 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.158, %cond.true.156
  %cond162 = phi i32 [ %79, %cond.true.156 ], [ %84, %cond.false.158 ]
  br label %cond.end.164

cond.false.163:                                   ; preds = %cond.end.151
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.false.163, %cond.end.161
  %cond165 = phi i32 [ %cond162, %cond.end.161 ], [ 0, %cond.false.163 ]
  br label %cond.end.214

cond.false.166:                                   ; preds = %cond.end.79
  %85 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 26
  %86 = bitcast i48* %output_method to i64*
  %bf.load167 = load i64, i64* %86, align 8
  %bf.lshr168 = lshr i64 %bf.load167, 23
  %bf.clear169 = and i64 %bf.lshr168, 7
  %bf.cast170 = trunc i64 %bf.clear169 to i32
  %cmp171 = icmp eq i32 %bf.cast170, 2
  br i1 %cmp171, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false.166
  %87 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left172 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 30
  %88 = load i32, i32* %pixel_left172, align 4
  %89 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width173 = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 34
  %90 = load i32, i32* %pixel_width173, align 4
  %add174 = add nsw i32 %88, %90
  %91 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame175 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 1
  %92 = load i64, i64* %frame175, align 8
  %sub176 = sub nsw i64 %92, 5
  %93 = inttoptr i64 %sub176 to i8*
  %94 = bitcast i8* %93 to %struct.frame*
  %root_window177 = getelementptr inbounds %struct.frame, %struct.frame* %94, i32 0, i32 5
  %95 = load i64, i64* %root_window177, align 8
  %call178 = call %struct.window* @XWINDOW(i64 %95)
  %pixel_left179 = getelementptr inbounds %struct.window, %struct.window* %call178, i32 0, i32 30
  %96 = load i32, i32* %pixel_left179, align 4
  %97 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame180 = getelementptr inbounds %struct.window, %struct.window* %97, i32 0, i32 1
  %98 = load i64, i64* %frame180, align 8
  %sub181 = sub nsw i64 %98, 5
  %99 = inttoptr i64 %sub181 to i8*
  %100 = bitcast i8* %99 to %struct.frame*
  %root_window182 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 5
  %101 = load i64, i64* %root_window182, align 8
  %call183 = call %struct.window* @XWINDOW(i64 %101)
  %pixel_width184 = getelementptr inbounds %struct.window, %struct.window* %call183, i32 0, i32 34
  %102 = load i32, i32* %pixel_width184, align 4
  %add185 = add nsw i32 %96, %102
  %cmp186 = icmp eq i32 %add174, %add185
  br i1 %cmp186, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %103 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left187 = getelementptr inbounds %struct.window, %struct.window* %103, i32 0, i32 30
  %104 = load i32, i32* %pixel_left187, align 4
  %105 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width188 = getelementptr inbounds %struct.window, %struct.window* %105, i32 0, i32 34
  %106 = load i32, i32* %pixel_width188, align 4
  %add189 = add nsw i32 %104, %106
  %107 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame190 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 1
  %108 = load i64, i64* %frame190, align 8
  %sub191 = sub nsw i64 %108, 5
  %109 = inttoptr i64 %sub191 to i8*
  %110 = bitcast i8* %109 to %struct.frame*
  %root_window192 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 5
  %111 = load i64, i64* %root_window192, align 8
  %call193 = call %struct.window* @XWINDOW(i64 %111)
  %pixel_left194 = getelementptr inbounds %struct.window, %struct.window* %call193, i32 0, i32 30
  %112 = load i32, i32* %pixel_left194, align 4
  %113 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame195 = getelementptr inbounds %struct.window, %struct.window* %113, i32 0, i32 1
  %114 = load i64, i64* %frame195, align 8
  %sub196 = sub nsw i64 %114, 5
  %115 = inttoptr i64 %sub196 to i8*
  %116 = bitcast i8* %115 to %struct.frame*
  %root_window197 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 5
  %117 = load i64, i64* %root_window197, align 8
  %call198 = call %struct.window* @XWINDOW(i64 %117)
  %pixel_width199 = getelementptr inbounds %struct.window, %struct.window* %call198, i32 0, i32 34
  %118 = load i32, i32* %pixel_width199, align 4
  %add200 = add nsw i32 %112, %118
  %cmp201 = icmp eq i32 %add189, %add200
  br i1 %cmp201, label %cond.true.207, label %lor.lhs.false.202

lor.lhs.false.202:                                ; preds = %land.rhs
  %119 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini203 = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 67
  %bf.load204 = load i16, i16* %mini203, align 4
  %bf.clear205 = and i16 %bf.load204, 1
  %bf.cast206 = trunc i16 %bf.clear205 to i1
  br i1 %bf.cast206, label %cond.true.207, label %cond.false.208

cond.true.207:                                    ; preds = %lor.lhs.false.202, %land.rhs
  br label %cond.end.212

cond.false.208:                                   ; preds = %lor.lhs.false.202
  %120 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame209 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 1
  %121 = load i64, i64* %frame209, align 8
  %sub210 = sub nsw i64 %121, 5
  %122 = inttoptr i64 %sub210 to i8*
  %123 = bitcast i8* %122 to %struct.frame*
  %right_divider_width211 = getelementptr inbounds %struct.frame, %struct.frame* %123, i32 0, i32 52
  %124 = load i32, i32* %right_divider_width211, align 4
  br label %cond.end.212

cond.end.212:                                     ; preds = %cond.false.208, %cond.true.207
  %cond213 = phi i32 [ 0, %cond.true.207 ], [ %124, %cond.false.208 ]
  %tobool = icmp ne i32 %cond213, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %cond.end.212, %land.lhs.true, %cond.false.166
  %125 = phi i1 [ false, %land.lhs.true ], [ false, %cond.false.166 ], [ %lnot, %cond.end.212 ]
  %land.ext = zext i1 %125 to i32
  br label %cond.end.214

cond.end.214:                                     ; preds = %land.end, %cond.end.164
  %cond215 = phi i32 [ %cond165, %cond.end.164 ], [ %land.ext, %land.end ]
  %sub216 = sub nsw i32 %sub13, %cond215
  %126 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 59
  %127 = load i32, i32* %left_margin_cols, align 4
  %128 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame217 = getelementptr inbounds %struct.window, %struct.window* %128, i32 0, i32 1
  %129 = load i64, i64* %frame217, align 8
  %sub218 = sub nsw i64 %129, 5
  %130 = inttoptr i64 %sub218 to i8*
  %131 = bitcast i8* %130 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %131, i32 0, i32 59
  %132 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %127, %132
  %133 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %133, i32 0, i32 60
  %134 = load i32, i32* %right_margin_cols, align 4
  %135 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame219 = getelementptr inbounds %struct.window, %struct.window* %135, i32 0, i32 1
  %136 = load i64, i64* %frame219, align 8
  %sub220 = sub nsw i64 %136, 5
  %137 = inttoptr i64 %sub220 to i8*
  %138 = bitcast i8* %137 to %struct.frame*
  %column_width221 = getelementptr inbounds %struct.frame, %struct.frame* %138, i32 0, i32 59
  %139 = load i32, i32* %column_width221, align 4
  %mul222 = mul nsw i32 %134, %139
  %add223 = add nsw i32 %mul, %mul222
  %sub224 = sub nsw i32 %sub216, %add223
  %140 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method225 = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 26
  %141 = bitcast i48* %output_method225 to i64*
  %bf.load226 = load i64, i64* %141, align 8
  %bf.lshr227 = lshr i64 %bf.load226, 23
  %bf.clear228 = and i64 %bf.lshr227, 7
  %bf.cast229 = trunc i64 %bf.clear228 to i32
  %cmp230 = icmp eq i32 %bf.cast229, 2
  br i1 %cmp230, label %cond.true.231, label %cond.false.251

cond.true.231:                                    ; preds = %cond.end.214
  %142 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %142, i32 0, i32 57
  %143 = load i32, i32* %left_fringe_width, align 4
  %cmp232 = icmp sge i32 %143, 0
  br i1 %cmp232, label %cond.true.233, label %cond.false.235

cond.true.233:                                    ; preds = %cond.true.231
  %144 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width234 = getelementptr inbounds %struct.window, %struct.window* %144, i32 0, i32 57
  %145 = load i32, i32* %left_fringe_width234, align 4
  br label %cond.end.239

cond.false.235:                                   ; preds = %cond.true.231
  %146 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame236 = getelementptr inbounds %struct.window, %struct.window* %146, i32 0, i32 1
  %147 = load i64, i64* %frame236, align 8
  %sub237 = sub nsw i64 %147, 5
  %148 = inttoptr i64 %sub237 to i8*
  %149 = bitcast i8* %148 to %struct.frame*
  %left_fringe_width238 = getelementptr inbounds %struct.frame, %struct.frame* %149, i32 0, i32 54
  %150 = load i32, i32* %left_fringe_width238, align 4
  br label %cond.end.239

cond.end.239:                                     ; preds = %cond.false.235, %cond.true.233
  %cond240 = phi i32 [ %145, %cond.true.233 ], [ %150, %cond.false.235 ]
  %151 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %151, i32 0, i32 58
  %152 = load i32, i32* %right_fringe_width, align 4
  %cmp241 = icmp sge i32 %152, 0
  br i1 %cmp241, label %cond.true.242, label %cond.false.244

cond.true.242:                                    ; preds = %cond.end.239
  %153 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width243 = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 58
  %154 = load i32, i32* %right_fringe_width243, align 4
  br label %cond.end.248

cond.false.244:                                   ; preds = %cond.end.239
  %155 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame245 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 1
  %156 = load i64, i64* %frame245, align 8
  %sub246 = sub nsw i64 %156, 5
  %157 = inttoptr i64 %sub246 to i8*
  %158 = bitcast i8* %157 to %struct.frame*
  %right_fringe_width247 = getelementptr inbounds %struct.frame, %struct.frame* %158, i32 0, i32 55
  %159 = load i32, i32* %right_fringe_width247, align 4
  br label %cond.end.248

cond.end.248:                                     ; preds = %cond.false.244, %cond.true.242
  %cond249 = phi i32 [ %154, %cond.true.242 ], [ %159, %cond.false.244 ]
  %add250 = add nsw i32 %cond240, %cond249
  br label %cond.end.252

cond.false.251:                                   ; preds = %cond.end.214
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.false.251, %cond.end.248
  %cond253 = phi i32 [ %add250, %cond.end.248 ], [ 0, %cond.false.251 ]
  %sub254 = sub nsw i32 %sub224, %cond253
  store i32 %sub254, i32* %width, align 4
  %160 = load i8, i8* %pixelwise.addr, align 1
  %tobool255 = trunc i8 %160 to i1
  br i1 %tobool255, label %cond.true.256, label %cond.false.257

cond.true.256:                                    ; preds = %cond.end.252
  %161 = load i32, i32* %width, align 4
  br label %cond.end.261

cond.false.257:                                   ; preds = %cond.end.252
  %162 = load i32, i32* %width, align 4
  %163 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame258 = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 1
  %164 = load i64, i64* %frame258, align 8
  %sub259 = sub nsw i64 %164, 5
  %165 = inttoptr i64 %sub259 to i8*
  %166 = bitcast i8* %165 to %struct.frame*
  %column_width260 = getelementptr inbounds %struct.frame, %struct.frame* %166, i32 0, i32 59
  %167 = load i32, i32* %column_width260, align 4
  %div = sdiv i32 %162, %167
  br label %cond.end.261

cond.end.261:                                     ; preds = %cond.false.257, %cond.true.256
  %cond262 = phi i32 [ %161, %cond.true.256 ], [ %div, %cond.false.257 ]
  %cmp263 = icmp sgt i32 %cond262, 0
  br i1 %cmp263, label %cond.true.264, label %cond.false.274

cond.true.264:                                    ; preds = %cond.end.261
  %168 = load i8, i8* %pixelwise.addr, align 1
  %tobool265 = trunc i8 %168 to i1
  br i1 %tobool265, label %cond.true.266, label %cond.false.267

cond.true.266:                                    ; preds = %cond.true.264
  %169 = load i32, i32* %width, align 4
  br label %cond.end.272

cond.false.267:                                   ; preds = %cond.true.264
  %170 = load i32, i32* %width, align 4
  %171 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame268 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 1
  %172 = load i64, i64* %frame268, align 8
  %sub269 = sub nsw i64 %172, 5
  %173 = inttoptr i64 %sub269 to i8*
  %174 = bitcast i8* %173 to %struct.frame*
  %column_width270 = getelementptr inbounds %struct.frame, %struct.frame* %174, i32 0, i32 59
  %175 = load i32, i32* %column_width270, align 4
  %div271 = sdiv i32 %170, %175
  br label %cond.end.272

cond.end.272:                                     ; preds = %cond.false.267, %cond.true.266
  %cond273 = phi i32 [ %169, %cond.true.266 ], [ %div271, %cond.false.267 ]
  br label %cond.end.275

cond.false.274:                                   ; preds = %cond.end.261
  br label %cond.end.275

cond.end.275:                                     ; preds = %cond.false.274, %cond.end.272
  %cond276 = phi i32 [ %cond273, %cond.end.272 ], [ 0, %cond.false.274 ]
  ret i32 %cond276
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_body_height(i64 %window, i64 %pixelwise) #0 {
entry:
  %window.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  %lnot = xor i1 %cmp, true
  %call2 = call i32 @window_body_height(%struct.window* %call, i1 zeroext %lnot)
  %conv = sext i32 %call2 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define internal i32 @window_body_height(%struct.window* %w, i1 zeroext %pixelwise) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %pixelwise.addr = alloca i8, align 1
  %height = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %pixelwise to i8
  store i8 %frombool, i8* %pixelwise.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 35
  %1 = load i32, i32* %pixel_height, align 4
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @BUFFERP(i64 %3)
  br i1 %call, label %cond.true, label %cond.false.55

cond.true:                                        ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false.93, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load1, 11
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = trunc i16 %bf.clear2 to i1
  br i1 %bf.cast3, label %cond.false.93, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %wants_modeline to i64*
  %bf.load5 = load i64, i64* %10, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 14
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %land.lhs.true.9, label %cond.false.93

land.lhs.true.9:                                  ; preds = %land.lhs.true.4
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents10 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents10, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %12)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call11, i32 0, i32 13
  %13 = load i64, i64* %header_line_format_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %13, %call12
  br i1 %cmp, label %cond.false.93, label %land.lhs.true.13

land.lhs.true.13:                                 ; preds = %land.lhs.true.9
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height14 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 35
  %15 = load i32, i32* %pixel_height14, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 10
  %17 = load i64, i64* %contents15, align 8
  %call16 = call zeroext i1 @BUFFERP(i64 %17)
  br i1 %call16, label %cond.true.17, label %cond.false

cond.true.17:                                     ; preds = %land.lhs.true.13
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini18 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 67
  %bf.load19 = load i16, i16* %mini18, align 4
  %bf.clear20 = and i16 %bf.load19, 1
  %bf.cast21 = trunc i16 %bf.clear20 to i1
  br i1 %bf.cast21, label %cond.false.50, label %land.lhs.true.22

land.lhs.true.22:                                 ; preds = %cond.true.17
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p23 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 67
  %bf.load24 = load i16, i16* %pseudo_window_p23, align 4
  %bf.lshr25 = lshr i16 %bf.load24, 11
  %bf.clear26 = and i16 %bf.lshr25, 1
  %bf.cast27 = trunc i16 %bf.clear26 to i1
  br i1 %bf.cast27, label %cond.false.50, label %land.lhs.true.28

land.lhs.true.28:                                 ; preds = %land.lhs.true.22
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame29 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 1
  %21 = load i64, i64* %frame29, align 8
  %sub30 = sub nsw i64 %21, 5
  %22 = inttoptr i64 %sub30 to i8*
  %23 = bitcast i8* %22 to %struct.frame*
  %wants_modeline31 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %wants_modeline31 to i64*
  %bf.load32 = load i64, i64* %24, align 8
  %bf.lshr33 = lshr i64 %bf.load32, 14
  %bf.clear34 = and i64 %bf.lshr33, 1
  %bf.cast35 = trunc i64 %bf.clear34 to i1
  br i1 %bf.cast35, label %land.lhs.true.36, label %cond.false.50

land.lhs.true.36:                                 ; preds = %land.lhs.true.28
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents37 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 10
  %26 = load i64, i64* %contents37, align 8
  %call38 = call %struct.buffer* @XBUFFER(i64 %26)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call38, i32 0, i32 12
  %27 = load i64, i64* %mode_line_format_, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp40 = icmp eq i64 %27, %call39
  br i1 %cmp40, label %cond.false.50, label %land.lhs.true.41

land.lhs.true.41:                                 ; preds = %land.lhs.true.36
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height42 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 35
  %29 = load i32, i32* %pixel_height42, align 4
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame43 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 1
  %31 = load i64, i64* %frame43, align 8
  %sub44 = sub nsw i64 %31, 5
  %32 = inttoptr i64 %sub44 to i8*
  %33 = bitcast i8* %32 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 60
  %34 = load i32, i32* %line_height, align 4
  %cmp45 = icmp sgt i32 %29, %34
  br i1 %cmp45, label %cond.true.46, label %cond.false.50

cond.false:                                       ; preds = %land.lhs.true.13
  br i1 false, label %cond.true.46, label %cond.false.50

cond.true.46:                                     ; preds = %cond.false, %land.lhs.true.41
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame47 = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 1
  %36 = load i64, i64* %frame47, align 8
  %sub48 = sub nsw i64 %36, 5
  %37 = inttoptr i64 %sub48 to i8*
  %38 = bitcast i8* %37 to %struct.frame*
  %line_height49 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 60
  %39 = load i32, i32* %line_height49, align 4
  %mul = mul nsw i32 2, %39
  br label %cond.end

cond.false.50:                                    ; preds = %cond.false, %land.lhs.true.41, %land.lhs.true.36, %land.lhs.true.28, %land.lhs.true.22, %cond.true.17
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame51 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 1
  %41 = load i64, i64* %frame51, align 8
  %sub52 = sub nsw i64 %41, 5
  %42 = inttoptr i64 %sub52 to i8*
  %43 = bitcast i8* %42 to %struct.frame*
  %line_height53 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 60
  %44 = load i32, i32* %line_height53, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.50, %cond.true.46
  %cond = phi i32 [ %mul, %cond.true.46 ], [ %44, %cond.false.50 ]
  %cmp54 = icmp sgt i32 %15, %cond
  br i1 %cmp54, label %cond.true.56, label %cond.false.93

cond.false.55:                                    ; preds = %entry
  br i1 false, label %cond.true.56, label %cond.false.93

cond.true.56:                                     ; preds = %cond.false.55, %cond.end
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 64
  %46 = load i32, i32* %header_line_height, align 4
  %cmp57 = icmp sge i32 %46, 0
  br i1 %cmp57, label %cond.true.58, label %cond.false.60

cond.true.58:                                     ; preds = %cond.true.56
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height59 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 64
  %48 = load i32, i32* %header_line_height59, align 4
  br label %cond.end.91

cond.false.60:                                    ; preds = %cond.true.56
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 24
  %50 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %50, null
  br i1 %tobool, label %land.lhs.true.61, label %cond.false.69

land.lhs.true.61:                                 ; preds = %cond.false.60
  %51 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix62 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 24
  %52 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix62, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %52, i32 0, i32 1
  %53 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool63 = icmp ne %struct.glyph_row* %53, null
  br i1 %tobool63, label %cond.true.64, label %cond.false.69

cond.true.64:                                     ; preds = %land.lhs.true.61
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix65 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 24
  %55 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix65, align 8
  %rows66 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %55, i32 0, i32 1
  %56 = load %struct.glyph_row*, %struct.glyph_row** %rows66, align 8
  %height67 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %56, i32 0, i32 7
  %57 = load i32, i32* %height67, align 4
  %tobool68 = icmp ne i32 %57, 0
  br i1 %tobool68, label %cond.true.70, label %cond.false.84

cond.false.69:                                    ; preds = %land.lhs.true.61, %cond.false.60
  br i1 false, label %cond.true.70, label %cond.false.84

cond.true.70:                                     ; preds = %cond.false.69, %cond.true.64
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix71 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 24
  %59 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix71, align 8
  %tobool72 = icmp ne %struct.glyph_matrix* %59, null
  br i1 %tobool72, label %land.lhs.true.73, label %cond.false.81

land.lhs.true.73:                                 ; preds = %cond.true.70
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix74 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 24
  %61 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix74, align 8
  %rows75 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %61, i32 0, i32 1
  %62 = load %struct.glyph_row*, %struct.glyph_row** %rows75, align 8
  %tobool76 = icmp ne %struct.glyph_row* %62, null
  br i1 %tobool76, label %cond.true.77, label %cond.false.81

cond.true.77:                                     ; preds = %land.lhs.true.73
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix78 = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 24
  %64 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix78, align 8
  %rows79 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %64, i32 0, i32 1
  %65 = load %struct.glyph_row*, %struct.glyph_row** %rows79, align 8
  %height80 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %65, i32 0, i32 7
  %66 = load i32, i32* %height80, align 4
  br label %cond.end.82

cond.false.81:                                    ; preds = %land.lhs.true.73, %cond.true.70
  br label %cond.end.82

cond.end.82:                                      ; preds = %cond.false.81, %cond.true.77
  %cond83 = phi i32 [ %66, %cond.true.77 ], [ 0, %cond.false.81 ]
  br label %cond.end.88

cond.false.84:                                    ; preds = %cond.false.69, %cond.true.64
  %67 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame85 = getelementptr inbounds %struct.window, %struct.window* %67, i32 0, i32 1
  %68 = load i64, i64* %frame85, align 8
  %sub86 = sub nsw i64 %68, 5
  %69 = inttoptr i64 %sub86 to i8*
  %70 = bitcast i8* %69 to %struct.frame*
  %call87 = call i32 @estimate_mode_line_height(%struct.frame* %70, i32 5)
  br label %cond.end.88

cond.end.88:                                      ; preds = %cond.false.84, %cond.end.82
  %cond89 = phi i32 [ %cond83, %cond.end.82 ], [ %call87, %cond.false.84 ]
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height90 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 64
  store i32 %cond89, i32* %header_line_height90, align 4
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.end.88, %cond.true.58
  %cond92 = phi i32 [ %48, %cond.true.58 ], [ %cond89, %cond.end.88 ]
  br label %cond.end.94

cond.false.93:                                    ; preds = %cond.false.55, %cond.end, %land.lhs.true.9, %land.lhs.true.4, %land.lhs.true, %cond.true
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.93, %cond.end.91
  %cond95 = phi i32 [ %cond92, %cond.end.91 ], [ 0, %cond.false.93 ]
  %sub96 = sub nsw i32 %1, %cond95
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p97 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 67
  %bf.load98 = load i16, i16* %pseudo_window_p97, align 4
  %bf.lshr99 = lshr i16 %bf.load98, 11
  %bf.clear100 = and i16 %bf.lshr99, 1
  %bf.cast101 = trunc i16 %bf.clear100 to i1
  br i1 %bf.cast101, label %cond.true.110, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.94
  %73 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini102 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 67
  %bf.load103 = load i16, i16* %mini102, align 4
  %bf.clear104 = and i16 %bf.load103, 1
  %bf.cast105 = trunc i16 %bf.clear104 to i1
  br i1 %bf.cast105, label %land.lhs.true.106, label %cond.false.111

land.lhs.true.106:                                ; preds = %lor.lhs.false
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 3
  %75 = load i64, i64* %prev, align 8
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame107 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 1
  %77 = load i64, i64* %frame107, align 8
  %sub108 = sub nsw i64 %77, 5
  %78 = inttoptr i64 %sub108 to i8*
  %79 = bitcast i8* %78 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 5
  %80 = load i64, i64* %root_window, align 8
  %cmp109 = icmp eq i64 %75, %80
  br i1 %cmp109, label %cond.true.110, label %cond.false.111

cond.true.110:                                    ; preds = %land.lhs.true.106, %cond.end.94
  br i1 false, label %cond.true.127, label %cond.false.175

cond.false.111:                                   ; preds = %land.lhs.true.106, %lor.lhs.false
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 18
  %82 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call112 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp113 = icmp eq i64 %82, %call112
  br i1 %cmp113, label %cond.true.114, label %cond.false.121

cond.true.114:                                    ; preds = %cond.false.111
  %83 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame115 = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 1
  %84 = load i64, i64* %frame115, align 8
  %sub116 = sub nsw i64 %84, 5
  %85 = inttoptr i64 %sub116 to i8*
  %86 = bitcast i8* %85 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 26
  %87 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load117 = load i64, i64* %87, align 8
  %bf.lshr118 = lshr i64 %bf.load117, 32
  %bf.clear119 = and i64 %bf.lshr118, 1
  %bf.cast120 = trunc i64 %bf.clear119 to i1
  br i1 %bf.cast120, label %cond.true.127, label %cond.false.175

cond.false.121:                                   ; preds = %cond.false.111
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type122 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 18
  %89 = load i64, i64* %horizontal_scroll_bar_type122, align 8
  %call123 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp124 = icmp eq i64 %89, %call123
  br i1 %cmp124, label %cond.true.125, label %cond.false.126

cond.true.125:                                    ; preds = %cond.false.121
  br i1 true, label %cond.true.127, label %cond.false.175

cond.false.126:                                   ; preds = %cond.false.121
  br i1 false, label %cond.true.127, label %cond.false.175

cond.true.127:                                    ; preds = %cond.false.126, %cond.true.125, %cond.true.114, %cond.true.110
  %90 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p128 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 67
  %bf.load129 = load i16, i16* %pseudo_window_p128, align 4
  %bf.lshr130 = lshr i16 %bf.load129, 11
  %bf.clear131 = and i16 %bf.lshr130, 1
  %bf.cast132 = trunc i16 %bf.clear131 to i1
  br i1 %bf.cast132, label %cond.true.144, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %cond.true.127
  %91 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini134 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 67
  %bf.load135 = load i16, i16* %mini134, align 4
  %bf.clear136 = and i16 %bf.load135, 1
  %bf.cast137 = trunc i16 %bf.clear136 to i1
  br i1 %bf.cast137, label %land.lhs.true.138, label %cond.false.145

land.lhs.true.138:                                ; preds = %lor.lhs.false.133
  %92 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev139 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 3
  %93 = load i64, i64* %prev139, align 8
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame140 = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 1
  %95 = load i64, i64* %frame140, align 8
  %sub141 = sub nsw i64 %95, 5
  %96 = inttoptr i64 %sub141 to i8*
  %97 = bitcast i8* %96 to %struct.frame*
  %root_window142 = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 5
  %98 = load i64, i64* %root_window142, align 8
  %cmp143 = icmp eq i64 %93, %98
  br i1 %cmp143, label %cond.true.144, label %cond.false.145

cond.true.144:                                    ; preds = %land.lhs.true.138, %cond.true.127
  br i1 false, label %cond.true.163, label %cond.false.172

cond.false.145:                                   ; preds = %land.lhs.true.138, %lor.lhs.false.133
  %99 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type146 = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 18
  %100 = load i64, i64* %horizontal_scroll_bar_type146, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp148 = icmp eq i64 %100, %call147
  br i1 %cmp148, label %cond.true.149, label %cond.false.157

cond.true.149:                                    ; preds = %cond.false.145
  %101 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame150 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 1
  %102 = load i64, i64* %frame150, align 8
  %sub151 = sub nsw i64 %102, 5
  %103 = inttoptr i64 %sub151 to i8*
  %104 = bitcast i8* %103 to %struct.frame*
  %horizontal_scroll_bars152 = getelementptr inbounds %struct.frame, %struct.frame* %104, i32 0, i32 26
  %105 = bitcast i48* %horizontal_scroll_bars152 to i64*
  %bf.load153 = load i64, i64* %105, align 8
  %bf.lshr154 = lshr i64 %bf.load153, 32
  %bf.clear155 = and i64 %bf.lshr154, 1
  %bf.cast156 = trunc i64 %bf.clear155 to i1
  br i1 %bf.cast156, label %cond.true.163, label %cond.false.172

cond.false.157:                                   ; preds = %cond.false.145
  %106 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type158 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 18
  %107 = load i64, i64* %horizontal_scroll_bar_type158, align 8
  %call159 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp160 = icmp eq i64 %107, %call159
  br i1 %cmp160, label %cond.true.161, label %cond.false.162

cond.true.161:                                    ; preds = %cond.false.157
  br i1 true, label %cond.true.163, label %cond.false.172

cond.false.162:                                   ; preds = %cond.false.157
  br i1 false, label %cond.true.163, label %cond.false.172

cond.true.163:                                    ; preds = %cond.false.162, %cond.true.161, %cond.true.149, %cond.true.144
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 62
  %109 = load i32, i32* %scroll_bar_height, align 4
  %cmp164 = icmp sge i32 %109, 0
  br i1 %cmp164, label %cond.true.165, label %cond.false.167

cond.true.165:                                    ; preds = %cond.true.163
  %110 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height166 = getelementptr inbounds %struct.window, %struct.window* %110, i32 0, i32 62
  %111 = load i32, i32* %scroll_bar_height166, align 4
  br label %cond.end.170

cond.false.167:                                   ; preds = %cond.true.163
  %112 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame168 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 1
  %113 = load i64, i64* %frame168, align 8
  %sub169 = sub nsw i64 %113, 5
  %114 = inttoptr i64 %sub169 to i8*
  %115 = bitcast i8* %114 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 71
  %116 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.false.167, %cond.true.165
  %cond171 = phi i32 [ %111, %cond.true.165 ], [ %116, %cond.false.167 ]
  br label %cond.end.173

cond.false.172:                                   ; preds = %cond.false.162, %cond.true.161, %cond.true.149, %cond.true.144
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.false.172, %cond.end.170
  %cond174 = phi i32 [ %cond171, %cond.end.170 ], [ 0, %cond.false.172 ]
  br label %cond.end.176

cond.false.175:                                   ; preds = %cond.false.126, %cond.true.125, %cond.true.114, %cond.true.110
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.false.175, %cond.end.173
  %cond177 = phi i32 [ %cond174, %cond.end.173 ], [ 0, %cond.false.175 ]
  %sub178 = sub nsw i32 %sub96, %cond177
  %117 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents179 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 10
  %118 = load i64, i64* %contents179, align 8
  %call180 = call zeroext i1 @BUFFERP(i64 %118)
  br i1 %call180, label %cond.true.181, label %cond.false.212

cond.true.181:                                    ; preds = %cond.end.176
  %119 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini182 = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 67
  %bf.load183 = load i16, i16* %mini182, align 4
  %bf.clear184 = and i16 %bf.load183, 1
  %bf.cast185 = trunc i16 %bf.clear184 to i1
  br i1 %bf.cast185, label %cond.false.275, label %land.lhs.true.186

land.lhs.true.186:                                ; preds = %cond.true.181
  %120 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p187 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 67
  %bf.load188 = load i16, i16* %pseudo_window_p187, align 4
  %bf.lshr189 = lshr i16 %bf.load188, 11
  %bf.clear190 = and i16 %bf.lshr189, 1
  %bf.cast191 = trunc i16 %bf.clear190 to i1
  br i1 %bf.cast191, label %cond.false.275, label %land.lhs.true.192

land.lhs.true.192:                                ; preds = %land.lhs.true.186
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame193 = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 1
  %122 = load i64, i64* %frame193, align 8
  %sub194 = sub nsw i64 %122, 5
  %123 = inttoptr i64 %sub194 to i8*
  %124 = bitcast i8* %123 to %struct.frame*
  %wants_modeline195 = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 26
  %125 = bitcast i48* %wants_modeline195 to i64*
  %bf.load196 = load i64, i64* %125, align 8
  %bf.lshr197 = lshr i64 %bf.load196, 14
  %bf.clear198 = and i64 %bf.lshr197, 1
  %bf.cast199 = trunc i64 %bf.clear198 to i1
  br i1 %bf.cast199, label %land.lhs.true.200, label %cond.false.275

land.lhs.true.200:                                ; preds = %land.lhs.true.192
  %126 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents201 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 10
  %127 = load i64, i64* %contents201, align 8
  %call202 = call %struct.buffer* @XBUFFER(i64 %127)
  %mode_line_format_203 = getelementptr inbounds %struct.buffer, %struct.buffer* %call202, i32 0, i32 12
  %128 = load i64, i64* %mode_line_format_203, align 8
  %call204 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp205 = icmp eq i64 %128, %call204
  br i1 %cmp205, label %cond.false.275, label %land.lhs.true.206

land.lhs.true.206:                                ; preds = %land.lhs.true.200
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height207 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 35
  %130 = load i32, i32* %pixel_height207, align 4
  %131 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame208 = getelementptr inbounds %struct.window, %struct.window* %131, i32 0, i32 1
  %132 = load i64, i64* %frame208, align 8
  %sub209 = sub nsw i64 %132, 5
  %133 = inttoptr i64 %sub209 to i8*
  %134 = bitcast i8* %133 to %struct.frame*
  %line_height210 = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 60
  %135 = load i32, i32* %line_height210, align 4
  %cmp211 = icmp sgt i32 %130, %135
  br i1 %cmp211, label %cond.true.213, label %cond.false.275

cond.false.212:                                   ; preds = %cond.end.176
  br i1 false, label %cond.true.213, label %cond.false.275

cond.true.213:                                    ; preds = %cond.false.212, %land.lhs.true.206
  %136 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 63
  %137 = load i32, i32* %mode_line_height, align 4
  %cmp214 = icmp sge i32 %137, 0
  br i1 %cmp214, label %cond.true.215, label %cond.false.217

cond.true.215:                                    ; preds = %cond.true.213
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height216 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 63
  %139 = load i32, i32* %mode_line_height216, align 4
  br label %cond.end.273

cond.false.217:                                   ; preds = %cond.true.213
  %140 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix218 = getelementptr inbounds %struct.window, %struct.window* %140, i32 0, i32 24
  %141 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix218, align 8
  %tobool219 = icmp ne %struct.glyph_matrix* %141, null
  br i1 %tobool219, label %land.lhs.true.220, label %cond.false.231

land.lhs.true.220:                                ; preds = %cond.false.217
  %142 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix221 = getelementptr inbounds %struct.window, %struct.window* %142, i32 0, i32 24
  %143 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix221, align 8
  %rows222 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %143, i32 0, i32 1
  %144 = load %struct.glyph_row*, %struct.glyph_row** %rows222, align 8
  %tobool223 = icmp ne %struct.glyph_row* %144, null
  br i1 %tobool223, label %cond.true.224, label %cond.false.231

cond.true.224:                                    ; preds = %land.lhs.true.220
  %145 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix225 = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 24
  %146 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix225, align 8
  %rows226 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %146, i32 0, i32 1
  %147 = load %struct.glyph_row*, %struct.glyph_row** %rows226, align 8
  %148 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix227 = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 24
  %149 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix227, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %149, i32 0, i32 3
  %150 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %150 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %147, i64 %idx.ext
  %add.ptr228 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height229 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr228, i32 0, i32 7
  %151 = load i32, i32* %height229, align 4
  %tobool230 = icmp ne i32 %151, 0
  br i1 %tobool230, label %cond.true.232, label %cond.false.251

cond.false.231:                                   ; preds = %land.lhs.true.220, %cond.false.217
  br i1 false, label %cond.true.232, label %cond.false.251

cond.true.232:                                    ; preds = %cond.false.231, %cond.true.224
  %152 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix233 = getelementptr inbounds %struct.window, %struct.window* %152, i32 0, i32 24
  %153 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix233, align 8
  %tobool234 = icmp ne %struct.glyph_matrix* %153, null
  br i1 %tobool234, label %land.lhs.true.235, label %cond.false.248

land.lhs.true.235:                                ; preds = %cond.true.232
  %154 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix236 = getelementptr inbounds %struct.window, %struct.window* %154, i32 0, i32 24
  %155 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix236, align 8
  %rows237 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %155, i32 0, i32 1
  %156 = load %struct.glyph_row*, %struct.glyph_row** %rows237, align 8
  %tobool238 = icmp ne %struct.glyph_row* %156, null
  br i1 %tobool238, label %cond.true.239, label %cond.false.248

cond.true.239:                                    ; preds = %land.lhs.true.235
  %157 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix240 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 24
  %158 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix240, align 8
  %rows241 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %158, i32 0, i32 1
  %159 = load %struct.glyph_row*, %struct.glyph_row** %rows241, align 8
  %160 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix242 = getelementptr inbounds %struct.window, %struct.window* %160, i32 0, i32 24
  %161 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix242, align 8
  %nrows243 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %161, i32 0, i32 3
  %162 = load i32, i32* %nrows243, align 4
  %idx.ext244 = sext i32 %162 to i64
  %add.ptr245 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %159, i64 %idx.ext244
  %add.ptr246 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr245, i64 -1
  %height247 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr246, i32 0, i32 7
  %163 = load i32, i32* %height247, align 4
  br label %cond.end.249

cond.false.248:                                   ; preds = %land.lhs.true.235, %cond.true.232
  br label %cond.end.249

cond.end.249:                                     ; preds = %cond.false.248, %cond.true.239
  %cond250 = phi i32 [ %163, %cond.true.239 ], [ 0, %cond.false.248 ]
  br label %cond.end.270

cond.false.251:                                   ; preds = %cond.false.231, %cond.true.224
  %164 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame252 = getelementptr inbounds %struct.window, %struct.window* %164, i32 0, i32 1
  %165 = load i64, i64* %frame252, align 8
  %sub253 = sub nsw i64 %165, 5
  %166 = inttoptr i64 %sub253 to i8*
  %167 = bitcast i8* %166 to %struct.frame*
  %168 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool254 = trunc i8 %168 to i1
  br i1 %tobool254, label %lor.lhs.false.255, label %lor.end

lor.lhs.false.255:                                ; preds = %cond.false.251
  %169 = load %struct.window*, %struct.window** %w.addr, align 8
  %170 = load i64, i64* @selected_window, align 8
  %call256 = call %struct.window* @XWINDOW(i64 %170)
  %cmp257 = icmp eq %struct.window* %169, %call256
  br i1 %cmp257, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.255
  %171 = load i64, i64* @minibuf_level, align 8
  %cmp258 = icmp sgt i64 %171, 0
  br i1 %cmp258, label %land.lhs.true.259, label %land.end

land.lhs.true.259:                                ; preds = %lor.rhs
  %172 = load i64, i64* @minibuf_selected_window, align 8
  %call260 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp261 = icmp eq i64 %172, %call260
  br i1 %cmp261, label %land.end, label %land.lhs.true.262

land.lhs.true.262:                                ; preds = %land.lhs.true.259
  %173 = load i64, i64* @selected_window, align 8
  %call263 = call %struct.window* @XWINDOW(i64 %173)
  %174 = load i64, i64* @minibuf_window, align 8
  %call264 = call %struct.window* @XWINDOW(i64 %174)
  %cmp265 = icmp eq %struct.window* %call263, %call264
  br i1 %cmp265, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.262
  %175 = load %struct.window*, %struct.window** %w.addr, align 8
  %176 = load i64, i64* @minibuf_selected_window, align 8
  %call266 = call %struct.window* @XWINDOW(i64 %176)
  %cmp267 = icmp eq %struct.window* %175, %call266
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.262, %land.lhs.true.259, %lor.rhs
  %177 = phi i1 [ false, %land.lhs.true.262 ], [ false, %land.lhs.true.259 ], [ false, %lor.rhs ], [ %cmp267, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.255, %cond.false.251
  %178 = phi i1 [ true, %lor.lhs.false.255 ], [ true, %cond.false.251 ], [ %177, %land.end ]
  %cond268 = select i1 %178, i32 1, i32 2
  %call269 = call i32 @estimate_mode_line_height(%struct.frame* %167, i32 %cond268)
  br label %cond.end.270

cond.end.270:                                     ; preds = %lor.end, %cond.end.249
  %cond271 = phi i32 [ %cond250, %cond.end.249 ], [ %call269, %lor.end ]
  %179 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height272 = getelementptr inbounds %struct.window, %struct.window* %179, i32 0, i32 63
  store i32 %cond271, i32* %mode_line_height272, align 4
  br label %cond.end.273

cond.end.273:                                     ; preds = %cond.end.270, %cond.true.215
  %cond274 = phi i32 [ %139, %cond.true.215 ], [ %cond271, %cond.end.270 ]
  br label %cond.end.276

cond.false.275:                                   ; preds = %cond.false.212, %land.lhs.true.206, %land.lhs.true.200, %land.lhs.true.192, %land.lhs.true.186, %cond.true.181
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.275, %cond.end.273
  %cond277 = phi i32 [ %cond274, %cond.end.273 ], [ 0, %cond.false.275 ]
  %sub278 = sub nsw i32 %sub178, %cond277
  %180 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %180, i32 0, i32 31
  %181 = load i32, i32* %pixel_top, align 4
  %182 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height279 = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 35
  %183 = load i32, i32* %pixel_height279, align 4
  %add = add nsw i32 %181, %183
  %184 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame280 = getelementptr inbounds %struct.window, %struct.window* %184, i32 0, i32 1
  %185 = load i64, i64* %frame280, align 8
  %sub281 = sub nsw i64 %185, 5
  %186 = inttoptr i64 %sub281 to i8*
  %187 = bitcast i8* %186 to %struct.frame*
  %root_window282 = getelementptr inbounds %struct.frame, %struct.frame* %187, i32 0, i32 5
  %188 = load i64, i64* %root_window282, align 8
  %call283 = call %struct.window* @XWINDOW(i64 %188)
  %pixel_top284 = getelementptr inbounds %struct.window, %struct.window* %call283, i32 0, i32 31
  %189 = load i32, i32* %pixel_top284, align 4
  %190 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame285 = getelementptr inbounds %struct.window, %struct.window* %190, i32 0, i32 1
  %191 = load i64, i64* %frame285, align 8
  %sub286 = sub nsw i64 %191, 5
  %192 = inttoptr i64 %sub286 to i8*
  %193 = bitcast i8* %192 to %struct.frame*
  %root_window287 = getelementptr inbounds %struct.frame, %struct.frame* %193, i32 0, i32 5
  %194 = load i64, i64* %root_window287, align 8
  %call288 = call %struct.window* @XWINDOW(i64 %194)
  %pixel_height289 = getelementptr inbounds %struct.window, %struct.window* %call288, i32 0, i32 35
  %195 = load i32, i32* %pixel_height289, align 4
  %add290 = add nsw i32 %189, %195
  %cmp291 = icmp eq i32 %add, %add290
  br i1 %cmp291, label %land.lhs.true.292, label %lor.lhs.false.299

land.lhs.true.292:                                ; preds = %cond.end.276
  %196 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame293 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 1
  %197 = load i64, i64* %frame293, align 8
  %sub294 = sub nsw i64 %197, 5
  %198 = inttoptr i64 %sub294 to i8*
  %199 = bitcast i8* %198 to %struct.frame*
  %root_window295 = getelementptr inbounds %struct.frame, %struct.frame* %199, i32 0, i32 5
  %200 = load i64, i64* %root_window295, align 8
  %call296 = call %struct.window* @XWINDOW(i64 %200)
  %next = getelementptr inbounds %struct.window, %struct.window* %call296, i32 0, i32 2
  %201 = load i64, i64* %next, align 8
  %call297 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp298 = icmp eq i64 %201, %call297
  br i1 %cmp298, label %cond.true.311, label %lor.lhs.false.299

lor.lhs.false.299:                                ; preds = %land.lhs.true.292, %cond.end.276
  %202 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev300 = getelementptr inbounds %struct.window, %struct.window* %202, i32 0, i32 3
  %203 = load i64, i64* %prev300, align 8
  %204 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame301 = getelementptr inbounds %struct.window, %struct.window* %204, i32 0, i32 1
  %205 = load i64, i64* %frame301, align 8
  %sub302 = sub nsw i64 %205, 5
  %206 = inttoptr i64 %sub302 to i8*
  %207 = bitcast i8* %206 to %struct.frame*
  %root_window303 = getelementptr inbounds %struct.frame, %struct.frame* %207, i32 0, i32 5
  %208 = load i64, i64* %root_window303, align 8
  %cmp304 = icmp eq i64 %203, %208
  br i1 %cmp304, label %cond.true.311, label %lor.lhs.false.305

lor.lhs.false.305:                                ; preds = %lor.lhs.false.299
  %209 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p306 = getelementptr inbounds %struct.window, %struct.window* %209, i32 0, i32 67
  %bf.load307 = load i16, i16* %pseudo_window_p306, align 4
  %bf.lshr308 = lshr i16 %bf.load307, 11
  %bf.clear309 = and i16 %bf.lshr308, 1
  %bf.cast310 = trunc i16 %bf.clear309 to i1
  br i1 %bf.cast310, label %cond.true.311, label %cond.false.312

cond.true.311:                                    ; preds = %lor.lhs.false.305, %lor.lhs.false.299, %land.lhs.true.292
  br label %cond.end.315

cond.false.312:                                   ; preds = %lor.lhs.false.305
  %210 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame313 = getelementptr inbounds %struct.window, %struct.window* %210, i32 0, i32 1
  %211 = load i64, i64* %frame313, align 8
  %sub314 = sub nsw i64 %211, 5
  %212 = inttoptr i64 %sub314 to i8*
  %213 = bitcast i8* %212 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %213, i32 0, i32 53
  %214 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end.315

cond.end.315:                                     ; preds = %cond.false.312, %cond.true.311
  %cond316 = phi i32 [ 0, %cond.true.311 ], [ %214, %cond.false.312 ]
  %sub317 = sub nsw i32 %sub278, %cond316
  store i32 %sub317, i32* %height, align 4
  %215 = load i8, i8* %pixelwise.addr, align 1
  %tobool318 = trunc i8 %215 to i1
  br i1 %tobool318, label %cond.true.319, label %cond.false.320

cond.true.319:                                    ; preds = %cond.end.315
  %216 = load i32, i32* %height, align 4
  br label %cond.end.324

cond.false.320:                                   ; preds = %cond.end.315
  %217 = load i32, i32* %height, align 4
  %218 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame321 = getelementptr inbounds %struct.window, %struct.window* %218, i32 0, i32 1
  %219 = load i64, i64* %frame321, align 8
  %sub322 = sub nsw i64 %219, 5
  %220 = inttoptr i64 %sub322 to i8*
  %221 = bitcast i8* %220 to %struct.frame*
  %line_height323 = getelementptr inbounds %struct.frame, %struct.frame* %221, i32 0, i32 60
  %222 = load i32, i32* %line_height323, align 4
  %div = sdiv i32 %217, %222
  br label %cond.end.324

cond.end.324:                                     ; preds = %cond.false.320, %cond.true.319
  %cond325 = phi i32 [ %216, %cond.true.319 ], [ %div, %cond.false.320 ]
  %cmp326 = icmp sgt i32 %cond325, 0
  br i1 %cmp326, label %cond.true.327, label %cond.false.337

cond.true.327:                                    ; preds = %cond.end.324
  %223 = load i8, i8* %pixelwise.addr, align 1
  %tobool328 = trunc i8 %223 to i1
  br i1 %tobool328, label %cond.true.329, label %cond.false.330

cond.true.329:                                    ; preds = %cond.true.327
  %224 = load i32, i32* %height, align 4
  br label %cond.end.335

cond.false.330:                                   ; preds = %cond.true.327
  %225 = load i32, i32* %height, align 4
  %226 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame331 = getelementptr inbounds %struct.window, %struct.window* %226, i32 0, i32 1
  %227 = load i64, i64* %frame331, align 8
  %sub332 = sub nsw i64 %227, 5
  %228 = inttoptr i64 %sub332 to i8*
  %229 = bitcast i8* %228 to %struct.frame*
  %line_height333 = getelementptr inbounds %struct.frame, %struct.frame* %229, i32 0, i32 60
  %230 = load i32, i32* %line_height333, align 4
  %div334 = sdiv i32 %225, %230
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.330, %cond.true.329
  %cond336 = phi i32 [ %224, %cond.true.329 ], [ %div334, %cond.false.330 ]
  br label %cond.end.338

cond.false.337:                                   ; preds = %cond.end.324
  br label %cond.end.338

cond.end.338:                                     ; preds = %cond.false.337, %cond.end.335
  %cond339 = phi i32 [ %cond336, %cond.end.335 ], [ 0, %cond.false.337 ]
  ret i32 %cond339
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_body_width(i64 %window, i64 %pixelwise) #0 {
entry:
  %window.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  %lnot = xor i1 %cmp, true
  %call2 = call i32 @window_body_width(%struct.window* %call, i1 zeroext %lnot)
  %conv = sext i32 %call2 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_mode_line_height(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @decode_live_window(i64 %2)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false.93, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %3 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @decode_live_window(i64 %3)
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 67
  %bf.load4 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load4, 11
  %bf.clear5 = and i16 %bf.lshr, 1
  %bf.cast6 = trunc i16 %bf.clear5 to i1
  br i1 %bf.cast6, label %cond.false.93, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %4 = load i64, i64* %window.addr, align 8
  %call8 = call %struct.window* @decode_live_window(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %wants_modeline to i64*
  %bf.load9 = load i64, i64* %8, align 8
  %bf.lshr10 = lshr i64 %bf.load9, 14
  %bf.clear11 = and i64 %bf.lshr10, 1
  %bf.cast12 = trunc i64 %bf.clear11 to i1
  br i1 %bf.cast12, label %land.lhs.true.13, label %cond.false.93

land.lhs.true.13:                                 ; preds = %land.lhs.true.7
  %9 = load i64, i64* %window.addr, align 8
  %call14 = call %struct.window* @decode_live_window(i64 %9)
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %call14, i32 0, i32 10
  %10 = load i64, i64* %contents15, align 8
  %call16 = call %struct.buffer* @XBUFFER(i64 %10)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call16, i32 0, i32 12
  %11 = load i64, i64* %mode_line_format_, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call17
  br i1 %cmp, label %cond.false.93, label %land.lhs.true.18

land.lhs.true.18:                                 ; preds = %land.lhs.true.13
  %12 = load i64, i64* %window.addr, align 8
  %call19 = call %struct.window* @decode_live_window(i64 %12)
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %call19, i32 0, i32 35
  %13 = load i32, i32* %pixel_height, align 4
  %14 = load i64, i64* %window.addr, align 8
  %call20 = call %struct.window* @decode_live_window(i64 %14)
  %frame21 = getelementptr inbounds %struct.window, %struct.window* %call20, i32 0, i32 1
  %15 = load i64, i64* %frame21, align 8
  %sub22 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub22 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 60
  %18 = load i32, i32* %line_height, align 4
  %cmp23 = icmp sgt i32 %13, %18
  br i1 %cmp23, label %cond.true.24, label %cond.false.93

cond.false:                                       ; preds = %entry
  br i1 false, label %cond.true.24, label %cond.false.93

cond.true.24:                                     ; preds = %cond.false, %land.lhs.true.18
  %19 = load i64, i64* %window.addr, align 8
  %call25 = call %struct.window* @decode_live_window(i64 %19)
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %call25, i32 0, i32 63
  %20 = load i32, i32* %mode_line_height, align 4
  %cmp26 = icmp sge i32 %20, 0
  br i1 %cmp26, label %cond.true.27, label %cond.false.30

cond.true.27:                                     ; preds = %cond.true.24
  %21 = load i64, i64* %window.addr, align 8
  %call28 = call %struct.window* @decode_live_window(i64 %21)
  %mode_line_height29 = getelementptr inbounds %struct.window, %struct.window* %call28, i32 0, i32 63
  %22 = load i32, i32* %mode_line_height29, align 4
  br label %cond.end.91

cond.false.30:                                    ; preds = %cond.true.24
  %23 = load i64, i64* %window.addr, align 8
  %call31 = call %struct.window* @decode_live_window(i64 %23)
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %call31, i32 0, i32 24
  %24 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %24, null
  br i1 %tobool, label %land.lhs.true.32, label %cond.false.44

land.lhs.true.32:                                 ; preds = %cond.false.30
  %25 = load i64, i64* %window.addr, align 8
  %call33 = call %struct.window* @decode_live_window(i64 %25)
  %current_matrix34 = getelementptr inbounds %struct.window, %struct.window* %call33, i32 0, i32 24
  %26 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix34, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %26, i32 0, i32 1
  %27 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool35 = icmp ne %struct.glyph_row* %27, null
  br i1 %tobool35, label %cond.true.36, label %cond.false.44

cond.true.36:                                     ; preds = %land.lhs.true.32
  %28 = load i64, i64* %window.addr, align 8
  %call37 = call %struct.window* @decode_live_window(i64 %28)
  %current_matrix38 = getelementptr inbounds %struct.window, %struct.window* %call37, i32 0, i32 24
  %29 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix38, align 8
  %rows39 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %29, i32 0, i32 1
  %30 = load %struct.glyph_row*, %struct.glyph_row** %rows39, align 8
  %31 = load i64, i64* %window.addr, align 8
  %call40 = call %struct.window* @decode_live_window(i64 %31)
  %current_matrix41 = getelementptr inbounds %struct.window, %struct.window* %call40, i32 0, i32 24
  %32 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix41, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %32, i32 0, i32 3
  %33 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %33 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i64 %idx.ext
  %add.ptr42 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr42, i32 0, i32 7
  %34 = load i32, i32* %height, align 4
  %tobool43 = icmp ne i32 %34, 0
  br i1 %tobool43, label %cond.true.45, label %cond.false.66

cond.false.44:                                    ; preds = %land.lhs.true.32, %cond.false.30
  br i1 false, label %cond.true.45, label %cond.false.66

cond.true.45:                                     ; preds = %cond.false.44, %cond.true.36
  %35 = load i64, i64* %window.addr, align 8
  %call46 = call %struct.window* @decode_live_window(i64 %35)
  %current_matrix47 = getelementptr inbounds %struct.window, %struct.window* %call46, i32 0, i32 24
  %36 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix47, align 8
  %tobool48 = icmp ne %struct.glyph_matrix* %36, null
  br i1 %tobool48, label %land.lhs.true.49, label %cond.false.65

land.lhs.true.49:                                 ; preds = %cond.true.45
  %37 = load i64, i64* %window.addr, align 8
  %call50 = call %struct.window* @decode_live_window(i64 %37)
  %current_matrix51 = getelementptr inbounds %struct.window, %struct.window* %call50, i32 0, i32 24
  %38 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix51, align 8
  %rows52 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %38, i32 0, i32 1
  %39 = load %struct.glyph_row*, %struct.glyph_row** %rows52, align 8
  %tobool53 = icmp ne %struct.glyph_row* %39, null
  br i1 %tobool53, label %cond.true.54, label %cond.false.65

cond.true.54:                                     ; preds = %land.lhs.true.49
  %40 = load i64, i64* %window.addr, align 8
  %call55 = call %struct.window* @decode_live_window(i64 %40)
  %current_matrix56 = getelementptr inbounds %struct.window, %struct.window* %call55, i32 0, i32 24
  %41 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix56, align 8
  %rows57 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %41, i32 0, i32 1
  %42 = load %struct.glyph_row*, %struct.glyph_row** %rows57, align 8
  %43 = load i64, i64* %window.addr, align 8
  %call58 = call %struct.window* @decode_live_window(i64 %43)
  %current_matrix59 = getelementptr inbounds %struct.window, %struct.window* %call58, i32 0, i32 24
  %44 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix59, align 8
  %nrows60 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %44, i32 0, i32 3
  %45 = load i32, i32* %nrows60, align 4
  %idx.ext61 = sext i32 %45 to i64
  %add.ptr62 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i64 %idx.ext61
  %add.ptr63 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr62, i64 -1
  %height64 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr63, i32 0, i32 7
  %46 = load i32, i32* %height64, align 4
  br label %cond.end

cond.false.65:                                    ; preds = %land.lhs.true.49, %cond.true.45
  br label %cond.end

cond.end:                                         ; preds = %cond.false.65, %cond.true.54
  %cond = phi i32 [ %46, %cond.true.54 ], [ 0, %cond.false.65 ]
  br label %cond.end.87

cond.false.66:                                    ; preds = %cond.false.44, %cond.true.36
  %47 = load i64, i64* %window.addr, align 8
  %call67 = call %struct.window* @decode_live_window(i64 %47)
  %frame68 = getelementptr inbounds %struct.window, %struct.window* %call67, i32 0, i32 1
  %48 = load i64, i64* %frame68, align 8
  %sub69 = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub69 to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %51 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool70 = trunc i8 %51 to i1
  br i1 %tobool70, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %cond.false.66
  %52 = load i64, i64* %window.addr, align 8
  %call71 = call %struct.window* @decode_live_window(i64 %52)
  %53 = load i64, i64* @selected_window, align 8
  %call72 = call %struct.window* @XWINDOW(i64 %53)
  %cmp73 = icmp eq %struct.window* %call71, %call72
  br i1 %cmp73, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %54 = load i64, i64* @minibuf_level, align 8
  %cmp74 = icmp sgt i64 %54, 0
  br i1 %cmp74, label %land.lhs.true.75, label %land.end

land.lhs.true.75:                                 ; preds = %lor.rhs
  %55 = load i64, i64* @minibuf_selected_window, align 8
  %call76 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp77 = icmp eq i64 %55, %call76
  br i1 %cmp77, label %land.end, label %land.lhs.true.78

land.lhs.true.78:                                 ; preds = %land.lhs.true.75
  %56 = load i64, i64* @selected_window, align 8
  %call79 = call %struct.window* @XWINDOW(i64 %56)
  %57 = load i64, i64* @minibuf_window, align 8
  %call80 = call %struct.window* @XWINDOW(i64 %57)
  %cmp81 = icmp eq %struct.window* %call79, %call80
  br i1 %cmp81, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.78
  %58 = load i64, i64* %window.addr, align 8
  %call82 = call %struct.window* @decode_live_window(i64 %58)
  %59 = load i64, i64* @minibuf_selected_window, align 8
  %call83 = call %struct.window* @XWINDOW(i64 %59)
  %cmp84 = icmp eq %struct.window* %call82, %call83
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.78, %land.lhs.true.75, %lor.rhs
  %60 = phi i1 [ false, %land.lhs.true.78 ], [ false, %land.lhs.true.75 ], [ false, %lor.rhs ], [ %cmp84, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %cond.false.66
  %61 = phi i1 [ true, %lor.lhs.false ], [ true, %cond.false.66 ], [ %60, %land.end ]
  %cond85 = select i1 %61, i32 1, i32 2
  %call86 = call i32 @estimate_mode_line_height(%struct.frame* %50, i32 %cond85)
  br label %cond.end.87

cond.end.87:                                      ; preds = %lor.end, %cond.end
  %cond88 = phi i32 [ %cond, %cond.end ], [ %call86, %lor.end ]
  %62 = load i64, i64* %window.addr, align 8
  %call89 = call %struct.window* @decode_live_window(i64 %62)
  %mode_line_height90 = getelementptr inbounds %struct.window, %struct.window* %call89, i32 0, i32 63
  store i32 %cond88, i32* %mode_line_height90, align 4
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.end.87, %cond.true.27
  %cond92 = phi i32 [ %22, %cond.true.27 ], [ %cond88, %cond.end.87 ]
  br label %cond.end.94

cond.false.93:                                    ; preds = %cond.false, %land.lhs.true.18, %land.lhs.true.13, %land.lhs.true.7, %land.lhs.true, %cond.true
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.93, %cond.end.91
  %cond95 = phi i32 [ %cond92, %cond.end.91 ], [ 0, %cond.false.93 ]
  %conv = sext i32 %cond95 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

declare i32 @estimate_mode_line_height(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_header_line_height(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call1, label %cond.true, label %cond.false.69

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @decode_live_window(i64 %2)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false.116, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %3 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @decode_live_window(i64 %3)
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 67
  %bf.load4 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load4, 11
  %bf.clear5 = and i16 %bf.lshr, 1
  %bf.cast6 = trunc i16 %bf.clear5 to i1
  br i1 %bf.cast6, label %cond.false.116, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %4 = load i64, i64* %window.addr, align 8
  %call8 = call %struct.window* @decode_live_window(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %wants_modeline to i64*
  %bf.load9 = load i64, i64* %8, align 8
  %bf.lshr10 = lshr i64 %bf.load9, 14
  %bf.clear11 = and i64 %bf.lshr10, 1
  %bf.cast12 = trunc i64 %bf.clear11 to i1
  br i1 %bf.cast12, label %land.lhs.true.13, label %cond.false.116

land.lhs.true.13:                                 ; preds = %land.lhs.true.7
  %9 = load i64, i64* %window.addr, align 8
  %call14 = call %struct.window* @decode_live_window(i64 %9)
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %call14, i32 0, i32 10
  %10 = load i64, i64* %contents15, align 8
  %call16 = call %struct.buffer* @XBUFFER(i64 %10)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call16, i32 0, i32 13
  %11 = load i64, i64* %header_line_format_, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call17
  br i1 %cmp, label %cond.false.116, label %land.lhs.true.18

land.lhs.true.18:                                 ; preds = %land.lhs.true.13
  %12 = load i64, i64* %window.addr, align 8
  %call19 = call %struct.window* @decode_live_window(i64 %12)
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %call19, i32 0, i32 35
  %13 = load i32, i32* %pixel_height, align 4
  %14 = load i64, i64* %window.addr, align 8
  %call20 = call %struct.window* @decode_live_window(i64 %14)
  %contents21 = getelementptr inbounds %struct.window, %struct.window* %call20, i32 0, i32 10
  %15 = load i64, i64* %contents21, align 8
  %call22 = call zeroext i1 @BUFFERP(i64 %15)
  br i1 %call22, label %cond.true.23, label %cond.false

cond.true.23:                                     ; preds = %land.lhs.true.18
  %16 = load i64, i64* %window.addr, align 8
  %call24 = call %struct.window* @decode_live_window(i64 %16)
  %mini25 = getelementptr inbounds %struct.window, %struct.window* %call24, i32 0, i32 67
  %bf.load26 = load i16, i16* %mini25, align 4
  %bf.clear27 = and i16 %bf.load26, 1
  %bf.cast28 = trunc i16 %bf.clear27 to i1
  br i1 %bf.cast28, label %cond.false.63, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %cond.true.23
  %17 = load i64, i64* %window.addr, align 8
  %call30 = call %struct.window* @decode_live_window(i64 %17)
  %pseudo_window_p31 = getelementptr inbounds %struct.window, %struct.window* %call30, i32 0, i32 67
  %bf.load32 = load i16, i16* %pseudo_window_p31, align 4
  %bf.lshr33 = lshr i16 %bf.load32, 11
  %bf.clear34 = and i16 %bf.lshr33, 1
  %bf.cast35 = trunc i16 %bf.clear34 to i1
  br i1 %bf.cast35, label %cond.false.63, label %land.lhs.true.36

land.lhs.true.36:                                 ; preds = %land.lhs.true.29
  %18 = load i64, i64* %window.addr, align 8
  %call37 = call %struct.window* @decode_live_window(i64 %18)
  %frame38 = getelementptr inbounds %struct.window, %struct.window* %call37, i32 0, i32 1
  %19 = load i64, i64* %frame38, align 8
  %sub39 = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub39 to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  %wants_modeline40 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %wants_modeline40 to i64*
  %bf.load41 = load i64, i64* %22, align 8
  %bf.lshr42 = lshr i64 %bf.load41, 14
  %bf.clear43 = and i64 %bf.lshr42, 1
  %bf.cast44 = trunc i64 %bf.clear43 to i1
  br i1 %bf.cast44, label %land.lhs.true.45, label %cond.false.63

land.lhs.true.45:                                 ; preds = %land.lhs.true.36
  %23 = load i64, i64* %window.addr, align 8
  %call46 = call %struct.window* @decode_live_window(i64 %23)
  %contents47 = getelementptr inbounds %struct.window, %struct.window* %call46, i32 0, i32 10
  %24 = load i64, i64* %contents47, align 8
  %call48 = call %struct.buffer* @XBUFFER(i64 %24)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call48, i32 0, i32 12
  %25 = load i64, i64* %mode_line_format_, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %25, %call49
  br i1 %cmp50, label %cond.false.63, label %land.lhs.true.51

land.lhs.true.51:                                 ; preds = %land.lhs.true.45
  %26 = load i64, i64* %window.addr, align 8
  %call52 = call %struct.window* @decode_live_window(i64 %26)
  %pixel_height53 = getelementptr inbounds %struct.window, %struct.window* %call52, i32 0, i32 35
  %27 = load i32, i32* %pixel_height53, align 4
  %28 = load i64, i64* %window.addr, align 8
  %call54 = call %struct.window* @decode_live_window(i64 %28)
  %frame55 = getelementptr inbounds %struct.window, %struct.window* %call54, i32 0, i32 1
  %29 = load i64, i64* %frame55, align 8
  %sub56 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub56 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 60
  %32 = load i32, i32* %line_height, align 4
  %cmp57 = icmp sgt i32 %27, %32
  br i1 %cmp57, label %cond.true.58, label %cond.false.63

cond.false:                                       ; preds = %land.lhs.true.18
  br i1 false, label %cond.true.58, label %cond.false.63

cond.true.58:                                     ; preds = %cond.false, %land.lhs.true.51
  %33 = load i64, i64* %window.addr, align 8
  %call59 = call %struct.window* @decode_live_window(i64 %33)
  %frame60 = getelementptr inbounds %struct.window, %struct.window* %call59, i32 0, i32 1
  %34 = load i64, i64* %frame60, align 8
  %sub61 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub61 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %line_height62 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 60
  %37 = load i32, i32* %line_height62, align 4
  %mul = mul nsw i32 2, %37
  br label %cond.end

cond.false.63:                                    ; preds = %cond.false, %land.lhs.true.51, %land.lhs.true.45, %land.lhs.true.36, %land.lhs.true.29, %cond.true.23
  %38 = load i64, i64* %window.addr, align 8
  %call64 = call %struct.window* @decode_live_window(i64 %38)
  %frame65 = getelementptr inbounds %struct.window, %struct.window* %call64, i32 0, i32 1
  %39 = load i64, i64* %frame65, align 8
  %sub66 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub66 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %line_height67 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 60
  %42 = load i32, i32* %line_height67, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.63, %cond.true.58
  %cond = phi i32 [ %mul, %cond.true.58 ], [ %42, %cond.false.63 ]
  %cmp68 = icmp sgt i32 %13, %cond
  br i1 %cmp68, label %cond.true.70, label %cond.false.116

cond.false.69:                                    ; preds = %entry
  br i1 false, label %cond.true.70, label %cond.false.116

cond.true.70:                                     ; preds = %cond.false.69, %cond.end
  %43 = load i64, i64* %window.addr, align 8
  %call71 = call %struct.window* @decode_live_window(i64 %43)
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %call71, i32 0, i32 64
  %44 = load i32, i32* %header_line_height, align 4
  %cmp72 = icmp sge i32 %44, 0
  br i1 %cmp72, label %cond.true.73, label %cond.false.76

cond.true.73:                                     ; preds = %cond.true.70
  %45 = load i64, i64* %window.addr, align 8
  %call74 = call %struct.window* @decode_live_window(i64 %45)
  %header_line_height75 = getelementptr inbounds %struct.window, %struct.window* %call74, i32 0, i32 64
  %46 = load i32, i32* %header_line_height75, align 4
  br label %cond.end.114

cond.false.76:                                    ; preds = %cond.true.70
  %47 = load i64, i64* %window.addr, align 8
  %call77 = call %struct.window* @decode_live_window(i64 %47)
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %call77, i32 0, i32 24
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %48, null
  br i1 %tobool, label %land.lhs.true.78, label %cond.false.87

land.lhs.true.78:                                 ; preds = %cond.false.76
  %49 = load i64, i64* %window.addr, align 8
  %call79 = call %struct.window* @decode_live_window(i64 %49)
  %current_matrix80 = getelementptr inbounds %struct.window, %struct.window* %call79, i32 0, i32 24
  %50 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix80, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %50, i32 0, i32 1
  %51 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool81 = icmp ne %struct.glyph_row* %51, null
  br i1 %tobool81, label %cond.true.82, label %cond.false.87

cond.true.82:                                     ; preds = %land.lhs.true.78
  %52 = load i64, i64* %window.addr, align 8
  %call83 = call %struct.window* @decode_live_window(i64 %52)
  %current_matrix84 = getelementptr inbounds %struct.window, %struct.window* %call83, i32 0, i32 24
  %53 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix84, align 8
  %rows85 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %53, i32 0, i32 1
  %54 = load %struct.glyph_row*, %struct.glyph_row** %rows85, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 7
  %55 = load i32, i32* %height, align 4
  %tobool86 = icmp ne i32 %55, 0
  br i1 %tobool86, label %cond.true.88, label %cond.false.105

cond.false.87:                                    ; preds = %land.lhs.true.78, %cond.false.76
  br i1 false, label %cond.true.88, label %cond.false.105

cond.true.88:                                     ; preds = %cond.false.87, %cond.true.82
  %56 = load i64, i64* %window.addr, align 8
  %call89 = call %struct.window* @decode_live_window(i64 %56)
  %current_matrix90 = getelementptr inbounds %struct.window, %struct.window* %call89, i32 0, i32 24
  %57 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix90, align 8
  %tobool91 = icmp ne %struct.glyph_matrix* %57, null
  br i1 %tobool91, label %land.lhs.true.92, label %cond.false.102

land.lhs.true.92:                                 ; preds = %cond.true.88
  %58 = load i64, i64* %window.addr, align 8
  %call93 = call %struct.window* @decode_live_window(i64 %58)
  %current_matrix94 = getelementptr inbounds %struct.window, %struct.window* %call93, i32 0, i32 24
  %59 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix94, align 8
  %rows95 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %59, i32 0, i32 1
  %60 = load %struct.glyph_row*, %struct.glyph_row** %rows95, align 8
  %tobool96 = icmp ne %struct.glyph_row* %60, null
  br i1 %tobool96, label %cond.true.97, label %cond.false.102

cond.true.97:                                     ; preds = %land.lhs.true.92
  %61 = load i64, i64* %window.addr, align 8
  %call98 = call %struct.window* @decode_live_window(i64 %61)
  %current_matrix99 = getelementptr inbounds %struct.window, %struct.window* %call98, i32 0, i32 24
  %62 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix99, align 8
  %rows100 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %62, i32 0, i32 1
  %63 = load %struct.glyph_row*, %struct.glyph_row** %rows100, align 8
  %height101 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %63, i32 0, i32 7
  %64 = load i32, i32* %height101, align 4
  br label %cond.end.103

cond.false.102:                                   ; preds = %land.lhs.true.92, %cond.true.88
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.false.102, %cond.true.97
  %cond104 = phi i32 [ %64, %cond.true.97 ], [ 0, %cond.false.102 ]
  br label %cond.end.110

cond.false.105:                                   ; preds = %cond.false.87, %cond.true.82
  %65 = load i64, i64* %window.addr, align 8
  %call106 = call %struct.window* @decode_live_window(i64 %65)
  %frame107 = getelementptr inbounds %struct.window, %struct.window* %call106, i32 0, i32 1
  %66 = load i64, i64* %frame107, align 8
  %sub108 = sub nsw i64 %66, 5
  %67 = inttoptr i64 %sub108 to i8*
  %68 = bitcast i8* %67 to %struct.frame*
  %call109 = call i32 @estimate_mode_line_height(%struct.frame* %68, i32 5)
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.105, %cond.end.103
  %cond111 = phi i32 [ %cond104, %cond.end.103 ], [ %call109, %cond.false.105 ]
  %69 = load i64, i64* %window.addr, align 8
  %call112 = call %struct.window* @decode_live_window(i64 %69)
  %header_line_height113 = getelementptr inbounds %struct.window, %struct.window* %call112, i32 0, i32 64
  store i32 %cond111, i32* %header_line_height113, align 4
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.end.110, %cond.true.73
  %cond115 = phi i32 [ %46, %cond.true.73 ], [ %cond111, %cond.end.110 ]
  br label %cond.end.117

cond.false.116:                                   ; preds = %cond.false.69, %cond.end, %land.lhs.true.13, %land.lhs.true.7, %land.lhs.true, %cond.true
  br label %cond.end.117

cond.end.117:                                     ; preds = %cond.false.116, %cond.end.114
  %cond118 = phi i32 [ %cond115, %cond.end.114 ], [ 0, %cond.false.116 ]
  %conv = sext i32 %cond118 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_right_divider_width(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 30
  %1 = load i32, i32* %pixel_left, align 4
  %2 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_live_window(i64 %2)
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 34
  %3 = load i32, i32* %pixel_width, align 4
  %add = add nsw i32 %1, %3
  %4 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @decode_live_window(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 5
  %8 = load i64, i64* %root_window, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %8)
  %pixel_left4 = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 30
  %9 = load i32, i32* %pixel_left4, align 4
  %10 = load i64, i64* %window.addr, align 8
  %call5 = call %struct.window* @decode_live_window(i64 %10)
  %frame6 = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 1
  %11 = load i64, i64* %frame6, align 8
  %sub7 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub7 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %root_window8 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 5
  %14 = load i64, i64* %root_window8, align 8
  %call9 = call %struct.window* @XWINDOW(i64 %14)
  %pixel_width10 = getelementptr inbounds %struct.window, %struct.window* %call9, i32 0, i32 34
  %15 = load i32, i32* %pixel_width10, align 4
  %add11 = add nsw i32 %9, %15
  %cmp = icmp eq i32 %add, %add11
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %16 = load i64, i64* %window.addr, align 8
  %call12 = call %struct.window* @decode_live_window(i64 %16)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call12, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %17 = load i64, i64* %window.addr, align 8
  %call13 = call %struct.window* @decode_live_window(i64 %17)
  %frame14 = getelementptr inbounds %struct.window, %struct.window* %call13, i32 0, i32 1
  %18 = load i64, i64* %frame14, align 8
  %sub15 = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub15 to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 52
  %21 = load i32, i32* %right_divider_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %21, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add16 = add i64 %shl, 2
  ret i64 %add16
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_bottom_divider_width(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 31
  %1 = load i32, i32* %pixel_top, align 4
  %2 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_live_window(i64 %2)
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 35
  %3 = load i32, i32* %pixel_height, align 4
  %add = add nsw i32 %1, %3
  %4 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @decode_live_window(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 5
  %8 = load i64, i64* %root_window, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %8)
  %pixel_top4 = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 31
  %9 = load i32, i32* %pixel_top4, align 4
  %10 = load i64, i64* %window.addr, align 8
  %call5 = call %struct.window* @decode_live_window(i64 %10)
  %frame6 = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 1
  %11 = load i64, i64* %frame6, align 8
  %sub7 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub7 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %root_window8 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 5
  %14 = load i64, i64* %root_window8, align 8
  %call9 = call %struct.window* @XWINDOW(i64 %14)
  %pixel_height10 = getelementptr inbounds %struct.window, %struct.window* %call9, i32 0, i32 35
  %15 = load i32, i32* %pixel_height10, align 4
  %add11 = add nsw i32 %9, %15
  %cmp = icmp eq i32 %add, %add11
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %16 = load i64, i64* %window.addr, align 8
  %call12 = call %struct.window* @decode_live_window(i64 %16)
  %frame13 = getelementptr inbounds %struct.window, %struct.window* %call12, i32 0, i32 1
  %17 = load i64, i64* %frame13, align 8
  %sub14 = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub14 to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %root_window15 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 5
  %20 = load i64, i64* %root_window15, align 8
  %call16 = call %struct.window* @XWINDOW(i64 %20)
  %next = getelementptr inbounds %struct.window, %struct.window* %call16, i32 0, i32 2
  %21 = load i64, i64* %next, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp18 = icmp eq i64 %21, %call17
  br i1 %cmp18, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %22 = load i64, i64* %window.addr, align 8
  %call19 = call %struct.window* @decode_live_window(i64 %22)
  %prev = getelementptr inbounds %struct.window, %struct.window* %call19, i32 0, i32 3
  %23 = load i64, i64* %prev, align 8
  %24 = load i64, i64* %window.addr, align 8
  %call20 = call %struct.window* @decode_live_window(i64 %24)
  %frame21 = getelementptr inbounds %struct.window, %struct.window* %call20, i32 0, i32 1
  %25 = load i64, i64* %frame21, align 8
  %sub22 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub22 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  %root_window23 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 5
  %28 = load i64, i64* %root_window23, align 8
  %cmp24 = icmp eq i64 %23, %28
  br i1 %cmp24, label %cond.true, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false
  %29 = load i64, i64* %window.addr, align 8
  %call26 = call %struct.window* @decode_live_window(i64 %29)
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %call26, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.25, %lor.lhs.false, %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.25
  %30 = load i64, i64* %window.addr, align 8
  %call27 = call %struct.window* @decode_live_window(i64 %30)
  %frame28 = getelementptr inbounds %struct.window, %struct.window* %call27, i32 0, i32 1
  %31 = load i64, i64* %frame28, align 8
  %sub29 = sub nsw i64 %31, 5
  %32 = inttoptr i64 %sub29 to i8*
  %33 = bitcast i8* %32 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 53
  %34 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %34, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add30 = add i64 %shl, 2
  ret i64 %add30
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_scroll_bar_width(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.24

cond.false:                                       ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_live_window(i64 %1)
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 16
  %2 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.true.3, label %cond.false.10

cond.true.3:                                      ; preds = %cond.false
  %3 = load i64, i64* %window.addr, align 8
  %call4 = call %struct.window* @decode_live_window(i64 %3)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call4, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %vertical_scroll_bar_type5 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %vertical_scroll_bar_type5 to i64*
  %bf.load6 = load i64, i64* %7, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 30
  %bf.clear8 = and i64 %bf.lshr7, 3
  %bf.cast9 = trunc i64 %bf.clear8 to i32
  br label %cond.end.22

cond.false.10:                                    ; preds = %cond.false
  %8 = load i64, i64* %window.addr, align 8
  %call11 = call %struct.window* @decode_live_window(i64 %8)
  %vertical_scroll_bar_type12 = getelementptr inbounds %struct.window, %struct.window* %call11, i32 0, i32 16
  %9 = load i64, i64* %vertical_scroll_bar_type12, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp14 = icmp eq i64 %9, %call13
  br i1 %cmp14, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %cond.false.10
  br label %cond.end

cond.false.16:                                    ; preds = %cond.false.10
  %10 = load i64, i64* %window.addr, align 8
  %call17 = call %struct.window* @decode_live_window(i64 %10)
  %vertical_scroll_bar_type18 = getelementptr inbounds %struct.window, %struct.window* %call17, i32 0, i32 16
  %11 = load i64, i64* %vertical_scroll_bar_type18, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp20 = icmp eq i64 %11, %call19
  %cond = select i1 %cmp20, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.16, %cond.true.15
  %cond21 = phi i32 [ 1, %cond.true.15 ], [ %cond, %cond.false.16 ]
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.end, %cond.true.3
  %cond23 = phi i32 [ %bf.cast9, %cond.true.3 ], [ %cond21, %cond.end ]
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.end.22, %cond.true
  %cond25 = phi i32 [ 0, %cond.true ], [ %cond23, %cond.end.22 ]
  %cmp26 = icmp eq i32 %cond25, 1
  br i1 %cmp26, label %cond.true.67, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.24
  %12 = load i64, i64* %window.addr, align 8
  %call27 = call %struct.window* @decode_live_window(i64 %12)
  %pseudo_window_p28 = getelementptr inbounds %struct.window, %struct.window* %call27, i32 0, i32 67
  %bf.load29 = load i16, i16* %pseudo_window_p28, align 4
  %bf.lshr30 = lshr i16 %bf.load29, 11
  %bf.clear31 = and i16 %bf.lshr30, 1
  %bf.cast32 = trunc i16 %bf.clear31 to i1
  br i1 %bf.cast32, label %cond.true.33, label %cond.false.34

cond.true.33:                                     ; preds = %lor.lhs.false
  br label %cond.end.64

cond.false.34:                                    ; preds = %lor.lhs.false
  %13 = load i64, i64* %window.addr, align 8
  %call35 = call %struct.window* @decode_live_window(i64 %13)
  %vertical_scroll_bar_type36 = getelementptr inbounds %struct.window, %struct.window* %call35, i32 0, i32 16
  %14 = load i64, i64* %vertical_scroll_bar_type36, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp38 = icmp eq i64 %14, %call37
  br i1 %cmp38, label %cond.true.39, label %cond.false.48

cond.true.39:                                     ; preds = %cond.false.34
  %15 = load i64, i64* %window.addr, align 8
  %call40 = call %struct.window* @decode_live_window(i64 %15)
  %frame41 = getelementptr inbounds %struct.window, %struct.window* %call40, i32 0, i32 1
  %16 = load i64, i64* %frame41, align 8
  %sub42 = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub42 to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %vertical_scroll_bar_type43 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 26
  %19 = bitcast i48* %vertical_scroll_bar_type43 to i64*
  %bf.load44 = load i64, i64* %19, align 8
  %bf.lshr45 = lshr i64 %bf.load44, 30
  %bf.clear46 = and i64 %bf.lshr45, 3
  %bf.cast47 = trunc i64 %bf.clear46 to i32
  br label %cond.end.62

cond.false.48:                                    ; preds = %cond.false.34
  %20 = load i64, i64* %window.addr, align 8
  %call49 = call %struct.window* @decode_live_window(i64 %20)
  %vertical_scroll_bar_type50 = getelementptr inbounds %struct.window, %struct.window* %call49, i32 0, i32 16
  %21 = load i64, i64* %vertical_scroll_bar_type50, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp52 = icmp eq i64 %21, %call51
  br i1 %cmp52, label %cond.true.53, label %cond.false.54

cond.true.53:                                     ; preds = %cond.false.48
  br label %cond.end.60

cond.false.54:                                    ; preds = %cond.false.48
  %22 = load i64, i64* %window.addr, align 8
  %call55 = call %struct.window* @decode_live_window(i64 %22)
  %vertical_scroll_bar_type56 = getelementptr inbounds %struct.window, %struct.window* %call55, i32 0, i32 16
  %23 = load i64, i64* %vertical_scroll_bar_type56, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp58 = icmp eq i64 %23, %call57
  %cond59 = select i1 %cmp58, i32 2, i32 0
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.54, %cond.true.53
  %cond61 = phi i32 [ 1, %cond.true.53 ], [ %cond59, %cond.false.54 ]
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.end.60, %cond.true.39
  %cond63 = phi i32 [ %bf.cast47, %cond.true.39 ], [ %cond61, %cond.end.60 ]
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.end.62, %cond.true.33
  %cond65 = phi i32 [ 0, %cond.true.33 ], [ %cond63, %cond.end.62 ]
  %cmp66 = icmp eq i32 %cond65, 2
  br i1 %cmp66, label %cond.true.67, label %cond.false.79

cond.true.67:                                     ; preds = %cond.end.64, %cond.end.24
  %24 = load i64, i64* %window.addr, align 8
  %call68 = call %struct.window* @decode_live_window(i64 %24)
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %call68, i32 0, i32 61
  %25 = load i32, i32* %scroll_bar_width, align 4
  %cmp69 = icmp sge i32 %25, 0
  br i1 %cmp69, label %cond.true.70, label %cond.false.73

cond.true.70:                                     ; preds = %cond.true.67
  %26 = load i64, i64* %window.addr, align 8
  %call71 = call %struct.window* @decode_live_window(i64 %26)
  %scroll_bar_width72 = getelementptr inbounds %struct.window, %struct.window* %call71, i32 0, i32 61
  %27 = load i32, i32* %scroll_bar_width72, align 4
  br label %cond.end.77

cond.false.73:                                    ; preds = %cond.true.67
  %28 = load i64, i64* %window.addr, align 8
  %call74 = call %struct.window* @decode_live_window(i64 %28)
  %frame75 = getelementptr inbounds %struct.window, %struct.window* %call74, i32 0, i32 1
  %29 = load i64, i64* %frame75, align 8
  %sub76 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub76 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 69
  %32 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.73, %cond.true.70
  %cond78 = phi i32 [ %27, %cond.true.70 ], [ %32, %cond.false.73 ]
  br label %cond.end.80

cond.false.79:                                    ; preds = %cond.end.64
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.79, %cond.end.77
  %cond81 = phi i32 [ %cond78, %cond.end.77 ], [ 0, %cond.false.79 ]
  %conv = sext i32 %cond81 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_scroll_bar_height(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_live_window(i64 %1)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 67
  %bf.load2 = load i16, i16* %mini, align 4
  %bf.clear3 = and i16 %bf.load2, 1
  %bf.cast4 = trunc i16 %bf.clear3 to i1
  br i1 %bf.cast4, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i64, i64* %window.addr, align 8
  %call5 = call %struct.window* @decode_live_window(i64 %2)
  %prev = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 3
  %3 = load i64, i64* %prev, align 8
  %4 = load i64, i64* %window.addr, align 8
  %call6 = call %struct.window* @decode_live_window(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 5
  %8 = load i64, i64* %root_window, align 8
  %cmp = icmp eq i64 %3, %8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  br i1 false, label %cond.true.25, label %cond.false.35

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %9 = load i64, i64* %window.addr, align 8
  %call7 = call %struct.window* @decode_live_window(i64 %9)
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %call7, i32 0, i32 18
  %10 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp9 = icmp eq i64 %10, %call8
  br i1 %cmp9, label %cond.true.10, label %cond.false.18

cond.true.10:                                     ; preds = %cond.false
  %11 = load i64, i64* %window.addr, align 8
  %call11 = call %struct.window* @decode_live_window(i64 %11)
  %frame12 = getelementptr inbounds %struct.window, %struct.window* %call11, i32 0, i32 1
  %12 = load i64, i64* %frame12, align 8
  %sub13 = sub nsw i64 %12, 5
  %13 = inttoptr i64 %sub13 to i8*
  %14 = bitcast i8* %13 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load14 = load i64, i64* %15, align 8
  %bf.lshr15 = lshr i64 %bf.load14, 32
  %bf.clear16 = and i64 %bf.lshr15, 1
  %bf.cast17 = trunc i64 %bf.clear16 to i1
  br i1 %bf.cast17, label %cond.true.25, label %cond.false.35

cond.false.18:                                    ; preds = %cond.false
  %16 = load i64, i64* %window.addr, align 8
  %call19 = call %struct.window* @decode_live_window(i64 %16)
  %horizontal_scroll_bar_type20 = getelementptr inbounds %struct.window, %struct.window* %call19, i32 0, i32 18
  %17 = load i64, i64* %horizontal_scroll_bar_type20, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp22 = icmp eq i64 %17, %call21
  br i1 %cmp22, label %cond.true.23, label %cond.false.24

cond.true.23:                                     ; preds = %cond.false.18
  br i1 true, label %cond.true.25, label %cond.false.35

cond.false.24:                                    ; preds = %cond.false.18
  br i1 false, label %cond.true.25, label %cond.false.35

cond.true.25:                                     ; preds = %cond.false.24, %cond.true.23, %cond.true.10, %cond.true
  %18 = load i64, i64* %window.addr, align 8
  %call26 = call %struct.window* @decode_live_window(i64 %18)
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %call26, i32 0, i32 62
  %19 = load i32, i32* %scroll_bar_height, align 4
  %cmp27 = icmp sge i32 %19, 0
  br i1 %cmp27, label %cond.true.28, label %cond.false.31

cond.true.28:                                     ; preds = %cond.true.25
  %20 = load i64, i64* %window.addr, align 8
  %call29 = call %struct.window* @decode_live_window(i64 %20)
  %scroll_bar_height30 = getelementptr inbounds %struct.window, %struct.window* %call29, i32 0, i32 62
  %21 = load i32, i32* %scroll_bar_height30, align 4
  br label %cond.end

cond.false.31:                                    ; preds = %cond.true.25
  %22 = load i64, i64* %window.addr, align 8
  %call32 = call %struct.window* @decode_live_window(i64 %22)
  %frame33 = getelementptr inbounds %struct.window, %struct.window* %call32, i32 0, i32 1
  %23 = load i64, i64* %frame33, align 8
  %sub34 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub34 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 71
  %26 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.31, %cond.true.28
  %cond = phi i32 [ %21, %cond.true.28 ], [ %26, %cond.false.31 ]
  br label %cond.end.36

cond.false.35:                                    ; preds = %cond.false.24, %cond.true.23, %cond.true.10, %cond.true
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.35, %cond.end
  %cond37 = phi i32 [ %cond, %cond.end ], [ 0, %cond.false.35 ]
  %conv = sext i32 %cond37 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_hscroll(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 38
  %1 = load i64, i64* %hscroll, align 8
  %shl = shl i64 %1, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_hscroll(i64 %window, i64 %ncol) #0 {
entry:
  %window.addr = alloca i64, align 8
  %ncol.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %ncol, i64* %ncol.addr, align 8
  %0 = load i64, i64* %ncol.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %ncol.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @decode_live_window(i64 %4)
  %5 = load i64, i64* %ncol.addr, align 8
  %shr = ashr i64 %5, 2
  %call4 = call i64 @set_window_hscroll(%struct.window* %call3, i64 %shr)
  ret i64 %call4
}

; Function Attrs: nounwind uwtable
define internal i64 @set_window_hscroll(%struct.window* %w, i64 %hscroll) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %hscroll.addr = alloca i64, align 8
  %hscroll_max = alloca i64, align 8
  %new_hscroll = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %hscroll, i64* %hscroll.addr, align 8
  store i64 2305843009213693951, i64* %hscroll_max, align 8
  %0 = load i64, i64* %hscroll.addr, align 8
  %1 = load i64, i64* %hscroll_max, align 8
  %call = call i64 @clip_to_bounds(i64 0, i64 %0, i64 %1)
  store i64 %call, i64* %new_hscroll, align 8
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %hscroll1 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 38
  %3 = load i64, i64* %hscroll1, align 8
  %4 = load i64, i64* %new_hscroll, align 8
  %cmp = icmp ne i64 %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %6)
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %call2, i32 0, i32 94
  %bf.load = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, i64* %new_hscroll, align 8
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %hscroll3 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 38
  store i64 %7, i64* %hscroll3, align 8
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 67
  %bf.load4 = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.clear5 = and i16 %bf.load4, 32767
  %bf.set6 = or i16 %bf.clear5, -32768
  store i16 %bf.set6, i16* %suspend_auto_hscroll, align 4
  %10 = load i64, i64* %new_hscroll, align 8
  %shl = shl i64 %10, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_redisplay_end_trigger(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %redisplay_end_trigger = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 21
  %1 = load i64, i64* %redisplay_end_trigger, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_redisplay_end_trigger(i64 %window, i64 %value) #0 {
entry:
  %window.addr = alloca i64, align 8
  %value.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %value.addr, align 8
  call void @wset_redisplay_end_trigger(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %value.addr, align 8
  ret i64 %2
}

declare void @wset_redisplay_end_trigger(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @window_relative_x_coord(%struct.window* %w, i32 %part, i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %part.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %left_x = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %part, i32* %part.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.44

cond.false:                                       ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 51
  %5 = load i32, i32* %internal_border_width, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 30
  %7 = load i32, i32* %pixel_left, align 4
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 67
  %bf.load2 = load i16, i16* %pseudo_window_p1, align 4
  %bf.lshr3 = lshr i16 %bf.load2, 11
  %bf.clear4 = and i16 %bf.lshr3, 1
  %bf.cast5 = trunc i16 %bf.clear4 to i1
  br i1 %bf.cast5, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %cond.false
  br label %cond.end.28

cond.false.7:                                     ; preds = %cond.false
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 16
  %10 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %10, %call
  br i1 %cmp, label %cond.true.8, label %cond.false.16

cond.true.8:                                      ; preds = %cond.false.7
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame9 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 1
  %12 = load i64, i64* %frame9, align 8
  %sub10 = sub nsw i64 %12, 5
  %13 = inttoptr i64 %sub10 to i8*
  %14 = bitcast i8* %13 to %struct.frame*
  %vertical_scroll_bar_type11 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %vertical_scroll_bar_type11 to i64*
  %bf.load12 = load i64, i64* %15, align 8
  %bf.lshr13 = lshr i64 %bf.load12, 30
  %bf.clear14 = and i64 %bf.lshr13, 3
  %bf.cast15 = trunc i64 %bf.clear14 to i32
  br label %cond.end.26

cond.false.16:                                    ; preds = %cond.false.7
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type17 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 16
  %17 = load i64, i64* %vertical_scroll_bar_type17, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp19 = icmp eq i64 %17, %call18
  br i1 %cmp19, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %cond.false.16
  br label %cond.end

cond.false.21:                                    ; preds = %cond.false.16
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type22 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 16
  %19 = load i64, i64* %vertical_scroll_bar_type22, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp24 = icmp eq i64 %19, %call23
  %cond = select i1 %cmp24, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.21, %cond.true.20
  %cond25 = phi i32 [ 1, %cond.true.20 ], [ %cond, %cond.false.21 ]
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.end, %cond.true.8
  %cond27 = phi i32 [ %bf.cast15, %cond.true.8 ], [ %cond25, %cond.end ]
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.end.26, %cond.true.6
  %cond29 = phi i32 [ 0, %cond.true.6 ], [ %cond27, %cond.end.26 ]
  %cmp30 = icmp eq i32 %cond29, 1
  br i1 %cmp30, label %cond.true.31, label %cond.false.40

cond.true.31:                                     ; preds = %cond.end.28
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 61
  %21 = load i32, i32* %scroll_bar_width, align 4
  %cmp32 = icmp sge i32 %21, 0
  br i1 %cmp32, label %cond.true.33, label %cond.false.35

cond.true.33:                                     ; preds = %cond.true.31
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width34 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 61
  %23 = load i32, i32* %scroll_bar_width34, align 4
  br label %cond.end.38

cond.false.35:                                    ; preds = %cond.true.31
  %24 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame36 = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 1
  %25 = load i64, i64* %frame36, align 8
  %sub37 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub37 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 69
  %28 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.35, %cond.true.33
  %cond39 = phi i32 [ %23, %cond.true.33 ], [ %28, %cond.false.35 ]
  br label %cond.end.41

cond.false.40:                                    ; preds = %cond.end.28
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.40, %cond.end.38
  %cond42 = phi i32 [ %cond39, %cond.end.38 ], [ 0, %cond.false.40 ]
  %add = add nsw i32 %7, %cond42
  %add43 = add nsw i32 %5, %add
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.end.41, %cond.true
  %cond45 = phi i32 [ 0, %cond.true ], [ %add43, %cond.end.41 ]
  store i32 %cond45, i32* %left_x, align 4
  %29 = load i32, i32* %part.addr, align 4
  switch i32 %29, label %sw.default [
    i32 1, label %sw.bb
    i32 4, label %sw.bb.48
    i32 2, label %sw.bb.48
    i32 5, label %sw.bb.48
    i32 6, label %sw.bb.50
    i32 7, label %sw.bb.62
    i32 8, label %sw.bb.83
    i32 0, label %sw.bb.197
    i32 3, label %sw.bb.197
    i32 9, label %sw.bb.197
    i32 10, label %sw.bb.197
    i32 11, label %sw.bb.197
    i32 12, label %sw.bb.197
  ]

sw.bb:                                            ; preds = %cond.end.44
  %30 = load i32, i32* %x.addr, align 4
  %31 = load %struct.window*, %struct.window** %w.addr, align 8
  %call46 = call i32 @window_box_left(%struct.window* %31, i32 1)
  %sub47 = sub nsw i32 %30, %call46
  store i32 %sub47, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %cond.end.44, %cond.end.44, %cond.end.44
  %32 = load i32, i32* %x.addr, align 4
  %33 = load i32, i32* %left_x, align 4
  %sub49 = sub nsw i32 %32, %33
  store i32 %sub49, i32* %retval
  br label %return

sw.bb.50:                                         ; preds = %cond.end.44
  %34 = load i32, i32* %x.addr, align 4
  %35 = load i32, i32* %left_x, align 4
  %sub51 = sub nsw i32 %34, %35
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 57
  %37 = load i32, i32* %left_fringe_width, align 4
  %cmp52 = icmp sge i32 %37, 0
  br i1 %cmp52, label %cond.true.53, label %cond.false.55

cond.true.53:                                     ; preds = %sw.bb.50
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width54 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 57
  %39 = load i32, i32* %left_fringe_width54, align 4
  br label %cond.end.59

cond.false.55:                                    ; preds = %sw.bb.50
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame56 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 1
  %41 = load i64, i64* %frame56, align 8
  %sub57 = sub nsw i64 %41, 5
  %42 = inttoptr i64 %sub57 to i8*
  %43 = bitcast i8* %42 to %struct.frame*
  %left_fringe_width58 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 54
  %44 = load i32, i32* %left_fringe_width58, align 4
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.55, %cond.true.53
  %cond60 = phi i32 [ %39, %cond.true.53 ], [ %44, %cond.false.55 ]
  %sub61 = sub nsw i32 %sub51, %cond60
  store i32 %sub61, i32* %retval
  br label %return

sw.bb.62:                                         ; preds = %cond.end.44
  %45 = load i32, i32* %x.addr, align 4
  %46 = load i32, i32* %left_x, align 4
  %sub63 = sub nsw i32 %45, %46
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 67
  %bf.load64 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr65 = lshr i16 %bf.load64, 12
  %bf.clear66 = and i16 %bf.lshr65, 1
  %bf.cast67 = trunc i16 %bf.clear66 to i1
  br i1 %bf.cast67, label %cond.true.68, label %cond.false.79

cond.true.68:                                     ; preds = %sw.bb.62
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width69 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 57
  %49 = load i32, i32* %left_fringe_width69, align 4
  %cmp70 = icmp sge i32 %49, 0
  br i1 %cmp70, label %cond.true.71, label %cond.false.73

cond.true.71:                                     ; preds = %cond.true.68
  %50 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width72 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 57
  %51 = load i32, i32* %left_fringe_width72, align 4
  br label %cond.end.77

cond.false.73:                                    ; preds = %cond.true.68
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame74 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 1
  %53 = load i64, i64* %frame74, align 8
  %sub75 = sub nsw i64 %53, 5
  %54 = inttoptr i64 %sub75 to i8*
  %55 = bitcast i8* %54 to %struct.frame*
  %left_fringe_width76 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 54
  %56 = load i32, i32* %left_fringe_width76, align 4
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.73, %cond.true.71
  %cond78 = phi i32 [ %51, %cond.true.71 ], [ %56, %cond.false.73 ]
  br label %cond.end.80

cond.false.79:                                    ; preds = %sw.bb.62
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.79, %cond.end.77
  %cond81 = phi i32 [ %cond78, %cond.end.77 ], [ 0, %cond.false.79 ]
  %sub82 = sub nsw i32 %sub63, %cond81
  store i32 %sub82, i32* %retval
  br label %return

sw.bb.83:                                         ; preds = %cond.end.44
  %57 = load i32, i32* %x.addr, align 4
  %add84 = add nsw i32 %57, 1
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p85 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 67
  %bf.load86 = load i16, i16* %pseudo_window_p85, align 4
  %bf.lshr87 = lshr i16 %bf.load86, 11
  %bf.clear88 = and i16 %bf.lshr87, 1
  %bf.cast89 = trunc i16 %bf.clear88 to i1
  br i1 %bf.cast89, label %cond.true.90, label %cond.false.91

cond.true.90:                                     ; preds = %sw.bb.83
  %59 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 34
  %60 = load i32, i32* %pixel_width, align 4
  br label %cond.end.173

cond.false.91:                                    ; preds = %sw.bb.83
  %61 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame92 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 1
  %62 = load i64, i64* %frame92, align 8
  %sub93 = sub nsw i64 %62, 5
  %63 = inttoptr i64 %sub93 to i8*
  %64 = bitcast i8* %63 to %struct.frame*
  %internal_border_width94 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 51
  %65 = load i32, i32* %internal_border_width94, align 4
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left95 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 30
  %67 = load i32, i32* %pixel_left95, align 4
  %68 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width96 = getelementptr inbounds %struct.window, %struct.window* %68, i32 0, i32 34
  %69 = load i32, i32* %pixel_width96, align 4
  %add97 = add nsw i32 %67, %69
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left98 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 30
  %71 = load i32, i32* %pixel_left98, align 4
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width99 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 34
  %73 = load i32, i32* %pixel_width99, align 4
  %add100 = add nsw i32 %71, %73
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame101 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 1
  %75 = load i64, i64* %frame101, align 8
  %sub102 = sub nsw i64 %75, 5
  %76 = inttoptr i64 %sub102 to i8*
  %77 = bitcast i8* %76 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 5
  %78 = load i64, i64* %root_window, align 8
  %call103 = call %struct.window* @XWINDOW(i64 %78)
  %pixel_left104 = getelementptr inbounds %struct.window, %struct.window* %call103, i32 0, i32 30
  %79 = load i32, i32* %pixel_left104, align 4
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame105 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 1
  %81 = load i64, i64* %frame105, align 8
  %sub106 = sub nsw i64 %81, 5
  %82 = inttoptr i64 %sub106 to i8*
  %83 = bitcast i8* %82 to %struct.frame*
  %root_window107 = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 5
  %84 = load i64, i64* %root_window107, align 8
  %call108 = call %struct.window* @XWINDOW(i64 %84)
  %pixel_width109 = getelementptr inbounds %struct.window, %struct.window* %call108, i32 0, i32 34
  %85 = load i32, i32* %pixel_width109, align 4
  %add110 = add nsw i32 %79, %85
  %cmp111 = icmp eq i32 %add100, %add110
  br i1 %cmp111, label %cond.true.115, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.91
  %86 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 67
  %bf.load112 = load i16, i16* %mini, align 4
  %bf.clear113 = and i16 %bf.load112, 1
  %bf.cast114 = trunc i16 %bf.clear113 to i1
  br i1 %bf.cast114, label %cond.true.115, label %cond.false.116

cond.true.115:                                    ; preds = %lor.lhs.false, %cond.false.91
  br label %cond.end.119

cond.false.116:                                   ; preds = %lor.lhs.false
  %87 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame117 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 1
  %88 = load i64, i64* %frame117, align 8
  %sub118 = sub nsw i64 %88, 5
  %89 = inttoptr i64 %sub118 to i8*
  %90 = bitcast i8* %89 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %90, i32 0, i32 52
  %91 = load i32, i32* %right_divider_width, align 4
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.116, %cond.true.115
  %cond120 = phi i32 [ 0, %cond.true.115 ], [ %91, %cond.false.116 ]
  %sub121 = sub nsw i32 %add97, %cond120
  %92 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p122 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 67
  %bf.load123 = load i16, i16* %pseudo_window_p122, align 4
  %bf.lshr124 = lshr i16 %bf.load123, 11
  %bf.clear125 = and i16 %bf.lshr124, 1
  %bf.cast126 = trunc i16 %bf.clear125 to i1
  br i1 %bf.cast126, label %cond.true.127, label %cond.false.128

cond.true.127:                                    ; preds = %cond.end.119
  br label %cond.end.154

cond.false.128:                                   ; preds = %cond.end.119
  %93 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type129 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 16
  %94 = load i64, i64* %vertical_scroll_bar_type129, align 8
  %call130 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp131 = icmp eq i64 %94, %call130
  br i1 %cmp131, label %cond.true.132, label %cond.false.140

cond.true.132:                                    ; preds = %cond.false.128
  %95 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame133 = getelementptr inbounds %struct.window, %struct.window* %95, i32 0, i32 1
  %96 = load i64, i64* %frame133, align 8
  %sub134 = sub nsw i64 %96, 5
  %97 = inttoptr i64 %sub134 to i8*
  %98 = bitcast i8* %97 to %struct.frame*
  %vertical_scroll_bar_type135 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 26
  %99 = bitcast i48* %vertical_scroll_bar_type135 to i64*
  %bf.load136 = load i64, i64* %99, align 8
  %bf.lshr137 = lshr i64 %bf.load136, 30
  %bf.clear138 = and i64 %bf.lshr137, 3
  %bf.cast139 = trunc i64 %bf.clear138 to i32
  br label %cond.end.152

cond.false.140:                                   ; preds = %cond.false.128
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type141 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 16
  %101 = load i64, i64* %vertical_scroll_bar_type141, align 8
  %call142 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp143 = icmp eq i64 %101, %call142
  br i1 %cmp143, label %cond.true.144, label %cond.false.145

cond.true.144:                                    ; preds = %cond.false.140
  br label %cond.end.150

cond.false.145:                                   ; preds = %cond.false.140
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type146 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 16
  %103 = load i64, i64* %vertical_scroll_bar_type146, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp148 = icmp eq i64 %103, %call147
  %cond149 = select i1 %cmp148, i32 2, i32 0
  br label %cond.end.150

cond.end.150:                                     ; preds = %cond.false.145, %cond.true.144
  %cond151 = phi i32 [ 1, %cond.true.144 ], [ %cond149, %cond.false.145 ]
  br label %cond.end.152

cond.end.152:                                     ; preds = %cond.end.150, %cond.true.132
  %cond153 = phi i32 [ %bf.cast139, %cond.true.132 ], [ %cond151, %cond.end.150 ]
  br label %cond.end.154

cond.end.154:                                     ; preds = %cond.end.152, %cond.true.127
  %cond155 = phi i32 [ 0, %cond.true.127 ], [ %cond153, %cond.end.152 ]
  %cmp156 = icmp eq i32 %cond155, 2
  br i1 %cmp156, label %cond.true.157, label %cond.false.168

cond.true.157:                                    ; preds = %cond.end.154
  %104 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width158 = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 61
  %105 = load i32, i32* %scroll_bar_width158, align 4
  %cmp159 = icmp sge i32 %105, 0
  br i1 %cmp159, label %cond.true.160, label %cond.false.162

cond.true.160:                                    ; preds = %cond.true.157
  %106 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width161 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 61
  %107 = load i32, i32* %scroll_bar_width161, align 4
  br label %cond.end.166

cond.false.162:                                   ; preds = %cond.true.157
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame163 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 1
  %109 = load i64, i64* %frame163, align 8
  %sub164 = sub nsw i64 %109, 5
  %110 = inttoptr i64 %sub164 to i8*
  %111 = bitcast i8* %110 to %struct.frame*
  %config_scroll_bar_width165 = getelementptr inbounds %struct.frame, %struct.frame* %111, i32 0, i32 69
  %112 = load i32, i32* %config_scroll_bar_width165, align 4
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.162, %cond.true.160
  %cond167 = phi i32 [ %107, %cond.true.160 ], [ %112, %cond.false.162 ]
  br label %cond.end.169

cond.false.168:                                   ; preds = %cond.end.154
  br label %cond.end.169

cond.end.169:                                     ; preds = %cond.false.168, %cond.end.166
  %cond170 = phi i32 [ %cond167, %cond.end.166 ], [ 0, %cond.false.168 ]
  %sub171 = sub nsw i32 %sub121, %cond170
  %add172 = add nsw i32 %65, %sub171
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.end.169, %cond.true.90
  %cond174 = phi i32 [ %60, %cond.true.90 ], [ %add172, %cond.end.169 ]
  %sub175 = sub nsw i32 %add84, %cond174
  %113 = load %struct.window*, %struct.window** %w.addr, align 8
  %call176 = call i32 @window_box_width(%struct.window* %113, i32 2)
  %add177 = add nsw i32 %sub175, %call176
  %114 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins178 = getelementptr inbounds %struct.window, %struct.window* %114, i32 0, i32 67
  %bf.load179 = load i16, i16* %fringes_outside_margins178, align 4
  %bf.lshr180 = lshr i16 %bf.load179, 12
  %bf.clear181 = and i16 %bf.lshr180, 1
  %bf.cast182 = trunc i16 %bf.clear181 to i1
  br i1 %bf.cast182, label %cond.true.183, label %cond.false.193

cond.true.183:                                    ; preds = %cond.end.173
  %115 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %115, i32 0, i32 58
  %116 = load i32, i32* %right_fringe_width, align 4
  %cmp184 = icmp sge i32 %116, 0
  br i1 %cmp184, label %cond.true.185, label %cond.false.187

cond.true.185:                                    ; preds = %cond.true.183
  %117 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width186 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 58
  %118 = load i32, i32* %right_fringe_width186, align 4
  br label %cond.end.191

cond.false.187:                                   ; preds = %cond.true.183
  %119 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame188 = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 1
  %120 = load i64, i64* %frame188, align 8
  %sub189 = sub nsw i64 %120, 5
  %121 = inttoptr i64 %sub189 to i8*
  %122 = bitcast i8* %121 to %struct.frame*
  %right_fringe_width190 = getelementptr inbounds %struct.frame, %struct.frame* %122, i32 0, i32 55
  %123 = load i32, i32* %right_fringe_width190, align 4
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.187, %cond.true.185
  %cond192 = phi i32 [ %118, %cond.true.185 ], [ %123, %cond.false.187 ]
  br label %cond.end.194

cond.false.193:                                   ; preds = %cond.end.173
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.false.193, %cond.end.191
  %cond195 = phi i32 [ %cond192, %cond.end.191 ], [ 0, %cond.false.193 ]
  %add196 = add nsw i32 %add177, %cond195
  store i32 %add196, i32* %retval
  br label %return

sw.bb.197:                                        ; preds = %cond.end.44, %cond.end.44, %cond.end.44, %cond.end.44, %cond.end.44, %cond.end.44
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.44
  call void @emacs_abort() #5
  unreachable

return:                                           ; preds = %sw.bb.197, %cond.end.194, %cond.end.80, %cond.end.59, %sw.bb.48, %sw.bb
  %124 = load i32, i32* %retval
  ret i32 %124
}

declare i32 @window_box_left(%struct.window*, i32) #1

declare i32 @window_box_width(%struct.window*, i32) #1

; Function Attrs: nounwind uwtable
define i64 @Fcoordinates_in_window_p(i64 %coordinates, i64 %window) #0 {
entry:
  %retval = alloca i64, align 8
  %coordinates.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %lx = alloca i64, align 8
  %ly = alloca i64, align 8
  store i64 %coordinates, i64* %coordinates.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  %5 = load i64, i64* %coordinates.addr, align 8
  call void @CHECK_CONS(i64 %5)
  %6 = load i64, i64* %coordinates.addr, align 8
  %call1 = call i64 @Fcar(i64 %6)
  store i64 %call1, i64* %lx, align 8
  %7 = load i64, i64* %coordinates.addr, align 8
  %call2 = call i64 @Fcdr(i64 %7)
  store i64 %call2, i64* %ly, align 8
  %8 = load i64, i64* %lx, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %8)
  %9 = load i64, i64* %ly, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %9)
  %10 = load i64, i64* %lx, align 8
  %and = and i64 %10, 7
  %conv = trunc i64 %and to i32
  %and3 = and i32 %conv, -5
  %cmp = icmp eq i32 %and3, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i64, i64* %lx, align 8
  %shr = ashr i64 %11, 2
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 59
  %13 = load i32, i32* %column_width, align 4
  %conv5 = sext i32 %13 to i64
  %mul = mul nsw i64 %shr, %conv5
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load i64, i64* %lx, align 8
  %call6 = call double @XFLOAT_DATA(i64 %14)
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width7 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 59
  %16 = load i32, i32* %column_width7, align 4
  %conv8 = sitofp i32 %16 to double
  %mul9 = fmul double %call6, %conv8
  %conv10 = fptosi double %mul9 to i32
  %conv11 = sext i32 %conv10 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul, %cond.true ], [ %conv11, %cond.false ]
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 51
  %18 = load i32, i32* %internal_border_width, align 4
  %conv12 = sext i32 %18 to i64
  %add = add nsw i64 %cond, %conv12
  %conv13 = trunc i64 %add to i32
  store i32 %conv13, i32* %x, align 4
  %19 = load i64, i64* %ly, align 8
  %and14 = and i64 %19, 7
  %conv15 = trunc i64 %and14 to i32
  %and16 = and i32 %conv15, -5
  %cmp17 = icmp eq i32 %and16, 2
  br i1 %cmp17, label %cond.true.19, label %cond.false.23

cond.true.19:                                     ; preds = %cond.end
  %20 = load i64, i64* %ly, align 8
  %shr20 = ashr i64 %20, 2
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 60
  %22 = load i32, i32* %line_height, align 4
  %conv21 = sext i32 %22 to i64
  %mul22 = mul nsw i64 %shr20, %conv21
  br label %cond.end.30

cond.false.23:                                    ; preds = %cond.end
  %23 = load i64, i64* %ly, align 8
  %call24 = call double @XFLOAT_DATA(i64 %23)
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height25 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 60
  %25 = load i32, i32* %line_height25, align 4
  %conv26 = sitofp i32 %25 to double
  %mul27 = fmul double %call24, %conv26
  %conv28 = fptosi double %mul27 to i32
  %conv29 = sext i32 %conv28 to i64
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.23, %cond.true.19
  %cond31 = phi i64 [ %mul22, %cond.true.19 ], [ %conv29, %cond.false.23 ]
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width32 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 51
  %27 = load i32, i32* %internal_border_width32, align 4
  %conv33 = sext i32 %27 to i64
  %add34 = add nsw i64 %cond31, %conv33
  %conv35 = trunc i64 %add34 to i32
  store i32 %conv35, i32* %y, align 4
  %28 = load %struct.window*, %struct.window** %w, align 8
  %29 = load i32, i32* %x, align 4
  %30 = load i32, i32* %y, align 4
  %call36 = call i32 @coordinates_in_window(%struct.window* %28, i32 %29, i32 %30)
  switch i32 %call36, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.38
    i32 2, label %sw.bb.78
    i32 3, label %sw.bb.80
    i32 4, label %sw.bb.82
    i32 5, label %sw.bb.84
    i32 6, label %sw.bb.86
    i32 7, label %sw.bb.88
    i32 8, label %sw.bb.90
    i32 9, label %sw.bb.92
    i32 10, label %sw.bb.94
    i32 11, label %sw.bb.96
    i32 12, label %sw.bb.98
  ]

sw.bb:                                            ; preds = %cond.end.30
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call37, i64* %retval
  br label %return

sw.bb.38:                                         ; preds = %cond.end.30
  %31 = load %struct.window*, %struct.window** %w, align 8
  %call39 = call i32 @window_box_left(%struct.window* %31, i32 1)
  %32 = load i32, i32* %x, align 4
  %sub40 = sub nsw i32 %32, %call39
  store i32 %sub40, i32* %x, align 4
  %33 = load %struct.window*, %struct.window** %w, align 8
  %frame41 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 1
  %34 = load i64, i64* %frame41, align 8
  %sub42 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub42 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %internal_border_width43 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 51
  %37 = load i32, i32* %internal_border_width43, align 4
  %38 = load %struct.window*, %struct.window** %w, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 31
  %39 = load i32, i32* %pixel_top, align 4
  %add44 = add nsw i32 %37, %39
  %40 = load i32, i32* %y, align 4
  %sub45 = sub nsw i32 %40, %add44
  store i32 %sub45, i32* %y, align 4
  %41 = load i32, i32* %x, align 4
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width46 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 59
  %43 = load i32, i32* %column_width46, align 4
  %rem = srem i32 %41, %43
  %cmp47 = icmp ne i32 %rem, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.54

cond.true.49:                                     ; preds = %sw.bb.38
  %44 = load i32, i32* %x, align 4
  %conv50 = sitofp i32 %44 to double
  %45 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width51 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 59
  %46 = load i32, i32* %column_width51, align 4
  %conv52 = sitofp i32 %46 to double
  %div = fdiv double %conv50, %conv52
  %call53 = call i64 @make_float(double %div)
  br label %cond.end.59

cond.false.54:                                    ; preds = %sw.bb.38
  %47 = load i32, i32* %x, align 4
  %48 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width55 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 59
  %49 = load i32, i32* %column_width55, align 4
  %div56 = sdiv i32 %47, %49
  %conv57 = sext i32 %div56 to i64
  %shl = shl i64 %conv57, 2
  %add58 = add i64 %shl, 2
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.54, %cond.true.49
  %cond60 = phi i64 [ %call53, %cond.true.49 ], [ %add58, %cond.false.54 ]
  %50 = load i32, i32* %y, align 4
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height61 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 60
  %52 = load i32, i32* %line_height61, align 4
  %rem62 = srem i32 %50, %52
  %tobool = icmp ne i32 %rem62, 0
  br i1 %tobool, label %cond.true.63, label %cond.false.69

cond.true.63:                                     ; preds = %cond.end.59
  %53 = load i32, i32* %y, align 4
  %conv64 = sitofp i32 %53 to double
  %54 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height65 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 60
  %55 = load i32, i32* %line_height65, align 4
  %conv66 = sitofp i32 %55 to double
  %div67 = fdiv double %conv64, %conv66
  %call68 = call i64 @make_float(double %div67)
  br label %cond.end.75

cond.false.69:                                    ; preds = %cond.end.59
  %56 = load i32, i32* %y, align 4
  %57 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height70 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 60
  %58 = load i32, i32* %line_height70, align 4
  %div71 = sdiv i32 %56, %58
  %conv72 = sext i32 %div71 to i64
  %shl73 = shl i64 %conv72, 2
  %add74 = add i64 %shl73, 2
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.69, %cond.true.63
  %cond76 = phi i64 [ %call68, %cond.true.63 ], [ %add74, %cond.false.69 ]
  %call77 = call i64 @Fcons(i64 %cond60, i64 %cond76)
  store i64 %call77, i64* %retval
  br label %return

sw.bb.78:                                         ; preds = %cond.end.30
  %call79 = call i64 @builtin_lisp_symbol(i32 672)
  store i64 %call79, i64* %retval
  br label %return

sw.bb.80:                                         ; preds = %cond.end.30
  %call81 = call i64 @builtin_lisp_symbol(i32 1001)
  store i64 %call81, i64* %retval
  br label %return

sw.bb.82:                                         ; preds = %cond.end.30
  %call83 = call i64 @builtin_lisp_symbol(i32 513)
  store i64 %call83, i64* %retval
  br label %return

sw.bb.84:                                         ; preds = %cond.end.30
  %call85 = call i64 @builtin_lisp_symbol(i32 608)
  store i64 %call85, i64* %retval
  br label %return

sw.bb.86:                                         ; preds = %cond.end.30
  %call87 = call i64 @builtin_lisp_symbol(i32 814)
  store i64 %call87, i64* %retval
  br label %return

sw.bb.88:                                         ; preds = %cond.end.30
  %call89 = call i64 @builtin_lisp_symbol(i32 609)
  store i64 %call89, i64* %retval
  br label %return

sw.bb.90:                                         ; preds = %cond.end.30
  %call91 = call i64 @builtin_lisp_symbol(i32 815)
  store i64 %call91, i64* %retval
  br label %return

sw.bb.92:                                         ; preds = %cond.end.30
  %call93 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call93, i64* %retval
  br label %return

sw.bb.94:                                         ; preds = %cond.end.30
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call95, i64* %retval
  br label %return

sw.bb.96:                                         ; preds = %cond.end.30
  %call97 = call i64 @builtin_lisp_symbol(i32 812)
  store i64 %call97, i64* %retval
  br label %return

sw.bb.98:                                         ; preds = %cond.end.30
  %call99 = call i64 @builtin_lisp_symbol(i32 214)
  store i64 %call99, i64* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.30
  call void @emacs_abort() #5
  unreachable

return:                                           ; preds = %sw.bb.98, %sw.bb.96, %sw.bb.94, %sw.bb.92, %sw.bb.90, %sw.bb.88, %sw.bb.86, %sw.bb.84, %sw.bb.82, %sw.bb.80, %sw.bb.78, %cond.end.75, %sw.bb
  %59 = load i64, i64* %retval
  ret i64 %59
}

declare void @CHECK_CONS(i64) #1

declare i64 @Fcar(i64) #1

declare i64 @Fcdr(i64) #1

declare void @CHECK_NUMBER_OR_FLOAT(i64) #1

declare double @XFLOAT_DATA(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @coordinates_in_window(%struct.window* %w, i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %part = alloca i32, align 4
  %ux = alloca i32, align 4
  %left_x = alloca i32, align 4
  %right_x = alloca i32, align 4
  %top_y = alloca i32, align 4
  %bottom_y = alloca i32, align 4
  %grabbable_width = alloca i32, align 4
  %lmargin_width = alloca i32, align 4
  %rmargin_width = alloca i32, align 4
  %text_left = alloca i32, align 4
  %text_right = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 59
  %5 = load i32, i32* %column_width, align 4
  store i32 %5, i32* %ux, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame1, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 51
  %10 = load i32, i32* %internal_border_width, align 4
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 30
  %12 = load i32, i32* %pixel_left, align 4
  %add = add nsw i32 %10, %12
  store i32 %add, i32* %left_x, align 4
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame3 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 1
  %14 = load i64, i64* %frame3, align 8
  %sub4 = sub nsw i64 %14, 5
  %15 = inttoptr i64 %sub4 to i8*
  %16 = bitcast i8* %15 to %struct.frame*
  %internal_border_width5 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 51
  %17 = load i32, i32* %internal_border_width5, align 4
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left6 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 30
  %19 = load i32, i32* %pixel_left6, align 4
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 34
  %21 = load i32, i32* %pixel_width, align 4
  %add7 = add nsw i32 %19, %21
  %add8 = add nsw i32 %17, %add7
  store i32 %add8, i32* %right_x, align 4
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame9 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 1
  %23 = load i64, i64* %frame9, align 8
  %sub10 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub10 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %internal_border_width11 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 51
  %26 = load i32, i32* %internal_border_width11, align 4
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 31
  %28 = load i32, i32* %pixel_top, align 4
  %add12 = add nsw i32 %26, %28
  store i32 %add12, i32* %top_y, align 4
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame13 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 1
  %30 = load i64, i64* %frame13, align 8
  %sub14 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub14 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %internal_border_width15 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 51
  %33 = load i32, i32* %internal_border_width15, align 4
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top16 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 31
  %35 = load i32, i32* %pixel_top16, align 4
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 35
  %37 = load i32, i32* %pixel_height, align 4
  %add17 = add nsw i32 %35, %37
  %add18 = add nsw i32 %33, %add17
  store i32 %add18, i32* %bottom_y, align 4
  %38 = load i32, i32* %ux, align 4
  store i32 %38, i32* %grabbable_width, align 4
  %39 = load i32, i32* %y.addr, align 4
  %40 = load i32, i32* %top_y, align 4
  %cmp = icmp slt i32 %39, %40
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %41 = load i32, i32* %y.addr, align 4
  %42 = load i32, i32* %bottom_y, align 4
  %cmp19 = icmp sge i32 %41, %42
  br i1 %cmp19, label %if.then, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false
  %43 = load i32, i32* %x.addr, align 4
  %44 = load i32, i32* %left_x, align 4
  %cmp21 = icmp slt i32 %43, %44
  br i1 %cmp21, label %if.then, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false.20
  %45 = load i32, i32* %x.addr, align 4
  %46 = load i32, i32* %right_x, align 4
  %cmp23 = icmp sge i32 %45, %46
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.22, %lor.lhs.false.20, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.22
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top24 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 31
  %48 = load i32, i32* %pixel_top24, align 4
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height25 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 35
  %50 = load i32, i32* %pixel_height25, align 4
  %add26 = add nsw i32 %48, %50
  %51 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame27 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 1
  %52 = load i64, i64* %frame27, align 8
  %sub28 = sub nsw i64 %52, 5
  %53 = inttoptr i64 %sub28 to i8*
  %54 = bitcast i8* %53 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 5
  %55 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %55)
  %pixel_top29 = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 31
  %56 = load i32, i32* %pixel_top29, align 4
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame30 = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 1
  %58 = load i64, i64* %frame30, align 8
  %sub31 = sub nsw i64 %58, 5
  %59 = inttoptr i64 %sub31 to i8*
  %60 = bitcast i8* %59 to %struct.frame*
  %root_window32 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 5
  %61 = load i64, i64* %root_window32, align 8
  %call33 = call %struct.window* @XWINDOW(i64 %61)
  %pixel_height34 = getelementptr inbounds %struct.window, %struct.window* %call33, i32 0, i32 35
  %62 = load i32, i32* %pixel_height34, align 4
  %add35 = add nsw i32 %56, %62
  %cmp36 = icmp eq i32 %add26, %add35
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false.43

land.lhs.true:                                    ; preds = %if.end
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame37 = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 1
  %64 = load i64, i64* %frame37, align 8
  %sub38 = sub nsw i64 %64, 5
  %65 = inttoptr i64 %sub38 to i8*
  %66 = bitcast i8* %65 to %struct.frame*
  %root_window39 = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 5
  %67 = load i64, i64* %root_window39, align 8
  %call40 = call %struct.window* @XWINDOW(i64 %67)
  %next = getelementptr inbounds %struct.window, %struct.window* %call40, i32 0, i32 2
  %68 = load i64, i64* %next, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp42 = icmp eq i64 %68, %call41
  br i1 %cmp42, label %cond.true, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %land.lhs.true, %if.end
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 3
  %70 = load i64, i64* %prev, align 8
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame44 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 1
  %72 = load i64, i64* %frame44, align 8
  %sub45 = sub nsw i64 %72, 5
  %73 = inttoptr i64 %sub45 to i8*
  %74 = bitcast i8* %73 to %struct.frame*
  %root_window46 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 5
  %75 = load i64, i64* %root_window46, align 8
  %cmp47 = icmp eq i64 %70, %75
  br i1 %cmp47, label %cond.true, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.43
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.48, %lor.lhs.false.43, %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.48
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame49 = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 1
  %78 = load i64, i64* %frame49, align 8
  %sub50 = sub nsw i64 %78, 5
  %79 = inttoptr i64 %sub50 to i8*
  %80 = bitcast i8* %79 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 53
  %81 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %81, %cond.false ]
  %cmp51 = icmp sgt i32 %cond, 0
  br i1 %cmp51, label %land.lhs.true.52, label %if.else

land.lhs.true.52:                                 ; preds = %cond.end
  %82 = load i32, i32* %y.addr, align 4
  %83 = load i32, i32* %bottom_y, align 4
  %84 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top53 = getelementptr inbounds %struct.window, %struct.window* %84, i32 0, i32 31
  %85 = load i32, i32* %pixel_top53, align 4
  %86 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height54 = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 35
  %87 = load i32, i32* %pixel_height54, align 4
  %add55 = add nsw i32 %85, %87
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame56 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 1
  %89 = load i64, i64* %frame56, align 8
  %sub57 = sub nsw i64 %89, 5
  %90 = inttoptr i64 %sub57 to i8*
  %91 = bitcast i8* %90 to %struct.frame*
  %root_window58 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 5
  %92 = load i64, i64* %root_window58, align 8
  %call59 = call %struct.window* @XWINDOW(i64 %92)
  %pixel_top60 = getelementptr inbounds %struct.window, %struct.window* %call59, i32 0, i32 31
  %93 = load i32, i32* %pixel_top60, align 4
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame61 = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 1
  %95 = load i64, i64* %frame61, align 8
  %sub62 = sub nsw i64 %95, 5
  %96 = inttoptr i64 %sub62 to i8*
  %97 = bitcast i8* %96 to %struct.frame*
  %root_window63 = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 5
  %98 = load i64, i64* %root_window63, align 8
  %call64 = call %struct.window* @XWINDOW(i64 %98)
  %pixel_height65 = getelementptr inbounds %struct.window, %struct.window* %call64, i32 0, i32 35
  %99 = load i32, i32* %pixel_height65, align 4
  %add66 = add nsw i32 %93, %99
  %cmp67 = icmp eq i32 %add55, %add66
  br i1 %cmp67, label %land.lhs.true.68, label %lor.lhs.false.76

land.lhs.true.68:                                 ; preds = %land.lhs.true.52
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame69 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 1
  %101 = load i64, i64* %frame69, align 8
  %sub70 = sub nsw i64 %101, 5
  %102 = inttoptr i64 %sub70 to i8*
  %103 = bitcast i8* %102 to %struct.frame*
  %root_window71 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 5
  %104 = load i64, i64* %root_window71, align 8
  %call72 = call %struct.window* @XWINDOW(i64 %104)
  %next73 = getelementptr inbounds %struct.window, %struct.window* %call72, i32 0, i32 2
  %105 = load i64, i64* %next73, align 8
  %call74 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp75 = icmp eq i64 %105, %call74
  br i1 %cmp75, label %cond.true.88, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %land.lhs.true.68, %land.lhs.true.52
  %106 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev77 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 3
  %107 = load i64, i64* %prev77, align 8
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame78 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 1
  %109 = load i64, i64* %frame78, align 8
  %sub79 = sub nsw i64 %109, 5
  %110 = inttoptr i64 %sub79 to i8*
  %111 = bitcast i8* %110 to %struct.frame*
  %root_window80 = getelementptr inbounds %struct.frame, %struct.frame* %111, i32 0, i32 5
  %112 = load i64, i64* %root_window80, align 8
  %cmp81 = icmp eq i64 %107, %112
  br i1 %cmp81, label %cond.true.88, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %lor.lhs.false.76
  %113 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p83 = getelementptr inbounds %struct.window, %struct.window* %113, i32 0, i32 67
  %bf.load84 = load i16, i16* %pseudo_window_p83, align 4
  %bf.lshr85 = lshr i16 %bf.load84, 11
  %bf.clear86 = and i16 %bf.lshr85, 1
  %bf.cast87 = trunc i16 %bf.clear86 to i1
  br i1 %bf.cast87, label %cond.true.88, label %cond.false.89

cond.true.88:                                     ; preds = %lor.lhs.false.82, %lor.lhs.false.76, %land.lhs.true.68
  br label %cond.end.93

cond.false.89:                                    ; preds = %lor.lhs.false.82
  %114 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame90 = getelementptr inbounds %struct.window, %struct.window* %114, i32 0, i32 1
  %115 = load i64, i64* %frame90, align 8
  %sub91 = sub nsw i64 %115, 5
  %116 = inttoptr i64 %sub91 to i8*
  %117 = bitcast i8* %116 to %struct.frame*
  %bottom_divider_width92 = getelementptr inbounds %struct.frame, %struct.frame* %117, i32 0, i32 53
  %118 = load i32, i32* %bottom_divider_width92, align 4
  br label %cond.end.93

cond.end.93:                                      ; preds = %cond.false.89, %cond.true.88
  %cond94 = phi i32 [ 0, %cond.true.88 ], [ %118, %cond.false.89 ]
  %sub95 = sub nsw i32 %83, %cond94
  %cmp96 = icmp sge i32 %82, %sub95
  br i1 %cmp96, label %land.lhs.true.97, label %if.else

land.lhs.true.97:                                 ; preds = %cond.end.93
  %119 = load i32, i32* %y.addr, align 4
  %120 = load i32, i32* %bottom_y, align 4
  %cmp98 = icmp sle i32 %119, %120
  br i1 %cmp98, label %if.then.99, label %if.else

if.then.99:                                       ; preds = %land.lhs.true.97
  store i32 12, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.97, %cond.end.93, %cond.end
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left100 = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 30
  %122 = load i32, i32* %pixel_left100, align 4
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width101 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 34
  %124 = load i32, i32* %pixel_width101, align 4
  %add102 = add nsw i32 %122, %124
  %125 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame103 = getelementptr inbounds %struct.window, %struct.window* %125, i32 0, i32 1
  %126 = load i64, i64* %frame103, align 8
  %sub104 = sub nsw i64 %126, 5
  %127 = inttoptr i64 %sub104 to i8*
  %128 = bitcast i8* %127 to %struct.frame*
  %root_window105 = getelementptr inbounds %struct.frame, %struct.frame* %128, i32 0, i32 5
  %129 = load i64, i64* %root_window105, align 8
  %call106 = call %struct.window* @XWINDOW(i64 %129)
  %pixel_left107 = getelementptr inbounds %struct.window, %struct.window* %call106, i32 0, i32 30
  %130 = load i32, i32* %pixel_left107, align 4
  %131 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame108 = getelementptr inbounds %struct.window, %struct.window* %131, i32 0, i32 1
  %132 = load i64, i64* %frame108, align 8
  %sub109 = sub nsw i64 %132, 5
  %133 = inttoptr i64 %sub109 to i8*
  %134 = bitcast i8* %133 to %struct.frame*
  %root_window110 = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 5
  %135 = load i64, i64* %root_window110, align 8
  %call111 = call %struct.window* @XWINDOW(i64 %135)
  %pixel_width112 = getelementptr inbounds %struct.window, %struct.window* %call111, i32 0, i32 34
  %136 = load i32, i32* %pixel_width112, align 4
  %add113 = add nsw i32 %130, %136
  %cmp114 = icmp eq i32 %add102, %add113
  br i1 %cmp114, label %if.else.175, label %land.lhs.true.115

land.lhs.true.115:                                ; preds = %if.else
  %137 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left116 = getelementptr inbounds %struct.window, %struct.window* %137, i32 0, i32 30
  %138 = load i32, i32* %pixel_left116, align 4
  %139 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width117 = getelementptr inbounds %struct.window, %struct.window* %139, i32 0, i32 34
  %140 = load i32, i32* %pixel_width117, align 4
  %add118 = add nsw i32 %138, %140
  %141 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame119 = getelementptr inbounds %struct.window, %struct.window* %141, i32 0, i32 1
  %142 = load i64, i64* %frame119, align 8
  %sub120 = sub nsw i64 %142, 5
  %143 = inttoptr i64 %sub120 to i8*
  %144 = bitcast i8* %143 to %struct.frame*
  %root_window121 = getelementptr inbounds %struct.frame, %struct.frame* %144, i32 0, i32 5
  %145 = load i64, i64* %root_window121, align 8
  %call122 = call %struct.window* @XWINDOW(i64 %145)
  %pixel_left123 = getelementptr inbounds %struct.window, %struct.window* %call122, i32 0, i32 30
  %146 = load i32, i32* %pixel_left123, align 4
  %147 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame124 = getelementptr inbounds %struct.window, %struct.window* %147, i32 0, i32 1
  %148 = load i64, i64* %frame124, align 8
  %sub125 = sub nsw i64 %148, 5
  %149 = inttoptr i64 %sub125 to i8*
  %150 = bitcast i8* %149 to %struct.frame*
  %root_window126 = getelementptr inbounds %struct.frame, %struct.frame* %150, i32 0, i32 5
  %151 = load i64, i64* %root_window126, align 8
  %call127 = call %struct.window* @XWINDOW(i64 %151)
  %pixel_width128 = getelementptr inbounds %struct.window, %struct.window* %call127, i32 0, i32 34
  %152 = load i32, i32* %pixel_width128, align 4
  %add129 = add nsw i32 %146, %152
  %cmp130 = icmp eq i32 %add118, %add129
  br i1 %cmp130, label %cond.true.135, label %lor.lhs.false.131

lor.lhs.false.131:                                ; preds = %land.lhs.true.115
  %153 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 67
  %bf.load132 = load i16, i16* %mini, align 4
  %bf.clear133 = and i16 %bf.load132, 1
  %bf.cast134 = trunc i16 %bf.clear133 to i1
  br i1 %bf.cast134, label %cond.true.135, label %cond.false.136

cond.true.135:                                    ; preds = %lor.lhs.false.131, %land.lhs.true.115
  br label %cond.end.139

cond.false.136:                                   ; preds = %lor.lhs.false.131
  %154 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame137 = getelementptr inbounds %struct.window, %struct.window* %154, i32 0, i32 1
  %155 = load i64, i64* %frame137, align 8
  %sub138 = sub nsw i64 %155, 5
  %156 = inttoptr i64 %sub138 to i8*
  %157 = bitcast i8* %156 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %157, i32 0, i32 52
  %158 = load i32, i32* %right_divider_width, align 4
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.136, %cond.true.135
  %cond140 = phi i32 [ 0, %cond.true.135 ], [ %158, %cond.false.136 ]
  %cmp141 = icmp sgt i32 %cond140, 0
  br i1 %cmp141, label %land.lhs.true.142, label %if.else.175

land.lhs.true.142:                                ; preds = %cond.end.139
  %159 = load i32, i32* %x.addr, align 4
  %160 = load i32, i32* %right_x, align 4
  %161 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left143 = getelementptr inbounds %struct.window, %struct.window* %161, i32 0, i32 30
  %162 = load i32, i32* %pixel_left143, align 4
  %163 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width144 = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 34
  %164 = load i32, i32* %pixel_width144, align 4
  %add145 = add nsw i32 %162, %164
  %165 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame146 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 1
  %166 = load i64, i64* %frame146, align 8
  %sub147 = sub nsw i64 %166, 5
  %167 = inttoptr i64 %sub147 to i8*
  %168 = bitcast i8* %167 to %struct.frame*
  %root_window148 = getelementptr inbounds %struct.frame, %struct.frame* %168, i32 0, i32 5
  %169 = load i64, i64* %root_window148, align 8
  %call149 = call %struct.window* @XWINDOW(i64 %169)
  %pixel_left150 = getelementptr inbounds %struct.window, %struct.window* %call149, i32 0, i32 30
  %170 = load i32, i32* %pixel_left150, align 4
  %171 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame151 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 1
  %172 = load i64, i64* %frame151, align 8
  %sub152 = sub nsw i64 %172, 5
  %173 = inttoptr i64 %sub152 to i8*
  %174 = bitcast i8* %173 to %struct.frame*
  %root_window153 = getelementptr inbounds %struct.frame, %struct.frame* %174, i32 0, i32 5
  %175 = load i64, i64* %root_window153, align 8
  %call154 = call %struct.window* @XWINDOW(i64 %175)
  %pixel_width155 = getelementptr inbounds %struct.window, %struct.window* %call154, i32 0, i32 34
  %176 = load i32, i32* %pixel_width155, align 4
  %add156 = add nsw i32 %170, %176
  %cmp157 = icmp eq i32 %add145, %add156
  br i1 %cmp157, label %cond.true.163, label %lor.lhs.false.158

lor.lhs.false.158:                                ; preds = %land.lhs.true.142
  %177 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini159 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 67
  %bf.load160 = load i16, i16* %mini159, align 4
  %bf.clear161 = and i16 %bf.load160, 1
  %bf.cast162 = trunc i16 %bf.clear161 to i1
  br i1 %bf.cast162, label %cond.true.163, label %cond.false.164

cond.true.163:                                    ; preds = %lor.lhs.false.158, %land.lhs.true.142
  br label %cond.end.168

cond.false.164:                                   ; preds = %lor.lhs.false.158
  %178 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame165 = getelementptr inbounds %struct.window, %struct.window* %178, i32 0, i32 1
  %179 = load i64, i64* %frame165, align 8
  %sub166 = sub nsw i64 %179, 5
  %180 = inttoptr i64 %sub166 to i8*
  %181 = bitcast i8* %180 to %struct.frame*
  %right_divider_width167 = getelementptr inbounds %struct.frame, %struct.frame* %181, i32 0, i32 52
  %182 = load i32, i32* %right_divider_width167, align 4
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.false.164, %cond.true.163
  %cond169 = phi i32 [ 0, %cond.true.163 ], [ %182, %cond.false.164 ]
  %sub170 = sub nsw i32 %160, %cond169
  %cmp171 = icmp sge i32 %159, %sub170
  br i1 %cmp171, label %land.lhs.true.172, label %if.else.175

land.lhs.true.172:                                ; preds = %cond.end.168
  %183 = load i32, i32* %x.addr, align 4
  %184 = load i32, i32* %right_x, align 4
  %cmp173 = icmp sle i32 %183, %184
  br i1 %cmp173, label %if.then.174, label %if.else.175

if.then.174:                                      ; preds = %land.lhs.true.172
  store i32 11, i32* %retval
  br label %return

if.else.175:                                      ; preds = %land.lhs.true.172, %cond.end.168, %cond.end.139, %if.else
  %185 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p176 = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 67
  %bf.load177 = load i16, i16* %pseudo_window_p176, align 4
  %bf.lshr178 = lshr i16 %bf.load177, 11
  %bf.clear179 = and i16 %bf.lshr178, 1
  %bf.cast180 = trunc i16 %bf.clear179 to i1
  br i1 %bf.cast180, label %cond.true.192, label %lor.lhs.false.181

lor.lhs.false.181:                                ; preds = %if.else.175
  %186 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini182 = getelementptr inbounds %struct.window, %struct.window* %186, i32 0, i32 67
  %bf.load183 = load i16, i16* %mini182, align 4
  %bf.clear184 = and i16 %bf.load183, 1
  %bf.cast185 = trunc i16 %bf.clear184 to i1
  br i1 %bf.cast185, label %land.lhs.true.186, label %cond.false.193

land.lhs.true.186:                                ; preds = %lor.lhs.false.181
  %187 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev187 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 3
  %188 = load i64, i64* %prev187, align 8
  %189 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame188 = getelementptr inbounds %struct.window, %struct.window* %189, i32 0, i32 1
  %190 = load i64, i64* %frame188, align 8
  %sub189 = sub nsw i64 %190, 5
  %191 = inttoptr i64 %sub189 to i8*
  %192 = bitcast i8* %191 to %struct.frame*
  %root_window190 = getelementptr inbounds %struct.frame, %struct.frame* %192, i32 0, i32 5
  %193 = load i64, i64* %root_window190, align 8
  %cmp191 = icmp eq i64 %188, %193
  br i1 %cmp191, label %cond.true.192, label %cond.false.193

cond.true.192:                                    ; preds = %land.lhs.true.186, %if.else.175
  br i1 false, label %land.lhs.true.209, label %if.else.476

cond.false.193:                                   ; preds = %land.lhs.true.186, %lor.lhs.false.181
  %194 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %194, i32 0, i32 18
  %195 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call194 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp195 = icmp eq i64 %195, %call194
  br i1 %cmp195, label %cond.true.196, label %cond.false.203

cond.true.196:                                    ; preds = %cond.false.193
  %196 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame197 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 1
  %197 = load i64, i64* %frame197, align 8
  %sub198 = sub nsw i64 %197, 5
  %198 = inttoptr i64 %sub198 to i8*
  %199 = bitcast i8* %198 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %199, i32 0, i32 26
  %200 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load199 = load i64, i64* %200, align 8
  %bf.lshr200 = lshr i64 %bf.load199, 32
  %bf.clear201 = and i64 %bf.lshr200, 1
  %bf.cast202 = trunc i64 %bf.clear201 to i1
  br i1 %bf.cast202, label %land.lhs.true.209, label %if.else.476

cond.false.203:                                   ; preds = %cond.false.193
  %201 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type204 = getelementptr inbounds %struct.window, %struct.window* %201, i32 0, i32 18
  %202 = load i64, i64* %horizontal_scroll_bar_type204, align 8
  %call205 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp206 = icmp eq i64 %202, %call205
  br i1 %cmp206, label %cond.true.207, label %cond.false.208

cond.true.207:                                    ; preds = %cond.false.203
  br i1 true, label %land.lhs.true.209, label %if.else.476

cond.false.208:                                   ; preds = %cond.false.203
  br i1 false, label %land.lhs.true.209, label %if.else.476

land.lhs.true.209:                                ; preds = %cond.false.208, %cond.true.207, %cond.true.196, %cond.true.192
  %203 = load i32, i32* %y.addr, align 4
  %204 = load i32, i32* %bottom_y, align 4
  %205 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p210 = getelementptr inbounds %struct.window, %struct.window* %205, i32 0, i32 67
  %bf.load211 = load i16, i16* %pseudo_window_p210, align 4
  %bf.lshr212 = lshr i16 %bf.load211, 11
  %bf.clear213 = and i16 %bf.lshr212, 1
  %bf.cast214 = trunc i16 %bf.clear213 to i1
  br i1 %bf.cast214, label %cond.true.226, label %lor.lhs.false.215

lor.lhs.false.215:                                ; preds = %land.lhs.true.209
  %206 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini216 = getelementptr inbounds %struct.window, %struct.window* %206, i32 0, i32 67
  %bf.load217 = load i16, i16* %mini216, align 4
  %bf.clear218 = and i16 %bf.load217, 1
  %bf.cast219 = trunc i16 %bf.clear218 to i1
  br i1 %bf.cast219, label %land.lhs.true.220, label %cond.false.227

land.lhs.true.220:                                ; preds = %lor.lhs.false.215
  %207 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev221 = getelementptr inbounds %struct.window, %struct.window* %207, i32 0, i32 3
  %208 = load i64, i64* %prev221, align 8
  %209 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame222 = getelementptr inbounds %struct.window, %struct.window* %209, i32 0, i32 1
  %210 = load i64, i64* %frame222, align 8
  %sub223 = sub nsw i64 %210, 5
  %211 = inttoptr i64 %sub223 to i8*
  %212 = bitcast i8* %211 to %struct.frame*
  %root_window224 = getelementptr inbounds %struct.frame, %struct.frame* %212, i32 0, i32 5
  %213 = load i64, i64* %root_window224, align 8
  %cmp225 = icmp eq i64 %208, %213
  br i1 %cmp225, label %cond.true.226, label %cond.false.227

cond.true.226:                                    ; preds = %land.lhs.true.220, %land.lhs.true.209
  br i1 false, label %cond.true.245, label %cond.false.254

cond.false.227:                                   ; preds = %land.lhs.true.220, %lor.lhs.false.215
  %214 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type228 = getelementptr inbounds %struct.window, %struct.window* %214, i32 0, i32 18
  %215 = load i64, i64* %horizontal_scroll_bar_type228, align 8
  %call229 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp230 = icmp eq i64 %215, %call229
  br i1 %cmp230, label %cond.true.231, label %cond.false.239

cond.true.231:                                    ; preds = %cond.false.227
  %216 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame232 = getelementptr inbounds %struct.window, %struct.window* %216, i32 0, i32 1
  %217 = load i64, i64* %frame232, align 8
  %sub233 = sub nsw i64 %217, 5
  %218 = inttoptr i64 %sub233 to i8*
  %219 = bitcast i8* %218 to %struct.frame*
  %horizontal_scroll_bars234 = getelementptr inbounds %struct.frame, %struct.frame* %219, i32 0, i32 26
  %220 = bitcast i48* %horizontal_scroll_bars234 to i64*
  %bf.load235 = load i64, i64* %220, align 8
  %bf.lshr236 = lshr i64 %bf.load235, 32
  %bf.clear237 = and i64 %bf.lshr236, 1
  %bf.cast238 = trunc i64 %bf.clear237 to i1
  br i1 %bf.cast238, label %cond.true.245, label %cond.false.254

cond.false.239:                                   ; preds = %cond.false.227
  %221 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type240 = getelementptr inbounds %struct.window, %struct.window* %221, i32 0, i32 18
  %222 = load i64, i64* %horizontal_scroll_bar_type240, align 8
  %call241 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp242 = icmp eq i64 %222, %call241
  br i1 %cmp242, label %cond.true.243, label %cond.false.244

cond.true.243:                                    ; preds = %cond.false.239
  br i1 true, label %cond.true.245, label %cond.false.254

cond.false.244:                                   ; preds = %cond.false.239
  br i1 false, label %cond.true.245, label %cond.false.254

cond.true.245:                                    ; preds = %cond.false.244, %cond.true.243, %cond.true.231, %cond.true.226
  %223 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %223, i32 0, i32 62
  %224 = load i32, i32* %scroll_bar_height, align 4
  %cmp246 = icmp sge i32 %224, 0
  br i1 %cmp246, label %cond.true.247, label %cond.false.249

cond.true.247:                                    ; preds = %cond.true.245
  %225 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height248 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 62
  %226 = load i32, i32* %scroll_bar_height248, align 4
  br label %cond.end.252

cond.false.249:                                   ; preds = %cond.true.245
  %227 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame250 = getelementptr inbounds %struct.window, %struct.window* %227, i32 0, i32 1
  %228 = load i64, i64* %frame250, align 8
  %sub251 = sub nsw i64 %228, 5
  %229 = inttoptr i64 %sub251 to i8*
  %230 = bitcast i8* %229 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %230, i32 0, i32 71
  %231 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.false.249, %cond.true.247
  %cond253 = phi i32 [ %226, %cond.true.247 ], [ %231, %cond.false.249 ]
  br label %cond.end.255

cond.false.254:                                   ; preds = %cond.false.244, %cond.true.243, %cond.true.231, %cond.true.226
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.false.254, %cond.end.252
  %cond256 = phi i32 [ %cond253, %cond.end.252 ], [ 0, %cond.false.254 ]
  %sub257 = sub nsw i32 %204, %cond256
  %232 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %232, i32 0, i32 63
  %233 = load i32, i32* %mode_line_height, align 4
  %cmp258 = icmp sge i32 %233, 0
  br i1 %cmp258, label %cond.true.259, label %cond.false.261

cond.true.259:                                    ; preds = %cond.end.255
  %234 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height260 = getelementptr inbounds %struct.window, %struct.window* %234, i32 0, i32 63
  %235 = load i32, i32* %mode_line_height260, align 4
  br label %cond.end.313

cond.false.261:                                   ; preds = %cond.end.255
  %236 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %236, i32 0, i32 24
  %237 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %237, null
  br i1 %tobool, label %land.lhs.true.262, label %cond.false.271

land.lhs.true.262:                                ; preds = %cond.false.261
  %238 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix263 = getelementptr inbounds %struct.window, %struct.window* %238, i32 0, i32 24
  %239 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix263, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %239, i32 0, i32 1
  %240 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool264 = icmp ne %struct.glyph_row* %240, null
  br i1 %tobool264, label %cond.true.265, label %cond.false.271

cond.true.265:                                    ; preds = %land.lhs.true.262
  %241 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix266 = getelementptr inbounds %struct.window, %struct.window* %241, i32 0, i32 24
  %242 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix266, align 8
  %rows267 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %242, i32 0, i32 1
  %243 = load %struct.glyph_row*, %struct.glyph_row** %rows267, align 8
  %244 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix268 = getelementptr inbounds %struct.window, %struct.window* %244, i32 0, i32 24
  %245 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix268, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %245, i32 0, i32 3
  %246 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %246 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %243, i64 %idx.ext
  %add.ptr269 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr269, i32 0, i32 7
  %247 = load i32, i32* %height, align 4
  %tobool270 = icmp ne i32 %247, 0
  br i1 %tobool270, label %cond.true.272, label %cond.false.291

cond.false.271:                                   ; preds = %land.lhs.true.262, %cond.false.261
  br i1 false, label %cond.true.272, label %cond.false.291

cond.true.272:                                    ; preds = %cond.false.271, %cond.true.265
  %248 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix273 = getelementptr inbounds %struct.window, %struct.window* %248, i32 0, i32 24
  %249 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix273, align 8
  %tobool274 = icmp ne %struct.glyph_matrix* %249, null
  br i1 %tobool274, label %land.lhs.true.275, label %cond.false.288

land.lhs.true.275:                                ; preds = %cond.true.272
  %250 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix276 = getelementptr inbounds %struct.window, %struct.window* %250, i32 0, i32 24
  %251 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix276, align 8
  %rows277 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %251, i32 0, i32 1
  %252 = load %struct.glyph_row*, %struct.glyph_row** %rows277, align 8
  %tobool278 = icmp ne %struct.glyph_row* %252, null
  br i1 %tobool278, label %cond.true.279, label %cond.false.288

cond.true.279:                                    ; preds = %land.lhs.true.275
  %253 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix280 = getelementptr inbounds %struct.window, %struct.window* %253, i32 0, i32 24
  %254 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix280, align 8
  %rows281 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %254, i32 0, i32 1
  %255 = load %struct.glyph_row*, %struct.glyph_row** %rows281, align 8
  %256 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix282 = getelementptr inbounds %struct.window, %struct.window* %256, i32 0, i32 24
  %257 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix282, align 8
  %nrows283 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %257, i32 0, i32 3
  %258 = load i32, i32* %nrows283, align 4
  %idx.ext284 = sext i32 %258 to i64
  %add.ptr285 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %255, i64 %idx.ext284
  %add.ptr286 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr285, i64 -1
  %height287 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr286, i32 0, i32 7
  %259 = load i32, i32* %height287, align 4
  br label %cond.end.289

cond.false.288:                                   ; preds = %land.lhs.true.275, %cond.true.272
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.288, %cond.true.279
  %cond290 = phi i32 [ %259, %cond.true.279 ], [ 0, %cond.false.288 ]
  br label %cond.end.310

cond.false.291:                                   ; preds = %cond.false.271, %cond.true.265
  %260 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame292 = getelementptr inbounds %struct.window, %struct.window* %260, i32 0, i32 1
  %261 = load i64, i64* %frame292, align 8
  %sub293 = sub nsw i64 %261, 5
  %262 = inttoptr i64 %sub293 to i8*
  %263 = bitcast i8* %262 to %struct.frame*
  %264 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool294 = trunc i8 %264 to i1
  br i1 %tobool294, label %lor.lhs.false.295, label %lor.end

lor.lhs.false.295:                                ; preds = %cond.false.291
  %265 = load %struct.window*, %struct.window** %w.addr, align 8
  %266 = load i64, i64* @selected_window, align 8
  %call296 = call %struct.window* @XWINDOW(i64 %266)
  %cmp297 = icmp eq %struct.window* %265, %call296
  br i1 %cmp297, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.295
  %267 = load i64, i64* @minibuf_level, align 8
  %cmp298 = icmp sgt i64 %267, 0
  br i1 %cmp298, label %land.lhs.true.299, label %land.end

land.lhs.true.299:                                ; preds = %lor.rhs
  %268 = load i64, i64* @minibuf_selected_window, align 8
  %call300 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp301 = icmp eq i64 %268, %call300
  br i1 %cmp301, label %land.end, label %land.lhs.true.302

land.lhs.true.302:                                ; preds = %land.lhs.true.299
  %269 = load i64, i64* @selected_window, align 8
  %call303 = call %struct.window* @XWINDOW(i64 %269)
  %270 = load i64, i64* @minibuf_window, align 8
  %call304 = call %struct.window* @XWINDOW(i64 %270)
  %cmp305 = icmp eq %struct.window* %call303, %call304
  br i1 %cmp305, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.302
  %271 = load %struct.window*, %struct.window** %w.addr, align 8
  %272 = load i64, i64* @minibuf_selected_window, align 8
  %call306 = call %struct.window* @XWINDOW(i64 %272)
  %cmp307 = icmp eq %struct.window* %271, %call306
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.302, %land.lhs.true.299, %lor.rhs
  %273 = phi i1 [ false, %land.lhs.true.302 ], [ false, %land.lhs.true.299 ], [ false, %lor.rhs ], [ %cmp307, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.295, %cond.false.291
  %274 = phi i1 [ true, %lor.lhs.false.295 ], [ true, %cond.false.291 ], [ %273, %land.end ]
  %cond308 = select i1 %274, i32 1, i32 2
  %call309 = call i32 @estimate_mode_line_height(%struct.frame* %263, i32 %cond308)
  br label %cond.end.310

cond.end.310:                                     ; preds = %lor.end, %cond.end.289
  %cond311 = phi i32 [ %cond290, %cond.end.289 ], [ %call309, %lor.end ]
  %275 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height312 = getelementptr inbounds %struct.window, %struct.window* %275, i32 0, i32 63
  store i32 %cond311, i32* %mode_line_height312, align 4
  br label %cond.end.313

cond.end.313:                                     ; preds = %cond.end.310, %cond.true.259
  %cond314 = phi i32 [ %235, %cond.true.259 ], [ %cond311, %cond.end.310 ]
  %sub315 = sub nsw i32 %sub257, %cond314
  %276 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top316 = getelementptr inbounds %struct.window, %struct.window* %276, i32 0, i32 31
  %277 = load i32, i32* %pixel_top316, align 4
  %278 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height317 = getelementptr inbounds %struct.window, %struct.window* %278, i32 0, i32 35
  %279 = load i32, i32* %pixel_height317, align 4
  %add318 = add nsw i32 %277, %279
  %280 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame319 = getelementptr inbounds %struct.window, %struct.window* %280, i32 0, i32 1
  %281 = load i64, i64* %frame319, align 8
  %sub320 = sub nsw i64 %281, 5
  %282 = inttoptr i64 %sub320 to i8*
  %283 = bitcast i8* %282 to %struct.frame*
  %root_window321 = getelementptr inbounds %struct.frame, %struct.frame* %283, i32 0, i32 5
  %284 = load i64, i64* %root_window321, align 8
  %call322 = call %struct.window* @XWINDOW(i64 %284)
  %pixel_top323 = getelementptr inbounds %struct.window, %struct.window* %call322, i32 0, i32 31
  %285 = load i32, i32* %pixel_top323, align 4
  %286 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame324 = getelementptr inbounds %struct.window, %struct.window* %286, i32 0, i32 1
  %287 = load i64, i64* %frame324, align 8
  %sub325 = sub nsw i64 %287, 5
  %288 = inttoptr i64 %sub325 to i8*
  %289 = bitcast i8* %288 to %struct.frame*
  %root_window326 = getelementptr inbounds %struct.frame, %struct.frame* %289, i32 0, i32 5
  %290 = load i64, i64* %root_window326, align 8
  %call327 = call %struct.window* @XWINDOW(i64 %290)
  %pixel_height328 = getelementptr inbounds %struct.window, %struct.window* %call327, i32 0, i32 35
  %291 = load i32, i32* %pixel_height328, align 4
  %add329 = add nsw i32 %285, %291
  %cmp330 = icmp eq i32 %add318, %add329
  br i1 %cmp330, label %land.lhs.true.331, label %lor.lhs.false.339

land.lhs.true.331:                                ; preds = %cond.end.313
  %292 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame332 = getelementptr inbounds %struct.window, %struct.window* %292, i32 0, i32 1
  %293 = load i64, i64* %frame332, align 8
  %sub333 = sub nsw i64 %293, 5
  %294 = inttoptr i64 %sub333 to i8*
  %295 = bitcast i8* %294 to %struct.frame*
  %root_window334 = getelementptr inbounds %struct.frame, %struct.frame* %295, i32 0, i32 5
  %296 = load i64, i64* %root_window334, align 8
  %call335 = call %struct.window* @XWINDOW(i64 %296)
  %next336 = getelementptr inbounds %struct.window, %struct.window* %call335, i32 0, i32 2
  %297 = load i64, i64* %next336, align 8
  %call337 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp338 = icmp eq i64 %297, %call337
  br i1 %cmp338, label %cond.true.351, label %lor.lhs.false.339

lor.lhs.false.339:                                ; preds = %land.lhs.true.331, %cond.end.313
  %298 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev340 = getelementptr inbounds %struct.window, %struct.window* %298, i32 0, i32 3
  %299 = load i64, i64* %prev340, align 8
  %300 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame341 = getelementptr inbounds %struct.window, %struct.window* %300, i32 0, i32 1
  %301 = load i64, i64* %frame341, align 8
  %sub342 = sub nsw i64 %301, 5
  %302 = inttoptr i64 %sub342 to i8*
  %303 = bitcast i8* %302 to %struct.frame*
  %root_window343 = getelementptr inbounds %struct.frame, %struct.frame* %303, i32 0, i32 5
  %304 = load i64, i64* %root_window343, align 8
  %cmp344 = icmp eq i64 %299, %304
  br i1 %cmp344, label %cond.true.351, label %lor.lhs.false.345

lor.lhs.false.345:                                ; preds = %lor.lhs.false.339
  %305 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p346 = getelementptr inbounds %struct.window, %struct.window* %305, i32 0, i32 67
  %bf.load347 = load i16, i16* %pseudo_window_p346, align 4
  %bf.lshr348 = lshr i16 %bf.load347, 11
  %bf.clear349 = and i16 %bf.lshr348, 1
  %bf.cast350 = trunc i16 %bf.clear349 to i1
  br i1 %bf.cast350, label %cond.true.351, label %cond.false.352

cond.true.351:                                    ; preds = %lor.lhs.false.345, %lor.lhs.false.339, %land.lhs.true.331
  br label %cond.end.356

cond.false.352:                                   ; preds = %lor.lhs.false.345
  %306 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame353 = getelementptr inbounds %struct.window, %struct.window* %306, i32 0, i32 1
  %307 = load i64, i64* %frame353, align 8
  %sub354 = sub nsw i64 %307, 5
  %308 = inttoptr i64 %sub354 to i8*
  %309 = bitcast i8* %308 to %struct.frame*
  %bottom_divider_width355 = getelementptr inbounds %struct.frame, %struct.frame* %309, i32 0, i32 53
  %310 = load i32, i32* %bottom_divider_width355, align 4
  br label %cond.end.356

cond.end.356:                                     ; preds = %cond.false.352, %cond.true.351
  %cond357 = phi i32 [ 0, %cond.true.351 ], [ %310, %cond.false.352 ]
  %sub358 = sub nsw i32 %sub315, %cond357
  %cmp359 = icmp sge i32 %203, %sub358
  br i1 %cmp359, label %land.lhs.true.360, label %if.else.476

land.lhs.true.360:                                ; preds = %cond.end.356
  %311 = load i32, i32* %y.addr, align 4
  %312 = load i32, i32* %bottom_y, align 4
  %313 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height361 = getelementptr inbounds %struct.window, %struct.window* %313, i32 0, i32 63
  %314 = load i32, i32* %mode_line_height361, align 4
  %cmp362 = icmp sge i32 %314, 0
  br i1 %cmp362, label %cond.true.363, label %cond.false.365

cond.true.363:                                    ; preds = %land.lhs.true.360
  %315 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height364 = getelementptr inbounds %struct.window, %struct.window* %315, i32 0, i32 63
  %316 = load i32, i32* %mode_line_height364, align 4
  br label %cond.end.428

cond.false.365:                                   ; preds = %land.lhs.true.360
  %317 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix366 = getelementptr inbounds %struct.window, %struct.window* %317, i32 0, i32 24
  %318 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix366, align 8
  %tobool367 = icmp ne %struct.glyph_matrix* %318, null
  br i1 %tobool367, label %land.lhs.true.368, label %cond.false.382

land.lhs.true.368:                                ; preds = %cond.false.365
  %319 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix369 = getelementptr inbounds %struct.window, %struct.window* %319, i32 0, i32 24
  %320 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix369, align 8
  %rows370 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %320, i32 0, i32 1
  %321 = load %struct.glyph_row*, %struct.glyph_row** %rows370, align 8
  %tobool371 = icmp ne %struct.glyph_row* %321, null
  br i1 %tobool371, label %cond.true.372, label %cond.false.382

cond.true.372:                                    ; preds = %land.lhs.true.368
  %322 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix373 = getelementptr inbounds %struct.window, %struct.window* %322, i32 0, i32 24
  %323 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix373, align 8
  %rows374 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %323, i32 0, i32 1
  %324 = load %struct.glyph_row*, %struct.glyph_row** %rows374, align 8
  %325 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix375 = getelementptr inbounds %struct.window, %struct.window* %325, i32 0, i32 24
  %326 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix375, align 8
  %nrows376 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %326, i32 0, i32 3
  %327 = load i32, i32* %nrows376, align 4
  %idx.ext377 = sext i32 %327 to i64
  %add.ptr378 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %324, i64 %idx.ext377
  %add.ptr379 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr378, i64 -1
  %height380 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr379, i32 0, i32 7
  %328 = load i32, i32* %height380, align 4
  %tobool381 = icmp ne i32 %328, 0
  br i1 %tobool381, label %cond.true.383, label %cond.false.402

cond.false.382:                                   ; preds = %land.lhs.true.368, %cond.false.365
  br i1 false, label %cond.true.383, label %cond.false.402

cond.true.383:                                    ; preds = %cond.false.382, %cond.true.372
  %329 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix384 = getelementptr inbounds %struct.window, %struct.window* %329, i32 0, i32 24
  %330 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix384, align 8
  %tobool385 = icmp ne %struct.glyph_matrix* %330, null
  br i1 %tobool385, label %land.lhs.true.386, label %cond.false.399

land.lhs.true.386:                                ; preds = %cond.true.383
  %331 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix387 = getelementptr inbounds %struct.window, %struct.window* %331, i32 0, i32 24
  %332 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix387, align 8
  %rows388 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %332, i32 0, i32 1
  %333 = load %struct.glyph_row*, %struct.glyph_row** %rows388, align 8
  %tobool389 = icmp ne %struct.glyph_row* %333, null
  br i1 %tobool389, label %cond.true.390, label %cond.false.399

cond.true.390:                                    ; preds = %land.lhs.true.386
  %334 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix391 = getelementptr inbounds %struct.window, %struct.window* %334, i32 0, i32 24
  %335 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix391, align 8
  %rows392 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %335, i32 0, i32 1
  %336 = load %struct.glyph_row*, %struct.glyph_row** %rows392, align 8
  %337 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix393 = getelementptr inbounds %struct.window, %struct.window* %337, i32 0, i32 24
  %338 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix393, align 8
  %nrows394 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %338, i32 0, i32 3
  %339 = load i32, i32* %nrows394, align 4
  %idx.ext395 = sext i32 %339 to i64
  %add.ptr396 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %336, i64 %idx.ext395
  %add.ptr397 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr396, i64 -1
  %height398 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr397, i32 0, i32 7
  %340 = load i32, i32* %height398, align 4
  br label %cond.end.400

cond.false.399:                                   ; preds = %land.lhs.true.386, %cond.true.383
  br label %cond.end.400

cond.end.400:                                     ; preds = %cond.false.399, %cond.true.390
  %cond401 = phi i32 [ %340, %cond.true.390 ], [ 0, %cond.false.399 ]
  br label %cond.end.425

cond.false.402:                                   ; preds = %cond.false.382, %cond.true.372
  %341 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame403 = getelementptr inbounds %struct.window, %struct.window* %341, i32 0, i32 1
  %342 = load i64, i64* %frame403, align 8
  %sub404 = sub nsw i64 %342, 5
  %343 = inttoptr i64 %sub404 to i8*
  %344 = bitcast i8* %343 to %struct.frame*
  %345 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool405 = trunc i8 %345 to i1
  br i1 %tobool405, label %lor.lhs.false.406, label %lor.end.422

lor.lhs.false.406:                                ; preds = %cond.false.402
  %346 = load %struct.window*, %struct.window** %w.addr, align 8
  %347 = load i64, i64* @selected_window, align 8
  %call407 = call %struct.window* @XWINDOW(i64 %347)
  %cmp408 = icmp eq %struct.window* %346, %call407
  br i1 %cmp408, label %lor.end.422, label %lor.rhs.409

lor.rhs.409:                                      ; preds = %lor.lhs.false.406
  %348 = load i64, i64* @minibuf_level, align 8
  %cmp410 = icmp sgt i64 %348, 0
  br i1 %cmp410, label %land.lhs.true.411, label %land.end.421

land.lhs.true.411:                                ; preds = %lor.rhs.409
  %349 = load i64, i64* @minibuf_selected_window, align 8
  %call412 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp413 = icmp eq i64 %349, %call412
  br i1 %cmp413, label %land.end.421, label %land.lhs.true.414

land.lhs.true.414:                                ; preds = %land.lhs.true.411
  %350 = load i64, i64* @selected_window, align 8
  %call415 = call %struct.window* @XWINDOW(i64 %350)
  %351 = load i64, i64* @minibuf_window, align 8
  %call416 = call %struct.window* @XWINDOW(i64 %351)
  %cmp417 = icmp eq %struct.window* %call415, %call416
  br i1 %cmp417, label %land.rhs.418, label %land.end.421

land.rhs.418:                                     ; preds = %land.lhs.true.414
  %352 = load %struct.window*, %struct.window** %w.addr, align 8
  %353 = load i64, i64* @minibuf_selected_window, align 8
  %call419 = call %struct.window* @XWINDOW(i64 %353)
  %cmp420 = icmp eq %struct.window* %352, %call419
  br label %land.end.421

land.end.421:                                     ; preds = %land.rhs.418, %land.lhs.true.414, %land.lhs.true.411, %lor.rhs.409
  %354 = phi i1 [ false, %land.lhs.true.414 ], [ false, %land.lhs.true.411 ], [ false, %lor.rhs.409 ], [ %cmp420, %land.rhs.418 ]
  br label %lor.end.422

lor.end.422:                                      ; preds = %land.end.421, %lor.lhs.false.406, %cond.false.402
  %355 = phi i1 [ true, %lor.lhs.false.406 ], [ true, %cond.false.402 ], [ %354, %land.end.421 ]
  %cond423 = select i1 %355, i32 1, i32 2
  %call424 = call i32 @estimate_mode_line_height(%struct.frame* %344, i32 %cond423)
  br label %cond.end.425

cond.end.425:                                     ; preds = %lor.end.422, %cond.end.400
  %cond426 = phi i32 [ %cond401, %cond.end.400 ], [ %call424, %lor.end.422 ]
  %356 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height427 = getelementptr inbounds %struct.window, %struct.window* %356, i32 0, i32 63
  store i32 %cond426, i32* %mode_line_height427, align 4
  br label %cond.end.428

cond.end.428:                                     ; preds = %cond.end.425, %cond.true.363
  %cond429 = phi i32 [ %316, %cond.true.363 ], [ %cond426, %cond.end.425 ]
  %sub430 = sub nsw i32 %312, %cond429
  %357 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top431 = getelementptr inbounds %struct.window, %struct.window* %357, i32 0, i32 31
  %358 = load i32, i32* %pixel_top431, align 4
  %359 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height432 = getelementptr inbounds %struct.window, %struct.window* %359, i32 0, i32 35
  %360 = load i32, i32* %pixel_height432, align 4
  %add433 = add nsw i32 %358, %360
  %361 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame434 = getelementptr inbounds %struct.window, %struct.window* %361, i32 0, i32 1
  %362 = load i64, i64* %frame434, align 8
  %sub435 = sub nsw i64 %362, 5
  %363 = inttoptr i64 %sub435 to i8*
  %364 = bitcast i8* %363 to %struct.frame*
  %root_window436 = getelementptr inbounds %struct.frame, %struct.frame* %364, i32 0, i32 5
  %365 = load i64, i64* %root_window436, align 8
  %call437 = call %struct.window* @XWINDOW(i64 %365)
  %pixel_top438 = getelementptr inbounds %struct.window, %struct.window* %call437, i32 0, i32 31
  %366 = load i32, i32* %pixel_top438, align 4
  %367 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame439 = getelementptr inbounds %struct.window, %struct.window* %367, i32 0, i32 1
  %368 = load i64, i64* %frame439, align 8
  %sub440 = sub nsw i64 %368, 5
  %369 = inttoptr i64 %sub440 to i8*
  %370 = bitcast i8* %369 to %struct.frame*
  %root_window441 = getelementptr inbounds %struct.frame, %struct.frame* %370, i32 0, i32 5
  %371 = load i64, i64* %root_window441, align 8
  %call442 = call %struct.window* @XWINDOW(i64 %371)
  %pixel_height443 = getelementptr inbounds %struct.window, %struct.window* %call442, i32 0, i32 35
  %372 = load i32, i32* %pixel_height443, align 4
  %add444 = add nsw i32 %366, %372
  %cmp445 = icmp eq i32 %add433, %add444
  br i1 %cmp445, label %land.lhs.true.446, label %lor.lhs.false.454

land.lhs.true.446:                                ; preds = %cond.end.428
  %373 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame447 = getelementptr inbounds %struct.window, %struct.window* %373, i32 0, i32 1
  %374 = load i64, i64* %frame447, align 8
  %sub448 = sub nsw i64 %374, 5
  %375 = inttoptr i64 %sub448 to i8*
  %376 = bitcast i8* %375 to %struct.frame*
  %root_window449 = getelementptr inbounds %struct.frame, %struct.frame* %376, i32 0, i32 5
  %377 = load i64, i64* %root_window449, align 8
  %call450 = call %struct.window* @XWINDOW(i64 %377)
  %next451 = getelementptr inbounds %struct.window, %struct.window* %call450, i32 0, i32 2
  %378 = load i64, i64* %next451, align 8
  %call452 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp453 = icmp eq i64 %378, %call452
  br i1 %cmp453, label %cond.true.466, label %lor.lhs.false.454

lor.lhs.false.454:                                ; preds = %land.lhs.true.446, %cond.end.428
  %379 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev455 = getelementptr inbounds %struct.window, %struct.window* %379, i32 0, i32 3
  %380 = load i64, i64* %prev455, align 8
  %381 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame456 = getelementptr inbounds %struct.window, %struct.window* %381, i32 0, i32 1
  %382 = load i64, i64* %frame456, align 8
  %sub457 = sub nsw i64 %382, 5
  %383 = inttoptr i64 %sub457 to i8*
  %384 = bitcast i8* %383 to %struct.frame*
  %root_window458 = getelementptr inbounds %struct.frame, %struct.frame* %384, i32 0, i32 5
  %385 = load i64, i64* %root_window458, align 8
  %cmp459 = icmp eq i64 %380, %385
  br i1 %cmp459, label %cond.true.466, label %lor.lhs.false.460

lor.lhs.false.460:                                ; preds = %lor.lhs.false.454
  %386 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p461 = getelementptr inbounds %struct.window, %struct.window* %386, i32 0, i32 67
  %bf.load462 = load i16, i16* %pseudo_window_p461, align 4
  %bf.lshr463 = lshr i16 %bf.load462, 11
  %bf.clear464 = and i16 %bf.lshr463, 1
  %bf.cast465 = trunc i16 %bf.clear464 to i1
  br i1 %bf.cast465, label %cond.true.466, label %cond.false.467

cond.true.466:                                    ; preds = %lor.lhs.false.460, %lor.lhs.false.454, %land.lhs.true.446
  br label %cond.end.471

cond.false.467:                                   ; preds = %lor.lhs.false.460
  %387 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame468 = getelementptr inbounds %struct.window, %struct.window* %387, i32 0, i32 1
  %388 = load i64, i64* %frame468, align 8
  %sub469 = sub nsw i64 %388, 5
  %389 = inttoptr i64 %sub469 to i8*
  %390 = bitcast i8* %389 to %struct.frame*
  %bottom_divider_width470 = getelementptr inbounds %struct.frame, %struct.frame* %390, i32 0, i32 53
  %391 = load i32, i32* %bottom_divider_width470, align 4
  br label %cond.end.471

cond.end.471:                                     ; preds = %cond.false.467, %cond.true.466
  %cond472 = phi i32 [ 0, %cond.true.466 ], [ %391, %cond.false.467 ]
  %sub473 = sub nsw i32 %sub430, %cond472
  %cmp474 = icmp sle i32 %311, %sub473
  br i1 %cmp474, label %if.then.475, label %if.else.476

if.then.475:                                      ; preds = %cond.end.471
  store i32 10, i32* %retval
  br label %return

if.else.476:                                      ; preds = %cond.end.471, %cond.end.356, %cond.false.208, %cond.true.207, %cond.true.196, %cond.true.192
  %392 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %392, i32 0, i32 10
  %393 = load i64, i64* %contents, align 8
  %call477 = call zeroext i1 @BUFFERP(i64 %393)
  br i1 %call477, label %cond.true.478, label %cond.false.506

cond.true.478:                                    ; preds = %if.else.476
  %394 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini479 = getelementptr inbounds %struct.window, %struct.window* %394, i32 0, i32 67
  %bf.load480 = load i16, i16* %mini479, align 4
  %bf.clear481 = and i16 %bf.load480, 1
  %bf.cast482 = trunc i16 %bf.clear481 to i1
  br i1 %bf.cast482, label %lor.lhs.false.668, label %land.lhs.true.483

land.lhs.true.483:                                ; preds = %cond.true.478
  %395 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p484 = getelementptr inbounds %struct.window, %struct.window* %395, i32 0, i32 67
  %bf.load485 = load i16, i16* %pseudo_window_p484, align 4
  %bf.lshr486 = lshr i16 %bf.load485, 11
  %bf.clear487 = and i16 %bf.lshr486, 1
  %bf.cast488 = trunc i16 %bf.clear487 to i1
  br i1 %bf.cast488, label %lor.lhs.false.668, label %land.lhs.true.489

land.lhs.true.489:                                ; preds = %land.lhs.true.483
  %396 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame490 = getelementptr inbounds %struct.window, %struct.window* %396, i32 0, i32 1
  %397 = load i64, i64* %frame490, align 8
  %sub491 = sub nsw i64 %397, 5
  %398 = inttoptr i64 %sub491 to i8*
  %399 = bitcast i8* %398 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %399, i32 0, i32 26
  %400 = bitcast i48* %wants_modeline to i64*
  %bf.load492 = load i64, i64* %400, align 8
  %bf.lshr493 = lshr i64 %bf.load492, 14
  %bf.clear494 = and i64 %bf.lshr493, 1
  %bf.cast495 = trunc i64 %bf.clear494 to i1
  br i1 %bf.cast495, label %land.lhs.true.496, label %lor.lhs.false.668

land.lhs.true.496:                                ; preds = %land.lhs.true.489
  %401 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents497 = getelementptr inbounds %struct.window, %struct.window* %401, i32 0, i32 10
  %402 = load i64, i64* %contents497, align 8
  %call498 = call %struct.buffer* @XBUFFER(i64 %402)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call498, i32 0, i32 12
  %403 = load i64, i64* %mode_line_format_, align 8
  %call499 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp500 = icmp eq i64 %403, %call499
  br i1 %cmp500, label %lor.lhs.false.668, label %land.lhs.true.501

land.lhs.true.501:                                ; preds = %land.lhs.true.496
  %404 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height502 = getelementptr inbounds %struct.window, %struct.window* %404, i32 0, i32 35
  %405 = load i32, i32* %pixel_height502, align 4
  %406 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame503 = getelementptr inbounds %struct.window, %struct.window* %406, i32 0, i32 1
  %407 = load i64, i64* %frame503, align 8
  %sub504 = sub nsw i64 %407, 5
  %408 = inttoptr i64 %sub504 to i8*
  %409 = bitcast i8* %408 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %409, i32 0, i32 60
  %410 = load i32, i32* %line_height, align 4
  %cmp505 = icmp sgt i32 %405, %410
  br i1 %cmp505, label %land.lhs.true.507, label %lor.lhs.false.668

cond.false.506:                                   ; preds = %if.else.476
  br i1 false, label %land.lhs.true.507, label %lor.lhs.false.668

land.lhs.true.507:                                ; preds = %cond.false.506, %land.lhs.true.501
  %411 = load i32, i32* %y.addr, align 4
  %412 = load i32, i32* %bottom_y, align 4
  %413 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height508 = getelementptr inbounds %struct.window, %struct.window* %413, i32 0, i32 63
  %414 = load i32, i32* %mode_line_height508, align 4
  %cmp509 = icmp sge i32 %414, 0
  br i1 %cmp509, label %cond.true.510, label %cond.false.512

cond.true.510:                                    ; preds = %land.lhs.true.507
  %415 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height511 = getelementptr inbounds %struct.window, %struct.window* %415, i32 0, i32 63
  %416 = load i32, i32* %mode_line_height511, align 4
  br label %cond.end.575

cond.false.512:                                   ; preds = %land.lhs.true.507
  %417 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix513 = getelementptr inbounds %struct.window, %struct.window* %417, i32 0, i32 24
  %418 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix513, align 8
  %tobool514 = icmp ne %struct.glyph_matrix* %418, null
  br i1 %tobool514, label %land.lhs.true.515, label %cond.false.529

land.lhs.true.515:                                ; preds = %cond.false.512
  %419 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix516 = getelementptr inbounds %struct.window, %struct.window* %419, i32 0, i32 24
  %420 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix516, align 8
  %rows517 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %420, i32 0, i32 1
  %421 = load %struct.glyph_row*, %struct.glyph_row** %rows517, align 8
  %tobool518 = icmp ne %struct.glyph_row* %421, null
  br i1 %tobool518, label %cond.true.519, label %cond.false.529

cond.true.519:                                    ; preds = %land.lhs.true.515
  %422 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix520 = getelementptr inbounds %struct.window, %struct.window* %422, i32 0, i32 24
  %423 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix520, align 8
  %rows521 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %423, i32 0, i32 1
  %424 = load %struct.glyph_row*, %struct.glyph_row** %rows521, align 8
  %425 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix522 = getelementptr inbounds %struct.window, %struct.window* %425, i32 0, i32 24
  %426 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix522, align 8
  %nrows523 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %426, i32 0, i32 3
  %427 = load i32, i32* %nrows523, align 4
  %idx.ext524 = sext i32 %427 to i64
  %add.ptr525 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %424, i64 %idx.ext524
  %add.ptr526 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr525, i64 -1
  %height527 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr526, i32 0, i32 7
  %428 = load i32, i32* %height527, align 4
  %tobool528 = icmp ne i32 %428, 0
  br i1 %tobool528, label %cond.true.530, label %cond.false.549

cond.false.529:                                   ; preds = %land.lhs.true.515, %cond.false.512
  br i1 false, label %cond.true.530, label %cond.false.549

cond.true.530:                                    ; preds = %cond.false.529, %cond.true.519
  %429 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix531 = getelementptr inbounds %struct.window, %struct.window* %429, i32 0, i32 24
  %430 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix531, align 8
  %tobool532 = icmp ne %struct.glyph_matrix* %430, null
  br i1 %tobool532, label %land.lhs.true.533, label %cond.false.546

land.lhs.true.533:                                ; preds = %cond.true.530
  %431 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix534 = getelementptr inbounds %struct.window, %struct.window* %431, i32 0, i32 24
  %432 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix534, align 8
  %rows535 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %432, i32 0, i32 1
  %433 = load %struct.glyph_row*, %struct.glyph_row** %rows535, align 8
  %tobool536 = icmp ne %struct.glyph_row* %433, null
  br i1 %tobool536, label %cond.true.537, label %cond.false.546

cond.true.537:                                    ; preds = %land.lhs.true.533
  %434 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix538 = getelementptr inbounds %struct.window, %struct.window* %434, i32 0, i32 24
  %435 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix538, align 8
  %rows539 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %435, i32 0, i32 1
  %436 = load %struct.glyph_row*, %struct.glyph_row** %rows539, align 8
  %437 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix540 = getelementptr inbounds %struct.window, %struct.window* %437, i32 0, i32 24
  %438 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix540, align 8
  %nrows541 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %438, i32 0, i32 3
  %439 = load i32, i32* %nrows541, align 4
  %idx.ext542 = sext i32 %439 to i64
  %add.ptr543 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %436, i64 %idx.ext542
  %add.ptr544 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr543, i64 -1
  %height545 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr544, i32 0, i32 7
  %440 = load i32, i32* %height545, align 4
  br label %cond.end.547

cond.false.546:                                   ; preds = %land.lhs.true.533, %cond.true.530
  br label %cond.end.547

cond.end.547:                                     ; preds = %cond.false.546, %cond.true.537
  %cond548 = phi i32 [ %440, %cond.true.537 ], [ 0, %cond.false.546 ]
  br label %cond.end.572

cond.false.549:                                   ; preds = %cond.false.529, %cond.true.519
  %441 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame550 = getelementptr inbounds %struct.window, %struct.window* %441, i32 0, i32 1
  %442 = load i64, i64* %frame550, align 8
  %sub551 = sub nsw i64 %442, 5
  %443 = inttoptr i64 %sub551 to i8*
  %444 = bitcast i8* %443 to %struct.frame*
  %445 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool552 = trunc i8 %445 to i1
  br i1 %tobool552, label %lor.lhs.false.553, label %lor.end.569

lor.lhs.false.553:                                ; preds = %cond.false.549
  %446 = load %struct.window*, %struct.window** %w.addr, align 8
  %447 = load i64, i64* @selected_window, align 8
  %call554 = call %struct.window* @XWINDOW(i64 %447)
  %cmp555 = icmp eq %struct.window* %446, %call554
  br i1 %cmp555, label %lor.end.569, label %lor.rhs.556

lor.rhs.556:                                      ; preds = %lor.lhs.false.553
  %448 = load i64, i64* @minibuf_level, align 8
  %cmp557 = icmp sgt i64 %448, 0
  br i1 %cmp557, label %land.lhs.true.558, label %land.end.568

land.lhs.true.558:                                ; preds = %lor.rhs.556
  %449 = load i64, i64* @minibuf_selected_window, align 8
  %call559 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp560 = icmp eq i64 %449, %call559
  br i1 %cmp560, label %land.end.568, label %land.lhs.true.561

land.lhs.true.561:                                ; preds = %land.lhs.true.558
  %450 = load i64, i64* @selected_window, align 8
  %call562 = call %struct.window* @XWINDOW(i64 %450)
  %451 = load i64, i64* @minibuf_window, align 8
  %call563 = call %struct.window* @XWINDOW(i64 %451)
  %cmp564 = icmp eq %struct.window* %call562, %call563
  br i1 %cmp564, label %land.rhs.565, label %land.end.568

land.rhs.565:                                     ; preds = %land.lhs.true.561
  %452 = load %struct.window*, %struct.window** %w.addr, align 8
  %453 = load i64, i64* @minibuf_selected_window, align 8
  %call566 = call %struct.window* @XWINDOW(i64 %453)
  %cmp567 = icmp eq %struct.window* %452, %call566
  br label %land.end.568

land.end.568:                                     ; preds = %land.rhs.565, %land.lhs.true.561, %land.lhs.true.558, %lor.rhs.556
  %454 = phi i1 [ false, %land.lhs.true.561 ], [ false, %land.lhs.true.558 ], [ false, %lor.rhs.556 ], [ %cmp567, %land.rhs.565 ]
  br label %lor.end.569

lor.end.569:                                      ; preds = %land.end.568, %lor.lhs.false.553, %cond.false.549
  %455 = phi i1 [ true, %lor.lhs.false.553 ], [ true, %cond.false.549 ], [ %454, %land.end.568 ]
  %cond570 = select i1 %455, i32 1, i32 2
  %call571 = call i32 @estimate_mode_line_height(%struct.frame* %444, i32 %cond570)
  br label %cond.end.572

cond.end.572:                                     ; preds = %lor.end.569, %cond.end.547
  %cond573 = phi i32 [ %cond548, %cond.end.547 ], [ %call571, %lor.end.569 ]
  %456 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height574 = getelementptr inbounds %struct.window, %struct.window* %456, i32 0, i32 63
  store i32 %cond573, i32* %mode_line_height574, align 4
  br label %cond.end.575

cond.end.575:                                     ; preds = %cond.end.572, %cond.true.510
  %cond576 = phi i32 [ %416, %cond.true.510 ], [ %cond573, %cond.end.572 ]
  %sub577 = sub nsw i32 %412, %cond576
  %457 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top578 = getelementptr inbounds %struct.window, %struct.window* %457, i32 0, i32 31
  %458 = load i32, i32* %pixel_top578, align 4
  %459 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height579 = getelementptr inbounds %struct.window, %struct.window* %459, i32 0, i32 35
  %460 = load i32, i32* %pixel_height579, align 4
  %add580 = add nsw i32 %458, %460
  %461 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame581 = getelementptr inbounds %struct.window, %struct.window* %461, i32 0, i32 1
  %462 = load i64, i64* %frame581, align 8
  %sub582 = sub nsw i64 %462, 5
  %463 = inttoptr i64 %sub582 to i8*
  %464 = bitcast i8* %463 to %struct.frame*
  %root_window583 = getelementptr inbounds %struct.frame, %struct.frame* %464, i32 0, i32 5
  %465 = load i64, i64* %root_window583, align 8
  %call584 = call %struct.window* @XWINDOW(i64 %465)
  %pixel_top585 = getelementptr inbounds %struct.window, %struct.window* %call584, i32 0, i32 31
  %466 = load i32, i32* %pixel_top585, align 4
  %467 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame586 = getelementptr inbounds %struct.window, %struct.window* %467, i32 0, i32 1
  %468 = load i64, i64* %frame586, align 8
  %sub587 = sub nsw i64 %468, 5
  %469 = inttoptr i64 %sub587 to i8*
  %470 = bitcast i8* %469 to %struct.frame*
  %root_window588 = getelementptr inbounds %struct.frame, %struct.frame* %470, i32 0, i32 5
  %471 = load i64, i64* %root_window588, align 8
  %call589 = call %struct.window* @XWINDOW(i64 %471)
  %pixel_height590 = getelementptr inbounds %struct.window, %struct.window* %call589, i32 0, i32 35
  %472 = load i32, i32* %pixel_height590, align 4
  %add591 = add nsw i32 %466, %472
  %cmp592 = icmp eq i32 %add580, %add591
  br i1 %cmp592, label %land.lhs.true.593, label %lor.lhs.false.601

land.lhs.true.593:                                ; preds = %cond.end.575
  %473 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame594 = getelementptr inbounds %struct.window, %struct.window* %473, i32 0, i32 1
  %474 = load i64, i64* %frame594, align 8
  %sub595 = sub nsw i64 %474, 5
  %475 = inttoptr i64 %sub595 to i8*
  %476 = bitcast i8* %475 to %struct.frame*
  %root_window596 = getelementptr inbounds %struct.frame, %struct.frame* %476, i32 0, i32 5
  %477 = load i64, i64* %root_window596, align 8
  %call597 = call %struct.window* @XWINDOW(i64 %477)
  %next598 = getelementptr inbounds %struct.window, %struct.window* %call597, i32 0, i32 2
  %478 = load i64, i64* %next598, align 8
  %call599 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp600 = icmp eq i64 %478, %call599
  br i1 %cmp600, label %cond.true.613, label %lor.lhs.false.601

lor.lhs.false.601:                                ; preds = %land.lhs.true.593, %cond.end.575
  %479 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev602 = getelementptr inbounds %struct.window, %struct.window* %479, i32 0, i32 3
  %480 = load i64, i64* %prev602, align 8
  %481 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame603 = getelementptr inbounds %struct.window, %struct.window* %481, i32 0, i32 1
  %482 = load i64, i64* %frame603, align 8
  %sub604 = sub nsw i64 %482, 5
  %483 = inttoptr i64 %sub604 to i8*
  %484 = bitcast i8* %483 to %struct.frame*
  %root_window605 = getelementptr inbounds %struct.frame, %struct.frame* %484, i32 0, i32 5
  %485 = load i64, i64* %root_window605, align 8
  %cmp606 = icmp eq i64 %480, %485
  br i1 %cmp606, label %cond.true.613, label %lor.lhs.false.607

lor.lhs.false.607:                                ; preds = %lor.lhs.false.601
  %486 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p608 = getelementptr inbounds %struct.window, %struct.window* %486, i32 0, i32 67
  %bf.load609 = load i16, i16* %pseudo_window_p608, align 4
  %bf.lshr610 = lshr i16 %bf.load609, 11
  %bf.clear611 = and i16 %bf.lshr610, 1
  %bf.cast612 = trunc i16 %bf.clear611 to i1
  br i1 %bf.cast612, label %cond.true.613, label %cond.false.614

cond.true.613:                                    ; preds = %lor.lhs.false.607, %lor.lhs.false.601, %land.lhs.true.593
  br label %cond.end.618

cond.false.614:                                   ; preds = %lor.lhs.false.607
  %487 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame615 = getelementptr inbounds %struct.window, %struct.window* %487, i32 0, i32 1
  %488 = load i64, i64* %frame615, align 8
  %sub616 = sub nsw i64 %488, 5
  %489 = inttoptr i64 %sub616 to i8*
  %490 = bitcast i8* %489 to %struct.frame*
  %bottom_divider_width617 = getelementptr inbounds %struct.frame, %struct.frame* %490, i32 0, i32 53
  %491 = load i32, i32* %bottom_divider_width617, align 4
  br label %cond.end.618

cond.end.618:                                     ; preds = %cond.false.614, %cond.true.613
  %cond619 = phi i32 [ 0, %cond.true.613 ], [ %491, %cond.false.614 ]
  %sub620 = sub nsw i32 %sub577, %cond619
  %cmp621 = icmp sge i32 %411, %sub620
  br i1 %cmp621, label %land.lhs.true.622, label %lor.lhs.false.668

land.lhs.true.622:                                ; preds = %cond.end.618
  %492 = load i32, i32* %y.addr, align 4
  %493 = load i32, i32* %bottom_y, align 4
  %494 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top623 = getelementptr inbounds %struct.window, %struct.window* %494, i32 0, i32 31
  %495 = load i32, i32* %pixel_top623, align 4
  %496 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height624 = getelementptr inbounds %struct.window, %struct.window* %496, i32 0, i32 35
  %497 = load i32, i32* %pixel_height624, align 4
  %add625 = add nsw i32 %495, %497
  %498 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame626 = getelementptr inbounds %struct.window, %struct.window* %498, i32 0, i32 1
  %499 = load i64, i64* %frame626, align 8
  %sub627 = sub nsw i64 %499, 5
  %500 = inttoptr i64 %sub627 to i8*
  %501 = bitcast i8* %500 to %struct.frame*
  %root_window628 = getelementptr inbounds %struct.frame, %struct.frame* %501, i32 0, i32 5
  %502 = load i64, i64* %root_window628, align 8
  %call629 = call %struct.window* @XWINDOW(i64 %502)
  %pixel_top630 = getelementptr inbounds %struct.window, %struct.window* %call629, i32 0, i32 31
  %503 = load i32, i32* %pixel_top630, align 4
  %504 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame631 = getelementptr inbounds %struct.window, %struct.window* %504, i32 0, i32 1
  %505 = load i64, i64* %frame631, align 8
  %sub632 = sub nsw i64 %505, 5
  %506 = inttoptr i64 %sub632 to i8*
  %507 = bitcast i8* %506 to %struct.frame*
  %root_window633 = getelementptr inbounds %struct.frame, %struct.frame* %507, i32 0, i32 5
  %508 = load i64, i64* %root_window633, align 8
  %call634 = call %struct.window* @XWINDOW(i64 %508)
  %pixel_height635 = getelementptr inbounds %struct.window, %struct.window* %call634, i32 0, i32 35
  %509 = load i32, i32* %pixel_height635, align 4
  %add636 = add nsw i32 %503, %509
  %cmp637 = icmp eq i32 %add625, %add636
  br i1 %cmp637, label %land.lhs.true.638, label %lor.lhs.false.646

land.lhs.true.638:                                ; preds = %land.lhs.true.622
  %510 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame639 = getelementptr inbounds %struct.window, %struct.window* %510, i32 0, i32 1
  %511 = load i64, i64* %frame639, align 8
  %sub640 = sub nsw i64 %511, 5
  %512 = inttoptr i64 %sub640 to i8*
  %513 = bitcast i8* %512 to %struct.frame*
  %root_window641 = getelementptr inbounds %struct.frame, %struct.frame* %513, i32 0, i32 5
  %514 = load i64, i64* %root_window641, align 8
  %call642 = call %struct.window* @XWINDOW(i64 %514)
  %next643 = getelementptr inbounds %struct.window, %struct.window* %call642, i32 0, i32 2
  %515 = load i64, i64* %next643, align 8
  %call644 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp645 = icmp eq i64 %515, %call644
  br i1 %cmp645, label %cond.true.658, label %lor.lhs.false.646

lor.lhs.false.646:                                ; preds = %land.lhs.true.638, %land.lhs.true.622
  %516 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev647 = getelementptr inbounds %struct.window, %struct.window* %516, i32 0, i32 3
  %517 = load i64, i64* %prev647, align 8
  %518 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame648 = getelementptr inbounds %struct.window, %struct.window* %518, i32 0, i32 1
  %519 = load i64, i64* %frame648, align 8
  %sub649 = sub nsw i64 %519, 5
  %520 = inttoptr i64 %sub649 to i8*
  %521 = bitcast i8* %520 to %struct.frame*
  %root_window650 = getelementptr inbounds %struct.frame, %struct.frame* %521, i32 0, i32 5
  %522 = load i64, i64* %root_window650, align 8
  %cmp651 = icmp eq i64 %517, %522
  br i1 %cmp651, label %cond.true.658, label %lor.lhs.false.652

lor.lhs.false.652:                                ; preds = %lor.lhs.false.646
  %523 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p653 = getelementptr inbounds %struct.window, %struct.window* %523, i32 0, i32 67
  %bf.load654 = load i16, i16* %pseudo_window_p653, align 4
  %bf.lshr655 = lshr i16 %bf.load654, 11
  %bf.clear656 = and i16 %bf.lshr655, 1
  %bf.cast657 = trunc i16 %bf.clear656 to i1
  br i1 %bf.cast657, label %cond.true.658, label %cond.false.659

cond.true.658:                                    ; preds = %lor.lhs.false.652, %lor.lhs.false.646, %land.lhs.true.638
  br label %cond.end.663

cond.false.659:                                   ; preds = %lor.lhs.false.652
  %524 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame660 = getelementptr inbounds %struct.window, %struct.window* %524, i32 0, i32 1
  %525 = load i64, i64* %frame660, align 8
  %sub661 = sub nsw i64 %525, 5
  %526 = inttoptr i64 %sub661 to i8*
  %527 = bitcast i8* %526 to %struct.frame*
  %bottom_divider_width662 = getelementptr inbounds %struct.frame, %struct.frame* %527, i32 0, i32 53
  %528 = load i32, i32* %bottom_divider_width662, align 4
  br label %cond.end.663

cond.end.663:                                     ; preds = %cond.false.659, %cond.true.658
  %cond664 = phi i32 [ 0, %cond.true.658 ], [ %528, %cond.false.659 ]
  %sub665 = sub nsw i32 %493, %cond664
  %cmp666 = icmp sle i32 %492, %sub665
  br i1 %cmp666, label %land.lhs.true.667, label %lor.lhs.false.668

land.lhs.true.667:                                ; preds = %cond.end.663
  store i32 2, i32* %part, align 4
  br i1 true, label %if.then.786, label %lor.lhs.false.668

lor.lhs.false.668:                                ; preds = %land.lhs.true.667, %cond.end.663, %cond.end.618, %cond.false.506, %land.lhs.true.501, %land.lhs.true.496, %land.lhs.true.489, %land.lhs.true.483, %cond.true.478
  %529 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents669 = getelementptr inbounds %struct.window, %struct.window* %529, i32 0, i32 10
  %530 = load i64, i64* %contents669, align 8
  %call670 = call zeroext i1 @BUFFERP(i64 %530)
  br i1 %call670, label %cond.true.671, label %cond.false.742

cond.true.671:                                    ; preds = %lor.lhs.false.668
  %531 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini672 = getelementptr inbounds %struct.window, %struct.window* %531, i32 0, i32 67
  %bf.load673 = load i16, i16* %mini672, align 4
  %bf.clear674 = and i16 %bf.load673, 1
  %bf.cast675 = trunc i16 %bf.clear674 to i1
  br i1 %bf.cast675, label %if.end.929, label %land.lhs.true.676

land.lhs.true.676:                                ; preds = %cond.true.671
  %532 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p677 = getelementptr inbounds %struct.window, %struct.window* %532, i32 0, i32 67
  %bf.load678 = load i16, i16* %pseudo_window_p677, align 4
  %bf.lshr679 = lshr i16 %bf.load678, 11
  %bf.clear680 = and i16 %bf.lshr679, 1
  %bf.cast681 = trunc i16 %bf.clear680 to i1
  br i1 %bf.cast681, label %if.end.929, label %land.lhs.true.682

land.lhs.true.682:                                ; preds = %land.lhs.true.676
  %533 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame683 = getelementptr inbounds %struct.window, %struct.window* %533, i32 0, i32 1
  %534 = load i64, i64* %frame683, align 8
  %sub684 = sub nsw i64 %534, 5
  %535 = inttoptr i64 %sub684 to i8*
  %536 = bitcast i8* %535 to %struct.frame*
  %wants_modeline685 = getelementptr inbounds %struct.frame, %struct.frame* %536, i32 0, i32 26
  %537 = bitcast i48* %wants_modeline685 to i64*
  %bf.load686 = load i64, i64* %537, align 8
  %bf.lshr687 = lshr i64 %bf.load686, 14
  %bf.clear688 = and i64 %bf.lshr687, 1
  %bf.cast689 = trunc i64 %bf.clear688 to i1
  br i1 %bf.cast689, label %land.lhs.true.690, label %if.end.929

land.lhs.true.690:                                ; preds = %land.lhs.true.682
  %538 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents691 = getelementptr inbounds %struct.window, %struct.window* %538, i32 0, i32 10
  %539 = load i64, i64* %contents691, align 8
  %call692 = call %struct.buffer* @XBUFFER(i64 %539)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call692, i32 0, i32 13
  %540 = load i64, i64* %header_line_format_, align 8
  %call693 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp694 = icmp eq i64 %540, %call693
  br i1 %cmp694, label %if.end.929, label %land.lhs.true.695

land.lhs.true.695:                                ; preds = %land.lhs.true.690
  %541 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height696 = getelementptr inbounds %struct.window, %struct.window* %541, i32 0, i32 35
  %542 = load i32, i32* %pixel_height696, align 4
  %543 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents697 = getelementptr inbounds %struct.window, %struct.window* %543, i32 0, i32 10
  %544 = load i64, i64* %contents697, align 8
  %call698 = call zeroext i1 @BUFFERP(i64 %544)
  br i1 %call698, label %cond.true.699, label %cond.false.730

cond.true.699:                                    ; preds = %land.lhs.true.695
  %545 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini700 = getelementptr inbounds %struct.window, %struct.window* %545, i32 0, i32 67
  %bf.load701 = load i16, i16* %mini700, align 4
  %bf.clear702 = and i16 %bf.load701, 1
  %bf.cast703 = trunc i16 %bf.clear702 to i1
  br i1 %bf.cast703, label %cond.false.735, label %land.lhs.true.704

land.lhs.true.704:                                ; preds = %cond.true.699
  %546 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p705 = getelementptr inbounds %struct.window, %struct.window* %546, i32 0, i32 67
  %bf.load706 = load i16, i16* %pseudo_window_p705, align 4
  %bf.lshr707 = lshr i16 %bf.load706, 11
  %bf.clear708 = and i16 %bf.lshr707, 1
  %bf.cast709 = trunc i16 %bf.clear708 to i1
  br i1 %bf.cast709, label %cond.false.735, label %land.lhs.true.710

land.lhs.true.710:                                ; preds = %land.lhs.true.704
  %547 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame711 = getelementptr inbounds %struct.window, %struct.window* %547, i32 0, i32 1
  %548 = load i64, i64* %frame711, align 8
  %sub712 = sub nsw i64 %548, 5
  %549 = inttoptr i64 %sub712 to i8*
  %550 = bitcast i8* %549 to %struct.frame*
  %wants_modeline713 = getelementptr inbounds %struct.frame, %struct.frame* %550, i32 0, i32 26
  %551 = bitcast i48* %wants_modeline713 to i64*
  %bf.load714 = load i64, i64* %551, align 8
  %bf.lshr715 = lshr i64 %bf.load714, 14
  %bf.clear716 = and i64 %bf.lshr715, 1
  %bf.cast717 = trunc i64 %bf.clear716 to i1
  br i1 %bf.cast717, label %land.lhs.true.718, label %cond.false.735

land.lhs.true.718:                                ; preds = %land.lhs.true.710
  %552 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents719 = getelementptr inbounds %struct.window, %struct.window* %552, i32 0, i32 10
  %553 = load i64, i64* %contents719, align 8
  %call720 = call %struct.buffer* @XBUFFER(i64 %553)
  %mode_line_format_721 = getelementptr inbounds %struct.buffer, %struct.buffer* %call720, i32 0, i32 12
  %554 = load i64, i64* %mode_line_format_721, align 8
  %call722 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp723 = icmp eq i64 %554, %call722
  br i1 %cmp723, label %cond.false.735, label %land.lhs.true.724

land.lhs.true.724:                                ; preds = %land.lhs.true.718
  %555 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height725 = getelementptr inbounds %struct.window, %struct.window* %555, i32 0, i32 35
  %556 = load i32, i32* %pixel_height725, align 4
  %557 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame726 = getelementptr inbounds %struct.window, %struct.window* %557, i32 0, i32 1
  %558 = load i64, i64* %frame726, align 8
  %sub727 = sub nsw i64 %558, 5
  %559 = inttoptr i64 %sub727 to i8*
  %560 = bitcast i8* %559 to %struct.frame*
  %line_height728 = getelementptr inbounds %struct.frame, %struct.frame* %560, i32 0, i32 60
  %561 = load i32, i32* %line_height728, align 4
  %cmp729 = icmp sgt i32 %556, %561
  br i1 %cmp729, label %cond.true.731, label %cond.false.735

cond.false.730:                                   ; preds = %land.lhs.true.695
  br i1 false, label %cond.true.731, label %cond.false.735

cond.true.731:                                    ; preds = %cond.false.730, %land.lhs.true.724
  %562 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame732 = getelementptr inbounds %struct.window, %struct.window* %562, i32 0, i32 1
  %563 = load i64, i64* %frame732, align 8
  %sub733 = sub nsw i64 %563, 5
  %564 = inttoptr i64 %sub733 to i8*
  %565 = bitcast i8* %564 to %struct.frame*
  %line_height734 = getelementptr inbounds %struct.frame, %struct.frame* %565, i32 0, i32 60
  %566 = load i32, i32* %line_height734, align 4
  %mul = mul nsw i32 2, %566
  br label %cond.end.739

cond.false.735:                                   ; preds = %cond.false.730, %land.lhs.true.724, %land.lhs.true.718, %land.lhs.true.710, %land.lhs.true.704, %cond.true.699
  %567 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame736 = getelementptr inbounds %struct.window, %struct.window* %567, i32 0, i32 1
  %568 = load i64, i64* %frame736, align 8
  %sub737 = sub nsw i64 %568, 5
  %569 = inttoptr i64 %sub737 to i8*
  %570 = bitcast i8* %569 to %struct.frame*
  %line_height738 = getelementptr inbounds %struct.frame, %struct.frame* %570, i32 0, i32 60
  %571 = load i32, i32* %line_height738, align 4
  br label %cond.end.739

cond.end.739:                                     ; preds = %cond.false.735, %cond.true.731
  %cond740 = phi i32 [ %mul, %cond.true.731 ], [ %571, %cond.false.735 ]
  %cmp741 = icmp sgt i32 %542, %cond740
  br i1 %cmp741, label %land.lhs.true.743, label %if.end.929

cond.false.742:                                   ; preds = %lor.lhs.false.668
  br i1 false, label %land.lhs.true.743, label %if.end.929

land.lhs.true.743:                                ; preds = %cond.false.742, %cond.end.739
  %572 = load i32, i32* %y.addr, align 4
  %573 = load i32, i32* %top_y, align 4
  %574 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %574, i32 0, i32 64
  %575 = load i32, i32* %header_line_height, align 4
  %cmp744 = icmp sge i32 %575, 0
  br i1 %cmp744, label %cond.true.745, label %cond.false.747

cond.true.745:                                    ; preds = %land.lhs.true.743
  %576 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height746 = getelementptr inbounds %struct.window, %struct.window* %576, i32 0, i32 64
  %577 = load i32, i32* %header_line_height746, align 4
  br label %cond.end.781

cond.false.747:                                   ; preds = %land.lhs.true.743
  %578 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix748 = getelementptr inbounds %struct.window, %struct.window* %578, i32 0, i32 24
  %579 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix748, align 8
  %tobool749 = icmp ne %struct.glyph_matrix* %579, null
  br i1 %tobool749, label %land.lhs.true.750, label %cond.false.759

land.lhs.true.750:                                ; preds = %cond.false.747
  %580 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix751 = getelementptr inbounds %struct.window, %struct.window* %580, i32 0, i32 24
  %581 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix751, align 8
  %rows752 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %581, i32 0, i32 1
  %582 = load %struct.glyph_row*, %struct.glyph_row** %rows752, align 8
  %tobool753 = icmp ne %struct.glyph_row* %582, null
  br i1 %tobool753, label %cond.true.754, label %cond.false.759

cond.true.754:                                    ; preds = %land.lhs.true.750
  %583 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix755 = getelementptr inbounds %struct.window, %struct.window* %583, i32 0, i32 24
  %584 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix755, align 8
  %rows756 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %584, i32 0, i32 1
  %585 = load %struct.glyph_row*, %struct.glyph_row** %rows756, align 8
  %height757 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %585, i32 0, i32 7
  %586 = load i32, i32* %height757, align 4
  %tobool758 = icmp ne i32 %586, 0
  br i1 %tobool758, label %cond.true.760, label %cond.false.774

cond.false.759:                                   ; preds = %land.lhs.true.750, %cond.false.747
  br i1 false, label %cond.true.760, label %cond.false.774

cond.true.760:                                    ; preds = %cond.false.759, %cond.true.754
  %587 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix761 = getelementptr inbounds %struct.window, %struct.window* %587, i32 0, i32 24
  %588 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix761, align 8
  %tobool762 = icmp ne %struct.glyph_matrix* %588, null
  br i1 %tobool762, label %land.lhs.true.763, label %cond.false.771

land.lhs.true.763:                                ; preds = %cond.true.760
  %589 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix764 = getelementptr inbounds %struct.window, %struct.window* %589, i32 0, i32 24
  %590 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix764, align 8
  %rows765 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %590, i32 0, i32 1
  %591 = load %struct.glyph_row*, %struct.glyph_row** %rows765, align 8
  %tobool766 = icmp ne %struct.glyph_row* %591, null
  br i1 %tobool766, label %cond.true.767, label %cond.false.771

cond.true.767:                                    ; preds = %land.lhs.true.763
  %592 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix768 = getelementptr inbounds %struct.window, %struct.window* %592, i32 0, i32 24
  %593 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix768, align 8
  %rows769 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %593, i32 0, i32 1
  %594 = load %struct.glyph_row*, %struct.glyph_row** %rows769, align 8
  %height770 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %594, i32 0, i32 7
  %595 = load i32, i32* %height770, align 4
  br label %cond.end.772

cond.false.771:                                   ; preds = %land.lhs.true.763, %cond.true.760
  br label %cond.end.772

cond.end.772:                                     ; preds = %cond.false.771, %cond.true.767
  %cond773 = phi i32 [ %595, %cond.true.767 ], [ 0, %cond.false.771 ]
  br label %cond.end.778

cond.false.774:                                   ; preds = %cond.false.759, %cond.true.754
  %596 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame775 = getelementptr inbounds %struct.window, %struct.window* %596, i32 0, i32 1
  %597 = load i64, i64* %frame775, align 8
  %sub776 = sub nsw i64 %597, 5
  %598 = inttoptr i64 %sub776 to i8*
  %599 = bitcast i8* %598 to %struct.frame*
  %call777 = call i32 @estimate_mode_line_height(%struct.frame* %599, i32 5)
  br label %cond.end.778

cond.end.778:                                     ; preds = %cond.false.774, %cond.end.772
  %cond779 = phi i32 [ %cond773, %cond.end.772 ], [ %call777, %cond.false.774 ]
  %600 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height780 = getelementptr inbounds %struct.window, %struct.window* %600, i32 0, i32 64
  store i32 %cond779, i32* %header_line_height780, align 4
  br label %cond.end.781

cond.end.781:                                     ; preds = %cond.end.778, %cond.true.745
  %cond782 = phi i32 [ %577, %cond.true.745 ], [ %cond779, %cond.end.778 ]
  %add783 = add nsw i32 %573, %cond782
  %cmp784 = icmp slt i32 %572, %add783
  br i1 %cmp784, label %land.lhs.true.785, label %if.end.929

land.lhs.true.785:                                ; preds = %cond.end.781
  store i32 4, i32* %part, align 4
  br i1 true, label %if.then.786, label %if.end.929

if.then.786:                                      ; preds = %land.lhs.true.785, %land.lhs.true.667
  %601 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left787 = getelementptr inbounds %struct.window, %struct.window* %601, i32 0, i32 30
  %602 = load i32, i32* %pixel_left787, align 4
  %603 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width788 = getelementptr inbounds %struct.window, %struct.window* %603, i32 0, i32 34
  %604 = load i32, i32* %pixel_width788, align 4
  %add789 = add nsw i32 %602, %604
  %605 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame790 = getelementptr inbounds %struct.window, %struct.window* %605, i32 0, i32 1
  %606 = load i64, i64* %frame790, align 8
  %sub791 = sub nsw i64 %606, 5
  %607 = inttoptr i64 %sub791 to i8*
  %608 = bitcast i8* %607 to %struct.frame*
  %root_window792 = getelementptr inbounds %struct.frame, %struct.frame* %608, i32 0, i32 5
  %609 = load i64, i64* %root_window792, align 8
  %call793 = call %struct.window* @XWINDOW(i64 %609)
  %pixel_left794 = getelementptr inbounds %struct.window, %struct.window* %call793, i32 0, i32 30
  %610 = load i32, i32* %pixel_left794, align 4
  %611 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame795 = getelementptr inbounds %struct.window, %struct.window* %611, i32 0, i32 1
  %612 = load i64, i64* %frame795, align 8
  %sub796 = sub nsw i64 %612, 5
  %613 = inttoptr i64 %sub796 to i8*
  %614 = bitcast i8* %613 to %struct.frame*
  %root_window797 = getelementptr inbounds %struct.frame, %struct.frame* %614, i32 0, i32 5
  %615 = load i64, i64* %root_window797, align 8
  %call798 = call %struct.window* @XWINDOW(i64 %615)
  %pixel_width799 = getelementptr inbounds %struct.window, %struct.window* %call798, i32 0, i32 34
  %616 = load i32, i32* %pixel_width799, align 4
  %add800 = add nsw i32 %610, %616
  %cmp801 = icmp eq i32 %add789, %add800
  br i1 %cmp801, label %cond.true.807, label %lor.lhs.false.802

lor.lhs.false.802:                                ; preds = %if.then.786
  %617 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini803 = getelementptr inbounds %struct.window, %struct.window* %617, i32 0, i32 67
  %bf.load804 = load i16, i16* %mini803, align 4
  %bf.clear805 = and i16 %bf.load804, 1
  %bf.cast806 = trunc i16 %bf.clear805 to i1
  br i1 %bf.cast806, label %cond.true.807, label %cond.false.808

cond.true.807:                                    ; preds = %lor.lhs.false.802, %if.then.786
  br label %cond.end.812

cond.false.808:                                   ; preds = %lor.lhs.false.802
  %618 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame809 = getelementptr inbounds %struct.window, %struct.window* %618, i32 0, i32 1
  %619 = load i64, i64* %frame809, align 8
  %sub810 = sub nsw i64 %619, 5
  %620 = inttoptr i64 %sub810 to i8*
  %621 = bitcast i8* %620 to %struct.frame*
  %right_divider_width811 = getelementptr inbounds %struct.frame, %struct.frame* %621, i32 0, i32 52
  %622 = load i32, i32* %right_divider_width811, align 4
  br label %cond.end.812

cond.end.812:                                     ; preds = %cond.false.808, %cond.true.807
  %cond813 = phi i32 [ 0, %cond.true.807 ], [ %622, %cond.false.808 ]
  %cmp814 = icmp eq i32 %cond813, 0
  br i1 %cmp814, label %land.lhs.true.815, label %if.else.928

land.lhs.true.815:                                ; preds = %cond.end.812
  %623 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p816 = getelementptr inbounds %struct.window, %struct.window* %623, i32 0, i32 67
  %bf.load817 = load i16, i16* %pseudo_window_p816, align 4
  %bf.lshr818 = lshr i16 %bf.load817, 11
  %bf.clear819 = and i16 %bf.lshr818, 1
  %bf.cast820 = trunc i16 %bf.clear819 to i1
  br i1 %bf.cast820, label %cond.true.821, label %cond.false.822

cond.true.821:                                    ; preds = %land.lhs.true.815
  br label %cond.end.847

cond.false.822:                                   ; preds = %land.lhs.true.815
  %624 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %624, i32 0, i32 16
  %625 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call823 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp824 = icmp eq i64 %625, %call823
  br i1 %cmp824, label %cond.true.825, label %cond.false.833

cond.true.825:                                    ; preds = %cond.false.822
  %626 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame826 = getelementptr inbounds %struct.window, %struct.window* %626, i32 0, i32 1
  %627 = load i64, i64* %frame826, align 8
  %sub827 = sub nsw i64 %627, 5
  %628 = inttoptr i64 %sub827 to i8*
  %629 = bitcast i8* %628 to %struct.frame*
  %vertical_scroll_bar_type828 = getelementptr inbounds %struct.frame, %struct.frame* %629, i32 0, i32 26
  %630 = bitcast i48* %vertical_scroll_bar_type828 to i64*
  %bf.load829 = load i64, i64* %630, align 8
  %bf.lshr830 = lshr i64 %bf.load829, 30
  %bf.clear831 = and i64 %bf.lshr830, 3
  %bf.cast832 = trunc i64 %bf.clear831 to i32
  br label %cond.end.845

cond.false.833:                                   ; preds = %cond.false.822
  %631 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type834 = getelementptr inbounds %struct.window, %struct.window* %631, i32 0, i32 16
  %632 = load i64, i64* %vertical_scroll_bar_type834, align 8
  %call835 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp836 = icmp eq i64 %632, %call835
  br i1 %cmp836, label %cond.true.837, label %cond.false.838

cond.true.837:                                    ; preds = %cond.false.833
  br label %cond.end.843

cond.false.838:                                   ; preds = %cond.false.833
  %633 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type839 = getelementptr inbounds %struct.window, %struct.window* %633, i32 0, i32 16
  %634 = load i64, i64* %vertical_scroll_bar_type839, align 8
  %call840 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp841 = icmp eq i64 %634, %call840
  %cond842 = select i1 %cmp841, i32 2, i32 0
  br label %cond.end.843

cond.end.843:                                     ; preds = %cond.false.838, %cond.true.837
  %cond844 = phi i32 [ 1, %cond.true.837 ], [ %cond842, %cond.false.838 ]
  br label %cond.end.845

cond.end.845:                                     ; preds = %cond.end.843, %cond.true.825
  %cond846 = phi i32 [ %bf.cast832, %cond.true.825 ], [ %cond844, %cond.end.843 ]
  br label %cond.end.847

cond.end.847:                                     ; preds = %cond.end.845, %cond.true.821
  %cond848 = phi i32 [ 0, %cond.true.821 ], [ %cond846, %cond.end.845 ]
  %cmp849 = icmp eq i32 %cond848, 1
  br i1 %cmp849, label %land.lhs.true.850, label %lor.lhs.false.864

land.lhs.true.850:                                ; preds = %cond.end.847
  %635 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left851 = getelementptr inbounds %struct.window, %struct.window* %635, i32 0, i32 30
  %636 = load i32, i32* %pixel_left851, align 4
  %cmp852 = icmp eq i32 %636, 0
  br i1 %cmp852, label %lor.lhs.false.864, label %land.lhs.true.853

land.lhs.true.853:                                ; preds = %land.lhs.true.850
  %637 = load i32, i32* %x.addr, align 4
  %638 = load i32, i32* %left_x, align 4
  %sub854 = sub nsw i32 %637, %638
  %cmp855 = icmp slt i32 %sub854, 0
  br i1 %cmp855, label %cond.true.856, label %cond.false.859

cond.true.856:                                    ; preds = %land.lhs.true.853
  %639 = load i32, i32* %x.addr, align 4
  %640 = load i32, i32* %left_x, align 4
  %sub857 = sub nsw i32 %639, %640
  %sub858 = sub nsw i32 0, %sub857
  br label %cond.end.861

cond.false.859:                                   ; preds = %land.lhs.true.853
  %641 = load i32, i32* %x.addr, align 4
  %642 = load i32, i32* %left_x, align 4
  %sub860 = sub nsw i32 %641, %642
  br label %cond.end.861

cond.end.861:                                     ; preds = %cond.false.859, %cond.true.856
  %cond862 = phi i32 [ %sub858, %cond.true.856 ], [ %sub860, %cond.false.859 ]
  %643 = load i32, i32* %grabbable_width, align 4
  %cmp863 = icmp slt i32 %cond862, %643
  br i1 %cmp863, label %if.then.927, label %lor.lhs.false.864

lor.lhs.false.864:                                ; preds = %cond.end.861, %land.lhs.true.850, %cond.end.847
  %644 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p865 = getelementptr inbounds %struct.window, %struct.window* %644, i32 0, i32 67
  %bf.load866 = load i16, i16* %pseudo_window_p865, align 4
  %bf.lshr867 = lshr i16 %bf.load866, 11
  %bf.clear868 = and i16 %bf.lshr867, 1
  %bf.cast869 = trunc i16 %bf.clear868 to i1
  br i1 %bf.cast869, label %cond.true.870, label %cond.false.871

cond.true.870:                                    ; preds = %lor.lhs.false.864
  br label %cond.end.897

cond.false.871:                                   ; preds = %lor.lhs.false.864
  %645 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type872 = getelementptr inbounds %struct.window, %struct.window* %645, i32 0, i32 16
  %646 = load i64, i64* %vertical_scroll_bar_type872, align 8
  %call873 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp874 = icmp eq i64 %646, %call873
  br i1 %cmp874, label %cond.true.875, label %cond.false.883

cond.true.875:                                    ; preds = %cond.false.871
  %647 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame876 = getelementptr inbounds %struct.window, %struct.window* %647, i32 0, i32 1
  %648 = load i64, i64* %frame876, align 8
  %sub877 = sub nsw i64 %648, 5
  %649 = inttoptr i64 %sub877 to i8*
  %650 = bitcast i8* %649 to %struct.frame*
  %vertical_scroll_bar_type878 = getelementptr inbounds %struct.frame, %struct.frame* %650, i32 0, i32 26
  %651 = bitcast i48* %vertical_scroll_bar_type878 to i64*
  %bf.load879 = load i64, i64* %651, align 8
  %bf.lshr880 = lshr i64 %bf.load879, 30
  %bf.clear881 = and i64 %bf.lshr880, 3
  %bf.cast882 = trunc i64 %bf.clear881 to i32
  br label %cond.end.895

cond.false.883:                                   ; preds = %cond.false.871
  %652 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type884 = getelementptr inbounds %struct.window, %struct.window* %652, i32 0, i32 16
  %653 = load i64, i64* %vertical_scroll_bar_type884, align 8
  %call885 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp886 = icmp eq i64 %653, %call885
  br i1 %cmp886, label %cond.true.887, label %cond.false.888

cond.true.887:                                    ; preds = %cond.false.883
  br label %cond.end.893

cond.false.888:                                   ; preds = %cond.false.883
  %654 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type889 = getelementptr inbounds %struct.window, %struct.window* %654, i32 0, i32 16
  %655 = load i64, i64* %vertical_scroll_bar_type889, align 8
  %call890 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp891 = icmp eq i64 %655, %call890
  %cond892 = select i1 %cmp891, i32 2, i32 0
  br label %cond.end.893

cond.end.893:                                     ; preds = %cond.false.888, %cond.true.887
  %cond894 = phi i32 [ 1, %cond.true.887 ], [ %cond892, %cond.false.888 ]
  br label %cond.end.895

cond.end.895:                                     ; preds = %cond.end.893, %cond.true.875
  %cond896 = phi i32 [ %bf.cast882, %cond.true.875 ], [ %cond894, %cond.end.893 ]
  br label %cond.end.897

cond.end.897:                                     ; preds = %cond.end.895, %cond.true.870
  %cond898 = phi i32 [ 0, %cond.true.870 ], [ %cond896, %cond.end.895 ]
  %cmp899 = icmp eq i32 %cond898, 1
  br i1 %cmp899, label %if.else.928, label %land.lhs.true.900

land.lhs.true.900:                                ; preds = %cond.end.897
  %656 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left901 = getelementptr inbounds %struct.window, %struct.window* %656, i32 0, i32 30
  %657 = load i32, i32* %pixel_left901, align 4
  %658 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width902 = getelementptr inbounds %struct.window, %struct.window* %658, i32 0, i32 34
  %659 = load i32, i32* %pixel_width902, align 4
  %add903 = add nsw i32 %657, %659
  %660 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame904 = getelementptr inbounds %struct.window, %struct.window* %660, i32 0, i32 1
  %661 = load i64, i64* %frame904, align 8
  %sub905 = sub nsw i64 %661, 5
  %662 = inttoptr i64 %sub905 to i8*
  %663 = bitcast i8* %662 to %struct.frame*
  %root_window906 = getelementptr inbounds %struct.frame, %struct.frame* %663, i32 0, i32 5
  %664 = load i64, i64* %root_window906, align 8
  %call907 = call %struct.window* @XWINDOW(i64 %664)
  %pixel_left908 = getelementptr inbounds %struct.window, %struct.window* %call907, i32 0, i32 30
  %665 = load i32, i32* %pixel_left908, align 4
  %666 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame909 = getelementptr inbounds %struct.window, %struct.window* %666, i32 0, i32 1
  %667 = load i64, i64* %frame909, align 8
  %sub910 = sub nsw i64 %667, 5
  %668 = inttoptr i64 %sub910 to i8*
  %669 = bitcast i8* %668 to %struct.frame*
  %root_window911 = getelementptr inbounds %struct.frame, %struct.frame* %669, i32 0, i32 5
  %670 = load i64, i64* %root_window911, align 8
  %call912 = call %struct.window* @XWINDOW(i64 %670)
  %pixel_width913 = getelementptr inbounds %struct.window, %struct.window* %call912, i32 0, i32 34
  %671 = load i32, i32* %pixel_width913, align 4
  %add914 = add nsw i32 %665, %671
  %cmp915 = icmp eq i32 %add903, %add914
  br i1 %cmp915, label %if.else.928, label %land.lhs.true.916

land.lhs.true.916:                                ; preds = %land.lhs.true.900
  %672 = load i32, i32* %x.addr, align 4
  %673 = load i32, i32* %right_x, align 4
  %sub917 = sub nsw i32 %672, %673
  %cmp918 = icmp slt i32 %sub917, 0
  br i1 %cmp918, label %cond.true.919, label %cond.false.922

cond.true.919:                                    ; preds = %land.lhs.true.916
  %674 = load i32, i32* %x.addr, align 4
  %675 = load i32, i32* %right_x, align 4
  %sub920 = sub nsw i32 %674, %675
  %sub921 = sub nsw i32 0, %sub920
  br label %cond.end.924

cond.false.922:                                   ; preds = %land.lhs.true.916
  %676 = load i32, i32* %x.addr, align 4
  %677 = load i32, i32* %right_x, align 4
  %sub923 = sub nsw i32 %676, %677
  br label %cond.end.924

cond.end.924:                                     ; preds = %cond.false.922, %cond.true.919
  %cond925 = phi i32 [ %sub921, %cond.true.919 ], [ %sub923, %cond.false.922 ]
  %678 = load i32, i32* %grabbable_width, align 4
  %cmp926 = icmp slt i32 %cond925, %678
  br i1 %cmp926, label %if.then.927, label %if.else.928

if.then.927:                                      ; preds = %cond.end.924, %cond.end.861
  store i32 3, i32* %retval
  br label %return

if.else.928:                                      ; preds = %cond.end.924, %land.lhs.true.900, %cond.end.897, %cond.end.812
  %679 = load i32, i32* %part, align 4
  store i32 %679, i32* %retval
  br label %return

if.end.929:                                       ; preds = %land.lhs.true.785, %cond.end.781, %cond.false.742, %cond.end.739, %land.lhs.true.690, %land.lhs.true.682, %land.lhs.true.676, %cond.true.671
  br label %if.end.930

if.end.930:                                       ; preds = %if.end.929
  br label %if.end.931

if.end.931:                                       ; preds = %if.end.930
  br label %if.end.932

if.end.932:                                       ; preds = %if.end.931
  %680 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p933 = getelementptr inbounds %struct.window, %struct.window* %680, i32 0, i32 67
  %bf.load934 = load i16, i16* %pseudo_window_p933, align 4
  %bf.lshr935 = lshr i16 %bf.load934, 11
  %bf.clear936 = and i16 %bf.lshr935, 1
  %bf.cast937 = trunc i16 %bf.clear936 to i1
  br i1 %bf.cast937, label %if.then.938, label %if.else.941

if.then.938:                                      ; preds = %if.end.932
  store i32 0, i32* %left_x, align 4
  %681 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width939 = getelementptr inbounds %struct.window, %struct.window* %681, i32 0, i32 34
  %682 = load i32, i32* %pixel_width939, align 4
  %sub940 = sub nsw i32 %682, 1
  store i32 %sub940, i32* %right_x, align 4
  br label %if.end.1081

if.else.941:                                      ; preds = %if.end.932
  %683 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame942 = getelementptr inbounds %struct.window, %struct.window* %683, i32 0, i32 1
  %684 = load i64, i64* %frame942, align 8
  %sub943 = sub nsw i64 %684, 5
  %685 = inttoptr i64 %sub943 to i8*
  %686 = bitcast i8* %685 to %struct.frame*
  %internal_border_width944 = getelementptr inbounds %struct.frame, %struct.frame* %686, i32 0, i32 51
  %687 = load i32, i32* %internal_border_width944, align 4
  %688 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left945 = getelementptr inbounds %struct.window, %struct.window* %688, i32 0, i32 30
  %689 = load i32, i32* %pixel_left945, align 4
  %690 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p946 = getelementptr inbounds %struct.window, %struct.window* %690, i32 0, i32 67
  %bf.load947 = load i16, i16* %pseudo_window_p946, align 4
  %bf.lshr948 = lshr i16 %bf.load947, 11
  %bf.clear949 = and i16 %bf.lshr948, 1
  %bf.cast950 = trunc i16 %bf.clear949 to i1
  br i1 %bf.cast950, label %cond.true.951, label %cond.false.952

cond.true.951:                                    ; preds = %if.else.941
  br label %cond.end.978

cond.false.952:                                   ; preds = %if.else.941
  %691 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type953 = getelementptr inbounds %struct.window, %struct.window* %691, i32 0, i32 16
  %692 = load i64, i64* %vertical_scroll_bar_type953, align 8
  %call954 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp955 = icmp eq i64 %692, %call954
  br i1 %cmp955, label %cond.true.956, label %cond.false.964

cond.true.956:                                    ; preds = %cond.false.952
  %693 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame957 = getelementptr inbounds %struct.window, %struct.window* %693, i32 0, i32 1
  %694 = load i64, i64* %frame957, align 8
  %sub958 = sub nsw i64 %694, 5
  %695 = inttoptr i64 %sub958 to i8*
  %696 = bitcast i8* %695 to %struct.frame*
  %vertical_scroll_bar_type959 = getelementptr inbounds %struct.frame, %struct.frame* %696, i32 0, i32 26
  %697 = bitcast i48* %vertical_scroll_bar_type959 to i64*
  %bf.load960 = load i64, i64* %697, align 8
  %bf.lshr961 = lshr i64 %bf.load960, 30
  %bf.clear962 = and i64 %bf.lshr961, 3
  %bf.cast963 = trunc i64 %bf.clear962 to i32
  br label %cond.end.976

cond.false.964:                                   ; preds = %cond.false.952
  %698 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type965 = getelementptr inbounds %struct.window, %struct.window* %698, i32 0, i32 16
  %699 = load i64, i64* %vertical_scroll_bar_type965, align 8
  %call966 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp967 = icmp eq i64 %699, %call966
  br i1 %cmp967, label %cond.true.968, label %cond.false.969

cond.true.968:                                    ; preds = %cond.false.964
  br label %cond.end.974

cond.false.969:                                   ; preds = %cond.false.964
  %700 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type970 = getelementptr inbounds %struct.window, %struct.window* %700, i32 0, i32 16
  %701 = load i64, i64* %vertical_scroll_bar_type970, align 8
  %call971 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp972 = icmp eq i64 %701, %call971
  %cond973 = select i1 %cmp972, i32 2, i32 0
  br label %cond.end.974

cond.end.974:                                     ; preds = %cond.false.969, %cond.true.968
  %cond975 = phi i32 [ 1, %cond.true.968 ], [ %cond973, %cond.false.969 ]
  br label %cond.end.976

cond.end.976:                                     ; preds = %cond.end.974, %cond.true.956
  %cond977 = phi i32 [ %bf.cast963, %cond.true.956 ], [ %cond975, %cond.end.974 ]
  br label %cond.end.978

cond.end.978:                                     ; preds = %cond.end.976, %cond.true.951
  %cond979 = phi i32 [ 0, %cond.true.951 ], [ %cond977, %cond.end.976 ]
  %cmp980 = icmp eq i32 %cond979, 1
  br i1 %cmp980, label %cond.true.981, label %cond.false.990

cond.true.981:                                    ; preds = %cond.end.978
  %702 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %702, i32 0, i32 61
  %703 = load i32, i32* %scroll_bar_width, align 4
  %cmp982 = icmp sge i32 %703, 0
  br i1 %cmp982, label %cond.true.983, label %cond.false.985

cond.true.983:                                    ; preds = %cond.true.981
  %704 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width984 = getelementptr inbounds %struct.window, %struct.window* %704, i32 0, i32 61
  %705 = load i32, i32* %scroll_bar_width984, align 4
  br label %cond.end.988

cond.false.985:                                   ; preds = %cond.true.981
  %706 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame986 = getelementptr inbounds %struct.window, %struct.window* %706, i32 0, i32 1
  %707 = load i64, i64* %frame986, align 8
  %sub987 = sub nsw i64 %707, 5
  %708 = inttoptr i64 %sub987 to i8*
  %709 = bitcast i8* %708 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %709, i32 0, i32 69
  %710 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.988

cond.end.988:                                     ; preds = %cond.false.985, %cond.true.983
  %cond989 = phi i32 [ %705, %cond.true.983 ], [ %710, %cond.false.985 ]
  br label %cond.end.991

cond.false.990:                                   ; preds = %cond.end.978
  br label %cond.end.991

cond.end.991:                                     ; preds = %cond.false.990, %cond.end.988
  %cond992 = phi i32 [ %cond989, %cond.end.988 ], [ 0, %cond.false.990 ]
  %add993 = add nsw i32 %689, %cond992
  %add994 = add nsw i32 %687, %add993
  store i32 %add994, i32* %left_x, align 4
  %711 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame995 = getelementptr inbounds %struct.window, %struct.window* %711, i32 0, i32 1
  %712 = load i64, i64* %frame995, align 8
  %sub996 = sub nsw i64 %712, 5
  %713 = inttoptr i64 %sub996 to i8*
  %714 = bitcast i8* %713 to %struct.frame*
  %internal_border_width997 = getelementptr inbounds %struct.frame, %struct.frame* %714, i32 0, i32 51
  %715 = load i32, i32* %internal_border_width997, align 4
  %716 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left998 = getelementptr inbounds %struct.window, %struct.window* %716, i32 0, i32 30
  %717 = load i32, i32* %pixel_left998, align 4
  %718 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width999 = getelementptr inbounds %struct.window, %struct.window* %718, i32 0, i32 34
  %719 = load i32, i32* %pixel_width999, align 4
  %add1000 = add nsw i32 %717, %719
  %720 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left1001 = getelementptr inbounds %struct.window, %struct.window* %720, i32 0, i32 30
  %721 = load i32, i32* %pixel_left1001, align 4
  %722 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1002 = getelementptr inbounds %struct.window, %struct.window* %722, i32 0, i32 34
  %723 = load i32, i32* %pixel_width1002, align 4
  %add1003 = add nsw i32 %721, %723
  %724 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1004 = getelementptr inbounds %struct.window, %struct.window* %724, i32 0, i32 1
  %725 = load i64, i64* %frame1004, align 8
  %sub1005 = sub nsw i64 %725, 5
  %726 = inttoptr i64 %sub1005 to i8*
  %727 = bitcast i8* %726 to %struct.frame*
  %root_window1006 = getelementptr inbounds %struct.frame, %struct.frame* %727, i32 0, i32 5
  %728 = load i64, i64* %root_window1006, align 8
  %call1007 = call %struct.window* @XWINDOW(i64 %728)
  %pixel_left1008 = getelementptr inbounds %struct.window, %struct.window* %call1007, i32 0, i32 30
  %729 = load i32, i32* %pixel_left1008, align 4
  %730 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1009 = getelementptr inbounds %struct.window, %struct.window* %730, i32 0, i32 1
  %731 = load i64, i64* %frame1009, align 8
  %sub1010 = sub nsw i64 %731, 5
  %732 = inttoptr i64 %sub1010 to i8*
  %733 = bitcast i8* %732 to %struct.frame*
  %root_window1011 = getelementptr inbounds %struct.frame, %struct.frame* %733, i32 0, i32 5
  %734 = load i64, i64* %root_window1011, align 8
  %call1012 = call %struct.window* @XWINDOW(i64 %734)
  %pixel_width1013 = getelementptr inbounds %struct.window, %struct.window* %call1012, i32 0, i32 34
  %735 = load i32, i32* %pixel_width1013, align 4
  %add1014 = add nsw i32 %729, %735
  %cmp1015 = icmp eq i32 %add1003, %add1014
  br i1 %cmp1015, label %cond.true.1021, label %lor.lhs.false.1016

lor.lhs.false.1016:                               ; preds = %cond.end.991
  %736 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini1017 = getelementptr inbounds %struct.window, %struct.window* %736, i32 0, i32 67
  %bf.load1018 = load i16, i16* %mini1017, align 4
  %bf.clear1019 = and i16 %bf.load1018, 1
  %bf.cast1020 = trunc i16 %bf.clear1019 to i1
  br i1 %bf.cast1020, label %cond.true.1021, label %cond.false.1022

cond.true.1021:                                   ; preds = %lor.lhs.false.1016, %cond.end.991
  br label %cond.end.1026

cond.false.1022:                                  ; preds = %lor.lhs.false.1016
  %737 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1023 = getelementptr inbounds %struct.window, %struct.window* %737, i32 0, i32 1
  %738 = load i64, i64* %frame1023, align 8
  %sub1024 = sub nsw i64 %738, 5
  %739 = inttoptr i64 %sub1024 to i8*
  %740 = bitcast i8* %739 to %struct.frame*
  %right_divider_width1025 = getelementptr inbounds %struct.frame, %struct.frame* %740, i32 0, i32 52
  %741 = load i32, i32* %right_divider_width1025, align 4
  br label %cond.end.1026

cond.end.1026:                                    ; preds = %cond.false.1022, %cond.true.1021
  %cond1027 = phi i32 [ 0, %cond.true.1021 ], [ %741, %cond.false.1022 ]
  %sub1028 = sub nsw i32 %add1000, %cond1027
  %742 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1029 = getelementptr inbounds %struct.window, %struct.window* %742, i32 0, i32 67
  %bf.load1030 = load i16, i16* %pseudo_window_p1029, align 4
  %bf.lshr1031 = lshr i16 %bf.load1030, 11
  %bf.clear1032 = and i16 %bf.lshr1031, 1
  %bf.cast1033 = trunc i16 %bf.clear1032 to i1
  br i1 %bf.cast1033, label %cond.true.1034, label %cond.false.1035

cond.true.1034:                                   ; preds = %cond.end.1026
  br label %cond.end.1061

cond.false.1035:                                  ; preds = %cond.end.1026
  %743 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1036 = getelementptr inbounds %struct.window, %struct.window* %743, i32 0, i32 16
  %744 = load i64, i64* %vertical_scroll_bar_type1036, align 8
  %call1037 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp1038 = icmp eq i64 %744, %call1037
  br i1 %cmp1038, label %cond.true.1039, label %cond.false.1047

cond.true.1039:                                   ; preds = %cond.false.1035
  %745 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1040 = getelementptr inbounds %struct.window, %struct.window* %745, i32 0, i32 1
  %746 = load i64, i64* %frame1040, align 8
  %sub1041 = sub nsw i64 %746, 5
  %747 = inttoptr i64 %sub1041 to i8*
  %748 = bitcast i8* %747 to %struct.frame*
  %vertical_scroll_bar_type1042 = getelementptr inbounds %struct.frame, %struct.frame* %748, i32 0, i32 26
  %749 = bitcast i48* %vertical_scroll_bar_type1042 to i64*
  %bf.load1043 = load i64, i64* %749, align 8
  %bf.lshr1044 = lshr i64 %bf.load1043, 30
  %bf.clear1045 = and i64 %bf.lshr1044, 3
  %bf.cast1046 = trunc i64 %bf.clear1045 to i32
  br label %cond.end.1059

cond.false.1047:                                  ; preds = %cond.false.1035
  %750 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1048 = getelementptr inbounds %struct.window, %struct.window* %750, i32 0, i32 16
  %751 = load i64, i64* %vertical_scroll_bar_type1048, align 8
  %call1049 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp1050 = icmp eq i64 %751, %call1049
  br i1 %cmp1050, label %cond.true.1051, label %cond.false.1052

cond.true.1051:                                   ; preds = %cond.false.1047
  br label %cond.end.1057

cond.false.1052:                                  ; preds = %cond.false.1047
  %752 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1053 = getelementptr inbounds %struct.window, %struct.window* %752, i32 0, i32 16
  %753 = load i64, i64* %vertical_scroll_bar_type1053, align 8
  %call1054 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp1055 = icmp eq i64 %753, %call1054
  %cond1056 = select i1 %cmp1055, i32 2, i32 0
  br label %cond.end.1057

cond.end.1057:                                    ; preds = %cond.false.1052, %cond.true.1051
  %cond1058 = phi i32 [ 1, %cond.true.1051 ], [ %cond1056, %cond.false.1052 ]
  br label %cond.end.1059

cond.end.1059:                                    ; preds = %cond.end.1057, %cond.true.1039
  %cond1060 = phi i32 [ %bf.cast1046, %cond.true.1039 ], [ %cond1058, %cond.end.1057 ]
  br label %cond.end.1061

cond.end.1061:                                    ; preds = %cond.end.1059, %cond.true.1034
  %cond1062 = phi i32 [ 0, %cond.true.1034 ], [ %cond1060, %cond.end.1059 ]
  %cmp1063 = icmp eq i32 %cond1062, 2
  br i1 %cmp1063, label %cond.true.1064, label %cond.false.1075

cond.true.1064:                                   ; preds = %cond.end.1061
  %754 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width1065 = getelementptr inbounds %struct.window, %struct.window* %754, i32 0, i32 61
  %755 = load i32, i32* %scroll_bar_width1065, align 4
  %cmp1066 = icmp sge i32 %755, 0
  br i1 %cmp1066, label %cond.true.1067, label %cond.false.1069

cond.true.1067:                                   ; preds = %cond.true.1064
  %756 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width1068 = getelementptr inbounds %struct.window, %struct.window* %756, i32 0, i32 61
  %757 = load i32, i32* %scroll_bar_width1068, align 4
  br label %cond.end.1073

cond.false.1069:                                  ; preds = %cond.true.1064
  %758 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1070 = getelementptr inbounds %struct.window, %struct.window* %758, i32 0, i32 1
  %759 = load i64, i64* %frame1070, align 8
  %sub1071 = sub nsw i64 %759, 5
  %760 = inttoptr i64 %sub1071 to i8*
  %761 = bitcast i8* %760 to %struct.frame*
  %config_scroll_bar_width1072 = getelementptr inbounds %struct.frame, %struct.frame* %761, i32 0, i32 69
  %762 = load i32, i32* %config_scroll_bar_width1072, align 4
  br label %cond.end.1073

cond.end.1073:                                    ; preds = %cond.false.1069, %cond.true.1067
  %cond1074 = phi i32 [ %757, %cond.true.1067 ], [ %762, %cond.false.1069 ]
  br label %cond.end.1076

cond.false.1075:                                  ; preds = %cond.end.1061
  br label %cond.end.1076

cond.end.1076:                                    ; preds = %cond.false.1075, %cond.end.1073
  %cond1077 = phi i32 [ %cond1074, %cond.end.1073 ], [ 0, %cond.false.1075 ]
  %sub1078 = sub nsw i32 %sub1028, %cond1077
  %add1079 = add nsw i32 %715, %sub1078
  %sub1080 = sub nsw i32 %add1079, 1
  store i32 %sub1080, i32* %right_x, align 4
  br label %if.end.1081

if.end.1081:                                      ; preds = %cond.end.1076, %if.then.938
  %763 = load i32, i32* %x.addr, align 4
  %764 = load i32, i32* %left_x, align 4
  %cmp1082 = icmp slt i32 %763, %764
  br i1 %cmp1082, label %if.then.1085, label %lor.lhs.false.1083

lor.lhs.false.1083:                               ; preds = %if.end.1081
  %765 = load i32, i32* %x.addr, align 4
  %766 = load i32, i32* %right_x, align 4
  %cmp1084 = icmp sgt i32 %765, %766
  br i1 %cmp1084, label %if.then.1085, label %if.end.1086

if.then.1085:                                     ; preds = %lor.lhs.false.1083, %if.end.1081
  store i32 9, i32* %retval
  br label %return

if.end.1086:                                      ; preds = %lor.lhs.false.1083
  %767 = load %struct.window*, %struct.window** %w.addr, align 8
  %call1087 = call i32 @window_box_width(%struct.window* %767, i32 0)
  store i32 %call1087, i32* %lmargin_width, align 4
  %768 = load %struct.window*, %struct.window** %w.addr, align 8
  %call1088 = call i32 @window_box_width(%struct.window* %768, i32 2)
  store i32 %call1088, i32* %rmargin_width, align 4
  %769 = load %struct.window*, %struct.window** %w.addr, align 8
  %call1089 = call i32 @window_box_left(%struct.window* %769, i32 1)
  store i32 %call1089, i32* %text_left, align 4
  %770 = load i32, i32* %text_left, align 4
  %771 = load %struct.window*, %struct.window** %w.addr, align 8
  %call1090 = call i32 @window_box_width(%struct.window* %771, i32 1)
  %add1091 = add nsw i32 %770, %call1090
  store i32 %add1091, i32* %text_right, align 4
  %772 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %772, i32 0, i32 26
  %773 = bitcast i48* %output_method to i64*
  %bf.load1092 = load i64, i64* %773, align 8
  %bf.lshr1093 = lshr i64 %bf.load1092, 23
  %bf.clear1094 = and i64 %bf.lshr1093, 7
  %bf.cast1095 = trunc i64 %bf.clear1094 to i32
  %cmp1096 = icmp eq i32 %bf.cast1095, 2
  br i1 %cmp1096, label %if.then.1097, label %if.else.1233

if.then.1097:                                     ; preds = %if.end.1086
  %774 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1098 = getelementptr inbounds %struct.window, %struct.window* %774, i32 0, i32 67
  %bf.load1099 = load i16, i16* %pseudo_window_p1098, align 4
  %bf.lshr1100 = lshr i16 %bf.load1099, 11
  %bf.clear1101 = and i16 %bf.lshr1100, 1
  %bf.cast1102 = trunc i16 %bf.clear1101 to i1
  br i1 %bf.cast1102, label %if.end.1232, label %land.lhs.true.1103

land.lhs.true.1103:                               ; preds = %if.then.1097
  %775 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left1104 = getelementptr inbounds %struct.window, %struct.window* %775, i32 0, i32 30
  %776 = load i32, i32* %pixel_left1104, align 4
  %777 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1105 = getelementptr inbounds %struct.window, %struct.window* %777, i32 0, i32 34
  %778 = load i32, i32* %pixel_width1105, align 4
  %add1106 = add nsw i32 %776, %778
  %779 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1107 = getelementptr inbounds %struct.window, %struct.window* %779, i32 0, i32 1
  %780 = load i64, i64* %frame1107, align 8
  %sub1108 = sub nsw i64 %780, 5
  %781 = inttoptr i64 %sub1108 to i8*
  %782 = bitcast i8* %781 to %struct.frame*
  %root_window1109 = getelementptr inbounds %struct.frame, %struct.frame* %782, i32 0, i32 5
  %783 = load i64, i64* %root_window1109, align 8
  %call1110 = call %struct.window* @XWINDOW(i64 %783)
  %pixel_left1111 = getelementptr inbounds %struct.window, %struct.window* %call1110, i32 0, i32 30
  %784 = load i32, i32* %pixel_left1111, align 4
  %785 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1112 = getelementptr inbounds %struct.window, %struct.window* %785, i32 0, i32 1
  %786 = load i64, i64* %frame1112, align 8
  %sub1113 = sub nsw i64 %786, 5
  %787 = inttoptr i64 %sub1113 to i8*
  %788 = bitcast i8* %787 to %struct.frame*
  %root_window1114 = getelementptr inbounds %struct.frame, %struct.frame* %788, i32 0, i32 5
  %789 = load i64, i64* %root_window1114, align 8
  %call1115 = call %struct.window* @XWINDOW(i64 %789)
  %pixel_width1116 = getelementptr inbounds %struct.window, %struct.window* %call1115, i32 0, i32 34
  %790 = load i32, i32* %pixel_width1116, align 4
  %add1117 = add nsw i32 %784, %790
  %cmp1118 = icmp eq i32 %add1106, %add1117
  br i1 %cmp1118, label %cond.true.1124, label %lor.lhs.false.1119

lor.lhs.false.1119:                               ; preds = %land.lhs.true.1103
  %791 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini1120 = getelementptr inbounds %struct.window, %struct.window* %791, i32 0, i32 67
  %bf.load1121 = load i16, i16* %mini1120, align 4
  %bf.clear1122 = and i16 %bf.load1121, 1
  %bf.cast1123 = trunc i16 %bf.clear1122 to i1
  br i1 %bf.cast1123, label %cond.true.1124, label %cond.false.1125

cond.true.1124:                                   ; preds = %lor.lhs.false.1119, %land.lhs.true.1103
  br label %cond.end.1129

cond.false.1125:                                  ; preds = %lor.lhs.false.1119
  %792 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1126 = getelementptr inbounds %struct.window, %struct.window* %792, i32 0, i32 1
  %793 = load i64, i64* %frame1126, align 8
  %sub1127 = sub nsw i64 %793, 5
  %794 = inttoptr i64 %sub1127 to i8*
  %795 = bitcast i8* %794 to %struct.frame*
  %right_divider_width1128 = getelementptr inbounds %struct.frame, %struct.frame* %795, i32 0, i32 52
  %796 = load i32, i32* %right_divider_width1128, align 4
  br label %cond.end.1129

cond.end.1129:                                    ; preds = %cond.false.1125, %cond.true.1124
  %cond1130 = phi i32 [ 0, %cond.true.1124 ], [ %796, %cond.false.1125 ]
  %cmp1131 = icmp eq i32 %cond1130, 0
  br i1 %cmp1131, label %land.lhs.true.1132, label %if.end.1232

land.lhs.true.1132:                               ; preds = %cond.end.1129
  %797 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1133 = getelementptr inbounds %struct.window, %struct.window* %797, i32 0, i32 67
  %bf.load1134 = load i16, i16* %pseudo_window_p1133, align 4
  %bf.lshr1135 = lshr i16 %bf.load1134, 11
  %bf.clear1136 = and i16 %bf.lshr1135, 1
  %bf.cast1137 = trunc i16 %bf.clear1136 to i1
  br i1 %bf.cast1137, label %cond.true.1138, label %cond.false.1139

cond.true.1138:                                   ; preds = %land.lhs.true.1132
  br label %cond.end.1165

cond.false.1139:                                  ; preds = %land.lhs.true.1132
  %798 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1140 = getelementptr inbounds %struct.window, %struct.window* %798, i32 0, i32 16
  %799 = load i64, i64* %vertical_scroll_bar_type1140, align 8
  %call1141 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp1142 = icmp eq i64 %799, %call1141
  br i1 %cmp1142, label %cond.true.1143, label %cond.false.1151

cond.true.1143:                                   ; preds = %cond.false.1139
  %800 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1144 = getelementptr inbounds %struct.window, %struct.window* %800, i32 0, i32 1
  %801 = load i64, i64* %frame1144, align 8
  %sub1145 = sub nsw i64 %801, 5
  %802 = inttoptr i64 %sub1145 to i8*
  %803 = bitcast i8* %802 to %struct.frame*
  %vertical_scroll_bar_type1146 = getelementptr inbounds %struct.frame, %struct.frame* %803, i32 0, i32 26
  %804 = bitcast i48* %vertical_scroll_bar_type1146 to i64*
  %bf.load1147 = load i64, i64* %804, align 8
  %bf.lshr1148 = lshr i64 %bf.load1147, 30
  %bf.clear1149 = and i64 %bf.lshr1148, 3
  %bf.cast1150 = trunc i64 %bf.clear1149 to i32
  br label %cond.end.1163

cond.false.1151:                                  ; preds = %cond.false.1139
  %805 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1152 = getelementptr inbounds %struct.window, %struct.window* %805, i32 0, i32 16
  %806 = load i64, i64* %vertical_scroll_bar_type1152, align 8
  %call1153 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp1154 = icmp eq i64 %806, %call1153
  br i1 %cmp1154, label %cond.true.1155, label %cond.false.1156

cond.true.1155:                                   ; preds = %cond.false.1151
  br label %cond.end.1161

cond.false.1156:                                  ; preds = %cond.false.1151
  %807 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1157 = getelementptr inbounds %struct.window, %struct.window* %807, i32 0, i32 16
  %808 = load i64, i64* %vertical_scroll_bar_type1157, align 8
  %call1158 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp1159 = icmp eq i64 %808, %call1158
  %cond1160 = select i1 %cmp1159, i32 2, i32 0
  br label %cond.end.1161

cond.end.1161:                                    ; preds = %cond.false.1156, %cond.true.1155
  %cond1162 = phi i32 [ 1, %cond.true.1155 ], [ %cond1160, %cond.false.1156 ]
  br label %cond.end.1163

cond.end.1163:                                    ; preds = %cond.end.1161, %cond.true.1143
  %cond1164 = phi i32 [ %bf.cast1150, %cond.true.1143 ], [ %cond1162, %cond.end.1161 ]
  br label %cond.end.1165

cond.end.1165:                                    ; preds = %cond.end.1163, %cond.true.1138
  %cond1166 = phi i32 [ 0, %cond.true.1138 ], [ %cond1164, %cond.end.1163 ]
  %cmp1167 = icmp eq i32 %cond1166, 1
  br i1 %cmp1167, label %if.end.1232, label %lor.lhs.false.1168

lor.lhs.false.1168:                               ; preds = %cond.end.1165
  %809 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1169 = getelementptr inbounds %struct.window, %struct.window* %809, i32 0, i32 67
  %bf.load1170 = load i16, i16* %pseudo_window_p1169, align 4
  %bf.lshr1171 = lshr i16 %bf.load1170, 11
  %bf.clear1172 = and i16 %bf.lshr1171, 1
  %bf.cast1173 = trunc i16 %bf.clear1172 to i1
  br i1 %bf.cast1173, label %cond.true.1174, label %cond.false.1175

cond.true.1174:                                   ; preds = %lor.lhs.false.1168
  br label %cond.end.1201

cond.false.1175:                                  ; preds = %lor.lhs.false.1168
  %810 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1176 = getelementptr inbounds %struct.window, %struct.window* %810, i32 0, i32 16
  %811 = load i64, i64* %vertical_scroll_bar_type1176, align 8
  %call1177 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp1178 = icmp eq i64 %811, %call1177
  br i1 %cmp1178, label %cond.true.1179, label %cond.false.1187

cond.true.1179:                                   ; preds = %cond.false.1175
  %812 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1180 = getelementptr inbounds %struct.window, %struct.window* %812, i32 0, i32 1
  %813 = load i64, i64* %frame1180, align 8
  %sub1181 = sub nsw i64 %813, 5
  %814 = inttoptr i64 %sub1181 to i8*
  %815 = bitcast i8* %814 to %struct.frame*
  %vertical_scroll_bar_type1182 = getelementptr inbounds %struct.frame, %struct.frame* %815, i32 0, i32 26
  %816 = bitcast i48* %vertical_scroll_bar_type1182 to i64*
  %bf.load1183 = load i64, i64* %816, align 8
  %bf.lshr1184 = lshr i64 %bf.load1183, 30
  %bf.clear1185 = and i64 %bf.lshr1184, 3
  %bf.cast1186 = trunc i64 %bf.clear1185 to i32
  br label %cond.end.1199

cond.false.1187:                                  ; preds = %cond.false.1175
  %817 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1188 = getelementptr inbounds %struct.window, %struct.window* %817, i32 0, i32 16
  %818 = load i64, i64* %vertical_scroll_bar_type1188, align 8
  %call1189 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp1190 = icmp eq i64 %818, %call1189
  br i1 %cmp1190, label %cond.true.1191, label %cond.false.1192

cond.true.1191:                                   ; preds = %cond.false.1187
  br label %cond.end.1197

cond.false.1192:                                  ; preds = %cond.false.1187
  %819 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type1193 = getelementptr inbounds %struct.window, %struct.window* %819, i32 0, i32 16
  %820 = load i64, i64* %vertical_scroll_bar_type1193, align 8
  %call1194 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp1195 = icmp eq i64 %820, %call1194
  %cond1196 = select i1 %cmp1195, i32 2, i32 0
  br label %cond.end.1197

cond.end.1197:                                    ; preds = %cond.false.1192, %cond.true.1191
  %cond1198 = phi i32 [ 1, %cond.true.1191 ], [ %cond1196, %cond.false.1192 ]
  br label %cond.end.1199

cond.end.1199:                                    ; preds = %cond.end.1197, %cond.true.1179
  %cond1200 = phi i32 [ %bf.cast1186, %cond.true.1179 ], [ %cond1198, %cond.end.1197 ]
  br label %cond.end.1201

cond.end.1201:                                    ; preds = %cond.end.1199, %cond.true.1174
  %cond1202 = phi i32 [ 0, %cond.true.1174 ], [ %cond1200, %cond.end.1199 ]
  %cmp1203 = icmp eq i32 %cond1202, 2
  br i1 %cmp1203, label %if.end.1232, label %land.lhs.true.1204

land.lhs.true.1204:                               ; preds = %cond.end.1201
  %821 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left1205 = getelementptr inbounds %struct.window, %struct.window* %821, i32 0, i32 30
  %822 = load i32, i32* %pixel_left1205, align 4
  %823 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1206 = getelementptr inbounds %struct.window, %struct.window* %823, i32 0, i32 34
  %824 = load i32, i32* %pixel_width1206, align 4
  %add1207 = add nsw i32 %822, %824
  %825 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1208 = getelementptr inbounds %struct.window, %struct.window* %825, i32 0, i32 1
  %826 = load i64, i64* %frame1208, align 8
  %sub1209 = sub nsw i64 %826, 5
  %827 = inttoptr i64 %sub1209 to i8*
  %828 = bitcast i8* %827 to %struct.frame*
  %root_window1210 = getelementptr inbounds %struct.frame, %struct.frame* %828, i32 0, i32 5
  %829 = load i64, i64* %root_window1210, align 8
  %call1211 = call %struct.window* @XWINDOW(i64 %829)
  %pixel_left1212 = getelementptr inbounds %struct.window, %struct.window* %call1211, i32 0, i32 30
  %830 = load i32, i32* %pixel_left1212, align 4
  %831 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1213 = getelementptr inbounds %struct.window, %struct.window* %831, i32 0, i32 1
  %832 = load i64, i64* %frame1213, align 8
  %sub1214 = sub nsw i64 %832, 5
  %833 = inttoptr i64 %sub1214 to i8*
  %834 = bitcast i8* %833 to %struct.frame*
  %root_window1215 = getelementptr inbounds %struct.frame, %struct.frame* %834, i32 0, i32 5
  %835 = load i64, i64* %root_window1215, align 8
  %call1216 = call %struct.window* @XWINDOW(i64 %835)
  %pixel_width1217 = getelementptr inbounds %struct.window, %struct.window* %call1216, i32 0, i32 34
  %836 = load i32, i32* %pixel_width1217, align 4
  %add1218 = add nsw i32 %830, %836
  %cmp1219 = icmp eq i32 %add1207, %add1218
  br i1 %cmp1219, label %if.end.1232, label %land.lhs.true.1220

land.lhs.true.1220:                               ; preds = %land.lhs.true.1204
  %837 = load i32, i32* %x.addr, align 4
  %838 = load i32, i32* %right_x, align 4
  %sub1221 = sub nsw i32 %837, %838
  %cmp1222 = icmp slt i32 %sub1221, 0
  br i1 %cmp1222, label %cond.true.1223, label %cond.false.1226

cond.true.1223:                                   ; preds = %land.lhs.true.1220
  %839 = load i32, i32* %x.addr, align 4
  %840 = load i32, i32* %right_x, align 4
  %sub1224 = sub nsw i32 %839, %840
  %sub1225 = sub nsw i32 0, %sub1224
  br label %cond.end.1228

cond.false.1226:                                  ; preds = %land.lhs.true.1220
  %841 = load i32, i32* %x.addr, align 4
  %842 = load i32, i32* %right_x, align 4
  %sub1227 = sub nsw i32 %841, %842
  br label %cond.end.1228

cond.end.1228:                                    ; preds = %cond.false.1226, %cond.true.1223
  %cond1229 = phi i32 [ %sub1225, %cond.true.1223 ], [ %sub1227, %cond.false.1226 ]
  %843 = load i32, i32* %grabbable_width, align 4
  %cmp1230 = icmp slt i32 %cond1229, %843
  br i1 %cmp1230, label %if.then.1231, label %if.end.1232

if.then.1231:                                     ; preds = %cond.end.1228
  store i32 3, i32* %retval
  br label %return

if.end.1232:                                      ; preds = %cond.end.1228, %land.lhs.true.1204, %cond.end.1201, %cond.end.1165, %cond.end.1129, %if.then.1097
  br label %if.end.1289

if.else.1233:                                     ; preds = %if.end.1086
  %844 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p1234 = getelementptr inbounds %struct.window, %struct.window* %844, i32 0, i32 67
  %bf.load1235 = load i16, i16* %pseudo_window_p1234, align 4
  %bf.lshr1236 = lshr i16 %bf.load1235, 11
  %bf.clear1237 = and i16 %bf.lshr1236, 1
  %bf.cast1238 = trunc i16 %bf.clear1237 to i1
  br i1 %bf.cast1238, label %if.end.1288, label %land.lhs.true.1239

land.lhs.true.1239:                               ; preds = %if.else.1233
  %845 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left1240 = getelementptr inbounds %struct.window, %struct.window* %845, i32 0, i32 30
  %846 = load i32, i32* %pixel_left1240, align 4
  %847 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1241 = getelementptr inbounds %struct.window, %struct.window* %847, i32 0, i32 34
  %848 = load i32, i32* %pixel_width1241, align 4
  %add1242 = add nsw i32 %846, %848
  %849 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1243 = getelementptr inbounds %struct.window, %struct.window* %849, i32 0, i32 1
  %850 = load i64, i64* %frame1243, align 8
  %sub1244 = sub nsw i64 %850, 5
  %851 = inttoptr i64 %sub1244 to i8*
  %852 = bitcast i8* %851 to %struct.frame*
  %root_window1245 = getelementptr inbounds %struct.frame, %struct.frame* %852, i32 0, i32 5
  %853 = load i64, i64* %root_window1245, align 8
  %call1246 = call %struct.window* @XWINDOW(i64 %853)
  %pixel_left1247 = getelementptr inbounds %struct.window, %struct.window* %call1246, i32 0, i32 30
  %854 = load i32, i32* %pixel_left1247, align 4
  %855 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1248 = getelementptr inbounds %struct.window, %struct.window* %855, i32 0, i32 1
  %856 = load i64, i64* %frame1248, align 8
  %sub1249 = sub nsw i64 %856, 5
  %857 = inttoptr i64 %sub1249 to i8*
  %858 = bitcast i8* %857 to %struct.frame*
  %root_window1250 = getelementptr inbounds %struct.frame, %struct.frame* %858, i32 0, i32 5
  %859 = load i64, i64* %root_window1250, align 8
  %call1251 = call %struct.window* @XWINDOW(i64 %859)
  %pixel_width1252 = getelementptr inbounds %struct.window, %struct.window* %call1251, i32 0, i32 34
  %860 = load i32, i32* %pixel_width1252, align 4
  %add1253 = add nsw i32 %854, %860
  %cmp1254 = icmp eq i32 %add1242, %add1253
  br i1 %cmp1254, label %cond.true.1260, label %lor.lhs.false.1255

lor.lhs.false.1255:                               ; preds = %land.lhs.true.1239
  %861 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini1256 = getelementptr inbounds %struct.window, %struct.window* %861, i32 0, i32 67
  %bf.load1257 = load i16, i16* %mini1256, align 4
  %bf.clear1258 = and i16 %bf.load1257, 1
  %bf.cast1259 = trunc i16 %bf.clear1258 to i1
  br i1 %bf.cast1259, label %cond.true.1260, label %cond.false.1261

cond.true.1260:                                   ; preds = %lor.lhs.false.1255, %land.lhs.true.1239
  br label %cond.end.1265

cond.false.1261:                                  ; preds = %lor.lhs.false.1255
  %862 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1262 = getelementptr inbounds %struct.window, %struct.window* %862, i32 0, i32 1
  %863 = load i64, i64* %frame1262, align 8
  %sub1263 = sub nsw i64 %863, 5
  %864 = inttoptr i64 %sub1263 to i8*
  %865 = bitcast i8* %864 to %struct.frame*
  %right_divider_width1264 = getelementptr inbounds %struct.frame, %struct.frame* %865, i32 0, i32 52
  %866 = load i32, i32* %right_divider_width1264, align 4
  br label %cond.end.1265

cond.end.1265:                                    ; preds = %cond.false.1261, %cond.true.1260
  %cond1266 = phi i32 [ 0, %cond.true.1260 ], [ %866, %cond.false.1261 ]
  %cmp1267 = icmp eq i32 %cond1266, 0
  br i1 %cmp1267, label %land.lhs.true.1268, label %if.end.1288

land.lhs.true.1268:                               ; preds = %cond.end.1265
  %867 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left1269 = getelementptr inbounds %struct.window, %struct.window* %867, i32 0, i32 30
  %868 = load i32, i32* %pixel_left1269, align 4
  %869 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1270 = getelementptr inbounds %struct.window, %struct.window* %869, i32 0, i32 34
  %870 = load i32, i32* %pixel_width1270, align 4
  %add1271 = add nsw i32 %868, %870
  %871 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1272 = getelementptr inbounds %struct.window, %struct.window* %871, i32 0, i32 1
  %872 = load i64, i64* %frame1272, align 8
  %sub1273 = sub nsw i64 %872, 5
  %873 = inttoptr i64 %sub1273 to i8*
  %874 = bitcast i8* %873 to %struct.frame*
  %root_window1274 = getelementptr inbounds %struct.frame, %struct.frame* %874, i32 0, i32 5
  %875 = load i64, i64* %root_window1274, align 8
  %call1275 = call %struct.window* @XWINDOW(i64 %875)
  %pixel_left1276 = getelementptr inbounds %struct.window, %struct.window* %call1275, i32 0, i32 30
  %876 = load i32, i32* %pixel_left1276, align 4
  %877 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1277 = getelementptr inbounds %struct.window, %struct.window* %877, i32 0, i32 1
  %878 = load i64, i64* %frame1277, align 8
  %sub1278 = sub nsw i64 %878, 5
  %879 = inttoptr i64 %sub1278 to i8*
  %880 = bitcast i8* %879 to %struct.frame*
  %root_window1279 = getelementptr inbounds %struct.frame, %struct.frame* %880, i32 0, i32 5
  %881 = load i64, i64* %root_window1279, align 8
  %call1280 = call %struct.window* @XWINDOW(i64 %881)
  %pixel_width1281 = getelementptr inbounds %struct.window, %struct.window* %call1280, i32 0, i32 34
  %882 = load i32, i32* %pixel_width1281, align 4
  %add1282 = add nsw i32 %876, %882
  %cmp1283 = icmp eq i32 %add1271, %add1282
  br i1 %cmp1283, label %if.end.1288, label %land.lhs.true.1284

land.lhs.true.1284:                               ; preds = %land.lhs.true.1268
  %883 = load i32, i32* %x.addr, align 4
  %884 = load i32, i32* %right_x, align 4
  %885 = load i32, i32* %ux, align 4
  %sub1285 = sub nsw i32 %884, %885
  %cmp1286 = icmp sgt i32 %883, %sub1285
  br i1 %cmp1286, label %if.then.1287, label %if.end.1288

if.then.1287:                                     ; preds = %land.lhs.true.1284
  store i32 3, i32* %retval
  br label %return

if.end.1288:                                      ; preds = %land.lhs.true.1284, %land.lhs.true.1268, %cond.end.1265, %if.else.1233
  br label %if.end.1289

if.end.1289:                                      ; preds = %if.end.1288, %if.end.1232
  %886 = load i32, i32* %x.addr, align 4
  %887 = load i32, i32* %text_left, align 4
  %cmp1290 = icmp slt i32 %886, %887
  br i1 %cmp1290, label %if.then.1291, label %if.end.1315

if.then.1291:                                     ; preds = %if.end.1289
  %888 = load i32, i32* %lmargin_width, align 4
  %cmp1292 = icmp sgt i32 %888, 0
  br i1 %cmp1292, label %land.lhs.true.1293, label %if.else.1314

land.lhs.true.1293:                               ; preds = %if.then.1291
  %889 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %889, i32 0, i32 67
  %bf.load1294 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr1295 = lshr i16 %bf.load1294, 12
  %bf.clear1296 = and i16 %bf.lshr1295, 1
  %bf.cast1297 = trunc i16 %bf.clear1296 to i1
  br i1 %bf.cast1297, label %cond.true.1298, label %cond.false.1310

cond.true.1298:                                   ; preds = %land.lhs.true.1293
  %890 = load i32, i32* %x.addr, align 4
  %891 = load i32, i32* %left_x, align 4
  %892 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %892, i32 0, i32 57
  %893 = load i32, i32* %left_fringe_width, align 4
  %cmp1299 = icmp sge i32 %893, 0
  br i1 %cmp1299, label %cond.true.1300, label %cond.false.1302

cond.true.1300:                                   ; preds = %cond.true.1298
  %894 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width1301 = getelementptr inbounds %struct.window, %struct.window* %894, i32 0, i32 57
  %895 = load i32, i32* %left_fringe_width1301, align 4
  br label %cond.end.1306

cond.false.1302:                                  ; preds = %cond.true.1298
  %896 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1303 = getelementptr inbounds %struct.window, %struct.window* %896, i32 0, i32 1
  %897 = load i64, i64* %frame1303, align 8
  %sub1304 = sub nsw i64 %897, 5
  %898 = inttoptr i64 %sub1304 to i8*
  %899 = bitcast i8* %898 to %struct.frame*
  %left_fringe_width1305 = getelementptr inbounds %struct.frame, %struct.frame* %899, i32 0, i32 54
  %900 = load i32, i32* %left_fringe_width1305, align 4
  br label %cond.end.1306

cond.end.1306:                                    ; preds = %cond.false.1302, %cond.true.1300
  %cond1307 = phi i32 [ %895, %cond.true.1300 ], [ %900, %cond.false.1302 ]
  %add1308 = add nsw i32 %891, %cond1307
  %cmp1309 = icmp sge i32 %890, %add1308
  br i1 %cmp1309, label %if.then.1313, label %if.else.1314

cond.false.1310:                                  ; preds = %land.lhs.true.1293
  %901 = load i32, i32* %x.addr, align 4
  %902 = load i32, i32* %left_x, align 4
  %903 = load i32, i32* %lmargin_width, align 4
  %add1311 = add nsw i32 %902, %903
  %cmp1312 = icmp slt i32 %901, %add1311
  br i1 %cmp1312, label %if.then.1313, label %if.else.1314

if.then.1313:                                     ; preds = %cond.false.1310, %cond.end.1306
  store i32 7, i32* %retval
  br label %return

if.else.1314:                                     ; preds = %cond.false.1310, %cond.end.1306, %if.then.1291
  store i32 5, i32* %retval
  br label %return

if.end.1315:                                      ; preds = %if.end.1289
  %904 = load i32, i32* %x.addr, align 4
  %905 = load i32, i32* %text_right, align 4
  %cmp1316 = icmp sge i32 %904, %905
  br i1 %cmp1316, label %if.then.1317, label %if.end.1342

if.then.1317:                                     ; preds = %if.end.1315
  %906 = load i32, i32* %rmargin_width, align 4
  %cmp1318 = icmp sgt i32 %906, 0
  br i1 %cmp1318, label %land.lhs.true.1319, label %if.else.1341

land.lhs.true.1319:                               ; preds = %if.then.1317
  %907 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins1320 = getelementptr inbounds %struct.window, %struct.window* %907, i32 0, i32 67
  %bf.load1321 = load i16, i16* %fringes_outside_margins1320, align 4
  %bf.lshr1322 = lshr i16 %bf.load1321, 12
  %bf.clear1323 = and i16 %bf.lshr1322, 1
  %bf.cast1324 = trunc i16 %bf.clear1323 to i1
  br i1 %bf.cast1324, label %cond.true.1325, label %cond.false.1337

cond.true.1325:                                   ; preds = %land.lhs.true.1319
  %908 = load i32, i32* %x.addr, align 4
  %909 = load i32, i32* %right_x, align 4
  %910 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %910, i32 0, i32 58
  %911 = load i32, i32* %right_fringe_width, align 4
  %cmp1326 = icmp sge i32 %911, 0
  br i1 %cmp1326, label %cond.true.1327, label %cond.false.1329

cond.true.1327:                                   ; preds = %cond.true.1325
  %912 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width1328 = getelementptr inbounds %struct.window, %struct.window* %912, i32 0, i32 58
  %913 = load i32, i32* %right_fringe_width1328, align 4
  br label %cond.end.1333

cond.false.1329:                                  ; preds = %cond.true.1325
  %914 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1330 = getelementptr inbounds %struct.window, %struct.window* %914, i32 0, i32 1
  %915 = load i64, i64* %frame1330, align 8
  %sub1331 = sub nsw i64 %915, 5
  %916 = inttoptr i64 %sub1331 to i8*
  %917 = bitcast i8* %916 to %struct.frame*
  %right_fringe_width1332 = getelementptr inbounds %struct.frame, %struct.frame* %917, i32 0, i32 55
  %918 = load i32, i32* %right_fringe_width1332, align 4
  br label %cond.end.1333

cond.end.1333:                                    ; preds = %cond.false.1329, %cond.true.1327
  %cond1334 = phi i32 [ %913, %cond.true.1327 ], [ %918, %cond.false.1329 ]
  %sub1335 = sub nsw i32 %909, %cond1334
  %cmp1336 = icmp slt i32 %908, %sub1335
  br i1 %cmp1336, label %if.then.1340, label %if.else.1341

cond.false.1337:                                  ; preds = %land.lhs.true.1319
  %919 = load i32, i32* %x.addr, align 4
  %920 = load i32, i32* %right_x, align 4
  %921 = load i32, i32* %rmargin_width, align 4
  %sub1338 = sub nsw i32 %920, %921
  %cmp1339 = icmp sge i32 %919, %sub1338
  br i1 %cmp1339, label %if.then.1340, label %if.else.1341

if.then.1340:                                     ; preds = %cond.false.1337, %cond.end.1333
  store i32 8, i32* %retval
  br label %return

if.else.1341:                                     ; preds = %cond.false.1337, %cond.end.1333, %if.then.1317
  store i32 6, i32* %retval
  br label %return

if.end.1342:                                      ; preds = %if.end.1315
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.1342, %if.else.1341, %if.then.1340, %if.else.1314, %if.then.1313, %if.then.1287, %if.then.1231, %if.then.1085, %if.else.928, %if.then.927, %if.then.475, %if.then.174, %if.then.99, %if.then
  %922 = load i32, i32* %retval
  ret i32 %922
}

declare i64 @Fcons(i64, i64) #1

declare i64 @make_float(double) #1

; Function Attrs: nounwind uwtable
define i64 @window_from_coordinates(%struct.frame* %f, i32 %x, i32 %y, i32* %part, i1 zeroext %tool_bar_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %part.addr = alloca i32*, align 8
  %tool_bar_p.addr = alloca i8, align 1
  %window = alloca i64, align 8
  %cw = alloca %struct.check_window_data, align 8
  %dummy = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32* %part, i32** %part.addr, align 8
  %frombool = zext i1 %tool_bar_p to i8
  store i8 %frombool, i8* %tool_bar_p.addr, align 1
  %0 = load i32*, i32** %part.addr, align 8
  %cmp = icmp eq i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32* %dummy, i32** %part.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %window, align 8
  %window1 = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %cw, i32 0, i32 0
  store i64* %window, i64** %window1, align 8
  %1 = load i32, i32* %x.addr, align 4
  %x2 = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %cw, i32 0, i32 1
  store i32 %1, i32* %x2, align 4
  %2 = load i32, i32* %y.addr, align 4
  %y3 = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %cw, i32 0, i32 2
  store i32 %2, i32* %y3, align 4
  %3 = load i32*, i32** %part.addr, align 8
  %part4 = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %cw, i32 0, i32 3
  store i32* %3, i32** %part4, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = bitcast %struct.check_window_data* %cw to i8*
  call void @foreach_window(%struct.frame* %4, i1 (%struct.window*, i8*)* @check_window_containing, i8* %5)
  %6 = load i64, i64* %window, align 8
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define internal void @foreach_window(%struct.frame* %f, i1 (%struct.window*, i8*)* %fn, i8* %user_data) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %fn.addr = alloca i1 (%struct.window*, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i1 (%struct.window*, i8*)* %fn, i1 (%struct.window*, i8*)** %fn.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window, align 8
  %call = call zeroext i1 @WINDOWP(i64 %1)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 5
  %3 = load i64, i64* %root_window1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %3)
  %4 = load i1 (%struct.window*, i8*)*, i1 (%struct.window*, i8*)** %fn.addr, align 8
  %5 = load i8*, i8** %user_data.addr, align 8
  %call3 = call zeroext i1 @foreach_window_1(%struct.window* %call2, i1 (%struct.window*, i8*)* %4, i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check_window_containing(%struct.window* %w, i8* %user_data) #0 {
entry:
  %retval = alloca i1, align 1
  %w.addr = alloca %struct.window*, align 8
  %user_data.addr = alloca i8*, align 8
  %cw = alloca %struct.check_window_data*, align 8
  %found = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.check_window_data*
  store %struct.check_window_data* %1, %struct.check_window_data** %cw, align 8
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %3 = load %struct.check_window_data*, %struct.check_window_data** %cw, align 8
  %x = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %3, i32 0, i32 1
  %4 = load i32, i32* %x, align 4
  %5 = load %struct.check_window_data*, %struct.check_window_data** %cw, align 8
  %y = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %5, i32 0, i32 2
  %6 = load i32, i32* %y, align 4
  %call = call i32 @coordinates_in_window(%struct.window* %2, i32 %4, i32 %6)
  store i32 %call, i32* %found, align 4
  %7 = load i32, i32* %found, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %found, align 4
  %9 = load %struct.check_window_data*, %struct.check_window_data** %cw, align 8
  %part = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %9, i32 0, i32 3
  %10 = load i32*, i32** %part, align 8
  store i32 %8, i32* %10, align 4
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %12 = bitcast %struct.window* %11 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %12, i32 5)
  %13 = load %struct.check_window_data*, %struct.check_window_data** %cw, align 8
  %window = getelementptr inbounds %struct.check_window_data, %struct.check_window_data* %13, i32 0, i32 0
  %14 = load i64*, i64** %window, align 8
  store i64 %call1, i64* %14, align 8
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %15 = load i1, i1* %retval
  ret i1 %15
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_at(i64 %x, i64 %y, i64 %frame) #0 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %x.addr, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %1)
  %2 = load i64, i64* %y.addr, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %2)
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %4 = load i64, i64* %x.addr, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load i64, i64* %x.addr, align 8
  %shr = ashr i64 %5, 2
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 59
  %7 = load i32, i32* %column_width, align 4
  %conv3 = sext i32 %7 to i64
  %mul = mul nsw i64 %shr, %conv3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i64, i64* %x.addr, align 8
  %call4 = call double @XFLOAT_DATA(i64 %8)
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width5 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 59
  %10 = load i32, i32* %column_width5, align 4
  %conv6 = sitofp i32 %10 to double
  %mul7 = fmul double %call4, %conv6
  %conv8 = fptosi double %mul7 to i32
  %conv9 = sext i32 %conv8 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul, %cond.true ], [ %conv9, %cond.false ]
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 51
  %12 = load i32, i32* %internal_border_width, align 4
  %conv10 = sext i32 %12 to i64
  %add = add nsw i64 %cond, %conv10
  %conv11 = trunc i64 %add to i32
  %13 = load i64, i64* %y.addr, align 8
  %and12 = and i64 %13, 7
  %conv13 = trunc i64 %and12 to i32
  %and14 = and i32 %conv13, -5
  %cmp15 = icmp eq i32 %and14, 2
  br i1 %cmp15, label %cond.true.17, label %cond.false.21

cond.true.17:                                     ; preds = %cond.end
  %14 = load i64, i64* %y.addr, align 8
  %shr18 = ashr i64 %14, 2
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 60
  %16 = load i32, i32* %line_height, align 4
  %conv19 = sext i32 %16 to i64
  %mul20 = mul nsw i64 %shr18, %conv19
  br label %cond.end.28

cond.false.21:                                    ; preds = %cond.end
  %17 = load i64, i64* %y.addr, align 8
  %call22 = call double @XFLOAT_DATA(i64 %17)
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height23 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 60
  %19 = load i32, i32* %line_height23, align 4
  %conv24 = sitofp i32 %19 to double
  %mul25 = fmul double %call22, %conv24
  %conv26 = fptosi double %mul25 to i32
  %conv27 = sext i32 %conv26 to i64
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.false.21, %cond.true.17
  %cond29 = phi i64 [ %mul20, %cond.true.17 ], [ %conv27, %cond.false.21 ]
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width30 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 51
  %21 = load i32, i32* %internal_border_width30, align 4
  %conv31 = sext i32 %21 to i64
  %add32 = add nsw i64 %cond29, %conv31
  %conv33 = trunc i64 %add32 to i32
  %call34 = call i64 @window_from_coordinates(%struct.frame* %3, i32 %conv11, i32 %conv33, i32* null, i1 zeroext false)
  ret i64 %call34
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_point(i64 %window) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %2 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  %cmp = icmp eq %struct.window* %1, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp3 = icmp eq %struct.buffer* %call2, %5
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 75
  %7 = load i64, i64* %pt, align 8
  %add = add nsw i64 %7, 0
  br label %cond.end.17

cond.false:                                       ; preds = %if.then
  %8 = load %struct.window*, %struct.window** %w, align 8
  %contents4 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 10
  %9 = load i64, i64* %contents4, align 8
  %call5 = call %struct.buffer* @XBUFFER(i64 %9)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call5, i32 0, i32 45
  %10 = load i64, i64* %pt_marker_, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %10, %call6
  br i1 %cmp7, label %cond.true.8, label %cond.false.12

cond.true.8:                                      ; preds = %cond.false
  %11 = load %struct.window*, %struct.window** %w, align 8
  %contents9 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents9, align 8
  %call10 = call %struct.buffer* @XBUFFER(i64 %12)
  %pt11 = getelementptr inbounds %struct.buffer, %struct.buffer* %call10, i32 0, i32 75
  %13 = load i64, i64* %pt11, align 8
  br label %cond.end

cond.false.12:                                    ; preds = %cond.false
  %14 = load %struct.window*, %struct.window** %w, align 8
  %contents13 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 10
  %15 = load i64, i64* %contents13, align 8
  %call14 = call %struct.buffer* @XBUFFER(i64 %15)
  %pt_marker_15 = getelementptr inbounds %struct.buffer, %struct.buffer* %call14, i32 0, i32 45
  %16 = load i64, i64* %pt_marker_15, align 8
  %call16 = call i64 @marker_position(i64 %16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.12, %cond.true.8
  %cond = phi i64 [ %13, %cond.true.8 ], [ %call16, %cond.false.12 ]
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.end, %cond.true
  %cond18 = phi i64 [ %add, %cond.true ], [ %cond, %cond.end ]
  %shl = shl i64 %cond18, 2
  %add19 = add i64 %shl, 2
  store i64 %add19, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %17 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 12
  %18 = load i64, i64* %pointm, align 8
  %call20 = call i64 @Fmarker_position(i64 %18)
  store i64 %call20, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %cond.end.17
  %19 = load i64, i64* %retval
  ret i64 %19
}

declare i64 @marker_position(i64) #1

declare i64 @Fmarker_position(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_old_point(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 13
  %1 = load i64, i64* %old_pointm, align 8
  %call1 = call i64 @Fmarker_position(i64 %1)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_start(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %start = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 11
  %1 = load i64, i64* %start, align 8
  %call1 = call i64 @Fmarker_position(i64 %1)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_end(i64 %window, i64 %update) #0 {
entry:
  %window.addr = alloca i64, align 8
  %update.addr = alloca i64, align 8
  %value = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %buf = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  %startp = alloca %struct.text_pos, align 8
  %it = alloca %struct.it, align 8
  %old_buffer = alloca %struct.buffer*, align 8
  %itdata = alloca i8*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %update, i64* %update.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  store i64 %2, i64* %buf, align 8
  %3 = load i64, i64* %buf, align 8
  call void @CHECK_BUFFER(i64 %3)
  %4 = load i64, i64* %buf, align 8
  %call1 = call %struct.buffer* @XBUFFER(i64 %4)
  store %struct.buffer* %call1, %struct.buffer** %b, align 8
  %5 = load i64, i64* %update.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call2
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* @windows_or_buffers_changed, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %land.lhs.true.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.window*, %struct.window** %w, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %bf.load = load i16, i16* %window_end_valid, align 4
  %bf.lshr = lshr i16 %bf.load, 13
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %lor.lhs.false.3, label %land.lhs.true.14

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %8 = load %struct.buffer*, %struct.buffer** %b, align 8
  %clip_changed = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 94
  %bf.load4 = load i8, i8* %clip_changed, align 8
  %bf.lshr5 = lshr i8 %bf.load4, 1
  %bf.clear6 = and i8 %bf.lshr5, 1
  %bf.cast7 = trunc i8 %bf.clear6 to i1
  br i1 %bf.cast7, label %land.lhs.true.14, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.3
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 94
  %bf.load9 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear10 = and i8 %bf.load9, 1
  %bf.cast11 = trunc i8 %bf.clear10 to i1
  br i1 %bf.cast11, label %land.lhs.true.14, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.8
  %10 = load %struct.window*, %struct.window** %w, align 8
  %call13 = call zeroext i1 @window_outdated(%struct.window* %10)
  br i1 %call13, label %land.lhs.true.14, label %if.else

land.lhs.true.14:                                 ; preds = %lor.lhs.false.12, %lor.lhs.false.8, %lor.lhs.false.3, %lor.lhs.false, %land.lhs.true
  %11 = load i8, i8* @noninteractive, align 1
  %tobool15 = trunc i8 %11 to i1
  br i1 %tobool15, label %if.else, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %land.lhs.true.14
  %12 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 1
  %13 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %13, 5
  %14 = inttoptr i64 %sub to i8*
  %15 = bitcast i8* %14 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %output_method to i64*
  %bf.load17 = load i64, i64* %16, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 23
  %bf.clear19 = and i64 %bf.lshr18, 7
  %bf.cast20 = trunc i64 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 0
  br i1 %cmp21, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false.16
  store %struct.buffer* null, %struct.buffer** %old_buffer, align 8
  store i8* null, i8** %itdata, align 8
  %17 = load %struct.buffer*, %struct.buffer** %b, align 8
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp22 = icmp ne %struct.buffer* %17, %18
  br i1 %cmp22, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %if.then
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %19, %struct.buffer** %old_buffer, align 8
  %20 = load %struct.buffer*, %struct.buffer** %b, align 8
  call void @set_buffer_internal(%struct.buffer* %20)
  br label %if.end

if.end:                                           ; preds = %if.then.23, %if.then
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 77
  %22 = load i64, i64* %begv, align 8
  %23 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 11
  %24 = load i64, i64* %start, align 8
  %call24 = call i64 @marker_position(i64 %24)
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 79
  %26 = load i64, i64* %zv, align 8
  %call25 = call i64 @clip_to_bounds(i64 %22, i64 %call24, i64 %26)
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %startp, i32 0, i32 0
  store i64 %call25, i64* %charpos, align 8
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 78
  %28 = load i64, i64* %begv_byte, align 8
  %29 = load %struct.window*, %struct.window** %w, align 8
  %start26 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 11
  %30 = load i64, i64* %start26, align 8
  %call27 = call i64 @marker_byte_position(i64 %30)
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 80
  %32 = load i64, i64* %zv_byte, align 8
  %call28 = call i64 @clip_to_bounds(i64 %28, i64 %call27, i64 %32)
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %startp, i32 0, i32 1
  store i64 %call28, i64* %bytepos, align 8
  %call29 = call i8* @bidi_shelve_cache()
  store i8* %call29, i8** %itdata, align 8
  %33 = load %struct.window*, %struct.window** %w, align 8
  %34 = bitcast %struct.text_pos* %startp to { i64, i64 }*
  %35 = getelementptr { i64, i64 }, { i64, i64 }* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 1
  %37 = getelementptr { i64, i64 }, { i64, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 1
  call void @start_display(%struct.it* %it, %struct.window* %33, i64 %36, i64 %38)
  %39 = load %struct.window*, %struct.window** %w, align 8
  %call30 = call i32 @window_box_height(%struct.window* %39)
  call void @move_it_vertically(%struct.it* %it, i32 %call30)
  %current_y = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %40 = load i32, i32* %current_y, align 4
  %last_visible_y = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %41 = load i32, i32* %last_visible_y, align 4
  %cmp31 = icmp slt i32 %40, %41
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end
  call void @move_it_past_eol(%struct.it* %it)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.end
  %current = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current, i32 0, i32 0
  %charpos34 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos, i32 0, i32 0
  %42 = load i64, i64* %charpos34, align 8
  %shl = shl i64 %42, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %value, align 8
  %43 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %43, i1 zeroext false)
  %44 = load %struct.buffer*, %struct.buffer** %old_buffer, align 8
  %tobool35 = icmp ne %struct.buffer* %44, null
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  %45 = load %struct.buffer*, %struct.buffer** %old_buffer, align 8
  call void @set_buffer_internal(%struct.buffer* %45)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %if.end.33
  br label %if.end.41

if.else:                                          ; preds = %lor.lhs.false.16, %land.lhs.true.14, %lor.lhs.false.12, %entry
  %46 = load %struct.buffer*, %struct.buffer** %b, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 2
  %48 = load i64, i64* %z, align 8
  %49 = load %struct.window*, %struct.window** %w, align 8
  %window_end_pos = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 65
  %50 = load i64, i64* %window_end_pos, align 8
  %sub38 = sub nsw i64 %48, %50
  %shl39 = shl i64 %sub38, 2
  %add40 = add i64 %shl39, 2
  store i64 %add40, i64* %value, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.end.37
  %51 = load i64, i64* %value, align 8
  ret i64 %51
}

declare void @CHECK_BUFFER(i64) #1

declare void @set_buffer_internal(%struct.buffer*) #1

declare i64 @clip_to_bounds(i64, i64, i64) #1

declare i64 @marker_byte_position(i64) #1

declare i8* @bidi_shelve_cache() #1

declare void @start_display(%struct.it*, %struct.window*, i64, i64) #1

declare void @move_it_vertically(%struct.it*, i32) #1

declare i32 @window_box_height(%struct.window*) #1

declare void @move_it_past_eol(%struct.it*) #1

declare void @bidi_unshelve_cache(i8*, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_point(i64 %window, i64 %pos) #0 {
entry:
  %window.addr = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %old_buffer = alloca %struct.buffer*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %2 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  %cmp = icmp eq %struct.window* %1, %call1
  br i1 %cmp, label %if.then, label %if.else.25

if.then:                                          ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp3 = icmp eq %struct.buffer* %call2, %5
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %6 = load i64, i64* %pos.addr, align 8
  %call5 = call i64 @Fgoto_char(i64 %6)
  br label %if.end.24

if.else:                                          ; preds = %if.then
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %7, %struct.buffer** %old_buffer, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %8 = load i64, i64* %pos.addr, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv, 1
  br i1 %cmp6, label %land.lhs.true, label %if.else.14

land.lhs.true:                                    ; preds = %do.body
  %9 = load i64, i64* %pos.addr, align 8
  %call8 = call i32 @XMISCTYPE(i64 %9)
  %cmp9 = icmp eq i32 %call8, 24236
  br i1 %cmp9, label %if.then.11, label %if.else.14

if.then.11:                                       ; preds = %land.lhs.true
  %10 = load i64, i64* %pos.addr, align 8
  %call12 = call i64 @marker_position(i64 %10)
  %call13 = call i64 @make_natnum(i64 %call12)
  store i64 %call13, i64* %pos.addr, align 8
  br label %if.end

if.else.14:                                       ; preds = %land.lhs.true, %do.body
  %11 = load i64, i64* %pos.addr, align 8
  %and15 = and i64 %11, 7
  %conv16 = trunc i64 %and15 to i32
  %and17 = and i32 %conv16, -5
  %cmp18 = icmp eq i32 %and17, 2
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.14
  br label %cond.end

cond.false:                                       ; preds = %if.else.14
  %call20 = call i64 @builtin_lisp_symbol(i32 558)
  %12 = load i64, i64* %pos.addr, align 8
  %13 = call i64 @wrong_type_argument(i64 %call20, i64 %12) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %14, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end
  %15 = load %struct.window*, %struct.window** %w, align 8
  %contents21 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 10
  %16 = load i64, i64* %contents21, align 8
  %call22 = call %struct.buffer* @XBUFFER(i64 %16)
  call void @set_buffer_internal(%struct.buffer* %call22)
  %17 = load i64, i64* %pos.addr, align 8
  %call23 = call i64 @Fgoto_char(i64 %17)
  %18 = load %struct.buffer*, %struct.buffer** %old_buffer, align 8
  call void @set_buffer_internal(%struct.buffer* %18)
  br label %if.end.24

if.end.24:                                        ; preds = %do.end, %if.then.4
  br label %if.end.28

if.else.25:                                       ; preds = %entry
  %19 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 12
  %20 = load i64, i64* %pointm, align 8
  %21 = load i64, i64* %pos.addr, align 8
  %22 = load %struct.window*, %struct.window** %w, align 8
  %contents26 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 10
  %23 = load i64, i64* %contents26, align 8
  %call27 = call i64 @set_marker_restricted(i64 %20, i64 %21, i64 %23)
  %24 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_redisplay(%struct.window* %24)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.end.24
  %25 = load i64, i64* %pos.addr, align 8
  ret i64 %25
}

declare i64 @Fgoto_char(i64) #1

declare i32 @XMISCTYPE(i64) #1

declare i64 @make_natnum(i64) #1

declare i64 @set_marker_restricted(i64, i64, i64) #1

declare void @wset_redisplay(%struct.window*) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_start(i64 %window, i64 %pos, i64 %noforce) #0 {
entry:
  %window.addr = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %noforce.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %noforce, i64* %noforce.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 11
  %2 = load i64, i64* %start, align 8
  %3 = load i64, i64* %pos.addr, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents, align 8
  %call1 = call i64 @set_marker_restricted(i64 %2, i64 %3, i64 %5)
  %6 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 67
  %bf.load = load i16, i16* %start_at_line_beg, align 4
  %bf.clear = and i16 %bf.load, -17
  store i16 %bf.clear, i16* %start_at_line_beg, align 4
  %7 = load i64, i64* %noforce.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %7, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w, align 8
  %force_start = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 67
  %bf.load3 = load i16, i16* %force_start, align 4
  %bf.clear4 = and i16 %bf.load3, -33
  %bf.set = or i16 %bf.clear4, 32
  store i16 %bf.set, i16* %force_start, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_update_mode_line(%struct.window* %9)
  %10 = load %struct.window*, %struct.window** %w, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 67
  %bf.load5 = load i16, i16* %window_end_valid, align 4
  %bf.clear6 = and i16 %bf.load5, -8193
  store i16 %bf.clear6, i16* %window_end_valid, align 4
  %11 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_redisplay(%struct.window* %11)
  %12 = load i64, i64* %pos.addr, align 8
  ret i64 %12
}

; Function Attrs: nounwind uwtable
define internal void @wset_update_mode_line(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %fselected_window = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 6
  %4 = load i64, i64* %selected_window, align 8
  store i64 %4, i64* %fselected_window, align 8
  %5 = load i64, i64* %fselected_window, align 8
  %call = call zeroext i1 @WINDOWP(i64 %5)
  br i1 %call, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %6 = load i64, i64* %fselected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %6)
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp = icmp eq %struct.window* %call1, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i32 42, i32* @update_mode_lines, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %update_mode_line = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 67
  %bf.load = load i16, i16* %update_mode_line, align 4
  %bf.clear = and i16 %bf.load, -5
  %bf.set = or i16 %bf.clear, 4
  store i16 %bf.set, i16* %update_mode_line, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fpos_visible_in_window_p(i64 %pos, i64 %window, i64 %partially) #0 {
entry:
  %pos.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %partially.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %posint = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  %top = alloca %struct.text_pos, align 8
  %in_window = alloca i64, align 8
  %rtop = alloca i32, align 4
  %rbot = alloca i32, align 4
  %rowh = alloca i32, align 4
  %vpos = alloca i32, align 4
  %fully_p = alloca i8, align 1
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %part = alloca i64, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %partially, i64* %partially.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %in_window, align 8
  store i8 1, i8* %fully_p, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call1, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %2)
  store %struct.buffer* %call2, %struct.buffer** %buf, align 8
  %3 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 11
  %4 = load i64, i64* %start, align 8
  %call3 = call i64 @marker_position(i64 %4)
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %top, i32 0, i32 0
  store i64 %call3, i64* %charpos, align 8
  %5 = load %struct.window*, %struct.window** %w, align 8
  %start4 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 11
  %6 = load i64, i64* %start4, align 8
  %call5 = call i64 @marker_byte_position(i64 %6)
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %top, i32 0, i32 1
  store i64 %call5, i64* %bytepos, align 8
  %7 = load i64, i64* %pos.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %7, %call6
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 -1, i64* %posint, align 8
  br label %if.end.34

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %pos.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %8, %call7
  br i1 %cmp8, label %if.else.25, label %if.then.9

if.then.9:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.9
  %9 = load i64, i64* %pos.addr, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp10 = icmp eq i32 %conv, 1
  br i1 %cmp10, label %land.lhs.true, label %if.else.18

land.lhs.true:                                    ; preds = %do.body
  %10 = load i64, i64* %pos.addr, align 8
  %call12 = call i32 @XMISCTYPE(i64 %10)
  %cmp13 = icmp eq i32 %call12, 24236
  br i1 %cmp13, label %if.then.15, label %if.else.18

if.then.15:                                       ; preds = %land.lhs.true
  %11 = load i64, i64* %pos.addr, align 8
  %call16 = call i64 @marker_position(i64 %11)
  %call17 = call i64 @make_natnum(i64 %call16)
  store i64 %call17, i64* %pos.addr, align 8
  br label %if.end

if.else.18:                                       ; preds = %land.lhs.true, %do.body
  %12 = load i64, i64* %pos.addr, align 8
  %and19 = and i64 %12, 7
  %conv20 = trunc i64 %and19 to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.18
  br label %cond.end

cond.false:                                       ; preds = %if.else.18
  %call24 = call i64 @builtin_lisp_symbol(i32 558)
  %13 = load i64, i64* %pos.addr, align 8
  %14 = call i64 @wrong_type_argument(i64 %call24, i64 %13) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %15, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end
  %16 = load i64, i64* %pos.addr, align 8
  %shr = ashr i64 %16, 2
  store i64 %shr, i64* %posint, align 8
  br label %if.end.33

if.else.25:                                       ; preds = %if.else
  %17 = load %struct.window*, %struct.window** %w, align 8
  %18 = load i64, i64* @selected_window, align 8
  %call26 = call %struct.window* @XWINDOW(i64 %18)
  %cmp27 = icmp eq %struct.window* %17, %call26
  br i1 %cmp27, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.else.25
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 75
  %20 = load i64, i64* %pt, align 8
  %add = add nsw i64 %20, 0
  store i64 %add, i64* %posint, align 8
  br label %if.end.32

if.else.30:                                       ; preds = %if.else.25
  %21 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 12
  %22 = load i64, i64* %pointm, align 8
  %call31 = call i64 @marker_position(i64 %22)
  store i64 %call31, i64* %posint, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %do.end
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then
  %23 = load i64, i64* %pos.addr, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp36 = icmp eq i64 %23, %call35
  br i1 %cmp36, label %land.lhs.true.59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.34
  %24 = load i64, i64* %posint, align 8
  %charpos38 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %top, i32 0, i32 0
  %25 = load i64, i64* %charpos38, align 8
  %cmp39 = icmp sge i64 %24, %25
  br i1 %cmp39, label %land.lhs.true.41, label %if.end.115

land.lhs.true.41:                                 ; preds = %lor.lhs.false
  %26 = load i64, i64* %posint, align 8
  %27 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp42 = icmp eq %struct.buffer* %27, %28
  br i1 %cmp42, label %cond.true.44, label %cond.false.45

cond.true.44:                                     ; preds = %land.lhs.true.41
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 79
  %30 = load i64, i64* %zv, align 8
  br label %cond.end.55

cond.false.45:                                    ; preds = %land.lhs.true.41
  %31 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 47
  %32 = load i64, i64* %zv_marker_, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp47 = icmp eq i64 %32, %call46
  br i1 %cmp47, label %cond.true.49, label %cond.false.51

cond.true.49:                                     ; preds = %cond.false.45
  %33 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv50 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 79
  %34 = load i64, i64* %zv50, align 8
  br label %cond.end.54

cond.false.51:                                    ; preds = %cond.false.45
  %35 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_52 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 47
  %36 = load i64, i64* %zv_marker_52, align 8
  %call53 = call i64 @marker_position(i64 %36)
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.51, %cond.true.49
  %cond = phi i64 [ %34, %cond.true.49 ], [ %call53, %cond.false.51 ]
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end.54, %cond.true.44
  %cond56 = phi i64 [ %30, %cond.true.44 ], [ %cond, %cond.end.54 ]
  %cmp57 = icmp sle i64 %26, %cond56
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.115

land.lhs.true.59:                                 ; preds = %cond.end.55, %if.end.34
  %charpos60 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %top, i32 0, i32 0
  %37 = load i64, i64* %charpos60, align 8
  %38 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp61 = icmp eq %struct.buffer* %38, %39
  br i1 %cmp61, label %cond.true.63, label %cond.false.64

cond.true.63:                                     ; preds = %land.lhs.true.59
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 77
  %41 = load i64, i64* %begv, align 8
  br label %cond.end.75

cond.false.64:                                    ; preds = %land.lhs.true.59
  %42 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 46
  %43 = load i64, i64* %begv_marker_, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp66 = icmp eq i64 %43, %call65
  br i1 %cmp66, label %cond.true.68, label %cond.false.70

cond.true.68:                                     ; preds = %cond.false.64
  %44 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv69 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 77
  %45 = load i64, i64* %begv69, align 8
  br label %cond.end.73

cond.false.70:                                    ; preds = %cond.false.64
  %46 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_71 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 46
  %47 = load i64, i64* %begv_marker_71, align 8
  %call72 = call i64 @marker_position(i64 %47)
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.70, %cond.true.68
  %cond74 = phi i64 [ %45, %cond.true.68 ], [ %call72, %cond.false.70 ]
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.end.73, %cond.true.63
  %cond76 = phi i64 [ %41, %cond.true.63 ], [ %cond74, %cond.end.73 ]
  %cmp77 = icmp sge i64 %37, %cond76
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.115

land.lhs.true.79:                                 ; preds = %cond.end.75
  %charpos80 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %top, i32 0, i32 0
  %48 = load i64, i64* %charpos80, align 8
  %49 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %50 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp81 = icmp eq %struct.buffer* %49, %50
  br i1 %cmp81, label %cond.true.83, label %cond.false.85

cond.true.83:                                     ; preds = %land.lhs.true.79
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv84 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 79
  %52 = load i64, i64* %zv84, align 8
  br label %cond.end.97

cond.false.85:                                    ; preds = %land.lhs.true.79
  %53 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_86 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 47
  %54 = load i64, i64* %zv_marker_86, align 8
  %call87 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp88 = icmp eq i64 %54, %call87
  br i1 %cmp88, label %cond.true.90, label %cond.false.92

cond.true.90:                                     ; preds = %cond.false.85
  %55 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv91 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 79
  %56 = load i64, i64* %zv91, align 8
  br label %cond.end.95

cond.false.92:                                    ; preds = %cond.false.85
  %57 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_93 = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 47
  %58 = load i64, i64* %zv_marker_93, align 8
  %call94 = call i64 @marker_position(i64 %58)
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.92, %cond.true.90
  %cond96 = phi i64 [ %56, %cond.true.90 ], [ %call94, %cond.false.92 ]
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.end.95, %cond.true.83
  %cond98 = phi i64 [ %52, %cond.true.83 ], [ %cond96, %cond.end.95 ]
  %cmp99 = icmp sle i64 %48, %cond98
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.115

land.lhs.true.101:                                ; preds = %cond.end.97
  %59 = load %struct.window*, %struct.window** %w, align 8
  %60 = load i64, i64* %posint, align 8
  %call102 = call zeroext i1 @pos_visible_p(%struct.window* %59, i64 %60, i32* %x, i32* %y, i32* %rtop, i32* %rbot, i32* %rowh, i32* %vpos)
  br i1 %call102, label %if.then.104, label %if.end.115

if.then.104:                                      ; preds = %land.lhs.true.101
  %61 = load i32, i32* %rtop, align 4
  %tobool = icmp ne i32 %61, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then.104
  %62 = load i32, i32* %rbot, align 4
  %tobool105 = icmp ne i32 %62, 0
  %lnot = xor i1 %tobool105, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.104
  %63 = phi i1 [ false, %if.then.104 ], [ %lnot, %land.rhs ]
  %frombool = zext i1 %63 to i8
  store i8 %frombool, i8* %fully_p, align 1
  %64 = load i64, i64* %partially.addr, align 8
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp107 = icmp eq i64 %64, %call106
  br i1 %cmp107, label %lor.lhs.false.109, label %if.then.112

lor.lhs.false.109:                                ; preds = %land.end
  %65 = load i8, i8* %fully_p, align 1
  %tobool110 = trunc i8 %65 to i1
  br i1 %tobool110, label %if.then.112, label %if.end.114

if.then.112:                                      ; preds = %lor.lhs.false.109, %land.end
  %call113 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call113, i64* %in_window, align 8
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.112, %lor.lhs.false.109
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %land.lhs.true.101, %cond.end.97, %cond.end.75, %cond.end.55, %lor.lhs.false
  %66 = load i64, i64* %in_window, align 8
  %call116 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp117 = icmp eq i64 %66, %call116
  br i1 %cmp117, label %if.end.140, label %land.lhs.true.119

land.lhs.true.119:                                ; preds = %if.end.115
  %67 = load i64, i64* %partially.addr, align 8
  %call120 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp121 = icmp eq i64 %67, %call120
  br i1 %cmp121, label %if.end.140, label %if.then.123

if.then.123:                                      ; preds = %land.lhs.true.119
  %call124 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call124, i64* %part, align 8
  %68 = load i8, i8* %fully_p, align 1
  %tobool125 = trunc i8 %68 to i1
  br i1 %tobool125, label %if.end.132, label %if.then.126

if.then.126:                                      ; preds = %if.then.123
  %69 = load i32, i32* %rtop, align 4
  %conv127 = sext i32 %69 to i64
  %70 = load i32, i32* %rbot, align 4
  %conv128 = sext i32 %70 to i64
  %71 = load i32, i32* %rowh, align 4
  %conv129 = sext i32 %71 to i64
  %72 = load i32, i32* %vpos, align 4
  %conv130 = sext i32 %72 to i64
  %call131 = call i64 @list4i(i64 %conv127, i64 %conv128, i64 %conv129, i64 %conv130)
  store i64 %call131, i64* %part, align 8
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.126, %if.then.123
  %73 = load i32, i32* %x, align 4
  %conv133 = sext i32 %73 to i64
  %shl = shl i64 %conv133, 2
  %add134 = add i64 %shl, 2
  %74 = load i32, i32* %y, align 4
  %conv135 = sext i32 %74 to i64
  %shl136 = shl i64 %conv135, 2
  %add137 = add i64 %shl136, 2
  %75 = load i64, i64* %part, align 8
  %call138 = call i64 @Fcons(i64 %add137, i64 %75)
  %call139 = call i64 @Fcons(i64 %add134, i64 %call138)
  store i64 %call139, i64* %in_window, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.132, %land.lhs.true.119, %if.end.115
  %76 = load i64, i64* %in_window, align 8
  ret i64 %76
}

declare zeroext i1 @pos_visible_p(%struct.window*, i64, i32*, i32*, i32*, i32*, i32*, i32*) #1

declare i64 @list4i(i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_line_height(i64 %line, i64 %window) #0 {
entry:
  %retval = alloca i64, align 8
  %line.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %b = alloca %struct.buffer*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %end_row = alloca %struct.glyph_row*, align 8
  %max_y = alloca i32, align 4
  %crop = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i64, align 8
  store i64 %line, i64* %line.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i8, i8* @noninteractive, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  call void @CHECK_BUFFER(i64 %4)
  %5 = load %struct.window*, %struct.window** %w, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents2, align 8
  %call3 = call %struct.buffer* @XBUFFER(i64 %6)
  store %struct.buffer* %call3, %struct.buffer** %b, align 8
  %7 = load %struct.window*, %struct.window** %w, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %bf.load4 = load i16, i16* %window_end_valid, align 4
  %bf.lshr5 = lshr i16 %bf.load4, 13
  %bf.clear6 = and i16 %bf.lshr5, 1
  %bf.cast7 = trunc i16 %bf.clear6 to i1
  br i1 %bf.cast7, label %lor.lhs.false.8, label %if.then.21

lor.lhs.false.8:                                  ; preds = %if.end
  %8 = load i32, i32* @windows_or_buffers_changed, align 4
  %tobool9 = icmp ne i32 %8, 0
  br i1 %tobool9, label %if.then.21, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.8
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %clip_changed = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 94
  %bf.load11 = load i8, i8* %clip_changed, align 8
  %bf.lshr12 = lshr i8 %bf.load11, 1
  %bf.clear13 = and i8 %bf.lshr12, 1
  %bf.cast14 = trunc i8 %bf.clear13 to i1
  br i1 %bf.cast14, label %if.then.21, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.10
  %10 = load %struct.buffer*, %struct.buffer** %b, align 8
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 94
  %bf.load16 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear17 = and i8 %bf.load16, 1
  %bf.cast18 = trunc i8 %bf.clear17 to i1
  br i1 %bf.cast18, label %if.then.21, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.15
  %11 = load %struct.window*, %struct.window** %w, align 8
  %call20 = call zeroext i1 @window_outdated(%struct.window* %11)
  br i1 %call20, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %lor.lhs.false.19, %lor.lhs.false.15, %lor.lhs.false.10, %lor.lhs.false.8, %if.end
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call22, i64* %retval
  br label %return

if.end.23:                                        ; preds = %lor.lhs.false.19
  %12 = load i64, i64* %line.addr, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %12, %call24
  br i1 %cmp, label %if.then.25, label %if.end.39

if.then.25:                                       ; preds = %if.end.23
  %13 = load %struct.window*, %struct.window** %w, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 49
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 3
  %14 = load i32, i32* %vpos, align 4
  store i32 %14, i32* %i, align 4
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %15, 0
  br i1 %cmp26, label %if.then.35, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %if.then.25
  %16 = load i32, i32* %i, align 4
  %17 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 24
  %18 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %18, i32 0, i32 3
  %19 = load i32, i32* %nrows, align 4
  %cmp28 = icmp sge i32 %16, %19
  br i1 %cmp28, label %if.then.35, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.27
  %20 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix30 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 24
  %21 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix30, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %21, i32 0, i32 1
  %22 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %23 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 22
  %25 = bitcast i40* %enabled_p to i64*
  %bf.load31 = load i64, i64* %25, align 4
  %bf.lshr32 = lshr i64 %bf.load31, 10
  %bf.clear33 = and i64 %bf.lshr32, 1
  %bf.cast34 = trunc i64 %bf.clear33 to i1
  %lnot = xor i1 %bf.cast34, true
  br i1 %lnot, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %lor.lhs.false.29, %lor.lhs.false.27, %if.then.25
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call36, i64* %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false.29
  %26 = load %struct.window*, %struct.window** %w, align 8
  %call38 = call i32 @window_text_bottom_y(%struct.window* %26)
  store i32 %call38, i32* %max_y, align 4
  br label %found_row

if.end.39:                                        ; preds = %if.end.23
  %27 = load i64, i64* %line.addr, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 513)
  %cmp41 = icmp eq i64 %27, %call40
  br i1 %cmp41, label %if.then.42, label %if.end.121

if.then.42:                                       ; preds = %if.end.39
  %28 = load %struct.window*, %struct.window** %w, align 8
  %contents43 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 10
  %29 = load i64, i64* %contents43, align 8
  %call44 = call zeroext i1 @BUFFERP(i64 %29)
  br i1 %call44, label %cond.true, label %cond.false.104

cond.true:                                        ; preds = %if.then.42
  %30 = load %struct.window*, %struct.window** %w, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 67
  %bf.load45 = load i16, i16* %mini, align 4
  %bf.clear46 = and i16 %bf.load45, 1
  %bf.cast47 = trunc i16 %bf.clear46 to i1
  br i1 %bf.cast47, label %if.then.105, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %31 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p48 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 67
  %bf.load49 = load i16, i16* %pseudo_window_p48, align 4
  %bf.lshr50 = lshr i16 %bf.load49, 11
  %bf.clear51 = and i16 %bf.lshr50, 1
  %bf.cast52 = trunc i16 %bf.clear51 to i1
  br i1 %bf.cast52, label %if.then.105, label %land.lhs.true.53

land.lhs.true.53:                                 ; preds = %land.lhs.true
  %32 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 1
  %33 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %33, 5
  %34 = inttoptr i64 %sub to i8*
  %35 = bitcast i8* %34 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 26
  %36 = bitcast i48* %wants_modeline to i64*
  %bf.load54 = load i64, i64* %36, align 8
  %bf.lshr55 = lshr i64 %bf.load54, 14
  %bf.clear56 = and i64 %bf.lshr55, 1
  %bf.cast57 = trunc i64 %bf.clear56 to i1
  br i1 %bf.cast57, label %land.lhs.true.58, label %if.then.105

land.lhs.true.58:                                 ; preds = %land.lhs.true.53
  %37 = load %struct.window*, %struct.window** %w, align 8
  %contents59 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 10
  %38 = load i64, i64* %contents59, align 8
  %call60 = call %struct.buffer* @XBUFFER(i64 %38)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call60, i32 0, i32 13
  %39 = load i64, i64* %header_line_format_, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %39, %call61
  br i1 %cmp62, label %if.then.105, label %land.lhs.true.63

land.lhs.true.63:                                 ; preds = %land.lhs.true.58
  %40 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 35
  %41 = load i32, i32* %pixel_height, align 4
  %42 = load %struct.window*, %struct.window** %w, align 8
  %contents64 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 10
  %43 = load i64, i64* %contents64, align 8
  %call65 = call zeroext i1 @BUFFERP(i64 %43)
  br i1 %call65, label %cond.true.66, label %cond.false

cond.true.66:                                     ; preds = %land.lhs.true.63
  %44 = load %struct.window*, %struct.window** %w, align 8
  %mini67 = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 67
  %bf.load68 = load i16, i16* %mini67, align 4
  %bf.clear69 = and i16 %bf.load68, 1
  %bf.cast70 = trunc i16 %bf.clear69 to i1
  br i1 %bf.cast70, label %cond.false.99, label %land.lhs.true.71

land.lhs.true.71:                                 ; preds = %cond.true.66
  %45 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p72 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 67
  %bf.load73 = load i16, i16* %pseudo_window_p72, align 4
  %bf.lshr74 = lshr i16 %bf.load73, 11
  %bf.clear75 = and i16 %bf.lshr74, 1
  %bf.cast76 = trunc i16 %bf.clear75 to i1
  br i1 %bf.cast76, label %cond.false.99, label %land.lhs.true.77

land.lhs.true.77:                                 ; preds = %land.lhs.true.71
  %46 = load %struct.window*, %struct.window** %w, align 8
  %frame78 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 1
  %47 = load i64, i64* %frame78, align 8
  %sub79 = sub nsw i64 %47, 5
  %48 = inttoptr i64 %sub79 to i8*
  %49 = bitcast i8* %48 to %struct.frame*
  %wants_modeline80 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 26
  %50 = bitcast i48* %wants_modeline80 to i64*
  %bf.load81 = load i64, i64* %50, align 8
  %bf.lshr82 = lshr i64 %bf.load81, 14
  %bf.clear83 = and i64 %bf.lshr82, 1
  %bf.cast84 = trunc i64 %bf.clear83 to i1
  br i1 %bf.cast84, label %land.lhs.true.85, label %cond.false.99

land.lhs.true.85:                                 ; preds = %land.lhs.true.77
  %51 = load %struct.window*, %struct.window** %w, align 8
  %contents86 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 10
  %52 = load i64, i64* %contents86, align 8
  %call87 = call %struct.buffer* @XBUFFER(i64 %52)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call87, i32 0, i32 12
  %53 = load i64, i64* %mode_line_format_, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp89 = icmp eq i64 %53, %call88
  br i1 %cmp89, label %cond.false.99, label %land.lhs.true.90

land.lhs.true.90:                                 ; preds = %land.lhs.true.85
  %54 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height91 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 35
  %55 = load i32, i32* %pixel_height91, align 4
  %56 = load %struct.window*, %struct.window** %w, align 8
  %frame92 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 1
  %57 = load i64, i64* %frame92, align 8
  %sub93 = sub nsw i64 %57, 5
  %58 = inttoptr i64 %sub93 to i8*
  %59 = bitcast i8* %58 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 60
  %60 = load i32, i32* %line_height, align 4
  %cmp94 = icmp sgt i32 %55, %60
  br i1 %cmp94, label %cond.true.95, label %cond.false.99

cond.false:                                       ; preds = %land.lhs.true.63
  br i1 false, label %cond.true.95, label %cond.false.99

cond.true.95:                                     ; preds = %cond.false, %land.lhs.true.90
  %61 = load %struct.window*, %struct.window** %w, align 8
  %frame96 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 1
  %62 = load i64, i64* %frame96, align 8
  %sub97 = sub nsw i64 %62, 5
  %63 = inttoptr i64 %sub97 to i8*
  %64 = bitcast i8* %63 to %struct.frame*
  %line_height98 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 60
  %65 = load i32, i32* %line_height98, align 4
  %mul = mul nsw i32 2, %65
  br label %cond.end

cond.false.99:                                    ; preds = %cond.false, %land.lhs.true.90, %land.lhs.true.85, %land.lhs.true.77, %land.lhs.true.71, %cond.true.66
  %66 = load %struct.window*, %struct.window** %w, align 8
  %frame100 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 1
  %67 = load i64, i64* %frame100, align 8
  %sub101 = sub nsw i64 %67, 5
  %68 = inttoptr i64 %sub101 to i8*
  %69 = bitcast i8* %68 to %struct.frame*
  %line_height102 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 60
  %70 = load i32, i32* %line_height102, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.99, %cond.true.95
  %cond = phi i32 [ %mul, %cond.true.95 ], [ %70, %cond.false.99 ]
  %cmp103 = icmp sgt i32 %41, %cond
  br i1 %cmp103, label %if.end.107, label %if.then.105

cond.false.104:                                   ; preds = %if.then.42
  br i1 false, label %if.end.107, label %if.then.105

if.then.105:                                      ; preds = %cond.false.104, %cond.end, %land.lhs.true.58, %land.lhs.true.53, %land.lhs.true, %cond.true
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call106, i64* %retval
  br label %return

if.end.107:                                       ; preds = %cond.false.104, %cond.end
  %71 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix108 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 24
  %72 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix108, align 8
  %rows109 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %72, i32 0, i32 1
  %73 = load %struct.glyph_row*, %struct.glyph_row** %rows109, align 8
  store %struct.glyph_row* %73, %struct.glyph_row** %row, align 8
  %74 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p110 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %74, i32 0, i32 22
  %75 = bitcast i40* %enabled_p110 to i64*
  %bf.load111 = load i64, i64* %75, align 4
  %bf.lshr112 = lshr i64 %bf.load111, 10
  %bf.clear113 = and i64 %bf.lshr112, 1
  %bf.cast114 = trunc i64 %bf.clear113 to i1
  br i1 %bf.cast114, label %cond.true.115, label %cond.false.117

cond.true.115:                                    ; preds = %if.end.107
  %76 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %76, i32 0, i32 7
  %77 = load i32, i32* %height, align 4
  %conv = sext i32 %77 to i64
  %call116 = call i64 @list4i(i64 %conv, i64 0, i64 0, i64 0)
  br label %cond.end.119

cond.false.117:                                   ; preds = %if.end.107
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.117, %cond.true.115
  %cond120 = phi i64 [ %call116, %cond.true.115 ], [ %call118, %cond.false.117 ]
  store i64 %cond120, i64* %retval
  br label %return

if.end.121:                                       ; preds = %if.end.39
  %78 = load i64, i64* %line.addr, align 8
  %call122 = call i64 @builtin_lisp_symbol(i32 672)
  %cmp123 = icmp eq i64 %78, %call122
  br i1 %cmp123, label %if.then.125, label %if.end.277

if.then.125:                                      ; preds = %if.end.121
  %79 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix126 = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 24
  %80 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix126, align 8
  %rows127 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %80, i32 0, i32 1
  %81 = load %struct.glyph_row*, %struct.glyph_row** %rows127, align 8
  %82 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix128 = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 24
  %83 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix128, align 8
  %nrows129 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %83, i32 0, i32 3
  %84 = load i32, i32* %nrows129, align 4
  %idx.ext130 = sext i32 %84 to i64
  %add.ptr131 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %81, i64 %idx.ext130
  %add.ptr132 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr131, i64 -1
  store %struct.glyph_row* %add.ptr132, %struct.glyph_row** %row, align 8
  %85 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p133 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %85, i32 0, i32 22
  %86 = bitcast i40* %enabled_p133 to i64*
  %bf.load134 = load i64, i64* %86, align 4
  %bf.lshr135 = lshr i64 %bf.load134, 10
  %bf.clear136 = and i64 %bf.lshr135, 1
  %bf.cast137 = trunc i64 %bf.clear136 to i1
  br i1 %bf.cast137, label %cond.true.139, label %cond.false.273

cond.true.139:                                    ; preds = %if.then.125
  %87 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height140 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %87, i32 0, i32 7
  %88 = load i32, i32* %height140, align 4
  %conv141 = sext i32 %88 to i64
  %89 = load %struct.window*, %struct.window** %w, align 8
  %contents142 = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 10
  %90 = load i64, i64* %contents142, align 8
  %call143 = call zeroext i1 @BUFFERP(i64 %90)
  br i1 %call143, label %cond.true.145, label %cond.false.225

cond.true.145:                                    ; preds = %cond.true.139
  %91 = load %struct.window*, %struct.window** %w, align 8
  %mini146 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 67
  %bf.load147 = load i16, i16* %mini146, align 4
  %bf.clear148 = and i16 %bf.load147, 1
  %bf.cast149 = trunc i16 %bf.clear148 to i1
  br i1 %bf.cast149, label %cond.false.267, label %land.lhs.true.150

land.lhs.true.150:                                ; preds = %cond.true.145
  %92 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p151 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 67
  %bf.load152 = load i16, i16* %pseudo_window_p151, align 4
  %bf.lshr153 = lshr i16 %bf.load152, 11
  %bf.clear154 = and i16 %bf.lshr153, 1
  %bf.cast155 = trunc i16 %bf.clear154 to i1
  br i1 %bf.cast155, label %cond.false.267, label %land.lhs.true.156

land.lhs.true.156:                                ; preds = %land.lhs.true.150
  %93 = load %struct.window*, %struct.window** %w, align 8
  %frame157 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 1
  %94 = load i64, i64* %frame157, align 8
  %sub158 = sub nsw i64 %94, 5
  %95 = inttoptr i64 %sub158 to i8*
  %96 = bitcast i8* %95 to %struct.frame*
  %wants_modeline159 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 26
  %97 = bitcast i48* %wants_modeline159 to i64*
  %bf.load160 = load i64, i64* %97, align 8
  %bf.lshr161 = lshr i64 %bf.load160, 14
  %bf.clear162 = and i64 %bf.lshr161, 1
  %bf.cast163 = trunc i64 %bf.clear162 to i1
  br i1 %bf.cast163, label %land.lhs.true.165, label %cond.false.267

land.lhs.true.165:                                ; preds = %land.lhs.true.156
  %98 = load %struct.window*, %struct.window** %w, align 8
  %contents166 = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 10
  %99 = load i64, i64* %contents166, align 8
  %call167 = call %struct.buffer* @XBUFFER(i64 %99)
  %header_line_format_168 = getelementptr inbounds %struct.buffer, %struct.buffer* %call167, i32 0, i32 13
  %100 = load i64, i64* %header_line_format_168, align 8
  %call169 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp170 = icmp eq i64 %100, %call169
  br i1 %cmp170, label %cond.false.267, label %land.lhs.true.172

land.lhs.true.172:                                ; preds = %land.lhs.true.165
  %101 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height173 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 35
  %102 = load i32, i32* %pixel_height173, align 4
  %103 = load %struct.window*, %struct.window** %w, align 8
  %contents174 = getelementptr inbounds %struct.window, %struct.window* %103, i32 0, i32 10
  %104 = load i64, i64* %contents174, align 8
  %call175 = call zeroext i1 @BUFFERP(i64 %104)
  br i1 %call175, label %cond.true.177, label %cond.false.211

cond.true.177:                                    ; preds = %land.lhs.true.172
  %105 = load %struct.window*, %struct.window** %w, align 8
  %mini178 = getelementptr inbounds %struct.window, %struct.window* %105, i32 0, i32 67
  %bf.load179 = load i16, i16* %mini178, align 4
  %bf.clear180 = and i16 %bf.load179, 1
  %bf.cast181 = trunc i16 %bf.clear180 to i1
  br i1 %bf.cast181, label %cond.false.217, label %land.lhs.true.182

land.lhs.true.182:                                ; preds = %cond.true.177
  %106 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p183 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 67
  %bf.load184 = load i16, i16* %pseudo_window_p183, align 4
  %bf.lshr185 = lshr i16 %bf.load184, 11
  %bf.clear186 = and i16 %bf.lshr185, 1
  %bf.cast187 = trunc i16 %bf.clear186 to i1
  br i1 %bf.cast187, label %cond.false.217, label %land.lhs.true.188

land.lhs.true.188:                                ; preds = %land.lhs.true.182
  %107 = load %struct.window*, %struct.window** %w, align 8
  %frame189 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 1
  %108 = load i64, i64* %frame189, align 8
  %sub190 = sub nsw i64 %108, 5
  %109 = inttoptr i64 %sub190 to i8*
  %110 = bitcast i8* %109 to %struct.frame*
  %wants_modeline191 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 26
  %111 = bitcast i48* %wants_modeline191 to i64*
  %bf.load192 = load i64, i64* %111, align 8
  %bf.lshr193 = lshr i64 %bf.load192, 14
  %bf.clear194 = and i64 %bf.lshr193, 1
  %bf.cast195 = trunc i64 %bf.clear194 to i1
  br i1 %bf.cast195, label %land.lhs.true.197, label %cond.false.217

land.lhs.true.197:                                ; preds = %land.lhs.true.188
  %112 = load %struct.window*, %struct.window** %w, align 8
  %contents198 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 10
  %113 = load i64, i64* %contents198, align 8
  %call199 = call %struct.buffer* @XBUFFER(i64 %113)
  %mode_line_format_200 = getelementptr inbounds %struct.buffer, %struct.buffer* %call199, i32 0, i32 12
  %114 = load i64, i64* %mode_line_format_200, align 8
  %call201 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp202 = icmp eq i64 %114, %call201
  br i1 %cmp202, label %cond.false.217, label %land.lhs.true.204

land.lhs.true.204:                                ; preds = %land.lhs.true.197
  %115 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height205 = getelementptr inbounds %struct.window, %struct.window* %115, i32 0, i32 35
  %116 = load i32, i32* %pixel_height205, align 4
  %117 = load %struct.window*, %struct.window** %w, align 8
  %frame206 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 1
  %118 = load i64, i64* %frame206, align 8
  %sub207 = sub nsw i64 %118, 5
  %119 = inttoptr i64 %sub207 to i8*
  %120 = bitcast i8* %119 to %struct.frame*
  %line_height208 = getelementptr inbounds %struct.frame, %struct.frame* %120, i32 0, i32 60
  %121 = load i32, i32* %line_height208, align 4
  %cmp209 = icmp sgt i32 %116, %121
  br i1 %cmp209, label %cond.true.212, label %cond.false.217

cond.false.211:                                   ; preds = %land.lhs.true.172
  br i1 false, label %cond.true.212, label %cond.false.217

cond.true.212:                                    ; preds = %cond.false.211, %land.lhs.true.204
  %122 = load %struct.window*, %struct.window** %w, align 8
  %frame213 = getelementptr inbounds %struct.window, %struct.window* %122, i32 0, i32 1
  %123 = load i64, i64* %frame213, align 8
  %sub214 = sub nsw i64 %123, 5
  %124 = inttoptr i64 %sub214 to i8*
  %125 = bitcast i8* %124 to %struct.frame*
  %line_height215 = getelementptr inbounds %struct.frame, %struct.frame* %125, i32 0, i32 60
  %126 = load i32, i32* %line_height215, align 4
  %mul216 = mul nsw i32 2, %126
  br label %cond.end.221

cond.false.217:                                   ; preds = %cond.false.211, %land.lhs.true.204, %land.lhs.true.197, %land.lhs.true.188, %land.lhs.true.182, %cond.true.177
  %127 = load %struct.window*, %struct.window** %w, align 8
  %frame218 = getelementptr inbounds %struct.window, %struct.window* %127, i32 0, i32 1
  %128 = load i64, i64* %frame218, align 8
  %sub219 = sub nsw i64 %128, 5
  %129 = inttoptr i64 %sub219 to i8*
  %130 = bitcast i8* %129 to %struct.frame*
  %line_height220 = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 60
  %131 = load i32, i32* %line_height220, align 4
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.217, %cond.true.212
  %cond222 = phi i32 [ %mul216, %cond.true.212 ], [ %131, %cond.false.217 ]
  %cmp223 = icmp sgt i32 %102, %cond222
  br i1 %cmp223, label %cond.true.226, label %cond.false.267

cond.false.225:                                   ; preds = %cond.true.139
  br i1 false, label %cond.true.226, label %cond.false.267

cond.true.226:                                    ; preds = %cond.false.225, %cond.end.221
  %132 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %132, i32 0, i32 64
  %133 = load i32, i32* %header_line_height, align 4
  %cmp227 = icmp sge i32 %133, 0
  br i1 %cmp227, label %cond.true.229, label %cond.false.231

cond.true.229:                                    ; preds = %cond.true.226
  %134 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height230 = getelementptr inbounds %struct.window, %struct.window* %134, i32 0, i32 64
  %135 = load i32, i32* %header_line_height230, align 4
  br label %cond.end.265

cond.false.231:                                   ; preds = %cond.true.226
  %136 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix232 = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 24
  %137 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix232, align 8
  %tobool233 = icmp ne %struct.glyph_matrix* %137, null
  br i1 %tobool233, label %land.lhs.true.234, label %cond.false.243

land.lhs.true.234:                                ; preds = %cond.false.231
  %138 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix235 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 24
  %139 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix235, align 8
  %rows236 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %139, i32 0, i32 1
  %140 = load %struct.glyph_row*, %struct.glyph_row** %rows236, align 8
  %tobool237 = icmp ne %struct.glyph_row* %140, null
  br i1 %tobool237, label %cond.true.238, label %cond.false.243

cond.true.238:                                    ; preds = %land.lhs.true.234
  %141 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix239 = getelementptr inbounds %struct.window, %struct.window* %141, i32 0, i32 24
  %142 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix239, align 8
  %rows240 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %142, i32 0, i32 1
  %143 = load %struct.glyph_row*, %struct.glyph_row** %rows240, align 8
  %height241 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %143, i32 0, i32 7
  %144 = load i32, i32* %height241, align 4
  %tobool242 = icmp ne i32 %144, 0
  br i1 %tobool242, label %cond.true.244, label %cond.false.258

cond.false.243:                                   ; preds = %land.lhs.true.234, %cond.false.231
  br i1 false, label %cond.true.244, label %cond.false.258

cond.true.244:                                    ; preds = %cond.false.243, %cond.true.238
  %145 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix245 = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 24
  %146 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix245, align 8
  %tobool246 = icmp ne %struct.glyph_matrix* %146, null
  br i1 %tobool246, label %land.lhs.true.247, label %cond.false.255

land.lhs.true.247:                                ; preds = %cond.true.244
  %147 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix248 = getelementptr inbounds %struct.window, %struct.window* %147, i32 0, i32 24
  %148 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix248, align 8
  %rows249 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %148, i32 0, i32 1
  %149 = load %struct.glyph_row*, %struct.glyph_row** %rows249, align 8
  %tobool250 = icmp ne %struct.glyph_row* %149, null
  br i1 %tobool250, label %cond.true.251, label %cond.false.255

cond.true.251:                                    ; preds = %land.lhs.true.247
  %150 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix252 = getelementptr inbounds %struct.window, %struct.window* %150, i32 0, i32 24
  %151 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix252, align 8
  %rows253 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %151, i32 0, i32 1
  %152 = load %struct.glyph_row*, %struct.glyph_row** %rows253, align 8
  %height254 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %152, i32 0, i32 7
  %153 = load i32, i32* %height254, align 4
  br label %cond.end.256

cond.false.255:                                   ; preds = %land.lhs.true.247, %cond.true.244
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.false.255, %cond.true.251
  %cond257 = phi i32 [ %153, %cond.true.251 ], [ 0, %cond.false.255 ]
  br label %cond.end.262

cond.false.258:                                   ; preds = %cond.false.243, %cond.true.238
  %154 = load %struct.window*, %struct.window** %w, align 8
  %frame259 = getelementptr inbounds %struct.window, %struct.window* %154, i32 0, i32 1
  %155 = load i64, i64* %frame259, align 8
  %sub260 = sub nsw i64 %155, 5
  %156 = inttoptr i64 %sub260 to i8*
  %157 = bitcast i8* %156 to %struct.frame*
  %call261 = call i32 @estimate_mode_line_height(%struct.frame* %157, i32 5)
  br label %cond.end.262

cond.end.262:                                     ; preds = %cond.false.258, %cond.end.256
  %cond263 = phi i32 [ %cond257, %cond.end.256 ], [ %call261, %cond.false.258 ]
  %158 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height264 = getelementptr inbounds %struct.window, %struct.window* %158, i32 0, i32 64
  store i32 %cond263, i32* %header_line_height264, align 4
  br label %cond.end.265

cond.end.265:                                     ; preds = %cond.end.262, %cond.true.229
  %cond266 = phi i32 [ %135, %cond.true.229 ], [ %cond263, %cond.end.262 ]
  br label %cond.end.268

cond.false.267:                                   ; preds = %cond.false.225, %cond.end.221, %land.lhs.true.165, %land.lhs.true.156, %land.lhs.true.150, %cond.true.145
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.267, %cond.end.265
  %cond269 = phi i32 [ %cond266, %cond.end.265 ], [ 0, %cond.false.267 ]
  %159 = load %struct.window*, %struct.window** %w, align 8
  %call270 = call i32 @window_text_bottom_y(%struct.window* %159)
  %add = add nsw i32 %cond269, %call270
  %conv271 = sext i32 %add to i64
  %call272 = call i64 @list4i(i64 %conv141, i64 0, i64 %conv271, i64 0)
  br label %cond.end.275

cond.false.273:                                   ; preds = %if.then.125
  %call274 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.275

cond.end.275:                                     ; preds = %cond.false.273, %cond.end.268
  %cond276 = phi i64 [ %call272, %cond.end.268 ], [ %call274, %cond.false.273 ]
  store i64 %cond276, i64* %retval
  br label %return

if.end.277:                                       ; preds = %if.end.121
  %160 = load i64, i64* %line.addr, align 8
  %and = and i64 %160, 7
  %conv278 = trunc i64 %and to i32
  %and279 = and i32 %conv278, -5
  %cmp280 = icmp eq i32 %and279, 2
  br i1 %cmp280, label %cond.true.282, label %cond.false.283

cond.true.282:                                    ; preds = %if.end.277
  br label %cond.end.285

cond.false.283:                                   ; preds = %if.end.277
  %call284 = call i64 @builtin_lisp_symbol(i32 559)
  %161 = load i64, i64* %line.addr, align 8
  %162 = call i64 @wrong_type_argument(i64 %call284, i64 %161) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.285

cond.end.285:                                     ; preds = %163, %cond.true.282
  %164 = load i64, i64* %line.addr, align 8
  %shr = ashr i64 %164, 2
  store i64 %shr, i64* %n, align 8
  %165 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix286 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 24
  %166 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix286, align 8
  %rows287 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %166, i32 0, i32 1
  %167 = load %struct.glyph_row*, %struct.glyph_row** %rows287, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %167, i32 0, i32 22
  %168 = bitcast i40* %mode_line_p to i64*
  %bf.load288 = load i64, i64* %168, align 4
  %bf.lshr289 = lshr i64 %bf.load288, 20
  %bf.clear290 = and i64 %bf.lshr289, 1
  %bf.cast291 = trunc i64 %bf.clear290 to i1
  br i1 %bf.cast291, label %cond.true.293, label %cond.false.297

cond.true.293:                                    ; preds = %cond.end.285
  %169 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix294 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 24
  %170 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix294, align 8
  %rows295 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %170, i32 0, i32 1
  %171 = load %struct.glyph_row*, %struct.glyph_row** %rows295, align 8
  %add.ptr296 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %171, i64 1
  br label %cond.end.300

cond.false.297:                                   ; preds = %cond.end.285
  %172 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix298 = getelementptr inbounds %struct.window, %struct.window* %172, i32 0, i32 24
  %173 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix298, align 8
  %rows299 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %173, i32 0, i32 1
  %174 = load %struct.glyph_row*, %struct.glyph_row** %rows299, align 8
  br label %cond.end.300

cond.end.300:                                     ; preds = %cond.false.297, %cond.true.293
  %cond301 = phi %struct.glyph_row* [ %add.ptr296, %cond.true.293 ], [ %174, %cond.false.297 ]
  store %struct.glyph_row* %cond301, %struct.glyph_row** %row, align 8
  %175 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix302 = getelementptr inbounds %struct.window, %struct.window* %175, i32 0, i32 24
  %176 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix302, align 8
  %rows303 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %176, i32 0, i32 1
  %177 = load %struct.glyph_row*, %struct.glyph_row** %rows303, align 8
  %178 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix304 = getelementptr inbounds %struct.window, %struct.window* %178, i32 0, i32 24
  %179 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix304, align 8
  %nrows305 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %179, i32 0, i32 3
  %180 = load i32, i32* %nrows305, align 4
  %idx.ext306 = sext i32 %180 to i64
  %add.ptr307 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %177, i64 %idx.ext306
  %181 = load %struct.window*, %struct.window** %w, align 8
  %contents308 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 10
  %182 = load i64, i64* %contents308, align 8
  %call309 = call zeroext i1 @BUFFERP(i64 %182)
  br i1 %call309, label %cond.true.311, label %cond.false.344

cond.true.311:                                    ; preds = %cond.end.300
  %183 = load %struct.window*, %struct.window** %w, align 8
  %mini312 = getelementptr inbounds %struct.window, %struct.window* %183, i32 0, i32 67
  %bf.load313 = load i16, i16* %mini312, align 4
  %bf.clear314 = and i16 %bf.load313, 1
  %bf.cast315 = trunc i16 %bf.clear314 to i1
  br i1 %bf.cast315, label %land.end, label %land.lhs.true.316

land.lhs.true.316:                                ; preds = %cond.true.311
  %184 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p317 = getelementptr inbounds %struct.window, %struct.window* %184, i32 0, i32 67
  %bf.load318 = load i16, i16* %pseudo_window_p317, align 4
  %bf.lshr319 = lshr i16 %bf.load318, 11
  %bf.clear320 = and i16 %bf.lshr319, 1
  %bf.cast321 = trunc i16 %bf.clear320 to i1
  br i1 %bf.cast321, label %land.end, label %land.lhs.true.322

land.lhs.true.322:                                ; preds = %land.lhs.true.316
  %185 = load %struct.window*, %struct.window** %w, align 8
  %frame323 = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 1
  %186 = load i64, i64* %frame323, align 8
  %sub324 = sub nsw i64 %186, 5
  %187 = inttoptr i64 %sub324 to i8*
  %188 = bitcast i8* %187 to %struct.frame*
  %wants_modeline325 = getelementptr inbounds %struct.frame, %struct.frame* %188, i32 0, i32 26
  %189 = bitcast i48* %wants_modeline325 to i64*
  %bf.load326 = load i64, i64* %189, align 8
  %bf.lshr327 = lshr i64 %bf.load326, 14
  %bf.clear328 = and i64 %bf.lshr327, 1
  %bf.cast329 = trunc i64 %bf.clear328 to i1
  br i1 %bf.cast329, label %land.lhs.true.331, label %land.end

land.lhs.true.331:                                ; preds = %land.lhs.true.322
  %190 = load %struct.window*, %struct.window** %w, align 8
  %contents332 = getelementptr inbounds %struct.window, %struct.window* %190, i32 0, i32 10
  %191 = load i64, i64* %contents332, align 8
  %call333 = call %struct.buffer* @XBUFFER(i64 %191)
  %mode_line_format_334 = getelementptr inbounds %struct.buffer, %struct.buffer* %call333, i32 0, i32 12
  %192 = load i64, i64* %mode_line_format_334, align 8
  %call335 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp336 = icmp eq i64 %192, %call335
  br i1 %cmp336, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.331
  %193 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height338 = getelementptr inbounds %struct.window, %struct.window* %193, i32 0, i32 35
  %194 = load i32, i32* %pixel_height338, align 4
  %195 = load %struct.window*, %struct.window** %w, align 8
  %frame339 = getelementptr inbounds %struct.window, %struct.window* %195, i32 0, i32 1
  %196 = load i64, i64* %frame339, align 8
  %sub340 = sub nsw i64 %196, 5
  %197 = inttoptr i64 %sub340 to i8*
  %198 = bitcast i8* %197 to %struct.frame*
  %line_height341 = getelementptr inbounds %struct.frame, %struct.frame* %198, i32 0, i32 60
  %199 = load i32, i32* %line_height341, align 4
  %cmp342 = icmp sgt i32 %194, %199
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.331, %land.lhs.true.322, %land.lhs.true.316, %cond.true.311
  %200 = phi i1 [ false, %land.lhs.true.331 ], [ false, %land.lhs.true.322 ], [ false, %land.lhs.true.316 ], [ false, %cond.true.311 ], [ %cmp342, %land.rhs ]
  %land.ext = zext i1 %200 to i32
  br label %cond.end.345

cond.false.344:                                   ; preds = %cond.end.300
  br label %cond.end.345

cond.end.345:                                     ; preds = %cond.false.344, %land.end
  %cond346 = phi i32 [ %land.ext, %land.end ], [ 0, %cond.false.344 ]
  %tobool347 = icmp ne i32 %cond346, 0
  %cond348 = select i1 %tobool347, i32 1, i32 0
  %idx.ext349 = sext i32 %cond348 to i64
  %idx.neg = sub i64 0, %idx.ext349
  %add.ptr350 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr307, i64 %idx.neg
  store %struct.glyph_row* %add.ptr350, %struct.glyph_row** %end_row, align 8
  %201 = load %struct.window*, %struct.window** %w, align 8
  %call351 = call i32 @window_text_bottom_y(%struct.window* %201)
  store i32 %call351, i32* %max_y, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end.345
  %202 = load i64, i64* %n, align 8
  %cmp352 = icmp slt i64 %202, 0
  br i1 %cmp352, label %land.lhs.true.358, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %while.cond
  %203 = load i32, i32* %i, align 4
  %conv355 = sext i32 %203 to i64
  %204 = load i64, i64* %n, align 8
  %cmp356 = icmp slt i64 %conv355, %204
  br i1 %cmp356, label %land.lhs.true.358, label %land.end.373

land.lhs.true.358:                                ; preds = %lor.lhs.false.354, %while.cond
  %205 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %206 = load %struct.glyph_row*, %struct.glyph_row** %end_row, align 8
  %cmp359 = icmp ule %struct.glyph_row* %205, %206
  br i1 %cmp359, label %land.lhs.true.361, label %land.end.373

land.lhs.true.361:                                ; preds = %land.lhs.true.358
  %207 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p362 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %207, i32 0, i32 22
  %208 = bitcast i40* %enabled_p362 to i64*
  %bf.load363 = load i64, i64* %208, align 4
  %bf.lshr364 = lshr i64 %bf.load363, 10
  %bf.clear365 = and i64 %bf.lshr364, 1
  %bf.cast366 = trunc i64 %bf.clear365 to i1
  br i1 %bf.cast366, label %land.rhs.368, label %land.end.373

land.rhs.368:                                     ; preds = %land.lhs.true.361
  %209 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %209, i32 0, i32 4
  %210 = load i32, i32* %y, align 4
  %211 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height369 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %211, i32 0, i32 7
  %212 = load i32, i32* %height369, align 4
  %add370 = add nsw i32 %210, %212
  %213 = load i32, i32* %max_y, align 4
  %cmp371 = icmp slt i32 %add370, %213
  br label %land.end.373

land.end.373:                                     ; preds = %land.rhs.368, %land.lhs.true.361, %land.lhs.true.358, %lor.lhs.false.354
  %214 = phi i1 [ false, %land.lhs.true.361 ], [ false, %land.lhs.true.358 ], [ false, %lor.lhs.false.354 ], [ %cmp371, %land.rhs.368 ]
  br i1 %214, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.373
  %215 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %215, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %row, align 8
  %216 = load i32, i32* %i, align 4
  %inc = add nsw i32 %216, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end.373
  %217 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %218 = load %struct.glyph_row*, %struct.glyph_row** %end_row, align 8
  %cmp375 = icmp ugt %struct.glyph_row* %217, %218
  br i1 %cmp375, label %if.then.383, label %lor.lhs.false.377

lor.lhs.false.377:                                ; preds = %while.end
  %219 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p378 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %219, i32 0, i32 22
  %220 = bitcast i40* %enabled_p378 to i64*
  %bf.load379 = load i64, i64* %220, align 4
  %bf.lshr380 = lshr i64 %bf.load379, 10
  %bf.clear381 = and i64 %bf.lshr380, 1
  %bf.cast382 = trunc i64 %bf.clear381 to i1
  br i1 %bf.cast382, label %if.end.385, label %if.then.383

if.then.383:                                      ; preds = %lor.lhs.false.377, %while.end
  %call384 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call384, i64* %retval
  br label %return

if.end.385:                                       ; preds = %lor.lhs.false.377
  %221 = load i64, i64* %n, align 8
  %inc386 = add nsw i64 %221, 1
  store i64 %inc386, i64* %n, align 8
  %cmp387 = icmp slt i64 %inc386, 0
  br i1 %cmp387, label %if.then.389, label %if.end.401

if.then.389:                                      ; preds = %if.end.385
  %222 = load i64, i64* %n, align 8
  %sub390 = sub nsw i64 0, %222
  %223 = load i32, i32* %i, align 4
  %conv391 = sext i32 %223 to i64
  %cmp392 = icmp sgt i64 %sub390, %conv391
  br i1 %cmp392, label %if.then.394, label %if.end.396

if.then.394:                                      ; preds = %if.then.389
  %call395 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call395, i64* %retval
  br label %return

if.end.396:                                       ; preds = %if.then.389
  %224 = load i64, i64* %n, align 8
  %225 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %add.ptr397 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %225, i64 %224
  store %struct.glyph_row* %add.ptr397, %struct.glyph_row** %row, align 8
  %226 = load i64, i64* %n, align 8
  %227 = load i32, i32* %i, align 4
  %conv398 = sext i32 %227 to i64
  %add399 = add nsw i64 %conv398, %226
  %conv400 = trunc i64 %add399 to i32
  store i32 %conv400, i32* %i, align 4
  br label %if.end.401

if.end.401:                                       ; preds = %if.end.396, %if.end.385
  br label %found_row

found_row:                                        ; preds = %if.end.401, %if.end.37
  %228 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y402 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %228, i32 0, i32 4
  %229 = load i32, i32* %y402, align 4
  %230 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height403 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %230, i32 0, i32 7
  %231 = load i32, i32* %height403, align 4
  %add404 = add nsw i32 %229, %231
  %232 = load i32, i32* %max_y, align 4
  %sub405 = sub nsw i32 %add404, %232
  %cmp406 = icmp sgt i32 0, %sub405
  br i1 %cmp406, label %cond.true.408, label %cond.false.409

cond.true.408:                                    ; preds = %found_row
  br label %cond.end.414

cond.false.409:                                   ; preds = %found_row
  %233 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y410 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %233, i32 0, i32 4
  %234 = load i32, i32* %y410, align 4
  %235 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height411 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %235, i32 0, i32 7
  %236 = load i32, i32* %height411, align 4
  %add412 = add nsw i32 %234, %236
  %237 = load i32, i32* %max_y, align 4
  %sub413 = sub nsw i32 %add412, %237
  br label %cond.end.414

cond.end.414:                                     ; preds = %cond.false.409, %cond.true.408
  %cond415 = phi i32 [ 0, %cond.true.408 ], [ %sub413, %cond.false.409 ]
  store i32 %cond415, i32* %crop, align 4
  %238 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height416 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %238, i32 0, i32 7
  %239 = load i32, i32* %height416, align 4
  %240 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y417 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %240, i32 0, i32 4
  %241 = load i32, i32* %y417, align 4
  %cmp418 = icmp slt i32 0, %241
  br i1 %cmp418, label %cond.true.420, label %cond.false.421

cond.true.420:                                    ; preds = %cond.end.414
  br label %cond.end.423

cond.false.421:                                   ; preds = %cond.end.414
  %242 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y422 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %242, i32 0, i32 4
  %243 = load i32, i32* %y422, align 4
  br label %cond.end.423

cond.end.423:                                     ; preds = %cond.false.421, %cond.true.420
  %cond424 = phi i32 [ 0, %cond.true.420 ], [ %243, %cond.false.421 ]
  %add425 = add nsw i32 %239, %cond424
  %244 = load i32, i32* %crop, align 4
  %sub426 = sub nsw i32 %add425, %244
  %conv427 = sext i32 %sub426 to i64
  %245 = load i32, i32* %i, align 4
  %conv428 = sext i32 %245 to i64
  %246 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y429 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %246, i32 0, i32 4
  %247 = load i32, i32* %y429, align 4
  %conv430 = sext i32 %247 to i64
  %248 = load i32, i32* %crop, align 4
  %conv431 = sext i32 %248 to i64
  %call432 = call i64 @list4i(i64 %conv427, i64 %conv428, i64 %conv430, i64 %conv431)
  store i64 %call432, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.423, %if.then.394, %if.then.383, %cond.end.275, %cond.end.119, %if.then.105, %if.then.35, %if.then.21, %if.then
  %249 = load i64, i64* %retval
  ret i64 %249
}

declare i32 @window_text_bottom_y(%struct.window*) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_dedicated_p(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %dedicated = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 20
  %1 = load i64, i64* %dedicated, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_dedicated_p(i64 %window, i64 %flag) #0 {
entry:
  %window.addr = alloca i64, align 8
  %flag.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %flag, i64* %flag.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %flag.addr, align 8
  call void @wset_dedicated(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %flag.addr, align 8
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define internal void @wset_dedicated(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %dedicated = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 20
  store i64 %0, i64* %dedicated, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_prev_buffers(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %prev_buffers = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 26
  %1 = load i64, i64* %prev_buffers, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_prev_buffers(i64 %window, i64 %prev_buffers) #0 {
entry:
  %window.addr = alloca i64, align 8
  %prev_buffers.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %prev_buffers, i64* %prev_buffers.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %prev_buffers.addr, align 8
  call void @wset_prev_buffers(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %prev_buffers.addr, align 8
  ret i64 %2
}

declare void @wset_prev_buffers(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_next_buffers(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %next_buffers = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 27
  %1 = load i64, i64* %next_buffers, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_next_buffers(i64 %window, i64 %next_buffers) #0 {
entry:
  %window.addr = alloca i64, align 8
  %next_buffers.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %next_buffers, i64* %next_buffers.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %next_buffers.addr, align 8
  call void @wset_next_buffers(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %next_buffers.addr, align 8
  ret i64 %2
}

declare void @wset_next_buffers(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_parameters(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %window_parameters = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 23
  %1 = load i64, i64* %window_parameters, align 8
  %call1 = call i64 @Fcopy_alist(i64 %1)
  ret i64 %call1
}

declare i64 @Fcopy_alist(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_parameter(i64 %window, i64 %parameter) #0 {
entry:
  %window.addr = alloca i64, align 8
  %parameter.addr = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %parameter, i64* %parameter.addr, align 8
  %0 = load i64, i64* %parameter.addr, align 8
  %1 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_any_window(i64 %1)
  %window_parameters = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 23
  %2 = load i64, i64* %window_parameters, align 8
  %call1 = call i64 @Fassq(i64 %0, i64 %2)
  store i64 %call1, i64* %result, align 8
  %3 = load i64, i64* %result, align 8
  %call2 = call i64 @CDR_SAFE(i64 %3)
  ret i64 %call2
}

declare i64 @Fassq(i64, i64) #1

declare i64 @CDR_SAFE(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_parameter(i64 %window, i64 %parameter, i64 %value) #0 {
entry:
  %window.addr = alloca i64, align 8
  %parameter.addr = alloca i64, align 8
  %value.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %old_alist_elt = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %parameter, i64* %parameter.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_any_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %parameter.addr, align 8
  %2 = load %struct.window*, %struct.window** %w, align 8
  %window_parameters = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 23
  %3 = load i64, i64* %window_parameters, align 8
  %call1 = call i64 @Fassq(i64 %1, i64 %3)
  store i64 %call1, i64* %old_alist_elt, align 8
  %4 = load i64, i64* %old_alist_elt, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %6 = load i64, i64* %parameter.addr, align 8
  %7 = load i64, i64* %value.addr, align 8
  %call3 = call i64 @Fcons(i64 %6, i64 %7)
  %8 = load %struct.window*, %struct.window** %w, align 8
  %window_parameters4 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 23
  %9 = load i64, i64* %window_parameters4, align 8
  %call5 = call i64 @Fcons(i64 %call3, i64 %9)
  call void @wset_window_parameters(%struct.window* %5, i64 %call5)
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load i64, i64* %old_alist_elt, align 8
  %11 = load i64, i64* %value.addr, align 8
  %call6 = call i64 @Fsetcdr(i64 %10, i64 %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i64, i64* %value.addr, align 8
  ret i64 %12
}

; Function Attrs: nounwind uwtable
define internal void @wset_window_parameters(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_parameters = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 23
  store i64 %0, i64* %window_parameters, align 8
  ret void
}

declare i64 @Fsetcdr(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_display_table(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %display_table = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 19
  %1 = load i64, i64* %display_table, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define %struct.Lisp_Char_Table* @window_display_table(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %dp = alloca %struct.Lisp_Char_Table*, align 8
  %b = alloca %struct.buffer*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.Lisp_Char_Table* null, %struct.Lisp_Char_Table** %dp, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %display_table = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 19
  %1 = load i64, i64* %display_table, align 8
  %call = call zeroext i1 @CHAR_TABLE_P(i64 %1)
  br i1 %call, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %display_table1 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 19
  %3 = load i64, i64* %display_table1, align 8
  %call2 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %3)
  %purpose = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call2, i32 0, i32 3
  %4 = load i64, i64* %purpose, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 346)
  %cmp = icmp eq i64 %4, %call3
  br i1 %cmp, label %land.lhs.true.4, label %if.else

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %display_table5 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 19
  %6 = load i64, i64* %display_table5, align 8
  %call6 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %6)
  %call7 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call6)
  %cmp8 = icmp eq i32 %call7, 6
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %display_table9 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 19
  %8 = load i64, i64* %display_table9, align 8
  %call10 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %8)
  store %struct.Lisp_Char_Table* %call10, %struct.Lisp_Char_Table** %dp, align 8
  br label %if.end.45

if.else:                                          ; preds = %land.lhs.true.4, %land.lhs.true, %entry
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 10
  %10 = load i64, i64* %contents, align 8
  %call11 = call zeroext i1 @BUFFERP(i64 %10)
  br i1 %call11, label %if.then.12, label %if.end.44

if.then.12:                                       ; preds = %if.else
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents13 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents13, align 8
  %call14 = call %struct.buffer* @XBUFFER(i64 %12)
  store %struct.buffer* %call14, %struct.buffer** %b, align 8
  %13 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 37
  %14 = load i64, i64* %display_table_, align 8
  %call15 = call zeroext i1 @CHAR_TABLE_P(i64 %14)
  br i1 %call15, label %land.lhs.true.16, label %if.else.30

land.lhs.true.16:                                 ; preds = %if.then.12
  %15 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_table_17 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 37
  %16 = load i64, i64* %display_table_17, align 8
  %call18 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %16)
  %purpose19 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call18, i32 0, i32 3
  %17 = load i64, i64* %purpose19, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 346)
  %cmp21 = icmp eq i64 %17, %call20
  br i1 %cmp21, label %land.lhs.true.22, label %if.else.30

land.lhs.true.22:                                 ; preds = %land.lhs.true.16
  %18 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_table_23 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 37
  %19 = load i64, i64* %display_table_23, align 8
  %call24 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %19)
  %call25 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call24)
  %cmp26 = icmp eq i32 %call25, 6
  br i1 %cmp26, label %if.then.27, label %if.else.30

if.then.27:                                       ; preds = %land.lhs.true.22
  %20 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_table_28 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 37
  %21 = load i64, i64* %display_table_28, align 8
  %call29 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %21)
  store %struct.Lisp_Char_Table* %call29, %struct.Lisp_Char_Table** %dp, align 8
  br label %if.end.43

if.else.30:                                       ; preds = %land.lhs.true.22, %land.lhs.true.16, %if.then.12
  %22 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275), align 8
  %call31 = call zeroext i1 @CHAR_TABLE_P(i64 %22)
  br i1 %call31, label %land.lhs.true.32, label %if.end

land.lhs.true.32:                                 ; preds = %if.else.30
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275), align 8
  %call33 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %23)
  %purpose34 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call33, i32 0, i32 3
  %24 = load i64, i64* %purpose34, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 346)
  %cmp36 = icmp eq i64 %24, %call35
  br i1 %cmp36, label %land.lhs.true.37, label %if.end

land.lhs.true.37:                                 ; preds = %land.lhs.true.32
  %25 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275), align 8
  %call38 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %25)
  %call39 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call38)
  %cmp40 = icmp eq i32 %call39, 6
  br i1 %cmp40, label %if.then.41, label %if.end

if.then.41:                                       ; preds = %land.lhs.true.37
  %26 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275), align 8
  %call42 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %26)
  store %struct.Lisp_Char_Table* %call42, %struct.Lisp_Char_Table** %dp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.41, %land.lhs.true.37, %land.lhs.true.32, %if.else.30
  br label %if.end.43

if.end.43:                                        ; preds = %if.end, %if.then.27
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.else
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then
  %27 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp, align 8
  ret %struct.Lisp_Char_Table* %27
}

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare %struct.Lisp_Char_Table* @XCHAR_TABLE(i64) #1

declare i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table*) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_display_table(i64 %window, i64 %table) #0 {
entry:
  %window.addr = alloca i64, align 8
  %table.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %table, i64* %table.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %table.addr, align 8
  call void @wset_display_table(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %table.addr, align 8
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define internal void @wset_display_table(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %display_table = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 19
  store i64 %0, i64* %display_table, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @window_list() #0 {
entry:
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %arglist = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  %0 = load i64, i64* @Vwindow_list, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* @Vwindow_list, align 8
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i64, i64* %tail, align 8
  %and2 = and i64 %2, 7
  %conv3 = trunc i64 %and2 to i32
  %cmp4 = icmp eq i32 %conv3, 3
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %arglist, align 8
  %8 = load i64, i64* %frame, align 8
  %sub7 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub7 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %11 = bitcast i64* %arglist to i8*
  call void @foreach_window(%struct.frame* %10, i1 (%struct.window*, i8*)* @add_window_to_list, i8* %11)
  %12 = load i64, i64* %arglist, align 8
  %call8 = call i64 @Fnreverse(i64 %12)
  store i64 %call8, i64* %arglist, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %13 = load i64, i64* @Vwindow_list, align 8
  store i64 %13, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %14 = load i64, i64* %arglist, align 8
  store i64 %14, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call9 = call i64 @Fnconc(i64 2, i64* %arraydecay)
  store i64 %call9, i64* @Vwindow_list, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %tail, align 8
  %sub10 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub10 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %18 = load i64, i64* %cdr, align 8
  store i64 %18, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %19 = load i64, i64* @Vwindow_list, align 8
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @add_window_to_list(%struct.window* %w, i8* %user_data) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %user_data.addr = alloca i8*, align 8
  %list = alloca i64*, align 8
  %window = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %list, align 8
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %3 = bitcast %struct.window* %2 to i8*
  %call = call i64 @make_lisp_ptr(i8* %3, i32 5)
  store i64 %call, i64* %window, align 8
  %4 = load i64, i64* %window, align 8
  %5 = load i64*, i64** %list, align 8
  %6 = load i64, i64* %5, align 8
  %call1 = call i64 @Fcons(i64 %4, i64 %6)
  %7 = load i64*, i64** %list, align 8
  store i64 %call1, i64* %7, align 8
  ret i1 true
}

declare i64 @Fnreverse(i64) #1

declare i64 @Fnconc(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Fnext_window(i64 %window, i64 %minibuf, i64 %all_frames) #0 {
entry:
  %window.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %1 = load i64, i64* %minibuf.addr, align 8
  %2 = load i64, i64* %all_frames.addr, align 8
  %call = call i64 @next_window(i64 %0, i64 %1, i64 %2, i1 zeroext true)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @next_window(i64 %window, i64 %minibuf, i64 %all_frames, i1 zeroext %next_p) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  %next_p.addr = alloca i8, align 1
  %list = alloca i64, align 8
  %candidate = alloca i64, align 8
  %list55 = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %frombool = zext i1 %next_p to i8
  store i8 %frombool, i8* %next_p.addr, align 1
  call void @decode_next_window_args(i64* %window.addr, i64* %minibuf.addr, i64* %all_frames.addr)
  %0 = load i64, i64* %all_frames.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %all_frames.addr, align 8
  %2 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 1
  %3 = load i64, i64* %frame, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64, i64* %all_frames.addr, align 8
  %call2 = call i64 @Fframe_first_window(i64 %4)
  store i64 %call2, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load i8, i8* %next_p.addr, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %6 = load i64, i64* %window.addr, align 8
  %call4 = call i64 @window_list()
  %call5 = call i64 @Fmemq(i64 %6, i64 %call4)
  store i64 %call5, i64* %list, align 8
  %7 = load i64, i64* %list, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv, 3
  br i1 %cmp6, label %if.then.8, label %if.end.20

if.then.8:                                        ; preds = %if.then.3
  %8 = load i64, i64* %list, align 8
  %sub = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %11 = load i64, i64* %cdr, align 8
  store i64 %11, i64* %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.8
  %12 = load i64, i64* %list, align 8
  %and9 = and i64 %12, 7
  %conv10 = trunc i64 %and9 to i32
  %cmp11 = icmp eq i32 %conv10, 3
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i64, i64* %list, align 8
  %sub13 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub13 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car, align 8
  %17 = load i64, i64* %window.addr, align 8
  %18 = load i64, i64* %minibuf.addr, align 8
  %19 = load i64, i64* %all_frames.addr, align 8
  %call14 = call zeroext i1 @candidate_window_p(i64 %16, i64 %17, i64 %18, i64 %19)
  br i1 %call14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.body
  br label %for.end

if.end.16:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %20 = load i64, i64* %list, align 8
  %sub17 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub17 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %u18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 1
  %cdr19 = bitcast %union.anon.11* %u18 to i64*
  %23 = load i64, i64* %cdr19, align 8
  store i64 %23, i64* %list, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.15, %for.cond
  br label %if.end.20

if.end.20:                                        ; preds = %for.end, %if.then.3
  %24 = load i64, i64* %list, align 8
  %and21 = and i64 %24, 7
  %conv22 = trunc i64 %and21 to i32
  %cmp23 = icmp eq i32 %conv22, 3
  br i1 %cmp23, label %if.end.46, label %if.then.25

if.then.25:                                       ; preds = %if.end.20
  %25 = load i64, i64* @Vwindow_list, align 8
  store i64 %25, i64* %list, align 8
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.41, %if.then.25
  %26 = load i64, i64* %list, align 8
  %and27 = and i64 %26, 7
  %conv28 = trunc i64 %and27 to i32
  %cmp29 = icmp eq i32 %conv28, 3
  br i1 %cmp29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.26
  %27 = load i64, i64* %list, align 8
  %sub31 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub31 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car32, align 8
  %31 = load i64, i64* %window.addr, align 8
  %cmp33 = icmp eq i64 %30, %31
  %lnot = xor i1 %cmp33, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.26
  %32 = phi i1 [ false, %for.cond.26 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body.35, label %for.end.45

for.body.35:                                      ; preds = %land.end
  %33 = load i64, i64* %list, align 8
  %sub36 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub36 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %car37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 0
  %36 = load i64, i64* %car37, align 8
  %37 = load i64, i64* %window.addr, align 8
  %38 = load i64, i64* %minibuf.addr, align 8
  %39 = load i64, i64* %all_frames.addr, align 8
  %call38 = call zeroext i1 @candidate_window_p(i64 %36, i64 %37, i64 %38, i64 %39)
  br i1 %call38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %for.body.35
  br label %for.end.45

if.end.40:                                        ; preds = %for.body.35
  br label %for.inc.41

for.inc.41:                                       ; preds = %if.end.40
  %40 = load i64, i64* %list, align 8
  %sub42 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub42 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %u43 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 1
  %cdr44 = bitcast %union.anon.11* %u43 to i64*
  %43 = load i64, i64* %cdr44, align 8
  store i64 %43, i64* %list, align 8
  br label %for.cond.26

for.end.45:                                       ; preds = %if.then.39, %land.end
  br label %if.end.46

if.end.46:                                        ; preds = %for.end.45, %if.end.20
  %44 = load i64, i64* %list, align 8
  %and47 = and i64 %44, 7
  %conv48 = trunc i64 %and47 to i32
  %cmp49 = icmp eq i32 %conv48, 3
  br i1 %cmp49, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %if.end.46
  %45 = load i64, i64* %list, align 8
  %sub52 = sub nsw i64 %45, 3
  %46 = inttoptr i64 %sub52 to i8*
  %47 = bitcast i8* %46 to %struct.Lisp_Cons*
  %car53 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %47, i32 0, i32 0
  %48 = load i64, i64* %car53, align 8
  store i64 %48, i64* %window.addr, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %if.end.46
  br label %if.end.89

if.else:                                          ; preds = %if.end
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call56, i64* %candidate, align 8
  %call57 = call i64 @window_list()
  store i64 %call57, i64* %list55, align 8
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.81, %if.else
  %49 = load i64, i64* %list55, align 8
  %and59 = and i64 %49, 7
  %conv60 = trunc i64 %and59 to i32
  %cmp61 = icmp eq i32 %conv60, 3
  br i1 %cmp61, label %for.body.63, label %for.end.85

for.body.63:                                      ; preds = %for.cond.58
  %50 = load i64, i64* %list55, align 8
  %sub64 = sub nsw i64 %50, 3
  %51 = inttoptr i64 %sub64 to i8*
  %52 = bitcast i8* %51 to %struct.Lisp_Cons*
  %car65 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %52, i32 0, i32 0
  %53 = load i64, i64* %car65, align 8
  %54 = load i64, i64* %window.addr, align 8
  %cmp66 = icmp eq i64 %53, %54
  br i1 %cmp66, label %if.then.68, label %if.else.72

if.then.68:                                       ; preds = %for.body.63
  %55 = load i64, i64* %candidate, align 8
  %call69 = call zeroext i1 @WINDOWP(i64 %55)
  br i1 %call69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.then.68
  br label %for.end.85

if.end.71:                                        ; preds = %if.then.68
  br label %if.end.80

if.else.72:                                       ; preds = %for.body.63
  %56 = load i64, i64* %list55, align 8
  %sub73 = sub nsw i64 %56, 3
  %57 = inttoptr i64 %sub73 to i8*
  %58 = bitcast i8* %57 to %struct.Lisp_Cons*
  %car74 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %58, i32 0, i32 0
  %59 = load i64, i64* %car74, align 8
  %60 = load i64, i64* %window.addr, align 8
  %61 = load i64, i64* %minibuf.addr, align 8
  %62 = load i64, i64* %all_frames.addr, align 8
  %call75 = call zeroext i1 @candidate_window_p(i64 %59, i64 %60, i64 %61, i64 %62)
  br i1 %call75, label %if.then.76, label %if.end.79

if.then.76:                                       ; preds = %if.else.72
  %63 = load i64, i64* %list55, align 8
  %sub77 = sub nsw i64 %63, 3
  %64 = inttoptr i64 %sub77 to i8*
  %65 = bitcast i8* %64 to %struct.Lisp_Cons*
  %car78 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %65, i32 0, i32 0
  %66 = load i64, i64* %car78, align 8
  store i64 %66, i64* %candidate, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.76, %if.else.72
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %if.end.71
  br label %for.inc.81

for.inc.81:                                       ; preds = %if.end.80
  %67 = load i64, i64* %list55, align 8
  %sub82 = sub nsw i64 %67, 3
  %68 = inttoptr i64 %sub82 to i8*
  %69 = bitcast i8* %68 to %struct.Lisp_Cons*
  %u83 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %69, i32 0, i32 1
  %cdr84 = bitcast %union.anon.11* %u83 to i64*
  %70 = load i64, i64* %cdr84, align 8
  store i64 %70, i64* %list55, align 8
  br label %for.cond.58

for.end.85:                                       ; preds = %if.then.70, %for.cond.58
  %71 = load i64, i64* %candidate, align 8
  %call86 = call zeroext i1 @WINDOWP(i64 %71)
  br i1 %call86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %for.end.85
  %72 = load i64, i64* %candidate, align 8
  store i64 %72, i64* %window.addr, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %for.end.85
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.end.54
  %73 = load i64, i64* %window.addr, align 8
  store i64 %73, i64* %retval
  br label %return

return:                                           ; preds = %if.end.89, %if.then
  %74 = load i64, i64* %retval
  ret i64 %74
}

; Function Attrs: nounwind uwtable
define i64 @Fprevious_window(i64 %window, i64 %minibuf, i64 %all_frames) #0 {
entry:
  %window.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %1 = load i64, i64* %minibuf.addr, align 8
  %2 = load i64, i64* %all_frames.addr, align 8
  %call = call i64 @next_window(i64 %0, i64 %1, i64 %2, i1 zeroext false)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_list(i64 %frame, i64 %minibuf, i64 %window) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %2 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 6
  %5 = load i64, i64* %selected_window, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %6 = load i64, i64* @selected_window, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %6, %cond.false ]
  store i64 %cond, i64* %window.addr, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %7 = load i64, i64* %window.addr, align 8
  call void @CHECK_WINDOW(i64 %7)
  %8 = load i64, i64* %frame.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %8, %call2
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %9 = load i64, i64* @selected_frame, align 8
  store i64 %9, i64* %frame.addr, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %10 = load i64, i64* %frame.addr, align 8
  %11 = load i64, i64* %window.addr, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %11)
  %frame7 = getelementptr inbounds %struct.window, %struct.window* %call6, i32 0, i32 1
  %12 = load i64, i64* %frame7, align 8
  %cmp8 = icmp eq i64 %10, %12
  br i1 %cmp8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.5
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0)) #5
  unreachable

if.end.10:                                        ; preds = %if.end.5
  %13 = load i64, i64* %window.addr, align 8
  %14 = load i64, i64* %minibuf.addr, align 8
  %15 = load i64, i64* %frame.addr, align 8
  %call11 = call i64 @window_list_1(i64 %13, i64 %14, i64 %15)
  ret i64 %call11
}

; Function Attrs: nounwind uwtable
define internal i64 @window_list_1(i64 %window, i64 %minibuf, i64 %all_frames) #0 {
entry:
  %window.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %list = alloca i64, align 8
  %rest = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  call void @decode_next_window_args(i64* %window.addr, i64* %minibuf.addr, i64* %all_frames.addr)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %list, align 8
  %call1 = call i64 @window_list()
  store i64 %call1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %tail, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 0
  %4 = load i64, i64* %car, align 8
  %5 = load i64, i64* %window.addr, align 8
  %6 = load i64, i64* %minibuf.addr, align 8
  %7 = load i64, i64* %all_frames.addr, align 8
  %call3 = call zeroext i1 @candidate_window_p(i64 %4, i64 %5, i64 %6, i64 %7)
  br i1 %call3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i64, i64* %tail, align 8
  %sub4 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub4 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car5 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car5, align 8
  %12 = load i64, i64* %list, align 8
  %call6 = call i64 @Fcons(i64 %11, i64 %12)
  store i64 %call6, i64* %list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i64, i64* %tail, align 8
  %sub7 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub7 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %16 = load i64, i64* %cdr, align 8
  store i64 %16, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i64, i64* %list, align 8
  %call8 = call i64 @Fnreverse(i64 %17)
  store i64 %call8, i64* %list, align 8
  %18 = load i64, i64* %window.addr, align 8
  %19 = load i64, i64* %list, align 8
  %call9 = call i64 @Fmemq(i64 %18, i64 %19)
  store i64 %call9, i64* %rest, align 8
  %20 = load i64, i64* %rest, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %20, %call10
  br i1 %cmp11, label %if.end.30, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %21 = load i64, i64* %rest, align 8
  %22 = load i64, i64* %list, align 8
  %cmp13 = icmp eq i64 %21, %22
  br i1 %cmp13, label %if.end.30, label %if.then.15

if.then.15:                                       ; preds = %land.lhs.true
  %23 = load i64, i64* %list, align 8
  store i64 %23, i64* %tail, align 8
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.23, %if.then.15
  %24 = load i64, i64* %tail, align 8
  %sub17 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub17 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr19 = bitcast %union.anon.11* %u18 to i64*
  %27 = load i64, i64* %cdr19, align 8
  %28 = load i64, i64* %rest, align 8
  %cmp20 = icmp eq i64 %27, %28
  %lnot = xor i1 %cmp20, true
  br i1 %lnot, label %for.body.22, label %for.end.27

for.body.22:                                      ; preds = %for.cond.16
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.body.22
  %29 = load i64, i64* %tail, align 8
  %sub24 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub24 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr26 = bitcast %union.anon.11* %u25 to i64*
  %32 = load i64, i64* %cdr26, align 8
  store i64 %32, i64* %tail, align 8
  br label %for.cond.16

for.end.27:                                       ; preds = %for.cond.16
  %33 = load i64, i64* %tail, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCDR(i64 %33, i64 %call28)
  %34 = load i64, i64* %rest, align 8
  %35 = load i64, i64* %list, align 8
  %call29 = call i64 @nconc2(i64 %34, i64 %35)
  store i64 %call29, i64* %list, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %for.end.27, %land.lhs.true, %for.end
  %36 = load i64, i64* %list, align 8
  ret i64 %36
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_list_1(i64 %window, i64 %minibuf, i64 %all_frames) #0 {
entry:
  %window.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %1 = load i64, i64* %minibuf.addr, align 8
  %2 = load i64, i64* %all_frames.addr, align 8
  %call = call i64 @window_list_1(i64 %0, i64 %1, i64 %2)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define void @check_all_windows() #0 {
entry:
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %call2 = call i64 @window_loop(i32 4, i64 %call, i1 zeroext true, i64 %call1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @window_loop(i32 %type, i64 %obj, i1 zeroext %mini, i64 %frames) #0 {
entry:
  %retval = alloca i64, align 8
  %type.addr = alloca i32, align 4
  %obj.addr = alloca i64, align 8
  %mini.addr = alloca i8, align 1
  %frames.addr = alloca i64, align 8
  %window = alloca i64, align 8
  %windows = alloca i64, align 8
  %best_window = alloca i64, align 8
  %frame_arg = alloca i64, align 8
  %frame_best_window_flag = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %w = alloca %struct.window*, align 8
  %b = alloca %struct.buffer*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i64 %obj, i64* %obj.addr, align 8
  %frombool = zext i1 %mini to i8
  store i8 %frombool, i8* %mini.addr, align 1
  store i64 %frames, i64* %frames.addr, align 8
  store i8 0, i8* %frame_best_window_flag, align 1
  %0 = load i64, i64* %frames.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %frames.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  br label %if.end.8

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %frames.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call1
  br i1 %cmp, label %if.then.2, label %if.else.7

if.then.2:                                        ; preds = %if.else
  %5 = load i64, i64* @selected_frame, align 8
  %call3 = call zeroext i1 @FRAMEP(i64 %5)
  br i1 %call3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.2
  %6 = load i64, i64* @selected_frame, align 8
  %sub4 = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub4 to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 61
  %9 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp5 = icmp ne %struct.terminal* %9, null
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %10 = load i64, i64* @selected_frame, align 8
  %sub6 = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub6 to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.2
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %13, %cond.true
  %cond = phi %struct.frame* [ %12, %cond.true ], [ null, %13 ]
  store %struct.frame* %cond, %struct.frame** %f, align 8
  br label %if.end

if.else.7:                                        ; preds = %if.else
  store %struct.frame* null, %struct.frame** %f, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.7, %cond.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool = icmp ne %struct.frame* %14, null
  br i1 %tobool, label %if.then.9, label %if.else.11

if.then.9:                                        ; preds = %if.end.8
  %call10 = call i64 @builtin_lisp_symbol(i32 598)
  store i64 %call10, i64* %frame_arg, align 8
  br label %if.end.22

if.else.11:                                       ; preds = %if.end.8
  %15 = load i64, i64* %frames.addr, align 8
  %cmp12 = icmp eq i64 %15, 2
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else.11
  %16 = load i64, i64* %frames.addr, align 8
  store i64 %16, i64* %frame_arg, align 8
  br label %if.end.21

if.else.14:                                       ; preds = %if.else.11
  %17 = load i64, i64* %frames.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 1005)
  %cmp16 = icmp eq i64 %17, %call15
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %if.else.14
  %18 = load i64, i64* %frames.addr, align 8
  store i64 %18, i64* %frame_arg, align 8
  br label %if.end.20

if.else.18:                                       ; preds = %if.else.14
  %call19 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call19, i64* %frame_arg, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.18, %if.then.17
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.then.13
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.then.9
  %19 = load i64, i64* %obj.addr, align 8
  %call23 = call zeroext i1 @WINDOWP(i64 %19)
  br i1 %call23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %if.end.22
  %20 = load i64, i64* %obj.addr, align 8
  store i64 %20, i64* %window, align 8
  br label %if.end.41

if.else.25:                                       ; preds = %if.end.22
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool26 = icmp ne %struct.frame* %21, null
  br i1 %tobool26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.else.25
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 6
  %23 = load i64, i64* %selected_window, align 8
  store i64 %23, i64* %window, align 8
  br label %if.end.40

if.else.28:                                       ; preds = %if.else.25
  %24 = load i64, i64* @selected_frame, align 8
  %call29 = call zeroext i1 @FRAMEP(i64 %24)
  br i1 %call29, label %land.lhs.true.30, label %cond.false.36

land.lhs.true.30:                                 ; preds = %if.else.28
  %25 = load i64, i64* @selected_frame, align 8
  %sub31 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub31 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  %terminal32 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 61
  %28 = load %struct.terminal*, %struct.terminal** %terminal32, align 8
  %cmp33 = icmp ne %struct.terminal* %28, null
  br i1 %cmp33, label %cond.true.34, label %cond.false.36

cond.true.34:                                     ; preds = %land.lhs.true.30
  %29 = load i64, i64* @selected_frame, align 8
  %sub35 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub35 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  br label %cond.end.37

cond.false.36:                                    ; preds = %land.lhs.true.30, %if.else.28
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.37

cond.end.37:                                      ; preds = %32, %cond.true.34
  %cond38 = phi %struct.frame* [ %31, %cond.true.34 ], [ null, %32 ]
  %selected_window39 = getelementptr inbounds %struct.frame, %struct.frame* %cond38, i32 0, i32 6
  %33 = load i64, i64* %selected_window39, align 8
  store i64 %33, i64* %window, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %cond.end.37, %if.then.27
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.24
  %34 = load i64, i64* %window, align 8
  %35 = load i8, i8* %mini.addr, align 1
  %tobool42 = trunc i8 %35 to i1
  br i1 %tobool42, label %cond.true.43, label %cond.false.45

cond.true.43:                                     ; preds = %if.end.41
  %call44 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.47

cond.false.45:                                    ; preds = %if.end.41
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.45, %cond.true.43
  %cond48 = phi i64 [ %call44, %cond.true.43 ], [ %call46, %cond.false.45 ]
  %36 = load i64, i64* %frame_arg, align 8
  %call49 = call i64 @window_list_1(i64 %34, i64 %cond48, i64 %36)
  store i64 %call49, i64* %windows, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call50, i64* %best_window, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.47
  %37 = load i64, i64* %windows, align 8
  %and = and i64 %37, 7
  %conv = trunc i64 %and to i32
  %cmp51 = icmp eq i32 %conv, 3
  br i1 %cmp51, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i64, i64* %windows, align 8
  %sub53 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub53 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 0
  %41 = load i64, i64* %car, align 8
  store i64 %41, i64* %window, align 8
  %42 = load i64, i64* %window, align 8
  %call54 = call %struct.window* @XWINDOW(i64 %42)
  store %struct.window* %call54, %struct.window** %w, align 8
  %43 = load %struct.window*, %struct.window** %w, align 8
  %mini55 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 67
  %bf.load = load i16, i16* %mini55, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %lor.lhs.false, label %if.then.64

lor.lhs.false:                                    ; preds = %for.body
  %44 = load i32, i32* %type.addr, align 4
  %cmp56 = icmp eq i32 %44, 2
  br i1 %cmp56, label %if.then.64, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false
  %45 = load i8, i8* %mini.addr, align 1
  %tobool59 = trunc i8 %45 to i1
  br i1 %tobool59, label %land.lhs.true.61, label %if.end.173

land.lhs.true.61:                                 ; preds = %lor.lhs.false.58
  %46 = load i64, i64* @minibuf_level, align 8
  %cmp62 = icmp sgt i64 %46, 0
  br i1 %cmp62, label %if.then.64, label %if.end.173

if.then.64:                                       ; preds = %land.lhs.true.61, %lor.lhs.false, %for.body
  %47 = load i32, i32* %type.addr, align 4
  switch i32 %47, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.95
    i32 3, label %sw.bb.115
    i32 4, label %sw.bb.127
    i32 0, label %sw.bb.172
  ]

sw.bb:                                            ; preds = %if.then.64
  %48 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 10
  %49 = load i64, i64* %contents, align 8
  %50 = load i64, i64* %obj.addr, align 8
  %cmp65 = icmp eq i64 %49, %50
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.94

land.lhs.true.67:                                 ; preds = %sw.bb
  %51 = load %struct.window*, %struct.window** %w, align 8
  %mini68 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 67
  %bf.load69 = load i16, i16* %mini68, align 4
  %bf.clear70 = and i16 %bf.load69, 1
  %bf.cast71 = trunc i16 %bf.clear70 to i1
  br i1 %bf.cast71, label %lor.lhs.false.72, label %if.then.75

lor.lhs.false.72:                                 ; preds = %land.lhs.true.67
  %52 = load i64, i64* %window, align 8
  %53 = load i64, i64* @minibuf_window, align 8
  %cmp73 = icmp eq i64 %52, %53
  br i1 %cmp73, label %if.then.75, label %if.end.94

if.then.75:                                       ; preds = %lor.lhs.false.72, %land.lhs.true.67
  %54 = load i64, i64* %window, align 8
  %55 = load i64, i64* @selected_window, align 8
  %cmp76 = icmp eq i64 %54, %55
  br i1 %cmp76, label %if.then.78, label %if.else.79

if.then.78:                                       ; preds = %if.then.75
  %56 = load i64, i64* %window, align 8
  store i64 %56, i64* %retval
  br label %return

if.else.79:                                       ; preds = %if.then.75
  %57 = load i64, i64* %window, align 8
  %call80 = call %struct.window* @XWINDOW(i64 %57)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call80, i32 0, i32 1
  %58 = load i64, i64* %frame, align 8
  %59 = load i64, i64* @selected_frame, align 8
  %cmp81 = icmp eq i64 %58, %59
  br i1 %cmp81, label %land.lhs.true.83, label %if.else.86

land.lhs.true.83:                                 ; preds = %if.else.79
  %60 = load i8, i8* %frame_best_window_flag, align 1
  %tobool84 = trunc i8 %60 to i1
  br i1 %tobool84, label %if.else.86, label %if.then.85

if.then.85:                                       ; preds = %land.lhs.true.83
  %61 = load i64, i64* %window, align 8
  store i64 %61, i64* %best_window, align 8
  store i8 1, i8* %frame_best_window_flag, align 1
  br label %if.end.92

if.else.86:                                       ; preds = %land.lhs.true.83, %if.else.79
  %62 = load i64, i64* %best_window, align 8
  %call87 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp88 = icmp eq i64 %62, %call87
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.else.86
  %63 = load i64, i64* %window, align 8
  store i64 %63, i64* %best_window, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.90, %if.else.86
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.then.85
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %lor.lhs.false.72, %sw.bb
  br label %sw.epilog

sw.bb.95:                                         ; preds = %if.then.64
  %64 = load %struct.window*, %struct.window** %w, align 8
  %contents96 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 10
  %65 = load i64, i64* %contents96, align 8
  %66 = load i64, i64* %obj.addr, align 8
  %cmp97 = icmp eq i64 %65, %66
  br i1 %cmp97, label %if.then.99, label %if.end.114

if.then.99:                                       ; preds = %sw.bb.95
  %67 = load %struct.window*, %struct.window** %w, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_dedicated(%struct.window* %67, i64 %call100)
  %68 = load i64, i64* %window, align 8
  %69 = load %struct.window*, %struct.window** %w, align 8
  %contents101 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 10
  %70 = load i64, i64* %contents101, align 8
  %call102 = call i64 @other_buffer_safely(i64 %70)
  call void @set_window_buffer(i64 %68, i64 %call102, i1 zeroext false, i1 zeroext false)
  %71 = load i64, i64* %window, align 8
  %72 = load i64, i64* @selected_window, align 8
  %cmp103 = icmp eq i64 %71, %72
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.113

land.lhs.true.105:                                ; preds = %if.then.99
  %73 = load %struct.window*, %struct.window** %w, align 8
  %contents106 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 10
  %74 = load i64, i64* %contents106, align 8
  %call107 = call %struct.buffer* @XBUFFER(i64 %74)
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp108 = icmp eq %struct.buffer* %call107, %75
  br i1 %cmp108, label %if.then.110, label %if.end.113

if.then.110:                                      ; preds = %land.lhs.true.105
  %76 = load %struct.window*, %struct.window** %w, align 8
  %contents111 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 10
  %77 = load i64, i64* %contents111, align 8
  %call112 = call i64 @Fset_buffer(i64 %77)
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.110, %land.lhs.true.105, %if.then.99
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %sw.bb.95
  br label %sw.epilog

sw.bb.115:                                        ; preds = %if.then.64
  %78 = load %struct.window*, %struct.window** %w, align 8
  %contents116 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 10
  %79 = load i64, i64* %contents116, align 8
  %80 = load i64, i64* %obj.addr, align 8
  %cmp117 = icmp eq i64 %79, %80
  br i1 %cmp117, label %if.then.119, label %if.end.126

if.then.119:                                      ; preds = %sw.bb.115
  %81 = load i64, i64* %window, align 8
  call void @mark_window_display_accurate(i64 %81, i1 zeroext false)
  %82 = load %struct.window*, %struct.window** %w, align 8
  %update_mode_line = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 67
  %bf.load120 = load i16, i16* %update_mode_line, align 4
  %bf.clear121 = and i16 %bf.load120, -5
  %bf.set = or i16 %bf.clear121, 4
  store i16 %bf.set, i16* %update_mode_line, align 4
  %83 = load i64, i64* %obj.addr, align 8
  %call122 = call %struct.buffer* @XBUFFER(i64 %83)
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %call122, i32 0, i32 94
  %bf.load123 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear124 = and i8 %bf.load123, -2
  %bf.set125 = or i8 %bf.clear124, 1
  store i8 %bf.set125, i8* %prevent_redisplay_optimizations_p, align 8
  store i32 27, i32* @update_mode_lines, align 4
  %84 = load i64, i64* %window, align 8
  store i64 %84, i64* %best_window, align 8
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.119, %sw.bb.115
  br label %sw.epilog

sw.bb.127:                                        ; preds = %if.then.64
  %85 = load %struct.window*, %struct.window** %w, align 8
  %contents128 = getelementptr inbounds %struct.window, %struct.window* %85, i32 0, i32 10
  %86 = load i64, i64* %contents128, align 8
  %call129 = call zeroext i1 @BUFFERP(i64 %86)
  br i1 %call129, label %if.then.130, label %if.end.171

if.then.130:                                      ; preds = %sw.bb.127
  %87 = load %struct.window*, %struct.window** %w, align 8
  %contents131 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 10
  %88 = load i64, i64* %contents131, align 8
  %call132 = call %struct.buffer* @XBUFFER(i64 %88)
  store %struct.buffer* %call132, %struct.buffer** %b, align 8
  %89 = load %struct.buffer*, %struct.buffer** %b, align 8
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %89, i32 0, i32 1
  %90 = load i64, i64* %name_, align 8
  %call133 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp134 = icmp eq i64 %90, %call133
  br i1 %cmp134, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %if.then.130
  call void @emacs_abort() #5
  unreachable

if.end.137:                                       ; preds = %if.then.130
  %91 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 11
  %92 = load i64, i64* %start, align 8
  %and138 = and i64 %92, 7
  %conv139 = trunc i64 %and138 to i32
  %cmp140 = icmp eq i32 %conv139, 1
  br i1 %cmp140, label %land.lhs.true.142, label %if.then.152

land.lhs.true.142:                                ; preds = %if.end.137
  %93 = load %struct.window*, %struct.window** %w, align 8
  %start143 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 11
  %94 = load i64, i64* %start143, align 8
  %call144 = call i32 @XMISCTYPE(i64 %94)
  %cmp145 = icmp eq i32 %call144, 24236
  br i1 %cmp145, label %lor.lhs.false.147, label %if.then.152

lor.lhs.false.147:                                ; preds = %land.lhs.true.142
  %95 = load %struct.window*, %struct.window** %w, align 8
  %start148 = getelementptr inbounds %struct.window, %struct.window* %95, i32 0, i32 11
  %96 = load i64, i64* %start148, align 8
  %call149 = call %struct.Lisp_Marker* @XMARKER(i64 %96)
  %buffer = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call149, i32 0, i32 1
  %97 = load %struct.buffer*, %struct.buffer** %buffer, align 8
  %98 = load %struct.buffer*, %struct.buffer** %b, align 8
  %cmp150 = icmp ne %struct.buffer* %97, %98
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %lor.lhs.false.147, %land.lhs.true.142, %if.end.137
  call void @emacs_abort() #5
  unreachable

if.end.153:                                       ; preds = %lor.lhs.false.147
  %99 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 12
  %100 = load i64, i64* %pointm, align 8
  %and154 = and i64 %100, 7
  %conv155 = trunc i64 %and154 to i32
  %cmp156 = icmp eq i32 %conv155, 1
  br i1 %cmp156, label %land.lhs.true.158, label %if.then.169

land.lhs.true.158:                                ; preds = %if.end.153
  %101 = load %struct.window*, %struct.window** %w, align 8
  %pointm159 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 12
  %102 = load i64, i64* %pointm159, align 8
  %call160 = call i32 @XMISCTYPE(i64 %102)
  %cmp161 = icmp eq i32 %call160, 24236
  br i1 %cmp161, label %lor.lhs.false.163, label %if.then.169

lor.lhs.false.163:                                ; preds = %land.lhs.true.158
  %103 = load %struct.window*, %struct.window** %w, align 8
  %pointm164 = getelementptr inbounds %struct.window, %struct.window* %103, i32 0, i32 12
  %104 = load i64, i64* %pointm164, align 8
  %call165 = call %struct.Lisp_Marker* @XMARKER(i64 %104)
  %buffer166 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call165, i32 0, i32 1
  %105 = load %struct.buffer*, %struct.buffer** %buffer166, align 8
  %106 = load %struct.buffer*, %struct.buffer** %b, align 8
  %cmp167 = icmp ne %struct.buffer* %105, %106
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %lor.lhs.false.163, %land.lhs.true.158, %if.end.153
  call void @emacs_abort() #5
  unreachable

if.end.170:                                       ; preds = %lor.lhs.false.163
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %sw.bb.127
  br label %sw.epilog

sw.bb.172:                                        ; preds = %if.then.64
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then.64, %sw.bb.172, %if.end.171, %if.end.126, %if.end.114, %if.end.94
  br label %if.end.173

if.end.173:                                       ; preds = %sw.epilog, %land.lhs.true.61, %lor.lhs.false.58
  br label %for.inc

for.inc:                                          ; preds = %if.end.173
  %107 = load i64, i64* %windows, align 8
  %sub174 = sub nsw i64 %107, 3
  %108 = inttoptr i64 %sub174 to i8*
  %109 = bitcast i8* %108 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %109, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %110 = load i64, i64* %cdr, align 8
  store i64 %110, i64* %windows, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %111 = load i64, i64* %best_window, align 8
  store i64 %111, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.78
  %112 = load i64, i64* %retval
  ret i64 %112
}

; Function Attrs: nounwind uwtable
define i64 @Fget_buffer_window(i64 %buffer_or_name, i64 %all_frames) #0 {
entry:
  %retval = alloca i64, align 8
  %buffer_or_name.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  %buffer = alloca i64, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %0 = load i64, i64* %buffer_or_name.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i64 @Fcurrent_buffer()
  store i64 %call1, i64* %buffer, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %buffer_or_name.addr, align 8
  %call2 = call i64 @Fget_buffer(i64 %1)
  store i64 %call2, i64* %buffer, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i64, i64* %buffer, align 8
  %call3 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call3, label %if.then.4, label %if.else.6

if.then.4:                                        ; preds = %if.end
  %3 = load i64, i64* %buffer, align 8
  %4 = load i64, i64* %all_frames.addr, align 8
  %call5 = call i64 @window_loop(i32 1, i64 %3, i1 zeroext true, i64 %4)
  store i64 %call5, i64* %retval
  br label %return

if.else.6:                                        ; preds = %if.end
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %retval
  br label %return

return:                                           ; preds = %if.else.6, %if.then.4
  %5 = load i64, i64* %retval
  ret i64 %5
}

declare i64 @Fcurrent_buffer() #1

declare i64 @Fget_buffer(i64) #1

; Function Attrs: nounwind readnone uwtable
define i64 @Fwindow__sanitize_window_sizes(i64 %frame, i64 %horizontal) #3 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @sanitize_window_sizes(i64 %frame, i64 %horizontal) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 1032)
  %0 = load i64, i64* %frame.addr, align 8
  %1 = load i64, i64* %horizontal.addr, align 8
  %call1 = call i64 @call2(i64 %call, i64 %0, i64 %1)
  ret i64 %call1
}

declare i64 @call2(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fdelete_other_windows_internal(i64 %window, i64 %root) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %root.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %r = alloca %struct.window*, align 8
  %s = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %sibling = alloca i64, align 8
  %pwindow = alloca i64, align 8
  %swindow = alloca i64, align 8
  %delta = alloca i64, align 8
  %startpos = alloca i64, align 8
  %startbyte = alloca i64, align 8
  %top = alloca i32, align 4
  %new_top = alloca i32, align 4
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  %resize_failed = alloca i8, align 1
  %pos = alloca %struct.position, align 8
  %obuf = alloca %struct.buffer*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %root, i64* %root.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %2 = bitcast %struct.window* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %window.addr, align 8
  %3 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  store %struct.frame* %6, %struct.frame** %f, align 8
  %7 = load i64, i64* %root.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %7, %call2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 5
  %9 = load i64, i64* %root_window, align 8
  store i64 %9, i64* %root.addr, align 8
  %10 = load i64, i64* %root.addr, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %10)
  store %struct.window* %call3, %struct.window** %r, align 8
  br label %if.end.16

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %root.addr, align 8
  %call4 = call %struct.window* @decode_valid_window(i64 %11)
  store %struct.window* %call4, %struct.window** %r, align 8
  %12 = load i64, i64* %window.addr, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %12)
  %parent = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 4
  %13 = load i64, i64* %parent, align 8
  store i64 %13, i64* %pwindow, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %14 = load i64, i64* %pwindow, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %14, %call6
  %lnot = xor i1 %cmp7, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i64, i64* %pwindow, align 8
  %16 = load i64, i64* %root.addr, align 8
  %cmp8 = icmp eq i64 %15, %16
  br i1 %cmp8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %while.body
  br label %while.end

if.else.10:                                       ; preds = %while.body
  %17 = load i64, i64* %pwindow, align 8
  %call11 = call %struct.window* @XWINDOW(i64 %17)
  %parent12 = getelementptr inbounds %struct.window, %struct.window* %call11, i32 0, i32 4
  %18 = load i64, i64* %parent12, align 8
  store i64 %18, i64* %pwindow, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.10
  br label %while.cond

while.end:                                        ; preds = %if.then.9, %while.cond
  %19 = load i64, i64* %pwindow, align 8
  %20 = load i64, i64* %root.addr, align 8
  %cmp13 = icmp eq i64 %19, %20
  br i1 %cmp13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %while.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i32 0, i32 0)) #5
  unreachable

if.end.15:                                        ; preds = %while.end
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then
  %21 = load i64, i64* %window.addr, align 8
  %22 = load i64, i64* %root.addr, align 8
  %cmp17 = icmp eq i64 %21, %22
  br i1 %cmp17, label %if.then.18, label %if.else.20

if.then.18:                                       ; preds = %if.end.16
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call19, i64* %retval
  br label %return

if.else.20:                                       ; preds = %if.end.16
  %23 = load %struct.window*, %struct.window** %w, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.else.20
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i32 0, i32 0)) #5
  unreachable

if.end.22:                                        ; preds = %if.else.20
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22
  %24 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 10
  %25 = load i64, i64* %contents, align 8
  %call24 = call zeroext i1 @BUFFERP(i64 %25)
  br i1 %call24, label %if.then.25, label %if.else.44

if.then.25:                                       ; preds = %if.end.23
  %26 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 11
  %27 = load i64, i64* %start, align 8
  %call26 = call i64 @marker_position(i64 %27)
  store i64 %call26, i64* %startpos, align 8
  %28 = load %struct.window*, %struct.window** %w, align 8
  %start27 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 11
  %29 = load i64, i64* %start27, align 8
  %call28 = call i64 @marker_byte_position(i64 %29)
  store i64 %call28, i64* %startbyte, align 8
  %30 = load %struct.window*, %struct.window** %w, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 33
  %31 = load i32, i32* %top_line, align 4
  %32 = load %struct.window*, %struct.window** %w, align 8
  %frame29 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 1
  %33 = load i64, i64* %frame29, align 8
  %sub30 = sub nsw i64 %33, 5
  %34 = inttoptr i64 %sub30 to i8*
  %35 = bitcast i8* %34 to %struct.frame*
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 57
  %36 = load i32, i32* %menu_bar_lines, align 4
  %37 = load %struct.window*, %struct.window** %w, align 8
  %frame31 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 1
  %38 = load i64, i64* %frame31, align 8
  %sub32 = sub nsw i64 %38, 5
  %39 = inttoptr i64 %sub32 to i8*
  %40 = bitcast i8* %39 to %struct.frame*
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 27
  %41 = load i32, i32* %tool_bar_lines, align 4
  %add = add nsw i32 %36, %41
  %sub33 = sub nsw i32 %31, %add
  store i32 %sub33, i32* %top, align 4
  %42 = load i64, i64* %window.addr, align 8
  %43 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 6
  %44 = load i64, i64* %selected_window, align 8
  %cmp34 = icmp eq i64 %42, %44
  br i1 %cmp34, label %if.end.43, label %if.then.35

if.then.35:                                       ; preds = %if.then.25
  %45 = load i64, i64* @selected_frame, align 8
  %46 = load %struct.window*, %struct.window** %w, align 8
  %frame36 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 1
  %47 = load i64, i64* %frame36, align 8
  %cmp37 = icmp eq i64 %45, %47
  br i1 %cmp37, label %if.then.38, label %if.else.41

if.then.38:                                       ; preds = %if.then.35
  %48 = load i64, i64* %window.addr, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 0)
  %call40 = call i64 @Fselect_window(i64 %48, i64 %call39)
  br label %if.end.42

if.else.41:                                       ; preds = %if.then.35
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  %50 = load i64, i64* %window.addr, align 8
  call void @fset_selected_window(%struct.frame* %49, i64 %50)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.then.38
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.25
  br label %if.end.76

if.else.44:                                       ; preds = %if.end.23
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window45 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 6
  %52 = load i64, i64* %selected_window45, align 8
  store i64 %52, i64* %swindow, align 8
  br label %while.body.47

while.body.47:                                    ; preds = %if.else.44, %if.end.63
  %53 = load i64, i64* %swindow, align 8
  store i64 %53, i64* %pwindow, align 8
  br label %while.cond.48

while.cond.48:                                    ; preds = %while.body.53, %while.body.47
  %54 = load i64, i64* %pwindow, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %54, %call49
  br i1 %cmp50, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond.48
  %55 = load i64, i64* %window.addr, align 8
  %56 = load i64, i64* %pwindow, align 8
  %cmp51 = icmp eq i64 %55, %56
  %lnot52 = xor i1 %cmp51, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.48
  %57 = phi i1 [ false, %while.cond.48 ], [ %lnot52, %land.rhs ]
  br i1 %57, label %while.body.53, label %while.end.56

while.body.53:                                    ; preds = %land.end
  %58 = load i64, i64* %pwindow, align 8
  %call54 = call %struct.window* @XWINDOW(i64 %58)
  %parent55 = getelementptr inbounds %struct.window, %struct.window* %call54, i32 0, i32 4
  %59 = load i64, i64* %parent55, align 8
  store i64 %59, i64* %pwindow, align 8
  br label %while.cond.48

while.end.56:                                     ; preds = %land.end
  %60 = load i64, i64* %window.addr, align 8
  %61 = load i64, i64* %pwindow, align 8
  %cmp57 = icmp eq i64 %60, %61
  br i1 %cmp57, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %while.end.56
  br label %while.end.64

if.else.59:                                       ; preds = %while.end.56
  %62 = load i64, i64* %swindow, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 598)
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %call62 = call i64 @Fprevious_window(i64 %62, i64 %call60, i64 %call61)
  store i64 %call62, i64* %swindow, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.59
  br label %while.body.47

while.end.64:                                     ; preds = %if.then.58
  %63 = load i64, i64* %swindow, align 8
  %64 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window65 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 6
  %65 = load i64, i64* %selected_window65, align 8
  %cmp66 = icmp eq i64 %63, %65
  br i1 %cmp66, label %if.end.75, label %if.then.67

if.then.67:                                       ; preds = %while.end.64
  %66 = load i64, i64* @selected_frame, align 8
  %67 = load %struct.window*, %struct.window** %w, align 8
  %frame68 = getelementptr inbounds %struct.window, %struct.window* %67, i32 0, i32 1
  %68 = load i64, i64* %frame68, align 8
  %cmp69 = icmp eq i64 %66, %68
  br i1 %cmp69, label %if.then.70, label %if.else.73

if.then.70:                                       ; preds = %if.then.67
  %69 = load i64, i64* %swindow, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  %call72 = call i64 @Fselect_window(i64 %69, i64 %call71)
  br label %if.end.74

if.else.73:                                       ; preds = %if.then.67
  %70 = load %struct.frame*, %struct.frame** %f, align 8
  %71 = load i64, i64* %swindow, align 8
  call void @fset_selected_window(%struct.frame* %70, i64 %71)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.73, %if.then.70
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %while.end.64
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.43
  call void @block_input()
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 26
  %73 = bitcast i48* %output_method to i64*
  %bf.load77 = load i64, i64* %73, align 8
  %bf.lshr = lshr i64 %bf.load77, 23
  %bf.clear78 = and i64 %bf.lshr, 7
  %bf.cast79 = trunc i64 %bf.clear78 to i32
  %cmp80 = icmp eq i32 %bf.cast79, 0
  br i1 %cmp80, label %if.end.94, label %if.then.81

if.then.81:                                       ; preds = %if.end.76
  %74 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method82 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 26
  %75 = bitcast i48* %output_method82 to i64*
  %bf.load83 = load i64, i64* %75, align 8
  %bf.lshr84 = lshr i64 %bf.load83, 23
  %bf.clear85 = and i64 %bf.lshr84, 7
  %bf.cast86 = trunc i64 %bf.clear85 to i32
  %cmp87 = icmp eq i32 %bf.cast86, 2
  br i1 %cmp87, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.81
  %76 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %77 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %77, i32 0, i32 44
  %78 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %78, i32 0, i32 25
  br label %cond.end

cond.false:                                       ; preds = %if.then.81
  %79 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data88 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data88 to %struct.tty_output**
  %80 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info89 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %80, i32 0, i32 0
  %81 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info89, align 8
  %mouse_highlight90 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %81, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true ], [ %mouse_highlight90, %cond.false ]
  store %struct.Mouse_HLInfo* %cond, %struct.Mouse_HLInfo** %hlinfo, align 8
  %82 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_window = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %82, i32 0, i32 6
  %83 = load i64, i64* %mouse_face_window, align 8
  %84 = load i64, i64* %window.addr, align 8
  %cmp91 = icmp eq i64 %83, %84
  br i1 %cmp91, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %cond.end
  %85 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  call void @reset_mouse_highlight(%struct.Mouse_HLInfo* %85)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.92, %cond.end
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.end.76
  %86 = load %struct.window*, %struct.window** %r, align 8
  call void @free_window_matrices(%struct.window* %86)
  %87 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %87)
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call95, i64* @Vwindow_list, align 8
  %88 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 26
  %89 = bitcast i48* %window_sizes_changed to i64*
  %bf.load96 = load i64, i64* %89, align 8
  %bf.clear97 = and i64 %bf.load96, -524289
  %bf.set = or i64 %bf.clear97, 524288
  store i64 %bf.set, i64* %89, align 8
  store i8 0, i8* %resize_failed, align 1
  %90 = load %struct.window*, %struct.window** %w, align 8
  %contents98 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 10
  %91 = load i64, i64* %contents98, align 8
  %call99 = call zeroext i1 @BUFFERP(i64 %91)
  br i1 %call99, label %if.end.164, label %if.then.100

if.then.100:                                      ; preds = %if.end.94
  %92 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 35
  %93 = load i32, i32* %pixel_height, align 4
  %94 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height101 = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 35
  %95 = load i32, i32* %pixel_height101, align 4
  %sub102 = sub nsw i32 %93, %95
  %conv = sext i32 %sub102 to i64
  %shl = shl i64 %conv, 2
  %add103 = add i64 %shl, 2
  store i64 %add103, i64* %delta, align 8
  %96 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %96, i32 0, i32 31
  %97 = load i32, i32* %pixel_top, align 4
  %98 = load %struct.window*, %struct.window** %w, align 8
  %pixel_top104 = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 31
  store i32 %97, i32* %pixel_top104, align 4
  %99 = load %struct.window*, %struct.window** %r, align 8
  %top_line105 = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 33
  %100 = load i32, i32* %top_line105, align 4
  %101 = load %struct.window*, %struct.window** %w, align 8
  %top_line106 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 33
  store i32 %100, i32* %top_line106, align 4
  %102 = load i64, i64* %window.addr, align 8
  %103 = load i64, i64* %delta, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %call108 = call i64 @builtin_lisp_symbol(i32 0)
  %call109 = call i64 @builtin_lisp_symbol(i32 901)
  %call110 = call i64 @resize_root_window(i64 %102, i64 %103, i64 %call107, i64 %call108, i64 %call109)
  %104 = load %struct.window*, %struct.window** %w, align 8
  %call111 = call zeroext i1 @window_resize_check(%struct.window* %104, i1 zeroext false)
  br i1 %call111, label %if.then.112, label %if.else.116

if.then.112:                                      ; preds = %if.then.100
  %105 = load %struct.window*, %struct.window** %w, align 8
  call void @window_resize_apply(%struct.window* %105, i1 zeroext false)
  %106 = load %struct.window*, %struct.window** %w, align 8
  %frame113 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 1
  %107 = load i64, i64* %frame113, align 8
  %call114 = call i64 @builtin_lisp_symbol(i32 0)
  %call115 = call i64 @window_pixel_to_total(i64 %107, i64 %call114)
  br label %if.end.128

if.else.116:                                      ; preds = %if.then.100
  %108 = load i64, i64* %window.addr, align 8
  %109 = load i64, i64* %delta, align 8
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %call118 = call i64 @builtin_lisp_symbol(i32 901)
  %call119 = call i64 @builtin_lisp_symbol(i32 901)
  %call120 = call i64 @resize_root_window(i64 %108, i64 %109, i64 %call117, i64 %call118, i64 %call119)
  %110 = load %struct.window*, %struct.window** %w, align 8
  %call121 = call zeroext i1 @window_resize_check(%struct.window* %110, i1 zeroext false)
  br i1 %call121, label %if.then.122, label %if.else.126

if.then.122:                                      ; preds = %if.else.116
  %111 = load %struct.window*, %struct.window** %w, align 8
  call void @window_resize_apply(%struct.window* %111, i1 zeroext false)
  %112 = load %struct.window*, %struct.window** %w, align 8
  %frame123 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 1
  %113 = load i64, i64* %frame123, align 8
  %call124 = call i64 @builtin_lisp_symbol(i32 0)
  %call125 = call i64 @window_pixel_to_total(i64 %113, i64 %call124)
  br label %if.end.127

if.else.126:                                      ; preds = %if.else.116
  store i8 1, i8* %resize_failed, align 1
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.126, %if.then.122
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.112
  %114 = load i8, i8* %resize_failed, align 1
  %tobool = trunc i8 %114 to i1
  br i1 %tobool, label %if.end.159, label %if.then.129

if.then.129:                                      ; preds = %if.end.128
  %115 = load %struct.window*, %struct.window** %r, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %115, i32 0, i32 32
  %116 = load i32, i32* %left_col, align 4
  %117 = load %struct.window*, %struct.window** %w, align 8
  %left_col130 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 32
  store i32 %116, i32* %left_col130, align 4
  %118 = load %struct.window*, %struct.window** %r, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %118, i32 0, i32 30
  %119 = load i32, i32* %pixel_left, align 4
  %120 = load %struct.window*, %struct.window** %w, align 8
  %pixel_left131 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 30
  store i32 %119, i32* %pixel_left131, align 4
  %121 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 34
  %122 = load i32, i32* %pixel_width, align 4
  %123 = load %struct.window*, %struct.window** %w, align 8
  %pixel_width132 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 34
  %124 = load i32, i32* %pixel_width132, align 4
  %sub133 = sub nsw i32 %122, %124
  %conv134 = sext i32 %sub133 to i64
  %shl135 = shl i64 %conv134, 2
  %add136 = add i64 %shl135, 2
  store i64 %add136, i64* %delta, align 8
  %125 = load i64, i64* %window.addr, align 8
  %126 = load i64, i64* %delta, align 8
  %call137 = call i64 @builtin_lisp_symbol(i32 901)
  %call138 = call i64 @builtin_lisp_symbol(i32 0)
  %call139 = call i64 @builtin_lisp_symbol(i32 901)
  %call140 = call i64 @resize_root_window(i64 %125, i64 %126, i64 %call137, i64 %call138, i64 %call139)
  %127 = load %struct.window*, %struct.window** %w, align 8
  %call141 = call zeroext i1 @window_resize_check(%struct.window* %127, i1 zeroext true)
  br i1 %call141, label %if.then.142, label %if.else.146

if.then.142:                                      ; preds = %if.then.129
  %128 = load %struct.window*, %struct.window** %w, align 8
  call void @window_resize_apply(%struct.window* %128, i1 zeroext true)
  %129 = load %struct.window*, %struct.window** %w, align 8
  %frame143 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 1
  %130 = load i64, i64* %frame143, align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 901)
  %call145 = call i64 @window_pixel_to_total(i64 %130, i64 %call144)
  br label %if.end.158

if.else.146:                                      ; preds = %if.then.129
  %131 = load i64, i64* %window.addr, align 8
  %132 = load i64, i64* %delta, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 901)
  %call148 = call i64 @builtin_lisp_symbol(i32 901)
  %call149 = call i64 @builtin_lisp_symbol(i32 901)
  %call150 = call i64 @resize_root_window(i64 %131, i64 %132, i64 %call147, i64 %call148, i64 %call149)
  %133 = load %struct.window*, %struct.window** %w, align 8
  %call151 = call zeroext i1 @window_resize_check(%struct.window* %133, i1 zeroext true)
  br i1 %call151, label %if.then.152, label %if.else.156

if.then.152:                                      ; preds = %if.else.146
  %134 = load %struct.window*, %struct.window** %w, align 8
  call void @window_resize_apply(%struct.window* %134, i1 zeroext true)
  %135 = load %struct.window*, %struct.window** %w, align 8
  %frame153 = getelementptr inbounds %struct.window, %struct.window* %135, i32 0, i32 1
  %136 = load i64, i64* %frame153, align 8
  %call154 = call i64 @builtin_lisp_symbol(i32 901)
  %call155 = call i64 @window_pixel_to_total(i64 %136, i64 %call154)
  br label %if.end.157

if.else.156:                                      ; preds = %if.else.146
  store i8 1, i8* %resize_failed, align 1
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.156, %if.then.152
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %if.then.142
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %if.end.128
  %137 = load i8, i8* %resize_failed, align 1
  %tobool160 = trunc i8 %137 to i1
  br i1 %tobool160, label %if.then.161, label %if.end.163

if.then.161:                                      ; preds = %if.end.159
  %138 = load i64, i64* %swindow, align 8
  store i64 %138, i64* %window.addr, align 8
  %139 = load i64, i64* %window.addr, align 8
  %call162 = call %struct.window* @XWINDOW(i64 %139)
  store %struct.window* %call162, %struct.window** %w, align 8
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.161, %if.end.159
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.end.94
  %140 = load %struct.window*, %struct.window** %w, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %140, i32 0, i32 3
  %141 = load i64, i64* %prev, align 8
  %call165 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp166 = icmp eq i64 %141, %call165
  br i1 %cmp166, label %if.else.179, label %if.then.168

if.then.168:                                      ; preds = %if.end.164
  %142 = load %struct.window*, %struct.window** %w, align 8
  %prev169 = getelementptr inbounds %struct.window, %struct.window* %142, i32 0, i32 3
  %143 = load i64, i64* %prev169, align 8
  store i64 %143, i64* %sibling, align 8
  %144 = load i64, i64* %sibling, align 8
  %call170 = call %struct.window* @XWINDOW(i64 %144)
  store %struct.window* %call170, %struct.window** %s, align 8
  %145 = load %struct.window*, %struct.window** %s, align 8
  %146 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %146, i32 0, i32 2
  %147 = load i64, i64* %next, align 8
  call void @wset_next(%struct.window* %145, i64 %147)
  %148 = load %struct.window*, %struct.window** %s, align 8
  %next171 = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 2
  %149 = load i64, i64* %next171, align 8
  %call172 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp173 = icmp eq i64 %149, %call172
  br i1 %cmp173, label %if.end.178, label %if.then.175

if.then.175:                                      ; preds = %if.then.168
  %150 = load %struct.window*, %struct.window** %s, align 8
  %next176 = getelementptr inbounds %struct.window, %struct.window* %150, i32 0, i32 2
  %151 = load i64, i64* %next176, align 8
  %call177 = call %struct.window* @XWINDOW(i64 %151)
  %152 = load i64, i64* %sibling, align 8
  call void @wset_prev(%struct.window* %call177, i64 %152)
  br label %if.end.178

if.end.178:                                       ; preds = %if.then.175, %if.then.168
  br label %if.end.191

if.else.179:                                      ; preds = %if.end.164
  %153 = load %struct.window*, %struct.window** %w, align 8
  %next180 = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 2
  %154 = load i64, i64* %next180, align 8
  store i64 %154, i64* %sibling, align 8
  %155 = load i64, i64* %sibling, align 8
  %call181 = call %struct.window* @XWINDOW(i64 %155)
  store %struct.window* %call181, %struct.window** %s, align 8
  %156 = load %struct.window*, %struct.window** %s, align 8
  %call182 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev(%struct.window* %156, i64 %call182)
  %157 = load %struct.window*, %struct.window** %w, align 8
  %parent183 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 4
  %158 = load i64, i64* %parent183, align 8
  %call184 = call %struct.window* @XWINDOW(i64 %158)
  %159 = load %struct.window*, %struct.window** %w, align 8
  %parent185 = getelementptr inbounds %struct.window, %struct.window* %159, i32 0, i32 4
  %160 = load i64, i64* %parent185, align 8
  %call186 = call %struct.window* @XWINDOW(i64 %160)
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %call186, i32 0, i32 67
  %bf.load187 = load i16, i16* %horizontal, align 4
  %bf.lshr188 = lshr i16 %bf.load187, 1
  %bf.clear189 = and i16 %bf.lshr188, 1
  %bf.cast190 = trunc i16 %bf.clear189 to i1
  %161 = load i64, i64* %sibling, align 8
  call void @wset_combination(%struct.window* %call184, i1 zeroext %bf.cast190, i64 %161)
  br label %if.end.191

if.end.191:                                       ; preds = %if.else.179, %if.end.178
  %162 = load %struct.window*, %struct.window** %r, align 8
  %contents192 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 10
  %163 = load i64, i64* %contents192, align 8
  %call193 = call zeroext i1 @WINDOWP(i64 %163)
  br i1 %call193, label %if.then.194, label %if.end.197

if.then.194:                                      ; preds = %if.end.191
  %164 = load %struct.window*, %struct.window** %r, align 8
  %contents195 = getelementptr inbounds %struct.window, %struct.window* %164, i32 0, i32 10
  %165 = load i64, i64* %contents195, align 8
  call void @delete_all_child_windows(i64 %165)
  %166 = load %struct.window*, %struct.window** %r, align 8
  %call196 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination(%struct.window* %166, i1 zeroext false, i64 %call196)
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.194, %if.end.191
  %167 = load i64, i64* %root.addr, align 8
  %168 = load i64, i64* %window.addr, align 8
  call void @replace_window(i64 %167, i64 %168, i1 zeroext true)
  %169 = load %struct.window*, %struct.window** %w, align 8
  %contents198 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 10
  %170 = load i64, i64* %contents198, align 8
  %call199 = call zeroext i1 @BUFFERP(i64 %170)
  br i1 %call199, label %land.lhs.true, label %if.end.307

land.lhs.true:                                    ; preds = %if.end.197
  %171 = load i8, i8* %resize_failed, align 1
  %tobool201 = trunc i8 %171 to i1
  br i1 %tobool201, label %if.end.307, label %if.then.202

if.then.202:                                      ; preds = %land.lhs.true
  %172 = load %struct.window*, %struct.window** %w, align 8
  %top_line203 = getelementptr inbounds %struct.window, %struct.window* %172, i32 0, i32 33
  %173 = load i32, i32* %top_line203, align 4
  %174 = load %struct.window*, %struct.window** %w, align 8
  %frame204 = getelementptr inbounds %struct.window, %struct.window* %174, i32 0, i32 1
  %175 = load i64, i64* %frame204, align 8
  %sub205 = sub nsw i64 %175, 5
  %176 = inttoptr i64 %sub205 to i8*
  %177 = bitcast i8* %176 to %struct.frame*
  %menu_bar_lines206 = getelementptr inbounds %struct.frame, %struct.frame* %177, i32 0, i32 57
  %178 = load i32, i32* %menu_bar_lines206, align 4
  %179 = load %struct.window*, %struct.window** %w, align 8
  %frame207 = getelementptr inbounds %struct.window, %struct.window* %179, i32 0, i32 1
  %180 = load i64, i64* %frame207, align 8
  %sub208 = sub nsw i64 %180, 5
  %181 = inttoptr i64 %sub208 to i8*
  %182 = bitcast i8* %181 to %struct.frame*
  %tool_bar_lines209 = getelementptr inbounds %struct.frame, %struct.frame* %182, i32 0, i32 27
  %183 = load i32, i32* %tool_bar_lines209, align 4
  %add210 = add nsw i32 %178, %183
  %sub211 = sub nsw i32 %173, %add210
  store i32 %sub211, i32* %new_top, align 4
  %184 = load i32, i32* %new_top, align 4
  %185 = load i32, i32* %top, align 4
  %cmp212 = icmp ne i32 %184, %185
  br i1 %cmp212, label %land.lhs.true.214, label %if.end.306

land.lhs.true.214:                                ; preds = %if.then.202
  %186 = load i64, i64* %startpos, align 8
  %187 = load %struct.window*, %struct.window** %w, align 8
  %contents215 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 10
  %188 = load i64, i64* %contents215, align 8
  %call216 = call %struct.buffer* @XBUFFER(i64 %188)
  %189 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp217 = icmp eq %struct.buffer* %call216, %189
  br i1 %cmp217, label %cond.true.219, label %cond.false.220

cond.true.219:                                    ; preds = %land.lhs.true.214
  %190 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %190, i32 0, i32 77
  %191 = load i64, i64* %begv, align 8
  br label %cond.end.237

cond.false.220:                                   ; preds = %land.lhs.true.214
  %192 = load %struct.window*, %struct.window** %w, align 8
  %contents221 = getelementptr inbounds %struct.window, %struct.window* %192, i32 0, i32 10
  %193 = load i64, i64* %contents221, align 8
  %call222 = call %struct.buffer* @XBUFFER(i64 %193)
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call222, i32 0, i32 46
  %194 = load i64, i64* %begv_marker_, align 8
  %call223 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp224 = icmp eq i64 %194, %call223
  br i1 %cmp224, label %cond.true.226, label %cond.false.230

cond.true.226:                                    ; preds = %cond.false.220
  %195 = load %struct.window*, %struct.window** %w, align 8
  %contents227 = getelementptr inbounds %struct.window, %struct.window* %195, i32 0, i32 10
  %196 = load i64, i64* %contents227, align 8
  %call228 = call %struct.buffer* @XBUFFER(i64 %196)
  %begv229 = getelementptr inbounds %struct.buffer, %struct.buffer* %call228, i32 0, i32 77
  %197 = load i64, i64* %begv229, align 8
  br label %cond.end.235

cond.false.230:                                   ; preds = %cond.false.220
  %198 = load %struct.window*, %struct.window** %w, align 8
  %contents231 = getelementptr inbounds %struct.window, %struct.window* %198, i32 0, i32 10
  %199 = load i64, i64* %contents231, align 8
  %call232 = call %struct.buffer* @XBUFFER(i64 %199)
  %begv_marker_233 = getelementptr inbounds %struct.buffer, %struct.buffer* %call232, i32 0, i32 46
  %200 = load i64, i64* %begv_marker_233, align 8
  %call234 = call i64 @marker_position(i64 %200)
  br label %cond.end.235

cond.end.235:                                     ; preds = %cond.false.230, %cond.true.226
  %cond236 = phi i64 [ %197, %cond.true.226 ], [ %call234, %cond.false.230 ]
  br label %cond.end.237

cond.end.237:                                     ; preds = %cond.end.235, %cond.true.219
  %cond238 = phi i64 [ %191, %cond.true.219 ], [ %cond236, %cond.end.235 ]
  %cmp239 = icmp sge i64 %186, %cond238
  br i1 %cmp239, label %land.lhs.true.241, label %if.end.306

land.lhs.true.241:                                ; preds = %cond.end.237
  %201 = load i64, i64* %startpos, align 8
  %202 = load %struct.window*, %struct.window** %w, align 8
  %contents242 = getelementptr inbounds %struct.window, %struct.window* %202, i32 0, i32 10
  %203 = load i64, i64* %contents242, align 8
  %call243 = call %struct.buffer* @XBUFFER(i64 %203)
  %204 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp244 = icmp eq %struct.buffer* %call243, %204
  br i1 %cmp244, label %cond.true.246, label %cond.false.247

cond.true.246:                                    ; preds = %land.lhs.true.241
  %205 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %205, i32 0, i32 79
  %206 = load i64, i64* %zv, align 8
  br label %cond.end.264

cond.false.247:                                   ; preds = %land.lhs.true.241
  %207 = load %struct.window*, %struct.window** %w, align 8
  %contents248 = getelementptr inbounds %struct.window, %struct.window* %207, i32 0, i32 10
  %208 = load i64, i64* %contents248, align 8
  %call249 = call %struct.buffer* @XBUFFER(i64 %208)
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call249, i32 0, i32 47
  %209 = load i64, i64* %zv_marker_, align 8
  %call250 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp251 = icmp eq i64 %209, %call250
  br i1 %cmp251, label %cond.true.253, label %cond.false.257

cond.true.253:                                    ; preds = %cond.false.247
  %210 = load %struct.window*, %struct.window** %w, align 8
  %contents254 = getelementptr inbounds %struct.window, %struct.window* %210, i32 0, i32 10
  %211 = load i64, i64* %contents254, align 8
  %call255 = call %struct.buffer* @XBUFFER(i64 %211)
  %zv256 = getelementptr inbounds %struct.buffer, %struct.buffer* %call255, i32 0, i32 79
  %212 = load i64, i64* %zv256, align 8
  br label %cond.end.262

cond.false.257:                                   ; preds = %cond.false.247
  %213 = load %struct.window*, %struct.window** %w, align 8
  %contents258 = getelementptr inbounds %struct.window, %struct.window* %213, i32 0, i32 10
  %214 = load i64, i64* %contents258, align 8
  %call259 = call %struct.buffer* @XBUFFER(i64 %214)
  %zv_marker_260 = getelementptr inbounds %struct.buffer, %struct.buffer* %call259, i32 0, i32 47
  %215 = load i64, i64* %zv_marker_260, align 8
  %call261 = call i64 @marker_position(i64 %215)
  br label %cond.end.262

cond.end.262:                                     ; preds = %cond.false.257, %cond.true.253
  %cond263 = phi i64 [ %212, %cond.true.253 ], [ %call261, %cond.false.257 ]
  br label %cond.end.264

cond.end.264:                                     ; preds = %cond.end.262, %cond.true.246
  %cond265 = phi i64 [ %206, %cond.true.246 ], [ %cond263, %cond.end.262 ]
  %cmp266 = icmp sle i64 %201, %cond265
  br i1 %cmp266, label %if.then.268, label %if.end.306

if.then.268:                                      ; preds = %cond.end.264
  %216 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %216, %struct.buffer** %obuf, align 8
  %217 = load %struct.window*, %struct.window** %w, align 8
  %contents269 = getelementptr inbounds %struct.window, %struct.window* %217, i32 0, i32 10
  %218 = load i64, i64* %contents269, align 8
  %call270 = call i64 @Fset_buffer(i64 %218)
  %219 = load i64, i64* %startpos, align 8
  %220 = load i64, i64* %startbyte, align 8
  %221 = load i32, i32* %top, align 4
  %sub271 = sub nsw i32 0, %221
  %conv272 = sext i32 %sub271 to i64
  %222 = load %struct.window*, %struct.window** %w, align 8
  %call273 = call %struct.position* @vmotion(i64 %219, i64 %220, i64 %conv272, %struct.window* %222)
  %223 = bitcast %struct.position* %pos to i8*
  %224 = bitcast %struct.position* %call273 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %223, i8* %224, i64 48, i32 8, i1 false)
  %225 = load %struct.window*, %struct.window** %w, align 8
  %start274 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 11
  %226 = load i64, i64* %start274, align 8
  %227 = load %struct.window*, %struct.window** %w, align 8
  %contents275 = getelementptr inbounds %struct.window, %struct.window* %227, i32 0, i32 10
  %228 = load i64, i64* %contents275, align 8
  %bufpos = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %229 = load i64, i64* %bufpos, align 8
  %bytepos = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %230 = load i64, i64* %bytepos, align 8
  %call276 = call i64 @set_marker_both(i64 %226, i64 %228, i64 %229, i64 %230)
  %231 = load %struct.window*, %struct.window** %w, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %231, i32 0, i32 67
  %bf.load277 = load i16, i16* %window_end_valid, align 4
  %bf.clear278 = and i16 %bf.load277, -8193
  store i16 %bf.clear278, i16* %window_end_valid, align 4
  %bytepos279 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %232 = load i64, i64* %bytepos279, align 8
  %233 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %233, i32 0, i32 78
  %234 = load i64, i64* %begv_byte, align 8
  %cmp280 = icmp eq i64 %232, %234
  br i1 %cmp280, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.268
  %bytepos282 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %235 = load i64, i64* %bytepos282, align 8
  %sub283 = sub nsw i64 %235, 1
  %236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %236, i32 0, i32 73
  %237 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %237, i32 0, i32 3
  %238 = load i64, i64* %gpt_byte, align 8
  %cmp284 = icmp sge i64 %sub283, %238
  br i1 %cmp284, label %cond.true.286, label %cond.false.288

cond.true.286:                                    ; preds = %lor.rhs
  %239 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text287 = getelementptr inbounds %struct.buffer, %struct.buffer* %239, i32 0, i32 73
  %240 = load %struct.buffer_text*, %struct.buffer_text** %text287, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %240, i32 0, i32 5
  %241 = load i64, i64* %gap_size, align 8
  br label %cond.end.289

cond.false.288:                                   ; preds = %lor.rhs
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.288, %cond.true.286
  %cond290 = phi i64 [ %241, %cond.true.286 ], [ 0, %cond.false.288 ]
  %bytepos291 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %242 = load i64, i64* %bytepos291, align 8
  %sub292 = sub nsw i64 %242, 1
  %add293 = add nsw i64 %cond290, %sub292
  %243 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text294 = getelementptr inbounds %struct.buffer, %struct.buffer* %243, i32 0, i32 73
  %244 = load %struct.buffer_text*, %struct.buffer_text** %text294, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %244, i32 0, i32 0
  %245 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %245, i64 %add293
  %add.ptr295 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %246 = load i8, i8* %add.ptr295, align 1
  %conv296 = zext i8 %246 to i32
  %cmp297 = icmp eq i32 %conv296, 10
  br label %lor.end

lor.end:                                          ; preds = %cond.end.289, %if.then.268
  %247 = phi i1 [ true, %if.then.268 ], [ %cmp297, %cond.end.289 ]
  %248 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %248, i32 0, i32 67
  %249 = zext i1 %247 to i16
  %bf.load299 = load i16, i16* %start_at_line_beg, align 4
  %bf.shl = shl i16 %249, 4
  %bf.clear300 = and i16 %bf.load299, -17
  %bf.set301 = or i16 %bf.clear300, %bf.shl
  store i16 %bf.set301, i16* %start_at_line_beg, align 4
  %bf.result.cast = trunc i16 %249 to i8
  %tobool302 = trunc i8 %bf.result.cast to i1
  %250 = load %struct.window*, %struct.window** %w, align 8
  %optional_new_start = getelementptr inbounds %struct.window, %struct.window* %250, i32 0, i32 67
  %bf.load303 = load i16, i16* %optional_new_start, align 4
  %bf.clear304 = and i16 %bf.load303, -65
  %bf.set305 = or i16 %bf.clear304, 64
  store i16 %bf.set305, i16* %optional_new_start, align 4
  %251 = load %struct.buffer*, %struct.buffer** %obuf, align 8
  call void @set_buffer_internal(%struct.buffer* %251)
  br label %if.end.306

if.end.306:                                       ; preds = %lor.end, %cond.end.264, %cond.end.237, %if.then.202
  br label %if.end.307

if.end.307:                                       ; preds = %if.end.306, %land.lhs.true, %if.end.197
  %252 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %252)
  call void @unblock_input()
  %253 = load %struct.frame*, %struct.frame** %f, align 8
  call void @run_window_configuration_change_hook(%struct.frame* %253)
  %call308 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call308, i64* %retval
  br label %return

return:                                           ; preds = %if.end.307, %if.then.18
  %254 = load i64, i64* %retval
  ret i64 %254
}

declare i64 @make_lisp_ptr(i8*, i32) #1

declare void @block_input() #1

declare void @reset_mouse_highlight(%struct.Mouse_HLInfo*) #1

declare void @free_window_matrices(%struct.window*) #1

declare void @fset_redisplay(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal i64 @resize_root_window(i64 %window, i64 %delta, i64 %horizontal, i64 %ignore, i64 %pixelwise) #0 {
entry:
  %window.addr = alloca i64, align 8
  %delta.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %ignore.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %delta, i64* %delta.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  store i64 %ignore, i64* %ignore.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 1030)
  %0 = load i64, i64* %window.addr, align 8
  %1 = load i64, i64* %delta.addr, align 8
  %2 = load i64, i64* %horizontal.addr, align 8
  %3 = load i64, i64* %ignore.addr, align 8
  %4 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @call5(i64 %call, i64 %0, i64 %1, i64 %2, i64 %3, i64 %4)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @window_resize_check(%struct.window* %w, i1 zeroext %horflag) #0 {
entry:
  %retval = alloca i1, align 1
  %w.addr = alloca %struct.window*, align 8
  %horflag.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %c = alloca %struct.window*, align 8
  %remaining_pixels = alloca i32, align 4
  %remaining_pixels61 = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %5)
  br i1 %call, label %land.lhs.true, label %if.else.45

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.else.45, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %8)
  store %struct.window* %call2, %struct.window** %c, align 8
  %9 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %if.then.3
  %10 = load %struct.window*, %struct.window** %c, align 8
  %tobool4 = icmp ne %struct.window* %10, null
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct.window*, %struct.window** %c, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 9
  %12 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %12, 2
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel5 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 9
  %14 = load i64, i64* %new_pixel5, align 8
  %shr6 = ashr i64 %14, 2
  %cmp = icmp ne i64 %shr, %shr6
  br i1 %cmp, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %15 = load %struct.window*, %struct.window** %c, align 8
  %16 = load i8, i8* %horflag.addr, align 1
  %tobool7 = trunc i8 %16 to i1
  %call8 = call zeroext i1 @window_resize_check(%struct.window* %15, i1 zeroext %tobool7)
  br i1 %call8, label %if.end, label %if.then.9

if.then.9:                                        ; preds = %lor.lhs.false, %while.body
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %17 = load %struct.window*, %struct.window** %c, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 2
  %18 = load i64, i64* %next, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %18, %call10
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %19 = load %struct.window*, %struct.window** %c, align 8
  %next12 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 2
  %20 = load i64, i64* %next12, align 8
  %call13 = call %struct.window* @XWINDOW(i64 %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call13, %cond.false ]
  store %struct.window* %cond, %struct.window** %c, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i1 true, i1* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel14 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 9
  %22 = load i64, i64* %new_pixel14, align 8
  %shr15 = ashr i64 %22, 2
  %conv = trunc i64 %shr15 to i32
  store i32 %conv, i32* %remaining_pixels, align 4
  br label %while.cond.16

while.cond.16:                                    ; preds = %cond.end.40, %if.else
  %23 = load %struct.window*, %struct.window** %c, align 8
  %tobool17 = icmp ne %struct.window* %23, null
  br i1 %tobool17, label %while.body.18, label %while.end.42

while.body.18:                                    ; preds = %while.cond.16
  %24 = load %struct.window*, %struct.window** %c, align 8
  %25 = load i8, i8* %horflag.addr, align 1
  %tobool19 = trunc i8 %25 to i1
  %call20 = call zeroext i1 @window_resize_check(%struct.window* %24, i1 zeroext %tobool19)
  br i1 %call20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %while.body.18
  store i1 false, i1* %retval
  br label %return

if.end.22:                                        ; preds = %while.body.18
  %26 = load %struct.window*, %struct.window** %c, align 8
  %new_pixel23 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 9
  %27 = load i64, i64* %new_pixel23, align 8
  %shr24 = ashr i64 %27, 2
  %28 = load i32, i32* %remaining_pixels, align 4
  %conv25 = sext i32 %28 to i64
  %sub26 = sub nsw i64 %conv25, %shr24
  %conv27 = trunc i64 %sub26 to i32
  store i32 %conv27, i32* %remaining_pixels, align 4
  %29 = load i32, i32* %remaining_pixels, align 4
  %cmp28 = icmp slt i32 %29, 0
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.22
  store i1 false, i1* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.22
  %30 = load %struct.window*, %struct.window** %c, align 8
  %next32 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 2
  %31 = load i64, i64* %next32, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %31, %call33
  br i1 %cmp34, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %if.end.31
  br label %cond.end.40

cond.false.37:                                    ; preds = %if.end.31
  %32 = load %struct.window*, %struct.window** %c, align 8
  %next38 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 2
  %33 = load i64, i64* %next38, align 8
  %call39 = call %struct.window* @XWINDOW(i64 %33)
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.37, %cond.true.36
  %cond41 = phi %struct.window* [ null, %cond.true.36 ], [ %call39, %cond.false.37 ]
  store %struct.window* %cond41, %struct.window** %c, align 8
  br label %while.cond.16

while.end.42:                                     ; preds = %while.cond.16
  %34 = load i32, i32* %remaining_pixels, align 4
  %cmp43 = icmp eq i32 %34, 0
  store i1 %cmp43, i1* %retval
  br label %return

if.else.45:                                       ; preds = %land.lhs.true, %entry
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents46 = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 10
  %36 = load i64, i64* %contents46, align 8
  %call47 = call zeroext i1 @WINDOWP(i64 %36)
  br i1 %call47, label %land.lhs.true.49, label %if.else.120

land.lhs.true.49:                                 ; preds = %if.else.45
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal50 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 67
  %bf.load51 = load i16, i16* %horizontal50, align 4
  %bf.lshr52 = lshr i16 %bf.load51, 1
  %bf.clear53 = and i16 %bf.lshr52, 1
  %bf.cast54 = trunc i16 %bf.clear53 to i1
  br i1 %bf.cast54, label %if.then.56, label %if.else.120

if.then.56:                                       ; preds = %land.lhs.true.49
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents57 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 10
  %39 = load i64, i64* %contents57, align 8
  %call58 = call %struct.window* @XWINDOW(i64 %39)
  store %struct.window* %call58, %struct.window** %c, align 8
  %40 = load i8, i8* %horflag.addr, align 1
  %tobool59 = trunc i8 %40 to i1
  br i1 %tobool59, label %if.then.60, label %if.else.94

if.then.60:                                       ; preds = %if.then.56
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel62 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 9
  %42 = load i64, i64* %new_pixel62, align 8
  %shr63 = ashr i64 %42, 2
  %conv64 = trunc i64 %shr63 to i32
  store i32 %conv64, i32* %remaining_pixels61, align 4
  br label %while.cond.65

while.cond.65:                                    ; preds = %cond.end.89, %if.then.60
  %43 = load %struct.window*, %struct.window** %c, align 8
  %tobool66 = icmp ne %struct.window* %43, null
  br i1 %tobool66, label %while.body.67, label %while.end.91

while.body.67:                                    ; preds = %while.cond.65
  %44 = load %struct.window*, %struct.window** %c, align 8
  %45 = load i8, i8* %horflag.addr, align 1
  %tobool68 = trunc i8 %45 to i1
  %call69 = call zeroext i1 @window_resize_check(%struct.window* %44, i1 zeroext %tobool68)
  br i1 %call69, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %while.body.67
  store i1 false, i1* %retval
  br label %return

if.end.71:                                        ; preds = %while.body.67
  %46 = load %struct.window*, %struct.window** %c, align 8
  %new_pixel72 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 9
  %47 = load i64, i64* %new_pixel72, align 8
  %shr73 = ashr i64 %47, 2
  %48 = load i32, i32* %remaining_pixels61, align 4
  %conv74 = sext i32 %48 to i64
  %sub75 = sub nsw i64 %conv74, %shr73
  %conv76 = trunc i64 %sub75 to i32
  store i32 %conv76, i32* %remaining_pixels61, align 4
  %49 = load i32, i32* %remaining_pixels61, align 4
  %cmp77 = icmp slt i32 %49, 0
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.71
  store i1 false, i1* %retval
  br label %return

if.end.80:                                        ; preds = %if.end.71
  %50 = load %struct.window*, %struct.window** %c, align 8
  %next81 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 2
  %51 = load i64, i64* %next81, align 8
  %call82 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp83 = icmp eq i64 %51, %call82
  br i1 %cmp83, label %cond.true.85, label %cond.false.86

cond.true.85:                                     ; preds = %if.end.80
  br label %cond.end.89

cond.false.86:                                    ; preds = %if.end.80
  %52 = load %struct.window*, %struct.window** %c, align 8
  %next87 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 2
  %53 = load i64, i64* %next87, align 8
  %call88 = call %struct.window* @XWINDOW(i64 %53)
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.false.86, %cond.true.85
  %cond90 = phi %struct.window* [ null, %cond.true.85 ], [ %call88, %cond.false.86 ]
  store %struct.window* %cond90, %struct.window** %c, align 8
  br label %while.cond.65

while.end.91:                                     ; preds = %while.cond.65
  %54 = load i32, i32* %remaining_pixels61, align 4
  %cmp92 = icmp eq i32 %54, 0
  store i1 %cmp92, i1* %retval
  br label %return

if.else.94:                                       ; preds = %if.then.56
  br label %while.cond.95

while.cond.95:                                    ; preds = %cond.end.117, %if.else.94
  %55 = load %struct.window*, %struct.window** %c, align 8
  %tobool96 = icmp ne %struct.window* %55, null
  br i1 %tobool96, label %while.body.97, label %while.end.119

while.body.97:                                    ; preds = %while.cond.95
  %56 = load %struct.window*, %struct.window** %c, align 8
  %new_pixel98 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 9
  %57 = load i64, i64* %new_pixel98, align 8
  %shr99 = ashr i64 %57, 2
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel100 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 9
  %59 = load i64, i64* %new_pixel100, align 8
  %shr101 = ashr i64 %59, 2
  %cmp102 = icmp ne i64 %shr99, %shr101
  br i1 %cmp102, label %if.then.107, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %while.body.97
  %60 = load %struct.window*, %struct.window** %c, align 8
  %61 = load i8, i8* %horflag.addr, align 1
  %tobool105 = trunc i8 %61 to i1
  %call106 = call zeroext i1 @window_resize_check(%struct.window* %60, i1 zeroext %tobool105)
  br i1 %call106, label %if.end.108, label %if.then.107

if.then.107:                                      ; preds = %lor.lhs.false.104, %while.body.97
  store i1 false, i1* %retval
  br label %return

if.end.108:                                       ; preds = %lor.lhs.false.104
  %62 = load %struct.window*, %struct.window** %c, align 8
  %next109 = getelementptr inbounds %struct.window, %struct.window* %62, i32 0, i32 2
  %63 = load i64, i64* %next109, align 8
  %call110 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp111 = icmp eq i64 %63, %call110
  br i1 %cmp111, label %cond.true.113, label %cond.false.114

cond.true.113:                                    ; preds = %if.end.108
  br label %cond.end.117

cond.false.114:                                   ; preds = %if.end.108
  %64 = load %struct.window*, %struct.window** %c, align 8
  %next115 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 2
  %65 = load i64, i64* %next115, align 8
  %call116 = call %struct.window* @XWINDOW(i64 %65)
  br label %cond.end.117

cond.end.117:                                     ; preds = %cond.false.114, %cond.true.113
  %cond118 = phi %struct.window* [ null, %cond.true.113 ], [ %call116, %cond.false.114 ]
  store %struct.window* %cond118, %struct.window** %c, align 8
  br label %while.cond.95

while.end.119:                                    ; preds = %while.cond.95
  store i1 true, i1* %retval
  br label %return

if.else.120:                                      ; preds = %land.lhs.true.49, %if.else.45
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel121 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 9
  %67 = load i64, i64* %new_pixel121, align 8
  %shr122 = ashr i64 %67, 2
  %68 = load i8, i8* %horflag.addr, align 1
  %tobool123 = trunc i8 %68 to i1
  br i1 %tobool123, label %cond.true.125, label %cond.false.126

cond.true.125:                                    ; preds = %if.else.120
  %69 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 59
  %70 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 2, %70
  br label %cond.end.127

cond.false.126:                                   ; preds = %if.else.120
  %71 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 60
  %72 = load i32, i32* %line_height, align 4
  br label %cond.end.127

cond.end.127:                                     ; preds = %cond.false.126, %cond.true.125
  %cond128 = phi i32 [ %mul, %cond.true.125 ], [ %72, %cond.false.126 ]
  %conv129 = sext i32 %cond128 to i64
  %cmp130 = icmp sge i64 %shr122, %conv129
  store i1 %cmp130, i1* %retval
  br label %return

return:                                           ; preds = %cond.end.127, %while.end.119, %if.then.107, %while.end.91, %if.then.79, %if.then.70, %while.end.42, %if.then.30, %if.then.21, %while.end, %if.then.9
  %73 = load i1, i1* %retval
  ret i1 %73
}

; Function Attrs: nounwind uwtable
define internal void @window_resize_apply(%struct.window* %w, i1 zeroext %horflag) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %horflag.addr = alloca i8, align 1
  %c = alloca %struct.window*, align 8
  %edge = alloca i32, align 4
  %unit = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  %0 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 59
  %5 = load i32, i32* %column_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame1, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 60
  %10 = load i32, i32* %line_height, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %unit, align 4
  %11 = load i8, i8* %horflag.addr, align 1
  %tobool3 = trunc i8 %11 to i1
  br i1 %tobool3, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 9
  %13 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %13, 2
  %conv = trunc i64 %shr to i32
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 34
  store i32 %conv, i32* %pixel_width, align 4
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width4 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 34
  %16 = load i32, i32* %pixel_width4, align 4
  %17 = load i32, i32* %unit, align 4
  %div = sdiv i32 %16, %17
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 36
  store i32 %div, i32* %total_cols, align 4
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_normal = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 8
  %20 = load i64, i64* %new_normal, align 8
  %call = call zeroext i1 @NUMBERP(i64 %20)
  br i1 %call, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_normal6 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 8
  %23 = load i64, i64* %new_normal6, align 8
  call void @wset_normal_cols(%struct.window* %21, i64 %23)
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then
  %24 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 30
  %25 = load i32, i32* %pixel_left, align 4
  store i32 %25, i32* %edge, align 4
  br label %if.end.17

if.else:                                          ; preds = %cond.end
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_pixel7 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 9
  %27 = load i64, i64* %new_pixel7, align 8
  %shr8 = ashr i64 %27, 2
  %conv9 = trunc i64 %shr8 to i32
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 35
  store i32 %conv9, i32* %pixel_height, align 4
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height10 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 35
  %30 = load i32, i32* %pixel_height10, align 4
  %31 = load i32, i32* %unit, align 4
  %div11 = sdiv i32 %30, %31
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 37
  store i32 %div11, i32* %total_lines, align 4
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_normal12 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 8
  %34 = load i64, i64* %new_normal12, align 8
  %call13 = call zeroext i1 @NUMBERP(i64 %34)
  br i1 %call13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.else
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_normal15 = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 8
  %37 = load i64, i64* %new_normal15, align 8
  call void @wset_normal_lines(%struct.window* %35, i64 %37)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.14, %if.else
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 31
  %39 = load i32, i32* %pixel_top, align 4
  store i32 %39, i32* %edge, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 10
  %41 = load i64, i64* %contents, align 8
  %call18 = call zeroext i1 @WINDOWP(i64 %41)
  br i1 %call18, label %land.lhs.true, label %if.else.45

land.lhs.true:                                    ; preds = %if.end.17
  %42 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.else.45, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents21 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 10
  %44 = load i64, i64* %contents21, align 8
  %call22 = call %struct.window* @XWINDOW(i64 %44)
  store %struct.window* %call22, %struct.window** %c, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.43, %if.then.20
  %45 = load %struct.window*, %struct.window** %c, align 8
  %tobool23 = icmp ne %struct.window* %45, null
  br i1 %tobool23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %46 = load i8, i8* %horflag.addr, align 1
  %tobool24 = trunc i8 %46 to i1
  br i1 %tobool24, label %if.then.25, label %if.else.28

if.then.25:                                       ; preds = %while.body
  %47 = load i32, i32* %edge, align 4
  %48 = load %struct.window*, %struct.window** %c, align 8
  %pixel_left26 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 30
  store i32 %47, i32* %pixel_left26, align 4
  %49 = load i32, i32* %edge, align 4
  %50 = load i32, i32* %unit, align 4
  %div27 = sdiv i32 %49, %50
  %51 = load %struct.window*, %struct.window** %c, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 32
  store i32 %div27, i32* %left_col, align 4
  br label %if.end.31

if.else.28:                                       ; preds = %while.body
  %52 = load i32, i32* %edge, align 4
  %53 = load %struct.window*, %struct.window** %c, align 8
  %pixel_top29 = getelementptr inbounds %struct.window, %struct.window* %53, i32 0, i32 31
  store i32 %52, i32* %pixel_top29, align 4
  %54 = load i32, i32* %edge, align 4
  %55 = load i32, i32* %unit, align 4
  %div30 = sdiv i32 %54, %55
  %56 = load %struct.window*, %struct.window** %c, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 33
  store i32 %div30, i32* %top_line, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.25
  %57 = load %struct.window*, %struct.window** %c, align 8
  %58 = load i8, i8* %horflag.addr, align 1
  %tobool32 = trunc i8 %58 to i1
  call void @window_resize_apply(%struct.window* %57, i1 zeroext %tobool32)
  %59 = load i8, i8* %horflag.addr, align 1
  %tobool33 = trunc i8 %59 to i1
  br i1 %tobool33, label %if.end.36, label %if.then.34

if.then.34:                                       ; preds = %if.end.31
  %60 = load i32, i32* %edge, align 4
  %61 = load %struct.window*, %struct.window** %c, align 8
  %pixel_height35 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 35
  %62 = load i32, i32* %pixel_height35, align 4
  %add = add nsw i32 %60, %62
  store i32 %add, i32* %edge, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %if.end.31
  %63 = load %struct.window*, %struct.window** %c, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 2
  %64 = load i64, i64* %next, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %64, %call37
  br i1 %cmp, label %cond.true.39, label %cond.false.40

cond.true.39:                                     ; preds = %if.end.36
  br label %cond.end.43

cond.false.40:                                    ; preds = %if.end.36
  %65 = load %struct.window*, %struct.window** %c, align 8
  %next41 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 2
  %66 = load i64, i64* %next41, align 8
  %call42 = call %struct.window* @XWINDOW(i64 %66)
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.40, %cond.true.39
  %cond44 = phi %struct.window* [ null, %cond.true.39 ], [ %call42, %cond.false.40 ]
  store %struct.window* %cond44, %struct.window** %c, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.93

if.else.45:                                       ; preds = %land.lhs.true, %if.end.17
  %67 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents46 = getelementptr inbounds %struct.window, %struct.window* %67, i32 0, i32 10
  %68 = load i64, i64* %contents46, align 8
  %call47 = call zeroext i1 @WINDOWP(i64 %68)
  br i1 %call47, label %land.lhs.true.49, label %if.else.89

land.lhs.true.49:                                 ; preds = %if.else.45
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal50 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 67
  %bf.load51 = load i16, i16* %horizontal50, align 4
  %bf.lshr52 = lshr i16 %bf.load51, 1
  %bf.clear53 = and i16 %bf.lshr52, 1
  %bf.cast54 = trunc i16 %bf.clear53 to i1
  br i1 %bf.cast54, label %if.then.56, label %if.else.89

if.then.56:                                       ; preds = %land.lhs.true.49
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents57 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 10
  %71 = load i64, i64* %contents57, align 8
  %call58 = call %struct.window* @XWINDOW(i64 %71)
  store %struct.window* %call58, %struct.window** %c, align 8
  br label %while.cond.59

while.cond.59:                                    ; preds = %cond.end.86, %if.then.56
  %72 = load %struct.window*, %struct.window** %c, align 8
  %tobool60 = icmp ne %struct.window* %72, null
  br i1 %tobool60, label %while.body.61, label %while.end.88

while.body.61:                                    ; preds = %while.cond.59
  %73 = load i8, i8* %horflag.addr, align 1
  %tobool62 = trunc i8 %73 to i1
  br i1 %tobool62, label %if.then.63, label %if.else.67

if.then.63:                                       ; preds = %while.body.61
  %74 = load i32, i32* %edge, align 4
  %75 = load %struct.window*, %struct.window** %c, align 8
  %pixel_left64 = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 30
  store i32 %74, i32* %pixel_left64, align 4
  %76 = load i32, i32* %edge, align 4
  %77 = load i32, i32* %unit, align 4
  %div65 = sdiv i32 %76, %77
  %78 = load %struct.window*, %struct.window** %c, align 8
  %left_col66 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 32
  store i32 %div65, i32* %left_col66, align 4
  br label %if.end.71

if.else.67:                                       ; preds = %while.body.61
  %79 = load i32, i32* %edge, align 4
  %80 = load %struct.window*, %struct.window** %c, align 8
  %pixel_top68 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 31
  store i32 %79, i32* %pixel_top68, align 4
  %81 = load i32, i32* %edge, align 4
  %82 = load i32, i32* %unit, align 4
  %div69 = sdiv i32 %81, %82
  %83 = load %struct.window*, %struct.window** %c, align 8
  %top_line70 = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 33
  store i32 %div69, i32* %top_line70, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.67, %if.then.63
  %84 = load %struct.window*, %struct.window** %c, align 8
  %85 = load i8, i8* %horflag.addr, align 1
  %tobool72 = trunc i8 %85 to i1
  call void @window_resize_apply(%struct.window* %84, i1 zeroext %tobool72)
  %86 = load i8, i8* %horflag.addr, align 1
  %tobool73 = trunc i8 %86 to i1
  br i1 %tobool73, label %if.then.74, label %if.end.77

if.then.74:                                       ; preds = %if.end.71
  %87 = load i32, i32* %edge, align 4
  %88 = load %struct.window*, %struct.window** %c, align 8
  %pixel_width75 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 34
  %89 = load i32, i32* %pixel_width75, align 4
  %add76 = add nsw i32 %87, %89
  store i32 %add76, i32* %edge, align 4
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.74, %if.end.71
  %90 = load %struct.window*, %struct.window** %c, align 8
  %next78 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 2
  %91 = load i64, i64* %next78, align 8
  %call79 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp80 = icmp eq i64 %91, %call79
  br i1 %cmp80, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %if.end.77
  br label %cond.end.86

cond.false.83:                                    ; preds = %if.end.77
  %92 = load %struct.window*, %struct.window** %c, align 8
  %next84 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 2
  %93 = load i64, i64* %next84, align 8
  %call85 = call %struct.window* @XWINDOW(i64 %93)
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.83, %cond.true.82
  %cond87 = phi %struct.window* [ null, %cond.true.82 ], [ %call85, %cond.false.83 ]
  store %struct.window* %cond87, %struct.window** %c, align 8
  br label %while.cond.59

while.end.88:                                     ; preds = %while.cond.59
  br label %if.end.92

if.else.89:                                       ; preds = %land.lhs.true.49, %if.else.45
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 67
  %bf.load90 = load i16, i16* %window_end_valid, align 4
  %bf.clear91 = and i16 %bf.load90, -8193
  store i16 %bf.clear91, i16* %window_end_valid, align 4
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %while.end.88
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @window_pixel_to_total(i64 %frame, i64 %horizontal) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 1028)
  %0 = load i64, i64* %frame.addr, align 8
  %1 = load i64, i64* %horizontal.addr, align 8
  %call1 = call i64 @call2(i64 %call, i64 %0, i64 %1)
  ret i64 %call1
}

declare void @wset_next(%struct.window*, i64) #1

declare void @wset_prev(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @wset_combination(%struct.window* %w, i1 zeroext %horflag, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %horflag.addr = alloca i8, align 1
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  store i64 %0, i64* %contents, align 8
  %2 = load i64, i64* %val.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 67
  %5 = zext i1 %tobool to i16
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.shl = shl i16 %5, 1
  %bf.clear = and i16 %bf.load, -3
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %horizontal, align 4
  %bf.result.cast = trunc i16 %5 to i8
  %tobool1 = trunc i8 %bf.result.cast to i1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @delete_all_child_windows(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 2
  %2 = load i64, i64* %next, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %next2 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 2
  %4 = load i64, i64* %next2, align 8
  call void @delete_all_child_windows(i64 %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call3 = call zeroext i1 @WINDOWP(i64 %6)
  br i1 %call3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents5, align 8
  call void @delete_all_child_windows(i64 %8)
  %9 = load %struct.window*, %struct.window** %w, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination(%struct.window* %9, i1 zeroext false, i64 %call6)
  br label %if.end.16

if.else:                                          ; preds = %if.end
  %10 = load %struct.window*, %struct.window** %w, align 8
  %contents7 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 10
  %11 = load i64, i64* %contents7, align 8
  %call8 = call zeroext i1 @BUFFERP(i64 %11)
  br i1 %call8, label %if.then.9, label %if.end.15

if.then.9:                                        ; preds = %if.else
  %12 = load %struct.window*, %struct.window** %w, align 8
  call void @unshow_buffer(%struct.window* %12)
  %13 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 12
  %14 = load i64, i64* %pointm, align 8
  %call10 = call %struct.Lisp_Marker* @XMARKER(i64 %14)
  call void @unchain_marker(%struct.Lisp_Marker* %call10)
  %15 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 13
  %16 = load i64, i64* %old_pointm, align 8
  %call11 = call %struct.Lisp_Marker* @XMARKER(i64 %16)
  call void @unchain_marker(%struct.Lisp_Marker* %call11)
  %17 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 11
  %18 = load i64, i64* %start, align 8
  %call12 = call %struct.Lisp_Marker* @XMARKER(i64 %18)
  call void @unchain_marker(%struct.Lisp_Marker* %call12)
  %19 = load %struct.window*, %struct.window** %w, align 8
  %20 = load %struct.window*, %struct.window** %w, align 8
  %contents13 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 10
  %21 = load i64, i64* %contents13, align 8
  call void @wset_combination_limit(%struct.window* %19, i64 %21)
  %22 = load %struct.window*, %struct.window** %w, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_buffer(%struct.window* %22, i64 %call14)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.9, %if.else
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then.4
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call17, i64* @Vwindow_list, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @replace_window(i64 %old, i64 %new, i1 zeroext %setflag) #0 {
entry:
  %old.addr = alloca i64, align 8
  %new.addr = alloca i64, align 8
  %setflag.addr = alloca i8, align 1
  %tem = alloca i64, align 8
  %o = alloca %struct.window*, align 8
  %n = alloca %struct.window*, align 8
  store i64 %old, i64* %old.addr, align 8
  store i64 %new, i64* %new.addr, align 8
  %frombool = zext i1 %setflag to i8
  store i8 %frombool, i8* %setflag.addr, align 1
  %0 = load i64, i64* %old.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %o, align 8
  %1 = load i64, i64* %new.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %n, align 8
  %2 = load i64, i64* %old.addr, align 8
  %3 = load %struct.window*, %struct.window** %o, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 5
  %7 = load i64, i64* %root_window, align 8
  %cmp = icmp eq i64 %2, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.window*, %struct.window** %o, align 8
  %frame2 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 1
  %9 = load i64, i64* %frame2, align 8
  %sub3 = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub3 to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %12 = load i64, i64* %new.addr, align 8
  call void @fset_root_window(%struct.frame* %11, i64 %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i8, i8* %setflag.addr, align 1
  %tobool = trunc i8 %13 to i1
  br i1 %tobool, label %if.then.4, label %if.end.19

if.then.4:                                        ; preds = %if.end
  %14 = load %struct.window*, %struct.window** %o, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 30
  %15 = load i32, i32* %pixel_left, align 4
  %16 = load %struct.window*, %struct.window** %n, align 8
  %pixel_left5 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 30
  store i32 %15, i32* %pixel_left5, align 4
  %17 = load %struct.window*, %struct.window** %o, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 31
  %18 = load i32, i32* %pixel_top, align 4
  %19 = load %struct.window*, %struct.window** %n, align 8
  %pixel_top6 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 31
  store i32 %18, i32* %pixel_top6, align 4
  %20 = load %struct.window*, %struct.window** %o, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 34
  %21 = load i32, i32* %pixel_width, align 4
  %22 = load %struct.window*, %struct.window** %n, align 8
  %pixel_width7 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 34
  store i32 %21, i32* %pixel_width7, align 4
  %23 = load %struct.window*, %struct.window** %o, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 35
  %24 = load i32, i32* %pixel_height, align 4
  %25 = load %struct.window*, %struct.window** %n, align 8
  %pixel_height8 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 35
  store i32 %24, i32* %pixel_height8, align 4
  %26 = load %struct.window*, %struct.window** %o, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 32
  %27 = load i32, i32* %left_col, align 4
  %28 = load %struct.window*, %struct.window** %n, align 8
  %left_col9 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 32
  store i32 %27, i32* %left_col9, align 4
  %29 = load %struct.window*, %struct.window** %o, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 33
  %30 = load i32, i32* %top_line, align 4
  %31 = load %struct.window*, %struct.window** %n, align 8
  %top_line10 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 33
  store i32 %30, i32* %top_line10, align 4
  %32 = load %struct.window*, %struct.window** %o, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 36
  %33 = load i32, i32* %total_cols, align 4
  %34 = load %struct.window*, %struct.window** %n, align 8
  %total_cols11 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 36
  store i32 %33, i32* %total_cols11, align 4
  %35 = load %struct.window*, %struct.window** %o, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 37
  %36 = load i32, i32* %total_lines, align 4
  %37 = load %struct.window*, %struct.window** %n, align 8
  %total_lines12 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 37
  store i32 %36, i32* %total_lines12, align 4
  %38 = load %struct.window*, %struct.window** %n, align 8
  %39 = load %struct.window*, %struct.window** %o, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 6
  %40 = load i64, i64* %normal_cols, align 8
  call void @wset_normal_cols(%struct.window* %38, i64 %40)
  %41 = load %struct.window*, %struct.window** %o, align 8
  %call13 = call i64 @make_float(double 1.000000e+00)
  call void @wset_normal_cols(%struct.window* %41, i64 %call13)
  %42 = load %struct.window*, %struct.window** %n, align 8
  %43 = load %struct.window*, %struct.window** %o, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 5
  %44 = load i64, i64* %normal_lines, align 8
  call void @wset_normal_lines(%struct.window* %42, i64 %44)
  %45 = load %struct.window*, %struct.window** %o, align 8
  %call14 = call i64 @make_float(double 1.000000e+00)
  call void @wset_normal_lines(%struct.window* %45, i64 %call14)
  %46 = load %struct.window*, %struct.window** %n, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 24
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %current_matrix, align 8
  %47 = load %struct.window*, %struct.window** %n, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 25
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %desired_matrix, align 8
  %48 = load %struct.window*, %struct.window** %n, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 68
  store i32 0, i32* %vscroll, align 4
  %49 = load %struct.window*, %struct.window** %n, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 49
  %50 = bitcast %struct.cursor_pos* %cursor to i8*
  call void @llvm.memset.p0i8.i64(i8* %50, i8 0, i64 16, i32 4, i1 false)
  %51 = load %struct.window*, %struct.window** %n, align 8
  %phys_cursor = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 50
  %52 = bitcast %struct.cursor_pos* %phys_cursor to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 16, i32 4, i1 false)
  %53 = load %struct.window*, %struct.window** %n, align 8
  %last_cursor_vpos = getelementptr inbounds %struct.window, %struct.window* %53, i32 0, i32 52
  store i32 0, i32* %last_cursor_vpos, align 4
  %54 = load %struct.window*, %struct.window** %n, align 8
  %phys_cursor_type = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 53
  store i32 -1, i32* %phys_cursor_type, align 4
  %55 = load %struct.window*, %struct.window** %n, align 8
  %phys_cursor_width = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 54
  store i32 -1, i32* %phys_cursor_width, align 4
  %56 = load %struct.window*, %struct.window** %n, align 8
  %must_be_updated_p = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 67
  %bf.load = load i16, i16* %must_be_updated_p, align 4
  %bf.clear = and i16 %bf.load, -1025
  store i16 %bf.clear, i16* %must_be_updated_p, align 4
  %57 = load %struct.window*, %struct.window** %n, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 67
  %bf.load15 = load i16, i16* %pseudo_window_p, align 4
  %bf.clear16 = and i16 %bf.load15, -2049
  store i16 %bf.clear16, i16* %pseudo_window_p, align 4
  %58 = load %struct.window*, %struct.window** %n, align 8
  %window_end_vpos = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 66
  store i32 0, i32* %window_end_vpos, align 4
  %59 = load %struct.window*, %struct.window** %n, align 8
  %window_end_pos = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 65
  store i64 0, i64* %window_end_pos, align 8
  %60 = load %struct.window*, %struct.window** %n, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 67
  %bf.load17 = load i16, i16* %window_end_valid, align 4
  %bf.clear18 = and i16 %bf.load17, -8193
  store i16 %bf.clear18, i16* %window_end_valid, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.4, %if.end
  %61 = load %struct.window*, %struct.window** %o, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 2
  %62 = load i64, i64* %next, align 8
  store i64 %62, i64* %tem, align 8
  %63 = load %struct.window*, %struct.window** %n, align 8
  %64 = load i64, i64* %tem, align 8
  call void @wset_next(%struct.window* %63, i64 %64)
  %65 = load i64, i64* %tem, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %65, %call20
  br i1 %cmp21, label %if.end.24, label %if.then.22

if.then.22:                                       ; preds = %if.end.19
  %66 = load i64, i64* %tem, align 8
  %call23 = call %struct.window* @XWINDOW(i64 %66)
  %67 = load i64, i64* %new.addr, align 8
  call void @wset_prev(%struct.window* %call23, i64 %67)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.end.19
  %68 = load %struct.window*, %struct.window** %o, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %68, i32 0, i32 3
  %69 = load i64, i64* %prev, align 8
  store i64 %69, i64* %tem, align 8
  %70 = load %struct.window*, %struct.window** %n, align 8
  %71 = load i64, i64* %tem, align 8
  call void @wset_prev(%struct.window* %70, i64 %71)
  %72 = load i64, i64* %tem, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %72, %call25
  br i1 %cmp26, label %if.end.29, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  %73 = load i64, i64* %tem, align 8
  %call28 = call %struct.window* @XWINDOW(i64 %73)
  %74 = load i64, i64* %new.addr, align 8
  call void @wset_next(%struct.window* %call28, i64 %74)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.24
  %75 = load %struct.window*, %struct.window** %o, align 8
  %parent = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 4
  %76 = load i64, i64* %parent, align 8
  store i64 %76, i64* %tem, align 8
  %77 = load %struct.window*, %struct.window** %n, align 8
  %78 = load i64, i64* %tem, align 8
  call void @wset_parent(%struct.window* %77, i64 %78)
  %79 = load i64, i64* %tem, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %79, %call30
  br i1 %cmp31, label %if.end.39, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.29
  %80 = load i64, i64* %tem, align 8
  %call32 = call %struct.window* @XWINDOW(i64 %80)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call32, i32 0, i32 10
  %81 = load i64, i64* %contents, align 8
  %82 = load i64, i64* %old.addr, align 8
  %cmp33 = icmp eq i64 %81, %82
  br i1 %cmp33, label %if.then.34, label %if.end.39

if.then.34:                                       ; preds = %land.lhs.true
  %83 = load i64, i64* %tem, align 8
  %call35 = call %struct.window* @XWINDOW(i64 %83)
  %84 = load i64, i64* %tem, align 8
  %call36 = call %struct.window* @XWINDOW(i64 %84)
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %call36, i32 0, i32 67
  %bf.load37 = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load37, 1
  %bf.clear38 = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear38 to i1
  %85 = load i64, i64* %new.addr, align 8
  call void @wset_combination(%struct.window* %call35, i1 zeroext %bf.cast, i64 %85)
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.34, %land.lhs.true, %if.end.29
  ret void
}

declare i64 @Fset_buffer(i64) #1

declare %struct.position* @vmotion(i64, i64, i64, %struct.window*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare i64 @set_marker_both(i64, i64, i64, i64) #1

declare void @adjust_frame_glyphs(%struct.frame*) #1

declare void @unblock_input() #1

; Function Attrs: nounwind uwtable
define void @run_window_configuration_change_hook(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %count = alloca i64, align 8
  %frame = alloca i64, align 8
  %global_wcch = alloca i64, align 8
  %windows = alloca i64, align 8
  %window = alloca i64, align 8
  %buffer = alloca i64, align 8
  %inner_count = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 1020)
  %call2 = call i64 @Fdefault_value(i64 %call1)
  store i64 %call2, i64* %global_wcch, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call3 = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call3, i64* %frame, align 8
  %2 = load i64, i64* @Vrun_hooks, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call4
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 34
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %lor.lhs.false.5, label %if.then

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %after_make_frame to i64*
  %bf.load6 = load i64, i64* %6, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 35
  %bf.clear8 = and i64 %bf.lshr7, 1
  %bf.cast9 = trunc i64 %bf.clear8 to i1
  br i1 %bf.cast9, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %call11 = call i64 @Fwindow_buffer(i64 %call10)
  %call12 = call %struct.buffer* @XBUFFER(i64 %call11)
  %cmp13 = icmp ne %struct.buffer* %7, %call12
  br i1 %cmp13, label %if.then.14, label %if.end.18

if.then.14:                                       ; preds = %if.end
  call void @record_unwind_current_buffer()
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i64 @Fwindow_buffer(i64 %call15)
  %call17 = call i64 @Fset_buffer(i64 %call16)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.14, %if.end
  %8 = load i64, i64* @selected_frame, align 8
  %call19 = call zeroext i1 @FRAMEP(i64 %8)
  br i1 %call19, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end.18
  %9 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp20 = icmp ne %struct.terminal* %12, null
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %13 = load i64, i64* @selected_frame, align 8
  %sub21 = sub nsw i64 %13, 5
  %14 = inttoptr i64 %sub21 to i8*
  %15 = bitcast i8* %14 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end.18
  call void @emacs_abort() #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %16, %cond.true
  %cond = phi %struct.frame* [ %15, %cond.true ], [ null, %16 ]
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp22 = icmp ne %struct.frame* %cond, %17
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %cond.end
  %18 = load i64, i64* @selected_frame, align 8
  call void @record_unwind_protect(void (i64)* @select_frame_norecord, i64 %18)
  %19 = load i64, i64* %frame, align 8
  call void @select_frame_norecord(i64 %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %cond.end
  %20 = load i64, i64* %frame, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 598)
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %call27 = call i64 @Fwindow_list(i64 %20, i64 %call25, i64 %call26)
  store i64 %call27, i64* %windows, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.24
  %21 = load i64, i64* %windows, align 8
  %and = and i64 %21, 7
  %conv = trunc i64 %and to i32
  %cmp28 = icmp eq i32 %conv, 3
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i64, i64* %windows, align 8
  %sub30 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub30 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car, align 8
  store i64 %25, i64* %window, align 8
  %26 = load i64, i64* %window, align 8
  %call31 = call i64 @Fwindow_buffer(i64 %26)
  store i64 %call31, i64* %buffer, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 1020)
  %27 = load i64, i64* %buffer, align 8
  %call33 = call i64 @Flocal_variable_p(i64 %call32, i64 %27)
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %call33, %call34
  br i1 %cmp35, label %if.end.43, label %if.then.37

if.then.37:                                       ; preds = %for.body
  %call38 = call i64 @SPECPDL_INDEX()
  store i64 %call38, i64* %inner_count, align 8
  %28 = load i64, i64* @selected_window, align 8
  call void @record_unwind_protect(void (i64)* @select_window_norecord, i64 %28)
  %29 = load i64, i64* %window, align 8
  call void @select_window_norecord(i64 %29)
  %call39 = call i64 @builtin_lisp_symbol(i32 1020)
  %30 = load i64, i64* %buffer, align 8
  %call40 = call i64 @Fbuffer_local_value(i64 %call39, i64 %30)
  call void @run_funs(i64 %call40)
  %31 = load i64, i64* %inner_count, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %call42 = call i64 @unbind_to(i64 %31, i64 %call41)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.37, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.43
  %32 = load i64, i64* %windows, align 8
  %sub44 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub44 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %35 = load i64, i64* %cdr, align 8
  store i64 %35, i64* %windows, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %36 = load i64, i64* %global_wcch, align 8
  call void @run_funs(i64 %36)
  %37 = load i64, i64* %count, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %call46 = call i64 @unbind_to(i64 %37, i64 %call45)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @replace_buffer_in_windows(i64 %buffer) #0 {
entry:
  %buffer.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 807)
  %0 = load i64, i64* %buffer.addr, align 8
  %call1 = call i64 @call1(i64 %call, i64 %0)
  ret void
}

declare i64 @call1(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @replace_buffer_in_windows_safely(i64 %buffer) #0 {
entry:
  %buffer.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %buffer.addr, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %0)
  %call1 = call i32 @buffer_window_count(%struct.buffer* %call)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i64, i64* %buffer.addr, align 8
  %9 = load i64, i64* %frame, align 8
  %call3 = call i64 @window_loop(i32 2, i64 %8, i1 zeroext true, i64 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %tail, align 8
  %sub4 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub4 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

declare i32 @buffer_window_count(%struct.buffer*) #1

declare i64 @SPECPDL_INDEX() #1

declare i64 @Fdefault_value(i64) #1

declare void @record_unwind_current_buffer() #1

declare void @record_unwind_protect(void (i64)*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @select_frame_norecord(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %0, 5
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 61
  %3 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %call1 = call i64 @Fselect_frame(i64 %4, i64 %call)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @Flocal_variable_p(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @select_window_norecord(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call zeroext i1 @WINDOWP(i64 %0)
  br i1 %call, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call2 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load i64, i64* %window.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  %call4 = call i64 @Fselect_window(i64 %3, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @run_funs(i64 %funs) #0 {
entry:
  %funs.addr = alloca i64, align 8
  store i64 %funs, i64* %funs.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %funs.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %funs.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 0
  %4 = load i64, i64* %car, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp2 = icmp eq i64 %4, %call
  br i1 %cmp2, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* %funs.addr, align 8
  %sub4 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub4 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %car5 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 0
  %8 = load i64, i64* %car5, align 8
  %call6 = call i64 @call0(i64 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i64, i64* %funs.addr, align 8
  %sub7 = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub7 to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %12 = load i64, i64* %cdr, align 8
  store i64 %12, i64* %funs.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i64 @Fbuffer_local_value(i64, i64) #1

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Frun_window_configuration_change_hook(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  call void @run_window_configuration_change_hook(%struct.frame* %call)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Frun_window_scroll_functions(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 332), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 1033)
  %1 = load i64, i64* %window.addr, align 8
  %2 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @decode_live_window(i64 %2)
  %start = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 11
  %3 = load i64, i64* %start, align 8
  %call3 = call i64 @Fmarker_position(i64 %3)
  call void @run_hook_with_args_2(i64 %call1, i64 %1, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call4
}

declare void @run_hook_with_args_2(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @set_window_buffer(i64 %window, i64 %buffer, i1 zeroext %run_hooks_p, i1 zeroext %keep_margins_p) #0 {
entry:
  %window.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  %run_hooks_p.addr = alloca i8, align 1
  %keep_margins_p.addr = alloca i8, align 1
  %w = alloca %struct.window*, align 8
  %b = alloca %struct.buffer*, align 8
  %count = alloca i64, align 8
  %samebuf = alloca i8, align 1
  store i64 %window, i64* %window.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %frombool = zext i1 %run_hooks_p to i8
  store i8 %frombool, i8* %run_hooks_p.addr, align 1
  %frombool1 = zext i1 %keep_margins_p to i8
  store i8 %frombool1, i8* %keep_margins_p.addr, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %buffer.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %1)
  store %struct.buffer* %call2, %struct.buffer** %b, align 8
  %call3 = call i64 @SPECPDL_INDEX()
  store i64 %call3, i64* %count, align 8
  %2 = load i64, i64* %buffer.addr, align 8
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %cmp = icmp eq i64 %2, %4
  %frombool4 = zext i1 %cmp to i8
  store i8 %frombool4, i8* %samebuf, align 1
  %5 = load %struct.window*, %struct.window** %w, align 8
  %6 = load i64, i64* %buffer.addr, align 8
  call void @wset_buffer(%struct.window* %5, i64 %6)
  %7 = load i64, i64* %window.addr, align 8
  %8 = load i64, i64* @selected_window, align 8
  %cmp5 = icmp eq i64 %7, %8
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %10 = load i64, i64* %window.addr, align 8
  call void @bset_last_selected_window(%struct.buffer* %9, i64 %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_error_modiff = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 88
  store i64 0, i64* %display_error_modiff, align 8
  %12 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_count_ = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 52
  %13 = load i64, i64* %display_count_, align 8
  %and = and i64 %13, 7
  %conv = trunc i64 %and to i32
  %and6 = and i32 %conv, -5
  %cmp7 = icmp eq i32 %and6, 2
  br i1 %cmp7, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end
  %14 = load %struct.buffer*, %struct.buffer** %b, align 8
  %15 = load %struct.buffer*, %struct.buffer** %b, align 8
  %display_count_10 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 52
  %16 = load i64, i64* %display_count_10, align 8
  %shr = ashr i64 %16, 2
  %add = add nsw i64 %shr, 1
  %shl = shl i64 %add, 2
  %add11 = add i64 %shl, 2
  call void @bset_display_count(%struct.buffer* %14, i64 %add11)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end
  %17 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call13 = call i64 @Fcurrent_time()
  call void @bset_display_time(%struct.buffer* %17, i64 %call13)
  %18 = load %struct.window*, %struct.window** %w, align 8
  %window_end_pos = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 65
  store i64 0, i64* %window_end_pos, align 8
  %19 = load %struct.window*, %struct.window** %w, align 8
  %window_end_vpos = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 66
  store i32 0, i32* %window_end_vpos, align 4
  %20 = load %struct.window*, %struct.window** %w, align 8
  %last_cursor_vpos = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 52
  store i32 0, i32* %last_cursor_vpos, align 4
  %21 = load i8, i8* %keep_margins_p.addr, align 1
  %tobool = trunc i8 %21 to i1
  br i1 %tobool, label %land.lhs.true, label %if.then.17

land.lhs.true:                                    ; preds = %if.end.12
  %22 = load i8, i8* %samebuf, align 1
  %tobool15 = trunc i8 %22 to i1
  br i1 %tobool15, label %if.end.96, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true, %if.end.12
  %23 = load %struct.window*, %struct.window** %w, align 8
  %hscroll_whole = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 40
  store i64 0, i64* %hscroll_whole, align 8
  %24 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 39
  store i64 0, i64* %min_hscroll, align 8
  %25 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 38
  store i64 0, i64* %hscroll, align 8
  %26 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 67
  %bf.load = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.clear = and i16 %bf.load, 32767
  store i16 %bf.clear, i16* %suspend_auto_hscroll, align 4
  %27 = load %struct.window*, %struct.window** %w, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 68
  store i32 0, i32* %vscroll, align 4
  %28 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 12
  %29 = load i64, i64* %pointm, align 8
  %30 = load i64, i64* %buffer.addr, align 8
  %31 = load %struct.buffer*, %struct.buffer** %b, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp18 = icmp eq %struct.buffer* %31, %32
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.17
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 75
  %34 = load i64, i64* %pt, align 8
  %add20 = add nsw i64 %34, 0
  br label %cond.end.29

cond.false:                                       ; preds = %if.then.17
  %35 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 45
  %36 = load i64, i64* %pt_marker_, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %36, %call21
  br i1 %cmp22, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %cond.false
  %37 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt25 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 75
  %38 = load i64, i64* %pt25, align 8
  br label %cond.end

cond.false.26:                                    ; preds = %cond.false
  %39 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_27 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 45
  %40 = load i64, i64* %pt_marker_27, align 8
  %call28 = call i64 @marker_position(i64 %40)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.24
  %cond = phi i64 [ %38, %cond.true.24 ], [ %call28, %cond.false.26 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end, %cond.true
  %cond30 = phi i64 [ %add20, %cond.true ], [ %cond, %cond.end ]
  %41 = load %struct.buffer*, %struct.buffer** %b, align 8
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp31 = icmp eq %struct.buffer* %41, %42
  br i1 %cmp31, label %cond.true.33, label %cond.false.35

cond.true.33:                                     ; preds = %cond.end.29
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 76
  %44 = load i64, i64* %pt_byte, align 8
  %add34 = add nsw i64 %44, 0
  br label %cond.end.47

cond.false.35:                                    ; preds = %cond.end.29
  %45 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_36 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 45
  %46 = load i64, i64* %pt_marker_36, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp38 = icmp eq i64 %46, %call37
  br i1 %cmp38, label %cond.true.40, label %cond.false.42

cond.true.40:                                     ; preds = %cond.false.35
  %47 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_byte41 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 76
  %48 = load i64, i64* %pt_byte41, align 8
  br label %cond.end.45

cond.false.42:                                    ; preds = %cond.false.35
  %49 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_43 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 45
  %50 = load i64, i64* %pt_marker_43, align 8
  %call44 = call i64 @marker_byte_position(i64 %50)
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.42, %cond.true.40
  %cond46 = phi i64 [ %48, %cond.true.40 ], [ %call44, %cond.false.42 ]
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.end.45, %cond.true.33
  %cond48 = phi i64 [ %add34, %cond.true.33 ], [ %cond46, %cond.end.45 ]
  %call49 = call i64 @set_marker_both(i64 %29, i64 %30, i64 %cond30, i64 %cond48)
  %51 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 13
  %52 = load i64, i64* %old_pointm, align 8
  %53 = load i64, i64* %buffer.addr, align 8
  %54 = load %struct.buffer*, %struct.buffer** %b, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp50 = icmp eq %struct.buffer* %54, %55
  br i1 %cmp50, label %cond.true.52, label %cond.false.55

cond.true.52:                                     ; preds = %cond.end.47
  %56 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt53 = getelementptr inbounds %struct.buffer, %struct.buffer* %56, i32 0, i32 75
  %57 = load i64, i64* %pt53, align 8
  %add54 = add nsw i64 %57, 0
  br label %cond.end.67

cond.false.55:                                    ; preds = %cond.end.47
  %58 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_56 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 45
  %59 = load i64, i64* %pt_marker_56, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %59, %call57
  br i1 %cmp58, label %cond.true.60, label %cond.false.62

cond.true.60:                                     ; preds = %cond.false.55
  %60 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt61 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 75
  %61 = load i64, i64* %pt61, align 8
  br label %cond.end.65

cond.false.62:                                    ; preds = %cond.false.55
  %62 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_63 = getelementptr inbounds %struct.buffer, %struct.buffer* %62, i32 0, i32 45
  %63 = load i64, i64* %pt_marker_63, align 8
  %call64 = call i64 @marker_position(i64 %63)
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.62, %cond.true.60
  %cond66 = phi i64 [ %61, %cond.true.60 ], [ %call64, %cond.false.62 ]
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.end.65, %cond.true.52
  %cond68 = phi i64 [ %add54, %cond.true.52 ], [ %cond66, %cond.end.65 ]
  %64 = load %struct.buffer*, %struct.buffer** %b, align 8
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp69 = icmp eq %struct.buffer* %64, %65
  br i1 %cmp69, label %cond.true.71, label %cond.false.74

cond.true.71:                                     ; preds = %cond.end.67
  %66 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte72 = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 76
  %67 = load i64, i64* %pt_byte72, align 8
  %add73 = add nsw i64 %67, 0
  br label %cond.end.86

cond.false.74:                                    ; preds = %cond.end.67
  %68 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_75 = getelementptr inbounds %struct.buffer, %struct.buffer* %68, i32 0, i32 45
  %69 = load i64, i64* %pt_marker_75, align 8
  %call76 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp77 = icmp eq i64 %69, %call76
  br i1 %cmp77, label %cond.true.79, label %cond.false.81

cond.true.79:                                     ; preds = %cond.false.74
  %70 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_byte80 = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 76
  %71 = load i64, i64* %pt_byte80, align 8
  br label %cond.end.84

cond.false.81:                                    ; preds = %cond.false.74
  %72 = load %struct.buffer*, %struct.buffer** %b, align 8
  %pt_marker_82 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 45
  %73 = load i64, i64* %pt_marker_82, align 8
  %call83 = call i64 @marker_byte_position(i64 %73)
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.81, %cond.true.79
  %cond85 = phi i64 [ %71, %cond.true.79 ], [ %call83, %cond.false.81 ]
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.end.84, %cond.true.71
  %cond87 = phi i64 [ %add73, %cond.true.71 ], [ %cond85, %cond.end.84 ]
  %call88 = call i64 @set_marker_both(i64 %52, i64 %53, i64 %cond68, i64 %cond87)
  %74 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 11
  %75 = load i64, i64* %start, align 8
  %76 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_window_start = getelementptr inbounds %struct.buffer, %struct.buffer* %76, i32 0, i32 90
  %77 = load i64, i64* %last_window_start, align 8
  %shl89 = shl i64 %77, 2
  %add90 = add i64 %shl89, 2
  %78 = load i64, i64* %buffer.addr, align 8
  %call91 = call i64 @set_marker_restricted(i64 %75, i64 %add90, i64 %78)
  %79 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 67
  %bf.load92 = load i16, i16* %start_at_line_beg, align 4
  %bf.clear93 = and i16 %bf.load92, -17
  store i16 %bf.clear93, i16* %start_at_line_beg, align 4
  %80 = load %struct.window*, %struct.window** %w, align 8
  %force_start = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 67
  %bf.load94 = load i16, i16* %force_start, align 4
  %bf.clear95 = and i16 %bf.load94, -33
  store i16 %bf.clear95, i16* %force_start, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %cond.end.86, %land.lhs.true
  %81 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_redisplay(%struct.window* %81)
  %82 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_update_mode_line(%struct.window* %82)
  call void @record_unwind_current_buffer()
  %83 = load i64, i64* %buffer.addr, align 8
  %call97 = call i64 @Fset_buffer(i64 %83)
  %84 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 331), align 8
  %call98 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp99 = icmp eq i64 %84, %call98
  %lnot = xor i1 %cmp99, true
  %85 = load %struct.window*, %struct.window** %w, align 8
  %pointm101 = getelementptr inbounds %struct.window, %struct.window* %85, i32 0, i32 12
  %86 = load i64, i64* %pointm101, align 8
  %call102 = call %struct.Lisp_Marker* @XMARKER(i64 %86)
  %87 = bitcast %struct.Lisp_Marker* %call102 to i32*
  %88 = zext i1 %lnot to i32
  %bf.load103 = load i32, i32* %87, align 8
  %bf.shl = shl i32 %88, 31
  %bf.clear104 = and i32 %bf.load103, 2147483647
  %bf.set = or i32 %bf.clear104, %bf.shl
  store i32 %bf.set, i32* %87, align 8
  %bf.result.cast = trunc i32 %88 to i8
  %tobool105 = trunc i8 %bf.result.cast to i1
  %89 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 331), align 8
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp107 = icmp eq i64 %89, %call106
  %lnot109 = xor i1 %cmp107, true
  %90 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm110 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 13
  %91 = load i64, i64* %old_pointm110, align 8
  %call111 = call %struct.Lisp_Marker* @XMARKER(i64 %91)
  %92 = bitcast %struct.Lisp_Marker* %call111 to i32*
  %93 = zext i1 %lnot109 to i32
  %bf.load112 = load i32, i32* %92, align 8
  %bf.shl113 = shl i32 %93, 31
  %bf.clear114 = and i32 %bf.load112, 2147483647
  %bf.set115 = or i32 %bf.clear114, %bf.shl113
  store i32 %bf.set115, i32* %92, align 8
  %bf.result.cast116 = trunc i32 %93 to i8
  %tobool117 = trunc i8 %bf.result.cast116 to i1
  %94 = load i8, i8* %keep_margins_p.addr, align 1
  %tobool118 = trunc i8 %94 to i1
  br i1 %tobool118, label %if.end.123, label %if.then.119

if.then.119:                                      ; preds = %if.end.96
  %95 = load %struct.window*, %struct.window** %w, align 8
  %96 = load %struct.buffer*, %struct.buffer** %b, align 8
  %left_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %96, i32 0, i32 55
  %97 = load i64, i64* %left_fringe_width_, align 8
  %98 = load %struct.buffer*, %struct.buffer** %b, align 8
  %right_fringe_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %98, i32 0, i32 56
  %99 = load i64, i64* %right_fringe_width_, align 8
  %100 = load %struct.buffer*, %struct.buffer** %b, align 8
  %fringes_outside_margins_ = getelementptr inbounds %struct.buffer, %struct.buffer* %100, i32 0, i32 57
  %101 = load i64, i64* %fringes_outside_margins_, align 8
  %call120 = call %struct.window* @set_window_fringes(%struct.window* %95, i64 %97, i64 %99, i64 %101)
  %102 = load %struct.window*, %struct.window** %w, align 8
  %103 = load %struct.buffer*, %struct.buffer** %b, align 8
  %scroll_bar_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %103, i32 0, i32 58
  %104 = load i64, i64* %scroll_bar_width_, align 8
  %105 = load %struct.buffer*, %struct.buffer** %b, align 8
  %vertical_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 60
  %106 = load i64, i64* %vertical_scroll_bar_type_, align 8
  %107 = load %struct.buffer*, %struct.buffer** %b, align 8
  %scroll_bar_height_ = getelementptr inbounds %struct.buffer, %struct.buffer* %107, i32 0, i32 59
  %108 = load i64, i64* %scroll_bar_height_, align 8
  %109 = load %struct.buffer*, %struct.buffer** %b, align 8
  %horizontal_scroll_bar_type_ = getelementptr inbounds %struct.buffer, %struct.buffer* %109, i32 0, i32 61
  %110 = load i64, i64* %horizontal_scroll_bar_type_, align 8
  %call121 = call %struct.window* @set_window_scroll_bars(%struct.window* %102, i64 %104, i64 %106, i64 %108, i64 %110)
  %111 = load %struct.window*, %struct.window** %w, align 8
  %112 = load %struct.buffer*, %struct.buffer** %b, align 8
  %left_margin_cols_ = getelementptr inbounds %struct.buffer, %struct.buffer* %112, i32 0, i32 53
  %113 = load i64, i64* %left_margin_cols_, align 8
  %114 = load %struct.buffer*, %struct.buffer** %b, align 8
  %right_margin_cols_ = getelementptr inbounds %struct.buffer, %struct.buffer* %114, i32 0, i32 54
  %115 = load i64, i64* %right_margin_cols_, align 8
  %call122 = call %struct.window* @set_window_margins(%struct.window* %111, i64 %113, i64 %115)
  %116 = load %struct.window*, %struct.window** %w, align 8
  call void @apply_window_adjustment(%struct.window* %116)
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.119, %if.end.96
  %117 = load i8, i8* %run_hooks_p.addr, align 1
  %tobool124 = trunc i8 %117 to i1
  br i1 %tobool124, label %if.then.125, label %if.end.137

if.then.125:                                      ; preds = %if.end.123
  %118 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 332), align 8
  %call126 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp127 = icmp eq i64 %118, %call126
  br i1 %cmp127, label %if.end.133, label %if.then.129

if.then.129:                                      ; preds = %if.then.125
  %call130 = call i64 @builtin_lisp_symbol(i32 1033)
  %119 = load i64, i64* %window.addr, align 8
  %120 = load %struct.window*, %struct.window** %w, align 8
  %start131 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 11
  %121 = load i64, i64* %start131, align 8
  %call132 = call i64 @Fmarker_position(i64 %121)
  call void @run_hook_with_args_2(i64 %call130, i64 %119, i64 %call132)
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.129, %if.then.125
  %122 = load i8, i8* %samebuf, align 1
  %tobool134 = trunc i8 %122 to i1
  br i1 %tobool134, label %if.end.136, label %if.then.135

if.then.135:                                      ; preds = %if.end.133
  %123 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 1
  %124 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %124, 5
  %125 = inttoptr i64 %sub to i8*
  %126 = bitcast i8* %125 to %struct.frame*
  call void @run_window_configuration_change_hook(%struct.frame* %126)
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.135, %if.end.133
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.136, %if.end.123
  %127 = load i64, i64* %count, align 8
  %call138 = call i64 @builtin_lisp_symbol(i32 0)
  %call139 = call i64 @unbind_to(i64 %127, i64 %call138)
  ret void
}

declare void @bset_last_selected_window(%struct.buffer*, i64) #1

declare void @bset_display_count(%struct.buffer*, i64) #1

declare void @bset_display_time(%struct.buffer*, i64) #1

declare i64 @Fcurrent_time() #1

declare %struct.Lisp_Marker* @XMARKER(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.window* @set_window_fringes(%struct.window* %w, i64 %left_width, i64 %right_width, i64 %outside_margins) #0 {
entry:
  %retval = alloca %struct.window*, align 8
  %w.addr = alloca %struct.window*, align 8
  %left_width.addr = alloca i64, align 8
  %right_width.addr = alloca i64, align 8
  %outside_margins.addr = alloca i64, align 8
  %outside = alloca i8, align 1
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %left_width, i64* %left_width.addr, align 8
  store i64 %right_width, i64* %right_width.addr, align 8
  store i64 %outside_margins, i64* %outside_margins.addr, align 8
  %0 = load i64, i64* %outside_margins.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %outside, align 1
  %1 = load i64, i64* %left_width.addr, align 8
  %call1 = call i32 @extract_dimension(i64 %1)
  store i32 %call1, i32* %left, align 4
  %2 = load i64, i64* %right_width.addr, align 8
  %call2 = call i32 @extract_dimension(i64 %2)
  store i32 %call2, i32* %right, align 4
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 2
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 57
  %9 = load i32, i32* %left_fringe_width, align 4
  %10 = load i32, i32* %left, align 4
  %cmp4 = icmp ne i32 %9, %10
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 58
  %12 = load i32, i32* %right_fringe_width, align 4
  %13 = load i32, i32* %right, align 4
  %cmp5 = icmp ne i32 %12, %13
  br i1 %cmp5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 67
  %bf.load7 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr8 = lshr i16 %bf.load7, 12
  %bf.clear9 = and i16 %bf.lshr8, 1
  %bf.cast10 = trunc i16 %bf.clear9 to i1
  %conv = zext i1 %bf.cast10 to i32
  %15 = load i8, i8* %outside, align 1
  %tobool = trunc i8 %15 to i1
  %conv11 = zext i1 %tobool to i32
  %cmp12 = icmp ne i32 %conv, %conv11
  br i1 %cmp12, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.6, %lor.lhs.false, %land.lhs.true
  %16 = load i32, i32* %left, align 4
  %cmp14 = icmp sgt i32 %16, 0
  br i1 %cmp14, label %if.then.19, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %if.then
  %17 = load i32, i32* %right, align 4
  %cmp17 = icmp sgt i32 %17, 0
  br i1 %cmp17, label %if.then.19, label %if.end.137

if.then.19:                                       ; preds = %lor.lhs.false.16, %if.then
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 34
  %19 = load i32, i32* %pixel_width, align 4
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 59
  %21 = load i32, i32* %left_margin_cols, align 4
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame20 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 1
  %23 = load i64, i64* %frame20, align 8
  %sub21 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub21 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 59
  %26 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %21, %26
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 60
  %28 = load i32, i32* %right_margin_cols, align 4
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame22 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 1
  %30 = load i64, i64* %frame22, align 8
  %sub23 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub23 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %column_width24 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 59
  %33 = load i32, i32* %column_width24, align 4
  %mul25 = mul nsw i32 %28, %33
  %add = add nsw i32 %mul, %mul25
  %sub26 = sub nsw i32 %19, %add
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 67
  %bf.load27 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr28 = lshr i16 %bf.load27, 11
  %bf.clear29 = and i16 %bf.lshr28, 1
  %bf.cast30 = trunc i16 %bf.clear29 to i1
  br i1 %bf.cast30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.19
  br label %cond.end.57

cond.false:                                       ; preds = %if.then.19
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 16
  %36 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp33 = icmp eq i64 %36, %call32
  br i1 %cmp33, label %cond.true.35, label %cond.false.43

cond.true.35:                                     ; preds = %cond.false
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame36 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 1
  %38 = load i64, i64* %frame36, align 8
  %sub37 = sub nsw i64 %38, 5
  %39 = inttoptr i64 %sub37 to i8*
  %40 = bitcast i8* %39 to %struct.frame*
  %vertical_scroll_bar_type38 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 26
  %41 = bitcast i48* %vertical_scroll_bar_type38 to i64*
  %bf.load39 = load i64, i64* %41, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 30
  %bf.clear41 = and i64 %bf.lshr40, 3
  %bf.cast42 = trunc i64 %bf.clear41 to i32
  br label %cond.end.55

cond.false.43:                                    ; preds = %cond.false
  %42 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type44 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 16
  %43 = load i64, i64* %vertical_scroll_bar_type44, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp46 = icmp eq i64 %43, %call45
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.false.43
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false.43
  %44 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type50 = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 16
  %45 = load i64, i64* %vertical_scroll_bar_type50, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp52 = icmp eq i64 %45, %call51
  %cond = select i1 %cmp52, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.48
  %cond54 = phi i32 [ 1, %cond.true.48 ], [ %cond, %cond.false.49 ]
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end, %cond.true.35
  %cond56 = phi i32 [ %bf.cast42, %cond.true.35 ], [ %cond54, %cond.end ]
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.end.55, %cond.true
  %cond58 = phi i32 [ 0, %cond.true ], [ %cond56, %cond.end.55 ]
  %cmp59 = icmp eq i32 %cond58, 1
  br i1 %cmp59, label %cond.true.102, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %cond.end.57
  %46 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p62 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 67
  %bf.load63 = load i16, i16* %pseudo_window_p62, align 4
  %bf.lshr64 = lshr i16 %bf.load63, 11
  %bf.clear65 = and i16 %bf.lshr64, 1
  %bf.cast66 = trunc i16 %bf.clear65 to i1
  br i1 %bf.cast66, label %cond.true.68, label %cond.false.69

cond.true.68:                                     ; preds = %lor.lhs.false.61
  br label %cond.end.98

cond.false.69:                                    ; preds = %lor.lhs.false.61
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type70 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 16
  %48 = load i64, i64* %vertical_scroll_bar_type70, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp72 = icmp eq i64 %48, %call71
  br i1 %cmp72, label %cond.true.74, label %cond.false.82

cond.true.74:                                     ; preds = %cond.false.69
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame75 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 1
  %50 = load i64, i64* %frame75, align 8
  %sub76 = sub nsw i64 %50, 5
  %51 = inttoptr i64 %sub76 to i8*
  %52 = bitcast i8* %51 to %struct.frame*
  %vertical_scroll_bar_type77 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 26
  %53 = bitcast i48* %vertical_scroll_bar_type77 to i64*
  %bf.load78 = load i64, i64* %53, align 8
  %bf.lshr79 = lshr i64 %bf.load78, 30
  %bf.clear80 = and i64 %bf.lshr79, 3
  %bf.cast81 = trunc i64 %bf.clear80 to i32
  br label %cond.end.96

cond.false.82:                                    ; preds = %cond.false.69
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type83 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 16
  %55 = load i64, i64* %vertical_scroll_bar_type83, align 8
  %call84 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp85 = icmp eq i64 %55, %call84
  br i1 %cmp85, label %cond.true.87, label %cond.false.88

cond.true.87:                                     ; preds = %cond.false.82
  br label %cond.end.94

cond.false.88:                                    ; preds = %cond.false.82
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type89 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 16
  %57 = load i64, i64* %vertical_scroll_bar_type89, align 8
  %call90 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp91 = icmp eq i64 %57, %call90
  %cond93 = select i1 %cmp91, i32 2, i32 0
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.88, %cond.true.87
  %cond95 = phi i32 [ 1, %cond.true.87 ], [ %cond93, %cond.false.88 ]
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.end.94, %cond.true.74
  %cond97 = phi i32 [ %bf.cast81, %cond.true.74 ], [ %cond95, %cond.end.94 ]
  br label %cond.end.98

cond.end.98:                                      ; preds = %cond.end.96, %cond.true.68
  %cond99 = phi i32 [ 0, %cond.true.68 ], [ %cond97, %cond.end.96 ]
  %cmp100 = icmp eq i32 %cond99, 2
  br i1 %cmp100, label %cond.true.102, label %cond.false.112

cond.true.102:                                    ; preds = %cond.end.98, %cond.end.57
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 61
  %59 = load i32, i32* %scroll_bar_width, align 4
  %cmp103 = icmp sge i32 %59, 0
  br i1 %cmp103, label %cond.true.105, label %cond.false.107

cond.true.105:                                    ; preds = %cond.true.102
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width106 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 61
  %61 = load i32, i32* %scroll_bar_width106, align 4
  br label %cond.end.110

cond.false.107:                                   ; preds = %cond.true.102
  %62 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame108 = getelementptr inbounds %struct.window, %struct.window* %62, i32 0, i32 1
  %63 = load i64, i64* %frame108, align 8
  %sub109 = sub nsw i64 %63, 5
  %64 = inttoptr i64 %sub109 to i8*
  %65 = bitcast i8* %64 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 69
  %66 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.107, %cond.true.105
  %cond111 = phi i32 [ %61, %cond.true.105 ], [ %66, %cond.false.107 ]
  br label %cond.end.113

cond.false.112:                                   ; preds = %cond.end.98
  br label %cond.end.113

cond.end.113:                                     ; preds = %cond.false.112, %cond.end.110
  %cond114 = phi i32 [ %cond111, %cond.end.110 ], [ 0, %cond.false.112 ]
  %sub115 = sub nsw i32 %sub26, %cond114
  %67 = load i32, i32* %left, align 4
  %cmp116 = icmp sgt i32 %67, 0
  br i1 %cmp116, label %cond.true.118, label %cond.false.119

cond.true.118:                                    ; preds = %cond.end.113
  %68 = load i32, i32* %left, align 4
  br label %cond.end.120

cond.false.119:                                   ; preds = %cond.end.113
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.119, %cond.true.118
  %cond121 = phi i32 [ %68, %cond.true.118 ], [ 0, %cond.false.119 ]
  %sub122 = sub nsw i32 %sub115, %cond121
  %69 = load i32, i32* %right, align 4
  %cmp123 = icmp sgt i32 %69, 0
  br i1 %cmp123, label %cond.true.125, label %cond.false.126

cond.true.125:                                    ; preds = %cond.end.120
  %70 = load i32, i32* %right, align 4
  br label %cond.end.127

cond.false.126:                                   ; preds = %cond.end.120
  br label %cond.end.127

cond.end.127:                                     ; preds = %cond.false.126, %cond.true.125
  %cond128 = phi i32 [ %70, %cond.true.125 ], [ 0, %cond.false.126 ]
  %sub129 = sub nsw i32 %sub122, %cond128
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame130 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 1
  %72 = load i64, i64* %frame130, align 8
  %sub131 = sub nsw i64 %72, 5
  %73 = inttoptr i64 %sub131 to i8*
  %74 = bitcast i8* %73 to %struct.frame*
  %column_width132 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 59
  %75 = load i32, i32* %column_width132, align 4
  %mul133 = mul nsw i32 2, %75
  %cmp134 = icmp slt i32 %sub129, %mul133
  br i1 %cmp134, label %if.then.136, label %if.end

if.then.136:                                      ; preds = %cond.end.127
  store %struct.window* null, %struct.window** %retval
  br label %return

if.end:                                           ; preds = %cond.end.127
  br label %if.end.137

if.end.137:                                       ; preds = %if.end, %lor.lhs.false.16
  %76 = load i32, i32* %left, align 4
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width138 = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 57
  store i32 %76, i32* %left_fringe_width138, align 4
  %78 = load i32, i32* %right, align 4
  %79 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width139 = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 58
  store i32 %78, i32* %right_fringe_width139, align 4
  %80 = load i8, i8* %outside, align 1
  %tobool140 = trunc i8 %80 to i1
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins141 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 67
  %82 = zext i1 %tobool140 to i16
  %bf.load142 = load i16, i16* %fringes_outside_margins141, align 4
  %bf.shl = shl i16 %82, 12
  %bf.clear143 = and i16 %bf.load142, -4097
  %bf.set = or i16 %bf.clear143, %bf.shl
  store i16 %bf.set, i16* %fringes_outside_margins141, align 4
  %bf.result.cast = trunc i16 %82 to i8
  %tobool144 = trunc i8 %bf.result.cast to i1
  %83 = load %struct.window*, %struct.window** %w.addr, align 8
  store %struct.window* %83, %struct.window** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false.6, %entry
  store %struct.window* null, %struct.window** %retval
  br label %return

return:                                           ; preds = %if.else, %if.end.137, %if.then.136
  %84 = load %struct.window*, %struct.window** %retval
  ret %struct.window* %84
}

; Function Attrs: nounwind uwtable
define internal %struct.window* @set_window_scroll_bars(%struct.window* %w, i64 %width, i64 %vertical_type, i64 %height, i64 %horizontal_type) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %width.addr = alloca i64, align 8
  %vertical_type.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %horizontal_type.addr = alloca i64, align 8
  %iwidth = alloca i32, align 4
  %changed = alloca i8, align 1
  %iheight = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %vertical_type, i64* %vertical_type.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i64 %horizontal_type, i64* %horizontal_type.addr, align 8
  %0 = load i64, i64* %width.addr, align 8
  %call = call i32 @extract_dimension(i64 %0)
  store i32 %call, i32* %iwidth, align 4
  store i8 0, i8* %changed, align 1
  %1 = load i32, i32* %iwidth, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %vertical_type.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %vertical_type.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %2, %call2
  br i1 %cmp3, label %if.end.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i64, i64* %vertical_type.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp5 = icmp eq i64 %3, %call4
  br i1 %cmp5, label %if.end.13, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %4 = load i64, i64* %vertical_type.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp8 = icmp eq i64 %4, %call7
  br i1 %cmp8, label %if.end.13, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %5 = load i64, i64* %vertical_type.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp11 = icmp eq i64 %5, %call10
  br i1 %cmp11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %lor.lhs.false.9
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #5
  unreachable

if.end.13:                                        ; preds = %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false, %if.end
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 61
  %7 = load i32, i32* %scroll_bar_width, align 4
  %8 = load i32, i32* %iwidth, align 4
  %cmp14 = icmp ne i32 %7, %8
  br i1 %cmp14, label %if.then.17, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %if.end.13
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 16
  %10 = load i64, i64* %vertical_scroll_bar_type, align 8
  %11 = load i64, i64* %vertical_type.addr, align 8
  %cmp16 = icmp eq i64 %10, %11
  br i1 %cmp16, label %if.end.53, label %if.then.17

if.then.17:                                       ; preds = %lor.lhs.false.15, %if.end.13
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 34
  %13 = load i32, i32* %pixel_width, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 59
  %15 = load i32, i32* %left_margin_cols, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 1
  %17 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 59
  %20 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %15, %20
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 60
  %22 = load i32, i32* %right_margin_cols, align 4
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame18 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 1
  %24 = load i64, i64* %frame18, align 8
  %sub19 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub19 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  %column_width20 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 59
  %27 = load i32, i32* %column_width20, align 4
  %mul21 = mul nsw i32 %22, %27
  %add = add nsw i32 %mul, %mul21
  %sub22 = sub nsw i32 %13, %add
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 57
  %29 = load i32, i32* %left_fringe_width, align 4
  %cmp23 = icmp sge i32 %29, 0
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.17
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width24 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 57
  %31 = load i32, i32* %left_fringe_width24, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.17
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame25 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 1
  %33 = load i64, i64* %frame25, align 8
  %sub26 = sub nsw i64 %33, 5
  %34 = inttoptr i64 %sub26 to i8*
  %35 = bitcast i8* %34 to %struct.frame*
  %left_fringe_width27 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 54
  %36 = load i32, i32* %left_fringe_width27, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %31, %cond.true ], [ %36, %cond.false ]
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 58
  %38 = load i32, i32* %right_fringe_width, align 4
  %cmp28 = icmp sge i32 %38, 0
  br i1 %cmp28, label %cond.true.29, label %cond.false.31

cond.true.29:                                     ; preds = %cond.end
  %39 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width30 = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 58
  %40 = load i32, i32* %right_fringe_width30, align 4
  br label %cond.end.35

cond.false.31:                                    ; preds = %cond.end
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame32 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 1
  %42 = load i64, i64* %frame32, align 8
  %sub33 = sub nsw i64 %42, 5
  %43 = inttoptr i64 %sub33 to i8*
  %44 = bitcast i8* %43 to %struct.frame*
  %right_fringe_width34 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 55
  %45 = load i32, i32* %right_fringe_width34, align 4
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.31, %cond.true.29
  %cond36 = phi i32 [ %40, %cond.true.29 ], [ %45, %cond.false.31 ]
  %add37 = add nsw i32 %cond, %cond36
  %sub38 = sub nsw i32 %sub22, %add37
  %46 = load i32, i32* %iwidth, align 4
  %cmp39 = icmp sgt i32 %46, 0
  br i1 %cmp39, label %cond.true.40, label %cond.false.41

cond.true.40:                                     ; preds = %cond.end.35
  %47 = load i32, i32* %iwidth, align 4
  br label %cond.end.42

cond.false.41:                                    ; preds = %cond.end.35
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.41, %cond.true.40
  %cond43 = phi i32 [ %47, %cond.true.40 ], [ 0, %cond.false.41 ]
  %sub44 = sub nsw i32 %sub38, %cond43
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame45 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 1
  %49 = load i64, i64* %frame45, align 8
  %sub46 = sub nsw i64 %49, 5
  %50 = inttoptr i64 %sub46 to i8*
  %51 = bitcast i8* %50 to %struct.frame*
  %column_width47 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 59
  %52 = load i32, i32* %column_width47, align 4
  %mul48 = mul nsw i32 2, %52
  %cmp49 = icmp sge i32 %sub44, %mul48
  br i1 %cmp49, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %cond.end.42
  %53 = load i32, i32* %iwidth, align 4
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width51 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 61
  store i32 %53, i32* %scroll_bar_width51, align 4
  %55 = load %struct.window*, %struct.window** %w.addr, align 8
  %56 = load i64, i64* %vertical_type.addr, align 8
  call void @wset_vertical_scroll_bar_type(%struct.window* %55, i64 %56)
  store i8 1, i8* %changed, align 1
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %cond.end.42
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %lor.lhs.false.15
  %57 = load i64, i64* %height.addr, align 8
  %call54 = call i32 @extract_dimension(i64 %57)
  store i32 %call54, i32* %iheight, align 4
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then.57, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.end.53
  %59 = load i32, i32* %iheight, align 4
  %cmp56 = icmp eq i32 %59, 0
  br i1 %cmp56, label %if.then.57, label %if.end.59

if.then.57:                                       ; preds = %lor.lhs.false.55, %if.end.53
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call58, i64* %horizontal_type.addr, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.57, %lor.lhs.false.55
  %60 = load i64, i64* %horizontal_type.addr, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp61 = icmp eq i64 %60, %call60
  br i1 %cmp61, label %if.end.69, label %lor.lhs.false.62

lor.lhs.false.62:                                 ; preds = %if.end.59
  %61 = load i64, i64* %horizontal_type.addr, align 8
  %call63 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp64 = icmp eq i64 %61, %call63
  br i1 %cmp64, label %if.end.69, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.62
  %62 = load i64, i64* %horizontal_type.addr, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp67 = icmp eq i64 %62, %call66
  br i1 %cmp67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %lor.lhs.false.65
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.55, i32 0, i32 0)) #5
  unreachable

if.end.69:                                        ; preds = %lor.lhs.false.65, %lor.lhs.false.62, %if.end.59
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 62
  %64 = load i32, i32* %scroll_bar_height, align 4
  %65 = load i32, i32* %iheight, align 4
  %cmp70 = icmp ne i32 %64, %65
  br i1 %cmp70, label %if.then.73, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %if.end.69
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 18
  %67 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %68 = load i64, i64* %horizontal_type.addr, align 8
  %cmp72 = icmp eq i64 %67, %68
  br i1 %cmp72, label %if.end.296, label %if.then.73

if.then.73:                                       ; preds = %lor.lhs.false.71, %if.end.69
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 35
  %70 = load i32, i32* %pixel_height, align 4
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 10
  %72 = load i64, i64* %contents, align 8
  %call74 = call zeroext i1 @BUFFERP(i64 %72)
  br i1 %call74, label %cond.true.75, label %cond.false.141

cond.true.75:                                     ; preds = %if.then.73
  %73 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini76 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 67
  %bf.load77 = load i16, i16* %mini76, align 4
  %bf.clear78 = and i16 %bf.load77, 1
  %bf.cast79 = trunc i16 %bf.clear78 to i1
  br i1 %bf.cast79, label %cond.false.179, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true.75
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 67
  %bf.load80 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load80, 11
  %bf.clear81 = and i16 %bf.lshr, 1
  %bf.cast82 = trunc i16 %bf.clear81 to i1
  br i1 %bf.cast82, label %cond.false.179, label %land.lhs.true.83

land.lhs.true.83:                                 ; preds = %land.lhs.true
  %75 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame84 = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 1
  %76 = load i64, i64* %frame84, align 8
  %sub85 = sub nsw i64 %76, 5
  %77 = inttoptr i64 %sub85 to i8*
  %78 = bitcast i8* %77 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 26
  %79 = bitcast i48* %wants_modeline to i64*
  %bf.load86 = load i64, i64* %79, align 8
  %bf.lshr87 = lshr i64 %bf.load86, 14
  %bf.clear88 = and i64 %bf.lshr87, 1
  %bf.cast89 = trunc i64 %bf.clear88 to i1
  br i1 %bf.cast89, label %land.lhs.true.90, label %cond.false.179

land.lhs.true.90:                                 ; preds = %land.lhs.true.83
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents91 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 10
  %81 = load i64, i64* %contents91, align 8
  %call92 = call %struct.buffer* @XBUFFER(i64 %81)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call92, i32 0, i32 13
  %82 = load i64, i64* %header_line_format_, align 8
  %call93 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp94 = icmp eq i64 %82, %call93
  br i1 %cmp94, label %cond.false.179, label %land.lhs.true.95

land.lhs.true.95:                                 ; preds = %land.lhs.true.90
  %83 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height96 = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 35
  %84 = load i32, i32* %pixel_height96, align 4
  %85 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents97 = getelementptr inbounds %struct.window, %struct.window* %85, i32 0, i32 10
  %86 = load i64, i64* %contents97, align 8
  %call98 = call zeroext i1 @BUFFERP(i64 %86)
  br i1 %call98, label %cond.true.99, label %cond.false.128

cond.true.99:                                     ; preds = %land.lhs.true.95
  %87 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini100 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 67
  %bf.load101 = load i16, i16* %mini100, align 4
  %bf.clear102 = and i16 %bf.load101, 1
  %bf.cast103 = trunc i16 %bf.clear102 to i1
  br i1 %bf.cast103, label %cond.false.134, label %land.lhs.true.104

land.lhs.true.104:                                ; preds = %cond.true.99
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p105 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 67
  %bf.load106 = load i16, i16* %pseudo_window_p105, align 4
  %bf.lshr107 = lshr i16 %bf.load106, 11
  %bf.clear108 = and i16 %bf.lshr107, 1
  %bf.cast109 = trunc i16 %bf.clear108 to i1
  br i1 %bf.cast109, label %cond.false.134, label %land.lhs.true.110

land.lhs.true.110:                                ; preds = %land.lhs.true.104
  %89 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame111 = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 1
  %90 = load i64, i64* %frame111, align 8
  %sub112 = sub nsw i64 %90, 5
  %91 = inttoptr i64 %sub112 to i8*
  %92 = bitcast i8* %91 to %struct.frame*
  %wants_modeline113 = getelementptr inbounds %struct.frame, %struct.frame* %92, i32 0, i32 26
  %93 = bitcast i48* %wants_modeline113 to i64*
  %bf.load114 = load i64, i64* %93, align 8
  %bf.lshr115 = lshr i64 %bf.load114, 14
  %bf.clear116 = and i64 %bf.lshr115, 1
  %bf.cast117 = trunc i64 %bf.clear116 to i1
  br i1 %bf.cast117, label %land.lhs.true.118, label %cond.false.134

land.lhs.true.118:                                ; preds = %land.lhs.true.110
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents119 = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 10
  %95 = load i64, i64* %contents119, align 8
  %call120 = call %struct.buffer* @XBUFFER(i64 %95)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call120, i32 0, i32 12
  %96 = load i64, i64* %mode_line_format_, align 8
  %call121 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp122 = icmp eq i64 %96, %call121
  br i1 %cmp122, label %cond.false.134, label %land.lhs.true.123

land.lhs.true.123:                                ; preds = %land.lhs.true.118
  %97 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height124 = getelementptr inbounds %struct.window, %struct.window* %97, i32 0, i32 35
  %98 = load i32, i32* %pixel_height124, align 4
  %99 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame125 = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 1
  %100 = load i64, i64* %frame125, align 8
  %sub126 = sub nsw i64 %100, 5
  %101 = inttoptr i64 %sub126 to i8*
  %102 = bitcast i8* %101 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 60
  %103 = load i32, i32* %line_height, align 4
  %cmp127 = icmp sgt i32 %98, %103
  br i1 %cmp127, label %cond.true.129, label %cond.false.134

cond.false.128:                                   ; preds = %land.lhs.true.95
  br i1 false, label %cond.true.129, label %cond.false.134

cond.true.129:                                    ; preds = %cond.false.128, %land.lhs.true.123
  %104 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame130 = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 1
  %105 = load i64, i64* %frame130, align 8
  %sub131 = sub nsw i64 %105, 5
  %106 = inttoptr i64 %sub131 to i8*
  %107 = bitcast i8* %106 to %struct.frame*
  %line_height132 = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 60
  %108 = load i32, i32* %line_height132, align 4
  %mul133 = mul nsw i32 2, %108
  br label %cond.end.138

cond.false.134:                                   ; preds = %cond.false.128, %land.lhs.true.123, %land.lhs.true.118, %land.lhs.true.110, %land.lhs.true.104, %cond.true.99
  %109 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame135 = getelementptr inbounds %struct.window, %struct.window* %109, i32 0, i32 1
  %110 = load i64, i64* %frame135, align 8
  %sub136 = sub nsw i64 %110, 5
  %111 = inttoptr i64 %sub136 to i8*
  %112 = bitcast i8* %111 to %struct.frame*
  %line_height137 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 60
  %113 = load i32, i32* %line_height137, align 4
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.134, %cond.true.129
  %cond139 = phi i32 [ %mul133, %cond.true.129 ], [ %113, %cond.false.134 ]
  %cmp140 = icmp sgt i32 %84, %cond139
  br i1 %cmp140, label %cond.true.142, label %cond.false.179

cond.false.141:                                   ; preds = %if.then.73
  br i1 false, label %cond.true.142, label %cond.false.179

cond.true.142:                                    ; preds = %cond.false.141, %cond.end.138
  %114 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %114, i32 0, i32 64
  %115 = load i32, i32* %header_line_height, align 4
  %cmp143 = icmp sge i32 %115, 0
  br i1 %cmp143, label %cond.true.144, label %cond.false.146

cond.true.144:                                    ; preds = %cond.true.142
  %116 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height145 = getelementptr inbounds %struct.window, %struct.window* %116, i32 0, i32 64
  %117 = load i32, i32* %header_line_height145, align 4
  br label %cond.end.177

cond.false.146:                                   ; preds = %cond.true.142
  %118 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %118, i32 0, i32 24
  %119 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %119, null
  br i1 %tobool, label %land.lhs.true.147, label %cond.false.155

land.lhs.true.147:                                ; preds = %cond.false.146
  %120 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix148 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 24
  %121 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix148, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %121, i32 0, i32 1
  %122 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool149 = icmp ne %struct.glyph_row* %122, null
  br i1 %tobool149, label %cond.true.150, label %cond.false.155

cond.true.150:                                    ; preds = %land.lhs.true.147
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix151 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 24
  %124 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix151, align 8
  %rows152 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %124, i32 0, i32 1
  %125 = load %struct.glyph_row*, %struct.glyph_row** %rows152, align 8
  %height153 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %125, i32 0, i32 7
  %126 = load i32, i32* %height153, align 4
  %tobool154 = icmp ne i32 %126, 0
  br i1 %tobool154, label %cond.true.156, label %cond.false.170

cond.false.155:                                   ; preds = %land.lhs.true.147, %cond.false.146
  br i1 false, label %cond.true.156, label %cond.false.170

cond.true.156:                                    ; preds = %cond.false.155, %cond.true.150
  %127 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix157 = getelementptr inbounds %struct.window, %struct.window* %127, i32 0, i32 24
  %128 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix157, align 8
  %tobool158 = icmp ne %struct.glyph_matrix* %128, null
  br i1 %tobool158, label %land.lhs.true.159, label %cond.false.167

land.lhs.true.159:                                ; preds = %cond.true.156
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix160 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 24
  %130 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix160, align 8
  %rows161 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %130, i32 0, i32 1
  %131 = load %struct.glyph_row*, %struct.glyph_row** %rows161, align 8
  %tobool162 = icmp ne %struct.glyph_row* %131, null
  br i1 %tobool162, label %cond.true.163, label %cond.false.167

cond.true.163:                                    ; preds = %land.lhs.true.159
  %132 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix164 = getelementptr inbounds %struct.window, %struct.window* %132, i32 0, i32 24
  %133 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix164, align 8
  %rows165 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %133, i32 0, i32 1
  %134 = load %struct.glyph_row*, %struct.glyph_row** %rows165, align 8
  %height166 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %134, i32 0, i32 7
  %135 = load i32, i32* %height166, align 4
  br label %cond.end.168

cond.false.167:                                   ; preds = %land.lhs.true.159, %cond.true.156
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.false.167, %cond.true.163
  %cond169 = phi i32 [ %135, %cond.true.163 ], [ 0, %cond.false.167 ]
  br label %cond.end.174

cond.false.170:                                   ; preds = %cond.false.155, %cond.true.150
  %136 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame171 = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 1
  %137 = load i64, i64* %frame171, align 8
  %sub172 = sub nsw i64 %137, 5
  %138 = inttoptr i64 %sub172 to i8*
  %139 = bitcast i8* %138 to %struct.frame*
  %call173 = call i32 @estimate_mode_line_height(%struct.frame* %139, i32 5)
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.170, %cond.end.168
  %cond175 = phi i32 [ %cond169, %cond.end.168 ], [ %call173, %cond.false.170 ]
  %140 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height176 = getelementptr inbounds %struct.window, %struct.window* %140, i32 0, i32 64
  store i32 %cond175, i32* %header_line_height176, align 4
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.end.174, %cond.true.144
  %cond178 = phi i32 [ %117, %cond.true.144 ], [ %cond175, %cond.end.174 ]
  br label %cond.end.180

cond.false.179:                                   ; preds = %cond.false.141, %cond.end.138, %land.lhs.true.90, %land.lhs.true.83, %land.lhs.true, %cond.true.75
  br label %cond.end.180

cond.end.180:                                     ; preds = %cond.false.179, %cond.end.177
  %cond181 = phi i32 [ %cond178, %cond.end.177 ], [ 0, %cond.false.179 ]
  %sub182 = sub nsw i32 %70, %cond181
  %141 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents183 = getelementptr inbounds %struct.window, %struct.window* %141, i32 0, i32 10
  %142 = load i64, i64* %contents183, align 8
  %call184 = call zeroext i1 @BUFFERP(i64 %142)
  br i1 %call184, label %cond.true.185, label %cond.false.216

cond.true.185:                                    ; preds = %cond.end.180
  %143 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini186 = getelementptr inbounds %struct.window, %struct.window* %143, i32 0, i32 67
  %bf.load187 = load i16, i16* %mini186, align 4
  %bf.clear188 = and i16 %bf.load187, 1
  %bf.cast189 = trunc i16 %bf.clear188 to i1
  br i1 %bf.cast189, label %cond.false.279, label %land.lhs.true.190

land.lhs.true.190:                                ; preds = %cond.true.185
  %144 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p191 = getelementptr inbounds %struct.window, %struct.window* %144, i32 0, i32 67
  %bf.load192 = load i16, i16* %pseudo_window_p191, align 4
  %bf.lshr193 = lshr i16 %bf.load192, 11
  %bf.clear194 = and i16 %bf.lshr193, 1
  %bf.cast195 = trunc i16 %bf.clear194 to i1
  br i1 %bf.cast195, label %cond.false.279, label %land.lhs.true.196

land.lhs.true.196:                                ; preds = %land.lhs.true.190
  %145 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame197 = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 1
  %146 = load i64, i64* %frame197, align 8
  %sub198 = sub nsw i64 %146, 5
  %147 = inttoptr i64 %sub198 to i8*
  %148 = bitcast i8* %147 to %struct.frame*
  %wants_modeline199 = getelementptr inbounds %struct.frame, %struct.frame* %148, i32 0, i32 26
  %149 = bitcast i48* %wants_modeline199 to i64*
  %bf.load200 = load i64, i64* %149, align 8
  %bf.lshr201 = lshr i64 %bf.load200, 14
  %bf.clear202 = and i64 %bf.lshr201, 1
  %bf.cast203 = trunc i64 %bf.clear202 to i1
  br i1 %bf.cast203, label %land.lhs.true.204, label %cond.false.279

land.lhs.true.204:                                ; preds = %land.lhs.true.196
  %150 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents205 = getelementptr inbounds %struct.window, %struct.window* %150, i32 0, i32 10
  %151 = load i64, i64* %contents205, align 8
  %call206 = call %struct.buffer* @XBUFFER(i64 %151)
  %mode_line_format_207 = getelementptr inbounds %struct.buffer, %struct.buffer* %call206, i32 0, i32 12
  %152 = load i64, i64* %mode_line_format_207, align 8
  %call208 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp209 = icmp eq i64 %152, %call208
  br i1 %cmp209, label %cond.false.279, label %land.lhs.true.210

land.lhs.true.210:                                ; preds = %land.lhs.true.204
  %153 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height211 = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 35
  %154 = load i32, i32* %pixel_height211, align 4
  %155 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame212 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 1
  %156 = load i64, i64* %frame212, align 8
  %sub213 = sub nsw i64 %156, 5
  %157 = inttoptr i64 %sub213 to i8*
  %158 = bitcast i8* %157 to %struct.frame*
  %line_height214 = getelementptr inbounds %struct.frame, %struct.frame* %158, i32 0, i32 60
  %159 = load i32, i32* %line_height214, align 4
  %cmp215 = icmp sgt i32 %154, %159
  br i1 %cmp215, label %cond.true.217, label %cond.false.279

cond.false.216:                                   ; preds = %cond.end.180
  br i1 false, label %cond.true.217, label %cond.false.279

cond.true.217:                                    ; preds = %cond.false.216, %land.lhs.true.210
  %160 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %160, i32 0, i32 63
  %161 = load i32, i32* %mode_line_height, align 4
  %cmp218 = icmp sge i32 %161, 0
  br i1 %cmp218, label %cond.true.219, label %cond.false.221

cond.true.219:                                    ; preds = %cond.true.217
  %162 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height220 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 63
  %163 = load i32, i32* %mode_line_height220, align 4
  br label %cond.end.277

cond.false.221:                                   ; preds = %cond.true.217
  %164 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix222 = getelementptr inbounds %struct.window, %struct.window* %164, i32 0, i32 24
  %165 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix222, align 8
  %tobool223 = icmp ne %struct.glyph_matrix* %165, null
  br i1 %tobool223, label %land.lhs.true.224, label %cond.false.235

land.lhs.true.224:                                ; preds = %cond.false.221
  %166 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix225 = getelementptr inbounds %struct.window, %struct.window* %166, i32 0, i32 24
  %167 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix225, align 8
  %rows226 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %167, i32 0, i32 1
  %168 = load %struct.glyph_row*, %struct.glyph_row** %rows226, align 8
  %tobool227 = icmp ne %struct.glyph_row* %168, null
  br i1 %tobool227, label %cond.true.228, label %cond.false.235

cond.true.228:                                    ; preds = %land.lhs.true.224
  %169 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix229 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 24
  %170 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix229, align 8
  %rows230 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %170, i32 0, i32 1
  %171 = load %struct.glyph_row*, %struct.glyph_row** %rows230, align 8
  %172 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix231 = getelementptr inbounds %struct.window, %struct.window* %172, i32 0, i32 24
  %173 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix231, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %173, i32 0, i32 3
  %174 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %174 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %171, i64 %idx.ext
  %add.ptr232 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height233 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr232, i32 0, i32 7
  %175 = load i32, i32* %height233, align 4
  %tobool234 = icmp ne i32 %175, 0
  br i1 %tobool234, label %cond.true.236, label %cond.false.255

cond.false.235:                                   ; preds = %land.lhs.true.224, %cond.false.221
  br i1 false, label %cond.true.236, label %cond.false.255

cond.true.236:                                    ; preds = %cond.false.235, %cond.true.228
  %176 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix237 = getelementptr inbounds %struct.window, %struct.window* %176, i32 0, i32 24
  %177 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix237, align 8
  %tobool238 = icmp ne %struct.glyph_matrix* %177, null
  br i1 %tobool238, label %land.lhs.true.239, label %cond.false.252

land.lhs.true.239:                                ; preds = %cond.true.236
  %178 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix240 = getelementptr inbounds %struct.window, %struct.window* %178, i32 0, i32 24
  %179 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix240, align 8
  %rows241 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %179, i32 0, i32 1
  %180 = load %struct.glyph_row*, %struct.glyph_row** %rows241, align 8
  %tobool242 = icmp ne %struct.glyph_row* %180, null
  br i1 %tobool242, label %cond.true.243, label %cond.false.252

cond.true.243:                                    ; preds = %land.lhs.true.239
  %181 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix244 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 24
  %182 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix244, align 8
  %rows245 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %182, i32 0, i32 1
  %183 = load %struct.glyph_row*, %struct.glyph_row** %rows245, align 8
  %184 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix246 = getelementptr inbounds %struct.window, %struct.window* %184, i32 0, i32 24
  %185 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix246, align 8
  %nrows247 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %185, i32 0, i32 3
  %186 = load i32, i32* %nrows247, align 4
  %idx.ext248 = sext i32 %186 to i64
  %add.ptr249 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %183, i64 %idx.ext248
  %add.ptr250 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr249, i64 -1
  %height251 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr250, i32 0, i32 7
  %187 = load i32, i32* %height251, align 4
  br label %cond.end.253

cond.false.252:                                   ; preds = %land.lhs.true.239, %cond.true.236
  br label %cond.end.253

cond.end.253:                                     ; preds = %cond.false.252, %cond.true.243
  %cond254 = phi i32 [ %187, %cond.true.243 ], [ 0, %cond.false.252 ]
  br label %cond.end.274

cond.false.255:                                   ; preds = %cond.false.235, %cond.true.228
  %188 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame256 = getelementptr inbounds %struct.window, %struct.window* %188, i32 0, i32 1
  %189 = load i64, i64* %frame256, align 8
  %sub257 = sub nsw i64 %189, 5
  %190 = inttoptr i64 %sub257 to i8*
  %191 = bitcast i8* %190 to %struct.frame*
  %192 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool258 = trunc i8 %192 to i1
  br i1 %tobool258, label %lor.lhs.false.259, label %lor.end

lor.lhs.false.259:                                ; preds = %cond.false.255
  %193 = load %struct.window*, %struct.window** %w.addr, align 8
  %194 = load i64, i64* @selected_window, align 8
  %call260 = call %struct.window* @XWINDOW(i64 %194)
  %cmp261 = icmp eq %struct.window* %193, %call260
  br i1 %cmp261, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.259
  %195 = load i64, i64* @minibuf_level, align 8
  %cmp262 = icmp sgt i64 %195, 0
  br i1 %cmp262, label %land.lhs.true.263, label %land.end

land.lhs.true.263:                                ; preds = %lor.rhs
  %196 = load i64, i64* @minibuf_selected_window, align 8
  %call264 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp265 = icmp eq i64 %196, %call264
  br i1 %cmp265, label %land.end, label %land.lhs.true.266

land.lhs.true.266:                                ; preds = %land.lhs.true.263
  %197 = load i64, i64* @selected_window, align 8
  %call267 = call %struct.window* @XWINDOW(i64 %197)
  %198 = load i64, i64* @minibuf_window, align 8
  %call268 = call %struct.window* @XWINDOW(i64 %198)
  %cmp269 = icmp eq %struct.window* %call267, %call268
  br i1 %cmp269, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.266
  %199 = load %struct.window*, %struct.window** %w.addr, align 8
  %200 = load i64, i64* @minibuf_selected_window, align 8
  %call270 = call %struct.window* @XWINDOW(i64 %200)
  %cmp271 = icmp eq %struct.window* %199, %call270
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.266, %land.lhs.true.263, %lor.rhs
  %201 = phi i1 [ false, %land.lhs.true.266 ], [ false, %land.lhs.true.263 ], [ false, %lor.rhs ], [ %cmp271, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.259, %cond.false.255
  %202 = phi i1 [ true, %lor.lhs.false.259 ], [ true, %cond.false.255 ], [ %201, %land.end ]
  %cond272 = select i1 %202, i32 1, i32 2
  %call273 = call i32 @estimate_mode_line_height(%struct.frame* %191, i32 %cond272)
  br label %cond.end.274

cond.end.274:                                     ; preds = %lor.end, %cond.end.253
  %cond275 = phi i32 [ %cond254, %cond.end.253 ], [ %call273, %lor.end ]
  %203 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height276 = getelementptr inbounds %struct.window, %struct.window* %203, i32 0, i32 63
  store i32 %cond275, i32* %mode_line_height276, align 4
  br label %cond.end.277

cond.end.277:                                     ; preds = %cond.end.274, %cond.true.219
  %cond278 = phi i32 [ %163, %cond.true.219 ], [ %cond275, %cond.end.274 ]
  br label %cond.end.280

cond.false.279:                                   ; preds = %cond.false.216, %land.lhs.true.210, %land.lhs.true.204, %land.lhs.true.196, %land.lhs.true.190, %cond.true.185
  br label %cond.end.280

cond.end.280:                                     ; preds = %cond.false.279, %cond.end.277
  %cond281 = phi i32 [ %cond278, %cond.end.277 ], [ 0, %cond.false.279 ]
  %sub282 = sub nsw i32 %sub182, %cond281
  %204 = load i32, i32* %iheight, align 4
  %cmp283 = icmp sgt i32 %204, 0
  br i1 %cmp283, label %cond.true.284, label %cond.false.285

cond.true.284:                                    ; preds = %cond.end.280
  %205 = load i32, i32* %iheight, align 4
  br label %cond.end.286

cond.false.285:                                   ; preds = %cond.end.280
  br label %cond.end.286

cond.end.286:                                     ; preds = %cond.false.285, %cond.true.284
  %cond287 = phi i32 [ %205, %cond.true.284 ], [ 0, %cond.false.285 ]
  %sub288 = sub nsw i32 %sub282, %cond287
  %206 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame289 = getelementptr inbounds %struct.window, %struct.window* %206, i32 0, i32 1
  %207 = load i64, i64* %frame289, align 8
  %sub290 = sub nsw i64 %207, 5
  %208 = inttoptr i64 %sub290 to i8*
  %209 = bitcast i8* %208 to %struct.frame*
  %line_height291 = getelementptr inbounds %struct.frame, %struct.frame* %209, i32 0, i32 60
  %210 = load i32, i32* %line_height291, align 4
  %cmp292 = icmp sge i32 %sub288, %210
  br i1 %cmp292, label %if.then.293, label %if.end.295

if.then.293:                                      ; preds = %cond.end.286
  %211 = load i32, i32* %iheight, align 4
  %212 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height294 = getelementptr inbounds %struct.window, %struct.window* %212, i32 0, i32 62
  store i32 %211, i32* %scroll_bar_height294, align 4
  %213 = load %struct.window*, %struct.window** %w.addr, align 8
  %214 = load i64, i64* %horizontal_type.addr, align 8
  call void @wset_horizontal_scroll_bar_type(%struct.window* %213, i64 %214)
  store i8 1, i8* %changed, align 1
  br label %if.end.295

if.end.295:                                       ; preds = %if.then.293, %cond.end.286
  br label %if.end.296

if.end.296:                                       ; preds = %if.end.295, %lor.lhs.false.71
  %215 = load i8, i8* %changed, align 1
  %tobool297 = trunc i8 %215 to i1
  br i1 %tobool297, label %cond.true.298, label %cond.false.299

cond.true.298:                                    ; preds = %if.end.296
  %216 = load %struct.window*, %struct.window** %w.addr, align 8
  br label %cond.end.300

cond.false.299:                                   ; preds = %if.end.296
  br label %cond.end.300

cond.end.300:                                     ; preds = %cond.false.299, %cond.true.298
  %cond301 = phi %struct.window* [ %216, %cond.true.298 ], [ null, %cond.false.299 ]
  ret %struct.window* %cond301
}

; Function Attrs: nounwind uwtable
define internal %struct.window* @set_window_margins(%struct.window* %w, i64 %left_width, i64 %right_width) #0 {
entry:
  %retval = alloca %struct.window*, align 8
  %w.addr = alloca %struct.window*, align 8
  %left_width.addr = alloca i64, align 8
  %right_width.addr = alloca i64, align 8
  %unit = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %left_width, i64* %left_width.addr, align 8
  store i64 %right_width, i64* %right_width.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 59
  %4 = load i32, i32* %column_width, align 4
  store i32 %4, i32* %unit, align 4
  %5 = load i64, i64* %left_width.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i64, i64* %left_width.addr, align 8
  %call1 = call i32 @extract_dimension(i64 %6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call1, %cond.false ]
  store i32 %cond, i32* %left, align 4
  %7 = load i64, i64* %right_width.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %7, %call2
  br i1 %cmp3, label %cond.true.4, label %cond.false.5

cond.true.4:                                      ; preds = %cond.end
  br label %cond.end.7

cond.false.5:                                     ; preds = %cond.end
  %8 = load i64, i64* %right_width.addr, align 8
  %call6 = call i32 @extract_dimension(i64 %8)
  br label %cond.end.7

cond.end.7:                                       ; preds = %cond.false.5, %cond.true.4
  %cond8 = phi i32 [ 0, %cond.true.4 ], [ %call6, %cond.false.5 ]
  store i32 %cond8, i32* %right, align 4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 59
  %10 = load i32, i32* %left_margin_cols, align 4
  %11 = load i32, i32* %left, align 4
  %cmp9 = icmp ne i32 %10, %11
  br i1 %cmp9, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.7
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 60
  %13 = load i32, i32* %right_margin_cols, align 4
  %14 = load i32, i32* %right, align 4
  %cmp10 = icmp ne i32 %13, %14
  br i1 %cmp10, label %if.then, label %if.else.118

if.then:                                          ; preds = %lor.lhs.false, %cond.end.7
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 34
  %16 = load i32, i32* %pixel_width, align 4
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 57
  %18 = load i32, i32* %left_fringe_width, align 4
  %cmp11 = icmp sge i32 %18, 0
  br i1 %cmp11, label %cond.true.12, label %cond.false.14

cond.true.12:                                     ; preds = %if.then
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width13 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 57
  %20 = load i32, i32* %left_fringe_width13, align 4
  br label %cond.end.18

cond.false.14:                                    ; preds = %if.then
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame15 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 1
  %22 = load i64, i64* %frame15, align 8
  %sub16 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub16 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %left_fringe_width17 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 54
  %25 = load i32, i32* %left_fringe_width17, align 4
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.14, %cond.true.12
  %cond19 = phi i32 [ %20, %cond.true.12 ], [ %25, %cond.false.14 ]
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 58
  %27 = load i32, i32* %right_fringe_width, align 4
  %cmp20 = icmp sge i32 %27, 0
  br i1 %cmp20, label %cond.true.21, label %cond.false.23

cond.true.21:                                     ; preds = %cond.end.18
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width22 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 58
  %29 = load i32, i32* %right_fringe_width22, align 4
  br label %cond.end.27

cond.false.23:                                    ; preds = %cond.end.18
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame24 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 1
  %31 = load i64, i64* %frame24, align 8
  %sub25 = sub nsw i64 %31, 5
  %32 = inttoptr i64 %sub25 to i8*
  %33 = bitcast i8* %32 to %struct.frame*
  %right_fringe_width26 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 55
  %34 = load i32, i32* %right_fringe_width26, align 4
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.23, %cond.true.21
  %cond28 = phi i32 [ %29, %cond.true.21 ], [ %34, %cond.false.23 ]
  %add = add nsw i32 %cond19, %cond28
  %sub29 = sub nsw i32 %16, %add
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %cond.end.27
  br label %cond.end.56

cond.false.31:                                    ; preds = %cond.end.27
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 16
  %37 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp33 = icmp eq i64 %37, %call32
  br i1 %cmp33, label %cond.true.34, label %cond.false.42

cond.true.34:                                     ; preds = %cond.false.31
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame35 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 1
  %39 = load i64, i64* %frame35, align 8
  %sub36 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub36 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %vertical_scroll_bar_type37 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 26
  %42 = bitcast i48* %vertical_scroll_bar_type37 to i64*
  %bf.load38 = load i64, i64* %42, align 8
  %bf.lshr39 = lshr i64 %bf.load38, 30
  %bf.clear40 = and i64 %bf.lshr39, 3
  %bf.cast41 = trunc i64 %bf.clear40 to i32
  br label %cond.end.54

cond.false.42:                                    ; preds = %cond.false.31
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type43 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 16
  %44 = load i64, i64* %vertical_scroll_bar_type43, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp45 = icmp eq i64 %44, %call44
  br i1 %cmp45, label %cond.true.46, label %cond.false.47

cond.true.46:                                     ; preds = %cond.false.42
  br label %cond.end.52

cond.false.47:                                    ; preds = %cond.false.42
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type48 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 16
  %46 = load i64, i64* %vertical_scroll_bar_type48, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp50 = icmp eq i64 %46, %call49
  %cond51 = select i1 %cmp50, i32 2, i32 0
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.47, %cond.true.46
  %cond53 = phi i32 [ 1, %cond.true.46 ], [ %cond51, %cond.false.47 ]
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.end.52, %cond.true.34
  %cond55 = phi i32 [ %bf.cast41, %cond.true.34 ], [ %cond53, %cond.end.52 ]
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.end.54, %cond.true.30
  %cond57 = phi i32 [ 0, %cond.true.30 ], [ %cond55, %cond.end.54 ]
  %cmp58 = icmp eq i32 %cond57, 1
  br i1 %cmp58, label %cond.true.95, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %cond.end.56
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p60 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 67
  %bf.load61 = load i16, i16* %pseudo_window_p60, align 4
  %bf.lshr62 = lshr i16 %bf.load61, 11
  %bf.clear63 = and i16 %bf.lshr62, 1
  %bf.cast64 = trunc i16 %bf.clear63 to i1
  br i1 %bf.cast64, label %cond.true.65, label %cond.false.66

cond.true.65:                                     ; preds = %lor.lhs.false.59
  br label %cond.end.92

cond.false.66:                                    ; preds = %lor.lhs.false.59
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type67 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 16
  %49 = load i64, i64* %vertical_scroll_bar_type67, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp69 = icmp eq i64 %49, %call68
  br i1 %cmp69, label %cond.true.70, label %cond.false.78

cond.true.70:                                     ; preds = %cond.false.66
  %50 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame71 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 1
  %51 = load i64, i64* %frame71, align 8
  %sub72 = sub nsw i64 %51, 5
  %52 = inttoptr i64 %sub72 to i8*
  %53 = bitcast i8* %52 to %struct.frame*
  %vertical_scroll_bar_type73 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 26
  %54 = bitcast i48* %vertical_scroll_bar_type73 to i64*
  %bf.load74 = load i64, i64* %54, align 8
  %bf.lshr75 = lshr i64 %bf.load74, 30
  %bf.clear76 = and i64 %bf.lshr75, 3
  %bf.cast77 = trunc i64 %bf.clear76 to i32
  br label %cond.end.90

cond.false.78:                                    ; preds = %cond.false.66
  %55 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type79 = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 16
  %56 = load i64, i64* %vertical_scroll_bar_type79, align 8
  %call80 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp81 = icmp eq i64 %56, %call80
  br i1 %cmp81, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %cond.false.78
  br label %cond.end.88

cond.false.83:                                    ; preds = %cond.false.78
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type84 = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 16
  %58 = load i64, i64* %vertical_scroll_bar_type84, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp86 = icmp eq i64 %58, %call85
  %cond87 = select i1 %cmp86, i32 2, i32 0
  br label %cond.end.88

cond.end.88:                                      ; preds = %cond.false.83, %cond.true.82
  %cond89 = phi i32 [ 1, %cond.true.82 ], [ %cond87, %cond.false.83 ]
  br label %cond.end.90

cond.end.90:                                      ; preds = %cond.end.88, %cond.true.70
  %cond91 = phi i32 [ %bf.cast77, %cond.true.70 ], [ %cond89, %cond.end.88 ]
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.end.90, %cond.true.65
  %cond93 = phi i32 [ 0, %cond.true.65 ], [ %cond91, %cond.end.90 ]
  %cmp94 = icmp eq i32 %cond93, 2
  br i1 %cmp94, label %cond.true.95, label %cond.false.104

cond.true.95:                                     ; preds = %cond.end.92, %cond.end.56
  %59 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 61
  %60 = load i32, i32* %scroll_bar_width, align 4
  %cmp96 = icmp sge i32 %60, 0
  br i1 %cmp96, label %cond.true.97, label %cond.false.99

cond.true.97:                                     ; preds = %cond.true.95
  %61 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width98 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 61
  %62 = load i32, i32* %scroll_bar_width98, align 4
  br label %cond.end.102

cond.false.99:                                    ; preds = %cond.true.95
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame100 = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 1
  %64 = load i64, i64* %frame100, align 8
  %sub101 = sub nsw i64 %64, 5
  %65 = inttoptr i64 %sub101 to i8*
  %66 = bitcast i8* %65 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 69
  %67 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.99, %cond.true.97
  %cond103 = phi i32 [ %62, %cond.true.97 ], [ %67, %cond.false.99 ]
  br label %cond.end.105

cond.false.104:                                   ; preds = %cond.end.92
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.104, %cond.end.102
  %cond106 = phi i32 [ %cond103, %cond.end.102 ], [ 0, %cond.false.104 ]
  %sub107 = sub nsw i32 %sub29, %cond106
  %68 = load i32, i32* %left, align 4
  %69 = load i32, i32* %right, align 4
  %add108 = add nsw i32 %68, %69
  %70 = load i32, i32* %unit, align 4
  %mul = mul nsw i32 %add108, %70
  %sub109 = sub nsw i32 %sub107, %mul
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame110 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 1
  %72 = load i64, i64* %frame110, align 8
  %sub111 = sub nsw i64 %72, 5
  %73 = inttoptr i64 %sub111 to i8*
  %74 = bitcast i8* %73 to %struct.frame*
  %column_width112 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 59
  %75 = load i32, i32* %column_width112, align 4
  %mul113 = mul nsw i32 2, %75
  %cmp114 = icmp sge i32 %sub109, %mul113
  br i1 %cmp114, label %if.then.115, label %if.else

if.then.115:                                      ; preds = %cond.end.105
  %76 = load i32, i32* %left, align 4
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols116 = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 59
  store i32 %76, i32* %left_margin_cols116, align 4
  %78 = load i32, i32* %right, align 4
  %79 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols117 = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 60
  store i32 %78, i32* %right_margin_cols117, align 4
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  store %struct.window* %80, %struct.window** %retval
  br label %return

if.else:                                          ; preds = %cond.end.105
  store %struct.window* null, %struct.window** %retval
  br label %return

if.else.118:                                      ; preds = %lor.lhs.false
  store %struct.window* null, %struct.window** %retval
  br label %return

return:                                           ; preds = %if.else.118, %if.else, %if.then.115
  %81 = load %struct.window*, %struct.window** %retval
  ret %struct.window* %81
}

; Function Attrs: nounwind uwtable
define internal void @apply_window_adjustment(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 24
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %1)
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load = load i16, i16* %window_end_valid, align 4
  %bf.clear = and i16 %bf.load, -8193
  store i16 %bf.clear, i16* %window_end_valid, align 4
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @wset_redisplay(%struct.window* %3)
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  call void @adjust_frame_glyphs(%struct.frame* %7)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_buffer(i64 %window, i64 %buffer_or_name, i64 %keep_margins) #0 {
entry:
  %window.addr = alloca i64, align 8
  %buffer_or_name.addr = alloca i64, align 8
  %keep_margins.addr = alloca i64, align 8
  %tem = alloca i64, align 8
  %buffer = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %buffer_or_name, i64* %buffer_or_name.addr, align 8
  store i64 %keep_margins, i64* %keep_margins.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %2 = bitcast %struct.window* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %window.addr, align 8
  %3 = load i64, i64* %buffer_or_name.addr, align 8
  %call2 = call i64 @Fget_buffer(i64 %3)
  store i64 %call2, i64* %buffer, align 8
  %4 = load i64, i64* %buffer, align 8
  call void @CHECK_BUFFER(i64 %4)
  %5 = load i64, i64* %buffer, align 8
  %call3 = call %struct.buffer* @XBUFFER(i64 %5)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call3, i32 0, i32 1
  %6 = load i64, i64* %name_, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %entry
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents, align 8
  store i64 %8, i64* %tem, align 8
  %9 = load i64, i64* %tem, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %9, %call5
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0)) #5
  unreachable

if.else:                                          ; preds = %if.end
  %10 = load i64, i64* %tem, align 8
  %11 = load i64, i64* %buffer, align 8
  %cmp8 = icmp eq i64 %10, %11
  br i1 %cmp8, label %if.end.21, label %if.then.9

if.then.9:                                        ; preds = %if.else
  %12 = load %struct.window*, %struct.window** %w, align 8
  %dedicated = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 20
  %13 = load i64, i64* %dedicated, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp11 = icmp eq i64 %13, %call10
  br i1 %cmp11, label %if.then.12, label %if.else.16

if.then.12:                                       ; preds = %if.then.9
  %14 = load i64, i64* %tem, align 8
  %call13 = call %struct.buffer* @XBUFFER(i64 %14)
  %name_14 = getelementptr inbounds %struct.buffer, %struct.buffer* %call13, i32 0, i32 1
  %15 = load i64, i64* %name_14, align 8
  %call15 = call i8* @SDATA(i64 %15)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i32 0, i32 0), i8* %call15) #5
  unreachable

if.else.16:                                       ; preds = %if.then.9
  %16 = load %struct.window*, %struct.window** %w, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_dedicated(%struct.window* %16, i64 %call17)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.16
  %call19 = call i64 @builtin_lisp_symbol(i32 796)
  %17 = load i64, i64* %window.addr, align 8
  %call20 = call i64 @call1(i64 %call19, i64 %17)
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.18, %if.else
  %18 = load %struct.window*, %struct.window** %w, align 8
  call void @unshow_buffer(%struct.window* %18)
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21
  %19 = load i64, i64* %window.addr, align 8
  %20 = load i64, i64* %buffer, align 8
  %21 = load i64, i64* %keep_margins.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %21, %call23
  %lnot = xor i1 %cmp24, true
  call void @set_window_buffer(i64 %19, i64 %20, i1 zeroext true, i1 zeroext %lnot)
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call25
}

declare i8* @SDATA(i64) #1

; Function Attrs: nounwind uwtable
define internal void @unshow_buffer(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %buf = alloca i64, align 8
  %b = alloca %struct.buffer*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  store i64 %1, i64* %buf, align 8
  %2 = load i64, i64* %buf, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %2)
  store %struct.buffer* %call, %struct.buffer** %b, align 8
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 11
  %4 = load i64, i64* %start, align 8
  %call1 = call i64 @marker_position(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_window_start = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 90
  store i64 %call1, i64* %last_window_start, align 8
  %6 = load i64, i64* %buf, align 8
  %7 = load i64, i64* @selected_window, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %7)
  %contents3 = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 10
  %8 = load i64, i64* %contents3, align 8
  %cmp = icmp eq i64 %6, %8
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_selected_window_ = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 51
  %10 = load i64, i64* %last_selected_window_, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %10)
  br i1 %call4, label %land.lhs.true.5, label %if.then

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %12 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_selected_window_6 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 51
  %13 = load i64, i64* %last_selected_window_6, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %13)
  %cmp8 = icmp ne %struct.window* %11, %call7
  br i1 %cmp8, label %land.lhs.true.9, label %if.then

land.lhs.true.9:                                  ; preds = %land.lhs.true.5
  %14 = load i64, i64* %buf, align 8
  %15 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_selected_window_10 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 51
  %16 = load i64, i64* %last_selected_window_10, align 8
  %call11 = call %struct.window* @XWINDOW(i64 %16)
  %contents12 = getelementptr inbounds %struct.window, %struct.window* %call11, i32 0, i32 10
  %17 = load i64, i64* %contents12, align 8
  %cmp13 = icmp eq i64 %14, %17
  br i1 %cmp13, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.9, %land.lhs.true.5, %land.lhs.true
  %18 = load %struct.buffer*, %struct.buffer** %b, align 8
  %19 = load %struct.buffer*, %struct.buffer** %b, align 8
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp14 = icmp eq %struct.buffer* %19, %20
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 77
  %22 = load i64, i64* %begv, align 8
  br label %cond.end.22

cond.false:                                       ; preds = %if.then
  %23 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 46
  %24 = load i64, i64* %begv_marker_, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp16 = icmp eq i64 %24, %call15
  br i1 %cmp16, label %cond.true.17, label %cond.false.19

cond.true.17:                                     ; preds = %cond.false
  %25 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv18 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 77
  %26 = load i64, i64* %begv18, align 8
  br label %cond.end

cond.false.19:                                    ; preds = %cond.false
  %27 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_marker_20 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 46
  %28 = load i64, i64* %begv_marker_20, align 8
  %call21 = call i64 @marker_position(i64 %28)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.19, %cond.true.17
  %cond = phi i64 [ %26, %cond.true.17 ], [ %call21, %cond.false.19 ]
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.end, %cond.true
  %cond23 = phi i64 [ %22, %cond.true ], [ %cond, %cond.end ]
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 12
  %30 = load i64, i64* %pointm, align 8
  %call24 = call i64 @marker_position(i64 %30)
  %31 = load %struct.buffer*, %struct.buffer** %b, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp25 = icmp eq %struct.buffer* %31, %32
  br i1 %cmp25, label %cond.true.26, label %cond.false.27

cond.true.26:                                     ; preds = %cond.end.22
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 79
  %34 = load i64, i64* %zv, align 8
  br label %cond.end.37

cond.false.27:                                    ; preds = %cond.end.22
  %35 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 47
  %36 = load i64, i64* %zv_marker_, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %36, %call28
  br i1 %cmp29, label %cond.true.30, label %cond.false.32

cond.true.30:                                     ; preds = %cond.false.27
  %37 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv31 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 79
  %38 = load i64, i64* %zv31, align 8
  br label %cond.end.35

cond.false.32:                                    ; preds = %cond.false.27
  %39 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_marker_33 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 47
  %40 = load i64, i64* %zv_marker_33, align 8
  %call34 = call i64 @marker_position(i64 %40)
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.32, %cond.true.30
  %cond36 = phi i64 [ %38, %cond.true.30 ], [ %call34, %cond.false.32 ]
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.end.35, %cond.true.26
  %cond38 = phi i64 [ %34, %cond.true.26 ], [ %cond36, %cond.end.35 ]
  %call39 = call i64 @clip_to_bounds(i64 %cond23, i64 %call24, i64 %cond38)
  %41 = load %struct.buffer*, %struct.buffer** %b, align 8
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp40 = icmp eq %struct.buffer* %41, %42
  br i1 %cmp40, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %cond.end.37
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 78
  %44 = load i64, i64* %begv_byte, align 8
  br label %cond.end.53

cond.false.42:                                    ; preds = %cond.end.37
  %45 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_marker_43 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 46
  %46 = load i64, i64* %begv_marker_43, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %46, %call44
  br i1 %cmp45, label %cond.true.46, label %cond.false.48

cond.true.46:                                     ; preds = %cond.false.42
  %47 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_byte47 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 78
  %48 = load i64, i64* %begv_byte47, align 8
  br label %cond.end.51

cond.false.48:                                    ; preds = %cond.false.42
  %49 = load %struct.buffer*, %struct.buffer** %b, align 8
  %begv_marker_49 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 46
  %50 = load i64, i64* %begv_marker_49, align 8
  %call50 = call i64 @marker_byte_position(i64 %50)
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.48, %cond.true.46
  %cond52 = phi i64 [ %48, %cond.true.46 ], [ %call50, %cond.false.48 ]
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.end.51, %cond.true.41
  %cond54 = phi i64 [ %44, %cond.true.41 ], [ %cond52, %cond.end.51 ]
  %51 = load %struct.window*, %struct.window** %w.addr, align 8
  %pointm55 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 12
  %52 = load i64, i64* %pointm55, align 8
  %call56 = call i64 @marker_byte_position(i64 %52)
  %53 = load %struct.buffer*, %struct.buffer** %b, align 8
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp57 = icmp eq %struct.buffer* %53, %54
  br i1 %cmp57, label %cond.true.58, label %cond.false.59

cond.true.58:                                     ; preds = %cond.end.53
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 80
  %56 = load i64, i64* %zv_byte, align 8
  br label %cond.end.70

cond.false.59:                                    ; preds = %cond.end.53
  %57 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_marker_60 = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 47
  %58 = load i64, i64* %zv_marker_60, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %58, %call61
  br i1 %cmp62, label %cond.true.63, label %cond.false.65

cond.true.63:                                     ; preds = %cond.false.59
  %59 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_byte64 = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 80
  %60 = load i64, i64* %zv_byte64, align 8
  br label %cond.end.68

cond.false.65:                                    ; preds = %cond.false.59
  %61 = load %struct.buffer*, %struct.buffer** %b, align 8
  %zv_marker_66 = getelementptr inbounds %struct.buffer, %struct.buffer* %61, i32 0, i32 47
  %62 = load i64, i64* %zv_marker_66, align 8
  %call67 = call i64 @marker_byte_position(i64 %62)
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.false.65, %cond.true.63
  %cond69 = phi i64 [ %60, %cond.true.63 ], [ %call67, %cond.false.65 ]
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.end.68, %cond.true.58
  %cond71 = phi i64 [ %56, %cond.true.58 ], [ %cond69, %cond.end.68 ]
  %call72 = call i64 @clip_to_bounds(i64 %cond54, i64 %call56, i64 %cond71)
  call void @temp_set_point_both(%struct.buffer* %18, i64 %call39, i64 %call72)
  br label %if.end

if.end:                                           ; preds = %cond.end.70, %land.lhs.true.9, %entry
  %63 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_selected_window_73 = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 51
  %64 = load i64, i64* %last_selected_window_73, align 8
  %call74 = call zeroext i1 @WINDOWP(i64 %64)
  br i1 %call74, label %land.lhs.true.75, label %if.end.81

land.lhs.true.75:                                 ; preds = %if.end
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %66 = load %struct.buffer*, %struct.buffer** %b, align 8
  %last_selected_window_76 = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 51
  %67 = load i64, i64* %last_selected_window_76, align 8
  %call77 = call %struct.window* @XWINDOW(i64 %67)
  %cmp78 = icmp eq %struct.window* %65, %call77
  br i1 %cmp78, label %if.then.79, label %if.end.81

if.then.79:                                       ; preds = %land.lhs.true.75
  %68 = load %struct.buffer*, %struct.buffer** %b, align 8
  %call80 = call i64 @builtin_lisp_symbol(i32 0)
  call void @bset_last_selected_window(%struct.buffer* %68, i64 %call80)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.79, %land.lhs.true.75, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fforce_window_update(i64 %object) #0 {
entry:
  %retval = alloca i64, align 8
  %object.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 29, i32* @windows_or_buffers_changed, align 4
  store i32 28, i32* @update_mode_lines, align 4
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %1)
  br i1 %call2, label %if.then.3, label %if.end.14

if.then.3:                                        ; preds = %if.end
  %2 = load i64, i64* %object.addr, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %2)
  store %struct.window* %call4, %struct.window** %w, align 8
  %3 = load i64, i64* %object.addr, align 8
  call void @mark_window_display_accurate(i64 %3, i1 zeroext false)
  %4 = load %struct.window*, %struct.window** %w, align 8
  %update_mode_line = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 67
  %bf.load = load i16, i16* %update_mode_line, align 4
  %bf.clear = and i16 %bf.load, -5
  %bf.set = or i16 %bf.clear, 4
  store i16 %bf.set, i16* %update_mode_line, align 4
  %5 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call5 = call zeroext i1 @BUFFERP(i64 %6)
  br i1 %call5, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.then.3
  %7 = load %struct.window*, %struct.window** %w, align 8
  %contents7 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents7, align 8
  %call8 = call %struct.buffer* @XBUFFER(i64 %8)
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %call8, i32 0, i32 94
  %bf.load9 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear10 = and i8 %bf.load9, -2
  %bf.set11 = or i8 %bf.clear10, 1
  store i8 %bf.set11, i8* %prevent_redisplay_optimizations_p, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.6, %if.then.3
  store i32 29, i32* @update_mode_lines, align 4
  %call13 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call13, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.end
  %9 = load i64, i64* %object.addr, align 8
  %call15 = call zeroext i1 @STRINGP(i64 %9)
  br i1 %call15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.end.14
  %10 = load i64, i64* %object.addr, align 8
  %call17 = call i64 @Fget_buffer(i64 %10)
  store i64 %call17, i64* %object.addr, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.end.14
  %11 = load i64, i64* %object.addr, align 8
  %call19 = call zeroext i1 @BUFFERP(i64 %11)
  br i1 %call19, label %land.lhs.true, label %if.end.33

land.lhs.true:                                    ; preds = %if.end.18
  %12 = load i64, i64* %object.addr, align 8
  %call20 = call %struct.buffer* @XBUFFER(i64 %12)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call20, i32 0, i32 1
  %13 = load i64, i64* %name_, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %13, %call21
  br i1 %cmp22, label %if.end.33, label %land.lhs.true.23

land.lhs.true.23:                                 ; preds = %land.lhs.true
  %14 = load i64, i64* %object.addr, align 8
  %call24 = call %struct.buffer* @XBUFFER(i64 %14)
  %call25 = call i32 @buffer_window_count(%struct.buffer* %call24)
  %tobool = icmp ne i32 %call25, 0
  br i1 %tobool, label %if.then.26, label %if.end.33

if.then.26:                                       ; preds = %land.lhs.true.23
  %15 = load i64, i64* %object.addr, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 1005)
  %call28 = call i64 @window_loop(i32 3, i64 %15, i1 zeroext false, i64 %call27)
  store i64 %call28, i64* %object.addr, align 8
  %16 = load i64, i64* %object.addr, align 8
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp30 = icmp eq i64 %16, %call29
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.26
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %if.then.26
  %call32 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call31, %cond.true ], [ %call32, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end.33:                                        ; preds = %land.lhs.true.23, %land.lhs.true, %if.end.18
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call34, i64* %retval
  br label %return

return:                                           ; preds = %if.end.33, %cond.end, %if.end.12, %if.then
  %17 = load i64, i64* %retval
  ret i64 %17
}

declare void @mark_window_display_accurate(i64, i1 zeroext) #1

declare zeroext i1 @STRINGP(i64) #1

; Function Attrs: nounwind uwtable
define void @temp_output_buffer_show(i64 %buf) #0 {
entry:
  %buf.addr = alloca i64, align 8
  %old = alloca %struct.buffer*, align 8
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %count = alloca i64, align 8
  %prev_window = alloca i64, align 8
  %prev_buffer = alloca i64, align 8
  store i64 %buf, i64* %buf.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %0, %struct.buffer** %old, align 8
  %1 = load i64, i64* %buf.addr, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %1)
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %directory_ = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 3
  %3 = load i64, i64* %directory_, align 8
  call void @bset_directory(%struct.buffer* %call, i64 %3)
  %4 = load i64, i64* %buf.addr, align 8
  %call1 = call i64 @Fset_buffer(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 73
  %6 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %6, i32 0, i32 6
  %7 = load i64, i64* %modiff, align 8
  %8 = load i64, i64* %buf.addr, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %8)
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %call2, i32 0, i32 73
  %9 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %9, i32 0, i32 8
  store i64 %7, i64* %save_modiff, align 8
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 77
  store i64 1, i64* %begv, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 2
  %13 = load i64, i64* %z, align 8
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 79
  store i64 %13, i64* %zv, align 8
  call void @set_point(i64 1)
  %15 = load %struct.buffer*, %struct.buffer** %old, align 8
  call void @set_buffer_internal(%struct.buffer* %15)
  %16 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 288), align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %16, %call5
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %17 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 288), align 8
  %18 = load i64, i64* %buf.addr, align 8
  %call6 = call i64 @call1(i64 %17, i64 %18)
  br label %if.end.37

if.else:                                          ; preds = %entry
  %19 = load i64, i64* %buf.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @display_buffer(i64 %19, i64 %call7, i64 %call8)
  store i64 %call9, i64* %window, align 8
  %call10 = call zeroext i1 @WINDOWP(i64 %call9)
  br i1 %call10, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %if.else
  %20 = load i64, i64* %buf.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %call13 = call i64 @display_buffer(i64 %20, i64 %call11, i64 %call12)
  store i64 %call13, i64* %window, align 8
  %call14 = call %struct.window* @XWINDOW(i64 %call13)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call14, i32 0, i32 10
  %21 = load i64, i64* %contents, align 8
  %call15 = call zeroext i1 @BUFFERP(i64 %21)
  br i1 %call15, label %if.then.16, label %if.end.36

if.then.16:                                       ; preds = %land.lhs.true
  %22 = load i64, i64* %window, align 8
  %call17 = call %struct.window* @XWINDOW(i64 %22)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call17, i32 0, i32 1
  %23 = load i64, i64* %frame, align 8
  %24 = load i64, i64* @selected_frame, align 8
  %cmp18 = icmp eq i64 %23, %24
  br i1 %cmp18, label %if.end, label %if.then.19

if.then.19:                                       ; preds = %if.then.16
  %25 = load i64, i64* %window, align 8
  %call20 = call %struct.window* @XWINDOW(i64 %25)
  %frame21 = getelementptr inbounds %struct.window, %struct.window* %call20, i32 0, i32 1
  %26 = load i64, i64* %frame21, align 8
  %call22 = call i64 @Fmake_frame_visible(i64 %26)
  br label %if.end

if.end:                                           ; preds = %if.then.19, %if.then.16
  %27 = load i64, i64* %window, align 8
  store i64 %27, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  %28 = load i64, i64* %window, align 8
  %call23 = call %struct.window* @XWINDOW(i64 %28)
  store %struct.window* %call23, %struct.window** %w, align 8
  %29 = load %struct.window*, %struct.window** %w, align 8
  %hscroll_whole = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 40
  store i64 0, i64* %hscroll_whole, align 8
  %30 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 39
  store i64 0, i64* %min_hscroll, align 8
  %31 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 38
  store i64 0, i64* %hscroll, align 8
  %32 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 67
  %bf.load = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.clear = and i16 %bf.load, 32767
  store i16 %bf.clear, i16* %suspend_auto_hscroll, align 4
  %33 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 11
  %34 = load i64, i64* %start, align 8
  %35 = load i64, i64* %buf.addr, align 8
  %call24 = call i64 @set_marker_restricted_both(i64 %34, i64 %35, i64 1, i64 1)
  %36 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 12
  %37 = load i64, i64* %pointm, align 8
  %38 = load i64, i64* %buf.addr, align 8
  %call25 = call i64 @set_marker_restricted_both(i64 %37, i64 %38, i64 1, i64 1)
  %39 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 13
  %40 = load i64, i64* %old_pointm, align 8
  %41 = load i64, i64* %buf.addr, align 8
  %call26 = call i64 @set_marker_restricted_both(i64 %40, i64 %41, i64 1, i64 1)
  %call27 = call i64 @SPECPDL_INDEX()
  store i64 %call27, i64* %count, align 8
  %42 = load i64, i64* @selected_window, align 8
  store i64 %42, i64* %prev_window, align 8
  %43 = load %struct.buffer*, %struct.buffer** %old, align 8
  %44 = bitcast %struct.buffer* %43 to i8*
  %call28 = call i64 @make_lisp_ptr(i8* %44, i32 5)
  store i64 %call28, i64* %prev_buffer, align 8
  %45 = load i64, i64* %prev_buffer, align 8
  call void @record_unwind_protect(void (i64)* @restore_buffer, i64 %45)
  %46 = load i64, i64* %prev_window, align 8
  call void @record_unwind_protect(void (i64)* @select_window_norecord, i64 %46)
  %47 = load i64, i64* %window, align 8
  %call29 = call i64 @builtin_lisp_symbol(i32 901)
  %call30 = call i64 @Fselect_window(i64 %47, i64 %call29)
  %48 = load %struct.window*, %struct.window** %w, align 8
  %contents31 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 10
  %49 = load i64, i64* %contents31, align 8
  %call32 = call i64 @Fset_buffer(i64 %49)
  %call33 = call i64 @builtin_lisp_symbol(i32 905)
  call void @run_hook(i64 %call33)
  %50 = load i64, i64* %count, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %call35 = call i64 @unbind_to(i64 %50, i64 %call34)
  br label %if.end.36

if.end.36:                                        ; preds = %if.end, %land.lhs.true, %if.else
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then
  ret void
}

declare void @bset_directory(%struct.buffer*, i64) #1

declare void @set_point(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @display_buffer(i64 %buffer, i64 %not_this_window_p, i64 %override_frame) #0 {
entry:
  %buffer.addr = alloca i64, align 8
  %not_this_window_p.addr = alloca i64, align 8
  %override_frame.addr = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  store i64 %not_this_window_p, i64* %not_this_window_p.addr, align 8
  store i64 %override_frame, i64* %override_frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 345)
  %0 = load i64, i64* %buffer.addr, align 8
  %1 = load i64, i64* %not_this_window_p.addr, align 8
  %2 = load i64, i64* %override_frame.addr, align 8
  %call1 = call i64 @call3(i64 %call, i64 %0, i64 %1, i64 %2)
  ret i64 %call1
}

declare i64 @Fmake_frame_visible(i64) #1

declare i64 @set_marker_restricted_both(i64, i64, i64, i64) #1

declare void @restore_buffer(i64) #1

declare void @run_hook(i64) #1

; Function Attrs: nounwind uwtable
define i64 @make_window() #0 {
entry:
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %call = call %struct.window* @allocate_window()
  store %struct.window* %call, %struct.window** %w, align 8
  %0 = load %struct.window*, %struct.window** %w, align 8
  %call1 = call i64 @make_float(double 1.000000e+00)
  call void @wset_normal_lines(%struct.window* %0, i64 %call1)
  %1 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i64 @make_float(double 1.000000e+00)
  call void @wset_normal_cols(%struct.window* %1, i64 %call2)
  %2 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_new_total(%struct.window* %2, i64 2)
  %3 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_new_normal(%struct.window* %3, i64 2)
  %4 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_new_pixel(%struct.window* %4, i64 2)
  %5 = load %struct.window*, %struct.window** %w, align 8
  %call3 = call i64 @Fmake_marker()
  call void @wset_start(%struct.window* %5, i64 %call3)
  %6 = load %struct.window*, %struct.window** %w, align 8
  %call4 = call i64 @Fmake_marker()
  call void @wset_pointm(%struct.window* %6, i64 %call4)
  %7 = load %struct.window*, %struct.window** %w, align 8
  %call5 = call i64 @Fmake_marker()
  call void @wset_old_pointm(%struct.window* %7, i64 %call5)
  %8 = load %struct.window*, %struct.window** %w, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 901)
  call void @wset_vertical_scroll_bar_type(%struct.window* %8, i64 %call6)
  %9 = load %struct.window*, %struct.window** %w, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 901)
  call void @wset_horizontal_scroll_bar_type(%struct.window* %9, i64 %call7)
  %10 = load %struct.window*, %struct.window** %w, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev_buffers(%struct.window* %10, i64 %call8)
  %11 = load %struct.window*, %struct.window** %w, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next_buffers(%struct.window* %11, i64 %call9)
  %12 = load %struct.window*, %struct.window** %w, align 8
  %ncols_scale_factor = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 48
  store i32 1, i32* %ncols_scale_factor, align 4
  %13 = load %struct.window*, %struct.window** %w, align 8
  %nrows_scale_factor = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 47
  store i32 1, i32* %nrows_scale_factor, align 4
  %14 = load %struct.window*, %struct.window** %w, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 58
  store i32 -1, i32* %right_fringe_width, align 4
  %15 = load %struct.window*, %struct.window** %w, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 57
  store i32 -1, i32* %left_fringe_width, align 4
  %16 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 64
  store i32 -1, i32* %header_line_height, align 4
  %17 = load %struct.window*, %struct.window** %w, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 63
  store i32 -1, i32* %mode_line_height, align 4
  %18 = load %struct.window*, %struct.window** %w, align 8
  %phys_cursor_type = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 53
  store i32 -1, i32* %phys_cursor_type, align 4
  %19 = load %struct.window*, %struct.window** %w, align 8
  %phys_cursor_width = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 54
  store i32 -1, i32* %phys_cursor_width, align 4
  %20 = load i64, i64* @sequence_number, align 8
  %inc = add nsw i64 %20, 1
  store i64 %inc, i64* @sequence_number, align 8
  %21 = load %struct.window*, %struct.window** %w, align 8
  %sequence_number = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 29
  store i64 %inc, i64* %sequence_number, align 8
  %22 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 61
  store i32 -1, i32* %scroll_bar_width, align 4
  %23 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 62
  store i32 -1, i32* %scroll_bar_height, align 4
  %24 = load %struct.window*, %struct.window** %w, align 8
  %column_number_displayed = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 46
  store i64 -1, i64* %column_number_displayed, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call10, i64* @Vwindow_list, align 8
  %25 = load %struct.window*, %struct.window** %w, align 8
  %26 = bitcast %struct.window* %25 to i8*
  %call11 = call i64 @make_lisp_ptr(i8* %26, i32 5)
  store i64 %call11, i64* %window, align 8
  %27 = load i64, i64* %window, align 8
  ret i64 %27
}

; Function Attrs: nounwind uwtable
define internal %struct.window* @allocate_window() #0 {
entry:
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 60, i32 23, i32 60, i32 4)
  %0 = bitcast %struct.Lisp_Vector* %call to %struct.window*
  ret %struct.window* %0
}

; Function Attrs: nounwind uwtable
define internal void @wset_normal_lines(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 5
  store i64 %0, i64* %normal_lines, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wset_normal_cols(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 6
  store i64 %0, i64* %normal_cols, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wset_new_total(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_total = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 7
  store i64 %0, i64* %new_total, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wset_new_normal(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_normal = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 8
  store i64 %0, i64* %new_normal, align 8
  ret void
}

declare void @wset_new_pixel(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @wset_start(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 11
  store i64 %0, i64* %start, align 8
  ret void
}

declare i64 @Fmake_marker() #1

; Function Attrs: nounwind uwtable
define internal void @wset_pointm(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 12
  store i64 %0, i64* %pointm, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wset_old_pointm(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 13
  store i64 %0, i64* %old_pointm, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wset_vertical_scroll_bar_type(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 16
  store i64 %0, i64* %vertical_scroll_bar_type, align 8
  ret void
}

declare void @wset_horizontal_scroll_bar_type(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_new_pixel(i64 %window, i64 %size, i64 %add) #0 {
entry:
  %window.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %add.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %size_min = alloca i64, align 8
  %size_max = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %add, i64* %add.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %add.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 9
  %3 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %3, 2
  %sub = sub nsw i64 0, %shr
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub, %cond.false ]
  store i64 %cond, i64* %size_min, align 8
  %4 = load i64, i64* %size_min, align 8
  %add2 = add nsw i64 %4, 2147483647
  store i64 %add2, i64* %size_max, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %5 = load i64, i64* %size.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %and3 = and i32 %conv, -5
  %cmp4 = icmp eq i32 %and3, 2
  br i1 %cmp4, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %do.body
  br label %cond.end.9

cond.false.7:                                     ; preds = %do.body
  %call8 = call i64 @builtin_lisp_symbol(i32 559)
  %6 = load i64, i64* %size.addr, align 8
  %7 = call i64 @wrong_type_argument(i64 %call8, i64 %6) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.9

cond.end.9:                                       ; preds = %8, %cond.true.6
  %9 = load i64, i64* %size_min, align 8
  %10 = load i64, i64* %size.addr, align 8
  %shr10 = ashr i64 %10, 2
  %cmp11 = icmp sle i64 %9, %shr10
  br i1 %cmp11, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end.9
  %11 = load i64, i64* %size.addr, align 8
  %shr13 = ashr i64 %11, 2
  %12 = load i64, i64* %size_max, align 8
  %cmp14 = icmp sle i64 %shr13, %12
  br i1 %cmp14, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end.9
  %13 = load i64, i64* %size.addr, align 8
  %14 = load i64, i64* %size_min, align 8
  %cmp16 = icmp slt i64 %14, 0
  br i1 %cmp16, label %land.lhs.true.18, label %cond.false.22

land.lhs.true.18:                                 ; preds = %if.then
  %15 = load i64, i64* %size_min, align 8
  %cmp19 = icmp slt i64 %15, -2305843009213693952
  br i1 %cmp19, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %land.lhs.true.18
  br label %cond.end.23

cond.false.22:                                    ; preds = %land.lhs.true.18, %if.then
  %16 = load i64, i64* %size_min, align 8
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.22, %cond.true.21
  %cond24 = phi i64 [ -2305843009213693952, %cond.true.21 ], [ %16, %cond.false.22 ]
  %shl = shl i64 %cond24, 2
  %add25 = add i64 %shl, 2
  %17 = load i64, i64* %size_max, align 8
  %cmp26 = icmp slt i64 %17, 2305843009213693951
  br i1 %cmp26, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %cond.end.23
  %18 = load i64, i64* %size_max, align 8
  br label %cond.end.30

cond.false.29:                                    ; preds = %cond.end.23
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.29, %cond.true.28
  %cond31 = phi i64 [ %18, %cond.true.28 ], [ 2305843009213693951, %cond.false.29 ]
  %shl32 = shl i64 %cond31, 2
  %add33 = add i64 %shl32, 2
  call void @args_out_of_range_3(i64 %13, i64 %add25, i64 %add33) #5
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %19 = load i64, i64* %add.addr, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %19, %call34
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %do.end
  %20 = load %struct.window*, %struct.window** %w, align 8
  %21 = load i64, i64* %size.addr, align 8
  call void @wset_new_pixel(%struct.window* %20, i64 %21)
  br label %if.end.44

if.else:                                          ; preds = %do.end
  %22 = load %struct.window*, %struct.window** %w, align 8
  %23 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel38 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 9
  %24 = load i64, i64* %new_pixel38, align 8
  %shr39 = ashr i64 %24, 2
  %25 = load i64, i64* %size.addr, align 8
  %shr40 = ashr i64 %25, 2
  %add41 = add nsw i64 %shr39, %shr40
  %shl42 = shl i64 %add41, 2
  %add43 = add i64 %shl42, 2
  call void @wset_new_pixel(%struct.window* %22, i64 %add43)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.37
  %26 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel45 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 9
  %27 = load i64, i64* %new_pixel45, align 8
  ret i64 %27
}

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @Fset_window_new_total(i64 %window, i64 %size, i64 %add) #0 {
entry:
  %window.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %add.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %add, i64* %add.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %size.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %size.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call3, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %add.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %5, %call4
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %6 = load %struct.window*, %struct.window** %w, align 8
  %7 = load i64, i64* %size.addr, align 8
  call void @wset_new_total(%struct.window* %6, i64 %7)
  br label %if.end

if.else:                                          ; preds = %cond.end
  %8 = load %struct.window*, %struct.window** %w, align 8
  %9 = load %struct.window*, %struct.window** %w, align 8
  %new_total = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 7
  %10 = load i64, i64* %new_total, align 8
  %shr = ashr i64 %10, 2
  %11 = load i64, i64* %size.addr, align 8
  %shr7 = ashr i64 %11, 2
  %add8 = add nsw i64 %shr, %shr7
  %shl = shl i64 %add8, 2
  %add9 = add i64 %shl, 2
  call void @wset_new_total(%struct.window* %8, i64 %add9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.window*, %struct.window** %w, align 8
  %new_total10 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 7
  %13 = load i64, i64* %new_total10, align 8
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_new_normal(i64 %window, i64 %size) #0 {
entry:
  %window.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_valid_window(i64 %0)
  %1 = load i64, i64* %size.addr, align 8
  call void @wset_new_normal(%struct.window* %call, i64 %1)
  %2 = load i64, i64* %size.addr, align 8
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_resize_apply(i64 %frame, i64 %horizontal) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %r = alloca %struct.window*, align 8
  %horflag = alloca i8, align 1
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 5
  %2 = load i64, i64* %root_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  store %struct.window* %call1, %struct.window** %r, align 8
  %3 = load i64, i64* %horizontal.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call2
  %lnot = xor i1 %cmp, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %horflag, align 1
  %4 = load %struct.window*, %struct.window** %r, align 8
  %5 = load i8, i8* %horflag, align 1
  %tobool = trunc i8 %5 to i1
  %call3 = call zeroext i1 @window_resize_check(%struct.window* %4, i1 zeroext %tobool)
  br i1 %call3, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.window*, %struct.window** %r, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 9
  %7 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %7, 2
  %8 = load i8, i8* %horflag, align 1
  %tobool4 = trunc i8 %8 to i1
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %9 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 34
  %10 = load i32, i32* %pixel_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %11 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 35
  %12 = load i32, i32* %pixel_height, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ %12, %cond.false ]
  %conv = sext i32 %cond to i64
  %cmp5 = icmp ne i64 %shr, %conv
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end, %entry
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  call void @block_input()
  %13 = load %struct.window*, %struct.window** %r, align 8
  %14 = load i8, i8* %horflag, align 1
  %tobool8 = trunc i8 %14 to i1
  call void @window_resize_apply(%struct.window* %13, i1 zeroext %tobool8)
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %15)
  %16 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %window_sizes_changed to i64*
  %bf.load = load i64, i64* %17, align 8
  %bf.clear = and i64 %bf.load, -524289
  %bf.set = or i64 %bf.clear, 524288
  store i64 %bf.set, i64* %17, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %18)
  call void @unblock_input()
  %call9 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call9, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load i64, i64* %retval
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_resize_apply_total(i64 %frame, i64 %horizontal) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %r = alloca %struct.window*, align 8
  %m = alloca %struct.window*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 5
  %2 = load i64, i64* %root_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  store %struct.window* %call1, %struct.window** %r, align 8
  call void @block_input()
  %3 = load %struct.window*, %struct.window** %r, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 32
  store i32 0, i32* %left_col, align 4
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 57
  %5 = load i32, i32* %menu_bar_lines, align 4
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 27
  %7 = load i32, i32* %tool_bar_lines, align 4
  %add = add nsw i32 %5, %7
  %8 = load %struct.window*, %struct.window** %r, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 33
  store i32 %add, i32* %top_line, align 4
  %9 = load %struct.window*, %struct.window** %r, align 8
  %10 = load i64, i64* %horizontal.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %10, %call2
  %lnot = xor i1 %cmp, true
  call void @window_resize_apply_total(%struct.window* %9, i1 zeroext %lnot)
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 7
  %12 = load i64, i64* %minibuffer_window, align 8
  %call3 = call zeroext i1 @WINDOWP(i64 %12)
  br i1 %call3, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %entry
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window4 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 7
  %14 = load i64, i64* %minibuffer_window4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %14)
  %frame6 = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 1
  %15 = load i64, i64* %frame6, align 8
  %sub = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp7 = icmp eq %struct.frame* %17, %18
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.24

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window9 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 5
  %20 = load i64, i64* %root_window9, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window10 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 7
  %22 = load i64, i64* %minibuffer_window10, align 8
  %cmp11 = icmp eq i64 %20, %22
  br i1 %cmp11, label %if.end.24, label %if.then

if.then:                                          ; preds = %land.lhs.true.8
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window12 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 7
  %24 = load i64, i64* %minibuffer_window12, align 8
  %call13 = call %struct.window* @XWINDOW(i64 %24)
  store %struct.window* %call13, %struct.window** %m, align 8
  %25 = load i64, i64* %horizontal.addr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %25, %call14
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %if.then
  %26 = load %struct.window*, %struct.window** %r, align 8
  %top_line17 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 33
  %27 = load i32, i32* %top_line17, align 4
  %28 = load %struct.window*, %struct.window** %r, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 37
  %29 = load i32, i32* %total_lines, align 4
  %add18 = add nsw i32 %27, %29
  %30 = load %struct.window*, %struct.window** %m, align 8
  %top_line19 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 33
  store i32 %add18, i32* %top_line19, align 4
  %31 = load %struct.window*, %struct.window** %m, align 8
  %new_total = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 7
  %32 = load i64, i64* %new_total, align 8
  %shr = ashr i64 %32, 2
  %conv = trunc i64 %shr to i32
  %33 = load %struct.window*, %struct.window** %m, align 8
  %total_lines20 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 37
  store i32 %conv, i32* %total_lines20, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %34 = load %struct.window*, %struct.window** %m, align 8
  %new_total21 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 7
  %35 = load i64, i64* %new_total21, align 8
  %shr22 = ashr i64 %35, 2
  %conv23 = trunc i64 %shr22 to i32
  %36 = load %struct.window*, %struct.window** %m, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 36
  store i32 %conv23, i32* %total_cols, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.16
  br label %if.end.24

if.end.24:                                        ; preds = %if.end, %land.lhs.true.8, %land.lhs.true, %entry
  call void @unblock_input()
  %call25 = call i64 @builtin_lisp_symbol(i32 901)
  ret i64 %call25
}

; Function Attrs: nounwind uwtable
define internal void @window_resize_apply_total(%struct.window* %w, i1 zeroext %horflag) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %horflag.addr = alloca i8, align 1
  %c = alloca %struct.window*, align 8
  %edge = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  %0 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_total = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 7
  %2 = load i64, i64* %new_total, align 8
  %shr = ashr i64 %2, 2
  %conv = trunc i64 %shr to i32
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 36
  store i32 %conv, i32* %total_cols, align 4
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 32
  %5 = load i32, i32* %left_col, align 4
  store i32 %5, i32* %edge, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %new_total1 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 7
  %7 = load i64, i64* %new_total1, align 8
  %shr2 = ashr i64 %7, 2
  %conv3 = trunc i64 %shr2 to i32
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 37
  store i32 %conv3, i32* %total_lines, align 4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 33
  %10 = load i32, i32* %top_line, align 4
  store i32 %10, i32* %edge, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %12)
  br i1 %call, label %land.lhs.true, label %if.else.24

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.else.24, label %if.then.5

if.then.5:                                        ; preds = %land.lhs.true
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents6 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 10
  %15 = load i64, i64* %contents6, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %15)
  store %struct.window* %call7, %struct.window** %c, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %if.then.5
  %16 = load %struct.window*, %struct.window** %c, align 8
  %tobool8 = icmp ne %struct.window* %16, null
  br i1 %tobool8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i8, i8* %horflag.addr, align 1
  %tobool9 = trunc i8 %17 to i1
  br i1 %tobool9, label %if.then.10, label %if.else.12

if.then.10:                                       ; preds = %while.body
  %18 = load i32, i32* %edge, align 4
  %19 = load %struct.window*, %struct.window** %c, align 8
  %left_col11 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 32
  store i32 %18, i32* %left_col11, align 4
  br label %if.end.14

if.else.12:                                       ; preds = %while.body
  %20 = load i32, i32* %edge, align 4
  %21 = load %struct.window*, %struct.window** %c, align 8
  %top_line13 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 33
  store i32 %20, i32* %top_line13, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.12, %if.then.10
  %22 = load %struct.window*, %struct.window** %c, align 8
  %23 = load i8, i8* %horflag.addr, align 1
  %tobool15 = trunc i8 %23 to i1
  call void @window_resize_apply_total(%struct.window* %22, i1 zeroext %tobool15)
  %24 = load i8, i8* %horflag.addr, align 1
  %tobool16 = trunc i8 %24 to i1
  br i1 %tobool16, label %if.end.19, label %if.then.17

if.then.17:                                       ; preds = %if.end.14
  %25 = load i32, i32* %edge, align 4
  %26 = load %struct.window*, %struct.window** %c, align 8
  %total_lines18 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 37
  %27 = load i32, i32* %total_lines18, align 4
  %add = add nsw i32 %25, %27
  store i32 %add, i32* %edge, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.17, %if.end.14
  %28 = load %struct.window*, %struct.window** %c, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 2
  %29 = load i64, i64* %next, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %29, %call20
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.19
  br label %cond.end

cond.false:                                       ; preds = %if.end.19
  %30 = load %struct.window*, %struct.window** %c, align 8
  %next22 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 2
  %31 = load i64, i64* %next22, align 8
  %call23 = call %struct.window* @XWINDOW(i64 %31)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call23, %cond.false ]
  store %struct.window* %cond, %struct.window** %c, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.65

if.else.24:                                       ; preds = %land.lhs.true, %if.end
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents25 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 10
  %33 = load i64, i64* %contents25, align 8
  %call26 = call zeroext i1 @WINDOWP(i64 %33)
  br i1 %call26, label %land.lhs.true.28, label %if.end.64

land.lhs.true.28:                                 ; preds = %if.else.24
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal29 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 67
  %bf.load30 = load i16, i16* %horizontal29, align 4
  %bf.lshr31 = lshr i16 %bf.load30, 1
  %bf.clear32 = and i16 %bf.lshr31, 1
  %bf.cast33 = trunc i16 %bf.clear32 to i1
  br i1 %bf.cast33, label %if.then.35, label %if.end.64

if.then.35:                                       ; preds = %land.lhs.true.28
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents36 = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 10
  %36 = load i64, i64* %contents36, align 8
  %call37 = call %struct.window* @XWINDOW(i64 %36)
  store %struct.window* %call37, %struct.window** %c, align 8
  br label %while.cond.38

while.cond.38:                                    ; preds = %cond.end.61, %if.then.35
  %37 = load %struct.window*, %struct.window** %c, align 8
  %tobool39 = icmp ne %struct.window* %37, null
  br i1 %tobool39, label %while.body.40, label %while.end.63

while.body.40:                                    ; preds = %while.cond.38
  %38 = load i8, i8* %horflag.addr, align 1
  %tobool41 = trunc i8 %38 to i1
  br i1 %tobool41, label %if.then.42, label %if.else.44

if.then.42:                                       ; preds = %while.body.40
  %39 = load i32, i32* %edge, align 4
  %40 = load %struct.window*, %struct.window** %c, align 8
  %left_col43 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 32
  store i32 %39, i32* %left_col43, align 4
  br label %if.end.46

if.else.44:                                       ; preds = %while.body.40
  %41 = load i32, i32* %edge, align 4
  %42 = load %struct.window*, %struct.window** %c, align 8
  %top_line45 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 33
  store i32 %41, i32* %top_line45, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.44, %if.then.42
  %43 = load %struct.window*, %struct.window** %c, align 8
  %44 = load i8, i8* %horflag.addr, align 1
  %tobool47 = trunc i8 %44 to i1
  call void @window_resize_apply_total(%struct.window* %43, i1 zeroext %tobool47)
  %45 = load i8, i8* %horflag.addr, align 1
  %tobool48 = trunc i8 %45 to i1
  br i1 %tobool48, label %if.then.49, label %if.end.52

if.then.49:                                       ; preds = %if.end.46
  %46 = load i32, i32* %edge, align 4
  %47 = load %struct.window*, %struct.window** %c, align 8
  %total_cols50 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 36
  %48 = load i32, i32* %total_cols50, align 4
  %add51 = add nsw i32 %46, %48
  store i32 %add51, i32* %edge, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.49, %if.end.46
  %49 = load %struct.window*, %struct.window** %c, align 8
  %next53 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 2
  %50 = load i64, i64* %next53, align 8
  %call54 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp55 = icmp eq i64 %50, %call54
  br i1 %cmp55, label %cond.true.57, label %cond.false.58

cond.true.57:                                     ; preds = %if.end.52
  br label %cond.end.61

cond.false.58:                                    ; preds = %if.end.52
  %51 = load %struct.window*, %struct.window** %c, align 8
  %next59 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 2
  %52 = load i64, i64* %next59, align 8
  %call60 = call %struct.window* @XWINDOW(i64 %52)
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.58, %cond.true.57
  %cond62 = phi %struct.window* [ null, %cond.true.57 ], [ %call60, %cond.false.58 ]
  store %struct.window* %cond62, %struct.window** %c, align 8
  br label %while.cond.38

while.end.63:                                     ; preds = %while.cond.38
  br label %if.end.64

if.end.64:                                        ; preds = %while.end.63, %land.lhs.true.28, %if.else.24
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @resize_frame_windows(%struct.frame* %f, i32 %size, i1 zeroext %horflag, i1 zeroext %pixelwise) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %size.addr = alloca i32, align 4
  %horflag.addr = alloca i8, align 1
  %pixelwise.addr = alloca i8, align 1
  %root = alloca i64, align 8
  %r = alloca %struct.window*, align 8
  %mini = alloca i64, align 8
  %m = alloca %struct.window*, align 8
  %old_size = alloca i32, align 4
  %old_pixel_size = alloca i32, align 4
  %new_size = alloca i32, align 4
  %new_pixel_size = alloca i32, align 4
  %unit = alloca i32, align 4
  %delta = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  %frombool1 = zext i1 %pixelwise to i8
  store i8 %frombool1, i8* %pixelwise.addr, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window, align 8
  store i64 %1, i64* %root, align 8
  %2 = load i64, i64* %root, align 8
  %call = call %struct.window* @XWINDOW(i64 %2)
  store %struct.window* %call, %struct.window** %r, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 7
  %4 = load i64, i64* %minibuffer_window, align 8
  store i64 %4, i64* %mini, align 8
  %5 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.window*, %struct.window** %r, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 36
  %7 = load i32, i32* %total_cols, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.window*, %struct.window** %r, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 37
  %9 = load i32, i32* %total_lines, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %old_size, align 4
  %10 = load i8, i8* %horflag.addr, align 1
  %tobool2 = trunc i8 %10 to i1
  br i1 %tobool2, label %cond.true.3, label %cond.false.4

cond.true.3:                                      ; preds = %cond.end
  %11 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 34
  %12 = load i32, i32* %pixel_width, align 4
  br label %cond.end.5

cond.false.4:                                     ; preds = %cond.end
  %13 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 35
  %14 = load i32, i32* %pixel_height, align 4
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.true.3
  %cond6 = phi i32 [ %12, %cond.true.3 ], [ %14, %cond.false.4 ]
  store i32 %cond6, i32* %old_pixel_size, align 4
  %15 = load i8, i8* %horflag.addr, align 1
  %tobool7 = trunc i8 %15 to i1
  br i1 %tobool7, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %cond.end.5
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 59
  %17 = load i32, i32* %column_width, align 4
  br label %cond.end.10

cond.false.9:                                     ; preds = %cond.end.5
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 60
  %19 = load i32, i32* %line_height, align 4
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.9, %cond.true.8
  %cond11 = phi i32 [ %17, %cond.true.8 ], [ %19, %cond.false.9 ]
  store i32 %cond11, i32* %unit, align 4
  %20 = load i8, i8* %pixelwise.addr, align 1
  %tobool12 = trunc i8 %20 to i1
  br i1 %tobool12, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.10
  %21 = load i8, i8* %horflag.addr, align 1
  %tobool13 = trunc i8 %21 to i1
  br i1 %tobool13, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %if.then
  %22 = load i32, i32* %size.addr, align 4
  br label %cond.end.30

cond.false.15:                                    ; preds = %if.then
  %23 = load i32, i32* %size.addr, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window16 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 7
  %25 = load i64, i64* %minibuffer_window16, align 8
  %call17 = call zeroext i1 @WINDOWP(i64 %25)
  br i1 %call17, label %land.lhs.true, label %cond.false.26

land.lhs.true:                                    ; preds = %cond.false.15
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window18 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 7
  %27 = load i64, i64* %minibuffer_window18, align 8
  %call19 = call %struct.window* @XWINDOW(i64 %27)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call19, i32 0, i32 1
  %28 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %28, 5
  %29 = inttoptr i64 %sub to i8*
  %30 = bitcast i8* %29 to %struct.frame*
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp = icmp eq %struct.frame* %30, %31
  br i1 %cmp, label %land.lhs.true.20, label %cond.false.26

land.lhs.true.20:                                 ; preds = %land.lhs.true
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window21 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 5
  %33 = load i64, i64* %root_window21, align 8
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window22 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 7
  %35 = load i64, i64* %minibuffer_window22, align 8
  %cmp23 = icmp eq i64 %33, %35
  br i1 %cmp23, label %cond.false.26, label %cond.true.24

cond.true.24:                                     ; preds = %land.lhs.true.20
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height25 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 60
  %37 = load i32, i32* %line_height25, align 4
  br label %cond.end.27

cond.false.26:                                    ; preds = %land.lhs.true.20, %land.lhs.true, %cond.false.15
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.24
  %cond28 = phi i32 [ %37, %cond.true.24 ], [ 0, %cond.false.26 ]
  %sub29 = sub nsw i32 %23, %cond28
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.end.27, %cond.true.14
  %cond31 = phi i32 [ %22, %cond.true.14 ], [ %sub29, %cond.end.27 ]
  %38 = load i32, i32* %unit, align 4
  %cmp32 = icmp sgt i32 %cond31, %38
  br i1 %cmp32, label %cond.true.33, label %cond.false.57

cond.true.33:                                     ; preds = %cond.end.30
  %39 = load i8, i8* %horflag.addr, align 1
  %tobool34 = trunc i8 %39 to i1
  br i1 %tobool34, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.true.33
  %40 = load i32, i32* %size.addr, align 4
  br label %cond.end.55

cond.false.36:                                    ; preds = %cond.true.33
  %41 = load i32, i32* %size.addr, align 4
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window37 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 7
  %43 = load i64, i64* %minibuffer_window37, align 8
  %call38 = call zeroext i1 @WINDOWP(i64 %43)
  br i1 %call38, label %land.lhs.true.39, label %cond.false.51

land.lhs.true.39:                                 ; preds = %cond.false.36
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window40 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 7
  %45 = load i64, i64* %minibuffer_window40, align 8
  %call41 = call %struct.window* @XWINDOW(i64 %45)
  %frame42 = getelementptr inbounds %struct.window, %struct.window* %call41, i32 0, i32 1
  %46 = load i64, i64* %frame42, align 8
  %sub43 = sub nsw i64 %46, 5
  %47 = inttoptr i64 %sub43 to i8*
  %48 = bitcast i8* %47 to %struct.frame*
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp44 = icmp eq %struct.frame* %48, %49
  br i1 %cmp44, label %land.lhs.true.45, label %cond.false.51

land.lhs.true.45:                                 ; preds = %land.lhs.true.39
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window46 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 5
  %51 = load i64, i64* %root_window46, align 8
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window47 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 7
  %53 = load i64, i64* %minibuffer_window47, align 8
  %cmp48 = icmp eq i64 %51, %53
  br i1 %cmp48, label %cond.false.51, label %cond.true.49

cond.true.49:                                     ; preds = %land.lhs.true.45
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height50 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 60
  %55 = load i32, i32* %line_height50, align 4
  br label %cond.end.52

cond.false.51:                                    ; preds = %land.lhs.true.45, %land.lhs.true.39, %cond.false.36
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.51, %cond.true.49
  %cond53 = phi i32 [ %55, %cond.true.49 ], [ 0, %cond.false.51 ]
  %sub54 = sub nsw i32 %41, %cond53
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end.52, %cond.true.35
  %cond56 = phi i32 [ %40, %cond.true.35 ], [ %sub54, %cond.end.52 ]
  br label %cond.end.58

cond.false.57:                                    ; preds = %cond.end.30
  %56 = load i32, i32* %unit, align 4
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.57, %cond.end.55
  %cond59 = phi i32 [ %cond56, %cond.end.55 ], [ %56, %cond.false.57 ]
  store i32 %cond59, i32* %new_pixel_size, align 4
  %57 = load i32, i32* %new_pixel_size, align 4
  %58 = load i32, i32* %unit, align 4
  %div = sdiv i32 %57, %58
  store i32 %div, i32* %new_size, align 4
  br label %if.end

if.else:                                          ; preds = %cond.end.10
  %59 = load i32, i32* %size.addr, align 4
  %60 = load i8, i8* %horflag.addr, align 1
  %tobool60 = trunc i8 %60 to i1
  br i1 %tobool60, label %land.end, label %land.lhs.true.61

land.lhs.true.61:                                 ; preds = %if.else
  %61 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window62 = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 7
  %62 = load i64, i64* %minibuffer_window62, align 8
  %call63 = call zeroext i1 @WINDOWP(i64 %62)
  br i1 %call63, label %land.lhs.true.64, label %land.end

land.lhs.true.64:                                 ; preds = %land.lhs.true.61
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window65 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 7
  %64 = load i64, i64* %minibuffer_window65, align 8
  %call66 = call %struct.window* @XWINDOW(i64 %64)
  %frame67 = getelementptr inbounds %struct.window, %struct.window* %call66, i32 0, i32 1
  %65 = load i64, i64* %frame67, align 8
  %sub68 = sub nsw i64 %65, 5
  %66 = inttoptr i64 %sub68 to i8*
  %67 = bitcast i8* %66 to %struct.frame*
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp69 = icmp eq %struct.frame* %67, %68
  br i1 %cmp69, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.64
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window70 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 5
  %70 = load i64, i64* %root_window70, align 8
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window71 = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 7
  %72 = load i64, i64* %minibuffer_window71, align 8
  %cmp72 = icmp eq i64 %70, %72
  %lnot = xor i1 %cmp72, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.64, %land.lhs.true.61, %if.else
  %73 = phi i1 [ false, %land.lhs.true.64 ], [ false, %land.lhs.true.61 ], [ false, %if.else ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %73 to i32
  %sub73 = sub nsw i32 %59, %land.ext
  %cmp74 = icmp sgt i32 %sub73, 1
  br i1 %cmp74, label %cond.true.75, label %cond.false.94

cond.true.75:                                     ; preds = %land.end
  %74 = load i32, i32* %size.addr, align 4
  %75 = load i8, i8* %horflag.addr, align 1
  %tobool76 = trunc i8 %75 to i1
  br i1 %tobool76, label %land.end.91, label %land.lhs.true.77

land.lhs.true.77:                                 ; preds = %cond.true.75
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window78 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 7
  %77 = load i64, i64* %minibuffer_window78, align 8
  %call79 = call zeroext i1 @WINDOWP(i64 %77)
  br i1 %call79, label %land.lhs.true.80, label %land.end.91

land.lhs.true.80:                                 ; preds = %land.lhs.true.77
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window81 = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 7
  %79 = load i64, i64* %minibuffer_window81, align 8
  %call82 = call %struct.window* @XWINDOW(i64 %79)
  %frame83 = getelementptr inbounds %struct.window, %struct.window* %call82, i32 0, i32 1
  %80 = load i64, i64* %frame83, align 8
  %sub84 = sub nsw i64 %80, 5
  %81 = inttoptr i64 %sub84 to i8*
  %82 = bitcast i8* %81 to %struct.frame*
  %83 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp85 = icmp eq %struct.frame* %82, %83
  br i1 %cmp85, label %land.rhs.86, label %land.end.91

land.rhs.86:                                      ; preds = %land.lhs.true.80
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window87 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 5
  %85 = load i64, i64* %root_window87, align 8
  %86 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window88 = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 7
  %87 = load i64, i64* %minibuffer_window88, align 8
  %cmp89 = icmp eq i64 %85, %87
  %lnot90 = xor i1 %cmp89, true
  br label %land.end.91

land.end.91:                                      ; preds = %land.rhs.86, %land.lhs.true.80, %land.lhs.true.77, %cond.true.75
  %88 = phi i1 [ false, %land.lhs.true.80 ], [ false, %land.lhs.true.77 ], [ false, %cond.true.75 ], [ %lnot90, %land.rhs.86 ]
  %land.ext92 = zext i1 %88 to i32
  %sub93 = sub nsw i32 %74, %land.ext92
  br label %cond.end.95

cond.false.94:                                    ; preds = %land.end
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.94, %land.end.91
  %cond96 = phi i32 [ %sub93, %land.end.91 ], [ 1, %cond.false.94 ]
  store i32 %cond96, i32* %new_size, align 4
  %89 = load i32, i32* %new_size, align 4
  %90 = load i32, i32* %unit, align 4
  %mul = mul nsw i32 %89, %90
  store i32 %mul, i32* %new_pixel_size, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.95, %cond.end.58
  %91 = load i32, i32* %new_pixel_size, align 4
  %92 = load i32, i32* %old_pixel_size, align 4
  %cmp97 = icmp eq i32 %91, %92
  br i1 %cmp97, label %land.lhs.true.98, label %if.else.102

land.lhs.true.98:                                 ; preds = %if.end
  %93 = load i8, i8* %horflag.addr, align 1
  %tobool99 = trunc i8 %93 to i1
  br i1 %tobool99, label %if.then.101, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.98
  %94 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 31
  %95 = load i32, i32* %pixel_top, align 4
  %96 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 58
  %97 = load i32, i32* %menu_bar_height, align 4
  %98 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 28
  %99 = load i32, i32* %tool_bar_height, align 4
  %add = add nsw i32 %97, %99
  %cmp100 = icmp eq i32 %95, %add
  br i1 %cmp100, label %if.then.101, label %if.else.102

if.then.101:                                      ; preds = %lor.lhs.false, %land.lhs.true.98
  br label %if.end.220

if.else.102:                                      ; preds = %lor.lhs.false, %if.end
  %100 = load %struct.window*, %struct.window** %r, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 10
  %101 = load i64, i64* %contents, align 8
  %call103 = call zeroext i1 @BUFFERP(i64 %101)
  br i1 %call103, label %if.then.104, label %if.else.118

if.then.104:                                      ; preds = %if.else.102
  %102 = load i8, i8* %horflag.addr, align 1
  %tobool105 = trunc i8 %102 to i1
  br i1 %tobool105, label %if.then.106, label %if.else.109

if.then.106:                                      ; preds = %if.then.104
  %103 = load i32, i32* %new_size, align 4
  %104 = load %struct.window*, %struct.window** %r, align 8
  %total_cols107 = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 36
  store i32 %103, i32* %total_cols107, align 4
  %105 = load i32, i32* %new_pixel_size, align 4
  %106 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width108 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 34
  store i32 %105, i32* %pixel_width108, align 4
  br label %if.end.117

if.else.109:                                      ; preds = %if.then.104
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 57
  %108 = load i32, i32* %menu_bar_lines, align 4
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 27
  %110 = load i32, i32* %tool_bar_lines, align 4
  %add110 = add nsw i32 %108, %110
  %111 = load %struct.window*, %struct.window** %r, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %111, i32 0, i32 33
  store i32 %add110, i32* %top_line, align 4
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height111 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 58
  %113 = load i32, i32* %menu_bar_height111, align 4
  %114 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height112 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 28
  %115 = load i32, i32* %tool_bar_height112, align 4
  %add113 = add nsw i32 %113, %115
  %116 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top114 = getelementptr inbounds %struct.window, %struct.window* %116, i32 0, i32 31
  store i32 %add113, i32* %pixel_top114, align 4
  %117 = load i32, i32* %new_size, align 4
  %118 = load %struct.window*, %struct.window** %r, align 8
  %total_lines115 = getelementptr inbounds %struct.window, %struct.window* %118, i32 0, i32 37
  store i32 %117, i32* %total_lines115, align 4
  %119 = load i32, i32* %new_pixel_size, align 4
  %120 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height116 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 35
  store i32 %119, i32* %pixel_height116, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.109, %if.then.106
  br label %if.end.219

if.else.118:                                      ; preds = %if.else.102
  %121 = load i8, i8* %horflag.addr, align 1
  %tobool119 = trunc i8 %121 to i1
  br i1 %tobool119, label %if.end.129, label %if.then.120

if.then.120:                                      ; preds = %if.else.118
  %122 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines121 = getelementptr inbounds %struct.frame, %struct.frame* %122, i32 0, i32 57
  %123 = load i32, i32* %menu_bar_lines121, align 4
  %124 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines122 = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 27
  %125 = load i32, i32* %tool_bar_lines122, align 4
  %add123 = add nsw i32 %123, %125
  %126 = load %struct.window*, %struct.window** %r, align 8
  %top_line124 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 33
  store i32 %add123, i32* %top_line124, align 4
  %127 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height125 = getelementptr inbounds %struct.frame, %struct.frame* %127, i32 0, i32 58
  %128 = load i32, i32* %menu_bar_height125, align 4
  %129 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height126 = getelementptr inbounds %struct.frame, %struct.frame* %129, i32 0, i32 28
  %130 = load i32, i32* %tool_bar_height126, align 4
  %add127 = add nsw i32 %128, %130
  %131 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top128 = getelementptr inbounds %struct.window, %struct.window* %131, i32 0, i32 31
  store i32 %add127, i32* %pixel_top128, align 4
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.120, %if.else.118
  %132 = load i8, i8* %pixelwise.addr, align 1
  %tobool130 = trunc i8 %132 to i1
  br i1 %tobool130, label %if.then.131, label %if.else.134

if.then.131:                                      ; preds = %if.end.129
  %133 = load i32, i32* %new_pixel_size, align 4
  %134 = load i32, i32* %old_pixel_size, align 4
  %sub132 = sub nsw i32 %133, %134
  %conv = sext i32 %sub132 to i64
  %shl = shl i64 %conv, 2
  %add133 = add i64 %shl, 2
  store i64 %add133, i64* %delta, align 8
  br label %if.end.139

if.else.134:                                      ; preds = %if.end.129
  %135 = load i32, i32* %new_size, align 4
  %136 = load i32, i32* %old_size, align 4
  %sub135 = sub nsw i32 %135, %136
  %conv136 = sext i32 %sub135 to i64
  %shl137 = shl i64 %conv136, 2
  %add138 = add i64 %shl137, 2
  store i64 %add138, i64* %delta, align 8
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.134, %if.then.131
  %137 = load i64, i64* %root, align 8
  %138 = load i64, i64* %delta, align 8
  %139 = load i8, i8* %horflag.addr, align 1
  %tobool140 = trunc i8 %139 to i1
  br i1 %tobool140, label %cond.true.142, label %cond.false.144

cond.true.142:                                    ; preds = %if.end.139
  %call143 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.146

cond.false.144:                                   ; preds = %if.end.139
  %call145 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.false.144, %cond.true.142
  %cond147 = phi i64 [ %call143, %cond.true.142 ], [ %call145, %cond.false.144 ]
  %call148 = call i64 @builtin_lisp_symbol(i32 0)
  %140 = load i8, i8* %pixelwise.addr, align 1
  %tobool149 = trunc i8 %140 to i1
  br i1 %tobool149, label %cond.true.151, label %cond.false.153

cond.true.151:                                    ; preds = %cond.end.146
  %call152 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.155

cond.false.153:                                   ; preds = %cond.end.146
  %call154 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.false.153, %cond.true.151
  %cond156 = phi i64 [ %call152, %cond.true.151 ], [ %call154, %cond.false.153 ]
  %call157 = call i64 @resize_root_window(i64 %137, i64 %138, i64 %cond147, i64 %call148, i64 %cond156)
  %141 = load %struct.window*, %struct.window** %r, align 8
  %142 = load i8, i8* %horflag.addr, align 1
  %tobool158 = trunc i8 %142 to i1
  %call159 = call zeroext i1 @window_resize_check(%struct.window* %141, i1 zeroext %tobool158)
  br i1 %call159, label %land.lhs.true.161, label %if.else.177

land.lhs.true.161:                                ; preds = %cond.end.155
  %143 = load i32, i32* %new_pixel_size, align 4
  %conv162 = sext i32 %143 to i64
  %144 = load %struct.window*, %struct.window** %r, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %144, i32 0, i32 9
  %145 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %145, 2
  %cmp163 = icmp eq i64 %conv162, %shr
  br i1 %cmp163, label %if.then.165, label %if.else.177

if.then.165:                                      ; preds = %land.lhs.true.161
  %146 = load %struct.window*, %struct.window** %r, align 8
  %147 = load i8, i8* %horflag.addr, align 1
  %tobool166 = trunc i8 %147 to i1
  call void @window_resize_apply(%struct.window* %146, i1 zeroext %tobool166)
  %148 = load %struct.window*, %struct.window** %r, align 8
  %frame167 = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 1
  %149 = load i64, i64* %frame167, align 8
  %150 = load i8, i8* %horflag.addr, align 1
  %tobool168 = trunc i8 %150 to i1
  br i1 %tobool168, label %cond.true.170, label %cond.false.172

cond.true.170:                                    ; preds = %if.then.165
  %call171 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.174

cond.false.172:                                   ; preds = %if.then.165
  %call173 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.172, %cond.true.170
  %cond175 = phi i64 [ %call171, %cond.true.170 ], [ %call173, %cond.false.172 ]
  %call176 = call i64 @window_pixel_to_total(i64 %149, i64 %cond175)
  br label %if.end.218

if.else.177:                                      ; preds = %land.lhs.true.161, %cond.end.155
  %151 = load i64, i64* %root, align 8
  %152 = load i64, i64* %delta, align 8
  %153 = load i8, i8* %horflag.addr, align 1
  %tobool178 = trunc i8 %153 to i1
  br i1 %tobool178, label %cond.true.180, label %cond.false.182

cond.true.180:                                    ; preds = %if.else.177
  %call181 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.184

cond.false.182:                                   ; preds = %if.else.177
  %call183 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.false.182, %cond.true.180
  %cond185 = phi i64 [ %call181, %cond.true.180 ], [ %call183, %cond.false.182 ]
  %call186 = call i64 @builtin_lisp_symbol(i32 901)
  %154 = load i8, i8* %pixelwise.addr, align 1
  %tobool187 = trunc i8 %154 to i1
  br i1 %tobool187, label %cond.true.189, label %cond.false.191

cond.true.189:                                    ; preds = %cond.end.184
  %call190 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.193

cond.false.191:                                   ; preds = %cond.end.184
  %call192 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.193

cond.end.193:                                     ; preds = %cond.false.191, %cond.true.189
  %cond194 = phi i64 [ %call190, %cond.true.189 ], [ %call192, %cond.false.191 ]
  %call195 = call i64 @resize_root_window(i64 %151, i64 %152, i64 %cond185, i64 %call186, i64 %cond194)
  %155 = load %struct.window*, %struct.window** %r, align 8
  %156 = load i8, i8* %horflag.addr, align 1
  %tobool196 = trunc i8 %156 to i1
  %call197 = call zeroext i1 @window_resize_check(%struct.window* %155, i1 zeroext %tobool196)
  br i1 %call197, label %land.lhs.true.199, label %if.end.217

land.lhs.true.199:                                ; preds = %cond.end.193
  %157 = load i32, i32* %new_pixel_size, align 4
  %conv200 = sext i32 %157 to i64
  %158 = load %struct.window*, %struct.window** %r, align 8
  %new_pixel201 = getelementptr inbounds %struct.window, %struct.window* %158, i32 0, i32 9
  %159 = load i64, i64* %new_pixel201, align 8
  %shr202 = ashr i64 %159, 2
  %cmp203 = icmp eq i64 %conv200, %shr202
  br i1 %cmp203, label %if.then.205, label %if.end.217

if.then.205:                                      ; preds = %land.lhs.true.199
  %160 = load %struct.window*, %struct.window** %r, align 8
  %161 = load i8, i8* %horflag.addr, align 1
  %tobool206 = trunc i8 %161 to i1
  call void @window_resize_apply(%struct.window* %160, i1 zeroext %tobool206)
  %162 = load %struct.window*, %struct.window** %r, align 8
  %frame207 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 1
  %163 = load i64, i64* %frame207, align 8
  %164 = load i8, i8* %horflag.addr, align 1
  %tobool208 = trunc i8 %164 to i1
  br i1 %tobool208, label %cond.true.210, label %cond.false.212

cond.true.210:                                    ; preds = %if.then.205
  %call211 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.214

cond.false.212:                                   ; preds = %if.then.205
  %call213 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.214

cond.end.214:                                     ; preds = %cond.false.212, %cond.true.210
  %cond215 = phi i64 [ %call211, %cond.true.210 ], [ %call213, %cond.false.212 ]
  %call216 = call i64 @window_pixel_to_total(i64 %163, i64 %cond215)
  br label %if.end.217

if.end.217:                                       ; preds = %cond.end.214, %land.lhs.true.199, %cond.end.193
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %cond.end.174
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.218, %if.end.117
  br label %if.end.220

if.end.220:                                       ; preds = %if.end.219, %if.then.101
  %165 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window221 = getelementptr inbounds %struct.frame, %struct.frame* %165, i32 0, i32 7
  %166 = load i64, i64* %minibuffer_window221, align 8
  %call222 = call zeroext i1 @WINDOWP(i64 %166)
  br i1 %call222, label %land.lhs.true.224, label %if.end.255

land.lhs.true.224:                                ; preds = %if.end.220
  %167 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window225 = getelementptr inbounds %struct.frame, %struct.frame* %167, i32 0, i32 7
  %168 = load i64, i64* %minibuffer_window225, align 8
  %call226 = call %struct.window* @XWINDOW(i64 %168)
  %frame227 = getelementptr inbounds %struct.window, %struct.window* %call226, i32 0, i32 1
  %169 = load i64, i64* %frame227, align 8
  %sub228 = sub nsw i64 %169, 5
  %170 = inttoptr i64 %sub228 to i8*
  %171 = bitcast i8* %170 to %struct.frame*
  %172 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp229 = icmp eq %struct.frame* %171, %172
  br i1 %cmp229, label %land.lhs.true.231, label %if.end.255

land.lhs.true.231:                                ; preds = %land.lhs.true.224
  %173 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window232 = getelementptr inbounds %struct.frame, %struct.frame* %173, i32 0, i32 5
  %174 = load i64, i64* %root_window232, align 8
  %175 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window233 = getelementptr inbounds %struct.frame, %struct.frame* %175, i32 0, i32 7
  %176 = load i64, i64* %minibuffer_window233, align 8
  %cmp234 = icmp eq i64 %174, %176
  br i1 %cmp234, label %if.end.255, label %if.then.236

if.then.236:                                      ; preds = %land.lhs.true.231
  %177 = load i64, i64* %mini, align 8
  %call237 = call %struct.window* @XWINDOW(i64 %177)
  store %struct.window* %call237, %struct.window** %m, align 8
  %178 = load i8, i8* %horflag.addr, align 1
  %tobool238 = trunc i8 %178 to i1
  br i1 %tobool238, label %if.then.239, label %if.else.242

if.then.239:                                      ; preds = %if.then.236
  %179 = load i32, i32* %new_size, align 4
  %180 = load %struct.window*, %struct.window** %m, align 8
  %total_cols240 = getelementptr inbounds %struct.window, %struct.window* %180, i32 0, i32 36
  store i32 %179, i32* %total_cols240, align 4
  %181 = load i32, i32* %new_pixel_size, align 4
  %182 = load %struct.window*, %struct.window** %m, align 8
  %pixel_width241 = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 34
  store i32 %181, i32* %pixel_width241, align 4
  br label %if.end.254

if.else.242:                                      ; preds = %if.then.236
  %183 = load %struct.window*, %struct.window** %m, align 8
  %total_lines243 = getelementptr inbounds %struct.window, %struct.window* %183, i32 0, i32 37
  store i32 1, i32* %total_lines243, align 4
  %184 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height244 = getelementptr inbounds %struct.frame, %struct.frame* %184, i32 0, i32 60
  %185 = load i32, i32* %line_height244, align 4
  %186 = load %struct.window*, %struct.window** %m, align 8
  %pixel_height245 = getelementptr inbounds %struct.window, %struct.window* %186, i32 0, i32 35
  store i32 %185, i32* %pixel_height245, align 4
  %187 = load %struct.window*, %struct.window** %r, align 8
  %top_line246 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 33
  %188 = load i32, i32* %top_line246, align 4
  %189 = load %struct.window*, %struct.window** %r, align 8
  %total_lines247 = getelementptr inbounds %struct.window, %struct.window* %189, i32 0, i32 37
  %190 = load i32, i32* %total_lines247, align 4
  %add248 = add nsw i32 %188, %190
  %191 = load %struct.window*, %struct.window** %m, align 8
  %top_line249 = getelementptr inbounds %struct.window, %struct.window* %191, i32 0, i32 33
  store i32 %add248, i32* %top_line249, align 4
  %192 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top250 = getelementptr inbounds %struct.window, %struct.window* %192, i32 0, i32 31
  %193 = load i32, i32* %pixel_top250, align 4
  %194 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height251 = getelementptr inbounds %struct.window, %struct.window* %194, i32 0, i32 35
  %195 = load i32, i32* %pixel_height251, align 4
  %add252 = add nsw i32 %193, %195
  %196 = load %struct.window*, %struct.window** %m, align 8
  %pixel_top253 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 31
  store i32 %add252, i32* %pixel_top253, align 4
  br label %if.end.254

if.end.254:                                       ; preds = %if.else.242, %if.then.239
  br label %if.end.255

if.end.255:                                       ; preds = %if.end.254, %land.lhs.true.231, %land.lhs.true.224, %if.end.220
  %197 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %197, i32 0, i32 26
  %198 = bitcast i48* %window_sizes_changed to i64*
  %bf.load = load i64, i64* %198, align 8
  %bf.clear = and i64 %bf.load, -524289
  %bf.set = or i64 %bf.clear, 524288
  store i64 %bf.set, i64* %198, align 8
  %199 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %199)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fsplit_window_internal(i64 %old, i64 %pixel_size, i64 %side, i64 %normal_size) #0 {
entry:
  %old.addr = alloca i64, align 8
  %pixel_size.addr = alloca i64, align 8
  %side.addr = alloca i64, align 8
  %normal_size.addr = alloca i64, align 8
  %new = alloca i64, align 8
  %frame = alloca i64, align 8
  %reference = alloca i64, align 8
  %o = alloca %struct.window*, align 8
  %p = alloca %struct.window*, align 8
  %n = alloca %struct.window*, align 8
  %r = alloca %struct.window*, align 8
  %c = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %horflag = alloca i8, align 1
  %total_size = alloca i64, align 8
  %combination_limit = alloca i8, align 1
  %new_normal = alloca i64, align 8
  %sum = alloca i64, align 8
  store i64 %old, i64* %old.addr, align 8
  store i64 %pixel_size, i64* %pixel_size.addr, align 8
  store i64 %side, i64* %side.addr, align 8
  store i64 %normal_size, i64* %normal_size.addr, align 8
  %0 = load i64, i64* %side.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %side.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp2 = icmp eq i64 %1, %call1
  br i1 %cmp2, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load i64, i64* %side.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp4 = icmp eq i64 %2, %call3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %3 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp4, %lor.rhs ]
  %frombool = zext i1 %3 to i8
  store i8 %frombool, i8* %horflag, align 1
  %4 = load i64, i64* %old.addr, align 8
  call void @CHECK_WINDOW(i64 %4)
  %5 = load i64, i64* %old.addr, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %5)
  store %struct.window* %call5, %struct.window** %o, align 8
  %6 = load %struct.window*, %struct.window** %o, align 8
  %frame6 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame6, align 8
  store i64 %7, i64* %frame, align 8
  %8 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  store %struct.frame* %10, %struct.frame** %f, align 8
  %11 = load i64, i64* %pixel_size.addr, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %and7 = and i32 %conv, -5
  %cmp8 = icmp eq i32 %and7, 2
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  br label %cond.end

cond.false:                                       ; preds = %lor.end
  %call10 = call i64 @builtin_lisp_symbol(i32 559)
  %12 = load i64, i64* %pixel_size.addr, align 8
  %13 = call i64 @wrong_type_argument(i64 %call10, i64 %12) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %14, %cond.true
  %15 = load i64, i64* %pixel_size.addr, align 8
  %shr = ashr i64 %15, 2
  %16 = load i8, i8* %horflag, align 1
  %tobool = trunc i8 %16 to i1
  br i1 %tobool, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.end
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 59
  %18 = load i32, i32* %column_width, align 4
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.end
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 60
  %20 = load i32, i32* %line_height, align 4
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.12
  %cond = phi i32 [ %18, %cond.true.12 ], [ %20, %cond.false.13 ]
  %conv15 = sext i32 %cond to i64
  %div = sdiv i64 %shr, %conv15
  store i64 %div, i64* %total_size, align 8
  %21 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 327), align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp17 = icmp eq i64 %21, %call16
  br i1 %cmp17, label %lor.end.53, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %cond.end.14
  %22 = load %struct.window*, %struct.window** %o, align 8
  %parent = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 4
  %23 = load i64, i64* %parent, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %23, %call20
  br i1 %cmp21, label %lor.end.53, label %lor.rhs.23

lor.rhs.23:                                       ; preds = %lor.lhs.false.19
  %24 = load i8, i8* %horflag, align 1
  %tobool24 = trunc i8 %24 to i1
  br i1 %tobool24, label %cond.true.26, label %cond.false.33

cond.true.26:                                     ; preds = %lor.rhs.23
  %25 = load %struct.window*, %struct.window** %o, align 8
  %parent27 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 4
  %26 = load i64, i64* %parent27, align 8
  %call28 = call %struct.window* @XWINDOW(i64 %26)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call28, i32 0, i32 10
  %27 = load i64, i64* %contents, align 8
  %call29 = call zeroext i1 @WINDOWP(i64 %27)
  br i1 %call29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.true.26
  %28 = load %struct.window*, %struct.window** %o, align 8
  %parent31 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 4
  %29 = load i64, i64* %parent31, align 8
  %call32 = call %struct.window* @XWINDOW(i64 %29)
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %call32, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  %lnot = xor i1 %bf.cast, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.true.26
  %30 = phi i1 [ false, %cond.true.26 ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %30 to i32
  br label %cond.end.50

cond.false.33:                                    ; preds = %lor.rhs.23
  %31 = load %struct.window*, %struct.window** %o, align 8
  %parent34 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 4
  %32 = load i64, i64* %parent34, align 8
  %call35 = call %struct.window* @XWINDOW(i64 %32)
  %contents36 = getelementptr inbounds %struct.window, %struct.window* %call35, i32 0, i32 10
  %33 = load i64, i64* %contents36, align 8
  %call37 = call zeroext i1 @WINDOWP(i64 %33)
  br i1 %call37, label %land.rhs.39, label %land.end.48

land.rhs.39:                                      ; preds = %cond.false.33
  %34 = load %struct.window*, %struct.window** %o, align 8
  %parent40 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 4
  %35 = load i64, i64* %parent40, align 8
  %call41 = call %struct.window* @XWINDOW(i64 %35)
  %horizontal42 = getelementptr inbounds %struct.window, %struct.window* %call41, i32 0, i32 67
  %bf.load43 = load i16, i16* %horizontal42, align 4
  %bf.lshr44 = lshr i16 %bf.load43, 1
  %bf.clear45 = and i16 %bf.lshr44, 1
  %bf.cast46 = trunc i16 %bf.clear45 to i1
  br label %land.end.48

land.end.48:                                      ; preds = %land.rhs.39, %cond.false.33
  %36 = phi i1 [ false, %cond.false.33 ], [ %bf.cast46, %land.rhs.39 ]
  %land.ext49 = zext i1 %36 to i32
  br label %cond.end.50

cond.end.50:                                      ; preds = %land.end.48, %land.end
  %cond51 = phi i32 [ %land.ext, %land.end ], [ %land.ext49, %land.end.48 ]
  %tobool52 = icmp ne i32 %cond51, 0
  br label %lor.end.53

lor.end.53:                                       ; preds = %cond.end.50, %lor.lhs.false.19, %cond.end.14
  %37 = phi i1 [ true, %lor.lhs.false.19 ], [ true, %cond.end.14 ], [ %tobool52, %cond.end.50 ]
  %frombool54 = zext i1 %37 to i8
  store i8 %frombool54, i8* %combination_limit, align 1
  %38 = load i64, i64* %old.addr, align 8
  %call55 = call zeroext i1 @WINDOWP(i64 %38)
  br i1 %call55, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.end.53
  %39 = load i64, i64* %old.addr, align 8
  %call57 = call %struct.window* @XWINDOW(i64 %39)
  %contents58 = getelementptr inbounds %struct.window, %struct.window* %call57, i32 0, i32 10
  %40 = load i64, i64* %contents58, align 8
  %call59 = call zeroext i1 @BUFFERP(i64 %40)
  br i1 %call59, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %41 = load i64, i64* %old.addr, align 8
  store i64 %41, i64* %reference, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %lor.end.53
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 6
  %43 = load i64, i64* %selected_window, align 8
  store i64 %43, i64* %reference, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %44 = load i64, i64* %reference, align 8
  %call61 = call %struct.window* @XWINDOW(i64 %44)
  store %struct.window* %call61, %struct.window** %r, align 8
  %45 = load %struct.window*, %struct.window** %o, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 67
  %bf.load62 = load i16, i16* %mini, align 4
  %bf.clear63 = and i16 %bf.load62, 1
  %bf.cast64 = trunc i16 %bf.clear63 to i1
  br i1 %bf.cast64, label %if.then.65, label %if.else.66

if.then.65:                                       ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i32 0, i32 0)) #5
  unreachable

if.else.66:                                       ; preds = %if.end
  %46 = load i64, i64* %total_size, align 8
  %47 = load i8, i8* %horflag, align 1
  %tobool67 = trunc i8 %47 to i1
  %cond69 = select i1 %tobool67, i32 2, i32 1
  %conv70 = sext i32 %cond69 to i64
  %cmp71 = icmp slt i64 %46, %conv70
  br i1 %cmp71, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %if.else.66
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i32 0, i32 0)) #5
  unreachable

if.else.74:                                       ; preds = %if.else.66
  %48 = load i8, i8* %combination_limit, align 1
  %tobool75 = trunc i8 %48 to i1
  br i1 %tobool75, label %if.else.108, label %land.lhs.true.76

land.lhs.true.76:                                 ; preds = %if.else.74
  %49 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 328), align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp78 = icmp eq i64 %49, %call77
  br i1 %cmp78, label %if.else.108, label %if.then.80

if.then.80:                                       ; preds = %land.lhs.true.76
  %50 = load %struct.window*, %struct.window** %o, align 8
  %parent81 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 4
  %51 = load i64, i64* %parent81, align 8
  %call82 = call %struct.window* @XWINDOW(i64 %51)
  store %struct.window* %call82, %struct.window** %p, align 8
  %52 = load %struct.window*, %struct.window** %p, align 8
  %53 = load i8, i8* %horflag, align 1
  %tobool83 = trunc i8 %53 to i1
  br i1 %tobool83, label %cond.true.85, label %cond.false.86

cond.true.85:                                     ; preds = %if.then.80
  %54 = load %struct.window*, %struct.window** %p, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 34
  %55 = load i32, i32* %pixel_width, align 4
  br label %cond.end.87

cond.false.86:                                    ; preds = %if.then.80
  %56 = load %struct.window*, %struct.window** %p, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 35
  %57 = load i32, i32* %pixel_height, align 4
  br label %cond.end.87

cond.end.87:                                      ; preds = %cond.false.86, %cond.true.85
  %cond88 = phi i32 [ %55, %cond.true.85 ], [ %57, %cond.false.86 ]
  %conv89 = sext i32 %cond88 to i64
  %58 = load i64, i64* %pixel_size.addr, align 8
  %shr90 = ashr i64 %58, 2
  %sub91 = sub nsw i64 %conv89, %shr90
  %shl = shl i64 %sub91, 2
  %add = add i64 %shl, 2
  call void @wset_new_pixel(%struct.window* %52, i64 %add)
  %59 = load %struct.window*, %struct.window** %p, align 8
  %60 = load i8, i8* %horflag, align 1
  %tobool92 = trunc i8 %60 to i1
  %call93 = call zeroext i1 @window_resize_check(%struct.window* %59, i1 zeroext %tobool92)
  br i1 %call93, label %if.else.95, label %if.then.94

if.then.94:                                       ; preds = %cond.end.87
  call void (i8*, ...) @error(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0)) #5
  unreachable

if.else.95:                                       ; preds = %cond.end.87
  %61 = load %struct.window*, %struct.window** %p, align 8
  %62 = load i8, i8* %horflag, align 1
  %tobool96 = trunc i8 %62 to i1
  br i1 %tobool96, label %cond.true.98, label %cond.false.100

cond.true.98:                                     ; preds = %if.else.95
  %63 = load %struct.window*, %struct.window** %p, align 8
  %pixel_width99 = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 34
  %64 = load i32, i32* %pixel_width99, align 4
  br label %cond.end.102

cond.false.100:                                   ; preds = %if.else.95
  %65 = load %struct.window*, %struct.window** %p, align 8
  %pixel_height101 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 35
  %66 = load i32, i32* %pixel_height101, align 4
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.100, %cond.true.98
  %cond103 = phi i32 [ %64, %cond.true.98 ], [ %66, %cond.false.100 ]
  %conv104 = sext i32 %cond103 to i64
  %shl105 = shl i64 %conv104, 2
  %add106 = add i64 %shl105, 2
  call void @wset_new_pixel(%struct.window* %61, i64 %add106)
  br label %if.end.107

if.end.107:                                       ; preds = %cond.end.102
  br label %if.end.130

if.else.108:                                      ; preds = %land.lhs.true.76, %if.else.74
  %67 = load %struct.window*, %struct.window** %o, align 8
  %68 = load i8, i8* %horflag, align 1
  %tobool109 = trunc i8 %68 to i1
  %call110 = call zeroext i1 @window_resize_check(%struct.window* %67, i1 zeroext %tobool109)
  br i1 %call110, label %if.else.112, label %if.then.111

if.then.111:                                      ; preds = %if.else.108
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0)) #5
  unreachable

if.else.112:                                      ; preds = %if.else.108
  %69 = load i64, i64* %pixel_size.addr, align 8
  %shr113 = ashr i64 %69, 2
  %70 = load %struct.window*, %struct.window** %o, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 9
  %71 = load i64, i64* %new_pixel, align 8
  %shr114 = ashr i64 %71, 2
  %add115 = add nsw i64 %shr113, %shr114
  %72 = load i8, i8* %horflag, align 1
  %tobool116 = trunc i8 %72 to i1
  br i1 %tobool116, label %cond.true.118, label %cond.false.120

cond.true.118:                                    ; preds = %if.else.112
  %73 = load %struct.window*, %struct.window** %o, align 8
  %pixel_width119 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 34
  %74 = load i32, i32* %pixel_width119, align 4
  br label %cond.end.122

cond.false.120:                                   ; preds = %if.else.112
  %75 = load %struct.window*, %struct.window** %o, align 8
  %pixel_height121 = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 35
  %76 = load i32, i32* %pixel_height121, align 4
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.120, %cond.true.118
  %cond123 = phi i32 [ %74, %cond.true.118 ], [ %76, %cond.false.120 ]
  %conv124 = sext i32 %cond123 to i64
  %cmp125 = icmp ne i64 %add115, %conv124
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %cond.end.122
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i32 0, i32 0)) #5
  unreachable

if.end.128:                                       ; preds = %cond.end.122
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.end.107
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131
  %77 = load i8, i8* %combination_limit, align 1
  %tobool133 = trunc i8 %77 to i1
  br i1 %tobool133, label %if.then.134, label %if.else.170

if.then.134:                                      ; preds = %if.end.132
  %78 = load i8, i8* %horflag, align 1
  %tobool135 = trunc i8 %78 to i1
  br i1 %tobool135, label %cond.true.137, label %cond.false.138

cond.true.137:                                    ; preds = %if.then.134
  %79 = load %struct.window*, %struct.window** %o, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 6
  %80 = load i64, i64* %normal_cols, align 8
  br label %cond.end.139

cond.false.138:                                   ; preds = %if.then.134
  %81 = load %struct.window*, %struct.window** %o, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 5
  %82 = load i64, i64* %normal_lines, align 8
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.138, %cond.true.137
  %cond140 = phi i64 [ %80, %cond.true.137 ], [ %82, %cond.false.138 ]
  store i64 %cond140, i64* %new_normal, align 8
  %83 = load i64, i64* %old.addr, align 8
  %84 = load i8, i8* %horflag, align 1
  %tobool141 = trunc i8 %84 to i1
  call void @make_parent_window(i64 %83, i1 zeroext %tobool141)
  %85 = load %struct.window*, %struct.window** %o, align 8
  %parent142 = getelementptr inbounds %struct.window, %struct.window* %85, i32 0, i32 4
  %86 = load i64, i64* %parent142, align 8
  %call143 = call %struct.window* @XWINDOW(i64 %86)
  store %struct.window* %call143, %struct.window** %p, align 8
  %87 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 327), align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp145 = icmp eq i64 %87, %call144
  br i1 %cmp145, label %if.then.147, label %if.end.149

if.then.147:                                      ; preds = %cond.end.139
  %88 = load %struct.window*, %struct.window** %p, align 8
  %call148 = call i64 @builtin_lisp_symbol(i32 901)
  call void @wset_combination_limit(%struct.window* %88, i64 %call148)
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.147, %cond.end.139
  %89 = load %struct.window*, %struct.window** %p, align 8
  %90 = load i8, i8* %horflag, align 1
  %tobool150 = trunc i8 %90 to i1
  br i1 %tobool150, label %cond.true.152, label %cond.false.154

cond.true.152:                                    ; preds = %if.end.149
  %91 = load %struct.window*, %struct.window** %o, align 8
  %pixel_width153 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 34
  %92 = load i32, i32* %pixel_width153, align 4
  br label %cond.end.156

cond.false.154:                                   ; preds = %if.end.149
  %93 = load %struct.window*, %struct.window** %o, align 8
  %pixel_height155 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 35
  %94 = load i32, i32* %pixel_height155, align 4
  br label %cond.end.156

cond.end.156:                                     ; preds = %cond.false.154, %cond.true.152
  %cond157 = phi i32 [ %92, %cond.true.152 ], [ %94, %cond.false.154 ]
  %conv158 = sext i32 %cond157 to i64
  %shl159 = shl i64 %conv158, 2
  %add160 = add i64 %shl159, 2
  call void @wset_new_pixel(%struct.window* %89, i64 %add160)
  %95 = load %struct.window*, %struct.window** %p, align 8
  %96 = load i8, i8* %horflag, align 1
  %tobool161 = trunc i8 %96 to i1
  br i1 %tobool161, label %cond.true.163, label %cond.false.164

cond.true.163:                                    ; preds = %cond.end.156
  %97 = load %struct.window*, %struct.window** %o, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %97, i32 0, i32 36
  %98 = load i32, i32* %total_cols, align 4
  br label %cond.end.165

cond.false.164:                                   ; preds = %cond.end.156
  %99 = load %struct.window*, %struct.window** %o, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 37
  %100 = load i32, i32* %total_lines, align 4
  br label %cond.end.165

cond.end.165:                                     ; preds = %cond.false.164, %cond.true.163
  %cond166 = phi i32 [ %98, %cond.true.163 ], [ %100, %cond.false.164 ]
  %conv167 = sext i32 %cond166 to i64
  %shl168 = shl i64 %conv167, 2
  %add169 = add i64 %shl168, 2
  call void @wset_new_total(%struct.window* %95, i64 %add169)
  %101 = load %struct.window*, %struct.window** %p, align 8
  %102 = load i64, i64* %new_normal, align 8
  call void @wset_new_normal(%struct.window* %101, i64 %102)
  br label %if.end.173

if.else.170:                                      ; preds = %if.end.132
  %103 = load %struct.window*, %struct.window** %o, align 8
  %parent171 = getelementptr inbounds %struct.window, %struct.window* %103, i32 0, i32 4
  %104 = load i64, i64* %parent171, align 8
  %call172 = call %struct.window* @XWINDOW(i64 %104)
  store %struct.window* %call172, %struct.window** %p, align 8
  br label %if.end.173

if.end.173:                                       ; preds = %if.else.170, %cond.end.165
  %105 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %105)
  %106 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 26
  %107 = bitcast i48* %window_sizes_changed to i64*
  %bf.load174 = load i64, i64* %107, align 8
  %bf.clear175 = and i64 %bf.load174, -524289
  %bf.set = or i64 %bf.clear175, 524288
  store i64 %bf.set, i64* %107, align 8
  %call176 = call i64 @make_window()
  store i64 %call176, i64* %new, align 8
  %108 = load i64, i64* %new, align 8
  %call177 = call %struct.window* @XWINDOW(i64 %108)
  store %struct.window* %call177, %struct.window** %n, align 8
  %109 = load %struct.window*, %struct.window** %n, align 8
  %110 = load i64, i64* %frame, align 8
  call void @wset_frame(%struct.window* %109, i64 %110)
  %111 = load %struct.window*, %struct.window** %n, align 8
  %112 = load %struct.window*, %struct.window** %o, align 8
  %parent178 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 4
  %113 = load i64, i64* %parent178, align 8
  call void @wset_parent(%struct.window* %111, i64 %113)
  %114 = load i64, i64* %side.addr, align 8
  %call179 = call i64 @builtin_lisp_symbol(i32 155)
  %cmp180 = icmp eq i64 %114, %call179
  br i1 %cmp180, label %if.then.186, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %if.end.173
  %115 = load i64, i64* %side.addr, align 8
  %call183 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp184 = icmp eq i64 %115, %call183
  br i1 %cmp184, label %if.then.186, label %if.else.197

if.then.186:                                      ; preds = %lor.lhs.false.182, %if.end.173
  %116 = load %struct.window*, %struct.window** %n, align 8
  %117 = load %struct.window*, %struct.window** %o, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 3
  %118 = load i64, i64* %prev, align 8
  call void @wset_prev(%struct.window* %116, i64 %118)
  %119 = load %struct.window*, %struct.window** %n, align 8
  %prev187 = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 3
  %120 = load i64, i64* %prev187, align 8
  %call188 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp189 = icmp eq i64 %120, %call188
  br i1 %cmp189, label %if.then.191, label %if.else.193

if.then.191:                                      ; preds = %if.then.186
  %121 = load %struct.window*, %struct.window** %p, align 8
  %122 = load i8, i8* %horflag, align 1
  %tobool192 = trunc i8 %122 to i1
  %123 = load i64, i64* %new, align 8
  call void @wset_combination(%struct.window* %121, i1 zeroext %tobool192, i64 %123)
  br label %if.end.196

if.else.193:                                      ; preds = %if.then.186
  %124 = load %struct.window*, %struct.window** %n, align 8
  %prev194 = getelementptr inbounds %struct.window, %struct.window* %124, i32 0, i32 3
  %125 = load i64, i64* %prev194, align 8
  %call195 = call %struct.window* @XWINDOW(i64 %125)
  %126 = load i64, i64* %new, align 8
  call void @wset_next(%struct.window* %call195, i64 %126)
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.193, %if.then.191
  %127 = load %struct.window*, %struct.window** %n, align 8
  %128 = load i64, i64* %old.addr, align 8
  call void @wset_next(%struct.window* %127, i64 %128)
  %129 = load %struct.window*, %struct.window** %o, align 8
  %130 = load i64, i64* %new, align 8
  call void @wset_prev(%struct.window* %129, i64 %130)
  br label %if.end.206

if.else.197:                                      ; preds = %lor.lhs.false.182
  %131 = load %struct.window*, %struct.window** %n, align 8
  %132 = load %struct.window*, %struct.window** %o, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %132, i32 0, i32 2
  %133 = load i64, i64* %next, align 8
  call void @wset_next(%struct.window* %131, i64 %133)
  %134 = load %struct.window*, %struct.window** %n, align 8
  %next198 = getelementptr inbounds %struct.window, %struct.window* %134, i32 0, i32 2
  %135 = load i64, i64* %next198, align 8
  %call199 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp200 = icmp eq i64 %135, %call199
  br i1 %cmp200, label %if.end.205, label %if.then.202

if.then.202:                                      ; preds = %if.else.197
  %136 = load %struct.window*, %struct.window** %n, align 8
  %next203 = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 2
  %137 = load i64, i64* %next203, align 8
  %call204 = call %struct.window* @XWINDOW(i64 %137)
  %138 = load i64, i64* %new, align 8
  call void @wset_prev(%struct.window* %call204, i64 %138)
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.202, %if.else.197
  %139 = load %struct.window*, %struct.window** %n, align 8
  %140 = load i64, i64* %old.addr, align 8
  call void @wset_prev(%struct.window* %139, i64 %140)
  %141 = load %struct.window*, %struct.window** %o, align 8
  %142 = load i64, i64* %new, align 8
  call void @wset_next(%struct.window* %141, i64 %142)
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %if.end.196
  %143 = load %struct.window*, %struct.window** %n, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %143, i32 0, i32 67
  %bf.load207 = load i16, i16* %window_end_valid, align 4
  %bf.clear208 = and i16 %bf.load207, -8193
  store i16 %bf.clear208, i16* %window_end_valid, align 4
  %144 = load %struct.window*, %struct.window** %n, align 8
  %last_cursor_vpos = getelementptr inbounds %struct.window, %struct.window* %144, i32 0, i32 52
  store i32 0, i32* %last_cursor_vpos, align 4
  %145 = load %struct.window*, %struct.window** %r, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 59
  %146 = load i32, i32* %left_margin_cols, align 4
  %147 = load %struct.window*, %struct.window** %n, align 8
  %left_margin_cols209 = getelementptr inbounds %struct.window, %struct.window* %147, i32 0, i32 59
  store i32 %146, i32* %left_margin_cols209, align 4
  %148 = load %struct.window*, %struct.window** %r, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 60
  %149 = load i32, i32* %right_margin_cols, align 4
  %150 = load %struct.window*, %struct.window** %n, align 8
  %right_margin_cols210 = getelementptr inbounds %struct.window, %struct.window* %150, i32 0, i32 60
  store i32 %149, i32* %right_margin_cols210, align 4
  %151 = load %struct.window*, %struct.window** %r, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %151, i32 0, i32 57
  %152 = load i32, i32* %left_fringe_width, align 4
  %153 = load %struct.window*, %struct.window** %n, align 8
  %left_fringe_width211 = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 57
  store i32 %152, i32* %left_fringe_width211, align 4
  %154 = load %struct.window*, %struct.window** %r, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %154, i32 0, i32 58
  %155 = load i32, i32* %right_fringe_width, align 4
  %156 = load %struct.window*, %struct.window** %n, align 8
  %right_fringe_width212 = getelementptr inbounds %struct.window, %struct.window* %156, i32 0, i32 58
  store i32 %155, i32* %right_fringe_width212, align 4
  %157 = load %struct.window*, %struct.window** %r, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 67
  %bf.load213 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr214 = lshr i16 %bf.load213, 12
  %bf.clear215 = and i16 %bf.lshr214, 1
  %bf.cast216 = trunc i16 %bf.clear215 to i1
  %158 = load %struct.window*, %struct.window** %n, align 8
  %fringes_outside_margins217 = getelementptr inbounds %struct.window, %struct.window* %158, i32 0, i32 67
  %159 = zext i1 %bf.cast216 to i16
  %bf.load218 = load i16, i16* %fringes_outside_margins217, align 4
  %bf.shl = shl i16 %159, 12
  %bf.clear219 = and i16 %bf.load218, -4097
  %bf.set220 = or i16 %bf.clear219, %bf.shl
  store i16 %bf.set220, i16* %fringes_outside_margins217, align 4
  %bf.result.cast = trunc i16 %159 to i8
  %tobool221 = trunc i8 %bf.result.cast to i1
  %160 = load %struct.window*, %struct.window** %r, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %160, i32 0, i32 61
  %161 = load i32, i32* %scroll_bar_width, align 4
  %162 = load %struct.window*, %struct.window** %n, align 8
  %scroll_bar_width222 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 61
  store i32 %161, i32* %scroll_bar_width222, align 4
  %163 = load %struct.window*, %struct.window** %r, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 62
  %164 = load i32, i32* %scroll_bar_height, align 4
  %165 = load %struct.window*, %struct.window** %n, align 8
  %scroll_bar_height223 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 62
  store i32 %164, i32* %scroll_bar_height223, align 4
  %166 = load %struct.window*, %struct.window** %n, align 8
  %167 = load %struct.window*, %struct.window** %r, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %167, i32 0, i32 16
  %168 = load i64, i64* %vertical_scroll_bar_type, align 8
  call void @wset_vertical_scroll_bar_type(%struct.window* %166, i64 %168)
  %169 = load %struct.window*, %struct.window** %n, align 8
  %170 = load %struct.window*, %struct.window** %r, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %170, i32 0, i32 18
  %171 = load i64, i64* %horizontal_scroll_bar_type, align 8
  call void @wset_horizontal_scroll_bar_type(%struct.window* %169, i64 %171)
  %172 = load i8, i8* %horflag, align 1
  %tobool224 = trunc i8 %172 to i1
  br i1 %tobool224, label %if.then.225, label %if.else.232

if.then.225:                                      ; preds = %if.end.206
  %173 = load %struct.window*, %struct.window** %o, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %173, i32 0, i32 31
  %174 = load i32, i32* %pixel_top, align 4
  %175 = load %struct.window*, %struct.window** %n, align 8
  %pixel_top226 = getelementptr inbounds %struct.window, %struct.window* %175, i32 0, i32 31
  store i32 %174, i32* %pixel_top226, align 4
  %176 = load %struct.window*, %struct.window** %o, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %176, i32 0, i32 33
  %177 = load i32, i32* %top_line, align 4
  %178 = load %struct.window*, %struct.window** %n, align 8
  %top_line227 = getelementptr inbounds %struct.window, %struct.window* %178, i32 0, i32 33
  store i32 %177, i32* %top_line227, align 4
  %179 = load %struct.window*, %struct.window** %o, align 8
  %pixel_height228 = getelementptr inbounds %struct.window, %struct.window* %179, i32 0, i32 35
  %180 = load i32, i32* %pixel_height228, align 4
  %181 = load %struct.window*, %struct.window** %n, align 8
  %pixel_height229 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 35
  store i32 %180, i32* %pixel_height229, align 4
  %182 = load %struct.window*, %struct.window** %o, align 8
  %total_lines230 = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 37
  %183 = load i32, i32* %total_lines230, align 4
  %184 = load %struct.window*, %struct.window** %n, align 8
  %total_lines231 = getelementptr inbounds %struct.window, %struct.window* %184, i32 0, i32 37
  store i32 %183, i32* %total_lines231, align 4
  br label %if.end.239

if.else.232:                                      ; preds = %if.end.206
  %185 = load %struct.window*, %struct.window** %o, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 30
  %186 = load i32, i32* %pixel_left, align 4
  %187 = load %struct.window*, %struct.window** %n, align 8
  %pixel_left233 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 30
  store i32 %186, i32* %pixel_left233, align 4
  %188 = load %struct.window*, %struct.window** %o, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %188, i32 0, i32 32
  %189 = load i32, i32* %left_col, align 4
  %190 = load %struct.window*, %struct.window** %n, align 8
  %left_col234 = getelementptr inbounds %struct.window, %struct.window* %190, i32 0, i32 32
  store i32 %189, i32* %left_col234, align 4
  %191 = load %struct.window*, %struct.window** %o, align 8
  %pixel_width235 = getelementptr inbounds %struct.window, %struct.window* %191, i32 0, i32 34
  %192 = load i32, i32* %pixel_width235, align 4
  %193 = load %struct.window*, %struct.window** %n, align 8
  %pixel_width236 = getelementptr inbounds %struct.window, %struct.window* %193, i32 0, i32 34
  store i32 %192, i32* %pixel_width236, align 4
  %194 = load %struct.window*, %struct.window** %o, align 8
  %total_cols237 = getelementptr inbounds %struct.window, %struct.window* %194, i32 0, i32 36
  %195 = load i32, i32* %total_cols237, align 4
  %196 = load %struct.window*, %struct.window** %n, align 8
  %total_cols238 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 36
  store i32 %195, i32* %total_cols238, align 4
  br label %if.end.239

if.end.239:                                       ; preds = %if.else.232, %if.then.225
  %197 = load %struct.window*, %struct.window** %n, align 8
  %198 = load i64, i64* %pixel_size.addr, align 8
  call void @wset_new_pixel(%struct.window* %197, i64 %198)
  store i64 0, i64* %sum, align 8
  %199 = load %struct.window*, %struct.window** %p, align 8
  %contents240 = getelementptr inbounds %struct.window, %struct.window* %199, i32 0, i32 10
  %200 = load i64, i64* %contents240, align 8
  %call241 = call %struct.window* @XWINDOW(i64 %200)
  store %struct.window* %call241, %struct.window** %c, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.257, %if.end.239
  %201 = load %struct.window*, %struct.window** %c, align 8
  %tobool242 = icmp ne %struct.window* %201, null
  br i1 %tobool242, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %202 = load %struct.window*, %struct.window** %c, align 8
  %203 = load %struct.window*, %struct.window** %n, align 8
  %cmp243 = icmp ne %struct.window* %202, %203
  br i1 %cmp243, label %if.then.245, label %if.end.248

if.then.245:                                      ; preds = %while.body
  %204 = load i64, i64* %sum, align 8
  %205 = load %struct.window*, %struct.window** %c, align 8
  %new_total = getelementptr inbounds %struct.window, %struct.window* %205, i32 0, i32 7
  %206 = load i64, i64* %new_total, align 8
  %shr246 = ashr i64 %206, 2
  %add247 = add nsw i64 %204, %shr246
  store i64 %add247, i64* %sum, align 8
  br label %if.end.248

if.end.248:                                       ; preds = %if.then.245, %while.body
  %207 = load %struct.window*, %struct.window** %c, align 8
  %next249 = getelementptr inbounds %struct.window, %struct.window* %207, i32 0, i32 2
  %208 = load i64, i64* %next249, align 8
  %call250 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp251 = icmp eq i64 %208, %call250
  br i1 %cmp251, label %cond.true.253, label %cond.false.254

cond.true.253:                                    ; preds = %if.end.248
  br label %cond.end.257

cond.false.254:                                   ; preds = %if.end.248
  %209 = load %struct.window*, %struct.window** %c, align 8
  %next255 = getelementptr inbounds %struct.window, %struct.window* %209, i32 0, i32 2
  %210 = load i64, i64* %next255, align 8
  %call256 = call %struct.window* @XWINDOW(i64 %210)
  br label %cond.end.257

cond.end.257:                                     ; preds = %cond.false.254, %cond.true.253
  %cond258 = phi %struct.window* [ null, %cond.true.253 ], [ %call256, %cond.false.254 ]
  store %struct.window* %cond258, %struct.window** %c, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %211 = load %struct.window*, %struct.window** %n, align 8
  %212 = load i8, i8* %horflag, align 1
  %tobool259 = trunc i8 %212 to i1
  br i1 %tobool259, label %cond.true.261, label %cond.false.263

cond.true.261:                                    ; preds = %while.end
  %213 = load %struct.window*, %struct.window** %p, align 8
  %total_cols262 = getelementptr inbounds %struct.window, %struct.window* %213, i32 0, i32 36
  %214 = load i32, i32* %total_cols262, align 4
  br label %cond.end.265

cond.false.263:                                   ; preds = %while.end
  %215 = load %struct.window*, %struct.window** %p, align 8
  %total_lines264 = getelementptr inbounds %struct.window, %struct.window* %215, i32 0, i32 37
  %216 = load i32, i32* %total_lines264, align 4
  br label %cond.end.265

cond.end.265:                                     ; preds = %cond.false.263, %cond.true.261
  %cond266 = phi i32 [ %214, %cond.true.261 ], [ %216, %cond.false.263 ]
  %conv267 = sext i32 %cond266 to i64
  %217 = load i64, i64* %sum, align 8
  %sub268 = sub nsw i64 %conv267, %217
  %shl269 = shl i64 %sub268, 2
  %add270 = add i64 %shl269, 2
  call void @wset_new_total(%struct.window* %211, i64 %add270)
  %218 = load %struct.window*, %struct.window** %n, align 8
  %219 = load i64, i64* %normal_size.addr, align 8
  call void @wset_new_normal(%struct.window* %218, i64 %219)
  call void @block_input()
  %220 = load %struct.window*, %struct.window** %p, align 8
  %221 = load i8, i8* %horflag, align 1
  %tobool271 = trunc i8 %221 to i1
  call void @window_resize_apply(%struct.window* %220, i1 zeroext %tobool271)
  %222 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %222)
  %223 = load i64, i64* %new, align 8
  %224 = load %struct.window*, %struct.window** %r, align 8
  %contents272 = getelementptr inbounds %struct.window, %struct.window* %224, i32 0, i32 10
  %225 = load i64, i64* %contents272, align 8
  call void @set_window_buffer(i64 %223, i64 %225, i1 zeroext false, i1 zeroext true)
  call void @unblock_input()
  %226 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 332), align 8
  %call273 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp274 = icmp eq i64 %226, %call273
  br i1 %cmp274, label %if.end.279, label %if.then.276

if.then.276:                                      ; preds = %cond.end.265
  %call277 = call i64 @builtin_lisp_symbol(i32 1033)
  %227 = load i64, i64* %new, align 8
  %228 = load %struct.window*, %struct.window** %n, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %228, i32 0, i32 11
  %229 = load i64, i64* %start, align 8
  %call278 = call i64 @Fmarker_position(i64 %229)
  call void @run_hook_with_args_2(i64 %call277, i64 %227, i64 %call278)
  br label %if.end.279

if.end.279:                                       ; preds = %if.then.276, %cond.end.265
  %230 = load i64, i64* %new, align 8
  ret i64 %230
}

; Function Attrs: nounwind uwtable
define internal void @make_parent_window(i64 %window, i1 zeroext %horflag) #0 {
entry:
  %window.addr = alloca i64, align 8
  %horflag.addr = alloca i8, align 1
  %parent = alloca i64, align 8
  %o = alloca %struct.window*, align 8
  %p = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %frombool = zext i1 %horflag to i8
  store i8 %frombool, i8* %horflag.addr, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %o, align 8
  %call1 = call %struct.window* @allocate_window()
  store %struct.window* %call1, %struct.window** %p, align 8
  %1 = load %struct.window*, %struct.window** %p, align 8
  %2 = bitcast %struct.window* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 8
  %3 = load %struct.window*, %struct.window** %o, align 8
  %4 = bitcast %struct.window* %3 to i8*
  %add.ptr2 = getelementptr inbounds i8, i8* %4, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr2, i64 480, i32 1, i1 false)
  %5 = load %struct.window*, %struct.window** %p, align 8
  call void @adjust_window_count(%struct.window* %5, i32 1)
  %6 = load %struct.window*, %struct.window** %p, align 8
  %7 = bitcast %struct.window* %6 to i8*
  %call3 = call i64 @make_lisp_ptr(i8* %7, i32 5)
  store i64 %call3, i64* %parent, align 8
  %8 = load i64, i64* @sequence_number, align 8
  %inc = add nsw i64 %8, 1
  store i64 %inc, i64* @sequence_number, align 8
  %9 = load %struct.window*, %struct.window** %p, align 8
  %sequence_number = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 29
  store i64 %inc, i64* %sequence_number, align 8
  %10 = load i64, i64* %window.addr, align 8
  %11 = load i64, i64* %parent, align 8
  call void @replace_window(i64 %10, i64 %11, i1 zeroext true)
  %12 = load %struct.window*, %struct.window** %o, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next(%struct.window* %12, i64 %call4)
  %13 = load %struct.window*, %struct.window** %o, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev(%struct.window* %13, i64 %call5)
  %14 = load %struct.window*, %struct.window** %o, align 8
  %15 = load i64, i64* %parent, align 8
  call void @wset_parent(%struct.window* %14, i64 %15)
  %16 = load %struct.window*, %struct.window** %p, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_start(%struct.window* %16, i64 %call6)
  %17 = load %struct.window*, %struct.window** %p, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_pointm(%struct.window* %17, i64 %call7)
  %18 = load %struct.window*, %struct.window** %p, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_old_pointm(%struct.window* %18, i64 %call8)
  %19 = load %struct.window*, %struct.window** %p, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_buffer(%struct.window* %19, i64 %call9)
  %20 = load %struct.window*, %struct.window** %p, align 8
  %21 = load i8, i8* %horflag.addr, align 1
  %tobool = trunc i8 %21 to i1
  %22 = load i64, i64* %window.addr, align 8
  call void @wset_combination(%struct.window* %20, i1 zeroext %tobool, i64 %22)
  %23 = load %struct.window*, %struct.window** %p, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination_limit(%struct.window* %23, i64 %call10)
  %24 = load %struct.window*, %struct.window** %p, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_window_parameters(%struct.window* %24, i64 %call11)
  ret void
}

declare void @wset_frame(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @wset_parent(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %parent = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 4
  store i64 %0, i64* %parent, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fdelete_window_internal(i64 %window) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %parent = alloca i64, align 8
  %sibling = alloca i64, align 8
  %frame = alloca i64, align 8
  %root = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %p = alloca %struct.window*, align 8
  %s = alloca %struct.window*, align 8
  %r = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %horflag = alloca i8, align 1
  %before_sibling = alloca i8, align 1
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  %new_selected_window = alloca i64, align 8
  %mru_window = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i8 0, i8* %before_sibling, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_any_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %2 = bitcast %struct.window* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %window.addr, align 8
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %parent4 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 4
  %6 = load i64, i64* %parent4, align 8
  store i64 %6, i64* %parent, align 8
  %7 = load i64, i64* %parent, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %7, %call5
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i32 0, i32 0)) #5
  unreachable

if.else:                                          ; preds = %if.end
  %8 = load %struct.window*, %struct.window** %w, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 3
  %9 = load i64, i64* %prev, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %9, %call8
  br i1 %cmp9, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.else
  %10 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 2
  %11 = load i64, i64* %next, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %11, %call10
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.14, i32 0, i32 0)) #5
  unreachable

if.end.13:                                        ; preds = %land.lhs.true, %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13
  %12 = load i64, i64* %parent, align 8
  %call15 = call %struct.window* @XWINDOW(i64 %12)
  store %struct.window* %call15, %struct.window** %p, align 8
  %13 = load %struct.window*, %struct.window** %p, align 8
  %contents16 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 10
  %14 = load i64, i64* %contents16, align 8
  %call17 = call zeroext i1 @WINDOWP(i64 %14)
  br i1 %call17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.14
  %15 = load %struct.window*, %struct.window** %p, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.14
  %16 = phi i1 [ false, %if.end.14 ], [ %bf.cast, %land.rhs ]
  %frombool = zext i1 %16 to i8
  store i8 %frombool, i8* %horflag, align 1
  %17 = load %struct.window*, %struct.window** %w, align 8
  %frame18 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 1
  %18 = load i64, i64* %frame18, align 8
  store i64 %18, i64* %frame, align 8
  %19 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  store %struct.frame* %21, %struct.frame** %f, align 8
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 5
  %23 = load i64, i64* %root_window, align 8
  store i64 %23, i64* %root, align 8
  %24 = load i64, i64* %root, align 8
  %call19 = call %struct.window* @XWINDOW(i64 %24)
  store %struct.window* %call19, %struct.window** %r, align 8
  %25 = load %struct.window*, %struct.window** %w, align 8
  %prev20 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 3
  %26 = load i64, i64* %prev20, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %26, %call21
  br i1 %cmp22, label %if.then.23, label %if.else.27

if.then.23:                                       ; preds = %land.end
  store i8 1, i8* %before_sibling, align 1
  %27 = load %struct.window*, %struct.window** %w, align 8
  %next24 = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 2
  %28 = load i64, i64* %next24, align 8
  store i64 %28, i64* %sibling, align 8
  %29 = load i64, i64* %sibling, align 8
  %call25 = call %struct.window* @XWINDOW(i64 %29)
  store %struct.window* %call25, %struct.window** %s, align 8
  %30 = load %struct.window*, %struct.window** %s, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev(%struct.window* %30, i64 %call26)
  %31 = load %struct.window*, %struct.window** %p, align 8
  %32 = load i8, i8* %horflag, align 1
  %tobool = trunc i8 %32 to i1
  %33 = load i64, i64* %sibling, align 8
  call void @wset_combination(%struct.window* %31, i1 zeroext %tobool, i64 %33)
  br label %if.end.38

if.else.27:                                       ; preds = %land.end
  %34 = load %struct.window*, %struct.window** %w, align 8
  %prev28 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 3
  %35 = load i64, i64* %prev28, align 8
  store i64 %35, i64* %sibling, align 8
  %36 = load i64, i64* %sibling, align 8
  %call29 = call %struct.window* @XWINDOW(i64 %36)
  store %struct.window* %call29, %struct.window** %s, align 8
  %37 = load %struct.window*, %struct.window** %s, align 8
  %38 = load %struct.window*, %struct.window** %w, align 8
  %next30 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 2
  %39 = load i64, i64* %next30, align 8
  call void @wset_next(%struct.window* %37, i64 %39)
  %40 = load %struct.window*, %struct.window** %s, align 8
  %next31 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 2
  %41 = load i64, i64* %next31, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %41, %call32
  br i1 %cmp33, label %if.end.37, label %if.then.34

if.then.34:                                       ; preds = %if.else.27
  %42 = load %struct.window*, %struct.window** %s, align 8
  %next35 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 2
  %43 = load i64, i64* %next35, align 8
  %call36 = call %struct.window* @XWINDOW(i64 %43)
  %44 = load i64, i64* %sibling, align 8
  call void @wset_prev(%struct.window* %call36, i64 %44)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.else.27
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then.23
  %45 = load %struct.window*, %struct.window** %r, align 8
  %46 = load i8, i8* %horflag, align 1
  %tobool39 = trunc i8 %46 to i1
  %call40 = call zeroext i1 @window_resize_check(%struct.window* %45, i1 zeroext %tobool39)
  br i1 %call40, label %land.lhs.true.41, label %if.else.146

land.lhs.true.41:                                 ; preds = %if.end.38
  %47 = load %struct.window*, %struct.window** %r, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 9
  %48 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %48, 2
  %49 = load i8, i8* %horflag, align 1
  %tobool42 = trunc i8 %49 to i1
  br i1 %tobool42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.41
  %50 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 34
  %51 = load i32, i32* %pixel_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.41
  %52 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 35
  %53 = load i32, i32* %pixel_height, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %51, %cond.true ], [ %53, %cond.false ]
  %conv = sext i32 %cond to i64
  %cmp43 = icmp eq i64 %shr, %conv
  br i1 %cmp43, label %if.then.45, label %if.else.146

if.then.45:                                       ; preds = %cond.end
  call void @block_input()
  %54 = load %struct.window*, %struct.window** %w, align 8
  call void @xwidget_view_delete_all_in_window(%struct.window* %54)
  %55 = load %struct.window*, %struct.window** %p, align 8
  %56 = load i8, i8* %horflag, align 1
  %tobool46 = trunc i8 %56 to i1
  call void @window_resize_apply(%struct.window* %55, i1 zeroext %tobool46)
  %57 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 26
  %58 = bitcast i48* %output_method to i64*
  %bf.load47 = load i64, i64* %58, align 8
  %bf.lshr48 = lshr i64 %bf.load47, 23
  %bf.clear49 = and i64 %bf.lshr48, 7
  %bf.cast50 = trunc i64 %bf.clear49 to i32
  %cmp51 = icmp eq i32 %bf.cast50, 0
  br i1 %cmp51, label %if.end.74, label %if.then.53

if.then.53:                                       ; preds = %if.then.45
  %59 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method54 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 26
  %60 = bitcast i48* %output_method54 to i64*
  %bf.load55 = load i64, i64* %60, align 8
  %bf.lshr56 = lshr i64 %bf.load55, 23
  %bf.clear57 = and i64 %bf.lshr56, 7
  %bf.cast58 = trunc i64 %bf.clear57 to i32
  %cmp59 = icmp eq i32 %bf.cast58, 2
  br i1 %cmp59, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %if.then.53
  %61 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %62 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %62, i32 0, i32 44
  %63 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %63, i32 0, i32 25
  br label %cond.end.66

cond.false.62:                                    ; preds = %if.then.53
  %64 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data63 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data63 to %struct.tty_output**
  %65 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info64 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %65, i32 0, i32 0
  %66 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info64, align 8
  %mouse_highlight65 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %66, i32 0, i32 14
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.62, %cond.true.61
  %cond67 = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true.61 ], [ %mouse_highlight65, %cond.false.62 ]
  store %struct.Mouse_HLInfo* %cond67, %struct.Mouse_HLInfo** %hlinfo, align 8
  %67 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_window = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %67, i32 0, i32 6
  %68 = load i64, i64* %mouse_face_window, align 8
  %69 = load i64, i64* %window.addr, align 8
  %cmp68 = icmp eq i64 %68, %69
  br i1 %cmp68, label %if.then.70, label %if.end.73

if.then.70:                                       ; preds = %cond.end.66
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  %70 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_window72 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %70, i32 0, i32 6
  store i64 %call71, i64* %mouse_face_window72, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.70, %cond.end.66
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then.45
  %71 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %71)
  %call75 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call75, i64* @Vwindow_list, align 8
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 26
  %73 = bitcast i48* %window_sizes_changed to i64*
  %bf.load76 = load i64, i64* %73, align 8
  %bf.clear77 = and i64 %bf.load76, -524289
  %bf.set = or i64 %bf.clear77, 524288
  store i64 %bf.set, i64* %73, align 8
  %74 = load %struct.window*, %struct.window** %w, align 8
  %call78 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next(%struct.window* %74, i64 %call78)
  %75 = load %struct.window*, %struct.window** %w, align 8
  call void @free_window_matrices(%struct.window* %75)
  %76 = load %struct.window*, %struct.window** %w, align 8
  %contents79 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 10
  %77 = load i64, i64* %contents79, align 8
  %call80 = call zeroext i1 @WINDOWP(i64 %77)
  br i1 %call80, label %if.then.81, label %if.else.84

if.then.81:                                       ; preds = %if.end.74
  %78 = load %struct.window*, %struct.window** %w, align 8
  %contents82 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 10
  %79 = load i64, i64* %contents82, align 8
  call void @delete_all_child_windows(i64 %79)
  %80 = load %struct.window*, %struct.window** %w, align 8
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination(%struct.window* %80, i1 zeroext false, i64 %call83)
  br label %if.end.89

if.else.84:                                       ; preds = %if.end.74
  %81 = load %struct.window*, %struct.window** %w, align 8
  call void @unshow_buffer(%struct.window* %81)
  %82 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 12
  %83 = load i64, i64* %pointm, align 8
  %call85 = call %struct.Lisp_Marker* @XMARKER(i64 %83)
  call void @unchain_marker(%struct.Lisp_Marker* %call85)
  %84 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %84, i32 0, i32 13
  %85 = load i64, i64* %old_pointm, align 8
  %call86 = call %struct.Lisp_Marker* @XMARKER(i64 %85)
  call void @unchain_marker(%struct.Lisp_Marker* %call86)
  %86 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 11
  %87 = load i64, i64* %start, align 8
  %call87 = call %struct.Lisp_Marker* @XMARKER(i64 %87)
  call void @unchain_marker(%struct.Lisp_Marker* %call87)
  %88 = load %struct.window*, %struct.window** %w, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_buffer(%struct.window* %88, i64 %call88)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.84, %if.then.81
  %89 = load %struct.window*, %struct.window** %s, align 8
  %prev90 = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 3
  %90 = load i64, i64* %prev90, align 8
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp92 = icmp eq i64 %90, %call91
  br i1 %cmp92, label %land.lhs.true.94, label %if.end.101

land.lhs.true.94:                                 ; preds = %if.end.89
  %91 = load %struct.window*, %struct.window** %s, align 8
  %next95 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 2
  %92 = load i64, i64* %next95, align 8
  %call96 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp97 = icmp eq i64 %92, %call96
  br i1 %cmp97, label %if.then.99, label %if.end.101

if.then.99:                                       ; preds = %land.lhs.true.94
  %93 = load i64, i64* %parent, align 8
  %94 = load i64, i64* %sibling, align 8
  call void @replace_window(i64 %93, i64 %94, i1 zeroext false)
  %95 = load %struct.window*, %struct.window** %s, align 8
  %96 = load %struct.window*, %struct.window** %p, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %96, i32 0, i32 6
  %97 = load i64, i64* %normal_cols, align 8
  call void @wset_normal_cols(%struct.window* %95, i64 %97)
  %98 = load %struct.window*, %struct.window** %s, align 8
  %99 = load %struct.window*, %struct.window** %p, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 5
  %100 = load i64, i64* %normal_lines, align 8
  call void @wset_normal_lines(%struct.window* %98, i64 %100)
  %101 = load %struct.window*, %struct.window** %p, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination(%struct.window* %101, i1 zeroext false, i64 %call100)
  %102 = load i64, i64* %sibling, align 8
  call void @recombine_windows(i64 %102)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.99, %land.lhs.true.94, %if.end.89
  %103 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %103)
  %104 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %104, i32 0, i32 6
  %105 = load i64, i64* %selected_window, align 8
  %call102 = call zeroext i1 @WINDOWP(i64 %105)
  br i1 %call102, label %land.lhs.true.104, label %if.then.110

land.lhs.true.104:                                ; preds = %if.end.101
  %106 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window105 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 6
  %107 = load i64, i64* %selected_window105, align 8
  %call106 = call %struct.window* @XWINDOW(i64 %107)
  %contents107 = getelementptr inbounds %struct.window, %struct.window* %call106, i32 0, i32 10
  %108 = load i64, i64* %contents107, align 8
  %call108 = call zeroext i1 @BUFFERP(i64 %108)
  br i1 %call108, label %if.else.144, label %if.then.110

if.then.110:                                      ; preds = %land.lhs.true.104, %if.end.101
  %109 = load i64, i64* %frame, align 8
  %call111 = call i64 @Fframe_first_window(i64 %109)
  store i64 %call111, i64* %new_selected_window, align 8
  %110 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window112 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 6
  %111 = load i64, i64* %selected_window112, align 8
  %112 = load i64, i64* @selected_window, align 8
  %cmp113 = icmp eq i64 %111, %112
  br i1 %cmp113, label %if.then.115, label %if.else.118

if.then.115:                                      ; preds = %if.then.110
  %113 = load i64, i64* %new_selected_window, align 8
  %call116 = call i64 @builtin_lisp_symbol(i32 901)
  %call117 = call i64 @Fselect_window(i64 %113, i64 %call116)
  br label %if.end.119

if.else.118:                                      ; preds = %if.then.110
  %114 = load %struct.frame*, %struct.frame** %f, align 8
  %115 = load i64, i64* %new_selected_window, align 8
  call void @fset_selected_window(%struct.frame* %114, i64 %115)
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.118, %if.then.115
  call void @unblock_input()
  %call120 = call i64 @builtin_lisp_symbol(i32 487)
  %116 = load i64, i64* %frame, align 8
  %call121 = call i64 @call1(i64 %call120, i64 %116)
  store i64 %call121, i64* %mru_window, align 8
  %117 = load i64, i64* %mru_window, align 8
  %call122 = call zeroext i1 @WINDOWP(i64 %117)
  br i1 %call122, label %land.lhs.true.124, label %if.end.135

land.lhs.true.124:                                ; preds = %if.end.119
  %118 = load i64, i64* %mru_window, align 8
  %call125 = call %struct.window* @XWINDOW(i64 %118)
  %contents126 = getelementptr inbounds %struct.window, %struct.window* %call125, i32 0, i32 10
  %119 = load i64, i64* %contents126, align 8
  %call127 = call zeroext i1 @BUFFERP(i64 %119)
  br i1 %call127, label %land.lhs.true.129, label %if.end.135

land.lhs.true.129:                                ; preds = %land.lhs.true.124
  %120 = load i64, i64* %mru_window, align 8
  %call130 = call %struct.window* @XWINDOW(i64 %120)
  %frame131 = getelementptr inbounds %struct.window, %struct.window* %call130, i32 0, i32 1
  %121 = load i64, i64* %frame131, align 8
  %122 = load i64, i64* %frame, align 8
  %cmp132 = icmp eq i64 %121, %122
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %land.lhs.true.129
  %123 = load i64, i64* %mru_window, align 8
  store i64 %123, i64* %new_selected_window, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.134, %land.lhs.true.129, %land.lhs.true.124, %if.end.119
  %124 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window136 = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 6
  %125 = load i64, i64* %selected_window136, align 8
  %126 = load i64, i64* @selected_window, align 8
  %cmp137 = icmp eq i64 %125, %126
  br i1 %cmp137, label %if.then.139, label %if.else.142

if.then.139:                                      ; preds = %if.end.135
  %127 = load i64, i64* %new_selected_window, align 8
  %call140 = call i64 @builtin_lisp_symbol(i32 0)
  %call141 = call i64 @Fselect_window(i64 %127, i64 %call140)
  br label %if.end.143

if.else.142:                                      ; preds = %if.end.135
  %128 = load %struct.frame*, %struct.frame** %f, align 8
  %129 = load i64, i64* %new_selected_window, align 8
  call void @fset_selected_window(%struct.frame* %128, i64 %129)
  br label %if.end.143

if.end.143:                                       ; preds = %if.else.142, %if.then.139
  br label %if.end.145

if.else.144:                                      ; preds = %land.lhs.true.104
  call void @unblock_input()
  br label %if.end.145

if.end.145:                                       ; preds = %if.else.144, %if.end.143
  br label %if.end.160

if.else.146:                                      ; preds = %cond.end, %if.end.38
  %130 = load i8, i8* %before_sibling, align 1
  %tobool147 = trunc i8 %130 to i1
  br i1 %tobool147, label %if.then.148, label %if.else.150

if.then.148:                                      ; preds = %if.else.146
  %131 = load %struct.window*, %struct.window** %s, align 8
  %132 = load i64, i64* %window.addr, align 8
  call void @wset_prev(%struct.window* %131, i64 %132)
  %133 = load %struct.window*, %struct.window** %p, align 8
  %134 = load i8, i8* %horflag, align 1
  %tobool149 = trunc i8 %134 to i1
  %135 = load i64, i64* %window.addr, align 8
  call void @wset_combination(%struct.window* %133, i1 zeroext %tobool149, i64 %135)
  br label %if.end.159

if.else.150:                                      ; preds = %if.else.146
  %136 = load %struct.window*, %struct.window** %s, align 8
  %137 = load i64, i64* %window.addr, align 8
  call void @wset_next(%struct.window* %136, i64 %137)
  %138 = load %struct.window*, %struct.window** %w, align 8
  %next151 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 2
  %139 = load i64, i64* %next151, align 8
  %call152 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp153 = icmp eq i64 %139, %call152
  br i1 %cmp153, label %if.end.158, label %if.then.155

if.then.155:                                      ; preds = %if.else.150
  %140 = load %struct.window*, %struct.window** %w, align 8
  %next156 = getelementptr inbounds %struct.window, %struct.window* %140, i32 0, i32 2
  %141 = load i64, i64* %next156, align 8
  %call157 = call %struct.window* @XWINDOW(i64 %141)
  %142 = load i64, i64* %window.addr, align 8
  call void @wset_prev(%struct.window* %call157, i64 %142)
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.155, %if.else.150
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %if.then.148
  call void (i8*, ...) @error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0)) #5
  unreachable

if.end.160:                                       ; preds = %if.end.145
  %call161 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call161, i64* %retval
  br label %return

return:                                           ; preds = %if.end.160, %if.then
  %143 = load i64, i64* %retval
  ret i64 %143
}

declare void @xwidget_view_delete_all_in_window(%struct.window*) #1

declare void @unchain_marker(%struct.Lisp_Marker*) #1

; Function Attrs: nounwind uwtable
define internal void @recombine_windows(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %p = alloca %struct.window*, align 8
  %c = alloca %struct.window*, align 8
  %parent = alloca i64, align 8
  %child = alloca i64, align 8
  %horflag = alloca i8, align 1
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %parent1 = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 4
  %2 = load i64, i64* %parent1, align 8
  store i64 %2, i64* %parent, align 8
  %3 = load i64, i64* %parent, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call2
  br i1 %cmp, label %if.end.71, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w, align 8
  %combination_limit = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 22
  %5 = load i64, i64* %combination_limit, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %5, %call3
  br i1 %cmp4, label %if.then, label %if.end.71

if.then:                                          ; preds = %land.lhs.true
  %6 = load i64, i64* %parent, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %6)
  store %struct.window* %call5, %struct.window** %p, align 8
  %7 = load %struct.window*, %struct.window** %p, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents, align 8
  %call6 = call zeroext i1 @WINDOWP(i64 %8)
  br i1 %call6, label %land.lhs.true.7, label %if.end.70

land.lhs.true.7:                                  ; preds = %if.then
  %9 = load %struct.window*, %struct.window** %w, align 8
  %contents8 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 10
  %10 = load i64, i64* %contents8, align 8
  %call9 = call zeroext i1 @WINDOWP(i64 %10)
  br i1 %call9, label %land.lhs.true.10, label %if.end.70

land.lhs.true.10:                                 ; preds = %land.lhs.true.7
  %11 = load %struct.window*, %struct.window** %p, align 8
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  %conv = zext i1 %bf.cast to i32
  %12 = load %struct.window*, %struct.window** %w, align 8
  %horizontal11 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 67
  %bf.load12 = load i16, i16* %horizontal11, align 4
  %bf.lshr13 = lshr i16 %bf.load12, 1
  %bf.clear14 = and i16 %bf.lshr13, 1
  %bf.cast15 = trunc i16 %bf.clear14 to i1
  %conv16 = zext i1 %bf.cast15 to i32
  %cmp17 = icmp eq i32 %conv, %conv16
  br i1 %cmp17, label %if.then.19, label %if.end.70

if.then.19:                                       ; preds = %land.lhs.true.10
  %13 = load %struct.window*, %struct.window** %w, align 8
  %contents20 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 10
  %14 = load i64, i64* %contents20, align 8
  %call21 = call zeroext i1 @WINDOWP(i64 %14)
  br i1 %call21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.19
  %15 = load %struct.window*, %struct.window** %w, align 8
  %horizontal23 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 67
  %bf.load24 = load i16, i16* %horizontal23, align 4
  %bf.lshr25 = lshr i16 %bf.load24, 1
  %bf.clear26 = and i16 %bf.lshr25, 1
  %bf.cast27 = trunc i16 %bf.clear26 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.19
  %16 = phi i1 [ false, %if.then.19 ], [ %bf.cast27, %land.rhs ]
  %frombool = zext i1 %16 to i8
  store i8 %frombool, i8* %horflag, align 1
  %17 = load %struct.window*, %struct.window** %w, align 8
  %contents29 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 10
  %18 = load i64, i64* %contents29, align 8
  store i64 %18, i64* %child, align 8
  %19 = load i64, i64* %child, align 8
  %call30 = call %struct.window* @XWINDOW(i64 %19)
  store %struct.window* %call30, %struct.window** %c, align 8
  %20 = load %struct.window*, %struct.window** %w, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 3
  %21 = load i64, i64* %prev, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %21, %call31
  br i1 %cmp32, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %land.end
  %22 = load %struct.window*, %struct.window** %p, align 8
  %23 = load i8, i8* %horflag, align 1
  %tobool = trunc i8 %23 to i1
  %24 = load i64, i64* %child, align 8
  call void @wset_combination(%struct.window* %22, i1 zeroext %tobool, i64 %24)
  br label %if.end

if.else:                                          ; preds = %land.end
  %25 = load %struct.window*, %struct.window** %c, align 8
  %26 = load %struct.window*, %struct.window** %w, align 8
  %prev35 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 3
  %27 = load i64, i64* %prev35, align 8
  call void @wset_prev(%struct.window* %25, i64 %27)
  %28 = load %struct.window*, %struct.window** %w, align 8
  %prev36 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 3
  %29 = load i64, i64* %prev36, align 8
  %call37 = call %struct.window* @XWINDOW(i64 %29)
  %30 = load i64, i64* %child, align 8
  call void @wset_next(%struct.window* %call37, i64 %30)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.34
  br label %while.cond

while.cond:                                       ; preds = %if.end.68, %if.end
  %31 = load %struct.window*, %struct.window** %c, align 8
  %tobool38 = icmp ne %struct.window* %31, null
  br i1 %tobool38, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load %struct.window*, %struct.window** %c, align 8
  %33 = load i64, i64* %parent, align 8
  call void @wset_parent(%struct.window* %32, i64 %33)
  %34 = load i8, i8* %horflag, align 1
  %tobool39 = trunc i8 %34 to i1
  br i1 %tobool39, label %if.then.40, label %if.else.45

if.then.40:                                       ; preds = %while.body
  %35 = load %struct.window*, %struct.window** %c, align 8
  %36 = load %struct.window*, %struct.window** %c, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 34
  %37 = load i32, i32* %pixel_width, align 4
  %conv41 = sitofp i32 %37 to double
  %38 = load %struct.window*, %struct.window** %p, align 8
  %pixel_width42 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 34
  %39 = load i32, i32* %pixel_width42, align 4
  %conv43 = sitofp i32 %39 to double
  %div = fdiv double %conv41, %conv43
  %call44 = call i64 @make_float(double %div)
  call void @wset_normal_cols(%struct.window* %35, i64 %call44)
  br label %if.end.51

if.else.45:                                       ; preds = %while.body
  %40 = load %struct.window*, %struct.window** %c, align 8
  %41 = load %struct.window*, %struct.window** %c, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 35
  %42 = load i32, i32* %pixel_height, align 4
  %conv46 = sitofp i32 %42 to double
  %43 = load %struct.window*, %struct.window** %p, align 8
  %pixel_height47 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 35
  %44 = load i32, i32* %pixel_height47, align 4
  %conv48 = sitofp i32 %44 to double
  %div49 = fdiv double %conv46, %conv48
  %call50 = call i64 @make_float(double %div49)
  call void @wset_normal_lines(%struct.window* %40, i64 %call50)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.45, %if.then.40
  %45 = load %struct.window*, %struct.window** %c, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 2
  %46 = load i64, i64* %next, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp53 = icmp eq i64 %46, %call52
  br i1 %cmp53, label %if.then.55, label %if.else.65

if.then.55:                                       ; preds = %if.end.51
  %47 = load %struct.window*, %struct.window** %w, align 8
  %next56 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 2
  %48 = load i64, i64* %next56, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %48, %call57
  br i1 %cmp58, label %if.end.64, label %if.then.60

if.then.60:                                       ; preds = %if.then.55
  %49 = load %struct.window*, %struct.window** %c, align 8
  %50 = load %struct.window*, %struct.window** %w, align 8
  %next61 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 2
  %51 = load i64, i64* %next61, align 8
  call void @wset_next(%struct.window* %49, i64 %51)
  %52 = load %struct.window*, %struct.window** %c, align 8
  %next62 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 2
  %53 = load i64, i64* %next62, align 8
  %call63 = call %struct.window* @XWINDOW(i64 %53)
  %54 = load i64, i64* %child, align 8
  call void @wset_prev(%struct.window* %call63, i64 %54)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.60, %if.then.55
  store %struct.window* null, %struct.window** %c, align 8
  br label %if.end.68

if.else.65:                                       ; preds = %if.end.51
  %55 = load %struct.window*, %struct.window** %c, align 8
  %next66 = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 2
  %56 = load i64, i64* %next66, align 8
  store i64 %56, i64* %child, align 8
  %57 = load i64, i64* %child, align 8
  %call67 = call %struct.window* @XWINDOW(i64 %57)
  store %struct.window* %call67, %struct.window** %c, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.end.64
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %58 = load %struct.window*, %struct.window** %w, align 8
  %call69 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_combination(%struct.window* %58, i1 zeroext false, i64 %call69)
  br label %if.end.70

if.end.70:                                        ; preds = %while.end, %land.lhs.true.10, %land.lhs.true.7, %if.then
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @grow_mini_window(%struct.window* %w, i32 %delta, i1 zeroext %pixelwise) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %delta.addr = alloca i32, align 4
  %pixelwise.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %r = alloca %struct.window*, align 8
  %root = alloca i64, align 8
  %height = alloca i64, align 8
  %line_height = alloca i32, align 4
  %pixel_height = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  %frombool = zext i1 %pixelwise to i8
  store i8 %frombool, i8* %pixelwise.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load i32, i32* %delta.addr, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end.85

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 5
  %6 = load i64, i64* %root_window, align 8
  store i64 %6, i64* %root, align 8
  %7 = load i64, i64* %root, align 8
  %call = call %struct.window* @XWINDOW(i64 %7)
  store %struct.window* %call, %struct.window** %r, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 1031)
  %8 = load i64, i64* %root, align 8
  %9 = load i32, i32* %delta.addr, align 4
  %sub2 = sub nsw i32 0, %9
  %conv = sext i32 %sub2 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %10 = load i8, i8* %pixelwise.addr, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call4, %cond.true ], [ %call5, %cond.false ]
  %call6 = call i64 @call3(i64 %call1, i64 %8, i64 %add, i64 %cond)
  store i64 %call6, i64* %height, align 8
  %11 = load i64, i64* %height, align 8
  %and = and i64 %11, 7
  %conv7 = trunc i64 %and to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %land.lhs.true, label %if.end.84

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.window*, %struct.window** %r, align 8
  %call11 = call zeroext i1 @window_resize_check(%struct.window* %12, i1 zeroext false)
  br i1 %call11, label %if.then.13, label %if.end.84

if.then.13:                                       ; preds = %land.lhs.true
  call void @block_input()
  %13 = load %struct.window*, %struct.window** %r, align 8
  call void @window_resize_apply(%struct.window* %13, i1 zeroext false)
  %14 = load i8, i8* %pixelwise.addr, align 1
  %tobool14 = trunc i8 %14 to i1
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.then.13
  %15 = load i64, i64* %height, align 8
  %shr = ashr i64 %15, 2
  %sub16 = sub nsw i64 0, %shr
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height17 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 35
  %17 = load i32, i32* %pixel_height17, align 4
  %sub18 = sub nsw i32 2147483647, %17
  %conv19 = sext i32 %sub18 to i64
  %cmp20 = icmp slt i64 %sub16, %conv19
  br i1 %cmp20, label %cond.true.22, label %cond.false.25

cond.true.22:                                     ; preds = %if.then.15
  %18 = load i64, i64* %height, align 8
  %shr23 = ashr i64 %18, 2
  %sub24 = sub nsw i64 0, %shr23
  br label %cond.end.29

cond.false.25:                                    ; preds = %if.then.15
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height26 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 35
  %20 = load i32, i32* %pixel_height26, align 4
  %sub27 = sub nsw i32 2147483647, %20
  %conv28 = sext i32 %sub27 to i64
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.25, %cond.true.22
  %cond30 = phi i64 [ %sub24, %cond.true.22 ], [ %conv28, %cond.false.25 ]
  %conv31 = trunc i64 %cond30 to i32
  store i32 %conv31, i32* %pixel_height, align 4
  %21 = load i32, i32* %pixel_height, align 4
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height32 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 60
  %23 = load i32, i32* %line_height32, align 4
  %div = sdiv i32 %21, %23
  store i32 %div, i32* %line_height, align 4
  br label %if.end

if.else:                                          ; preds = %if.then.13
  %24 = load i64, i64* %height, align 8
  %shr33 = ashr i64 %24, 2
  %sub34 = sub nsw i64 0, %shr33
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height35 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 35
  %26 = load i32, i32* %pixel_height35, align 4
  %sub36 = sub nsw i32 2147483647, %26
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height37 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 60
  %28 = load i32, i32* %line_height37, align 4
  %div38 = sdiv i32 %sub36, %28
  %conv39 = sext i32 %div38 to i64
  %cmp40 = icmp slt i64 %sub34, %conv39
  br i1 %cmp40, label %cond.true.42, label %cond.false.45

cond.true.42:                                     ; preds = %if.else
  %29 = load i64, i64* %height, align 8
  %shr43 = ashr i64 %29, 2
  %sub44 = sub nsw i64 0, %shr43
  br label %cond.end.51

cond.false.45:                                    ; preds = %if.else
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height46 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 35
  %31 = load i32, i32* %pixel_height46, align 4
  %sub47 = sub nsw i32 2147483647, %31
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height48 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 60
  %33 = load i32, i32* %line_height48, align 4
  %div49 = sdiv i32 %sub47, %33
  %conv50 = sext i32 %div49 to i64
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.45, %cond.true.42
  %cond52 = phi i64 [ %sub44, %cond.true.42 ], [ %conv50, %cond.false.45 ]
  %conv53 = trunc i64 %cond52 to i32
  store i32 %conv53, i32* %line_height, align 4
  %34 = load i32, i32* %line_height, align 4
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height54 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 60
  %36 = load i32, i32* %line_height54, align 4
  %mul = mul nsw i32 %34, %36
  store i32 %mul, i32* %pixel_height, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.51, %cond.end.29
  %37 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 31
  %38 = load i32, i32* %pixel_top, align 4
  %39 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height55 = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 35
  %40 = load i32, i32* %pixel_height55, align 4
  %add56 = add nsw i32 %38, %40
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top57 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 31
  store i32 %add56, i32* %pixel_top57, align 4
  %42 = load %struct.window*, %struct.window** %r, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 33
  %43 = load i32, i32* %top_line, align 4
  %44 = load %struct.window*, %struct.window** %r, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 37
  %45 = load i32, i32* %total_lines, align 4
  %add58 = add nsw i32 %43, %45
  %46 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line59 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 33
  store i32 %add58, i32* %top_line59, align 4
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height60 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 35
  %48 = load i32, i32* %pixel_height60, align 4
  %49 = load i32, i32* %pixel_height, align 4
  %add61 = add nsw i32 %48, %49
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height62 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 60
  %51 = load i32, i32* %line_height62, align 4
  %cmp63 = icmp sgt i32 %add61, %51
  br i1 %cmp63, label %cond.true.65, label %cond.false.68

cond.true.65:                                     ; preds = %if.end
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height66 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 35
  %53 = load i32, i32* %pixel_height66, align 4
  %54 = load i32, i32* %pixel_height, align 4
  %add67 = add nsw i32 %53, %54
  br label %cond.end.70

cond.false.68:                                    ; preds = %if.end
  %55 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height69 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 60
  %56 = load i32, i32* %line_height69, align 4
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.false.68, %cond.true.65
  %cond71 = phi i32 [ %add67, %cond.true.65 ], [ %56, %cond.false.68 ]
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height72 = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 35
  store i32 %cond71, i32* %pixel_height72, align 4
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines73 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 37
  %59 = load i32, i32* %total_lines73, align 4
  %60 = load i32, i32* %line_height, align 4
  %add74 = add nsw i32 %59, %60
  %cmp75 = icmp sgt i32 %add74, 1
  br i1 %cmp75, label %cond.true.77, label %cond.false.80

cond.true.77:                                     ; preds = %cond.end.70
  %61 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines78 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 37
  %62 = load i32, i32* %total_lines78, align 4
  %63 = load i32, i32* %line_height, align 4
  %add79 = add nsw i32 %62, %63
  br label %cond.end.81

cond.false.80:                                    ; preds = %cond.end.70
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.80, %cond.true.77
  %cond82 = phi i32 [ %add79, %cond.true.77 ], [ 1, %cond.false.80 ]
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines83 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 37
  store i32 %cond82, i32* %total_lines83, align 4
  %65 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %65)
  %66 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 26
  %67 = bitcast i48* %window_sizes_changed to i64*
  %bf.load = load i64, i64* %67, align 8
  %bf.clear = and i64 %bf.load, -524289
  %bf.set = or i64 %bf.clear, 524288
  store i64 %bf.set, i64* %67, align 8
  %68 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %68)
  call void @unblock_input()
  br label %if.end.84

if.end.84:                                        ; preds = %cond.end.81, %land.lhs.true, %cond.end
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %entry
  ret void
}

declare i64 @call3(i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @shrink_mini_window(%struct.window* %w, i1 zeroext %pixelwise) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %pixelwise.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %r = alloca %struct.window*, align 8
  %root = alloca i64, align 8
  %delta = alloca i64, align 8
  %height = alloca i64, align 8
  %unit = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %pixelwise to i8
  store i8 %frombool, i8* %pixelwise.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load i8, i8* %pixelwise.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 35
  %6 = load i32, i32* %pixel_height, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 37
  %8 = load i32, i32* %total_lines, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ %8, %cond.false ]
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %height, align 8
  %9 = load i8, i8* %pixelwise.addr, align 1
  %tobool1 = trunc i8 %9 to i1
  br i1 %tobool1, label %cond.true.3, label %cond.false.4

cond.true.3:                                      ; preds = %cond.end
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 60
  %11 = load i32, i32* %line_height, align 4
  br label %cond.end.5

cond.false.4:                                     ; preds = %cond.end
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.true.3
  %cond6 = phi i32 [ %11, %cond.true.3 ], [ 1, %cond.false.4 ]
  %conv7 = sext i32 %cond6 to i64
  store i64 %conv7, i64* %unit, align 8
  %12 = load i64, i64* %height, align 8
  %13 = load i64, i64* %unit, align 8
  %cmp = icmp sgt i64 %12, %13
  br i1 %cmp, label %if.then, label %if.end.36

if.then:                                          ; preds = %cond.end.5
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 5
  %15 = load i64, i64* %root_window, align 8
  store i64 %15, i64* %root, align 8
  %16 = load i64, i64* %root, align 8
  %call = call %struct.window* @XWINDOW(i64 %16)
  store %struct.window* %call, %struct.window** %r, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 1031)
  %17 = load i64, i64* %root, align 8
  %18 = load i64, i64* %height, align 8
  %19 = load i64, i64* %unit, align 8
  %sub10 = sub nsw i64 %18, %19
  %shl = shl i64 %sub10, 2
  %add = add i64 %shl, 2
  %20 = load i8, i8* %pixelwise.addr, align 1
  %tobool11 = trunc i8 %20 to i1
  br i1 %tobool11, label %cond.true.13, label %cond.false.15

cond.true.13:                                     ; preds = %if.then
  %call14 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.17

cond.false.15:                                    ; preds = %if.then
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.15, %cond.true.13
  %cond18 = phi i64 [ %call14, %cond.true.13 ], [ %call16, %cond.false.15 ]
  %call19 = call i64 @call3(i64 %call9, i64 %17, i64 %add, i64 %cond18)
  store i64 %call19, i64* %delta, align 8
  %21 = load i64, i64* %delta, align 8
  %and = and i64 %21, 7
  %conv20 = trunc i64 %and to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.17
  %22 = load %struct.window*, %struct.window** %r, align 8
  %call24 = call zeroext i1 @window_resize_check(%struct.window* %22, i1 zeroext false)
  br i1 %call24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %land.lhs.true
  call void @block_input()
  %23 = load %struct.window*, %struct.window** %r, align 8
  call void @window_resize_apply(%struct.window* %23, i1 zeroext false)
  %24 = load %struct.window*, %struct.window** %r, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 33
  %25 = load i32, i32* %top_line, align 4
  %26 = load %struct.window*, %struct.window** %r, align 8
  %total_lines27 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 37
  %27 = load i32, i32* %total_lines27, align 4
  %add28 = add nsw i32 %25, %27
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line29 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 33
  store i32 %add28, i32* %top_line29, align 4
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines30 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 37
  store i32 1, i32* %total_lines30, align 4
  %30 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 31
  %31 = load i32, i32* %pixel_top, align 4
  %32 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height31 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 35
  %33 = load i32, i32* %pixel_height31, align 4
  %add32 = add nsw i32 %31, %33
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top33 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 31
  store i32 %add32, i32* %pixel_top33, align 4
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height34 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 60
  %36 = load i32, i32* %line_height34, align 4
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height35 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 35
  store i32 %36, i32* %pixel_height35, align 4
  %38 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %38)
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 26
  %40 = bitcast i48* %window_sizes_changed to i64*
  %bf.load = load i64, i64* %40, align 8
  %bf.clear = and i64 %bf.load, -524289
  %bf.set = or i64 %bf.clear, 524288
  store i64 %bf.set, i64* %40, align 8
  %41 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %41)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then.26, %land.lhs.true, %cond.end.17
  br label %if.end.36

if.end.36:                                        ; preds = %if.end, %cond.end.5
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fresize_mini_window_internal(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %r = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %height = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %window.addr, align 8
  call void @CHECK_WINDOW(i64 %1)
  %2 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 1
  %3 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  store %struct.frame* %5, %struct.frame** %f, align 8
  %6 = load %struct.window*, %struct.window** %w, align 8
  %frame1 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame1, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 7
  %10 = load i64, i64* %minibuffer_window, align 8
  %11 = load i64, i64* %window.addr, align 8
  %cmp = icmp eq i64 %10, %11
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i32 0, i32 0)) #5
  unreachable

if.else:                                          ; preds = %entry
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 5
  %13 = load i64, i64* %root_window, align 8
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window3 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 7
  %15 = load i64, i64* %minibuffer_window3, align 8
  %cmp4 = icmp eq i64 %13, %15
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.17, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end
  %16 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window7 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 5
  %17 = load i64, i64* %root_window7, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %17)
  store %struct.window* %call8, %struct.window** %r, align 8
  %18 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 35
  %19 = load i32, i32* %pixel_height, align 4
  %20 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height9 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 35
  %21 = load i32, i32* %pixel_height9, align 4
  %add = add nsw i32 %19, %21
  store i32 %add, i32* %height, align 4
  %22 = load %struct.window*, %struct.window** %r, align 8
  %call10 = call zeroext i1 @window_resize_check(%struct.window* %22, i1 zeroext false)
  br i1 %call10, label %land.lhs.true, label %if.else.33

land.lhs.true:                                    ; preds = %if.end.6
  %23 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 9
  %24 = load i64, i64* %new_pixel, align 8
  %shr = ashr i64 %24, 2
  %cmp11 = icmp sgt i64 %shr, 0
  br i1 %cmp11, label %land.lhs.true.12, label %if.else.33

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %25 = load i32, i32* %height, align 4
  %conv = sext i32 %25 to i64
  %26 = load %struct.window*, %struct.window** %r, align 8
  %new_pixel13 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 9
  %27 = load i64, i64* %new_pixel13, align 8
  %shr14 = ashr i64 %27, 2
  %28 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel15 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 9
  %29 = load i64, i64* %new_pixel15, align 8
  %shr16 = ashr i64 %29, 2
  %add17 = add nsw i64 %shr14, %shr16
  %cmp18 = icmp eq i64 %conv, %add17
  br i1 %cmp18, label %if.then.20, label %if.else.33

if.then.20:                                       ; preds = %land.lhs.true.12
  call void @block_input()
  %30 = load %struct.window*, %struct.window** %r, align 8
  call void @window_resize_apply(%struct.window* %30, i1 zeroext false)
  %31 = load %struct.window*, %struct.window** %w, align 8
  %new_pixel21 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 9
  %32 = load i64, i64* %new_pixel21, align 8
  %shr22 = ashr i64 %32, 2
  %conv23 = trunc i64 %shr22 to i32
  %33 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height24 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 35
  store i32 %conv23, i32* %pixel_height24, align 4
  %34 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height25 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 35
  %35 = load i32, i32* %pixel_height25, align 4
  %36 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 60
  %37 = load i32, i32* %line_height, align 4
  %div = sdiv i32 %35, %37
  %38 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 37
  store i32 %div, i32* %total_lines, align 4
  %39 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 31
  %40 = load i32, i32* %pixel_top, align 4
  %41 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height26 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 35
  %42 = load i32, i32* %pixel_height26, align 4
  %add27 = add nsw i32 %40, %42
  %43 = load %struct.window*, %struct.window** %w, align 8
  %pixel_top28 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 31
  store i32 %add27, i32* %pixel_top28, align 4
  %44 = load %struct.window*, %struct.window** %r, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 33
  %45 = load i32, i32* %top_line, align 4
  %46 = load %struct.window*, %struct.window** %r, align 8
  %total_lines29 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 37
  %47 = load i32, i32* %total_lines29, align 4
  %add30 = add nsw i32 %45, %47
  %48 = load %struct.window*, %struct.window** %w, align 8
  %top_line31 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 33
  store i32 %add30, i32* %top_line31, align 4
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %49)
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 26
  %51 = bitcast i48* %window_sizes_changed to i64*
  %bf.load = load i64, i64* %51, align 8
  %bf.clear = and i64 %bf.load, -524289
  %bf.set = or i64 %bf.clear, 524288
  store i64 %bf.set, i64* %51, align 8
  %52 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %52)
  call void @unblock_input()
  %call32 = call i64 @builtin_lisp_symbol(i32 901)
  ret i64 %call32

if.else.33:                                       ; preds = %land.lhs.true.12, %land.lhs.true, %if.end.6
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i32 0, i32 0)) #5
  unreachable
}

; Function Attrs: nounwind uwtable
define void @mark_window_cursors_off(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  call void @mark_window_cursors_off(%struct.window* %call2)
  br label %if.end

if.else:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_on_p = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 67
  %bf.load = load i16, i16* %phys_cursor_on_p, align 4
  %bf.clear = and i16 %bf.load, -129
  store i16 %bf.clear, i16* %phys_cursor_on_p, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 2
  %7 = load i64, i64* %next, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %7, %call3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %next4 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 2
  %9 = load i64, i64* %next4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call5, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @window_internal_height(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %ht = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 37
  %1 = load i32, i32* %total_lines, align 4
  store i32 %1, i32* %ht, align 4
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.end.108, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %parent = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 4
  %4 = load i64, i64* %parent, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call
  br i1 %cmp, label %lor.lhs.false, label %if.then.32

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @WINDOWP(i64 %6)
  br i1 %call1, label %if.then.32, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 2
  %8 = load i64, i64* %next, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %8, %call3
  br i1 %cmp4, label %lor.lhs.false.5, label %if.then.32

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 3
  %10 = load i64, i64* %prev, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %10, %call6
  br i1 %cmp7, label %lor.lhs.false.8, label %if.then.32

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.5
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents9 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents9, align 8
  %call10 = call zeroext i1 @BUFFERP(i64 %12)
  br i1 %call10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.8
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini11 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 67
  %bf.load12 = load i16, i16* %mini11, align 4
  %bf.clear13 = and i16 %bf.load12, 1
  %bf.cast14 = trunc i16 %bf.clear13 to i1
  br i1 %bf.cast14, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 67
  %bf.load15 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load15, 11
  %bf.clear16 = and i16 %bf.lshr, 1
  %bf.cast17 = trunc i16 %bf.clear16 to i1
  br i1 %bf.cast17, label %if.end, label %land.lhs.true.18

land.lhs.true.18:                                 ; preds = %land.lhs.true
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 1
  %16 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 26
  %19 = bitcast i48* %wants_modeline to i64*
  %bf.load19 = load i64, i64* %19, align 8
  %bf.lshr20 = lshr i64 %bf.load19, 14
  %bf.clear21 = and i64 %bf.lshr20, 1
  %bf.cast22 = trunc i64 %bf.clear21 to i1
  br i1 %bf.cast22, label %land.lhs.true.23, label %if.end

land.lhs.true.23:                                 ; preds = %land.lhs.true.18
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents24 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 10
  %21 = load i64, i64* %contents24, align 8
  %call25 = call %struct.buffer* @XBUFFER(i64 %21)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call25, i32 0, i32 12
  %22 = load i64, i64* %mode_line_format_, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %22, %call26
  br i1 %cmp27, label %if.end, label %land.lhs.true.28

land.lhs.true.28:                                 ; preds = %land.lhs.true.23
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 35
  %24 = load i32, i32* %pixel_height, align 4
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame29 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 1
  %26 = load i64, i64* %frame29, align 8
  %sub30 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub30 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 60
  %29 = load i32, i32* %line_height, align 4
  %cmp31 = icmp sgt i32 %24, %29
  br i1 %cmp31, label %if.then.32, label %if.end

cond.false:                                       ; preds = %lor.lhs.false.8
  br i1 false, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %cond.false, %land.lhs.true.28, %lor.lhs.false.5, %lor.lhs.false.2, %lor.lhs.false, %if.then
  %30 = load i32, i32* %ht, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %ht, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.32, %cond.false, %land.lhs.true.28, %land.lhs.true.23, %land.lhs.true.18, %land.lhs.true, %cond.true
  %31 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents33 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 10
  %32 = load i64, i64* %contents33, align 8
  %call34 = call zeroext i1 @BUFFERP(i64 %32)
  br i1 %call34, label %cond.true.35, label %cond.false.104

cond.true.35:                                     ; preds = %if.end
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini36 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 67
  %bf.load37 = load i16, i16* %mini36, align 4
  %bf.clear38 = and i16 %bf.load37, 1
  %bf.cast39 = trunc i16 %bf.clear38 to i1
  br i1 %bf.cast39, label %if.end.107, label %land.lhs.true.40

land.lhs.true.40:                                 ; preds = %cond.true.35
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p41 = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 67
  %bf.load42 = load i16, i16* %pseudo_window_p41, align 4
  %bf.lshr43 = lshr i16 %bf.load42, 11
  %bf.clear44 = and i16 %bf.lshr43, 1
  %bf.cast45 = trunc i16 %bf.clear44 to i1
  br i1 %bf.cast45, label %if.end.107, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %land.lhs.true.40
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame47 = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 1
  %36 = load i64, i64* %frame47, align 8
  %sub48 = sub nsw i64 %36, 5
  %37 = inttoptr i64 %sub48 to i8*
  %38 = bitcast i8* %37 to %struct.frame*
  %wants_modeline49 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 26
  %39 = bitcast i48* %wants_modeline49 to i64*
  %bf.load50 = load i64, i64* %39, align 8
  %bf.lshr51 = lshr i64 %bf.load50, 14
  %bf.clear52 = and i64 %bf.lshr51, 1
  %bf.cast53 = trunc i64 %bf.clear52 to i1
  br i1 %bf.cast53, label %land.lhs.true.54, label %if.end.107

land.lhs.true.54:                                 ; preds = %land.lhs.true.46
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents55 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 10
  %41 = load i64, i64* %contents55, align 8
  %call56 = call %struct.buffer* @XBUFFER(i64 %41)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call56, i32 0, i32 13
  %42 = load i64, i64* %header_line_format_, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %42, %call57
  br i1 %cmp58, label %if.end.107, label %land.lhs.true.59

land.lhs.true.59:                                 ; preds = %land.lhs.true.54
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height60 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 35
  %44 = load i32, i32* %pixel_height60, align 4
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents61 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 10
  %46 = load i64, i64* %contents61, align 8
  %call62 = call zeroext i1 @BUFFERP(i64 %46)
  br i1 %call62, label %cond.true.63, label %cond.false.94

cond.true.63:                                     ; preds = %land.lhs.true.59
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini64 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 67
  %bf.load65 = load i16, i16* %mini64, align 4
  %bf.clear66 = and i16 %bf.load65, 1
  %bf.cast67 = trunc i16 %bf.clear66 to i1
  br i1 %bf.cast67, label %cond.false.99, label %land.lhs.true.68

land.lhs.true.68:                                 ; preds = %cond.true.63
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p69 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 67
  %bf.load70 = load i16, i16* %pseudo_window_p69, align 4
  %bf.lshr71 = lshr i16 %bf.load70, 11
  %bf.clear72 = and i16 %bf.lshr71, 1
  %bf.cast73 = trunc i16 %bf.clear72 to i1
  br i1 %bf.cast73, label %cond.false.99, label %land.lhs.true.74

land.lhs.true.74:                                 ; preds = %land.lhs.true.68
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame75 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 1
  %50 = load i64, i64* %frame75, align 8
  %sub76 = sub nsw i64 %50, 5
  %51 = inttoptr i64 %sub76 to i8*
  %52 = bitcast i8* %51 to %struct.frame*
  %wants_modeline77 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 26
  %53 = bitcast i48* %wants_modeline77 to i64*
  %bf.load78 = load i64, i64* %53, align 8
  %bf.lshr79 = lshr i64 %bf.load78, 14
  %bf.clear80 = and i64 %bf.lshr79, 1
  %bf.cast81 = trunc i64 %bf.clear80 to i1
  br i1 %bf.cast81, label %land.lhs.true.82, label %cond.false.99

land.lhs.true.82:                                 ; preds = %land.lhs.true.74
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents83 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 10
  %55 = load i64, i64* %contents83, align 8
  %call84 = call %struct.buffer* @XBUFFER(i64 %55)
  %mode_line_format_85 = getelementptr inbounds %struct.buffer, %struct.buffer* %call84, i32 0, i32 12
  %56 = load i64, i64* %mode_line_format_85, align 8
  %call86 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp87 = icmp eq i64 %56, %call86
  br i1 %cmp87, label %cond.false.99, label %land.lhs.true.88

land.lhs.true.88:                                 ; preds = %land.lhs.true.82
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height89 = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 35
  %58 = load i32, i32* %pixel_height89, align 4
  %59 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame90 = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 1
  %60 = load i64, i64* %frame90, align 8
  %sub91 = sub nsw i64 %60, 5
  %61 = inttoptr i64 %sub91 to i8*
  %62 = bitcast i8* %61 to %struct.frame*
  %line_height92 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 60
  %63 = load i32, i32* %line_height92, align 4
  %cmp93 = icmp sgt i32 %58, %63
  br i1 %cmp93, label %cond.true.95, label %cond.false.99

cond.false.94:                                    ; preds = %land.lhs.true.59
  br i1 false, label %cond.true.95, label %cond.false.99

cond.true.95:                                     ; preds = %cond.false.94, %land.lhs.true.88
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame96 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 1
  %65 = load i64, i64* %frame96, align 8
  %sub97 = sub nsw i64 %65, 5
  %66 = inttoptr i64 %sub97 to i8*
  %67 = bitcast i8* %66 to %struct.frame*
  %line_height98 = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 60
  %68 = load i32, i32* %line_height98, align 4
  %mul = mul nsw i32 2, %68
  br label %cond.end

cond.false.99:                                    ; preds = %cond.false.94, %land.lhs.true.88, %land.lhs.true.82, %land.lhs.true.74, %land.lhs.true.68, %cond.true.63
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame100 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 1
  %70 = load i64, i64* %frame100, align 8
  %sub101 = sub nsw i64 %70, 5
  %71 = inttoptr i64 %sub101 to i8*
  %72 = bitcast i8* %71 to %struct.frame*
  %line_height102 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 60
  %73 = load i32, i32* %line_height102, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.99, %cond.true.95
  %cond = phi i32 [ %mul, %cond.true.95 ], [ %73, %cond.false.99 ]
  %cmp103 = icmp sgt i32 %44, %cond
  br i1 %cmp103, label %if.then.105, label %if.end.107

cond.false.104:                                   ; preds = %if.end
  br i1 false, label %if.then.105, label %if.end.107

if.then.105:                                      ; preds = %cond.false.104, %cond.end
  %74 = load i32, i32* %ht, align 4
  %dec106 = add nsw i32 %74, -1
  store i32 %dec106, i32* %ht, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.105, %cond.false.104, %cond.end, %land.lhs.true.54, %land.lhs.true.46, %land.lhs.true.40, %cond.true.35
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %entry
  %75 = load i32, i32* %ht, align 4
  ret i32 %75
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_up(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  call void @scroll_command(i64 %0, i32 1)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal void @scroll_command(i64 %n, i32 %direction) #0 {
entry:
  %n.addr = alloca i64, align 8
  %direction.addr = alloca i32, align 4
  %count = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  store i32 %direction, i32* %direction.addr, align 4
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %0)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %1)
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp ne %struct.buffer* %call2, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i64 @save_excursion_save()
  call void @record_unwind_protect(void (i64)* @save_excursion_restore, i64 %call3)
  %3 = load i64, i64* @selected_window, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %3)
  %contents5 = getelementptr inbounds %struct.window, %struct.window* %call4, i32 0, i32 10
  %4 = load i64, i64* %contents5, align 8
  %call6 = call i64 @Fset_buffer(i64 %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* %n.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %5, %call7
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end
  %6 = load i64, i64* @selected_window, align 8
  %7 = load i32, i32* %direction.addr, align 4
  %conv = sext i32 %7 to i64
  call void @window_scroll(i64 %6, i64 %conv, i1 zeroext true, i1 zeroext false)
  br label %if.end.19

if.else:                                          ; preds = %if.end
  %8 = load i64, i64* %n.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp11 = icmp eq i64 %8, %call10
  br i1 %cmp11, label %if.then.13, label %if.else.15

if.then.13:                                       ; preds = %if.else
  %9 = load i64, i64* @selected_window, align 8
  %10 = load i32, i32* %direction.addr, align 4
  %sub = sub nsw i32 0, %10
  %conv14 = sext i32 %sub to i64
  call void @window_scroll(i64 %9, i64 %conv14, i1 zeroext true, i1 zeroext false)
  br label %if.end.18

if.else.15:                                       ; preds = %if.else
  %11 = load i64, i64* %n.addr, align 8
  %call16 = call i64 @Fprefix_numeric_value(i64 %11)
  store i64 %call16, i64* %n.addr, align 8
  %12 = load i64, i64* @selected_window, align 8
  %13 = load i64, i64* %n.addr, align 8
  %shr = ashr i64 %13, 2
  %14 = load i32, i32* %direction.addr, align 4
  %conv17 = sext i32 %14 to i64
  %mul = mul nsw i64 %shr, %conv17
  call void @window_scroll(i64 %12, i64 %mul, i1 zeroext false, i1 zeroext false)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.13
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.9
  %15 = load i64, i64* %count, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %call21 = call i64 @unbind_to(i64 %15, i64 %call20)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_down(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  call void @scroll_command(i64 %0, i32 -1)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fother_window_for_scrolling() #0 {
entry:
  %window = alloca i64, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  store i64 %2, i64* %window, align 8
  br label %if.end.35

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %if.else.19, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %if.else
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  %call5 = call zeroext i1 @BUFFERP(i64 %4)
  br i1 %call5, label %land.lhs.true.6, label %if.else.19

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %5)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call7, i32 0, i32 1
  %6 = load i64, i64* %name_, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %6, %call8
  br i1 %cmp9, label %if.else.19, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true.6
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %call12 = call i64 @Fget_buffer_window(i64 %7, i64 %call11)
  store i64 %call12, i64* %window, align 8
  %8 = load i64, i64* %window, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %8, %call13
  br i1 %cmp14, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %if.then.10
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %call18 = call i64 @display_buffer(i64 %9, i64 %call16, i64 %call17)
  store i64 %call18, i64* %window, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.15, %if.then.10
  br label %if.end.34

if.else.19:                                       ; preds = %land.lhs.true.6, %land.lhs.true.4, %if.else
  %10 = load i64, i64* @selected_window, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %call22 = call i64 @Fnext_window(i64 %10, i64 %call20, i64 %call21)
  store i64 %call22, i64* %window, align 8
  %11 = load i64, i64* %window, align 8
  %12 = load i64, i64* @selected_window, align 8
  %cmp23 = icmp eq i64 %11, %12
  br i1 %cmp23, label %if.then.24, label %if.end.33

if.then.24:                                       ; preds = %if.else.19
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then.24
  %13 = load i64, i64* %window, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %call26 = call i64 @builtin_lisp_symbol(i32 901)
  %call27 = call i64 @Fnext_window(i64 %13, i64 %call25, i64 %call26)
  store i64 %call27, i64* %window, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64, i64* %window, align 8
  %call28 = call %struct.window* @XWINDOW(i64 %14)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call28, i32 0, i32 1
  %15 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %visible to i64*
  %bf.load29 = load i64, i64* %18, align 8
  %bf.lshr = lshr i64 %bf.load29, 10
  %bf.clear30 = and i64 %bf.lshr, 3
  %bf.cast31 = trunc i64 %bf.clear30 to i32
  %tobool = icmp ne i32 %bf.cast31, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %do.cond
  %19 = load i64, i64* %window, align 8
  %20 = load i64, i64* @selected_window, align 8
  %cmp32 = icmp eq i64 %19, %20
  %lnot = xor i1 %cmp32, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %21 = phi i1 [ false, %do.cond ], [ %lnot, %land.rhs ]
  br i1 %21, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end.33

if.end.33:                                        ; preds = %do.end, %if.else.19
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then
  %22 = load i64, i64* %window, align 8
  %call36 = call zeroext i1 @WINDOWP(i64 %22)
  br i1 %call36, label %land.lhs.true.37, label %cond.false

land.lhs.true.37:                                 ; preds = %if.end.35
  %23 = load i64, i64* %window, align 8
  %call38 = call %struct.window* @XWINDOW(i64 %23)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call38, i32 0, i32 10
  %24 = load i64, i64* %contents, align 8
  %call39 = call zeroext i1 @BUFFERP(i64 %24)
  br i1 %call39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.37
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.37, %if.end.35
  %call40 = call i64 @builtin_lisp_symbol(i32 1027)
  %25 = load i64, i64* %window, align 8
  %26 = call i64 @wrong_type_argument(i64 %call40, i64 %25) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %27, %cond.true
  %28 = load i64, i64* %window, align 8
  %29 = load i64, i64* @selected_window, align 8
  %cmp41 = icmp eq i64 %28, %29
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i32 0, i32 0)) #5
  unreachable

if.end.43:                                        ; preds = %cond.end
  %30 = load i64, i64* %window, align 8
  ret i64 %30
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_other_window(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %count = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %call1 = call i64 @Fother_window_for_scrolling()
  store i64 %call1, i64* %window, align 8
  %0 = load i64, i64* %window, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call2, %struct.window** %w, align 8
  %call3 = call i64 @save_excursion_save()
  call void @record_unwind_protect(void (i64)* @save_excursion_restore, i64 %call3)
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call4 = call i64 @Fset_buffer(i64 %2)
  %3 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 12
  %4 = load i64, i64* %pointm, align 8
  %call5 = call i64 @marker_position(i64 %4)
  %5 = load %struct.window*, %struct.window** %w, align 8
  %pointm6 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 12
  %6 = load i64, i64* %pointm6, align 8
  %call7 = call i64 @marker_byte_position(i64 %6)
  call void @set_point_both(i64 %call5, i64 %call7)
  %7 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 13
  %8 = load i64, i64* %old_pointm, align 8
  %call8 = call i64 @marker_position(i64 %8)
  %9 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm9 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 13
  %10 = load i64, i64* %old_pointm9, align 8
  %call10 = call i64 @marker_byte_position(i64 %10)
  call void @set_point_both(i64 %call8, i64 %call10)
  %11 = load i64, i64* %arg.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call11
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %12 = load i64, i64* %window, align 8
  call void @window_scroll(i64 %12, i64 1, i1 zeroext true, i1 zeroext true)
  br label %if.end.26

if.else:                                          ; preds = %entry
  %13 = load i64, i64* %arg.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp13 = icmp eq i64 %13, %call12
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else
  %14 = load i64, i64* %window, align 8
  call void @window_scroll(i64 %14, i64 -1, i1 zeroext true, i1 zeroext true)
  br label %if.end.25

if.else.15:                                       ; preds = %if.else
  %15 = load i64, i64* %arg.addr, align 8
  %and = and i64 %15, 7
  %conv = trunc i64 %and to i32
  %cmp16 = icmp eq i32 %conv, 3
  br i1 %cmp16, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %if.else.15
  %16 = load i64, i64* %arg.addr, align 8
  %sub = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 0
  %19 = load i64, i64* %car, align 8
  store i64 %19, i64* %arg.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.18, %if.else.15
  %20 = load i64, i64* %arg.addr, align 8
  %and19 = and i64 %20, 7
  %conv20 = trunc i64 %and19 to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call24 = call i64 @builtin_lisp_symbol(i32 559)
  %21 = load i64, i64* %arg.addr, align 8
  %22 = call i64 @wrong_type_argument(i64 %call24, i64 %21) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %23, %cond.true
  %24 = load i64, i64* %window, align 8
  %25 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %25, 2
  call void @window_scroll(i64 %24, i64 %shr, i1 zeroext false, i1 zeroext true)
  br label %if.end.25

if.end.25:                                        ; preds = %cond.end, %if.then.14
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then
  %26 = load %struct.window*, %struct.window** %w, align 8
  %pointm27 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 12
  %27 = load i64, i64* %pointm27, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 75
  %29 = load i64, i64* %pt, align 8
  %add = add nsw i64 %29, 0
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 76
  %31 = load i64, i64* %pt_byte, align 8
  %add29 = add nsw i64 %31, 0
  %call30 = call i64 @set_marker_both(i64 %27, i64 %call28, i64 %add, i64 %add29)
  %32 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm31 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 13
  %33 = load i64, i64* %old_pointm31, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt33 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 75
  %35 = load i64, i64* %pt33, align 8
  %add34 = add nsw i64 %35, 0
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte35 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 76
  %37 = load i64, i64* %pt_byte35, align 8
  %add36 = add nsw i64 %37, 0
  %call37 = call i64 @set_marker_both(i64 %33, i64 %call32, i64 %add34, i64 %add36)
  %38 = load i64, i64* %count, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %call39 = call i64 @unbind_to(i64 %38, i64 %call38)
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call40
}

declare void @save_excursion_restore(i64) #1

declare i64 @save_excursion_save() #1

declare void @set_point_both(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @window_scroll(i64 %window, i64 %n, i1 zeroext %whole, i1 zeroext %noerror) #0 {
entry:
  %window.addr = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %whole.addr = alloca i8, align 1
  %noerror.addr = alloca i8, align 1
  %count = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %frombool = zext i1 %whole to i8
  store i8 %frombool, i8* %whole.addr, align 1
  %frombool1 = zext i1 %noerror to i8
  store i8 %frombool1, i8* %noerror.addr, align 1
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  store i8 1, i8* @immediate_quit, align 1
  %0 = load i64, i64* %n.addr, align 8
  %call2 = call i64 @clip_to_bounds(i64 -2147483648, i64 %0, i64 2147483647)
  store i64 %call2, i64* %n.addr, align 8
  %1 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %1)
  call void @wset_redisplay(%struct.window* %call3)
  %2 = load i8, i8* %whole.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 421), align 1
  %tobool4 = trunc i8 %3 to i1
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call5 = call i64 @builtin_lisp_symbol(i32 447)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @specbind(i64 %call5, i64 %call6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load i64, i64* %window.addr, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %4)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call7, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %8, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %9 = load i64, i64* %window.addr, align 8
  %10 = load i64, i64* %n.addr, align 8
  %conv = trunc i64 %10 to i32
  %11 = load i8, i8* %whole.addr, align 1
  %tobool9 = trunc i8 %11 to i1
  %12 = load i8, i8* %noerror.addr, align 1
  %tobool10 = trunc i8 %12 to i1
  call void @window_scroll_pixel_based(i64 %9, i32 %conv, i1 zeroext %tobool9, i1 zeroext %tobool10)
  br label %if.end.14

if.else:                                          ; preds = %if.end
  %13 = load i64, i64* %window.addr, align 8
  %14 = load i64, i64* %n.addr, align 8
  %conv11 = trunc i64 %14 to i32
  %15 = load i8, i8* %whole.addr, align 1
  %tobool12 = trunc i8 %15 to i1
  %16 = load i8, i8* %noerror.addr, align 1
  %tobool13 = trunc i8 %16 to i1
  call void @window_scroll_line_based(i64 %13, i32 %conv11, i1 zeroext %tobool12, i1 zeroext %tobool13)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.8
  %17 = load i64, i64* %count, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i64 @unbind_to(i64 %17, i64 %call15)
  %18 = load i64, i64* %window.addr, align 8
  %call17 = call %struct.window* @XWINDOW(i64 %18)
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %call17, i32 0, i32 67
  %bf.load18 = load i16, i16* %window_end_valid, align 4
  %bf.clear19 = and i16 %bf.load18, -8193
  store i16 %bf.clear19, i16* %window_end_valid, align 4
  store i8 0, i8* @immediate_quit, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_left(i64 %arg, i64 %set_minimum) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %set_minimum.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %requested_arg = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %set_minimum, i64* %set_minimum.addr, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %arg.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i32 @window_body_width(%struct.window* %2, i1 zeroext false)
  %sub = sub nsw i32 %call2, 2
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %arg.addr, align 8
  %call3 = call i64 @Fprefix_numeric_value(i64 %3)
  %shr = ashr i64 %call3, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %shr, %cond.false ]
  store i64 %cond, i64* %requested_arg, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  %5 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 38
  %6 = load i64, i64* %hscroll, align 8
  %7 = load i64, i64* %requested_arg, align 8
  %add = add nsw i64 %6, %7
  %call4 = call i64 @set_window_hscroll(%struct.window* %4, i64 %add)
  store i64 %call4, i64* %result, align 8
  %8 = load i64, i64* %set_minimum.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %8, %call5
  br i1 %cmp6, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %9 = load %struct.window*, %struct.window** %w, align 8
  %hscroll8 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 38
  %10 = load i64, i64* %hscroll8, align 8
  %11 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 39
  store i64 %10, i64* %min_hscroll, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 67
  %bf.load = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.clear = and i16 %bf.load, 32767
  %bf.set = or i16 %bf.clear, -32768
  store i16 %bf.set, i16* %suspend_auto_hscroll, align 4
  %13 = load i64, i64* %result, align 8
  ret i64 %13
}

declare i64 @Fprefix_numeric_value(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fscroll_right(i64 %arg, i64 %set_minimum) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %set_minimum.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %requested_arg = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %set_minimum, i64* %set_minimum.addr, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %arg.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i32 @window_body_width(%struct.window* %2, i1 zeroext false)
  %sub = sub nsw i32 %call2, 2
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %arg.addr, align 8
  %call3 = call i64 @Fprefix_numeric_value(i64 %3)
  %shr = ashr i64 %call3, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %shr, %cond.false ]
  store i64 %cond, i64* %requested_arg, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  %5 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 38
  %6 = load i64, i64* %hscroll, align 8
  %7 = load i64, i64* %requested_arg, align 8
  %sub4 = sub nsw i64 %6, %7
  %call5 = call i64 @set_window_hscroll(%struct.window* %4, i64 %sub4)
  store i64 %call5, i64* %result, align 8
  %8 = load i64, i64* %set_minimum.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %8, %call6
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %9 = load %struct.window*, %struct.window** %w, align 8
  %hscroll9 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 38
  %10 = load i64, i64* %hscroll9, align 8
  %11 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 39
  store i64 %10, i64* %min_hscroll, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 67
  %bf.load = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.clear = and i16 %bf.load, 32767
  %bf.set = or i16 %bf.clear, -32768
  store i16 %bf.set, i16* %suspend_auto_hscroll, align 4
  %13 = load i64, i64* %result, align 8
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define i64 @Fminibuffer_selected_window() #0 {
entry:
  %retval = alloca i64, align 8
  %0 = load i64, i64* @minibuf_level, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %2 = load i64, i64* @minibuf_selected_window, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call2, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true.1
  %3 = load i64, i64* @minibuf_selected_window, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %3)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call4, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call5 = call zeroext i1 @BUFFERP(i64 %4)
  br i1 %call5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.3
  %5 = load i64, i64* @minibuf_selected_window, align 8
  store i64 %5, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.3, %land.lhs.true.1, %land.lhs.true, %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define i64 @Frecenter(i64 %arg) #0 {
entry:
  %retval = alloca i64, align 8
  %arg.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %buf = alloca %struct.buffer*, align 8
  %center_p = alloca i8, align 1
  %charpos = alloca i64, align 8
  %bytepos = alloca i64, align 8
  %iarg = alloca i64, align 8
  %this_scroll_margin = alloca i32, align 4
  %i = alloca i64, align 8
  %it = alloca %struct.it, align 8
  %pt = alloca %struct.text_pos, align 8
  %itdata = alloca i8*, align 8
  %it83 = alloca %struct.it, align 8
  %pt84 = alloca %struct.text_pos, align 8
  %nlines = alloca i64, align 8
  %extra_line_spacing = alloca i32, align 4
  %h = alloca i32, align 4
  %ht = alloca i32, align 4
  %itdata95 = alloca i8*, align 8
  %it154 = alloca %struct.it, align 8
  %pt155 = alloca %struct.text_pos, align 8
  %nlines156 = alloca i64, align 8
  %ht163 = alloca i32, align 4
  %itdata165 = alloca i8*, align 8
  %pos194 = alloca %struct.position, align 8
  %ht195 = alloca i32, align 4
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call %struct.buffer* @XBUFFER(i64 %2)
  store %struct.buffer* %call1, %struct.buffer** %buf, align 8
  store i8 0, i8* %center_p, align 1
  %3 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp ne %struct.buffer* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.20, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %entry
  %5 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %display_error_modiff = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 88
  store i64 0, i64* %display_error_modiff, align 8
  %6 = load i64, i64* %arg.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %6, %call2
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 249), align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %7, %call5
  br i1 %cmp6, label %if.end.18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.4
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 249), align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 938)
  %cmp8 = icmp eq i64 %8, %call7
  br i1 %cmp8, label %lor.lhs.false, label %if.then.12

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i64, i64* @selected_frame, align 8
  %call9 = call i64 @Ftty_type(i64 %9)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %if.end.18, label %if.then.12

if.then.12:                                       ; preds = %lor.lhs.false, %land.lhs.true
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.12
  %10 = load i64, i64* %i, align 8
  %11 = load i64, i64* @n_compositions, align 8
  %cmp13 = icmp slt i64 %10, %11
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.composition**, %struct.composition*** @composition_table, align 8
  %arrayidx = getelementptr inbounds %struct.composition*, %struct.composition** %13, i64 %12
  %14 = load %struct.composition*, %struct.composition** %arrayidx, align 8
  %font = getelementptr inbounds %struct.composition, %struct.composition* %14, i32 0, i32 9
  store i8* null, i8** %font, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %i, align 8
  %inc = add nsw i64 %15, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 1
  %17 = load i64, i64* %frame, align 8
  %call14 = call i64 @Fredraw_frame(i64 %17)
  store i8 1, i8* @frame_garbaged, align 1
  %18 = load %struct.window*, %struct.window** %w, align 8
  %frame15 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 1
  %19 = load i64, i64* %frame15, align 8
  %sub = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  call void @fset_redisplay(%struct.frame* %21)
  %22 = load %struct.window*, %struct.window** %w, align 8
  %frame16 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 1
  %23 = load i64, i64* %frame16, align 8
  %sub17 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub17 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %26, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %26, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %for.end, %lor.lhs.false, %if.then.4
  store i8 1, i8* %center_p, align 1
  br label %if.end.31

if.else:                                          ; preds = %if.end
  %27 = load i64, i64* %arg.addr, align 8
  %and = and i64 %27, 7
  %conv = trunc i64 %and to i32
  %cmp19 = icmp eq i32 %conv, 3
  br i1 %cmp19, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %if.else
  store i8 1, i8* %center_p, align 1
  br label %if.end.30

if.else.22:                                       ; preds = %if.else
  %28 = load i64, i64* %arg.addr, align 8
  %call23 = call i64 @Fprefix_numeric_value(i64 %28)
  store i64 %call23, i64* %arg.addr, align 8
  %29 = load i64, i64* %arg.addr, align 8
  %and24 = and i64 %29, 7
  %conv25 = trunc i64 %and24 to i32
  %and26 = and i32 %conv25, -5
  %cmp27 = icmp eq i32 %and26, 2
  br i1 %cmp27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.22
  br label %cond.end

cond.false:                                       ; preds = %if.else.22
  %call29 = call i64 @builtin_lisp_symbol(i32 559)
  %30 = load i64, i64* %arg.addr, align 8
  %31 = call i64 @wrong_type_argument(i64 %call29, i64 %30) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %32, %cond.true
  %33 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %33, 2
  store i64 %shr, i64* %iarg, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %cond.end, %if.then.21
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.18
  %34 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  %35 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 37
  %36 = load i32, i32* %total_lines, align 4
  %div = sdiv i32 %36, 4
  %conv32 = sext i32 %div to i64
  %cmp33 = icmp slt i64 %34, %conv32
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %if.end.31
  %37 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  br label %cond.end.40

cond.false.36:                                    ; preds = %if.end.31
  %38 = load %struct.window*, %struct.window** %w, align 8
  %total_lines37 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 37
  %39 = load i32, i32* %total_lines37, align 4
  %div38 = sdiv i32 %39, 4
  %conv39 = sext i32 %div38 to i64
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.36, %cond.true.35
  %cond = phi i64 [ %37, %cond.true.35 ], [ %conv39, %cond.false.36 ]
  %cmp41 = icmp sgt i64 0, %cond
  br i1 %cmp41, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.end.40
  br label %cond.end.57

cond.false.44:                                    ; preds = %cond.end.40
  %40 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  %41 = load %struct.window*, %struct.window** %w, align 8
  %total_lines45 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 37
  %42 = load i32, i32* %total_lines45, align 4
  %div46 = sdiv i32 %42, 4
  %conv47 = sext i32 %div46 to i64
  %cmp48 = icmp slt i64 %40, %conv47
  br i1 %cmp48, label %cond.true.50, label %cond.false.51

cond.true.50:                                     ; preds = %cond.false.44
  %43 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  br label %cond.end.55

cond.false.51:                                    ; preds = %cond.false.44
  %44 = load %struct.window*, %struct.window** %w, align 8
  %total_lines52 = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 37
  %45 = load i32, i32* %total_lines52, align 4
  %div53 = sdiv i32 %45, 4
  %conv54 = sext i32 %div53 to i64
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.51, %cond.true.50
  %cond56 = phi i64 [ %43, %cond.true.50 ], [ %conv54, %cond.false.51 ]
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.end.55, %cond.true.43
  %cond58 = phi i64 [ 0, %cond.true.43 ], [ %cond56, %cond.end.55 ]
  %conv59 = trunc i64 %cond58 to i32
  store i32 %conv59, i32* %this_scroll_margin, align 4
  %46 = load %struct.window*, %struct.window** %w, align 8
  %frame60 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 1
  %47 = load i64, i64* %frame60, align 8
  %sub61 = sub nsw i64 %47, 5
  %48 = inttoptr i64 %sub61 to i8*
  %49 = bitcast i8* %48 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 26
  %50 = bitcast i48* %output_method to i64*
  %bf.load62 = load i64, i64* %50, align 8
  %bf.lshr = lshr i64 %bf.load62, 23
  %bf.clear63 = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear63 to i32
  %cmp64 = icmp eq i32 %bf.cast, 0
  br i1 %cmp64, label %if.else.193, label %if.then.66

if.then.66:                                       ; preds = %cond.end.57
  %51 = load i8, i8* %center_p, align 1
  %tobool = trunc i8 %51 to i1
  br i1 %tobool, label %if.then.67, label %if.else.79

if.then.67:                                       ; preds = %if.then.66
  %call68 = call i8* @bidi_shelve_cache()
  store i8* %call68, i8** %itdata, align 8
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt69 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 75
  %53 = load i64, i64* %pt69, align 8
  %add = add nsw i64 %53, 0
  %charpos70 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt, i32 0, i32 0
  store i64 %add, i64* %charpos70, align 8
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 76
  %55 = load i64, i64* %pt_byte, align 8
  %add71 = add nsw i64 %55, 0
  %bytepos72 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt, i32 0, i32 1
  store i64 %add71, i64* %bytepos72, align 8
  %56 = load %struct.window*, %struct.window** %w, align 8
  %57 = bitcast %struct.text_pos* %pt to { i64, i64 }*
  %58 = getelementptr { i64, i64 }, { i64, i64 }* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 1
  %60 = getelementptr { i64, i64 }, { i64, i64 }* %57, i32 0, i32 1
  %61 = load i64, i64* %60, align 1
  call void @start_display(%struct.it* %it, %struct.window* %56, i64 %59, i64 %61)
  %62 = load %struct.window*, %struct.window** %w, align 8
  %call73 = call i32 @window_box_height(%struct.window* %62)
  %div74 = sdiv i32 %call73, 2
  call void @move_it_vertically_backward(%struct.it* %it, i32 %div74)
  %current = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current, i32 0, i32 0
  %charpos75 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos, i32 0, i32 0
  %63 = load i64, i64* %charpos75, align 8
  store i64 %63, i64* %charpos, align 8
  %current76 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos77 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current76, i32 0, i32 0
  %bytepos78 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos77, i32 0, i32 1
  %64 = load i64, i64* %bytepos78, align 8
  store i64 %64, i64* %bytepos, align 8
  %65 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %65, i1 zeroext false)
  br label %if.end.192

if.else.79:                                       ; preds = %if.then.66
  %66 = load i64, i64* %iarg, align 8
  %cmp80 = icmp slt i64 %66, 0
  br i1 %cmp80, label %if.then.82, label %if.else.153

if.then.82:                                       ; preds = %if.else.79
  %67 = load i64, i64* %iarg, align 8
  %sub85 = sub nsw i64 0, %67
  %cmp86 = icmp slt i64 9223372036854775807, %sub85
  br i1 %cmp86, label %cond.true.88, label %cond.false.89

cond.true.88:                                     ; preds = %if.then.82
  br label %cond.end.91

cond.false.89:                                    ; preds = %if.then.82
  %68 = load i64, i64* %iarg, align 8
  %sub90 = sub nsw i64 0, %68
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.89, %cond.true.88
  %cond92 = phi i64 [ 9223372036854775807, %cond.true.88 ], [ %sub90, %cond.false.89 ]
  store i64 %cond92, i64* %nlines, align 8
  %69 = load %struct.window*, %struct.window** %w, align 8
  %call93 = call i32 @window_box_height(%struct.window* %69)
  store i32 %call93, i32* %h, align 4
  %70 = load %struct.window*, %struct.window** %w, align 8
  %call94 = call i32 @window_internal_height(%struct.window* %70)
  store i32 %call94, i32* %ht, align 4
  %call96 = call i8* @bidi_shelve_cache()
  store i8* %call96, i8** %itdata95, align 8
  %71 = load i32, i32* %this_scroll_margin, align 4
  %add97 = add nsw i32 %71, 1
  %conv98 = sext i32 %add97 to i64
  %72 = load i64, i64* %nlines, align 8
  %73 = load i32, i32* %ht, align 4
  %74 = load i32, i32* %this_scroll_margin, align 4
  %sub99 = sub nsw i32 %73, %74
  %conv100 = sext i32 %sub99 to i64
  %call101 = call i64 @clip_to_bounds(i64 %conv98, i64 %72, i64 %conv100)
  store i64 %call101, i64* %nlines, align 8
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt102 = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 75
  %76 = load i64, i64* %pt102, align 8
  %add103 = add nsw i64 %76, 0
  %charpos104 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt84, i32 0, i32 0
  store i64 %add103, i64* %charpos104, align 8
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte105 = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 76
  %78 = load i64, i64* %pt_byte105, align 8
  %add106 = add nsw i64 %78, 0
  %bytepos107 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt84, i32 0, i32 1
  store i64 %add106, i64* %bytepos107, align 8
  %79 = load %struct.window*, %struct.window** %w, align 8
  %80 = bitcast %struct.text_pos* %pt84 to { i64, i64 }*
  %81 = getelementptr { i64, i64 }, { i64, i64 }* %80, i32 0, i32 0
  %82 = load i64, i64* %81, align 1
  %83 = getelementptr { i64, i64 }, { i64, i64 }* %80, i32 0, i32 1
  %84 = load i64, i64* %83, align 1
  call void @start_display(%struct.it* %it83, %struct.window* %79, i64 %82, i64 %84)
  call void @move_it_by_lines(%struct.it* %it83, i64 0)
  %current_y = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 74
  store i32 0, i32* %current_y, align 4
  %vpos = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 76
  store i32 0, i32* %vpos, align 4
  %85 = load i64, i64* %nlines, align 8
  call void @move_it_by_lines(%struct.it* %it83, i64 %85)
  %vpos108 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 76
  %86 = load i32, i32* %vpos108, align 4
  %conv109 = sext i32 %86 to i64
  %87 = load i64, i64* %nlines, align 8
  %cmp110 = icmp eq i64 %conv109, %87
  br i1 %cmp110, label %if.then.112, label %if.else.115

if.then.112:                                      ; preds = %cond.end.91
  %current_y113 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 74
  %88 = load i32, i32* %current_y113, align 4
  %89 = load i32, i32* %h, align 4
  %sub114 = sub nsw i32 %89, %88
  store i32 %sub114, i32* %h, align 4
  br label %if.end.120

if.else.115:                                      ; preds = %cond.end.91
  %call116 = call i32 @line_bottom_y(%struct.it* %it83)
  %90 = load i32, i32* %h, align 4
  %sub117 = sub nsw i32 %90, %call116
  store i32 %sub117, i32* %h, align 4
  %vpos118 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 76
  %91 = load i32, i32* %vpos118, align 4
  %inc119 = add nsw i32 %91, 1
  store i32 %inc119, i32* %vpos118, align 4
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.115, %if.then.112
  %max_extra_line_spacing = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 55
  %92 = load i32, i32* %max_extra_line_spacing, align 4
  store i32 %92, i32* %extra_line_spacing, align 4
  %vpos121 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 76
  %93 = load i32, i32* %vpos121, align 4
  %conv122 = sext i32 %93 to i64
  %94 = load i64, i64* %nlines, align 8
  %cmp123 = icmp slt i64 %conv122, %94
  br i1 %cmp123, label %if.then.125, label %if.end.135

if.then.125:                                      ; preds = %if.end.120
  %vpos126 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 76
  %95 = load i32, i32* %vpos126, align 4
  %conv127 = sext i32 %95 to i64
  %96 = load i64, i64* %nlines, align 8
  %sub128 = sub nsw i64 %96, %conv127
  store i64 %sub128, i64* %nlines, align 8
  %extra_line_spacing129 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 54
  %97 = load i32, i32* %extra_line_spacing129, align 4
  store i32 %97, i32* %extra_line_spacing, align 4
  %98 = load i64, i64* %nlines, align 8
  %f = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 2
  %99 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 60
  %100 = load i32, i32* %line_height, align 4
  %101 = load i32, i32* %extra_line_spacing, align 4
  %add130 = add nsw i32 %100, %101
  %conv131 = sext i32 %add130 to i64
  %mul = mul nsw i64 %98, %conv131
  %102 = load i32, i32* %h, align 4
  %conv132 = sext i32 %102 to i64
  %sub133 = sub nsw i64 %conv132, %mul
  %conv134 = trunc i64 %sub133 to i32
  store i32 %conv134, i32* %h, align 4
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.125, %if.end.120
  %103 = load i32, i32* %h, align 4
  %cmp136 = icmp sle i32 %103, 0
  br i1 %cmp136, label %if.then.138, label %if.end.140

if.then.138:                                      ; preds = %if.end.135
  %104 = load i8*, i8** %itdata95, align 8
  call void @bidi_unshelve_cache(i8* %104, i1 zeroext false)
  %call139 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call139, i64* %retval
  br label %return

if.end.140:                                       ; preds = %if.end.135
  %105 = load %struct.window*, %struct.window** %w, align 8
  %106 = bitcast %struct.text_pos* %pt84 to { i64, i64 }*
  %107 = getelementptr { i64, i64 }, { i64, i64 }* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 1
  %109 = getelementptr { i64, i64 }, { i64, i64 }* %106, i32 0, i32 1
  %110 = load i64, i64* %109, align 1
  call void @start_display(%struct.it* %it83, %struct.window* %105, i64 %108, i64 %110)
  %current_y141 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 74
  store i32 0, i32* %current_y141, align 4
  %111 = load i32, i32* %h, align 4
  call void @move_it_vertically_backward(%struct.it* %it83, i32 %111)
  %112 = load i32, i32* %extra_line_spacing, align 4
  %113 = load i32, i32* %h, align 4
  %add142 = add nsw i32 %113, %112
  store i32 %add142, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.140
  %current_y143 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 74
  %114 = load i32, i32* %current_y143, align 4
  %sub144 = sub nsw i32 0, %114
  %115 = load i32, i32* %h, align 4
  %cmp145 = icmp sgt i32 %sub144, %115
  br i1 %cmp145, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @move_it_by_lines(%struct.it* %it83, i64 1)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %current147 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 20
  %pos148 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current147, i32 0, i32 0
  %charpos149 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos148, i32 0, i32 0
  %116 = load i64, i64* %charpos149, align 8
  store i64 %116, i64* %charpos, align 8
  %current150 = getelementptr inbounds %struct.it, %struct.it* %it83, i32 0, i32 20
  %pos151 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current150, i32 0, i32 0
  %bytepos152 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos151, i32 0, i32 1
  %117 = load i64, i64* %bytepos152, align 8
  store i64 %117, i64* %bytepos, align 8
  %118 = load i8*, i8** %itdata95, align 8
  call void @bidi_unshelve_cache(i8* %118, i1 zeroext false)
  br label %if.end.191

if.else.153:                                      ; preds = %if.else.79
  %119 = load i64, i64* %iarg, align 8
  %cmp157 = icmp slt i64 9223372036854775807, %119
  br i1 %cmp157, label %cond.true.159, label %cond.false.160

cond.true.159:                                    ; preds = %if.else.153
  br label %cond.end.161

cond.false.160:                                   ; preds = %if.else.153
  %120 = load i64, i64* %iarg, align 8
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.160, %cond.true.159
  %cond162 = phi i64 [ 9223372036854775807, %cond.true.159 ], [ %120, %cond.false.160 ]
  store i64 %cond162, i64* %nlines156, align 8
  %121 = load %struct.window*, %struct.window** %w, align 8
  %call164 = call i32 @window_internal_height(%struct.window* %121)
  store i32 %call164, i32* %ht163, align 4
  %call166 = call i8* @bidi_shelve_cache()
  store i8* %call166, i8** %itdata165, align 8
  %122 = load i32, i32* %this_scroll_margin, align 4
  %conv167 = sext i32 %122 to i64
  %123 = load i64, i64* %nlines156, align 8
  %124 = load i32, i32* %ht163, align 4
  %125 = load i32, i32* %this_scroll_margin, align 4
  %sub168 = sub nsw i32 %124, %125
  %sub169 = sub nsw i32 %sub168, 1
  %conv170 = sext i32 %sub169 to i64
  %call171 = call i64 @clip_to_bounds(i64 %conv167, i64 %123, i64 %conv170)
  store i64 %call171, i64* %nlines156, align 8
  %126 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt172 = getelementptr inbounds %struct.buffer, %struct.buffer* %126, i32 0, i32 75
  %127 = load i64, i64* %pt172, align 8
  %add173 = add nsw i64 %127, 0
  %charpos174 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt155, i32 0, i32 0
  store i64 %add173, i64* %charpos174, align 8
  %128 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte175 = getelementptr inbounds %struct.buffer, %struct.buffer* %128, i32 0, i32 76
  %129 = load i64, i64* %pt_byte175, align 8
  %add176 = add nsw i64 %129, 0
  %bytepos177 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pt155, i32 0, i32 1
  store i64 %add176, i64* %bytepos177, align 8
  %130 = load %struct.window*, %struct.window** %w, align 8
  %131 = bitcast %struct.text_pos* %pt155 to { i64, i64 }*
  %132 = getelementptr { i64, i64 }, { i64, i64 }* %131, i32 0, i32 0
  %133 = load i64, i64* %132, align 1
  %134 = getelementptr { i64, i64 }, { i64, i64 }* %131, i32 0, i32 1
  %135 = load i64, i64* %134, align 1
  call void @start_display(%struct.it* %it154, %struct.window* %130, i64 %133, i64 %135)
  call void @move_it_by_lines(%struct.it* %it154, i64 0)
  %136 = load i64, i64* %nlines156, align 8
  %cmp178 = icmp sgt i64 %136, 0
  br i1 %cmp178, label %if.then.180, label %if.end.184

if.then.180:                                      ; preds = %cond.end.161
  %current_y181 = getelementptr inbounds %struct.it, %struct.it* %it154, i32 0, i32 74
  store i32 0, i32* %current_y181, align 4
  %vpos182 = getelementptr inbounds %struct.it, %struct.it* %it154, i32 0, i32 76
  store i32 0, i32* %vpos182, align 4
  %137 = load i64, i64* %nlines156, align 8
  %sub183 = sub nsw i64 0, %137
  call void @move_it_by_lines(%struct.it* %it154, i64 %sub183)
  br label %if.end.184

if.end.184:                                       ; preds = %if.then.180, %cond.end.161
  %current185 = getelementptr inbounds %struct.it, %struct.it* %it154, i32 0, i32 20
  %pos186 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current185, i32 0, i32 0
  %charpos187 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos186, i32 0, i32 0
  %138 = load i64, i64* %charpos187, align 8
  store i64 %138, i64* %charpos, align 8
  %current188 = getelementptr inbounds %struct.it, %struct.it* %it154, i32 0, i32 20
  %pos189 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current188, i32 0, i32 0
  %bytepos190 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos189, i32 0, i32 1
  %139 = load i64, i64* %bytepos190, align 8
  store i64 %139, i64* %bytepos, align 8
  %140 = load i8*, i8** %itdata165, align 8
  call void @bidi_unshelve_cache(i8* %140, i1 zeroext false)
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.184, %while.end
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %if.then.67
  br label %if.end.221

if.else.193:                                      ; preds = %cond.end.57
  %141 = load %struct.window*, %struct.window** %w, align 8
  %call196 = call i32 @window_internal_height(%struct.window* %141)
  store i32 %call196, i32* %ht195, align 4
  %142 = load i8, i8* %center_p, align 1
  %tobool197 = trunc i8 %142 to i1
  br i1 %tobool197, label %if.then.198, label %if.else.201

if.then.198:                                      ; preds = %if.else.193
  %143 = load i32, i32* %ht195, align 4
  %div199 = sdiv i32 %143, 2
  %conv200 = sext i32 %div199 to i64
  store i64 %conv200, i64* %iarg, align 8
  br label %if.end.208

if.else.201:                                      ; preds = %if.else.193
  %144 = load i64, i64* %iarg, align 8
  %cmp202 = icmp slt i64 %144, 0
  br i1 %cmp202, label %if.then.204, label %if.end.207

if.then.204:                                      ; preds = %if.else.201
  %145 = load i32, i32* %ht195, align 4
  %conv205 = sext i32 %145 to i64
  %146 = load i64, i64* %iarg, align 8
  %add206 = add nsw i64 %146, %conv205
  store i64 %add206, i64* %iarg, align 8
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.204, %if.else.201
  br label %if.end.208

if.end.208:                                       ; preds = %if.end.207, %if.then.198
  %147 = load i32, i32* %this_scroll_margin, align 4
  %conv209 = sext i32 %147 to i64
  %148 = load i64, i64* %iarg, align 8
  %149 = load i32, i32* %ht195, align 4
  %150 = load i32, i32* %this_scroll_margin, align 4
  %sub210 = sub nsw i32 %149, %150
  %sub211 = sub nsw i32 %sub210, 1
  %conv212 = sext i32 %sub211 to i64
  %call213 = call i64 @clip_to_bounds(i64 %conv209, i64 %148, i64 %conv212)
  store i64 %call213, i64* %iarg, align 8
  %151 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt214 = getelementptr inbounds %struct.buffer, %struct.buffer* %151, i32 0, i32 75
  %152 = load i64, i64* %pt214, align 8
  %add215 = add nsw i64 %152, 0
  %153 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte216 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 76
  %154 = load i64, i64* %pt_byte216, align 8
  %add217 = add nsw i64 %154, 0
  %155 = load i64, i64* %iarg, align 8
  %sub218 = sub nsw i64 0, %155
  %156 = load %struct.window*, %struct.window** %w, align 8
  %call219 = call %struct.position* @vmotion(i64 %add215, i64 %add217, i64 %sub218, %struct.window* %156)
  %157 = bitcast %struct.position* %pos194 to i8*
  %158 = bitcast %struct.position* %call219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %157, i8* %158, i64 48, i32 8, i1 false)
  %bufpos = getelementptr inbounds %struct.position, %struct.position* %pos194, i32 0, i32 0
  %159 = load i64, i64* %bufpos, align 8
  store i64 %159, i64* %charpos, align 8
  %bytepos220 = getelementptr inbounds %struct.position, %struct.position* %pos194, i32 0, i32 1
  %160 = load i64, i64* %bytepos220, align 8
  store i64 %160, i64* %bytepos, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.end.208, %if.end.192
  %161 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %161, i32 0, i32 11
  %162 = load i64, i64* %start, align 8
  %163 = load %struct.window*, %struct.window** %w, align 8
  %contents222 = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 10
  %164 = load i64, i64* %contents222, align 8
  %165 = load i64, i64* %charpos, align 8
  %166 = load i64, i64* %bytepos, align 8
  %call223 = call i64 @set_marker_both(i64 %162, i64 %164, i64 %165, i64 %166)
  %167 = load %struct.window*, %struct.window** %w, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %167, i32 0, i32 67
  %bf.load224 = load i16, i16* %window_end_valid, align 4
  %bf.clear225 = and i16 %bf.load224, -8193
  store i16 %bf.clear225, i16* %window_end_valid, align 4
  %168 = load %struct.window*, %struct.window** %w, align 8
  %optional_new_start = getelementptr inbounds %struct.window, %struct.window* %168, i32 0, i32 67
  %bf.load226 = load i16, i16* %optional_new_start, align 4
  %bf.clear227 = and i16 %bf.load226, -65
  %bf.set228 = or i16 %bf.clear227, 64
  store i16 %bf.set228, i16* %optional_new_start, align 4
  %169 = load i64, i64* %bytepos, align 8
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 78
  %171 = load i64, i64* %begv_byte, align 8
  %cmp229 = icmp eq i64 %169, %171
  br i1 %cmp229, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.221
  %172 = load i64, i64* %bytepos, align 8
  %sub231 = sub nsw i64 %172, 1
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %173, i32 0, i32 73
  %174 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %174, i32 0, i32 3
  %175 = load i64, i64* %gpt_byte, align 8
  %cmp232 = icmp sge i64 %sub231, %175
  br i1 %cmp232, label %cond.true.234, label %cond.false.236

cond.true.234:                                    ; preds = %lor.rhs
  %176 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text235 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i32 0, i32 73
  %177 = load %struct.buffer_text*, %struct.buffer_text** %text235, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %177, i32 0, i32 5
  %178 = load i64, i64* %gap_size, align 8
  br label %cond.end.237

cond.false.236:                                   ; preds = %lor.rhs
  br label %cond.end.237

cond.end.237:                                     ; preds = %cond.false.236, %cond.true.234
  %cond238 = phi i64 [ %178, %cond.true.234 ], [ 0, %cond.false.236 ]
  %179 = load i64, i64* %bytepos, align 8
  %sub239 = sub nsw i64 %179, 1
  %add240 = add nsw i64 %cond238, %sub239
  %180 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %180, i32 0, i32 73
  %181 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %181, i32 0, i32 0
  %182 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %182, i64 %add240
  %add.ptr242 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %183 = load i8, i8* %add.ptr242, align 1
  %conv243 = zext i8 %183 to i32
  %cmp244 = icmp eq i32 %conv243, 10
  br label %lor.end

lor.end:                                          ; preds = %cond.end.237, %if.end.221
  %184 = phi i1 [ true, %if.end.221 ], [ %cmp244, %cond.end.237 ]
  %185 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 67
  %186 = zext i1 %184 to i16
  %bf.load246 = load i16, i16* %start_at_line_beg, align 4
  %bf.shl = shl i16 %186, 4
  %bf.clear247 = and i16 %bf.load246, -17
  %bf.set248 = or i16 %bf.clear247, %bf.shl
  store i16 %bf.set248, i16* %start_at_line_beg, align 4
  %bf.result.cast = trunc i16 %186 to i8
  %tobool249 = trunc i8 %bf.result.cast to i1
  %187 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_redisplay(%struct.window* %187)
  %call250 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call250, i64* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then.138
  %188 = load i64, i64* %retval
  ret i64 %188
}

declare i64 @Ftty_type(i64) #1

declare i64 @Fredraw_frame(i64) #1

declare void @move_it_vertically_backward(%struct.it*, i32) #1

declare void @move_it_by_lines(%struct.it*, i64) #1

declare i32 @line_bottom_y(%struct.it*) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_text_width(i64 %window, i64 %pixelwise) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i32 @window_box_width(%struct.window* %2, i32 1)
  %3 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 59
  %7 = load i32, i32* %column_width, align 4
  %div = sdiv i32 %call2, %7
  %conv = sext i32 %div to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w, align 8
  %call3 = call i32 @window_box_width(%struct.window* %8, i32 1)
  %conv4 = sext i32 %call3 to i64
  %shl5 = shl i64 %conv4, 2
  %add6 = add i64 %shl5, 2
  store i64 %add6, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_text_height(i64 %window, i64 %pixelwise) #0 {
entry:
  %retval = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i32 @window_box_height(%struct.window* %2)
  %3 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 60
  %7 = load i32, i32* %line_height, align 4
  %div = sdiv i32 %call2, %7
  %conv = sext i32 %div to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w, align 8
  %call3 = call i32 @window_box_height(%struct.window* %8)
  %conv4 = sext i32 %call3 to i64
  %shl5 = shl i64 %conv4, 2
  %add6 = add i64 %shl5, 2
  store i64 %add6, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @Fmove_to_window_line(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %lines = alloca i32, align 4
  %start = alloca i32, align 4
  %window = alloca i64, align 8
  %height = alloca i32, align 4
  %iarg = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents2, align 8
  %call3 = call %struct.buffer* @XBUFFER(i64 %4)
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp eq %struct.buffer* %call3, %5
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.21, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %land.lhs.true
  %6 = load i64, i64* @selected_window, align 8
  store i64 %6, i64* %window, align 8
  %7 = load %struct.window*, %struct.window** %w, align 8
  %start4 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 11
  %8 = load i64, i64* %start4, align 8
  %call5 = call i64 @marker_position(i64 %8)
  %conv = trunc i64 %call5 to i32
  store i32 %conv, i32* %start, align 4
  %9 = load i32, i32* %start, align 4
  %conv6 = sext i32 %9 to i64
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 77
  %11 = load i64, i64* %begv, align 8
  %cmp7 = icmp slt i64 %conv6, %11
  br i1 %cmp7, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, i32* %start, align 4
  %conv9 = sext i32 %12 to i64
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 79
  %14 = load i64, i64* %zv, align 8
  %cmp10 = icmp sgt i64 %conv9, %14
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %lor.lhs.false, %if.end
  %15 = load %struct.window*, %struct.window** %w, align 8
  %call13 = call i32 @window_internal_height(%struct.window* %15)
  store i32 %call13, i32* %height, align 4
  %16 = load i32, i32* %height, align 4
  %div = sdiv i32 %16, 2
  %sub = sub nsw i32 0, %div
  %conv14 = sext i32 %sub to i64
  %shl = shl i64 %conv14, 2
  %add = add i64 %shl, 2
  %17 = load i64, i64* %window, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i64 @Fvertical_motion(i64 %add, i64 %17, i64 %call15)
  %18 = load %struct.window*, %struct.window** %w, align 8
  %start17 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 11
  %19 = load i64, i64* %start17, align 8
  %20 = load %struct.window*, %struct.window** %w, align 8
  %contents18 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 10
  %21 = load i64, i64* %contents18, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 75
  %23 = load i64, i64* %pt, align 8
  %add19 = add nsw i64 %23, 0
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 76
  %25 = load i64, i64* %pt_byte, align 8
  %add20 = add nsw i64 %25, 0
  %call21 = call i64 @set_marker_both(i64 %19, i64 %21, i64 %add19, i64 %add20)
  %call22 = call i64 @Fbolp()
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %call22, %call23
  %lnot = xor i1 %cmp24, true
  %26 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 67
  %27 = zext i1 %lnot to i16
  %bf.load = load i16, i16* %start_at_line_beg, align 4
  %bf.shl = shl i16 %27, 4
  %bf.clear = and i16 %bf.load, -17
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %start_at_line_beg, align 4
  %bf.result.cast = trunc i16 %27 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %28 = load %struct.window*, %struct.window** %w, align 8
  %force_start = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 67
  %bf.load26 = load i16, i16* %force_start, align 4
  %bf.clear27 = and i16 %bf.load26, -33
  %bf.set28 = or i16 %bf.clear27, 32
  store i16 %bf.set28, i16* %force_start, align 4
  br label %if.end.31

if.else:                                          ; preds = %lor.lhs.false
  %29 = load %struct.window*, %struct.window** %w, align 8
  %start29 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 11
  %30 = load i64, i64* %start29, align 8
  %call30 = call i64 @Fgoto_char(i64 %30)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.12
  %31 = load %struct.window*, %struct.window** %w, align 8
  %call32 = call i32 @displayed_window_lines(%struct.window* %31)
  store i32 %call32, i32* %lines, align 4
  %32 = load i64, i64* %arg.addr, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %32, %call33
  br i1 %cmp34, label %if.then.36, label %if.else.40

if.then.36:                                       ; preds = %if.end.31
  %33 = load i32, i32* %lines, align 4
  %div37 = sdiv i32 %33, 2
  %conv38 = sext i32 %div37 to i64
  %call39 = call i64 @make_natnum(i64 %conv38)
  store i64 %call39, i64* %arg.addr, align 8
  br label %if.end.50

if.else.40:                                       ; preds = %if.end.31
  %34 = load i64, i64* %arg.addr, align 8
  %call41 = call i64 @Fprefix_numeric_value(i64 %34)
  %shr = ashr i64 %call41, 2
  store i64 %shr, i64* %iarg, align 8
  %35 = load i64, i64* %iarg, align 8
  %cmp42 = icmp slt i64 %35, 0
  br i1 %cmp42, label %if.then.44, label %if.end.47

if.then.44:                                       ; preds = %if.else.40
  %36 = load i64, i64* %iarg, align 8
  %37 = load i32, i32* %lines, align 4
  %conv45 = sext i32 %37 to i64
  %add46 = add nsw i64 %36, %conv45
  store i64 %add46, i64* %iarg, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.44, %if.else.40
  %38 = load i64, i64* %iarg, align 8
  %shl48 = shl i64 %38, 2
  %add49 = add i64 %shl48, 2
  store i64 %add49, i64* %arg.addr, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.47, %if.then.36
  %39 = load %struct.window*, %struct.window** %w, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 68
  %40 = load i32, i32* %vscroll, align 4
  %tobool51 = icmp ne i32 %40, 0
  br i1 %tobool51, label %if.then.52, label %if.end.57

if.then.52:                                       ; preds = %if.end.50
  %41 = load i64, i64* %arg.addr, align 8
  %shr53 = ashr i64 %41, 2
  %add54 = add nsw i64 %shr53, 1
  %shl55 = shl i64 %add54, 2
  %add56 = add i64 %shl55, 2
  store i64 %add56, i64* %arg.addr, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.52, %if.end.50
  %42 = load i64, i64* %arg.addr, align 8
  %43 = load i64, i64* %window, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %call59 = call i64 @Fvertical_motion(i64 %42, i64 %43, i64 %call58)
  ret i64 %call59
}

declare i64 @Fvertical_motion(i64, i64, i64) #1

declare i64 @Fbolp() #1

; Function Attrs: nounwind uwtable
define internal i32 @displayed_window_lines(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %it = alloca %struct.it, align 8
  %start = alloca %struct.text_pos, align 8
  %height = alloca i32, align 4
  %old_buffer = alloca %struct.buffer*, align 8
  %bottom_y = alloca i32, align 4
  %itdata = alloca i8*, align 8
  %uy = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call i32 @window_box_height(%struct.window* %0)
  store i32 %call, i32* %height, align 4
  store i8* null, i8** %itdata, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call1 = call %struct.buffer* @XBUFFER(i64 %2)
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp ne %struct.buffer* %call1, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %4, %struct.buffer** %old_buffer, align 8
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents2, align 8
  %call3 = call %struct.buffer* @XBUFFER(i64 %6)
  call void @set_buffer_internal(%struct.buffer* %call3)
  br label %if.end

if.else:                                          ; preds = %entry
  store %struct.buffer* null, %struct.buffer** %old_buffer, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 77
  %8 = load i64, i64* %begv, align 8
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %start4 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 11
  %10 = load i64, i64* %start4, align 8
  %call5 = call i64 @marker_position(i64 %10)
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 79
  %12 = load i64, i64* %zv, align 8
  %call6 = call i64 @clip_to_bounds(i64 %8, i64 %call5, i64 %12)
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  store i64 %call6, i64* %charpos, align 8
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 78
  %14 = load i64, i64* %begv_byte, align 8
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %start7 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 11
  %16 = load i64, i64* %start7, align 8
  %call8 = call i64 @marker_byte_position(i64 %16)
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 80
  %18 = load i64, i64* %zv_byte, align 8
  %call9 = call i64 @clip_to_bounds(i64 %14, i64 %call8, i64 %18)
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 1
  store i64 %call9, i64* %bytepos, align 8
  %call10 = call i8* @bidi_shelve_cache()
  store i8* %call10, i8** %itdata, align 8
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %20 = bitcast %struct.text_pos* %start to { i64, i64 }*
  %21 = getelementptr { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1
  %24 = load i64, i64* %23, align 1
  call void @start_display(%struct.it* %it, %struct.window* %19, i64 %22, i64 %24)
  %25 = load i32, i32* %height, align 4
  call void @move_it_vertically(%struct.it* %it, i32 %25)
  %call11 = call i32 @line_bottom_y(%struct.it* %it)
  store i32 %call11, i32* %bottom_y, align 4
  %26 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %26, i1 zeroext false)
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 1
  %28 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %28, 5
  %29 = inttoptr i64 %sub to i8*
  %30 = bitcast i8* %29 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %31, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp12 = icmp eq i32 %bf.cast, 2
  br i1 %cmp12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end
  %32 = load i32, i32* %height, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %height, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.end
  %33 = load i32, i32* %bottom_y, align 4
  %34 = load i32, i32* %height, align 4
  %cmp15 = icmp slt i32 %33, %34
  br i1 %cmp15, label %if.then.16, label %if.end.20

if.then.16:                                       ; preds = %if.end.14
  %f = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 2
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 60
  %36 = load i32, i32* %line_height, align 4
  store i32 %36, i32* %uy, align 4
  %37 = load i32, i32* %height, align 4
  %38 = load i32, i32* %bottom_y, align 4
  %sub17 = sub nsw i32 %37, %38
  %39 = load i32, i32* %uy, align 4
  %add = add nsw i32 %sub17, %39
  %sub18 = sub nsw i32 %add, 1
  %40 = load i32, i32* %uy, align 4
  %div = sdiv i32 %sub18, %40
  %vpos = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 76
  %41 = load i32, i32* %vpos, align 4
  %add19 = add nsw i32 %41, %div
  store i32 %add19, i32* %vpos, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.16, %if.end.14
  %42 = load %struct.buffer*, %struct.buffer** %old_buffer, align 8
  %tobool = icmp ne %struct.buffer* %42, null
  br i1 %tobool, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.20
  %43 = load %struct.buffer*, %struct.buffer** %old_buffer, align 8
  call void @set_buffer_internal(%struct.buffer* %43)
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.end.20
  %vpos23 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 76
  %44 = load i32, i32* %vpos23, align 4
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_configuration_p(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @WINDOW_CONFIGURATIONP(i64 %0)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

declare zeroext i1 @WINDOW_CONFIGURATIONP(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_configuration_frame(i64 %config) #0 {
entry:
  %config.addr = alloca i64, align 8
  %data = alloca %struct.save_window_data*, align 8
  %saved_windows = alloca %struct.Lisp_Vector*, align 8
  store i64 %config, i64* %config.addr, align 8
  %0 = load i64, i64* %config.addr, align 8
  call void @CHECK_WINDOW_CONFIGURATION(i64 %0)
  %1 = load i64, i64* %config.addr, align 8
  %call = call %struct.Lisp_Vector* @XVECTOR(i64 %1)
  %2 = bitcast %struct.Lisp_Vector* %call to %struct.save_window_data*
  store %struct.save_window_data* %2, %struct.save_window_data** %data, align 8
  %3 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %saved_windows1 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %3, i32 0, i32 8
  %4 = load i64, i64* %saved_windows1, align 8
  %call2 = call %struct.Lisp_Vector* @XVECTOR(i64 %4)
  store %struct.Lisp_Vector* %call2, %struct.Lisp_Vector** %saved_windows, align 8
  %5 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 0
  %6 = load i64, i64* %arrayidx, align 8
  %call3 = call %struct.Lisp_Vector* @XVECTOR(i64 %6)
  %7 = bitcast %struct.Lisp_Vector* %call3 to %struct.saved_window*
  %window = getelementptr inbounds %struct.saved_window, %struct.saved_window* %7, i32 0, i32 1
  %8 = load i64, i64* %window, align 8
  %call4 = call %struct.window* @XWINDOW(i64 %8)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call4, i32 0, i32 1
  %9 = load i64, i64* %frame, align 8
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal void @CHECK_WINDOW_CONFIGURATION(i64 %x) #0 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64, i64* %x.addr, align 8
  %call = call zeroext i1 @WINDOW_CONFIGURATIONP(i64 %0)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 1021)
  %1 = load i64, i64* %x.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call1, i64 %1) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  ret void
}

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_configuration(i64 %configuration) #0 {
entry:
  %configuration.addr = alloca i64, align 8
  %data = alloca %struct.save_window_data*, align 8
  %saved_windows = alloca %struct.Lisp_Vector*, align 8
  %new_current_buffer = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %old_point = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %window64 = alloca i64, align 8
  %dead_windows = alloca i64, align 8
  %tem = alloca i64, align 8
  %par = alloca i64, align 8
  %pers = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %p = alloca %struct.saved_window*, align 8
  %root_window = alloca %struct.window*, align 8
  %leaf_windows = alloca %struct.window**, align 8
  %i = alloca i64, align 8
  %k = alloca i64, align 8
  %n_leaf_windows = alloca i64, align 8
  %nwindows = alloca i64, align 8
  store i64 %configuration, i64* %configuration.addr, align 8
  store i64 -1, i64* %old_point, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load i64, i64* %configuration.addr, align 8
  call void @CHECK_WINDOW_CONFIGURATION(i64 %0)
  %1 = load i64, i64* %configuration.addr, align 8
  %call1 = call %struct.Lisp_Vector* @XVECTOR(i64 %1)
  %2 = bitcast %struct.Lisp_Vector* %call1 to %struct.save_window_data*
  store %struct.save_window_data* %2, %struct.save_window_data** %data, align 8
  %3 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %saved_windows2 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %3, i32 0, i32 8
  %4 = load i64, i64* %saved_windows2, align 8
  %call3 = call %struct.Lisp_Vector* @XVECTOR(i64 %4)
  store %struct.Lisp_Vector* %call3, %struct.Lisp_Vector** %saved_windows, align 8
  %5 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_buffer = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %5, i32 0, i32 3
  %6 = load i64, i64* %current_buffer, align 8
  store i64 %6, i64* %new_current_buffer, align 8
  %7 = load i64, i64* %new_current_buffer, align 8
  %call4 = call %struct.buffer* @XBUFFER(i64 %7)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call4, i32 0, i32 1
  %8 = load i64, i64* %name_, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %8, %call5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %new_current_buffer, align 8
  br label %if.end.57

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %new_current_buffer, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %9)
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp8 = icmp eq %struct.buffer* %call7, %10
  br i1 %cmp8, label %if.then.9, label %if.else.25

if.then.9:                                        ; preds = %if.else
  %11 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %11, i32 0, i32 2
  %12 = load i64, i64* %current_window, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %12)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 10
  %13 = load i64, i64* %contents, align 8
  %14 = load i64, i64* %new_current_buffer, align 8
  %cmp11 = icmp eq i64 %13, %14
  br i1 %cmp11, label %land.lhs.true, label %if.else.24

land.lhs.true:                                    ; preds = %if.then.9
  %15 = load i64, i64* @selected_window, align 8
  %call12 = call zeroext i1 @WINDOWP(i64 %15)
  br i1 %call12, label %land.lhs.true.13, label %if.else.24

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %16 = load i64, i64* @selected_window, align 8
  %call14 = call %struct.window* @XWINDOW(i64 %16)
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %call14, i32 0, i32 10
  %17 = load i64, i64* %contents15, align 8
  %18 = load i64, i64* %new_current_buffer, align 8
  %cmp16 = icmp eq i64 %17, %18
  br i1 %cmp16, label %land.lhs.true.17, label %if.else.24

land.lhs.true.17:                                 ; preds = %land.lhs.true.13
  %19 = load i64, i64* @selected_window, align 8
  %20 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window18 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %20, i32 0, i32 2
  %21 = load i64, i64* %current_window18, align 8
  %cmp19 = icmp eq i64 %19, %21
  br i1 %cmp19, label %if.else.24, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true.17
  %22 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window21 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %22, i32 0, i32 2
  %23 = load i64, i64* %current_window21, align 8
  %call22 = call %struct.window* @XWINDOW(i64 %23)
  %pointm = getelementptr inbounds %struct.window, %struct.window* %call22, i32 0, i32 12
  %24 = load i64, i64* %pointm, align 8
  %call23 = call i64 @marker_position(i64 %24)
  store i64 %call23, i64* %old_point, align 8
  br label %if.end

if.else.24:                                       ; preds = %land.lhs.true.17, %land.lhs.true.13, %land.lhs.true, %if.then.9
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 75
  %26 = load i64, i64* %pt, align 8
  %add = add nsw i64 %26, 0
  store i64 %add, i64* %old_point, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.24, %if.then.20
  br label %if.end.56

if.else.25:                                       ; preds = %if.else
  %27 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window26 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %27, i32 0, i32 2
  %28 = load i64, i64* %current_window26, align 8
  %call27 = call %struct.window* @XWINDOW(i64 %28)
  %contents28 = getelementptr inbounds %struct.window, %struct.window* %call27, i32 0, i32 10
  %29 = load i64, i64* %contents28, align 8
  %30 = load i64, i64* %new_current_buffer, align 8
  %cmp29 = icmp eq i64 %29, %30
  br i1 %cmp29, label %land.lhs.true.30, label %if.else.38

land.lhs.true.30:                                 ; preds = %if.else.25
  %31 = load i64, i64* @selected_window, align 8
  %32 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window31 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %32, i32 0, i32 2
  %33 = load i64, i64* %current_window31, align 8
  %cmp32 = icmp eq i64 %31, %33
  br i1 %cmp32, label %if.else.38, label %if.then.33

if.then.33:                                       ; preds = %land.lhs.true.30
  %34 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window34 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %34, i32 0, i32 2
  %35 = load i64, i64* %current_window34, align 8
  %call35 = call %struct.window* @XWINDOW(i64 %35)
  %pointm36 = getelementptr inbounds %struct.window, %struct.window* %call35, i32 0, i32 12
  %36 = load i64, i64* %pointm36, align 8
  %call37 = call i64 @marker_position(i64 %36)
  store i64 %call37, i64* %old_point, align 8
  br label %if.end.55

if.else.38:                                       ; preds = %land.lhs.true.30, %if.else.25
  %37 = load i64, i64* %new_current_buffer, align 8
  %call39 = call %struct.buffer* @XBUFFER(i64 %37)
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp40 = icmp eq %struct.buffer* %call39, %38
  br i1 %cmp40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.38
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt41 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 75
  %40 = load i64, i64* %pt41, align 8
  %add42 = add nsw i64 %40, 0
  br label %cond.end.53

cond.false:                                       ; preds = %if.else.38
  %41 = load i64, i64* %new_current_buffer, align 8
  %call43 = call %struct.buffer* @XBUFFER(i64 %41)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call43, i32 0, i32 45
  %42 = load i64, i64* %pt_marker_, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %42, %call44
  br i1 %cmp45, label %cond.true.46, label %cond.false.49

cond.true.46:                                     ; preds = %cond.false
  %43 = load i64, i64* %new_current_buffer, align 8
  %call47 = call %struct.buffer* @XBUFFER(i64 %43)
  %pt48 = getelementptr inbounds %struct.buffer, %struct.buffer* %call47, i32 0, i32 75
  %44 = load i64, i64* %pt48, align 8
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false
  %45 = load i64, i64* %new_current_buffer, align 8
  %call50 = call %struct.buffer* @XBUFFER(i64 %45)
  %pt_marker_51 = getelementptr inbounds %struct.buffer, %struct.buffer* %call50, i32 0, i32 45
  %46 = load i64, i64* %pt_marker_51, align 8
  %call52 = call i64 @marker_position(i64 %46)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.46
  %cond = phi i64 [ %44, %cond.true.46 ], [ %call52, %cond.false.49 ]
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.end, %cond.true
  %cond54 = phi i64 [ %add42, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond54, i64* %old_point, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %cond.end.53, %if.then.33
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then
  %47 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents58 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %47, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents58, i32 0, i64 0
  %48 = load i64, i64* %arrayidx, align 8
  %call59 = call %struct.Lisp_Vector* @XVECTOR(i64 %48)
  %49 = bitcast %struct.Lisp_Vector* %call59 to %struct.saved_window*
  %window = getelementptr inbounds %struct.saved_window, %struct.saved_window* %49, i32 0, i32 1
  %50 = load i64, i64* %window, align 8
  %call60 = call %struct.window* @XWINDOW(i64 %50)
  %frame61 = getelementptr inbounds %struct.window, %struct.window* %call60, i32 0, i32 1
  %51 = load i64, i64* %frame61, align 8
  store i64 %51, i64* %frame, align 8
  %52 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %52, 5
  %53 = inttoptr i64 %sub to i8*
  %54 = bitcast i8* %53 to %struct.frame*
  store %struct.frame* %54, %struct.frame** %f, align 8
  %55 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 61
  %56 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp62 = icmp ne %struct.terminal* %56, null
  br i1 %cmp62, label %if.then.63, label %if.end.663

if.then.63:                                       ; preds = %if.end.57
  %call65 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call65, i64* %dead_windows, align 8
  store i64 0, i64* %k, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.63
  %57 = load i64, i64* %k, align 8
  %58 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %header = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %58, i32 0, i32 0
  %size = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header, i32 0, i32 0
  %59 = load i64, i64* %size, align 8
  %cmp66 = icmp slt i64 %57, %59
  br i1 %cmp66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load i64, i64* %k, align 8
  %61 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents67 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %61, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [0 x i64], [0 x i64]* %contents67, i32 0, i64 %60
  %62 = load i64, i64* %arrayidx68, align 8
  %call69 = call %struct.Lisp_Vector* @XVECTOR(i64 %62)
  %63 = bitcast %struct.Lisp_Vector* %call69 to %struct.saved_window*
  store %struct.saved_window* %63, %struct.saved_window** %p, align 8
  %64 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window70 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %64, i32 0, i32 1
  %65 = load i64, i64* %window70, align 8
  store i64 %65, i64* %window64, align 8
  %66 = load i64, i64* %window64, align 8
  %call71 = call %struct.window* @XWINDOW(i64 %66)
  store %struct.window* %call71, %struct.window** %w, align 8
  %67 = load %struct.window*, %struct.window** %w, align 8
  %contents72 = getelementptr inbounds %struct.window, %struct.window* %67, i32 0, i32 10
  %68 = load i64, i64* %contents72, align 8
  %call73 = call zeroext i1 @BUFFERP(i64 %68)
  br i1 %call73, label %land.lhs.true.74, label %if.end.86

land.lhs.true.74:                                 ; preds = %for.body
  %69 = load %struct.window*, %struct.window** %w, align 8
  %contents75 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 10
  %70 = load i64, i64* %contents75, align 8
  %71 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer = getelementptr inbounds %struct.saved_window, %struct.saved_window* %71, i32 0, i32 2
  %72 = load i64, i64* %buffer, align 8
  %cmp76 = icmp eq i64 %70, %72
  br i1 %cmp76, label %if.end.86, label %land.lhs.true.77

land.lhs.true.77:                                 ; preds = %land.lhs.true.74
  %73 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer78 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %73, i32 0, i32 2
  %74 = load i64, i64* %buffer78, align 8
  %call79 = call %struct.buffer* @XBUFFER(i64 %74)
  %name_80 = getelementptr inbounds %struct.buffer, %struct.buffer* %call79, i32 0, i32 1
  %75 = load i64, i64* %name_80, align 8
  %call81 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp82 = icmp eq i64 %75, %call81
  br i1 %cmp82, label %if.end.86, label %if.then.83

if.then.83:                                       ; preds = %land.lhs.true.77
  %call84 = call i64 @builtin_lisp_symbol(i32 796)
  %76 = load i64, i64* %window64, align 8
  %call85 = call i64 @call1(i64 %call84, i64 %76)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.83, %land.lhs.true.77, %land.lhs.true.74, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.86
  %77 = load i64, i64* %k, align 8
  %inc = add nsw i64 %77, 1
  store i64 %inc, i64* %k, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %78 = load %struct.frame*, %struct.frame** %f, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 26
  %79 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load = load i64, i64* %79, align 8
  %bf.clear = and i64 %bf.load, -17179869185
  store i64 %bf.clear, i64* %79, align 8
  call void @block_input()
  %80 = load i64, i64* @selected_window, align 8
  %call87 = call %struct.window* @XWINDOW(i64 %80)
  %contents88 = getelementptr inbounds %struct.window, %struct.window* %call87, i32 0, i32 10
  %81 = load i64, i64* %contents88, align 8
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp90 = icmp eq i64 %81, %call89
  br i1 %cmp90, label %if.end.145, label %if.then.91

if.then.91:                                       ; preds = %for.end
  %82 = load i64, i64* @selected_window, align 8
  %call92 = call %struct.window* @XWINDOW(i64 %82)
  store %struct.window* %call92, %struct.window** %w, align 8
  %83 = load %struct.window*, %struct.window** %w, align 8
  %pointm93 = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 12
  %84 = load i64, i64* %pointm93, align 8
  %85 = load %struct.window*, %struct.window** %w, align 8
  %contents94 = getelementptr inbounds %struct.window, %struct.window* %85, i32 0, i32 10
  %86 = load i64, i64* %contents94, align 8
  %87 = load %struct.window*, %struct.window** %w, align 8
  %contents95 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 10
  %88 = load i64, i64* %contents95, align 8
  %call96 = call %struct.buffer* @XBUFFER(i64 %88)
  %89 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp97 = icmp eq %struct.buffer* %call96, %89
  br i1 %cmp97, label %cond.true.98, label %cond.false.101

cond.true.98:                                     ; preds = %if.then.91
  %90 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt99 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 75
  %91 = load i64, i64* %pt99, align 8
  %add100 = add nsw i64 %91, 0
  br label %cond.end.118

cond.false.101:                                   ; preds = %if.then.91
  %92 = load %struct.window*, %struct.window** %w, align 8
  %contents102 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 10
  %93 = load i64, i64* %contents102, align 8
  %call103 = call %struct.buffer* @XBUFFER(i64 %93)
  %pt_marker_104 = getelementptr inbounds %struct.buffer, %struct.buffer* %call103, i32 0, i32 45
  %94 = load i64, i64* %pt_marker_104, align 8
  %call105 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp106 = icmp eq i64 %94, %call105
  br i1 %cmp106, label %cond.true.107, label %cond.false.111

cond.true.107:                                    ; preds = %cond.false.101
  %95 = load %struct.window*, %struct.window** %w, align 8
  %contents108 = getelementptr inbounds %struct.window, %struct.window* %95, i32 0, i32 10
  %96 = load i64, i64* %contents108, align 8
  %call109 = call %struct.buffer* @XBUFFER(i64 %96)
  %pt110 = getelementptr inbounds %struct.buffer, %struct.buffer* %call109, i32 0, i32 75
  %97 = load i64, i64* %pt110, align 8
  br label %cond.end.116

cond.false.111:                                   ; preds = %cond.false.101
  %98 = load %struct.window*, %struct.window** %w, align 8
  %contents112 = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 10
  %99 = load i64, i64* %contents112, align 8
  %call113 = call %struct.buffer* @XBUFFER(i64 %99)
  %pt_marker_114 = getelementptr inbounds %struct.buffer, %struct.buffer* %call113, i32 0, i32 45
  %100 = load i64, i64* %pt_marker_114, align 8
  %call115 = call i64 @marker_position(i64 %100)
  br label %cond.end.116

cond.end.116:                                     ; preds = %cond.false.111, %cond.true.107
  %cond117 = phi i64 [ %97, %cond.true.107 ], [ %call115, %cond.false.111 ]
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.end.116, %cond.true.98
  %cond119 = phi i64 [ %add100, %cond.true.98 ], [ %cond117, %cond.end.116 ]
  %101 = load %struct.window*, %struct.window** %w, align 8
  %contents120 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 10
  %102 = load i64, i64* %contents120, align 8
  %call121 = call %struct.buffer* @XBUFFER(i64 %102)
  %103 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp122 = icmp eq %struct.buffer* %call121, %103
  br i1 %cmp122, label %cond.true.123, label %cond.false.125

cond.true.123:                                    ; preds = %cond.end.118
  %104 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %104, i32 0, i32 76
  %105 = load i64, i64* %pt_byte, align 8
  %add124 = add nsw i64 %105, 0
  br label %cond.end.142

cond.false.125:                                   ; preds = %cond.end.118
  %106 = load %struct.window*, %struct.window** %w, align 8
  %contents126 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 10
  %107 = load i64, i64* %contents126, align 8
  %call127 = call %struct.buffer* @XBUFFER(i64 %107)
  %pt_marker_128 = getelementptr inbounds %struct.buffer, %struct.buffer* %call127, i32 0, i32 45
  %108 = load i64, i64* %pt_marker_128, align 8
  %call129 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp130 = icmp eq i64 %108, %call129
  br i1 %cmp130, label %cond.true.131, label %cond.false.135

cond.true.131:                                    ; preds = %cond.false.125
  %109 = load %struct.window*, %struct.window** %w, align 8
  %contents132 = getelementptr inbounds %struct.window, %struct.window* %109, i32 0, i32 10
  %110 = load i64, i64* %contents132, align 8
  %call133 = call %struct.buffer* @XBUFFER(i64 %110)
  %pt_byte134 = getelementptr inbounds %struct.buffer, %struct.buffer* %call133, i32 0, i32 76
  %111 = load i64, i64* %pt_byte134, align 8
  br label %cond.end.140

cond.false.135:                                   ; preds = %cond.false.125
  %112 = load %struct.window*, %struct.window** %w, align 8
  %contents136 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 10
  %113 = load i64, i64* %contents136, align 8
  %call137 = call %struct.buffer* @XBUFFER(i64 %113)
  %pt_marker_138 = getelementptr inbounds %struct.buffer, %struct.buffer* %call137, i32 0, i32 45
  %114 = load i64, i64* %pt_marker_138, align 8
  %call139 = call i64 @marker_byte_position(i64 %114)
  br label %cond.end.140

cond.end.140:                                     ; preds = %cond.false.135, %cond.true.131
  %cond141 = phi i64 [ %111, %cond.true.131 ], [ %call139, %cond.false.135 ]
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.end.140, %cond.true.123
  %cond143 = phi i64 [ %add124, %cond.true.123 ], [ %cond141, %cond.end.140 ]
  %call144 = call i64 @set_marker_both(i64 %84, i64 %86, i64 %cond119, i64 %cond143)
  br label %if.end.145

if.end.145:                                       ; preds = %cond.end.142, %for.end
  %115 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %115)
  %116 = load %struct.frame*, %struct.frame** %f, align 8
  %window_sizes_changed = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 26
  %117 = bitcast i48* %window_sizes_changed to i64*
  %bf.load146 = load i64, i64* %117, align 8
  %bf.clear147 = and i64 %bf.load146, -524289
  %bf.set = or i64 %bf.clear147, 524288
  store i64 %bf.set, i64* %117, align 8
  %118 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window148 = getelementptr inbounds %struct.frame, %struct.frame* %118, i32 0, i32 5
  %119 = load i64, i64* %root_window148, align 8
  %call149 = call %struct.window* @XWINDOW(i64 %119)
  store %struct.window* %call149, %struct.window** %root_window, align 8
  %120 = load %struct.window*, %struct.window** %root_window, align 8
  %call150 = call i64 @count_windows(%struct.window* %120)
  store i64 %call150, i64* %nwindows, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.145
  %121 = load i64, i64* %nwindows, align 8
  %122 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %122, 8
  %div151 = udiv i64 %div, 1
  %cmp152 = icmp ule i64 %121, %div151
  br i1 %cmp152, label %if.then.153, label %if.else.156

if.then.153:                                      ; preds = %do.body
  %123 = load i64, i64* %nwindows, align 8
  %mul = mul i64 8, %123
  %124 = load i64, i64* %sa_avail, align 8
  %sub154 = sub i64 %124, %mul
  store i64 %sub154, i64* %sa_avail, align 8
  %125 = load i64, i64* %nwindows, align 8
  %mul155 = mul i64 8, %125
  %126 = alloca i8, i64 %mul155
  %127 = bitcast i8* %126 to %struct.window**
  store %struct.window** %127, %struct.window*** %leaf_windows, align 8
  br label %if.end.158

if.else.156:                                      ; preds = %do.body
  %128 = load i64, i64* %nwindows, align 8
  %call157 = call noalias i8* @xnmalloc(i64 %128, i64 8)
  %129 = bitcast i8* %call157 to %struct.window**
  store %struct.window** %129, %struct.window*** %leaf_windows, align 8
  store i8 1, i8* %sa_must_free, align 1
  %130 = load %struct.window**, %struct.window*** %leaf_windows, align 8
  %131 = bitcast %struct.window** %130 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %131)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.156, %if.then.153
  br label %do.end

do.end:                                           ; preds = %if.end.158
  %132 = load %struct.window*, %struct.window** %root_window, align 8
  %133 = load %struct.window**, %struct.window*** %leaf_windows, align 8
  %call159 = call i64 @get_leaf_windows(%struct.window* %132, %struct.window** %133, i64 0)
  store i64 %call159, i64* %n_leaf_windows, align 8
  %134 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window160 = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 5
  %135 = load i64, i64* %root_window160, align 8
  call void @delete_all_child_windows(i64 %135)
  store i64 0, i64* %k, align 8
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.564, %do.end
  %136 = load i64, i64* %k, align 8
  %137 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %header162 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %137, i32 0, i32 0
  %size163 = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header162, i32 0, i32 0
  %138 = load i64, i64* %size163, align 8
  %cmp164 = icmp slt i64 %136, %138
  br i1 %cmp164, label %for.body.165, label %for.end.566

for.body.165:                                     ; preds = %for.cond.161
  %139 = load i64, i64* %k, align 8
  %140 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents166 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %140, i32 0, i32 1
  %arrayidx167 = getelementptr inbounds [0 x i64], [0 x i64]* %contents166, i32 0, i64 %139
  %141 = load i64, i64* %arrayidx167, align 8
  %call168 = call %struct.Lisp_Vector* @XVECTOR(i64 %141)
  %142 = bitcast %struct.Lisp_Vector* %call168 to %struct.saved_window*
  store %struct.saved_window* %142, %struct.saved_window** %p, align 8
  %143 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window169 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %143, i32 0, i32 1
  %144 = load i64, i64* %window169, align 8
  store i64 %144, i64* %window64, align 8
  %145 = load i64, i64* %window64, align 8
  %call170 = call %struct.window* @XWINDOW(i64 %145)
  store %struct.window* %call170, %struct.window** %w, align 8
  %146 = load %struct.window*, %struct.window** %w, align 8
  %call171 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next(%struct.window* %146, i64 %call171)
  %147 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %parent = getelementptr inbounds %struct.saved_window, %struct.saved_window* %147, i32 0, i32 20
  %148 = load i64, i64* %parent, align 8
  %call172 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp173 = icmp eq i64 %148, %call172
  br i1 %cmp173, label %if.else.180, label %if.then.174

if.then.174:                                      ; preds = %for.body.165
  %149 = load %struct.window*, %struct.window** %w, align 8
  %150 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %parent175 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %150, i32 0, i32 20
  %151 = load i64, i64* %parent175, align 8
  %shr = ashr i64 %151, 2
  %152 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents176 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %152, i32 0, i32 1
  %arrayidx177 = getelementptr inbounds [0 x i64], [0 x i64]* %contents176, i32 0, i64 %shr
  %153 = load i64, i64* %arrayidx177, align 8
  %call178 = call %struct.Lisp_Vector* @XVECTOR(i64 %153)
  %154 = bitcast %struct.Lisp_Vector* %call178 to %struct.saved_window*
  %window179 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %154, i32 0, i32 1
  %155 = load i64, i64* %window179, align 8
  call void @wset_parent(%struct.window* %149, i64 %155)
  br label %if.end.182

if.else.180:                                      ; preds = %for.body.165
  %156 = load %struct.window*, %struct.window** %w, align 8
  %call181 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_parent(%struct.window* %156, i64 %call181)
  br label %if.end.182

if.end.182:                                       ; preds = %if.else.180, %if.then.174
  %157 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %prev = getelementptr inbounds %struct.saved_window, %struct.saved_window* %157, i32 0, i32 21
  %158 = load i64, i64* %prev, align 8
  %call183 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp184 = icmp eq i64 %158, %call183
  br i1 %cmp184, label %if.else.195, label %if.then.185

if.then.185:                                      ; preds = %if.end.182
  %159 = load %struct.window*, %struct.window** %w, align 8
  %160 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %prev186 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %160, i32 0, i32 21
  %161 = load i64, i64* %prev186, align 8
  %shr187 = ashr i64 %161, 2
  %162 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %saved_windows, align 8
  %contents188 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %162, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [0 x i64], [0 x i64]* %contents188, i32 0, i64 %shr187
  %163 = load i64, i64* %arrayidx189, align 8
  %call190 = call %struct.Lisp_Vector* @XVECTOR(i64 %163)
  %164 = bitcast %struct.Lisp_Vector* %call190 to %struct.saved_window*
  %window191 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %164, i32 0, i32 1
  %165 = load i64, i64* %window191, align 8
  call void @wset_prev(%struct.window* %159, i64 %165)
  %166 = load %struct.window*, %struct.window** %w, align 8
  %prev192 = getelementptr inbounds %struct.window, %struct.window* %166, i32 0, i32 3
  %167 = load i64, i64* %prev192, align 8
  %call193 = call %struct.window* @XWINDOW(i64 %167)
  %168 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window194 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %168, i32 0, i32 1
  %169 = load i64, i64* %window194, align 8
  call void @wset_next(%struct.window* %call193, i64 %169)
  br label %if.end.211

if.else.195:                                      ; preds = %if.end.182
  %170 = load %struct.window*, %struct.window** %w, align 8
  %call196 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev(%struct.window* %170, i64 %call196)
  %171 = load %struct.window*, %struct.window** %w, align 8
  %parent197 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 4
  %172 = load i64, i64* %parent197, align 8
  %call198 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp199 = icmp eq i64 %172, %call198
  br i1 %cmp199, label %if.end.210, label %if.then.200

if.then.200:                                      ; preds = %if.else.195
  %173 = load %struct.window*, %struct.window** %w, align 8
  %parent201 = getelementptr inbounds %struct.window, %struct.window* %173, i32 0, i32 4
  %174 = load i64, i64* %parent201, align 8
  %call202 = call %struct.window* @XWINDOW(i64 %174)
  %175 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %total_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %175, i32 0, i32 12
  %176 = load i64, i64* %total_cols, align 8
  %shr203 = ashr i64 %176, 2
  %177 = load %struct.window*, %struct.window** %w, align 8
  %parent204 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 4
  %178 = load i64, i64* %parent204, align 8
  %call205 = call %struct.window* @XWINDOW(i64 %178)
  %total_cols206 = getelementptr inbounds %struct.window, %struct.window* %call205, i32 0, i32 36
  %179 = load i32, i32* %total_cols206, align 4
  %conv = sext i32 %179 to i64
  %cmp207 = icmp ne i64 %shr203, %conv
  %180 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window209 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %180, i32 0, i32 1
  %181 = load i64, i64* %window209, align 8
  call void @wset_combination(%struct.window* %call202, i1 zeroext %cmp207, i64 %181)
  br label %if.end.210

if.end.210:                                       ; preds = %if.then.200, %if.else.195
  br label %if.end.211

if.end.211:                                       ; preds = %if.end.210, %if.then.185
  %182 = load %struct.window*, %struct.window** %w, align 8
  %combination_limit = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 22
  %183 = load i64, i64* %combination_limit, align 8
  %call212 = call zeroext i1 @BUFFERP(i64 %183)
  br i1 %call212, label %if.then.213, label %if.end.215

if.then.213:                                      ; preds = %if.end.211
  %184 = load %struct.window*, %struct.window** %w, align 8
  %185 = load %struct.window*, %struct.window** %w, align 8
  %combination_limit214 = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 22
  %186 = load i64, i64* %combination_limit214, align 8
  call void @wset_buffer(%struct.window* %184, i64 %186)
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.213, %if.end.211
  %187 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_left = getelementptr inbounds %struct.saved_window, %struct.saved_window* %187, i32 0, i32 6
  %188 = load i64, i64* %pixel_left, align 8
  %shr216 = ashr i64 %188, 2
  %conv217 = trunc i64 %shr216 to i32
  %189 = load %struct.window*, %struct.window** %w, align 8
  %pixel_left218 = getelementptr inbounds %struct.window, %struct.window* %189, i32 0, i32 30
  store i32 %conv217, i32* %pixel_left218, align 4
  %190 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_top = getelementptr inbounds %struct.saved_window, %struct.saved_window* %190, i32 0, i32 7
  %191 = load i64, i64* %pixel_top, align 8
  %shr219 = ashr i64 %191, 2
  %conv220 = trunc i64 %shr219 to i32
  %192 = load %struct.window*, %struct.window** %w, align 8
  %pixel_top221 = getelementptr inbounds %struct.window, %struct.window* %192, i32 0, i32 31
  store i32 %conv220, i32* %pixel_top221, align 4
  %193 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %193, i32 0, i32 9
  %194 = load i64, i64* %pixel_width, align 8
  %shr222 = ashr i64 %194, 2
  %conv223 = trunc i64 %shr222 to i32
  %195 = load %struct.window*, %struct.window** %w, align 8
  %pixel_width224 = getelementptr inbounds %struct.window, %struct.window* %195, i32 0, i32 34
  store i32 %conv223, i32* %pixel_width224, align 4
  %196 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_height = getelementptr inbounds %struct.saved_window, %struct.saved_window* %196, i32 0, i32 8
  %197 = load i64, i64* %pixel_height, align 8
  %shr225 = ashr i64 %197, 2
  %conv226 = trunc i64 %shr225 to i32
  %198 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height227 = getelementptr inbounds %struct.window, %struct.window* %198, i32 0, i32 35
  store i32 %conv226, i32* %pixel_height227, align 4
  %199 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_col = getelementptr inbounds %struct.saved_window, %struct.saved_window* %199, i32 0, i32 10
  %200 = load i64, i64* %left_col, align 8
  %shr228 = ashr i64 %200, 2
  %conv229 = trunc i64 %shr228 to i32
  %201 = load %struct.window*, %struct.window** %w, align 8
  %left_col230 = getelementptr inbounds %struct.window, %struct.window* %201, i32 0, i32 32
  store i32 %conv229, i32* %left_col230, align 4
  %202 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %top_line = getelementptr inbounds %struct.saved_window, %struct.saved_window* %202, i32 0, i32 11
  %203 = load i64, i64* %top_line, align 8
  %shr231 = ashr i64 %203, 2
  %conv232 = trunc i64 %shr231 to i32
  %204 = load %struct.window*, %struct.window** %w, align 8
  %top_line233 = getelementptr inbounds %struct.window, %struct.window* %204, i32 0, i32 33
  store i32 %conv232, i32* %top_line233, align 4
  %205 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %total_cols234 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %205, i32 0, i32 12
  %206 = load i64, i64* %total_cols234, align 8
  %shr235 = ashr i64 %206, 2
  %conv236 = trunc i64 %shr235 to i32
  %207 = load %struct.window*, %struct.window** %w, align 8
  %total_cols237 = getelementptr inbounds %struct.window, %struct.window* %207, i32 0, i32 36
  store i32 %conv236, i32* %total_cols237, align 4
  %208 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %total_lines = getelementptr inbounds %struct.saved_window, %struct.saved_window* %208, i32 0, i32 13
  %209 = load i64, i64* %total_lines, align 8
  %shr238 = ashr i64 %209, 2
  %conv239 = trunc i64 %shr238 to i32
  %210 = load %struct.window*, %struct.window** %w, align 8
  %total_lines240 = getelementptr inbounds %struct.window, %struct.window* %210, i32 0, i32 37
  store i32 %conv239, i32* %total_lines240, align 4
  %211 = load %struct.window*, %struct.window** %w, align 8
  %212 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %normal_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %212, i32 0, i32 14
  %213 = load i64, i64* %normal_cols, align 8
  call void @wset_normal_cols(%struct.window* %211, i64 %213)
  %214 = load %struct.window*, %struct.window** %w, align 8
  %215 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %normal_lines = getelementptr inbounds %struct.saved_window, %struct.saved_window* %215, i32 0, i32 15
  %216 = load i64, i64* %normal_lines, align 8
  call void @wset_normal_lines(%struct.window* %214, i64 %216)
  %217 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %hscroll = getelementptr inbounds %struct.saved_window, %struct.saved_window* %217, i32 0, i32 16
  %218 = load i64, i64* %hscroll, align 8
  %shr241 = ashr i64 %218, 2
  %219 = load %struct.window*, %struct.window** %w, align 8
  %hscroll242 = getelementptr inbounds %struct.window, %struct.window* %219, i32 0, i32 38
  store i64 %shr241, i64* %hscroll242, align 8
  %220 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.saved_window, %struct.saved_window* %220, i32 0, i32 19
  %221 = load i64, i64* %suspend_auto_hscroll, align 8
  %call243 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp244 = icmp eq i64 %221, %call243
  %lnot = xor i1 %cmp244, true
  %222 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll246 = getelementptr inbounds %struct.window, %struct.window* %222, i32 0, i32 67
  %223 = zext i1 %lnot to i16
  %bf.load247 = load i16, i16* %suspend_auto_hscroll246, align 4
  %bf.shl = shl i16 %223, 15
  %bf.clear248 = and i16 %bf.load247, 32767
  %bf.set249 = or i16 %bf.clear248, %bf.shl
  store i16 %bf.set249, i16* %suspend_auto_hscroll246, align 4
  %bf.result.cast = trunc i16 %223 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %224 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %min_hscroll = getelementptr inbounds %struct.saved_window, %struct.saved_window* %224, i32 0, i32 17
  %225 = load i64, i64* %min_hscroll, align 8
  %shr250 = ashr i64 %225, 2
  %226 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll251 = getelementptr inbounds %struct.window, %struct.window* %226, i32 0, i32 39
  store i64 %shr250, i64* %min_hscroll251, align 8
  %227 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %hscroll_whole = getelementptr inbounds %struct.saved_window, %struct.saved_window* %227, i32 0, i32 18
  %228 = load i64, i64* %hscroll_whole, align 8
  %shr252 = ashr i64 %228, 2
  %229 = load %struct.window*, %struct.window** %w, align 8
  %hscroll_whole253 = getelementptr inbounds %struct.window, %struct.window* %229, i32 0, i32 40
  store i64 %shr252, i64* %hscroll_whole253, align 8
  %230 = load %struct.window*, %struct.window** %w, align 8
  %231 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %display_table = getelementptr inbounds %struct.saved_window, %struct.saved_window* %231, i32 0, i32 23
  %232 = load i64, i64* %display_table, align 8
  call void @wset_display_table(%struct.window* %230, i64 %232)
  %233 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_margin_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %233, i32 0, i32 24
  %234 = load i64, i64* %left_margin_cols, align 8
  %shr254 = ashr i64 %234, 2
  %conv255 = trunc i64 %shr254 to i32
  %235 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols256 = getelementptr inbounds %struct.window, %struct.window* %235, i32 0, i32 59
  store i32 %conv255, i32* %left_margin_cols256, align 4
  %236 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %right_margin_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %236, i32 0, i32 25
  %237 = load i64, i64* %right_margin_cols, align 8
  %shr257 = ashr i64 %237, 2
  %conv258 = trunc i64 %shr257 to i32
  %238 = load %struct.window*, %struct.window** %w, align 8
  %right_margin_cols259 = getelementptr inbounds %struct.window, %struct.window* %238, i32 0, i32 60
  store i32 %conv258, i32* %right_margin_cols259, align 4
  %239 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_fringe_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %239, i32 0, i32 26
  %240 = load i64, i64* %left_fringe_width, align 8
  %shr260 = ashr i64 %240, 2
  %conv261 = trunc i64 %shr260 to i32
  %241 = load %struct.window*, %struct.window** %w, align 8
  %left_fringe_width262 = getelementptr inbounds %struct.window, %struct.window* %241, i32 0, i32 57
  store i32 %conv261, i32* %left_fringe_width262, align 4
  %242 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %right_fringe_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %242, i32 0, i32 27
  %243 = load i64, i64* %right_fringe_width, align 8
  %shr263 = ashr i64 %243, 2
  %conv264 = trunc i64 %shr263 to i32
  %244 = load %struct.window*, %struct.window** %w, align 8
  %right_fringe_width265 = getelementptr inbounds %struct.window, %struct.window* %244, i32 0, i32 58
  store i32 %conv264, i32* %right_fringe_width265, align 4
  %245 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.saved_window, %struct.saved_window* %245, i32 0, i32 28
  %246 = load i64, i64* %fringes_outside_margins, align 8
  %call266 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp267 = icmp eq i64 %246, %call266
  %lnot269 = xor i1 %cmp267, true
  %247 = load %struct.window*, %struct.window** %w, align 8
  %fringes_outside_margins270 = getelementptr inbounds %struct.window, %struct.window* %247, i32 0, i32 67
  %248 = zext i1 %lnot269 to i16
  %bf.load271 = load i16, i16* %fringes_outside_margins270, align 4
  %bf.shl272 = shl i16 %248, 12
  %bf.clear273 = and i16 %bf.load271, -4097
  %bf.set274 = or i16 %bf.clear273, %bf.shl272
  store i16 %bf.set274, i16* %fringes_outside_margins270, align 4
  %bf.result.cast275 = trunc i16 %248 to i8
  %tobool276 = trunc i8 %bf.result.cast275 to i1
  %249 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %scroll_bar_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %249, i32 0, i32 29
  %250 = load i64, i64* %scroll_bar_width, align 8
  %shr277 = ashr i64 %250, 2
  %conv278 = trunc i64 %shr277 to i32
  %251 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width279 = getelementptr inbounds %struct.window, %struct.window* %251, i32 0, i32 61
  store i32 %conv278, i32* %scroll_bar_width279, align 4
  %252 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %scroll_bar_height = getelementptr inbounds %struct.saved_window, %struct.saved_window* %252, i32 0, i32 32
  %253 = load i64, i64* %scroll_bar_height, align 8
  %shr280 = ashr i64 %253, 2
  %conv281 = trunc i64 %shr280 to i32
  %254 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height282 = getelementptr inbounds %struct.window, %struct.window* %254, i32 0, i32 62
  store i32 %conv281, i32* %scroll_bar_height282, align 4
  %255 = load %struct.window*, %struct.window** %w, align 8
  %256 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.saved_window, %struct.saved_window* %256, i32 0, i32 30
  %257 = load i64, i64* %vertical_scroll_bar_type, align 8
  call void @wset_vertical_scroll_bar_type(%struct.window* %255, i64 %257)
  %258 = load %struct.window*, %struct.window** %w, align 8
  %259 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.saved_window, %struct.saved_window* %259, i32 0, i32 33
  %260 = load i64, i64* %horizontal_scroll_bar_type, align 8
  call void @wset_horizontal_scroll_bar_type(%struct.window* %258, i64 %260)
  %261 = load %struct.window*, %struct.window** %w, align 8
  %262 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %dedicated = getelementptr inbounds %struct.saved_window, %struct.saved_window* %262, i32 0, i32 31
  %263 = load i64, i64* %dedicated, align 8
  call void @wset_dedicated(%struct.window* %261, i64 %263)
  %264 = load %struct.window*, %struct.window** %w, align 8
  %265 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %combination_limit283 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %265, i32 0, i32 34
  %266 = load i64, i64* %combination_limit283, align 8
  call void @wset_combination_limit(%struct.window* %264, i64 %266)
  %267 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters = getelementptr inbounds %struct.saved_window, %struct.saved_window* %267, i32 0, i32 35
  %268 = load i64, i64* %window_parameters, align 8
  store i64 %268, i64* %tem, align 8
  br label %for.cond.284

for.cond.284:                                     ; preds = %for.inc.328, %if.end.215
  %269 = load i64, i64* %tem, align 8
  %and = and i64 %269, 7
  %conv285 = trunc i64 %and to i32
  %cmp286 = icmp eq i32 %conv285, 3
  br i1 %cmp286, label %for.body.288, label %for.end.332

for.body.288:                                     ; preds = %for.cond.284
  %270 = load i64, i64* %tem, align 8
  %sub289 = sub nsw i64 %270, 3
  %271 = inttoptr i64 %sub289 to i8*
  %272 = bitcast i8* %271 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %272, i32 0, i32 0
  %273 = load i64, i64* %car, align 8
  store i64 %273, i64* %pers, align 8
  %274 = load i64, i64* %pers, align 8
  %and290 = and i64 %274, 7
  %conv291 = trunc i64 %and290 to i32
  %cmp292 = icmp eq i32 %conv291, 3
  br i1 %cmp292, label %if.then.294, label %if.end.327

if.then.294:                                      ; preds = %for.body.288
  %275 = load i64, i64* %pers, align 8
  %sub295 = sub nsw i64 %275, 3
  %276 = inttoptr i64 %sub295 to i8*
  %277 = bitcast i8* %276 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %277, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %278 = load i64, i64* %cdr, align 8
  %call296 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp297 = icmp eq i64 %278, %call296
  br i1 %cmp297, label %if.then.299, label %if.else.319

if.then.299:                                      ; preds = %if.then.294
  %279 = load i64, i64* %pers, align 8
  %sub300 = sub nsw i64 %279, 3
  %280 = inttoptr i64 %sub300 to i8*
  %281 = bitcast i8* %280 to %struct.Lisp_Cons*
  %car301 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %281, i32 0, i32 0
  %282 = load i64, i64* %car301, align 8
  %283 = load %struct.window*, %struct.window** %w, align 8
  %window_parameters302 = getelementptr inbounds %struct.window, %struct.window* %283, i32 0, i32 23
  %284 = load i64, i64* %window_parameters302, align 8
  %call303 = call i64 @Fassq(i64 %282, i64 %284)
  store i64 %call303, i64* %par, align 8
  %285 = load i64, i64* %par, align 8
  %and304 = and i64 %285, 7
  %conv305 = trunc i64 %and304 to i32
  %cmp306 = icmp eq i32 %conv305, 3
  br i1 %cmp306, label %land.lhs.true.308, label %if.end.318

land.lhs.true.308:                                ; preds = %if.then.299
  %286 = load i64, i64* %par, align 8
  %sub309 = sub nsw i64 %286, 3
  %287 = inttoptr i64 %sub309 to i8*
  %288 = bitcast i8* %287 to %struct.Lisp_Cons*
  %u310 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %288, i32 0, i32 1
  %cdr311 = bitcast %union.anon.11* %u310 to i64*
  %289 = load i64, i64* %cdr311, align 8
  %call312 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp313 = icmp eq i64 %289, %call312
  br i1 %cmp313, label %if.end.318, label %if.then.315

if.then.315:                                      ; preds = %land.lhs.true.308
  %290 = load i64, i64* %par, align 8
  %call316 = call i64 @builtin_lisp_symbol(i32 0)
  %call317 = call i64 @Fsetcdr(i64 %290, i64 %call316)
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.315, %land.lhs.true.308, %if.then.299
  br label %if.end.326

if.else.319:                                      ; preds = %if.then.294
  %291 = load i64, i64* %window64, align 8
  %292 = load i64, i64* %pers, align 8
  %sub320 = sub nsw i64 %292, 3
  %293 = inttoptr i64 %sub320 to i8*
  %294 = bitcast i8* %293 to %struct.Lisp_Cons*
  %car321 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %294, i32 0, i32 0
  %295 = load i64, i64* %car321, align 8
  %296 = load i64, i64* %pers, align 8
  %sub322 = sub nsw i64 %296, 3
  %297 = inttoptr i64 %sub322 to i8*
  %298 = bitcast i8* %297 to %struct.Lisp_Cons*
  %u323 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %298, i32 0, i32 1
  %cdr324 = bitcast %union.anon.11* %u323 to i64*
  %299 = load i64, i64* %cdr324, align 8
  %call325 = call i64 @Fset_window_parameter(i64 %291, i64 %295, i64 %299)
  br label %if.end.326

if.end.326:                                       ; preds = %if.else.319, %if.end.318
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %for.body.288
  br label %for.inc.328

for.inc.328:                                      ; preds = %if.end.327
  %300 = load i64, i64* %tem, align 8
  %sub329 = sub nsw i64 %300, 3
  %301 = inttoptr i64 %sub329 to i8*
  %302 = bitcast i8* %301 to %struct.Lisp_Cons*
  %u330 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %302, i32 0, i32 1
  %cdr331 = bitcast %union.anon.11* %u330 to i64*
  %303 = load i64, i64* %cdr331, align 8
  store i64 %303, i64* %tem, align 8
  br label %for.cond.284

for.end.332:                                      ; preds = %for.cond.284
  %304 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer333 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %304, i32 0, i32 2
  %305 = load i64, i64* %buffer333, align 8
  %call334 = call zeroext i1 @BUFFERP(i64 %305)
  br i1 %call334, label %land.lhs.true.336, label %if.else.378

land.lhs.true.336:                                ; preds = %for.end.332
  %306 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer337 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %306, i32 0, i32 2
  %307 = load i64, i64* %buffer337, align 8
  %call338 = call %struct.buffer* @XBUFFER(i64 %307)
  %name_339 = getelementptr inbounds %struct.buffer, %struct.buffer* %call338, i32 0, i32 1
  %308 = load i64, i64* %name_339, align 8
  %call340 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp341 = icmp eq i64 %308, %call340
  br i1 %cmp341, label %if.else.378, label %if.then.343

if.then.343:                                      ; preds = %land.lhs.true.336
  %309 = load %struct.window*, %struct.window** %w, align 8
  %310 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer344 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %310, i32 0, i32 2
  %311 = load i64, i64* %buffer344, align 8
  call void @wset_buffer(%struct.window* %309, i64 %311)
  %312 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start_at_line_beg = getelementptr inbounds %struct.saved_window, %struct.saved_window* %312, i32 0, i32 22
  %313 = load i64, i64* %start_at_line_beg, align 8
  %call345 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp346 = icmp eq i64 %313, %call345
  %lnot348 = xor i1 %cmp346, true
  %314 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg349 = getelementptr inbounds %struct.window, %struct.window* %314, i32 0, i32 67
  %315 = zext i1 %lnot348 to i16
  %bf.load350 = load i16, i16* %start_at_line_beg349, align 4
  %bf.shl351 = shl i16 %315, 4
  %bf.clear352 = and i16 %bf.load350, -17
  %bf.set353 = or i16 %bf.clear352, %bf.shl351
  store i16 %bf.set353, i16* %start_at_line_beg349, align 4
  %bf.result.cast354 = trunc i16 %315 to i8
  %tobool355 = trunc i8 %bf.result.cast354 to i1
  %316 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %316, i32 0, i32 11
  %317 = load i64, i64* %start, align 8
  %318 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start356 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %318, i32 0, i32 3
  %319 = load i64, i64* %start356, align 8
  %320 = load %struct.window*, %struct.window** %w, align 8
  %contents357 = getelementptr inbounds %struct.window, %struct.window* %320, i32 0, i32 10
  %321 = load i64, i64* %contents357, align 8
  %call358 = call i64 @set_marker_restricted(i64 %317, i64 %319, i64 %321)
  %322 = load %struct.window*, %struct.window** %w, align 8
  %pointm359 = getelementptr inbounds %struct.window, %struct.window* %322, i32 0, i32 12
  %323 = load i64, i64* %pointm359, align 8
  %324 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pointm360 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %324, i32 0, i32 4
  %325 = load i64, i64* %pointm360, align 8
  %326 = load %struct.window*, %struct.window** %w, align 8
  %contents361 = getelementptr inbounds %struct.window, %struct.window* %326, i32 0, i32 10
  %327 = load i64, i64* %contents361, align 8
  %call362 = call i64 @set_marker_restricted(i64 %323, i64 %325, i64 %327)
  %328 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %328, i32 0, i32 13
  %329 = load i64, i64* %old_pointm, align 8
  %330 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %old_pointm363 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %330, i32 0, i32 5
  %331 = load i64, i64* %old_pointm363, align 8
  %332 = load %struct.window*, %struct.window** %w, align 8
  %contents364 = getelementptr inbounds %struct.window, %struct.window* %332, i32 0, i32 10
  %333 = load i64, i64* %contents364, align 8
  %call365 = call i64 @set_marker_restricted(i64 %329, i64 %331, i64 %333)
  %334 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer366 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %334, i32 0, i32 2
  %335 = load i64, i64* %buffer366, align 8
  %336 = load i64, i64* %new_current_buffer, align 8
  %cmp367 = icmp eq i64 %335, %336
  br i1 %cmp367, label %if.end.377, label %land.lhs.true.369

land.lhs.true.369:                                ; preds = %if.then.343
  %337 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer370 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %337, i32 0, i32 2
  %338 = load i64, i64* %buffer370, align 8
  %call371 = call %struct.buffer* @XBUFFER(i64 %338)
  %339 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp372 = icmp eq %struct.buffer* %call371, %339
  br i1 %cmp372, label %if.then.374, label %if.end.377

if.then.374:                                      ; preds = %land.lhs.true.369
  %340 = load %struct.window*, %struct.window** %w, align 8
  %pointm375 = getelementptr inbounds %struct.window, %struct.window* %340, i32 0, i32 12
  %341 = load i64, i64* %pointm375, align 8
  %call376 = call i64 @Fgoto_char(i64 %341)
  br label %if.end.377

if.end.377:                                       ; preds = %if.then.374, %land.lhs.true.369, %if.then.343
  br label %if.end.563

if.else.378:                                      ; preds = %land.lhs.true.336, %for.end.332
  %342 = load %struct.window*, %struct.window** %w, align 8
  %contents379 = getelementptr inbounds %struct.window, %struct.window* %342, i32 0, i32 10
  %343 = load i64, i64* %contents379, align 8
  %call380 = call zeroext i1 @BUFFERP(i64 %343)
  br i1 %call380, label %land.lhs.true.382, label %if.else.532

land.lhs.true.382:                                ; preds = %if.else.378
  %344 = load %struct.window*, %struct.window** %w, align 8
  %contents383 = getelementptr inbounds %struct.window, %struct.window* %344, i32 0, i32 10
  %345 = load i64, i64* %contents383, align 8
  %call384 = call %struct.buffer* @XBUFFER(i64 %345)
  %name_385 = getelementptr inbounds %struct.buffer, %struct.buffer* %call384, i32 0, i32 1
  %346 = load i64, i64* %name_385, align 8
  %call386 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp387 = icmp eq i64 %346, %call386
  br i1 %cmp387, label %if.else.532, label %if.then.389

if.then.389:                                      ; preds = %land.lhs.true.382
  %347 = load %struct.window*, %struct.window** %w, align 8
  %start390 = getelementptr inbounds %struct.window, %struct.window* %347, i32 0, i32 11
  %348 = load i64, i64* %start390, align 8
  %call391 = call %struct.Lisp_Marker* @XMARKER(i64 %348)
  %buffer392 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call391, i32 0, i32 1
  %349 = load %struct.buffer*, %struct.buffer** %buffer392, align 8
  %cmp393 = icmp eq %struct.buffer* %349, null
  br i1 %cmp393, label %if.then.395, label %if.end.399

if.then.395:                                      ; preds = %if.then.389
  %350 = load %struct.window*, %struct.window** %w, align 8
  %start396 = getelementptr inbounds %struct.window, %struct.window* %350, i32 0, i32 11
  %351 = load i64, i64* %start396, align 8
  %352 = load %struct.window*, %struct.window** %w, align 8
  %contents397 = getelementptr inbounds %struct.window, %struct.window* %352, i32 0, i32 10
  %353 = load i64, i64* %contents397, align 8
  %call398 = call i64 @set_marker_restricted_both(i64 %351, i64 %353, i64 0, i64 0)
  br label %if.end.399

if.end.399:                                       ; preds = %if.then.395, %if.then.389
  %354 = load %struct.window*, %struct.window** %w, align 8
  %pointm400 = getelementptr inbounds %struct.window, %struct.window* %354, i32 0, i32 12
  %355 = load i64, i64* %pointm400, align 8
  %call401 = call %struct.Lisp_Marker* @XMARKER(i64 %355)
  %buffer402 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call401, i32 0, i32 1
  %356 = load %struct.buffer*, %struct.buffer** %buffer402, align 8
  %cmp403 = icmp eq %struct.buffer* %356, null
  br i1 %cmp403, label %if.then.405, label %if.end.463

if.then.405:                                      ; preds = %if.end.399
  %357 = load %struct.window*, %struct.window** %w, align 8
  %pointm406 = getelementptr inbounds %struct.window, %struct.window* %357, i32 0, i32 12
  %358 = load i64, i64* %pointm406, align 8
  %359 = load %struct.window*, %struct.window** %w, align 8
  %contents407 = getelementptr inbounds %struct.window, %struct.window* %359, i32 0, i32 10
  %360 = load i64, i64* %contents407, align 8
  %361 = load %struct.window*, %struct.window** %w, align 8
  %contents408 = getelementptr inbounds %struct.window, %struct.window* %361, i32 0, i32 10
  %362 = load i64, i64* %contents408, align 8
  %call409 = call %struct.buffer* @XBUFFER(i64 %362)
  %363 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp410 = icmp eq %struct.buffer* %call409, %363
  br i1 %cmp410, label %cond.true.412, label %cond.false.415

cond.true.412:                                    ; preds = %if.then.405
  %364 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt413 = getelementptr inbounds %struct.buffer, %struct.buffer* %364, i32 0, i32 75
  %365 = load i64, i64* %pt413, align 8
  %add414 = add nsw i64 %365, 0
  br label %cond.end.433

cond.false.415:                                   ; preds = %if.then.405
  %366 = load %struct.window*, %struct.window** %w, align 8
  %contents416 = getelementptr inbounds %struct.window, %struct.window* %366, i32 0, i32 10
  %367 = load i64, i64* %contents416, align 8
  %call417 = call %struct.buffer* @XBUFFER(i64 %367)
  %pt_marker_418 = getelementptr inbounds %struct.buffer, %struct.buffer* %call417, i32 0, i32 45
  %368 = load i64, i64* %pt_marker_418, align 8
  %call419 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp420 = icmp eq i64 %368, %call419
  br i1 %cmp420, label %cond.true.422, label %cond.false.426

cond.true.422:                                    ; preds = %cond.false.415
  %369 = load %struct.window*, %struct.window** %w, align 8
  %contents423 = getelementptr inbounds %struct.window, %struct.window* %369, i32 0, i32 10
  %370 = load i64, i64* %contents423, align 8
  %call424 = call %struct.buffer* @XBUFFER(i64 %370)
  %pt425 = getelementptr inbounds %struct.buffer, %struct.buffer* %call424, i32 0, i32 75
  %371 = load i64, i64* %pt425, align 8
  br label %cond.end.431

cond.false.426:                                   ; preds = %cond.false.415
  %372 = load %struct.window*, %struct.window** %w, align 8
  %contents427 = getelementptr inbounds %struct.window, %struct.window* %372, i32 0, i32 10
  %373 = load i64, i64* %contents427, align 8
  %call428 = call %struct.buffer* @XBUFFER(i64 %373)
  %pt_marker_429 = getelementptr inbounds %struct.buffer, %struct.buffer* %call428, i32 0, i32 45
  %374 = load i64, i64* %pt_marker_429, align 8
  %call430 = call i64 @marker_position(i64 %374)
  br label %cond.end.431

cond.end.431:                                     ; preds = %cond.false.426, %cond.true.422
  %cond432 = phi i64 [ %371, %cond.true.422 ], [ %call430, %cond.false.426 ]
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.end.431, %cond.true.412
  %cond434 = phi i64 [ %add414, %cond.true.412 ], [ %cond432, %cond.end.431 ]
  %375 = load %struct.window*, %struct.window** %w, align 8
  %contents435 = getelementptr inbounds %struct.window, %struct.window* %375, i32 0, i32 10
  %376 = load i64, i64* %contents435, align 8
  %call436 = call %struct.buffer* @XBUFFER(i64 %376)
  %377 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp437 = icmp eq %struct.buffer* %call436, %377
  br i1 %cmp437, label %cond.true.439, label %cond.false.442

cond.true.439:                                    ; preds = %cond.end.433
  %378 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte440 = getelementptr inbounds %struct.buffer, %struct.buffer* %378, i32 0, i32 76
  %379 = load i64, i64* %pt_byte440, align 8
  %add441 = add nsw i64 %379, 0
  br label %cond.end.460

cond.false.442:                                   ; preds = %cond.end.433
  %380 = load %struct.window*, %struct.window** %w, align 8
  %contents443 = getelementptr inbounds %struct.window, %struct.window* %380, i32 0, i32 10
  %381 = load i64, i64* %contents443, align 8
  %call444 = call %struct.buffer* @XBUFFER(i64 %381)
  %pt_marker_445 = getelementptr inbounds %struct.buffer, %struct.buffer* %call444, i32 0, i32 45
  %382 = load i64, i64* %pt_marker_445, align 8
  %call446 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp447 = icmp eq i64 %382, %call446
  br i1 %cmp447, label %cond.true.449, label %cond.false.453

cond.true.449:                                    ; preds = %cond.false.442
  %383 = load %struct.window*, %struct.window** %w, align 8
  %contents450 = getelementptr inbounds %struct.window, %struct.window* %383, i32 0, i32 10
  %384 = load i64, i64* %contents450, align 8
  %call451 = call %struct.buffer* @XBUFFER(i64 %384)
  %pt_byte452 = getelementptr inbounds %struct.buffer, %struct.buffer* %call451, i32 0, i32 76
  %385 = load i64, i64* %pt_byte452, align 8
  br label %cond.end.458

cond.false.453:                                   ; preds = %cond.false.442
  %386 = load %struct.window*, %struct.window** %w, align 8
  %contents454 = getelementptr inbounds %struct.window, %struct.window* %386, i32 0, i32 10
  %387 = load i64, i64* %contents454, align 8
  %call455 = call %struct.buffer* @XBUFFER(i64 %387)
  %pt_marker_456 = getelementptr inbounds %struct.buffer, %struct.buffer* %call455, i32 0, i32 45
  %388 = load i64, i64* %pt_marker_456, align 8
  %call457 = call i64 @marker_byte_position(i64 %388)
  br label %cond.end.458

cond.end.458:                                     ; preds = %cond.false.453, %cond.true.449
  %cond459 = phi i64 [ %385, %cond.true.449 ], [ %call457, %cond.false.453 ]
  br label %cond.end.460

cond.end.460:                                     ; preds = %cond.end.458, %cond.true.439
  %cond461 = phi i64 [ %add441, %cond.true.439 ], [ %cond459, %cond.end.458 ]
  %call462 = call i64 @set_marker_restricted_both(i64 %358, i64 %360, i64 %cond434, i64 %cond461)
  br label %if.end.463

if.end.463:                                       ; preds = %cond.end.460, %if.end.399
  %389 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm464 = getelementptr inbounds %struct.window, %struct.window* %389, i32 0, i32 13
  %390 = load i64, i64* %old_pointm464, align 8
  %call465 = call %struct.Lisp_Marker* @XMARKER(i64 %390)
  %buffer466 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %call465, i32 0, i32 1
  %391 = load %struct.buffer*, %struct.buffer** %buffer466, align 8
  %cmp467 = icmp eq %struct.buffer* %391, null
  br i1 %cmp467, label %if.then.469, label %if.end.527

if.then.469:                                      ; preds = %if.end.463
  %392 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm470 = getelementptr inbounds %struct.window, %struct.window* %392, i32 0, i32 13
  %393 = load i64, i64* %old_pointm470, align 8
  %394 = load %struct.window*, %struct.window** %w, align 8
  %contents471 = getelementptr inbounds %struct.window, %struct.window* %394, i32 0, i32 10
  %395 = load i64, i64* %contents471, align 8
  %396 = load %struct.window*, %struct.window** %w, align 8
  %contents472 = getelementptr inbounds %struct.window, %struct.window* %396, i32 0, i32 10
  %397 = load i64, i64* %contents472, align 8
  %call473 = call %struct.buffer* @XBUFFER(i64 %397)
  %398 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp474 = icmp eq %struct.buffer* %call473, %398
  br i1 %cmp474, label %cond.true.476, label %cond.false.479

cond.true.476:                                    ; preds = %if.then.469
  %399 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt477 = getelementptr inbounds %struct.buffer, %struct.buffer* %399, i32 0, i32 75
  %400 = load i64, i64* %pt477, align 8
  %add478 = add nsw i64 %400, 0
  br label %cond.end.497

cond.false.479:                                   ; preds = %if.then.469
  %401 = load %struct.window*, %struct.window** %w, align 8
  %contents480 = getelementptr inbounds %struct.window, %struct.window* %401, i32 0, i32 10
  %402 = load i64, i64* %contents480, align 8
  %call481 = call %struct.buffer* @XBUFFER(i64 %402)
  %pt_marker_482 = getelementptr inbounds %struct.buffer, %struct.buffer* %call481, i32 0, i32 45
  %403 = load i64, i64* %pt_marker_482, align 8
  %call483 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp484 = icmp eq i64 %403, %call483
  br i1 %cmp484, label %cond.true.486, label %cond.false.490

cond.true.486:                                    ; preds = %cond.false.479
  %404 = load %struct.window*, %struct.window** %w, align 8
  %contents487 = getelementptr inbounds %struct.window, %struct.window* %404, i32 0, i32 10
  %405 = load i64, i64* %contents487, align 8
  %call488 = call %struct.buffer* @XBUFFER(i64 %405)
  %pt489 = getelementptr inbounds %struct.buffer, %struct.buffer* %call488, i32 0, i32 75
  %406 = load i64, i64* %pt489, align 8
  br label %cond.end.495

cond.false.490:                                   ; preds = %cond.false.479
  %407 = load %struct.window*, %struct.window** %w, align 8
  %contents491 = getelementptr inbounds %struct.window, %struct.window* %407, i32 0, i32 10
  %408 = load i64, i64* %contents491, align 8
  %call492 = call %struct.buffer* @XBUFFER(i64 %408)
  %pt_marker_493 = getelementptr inbounds %struct.buffer, %struct.buffer* %call492, i32 0, i32 45
  %409 = load i64, i64* %pt_marker_493, align 8
  %call494 = call i64 @marker_position(i64 %409)
  br label %cond.end.495

cond.end.495:                                     ; preds = %cond.false.490, %cond.true.486
  %cond496 = phi i64 [ %406, %cond.true.486 ], [ %call494, %cond.false.490 ]
  br label %cond.end.497

cond.end.497:                                     ; preds = %cond.end.495, %cond.true.476
  %cond498 = phi i64 [ %add478, %cond.true.476 ], [ %cond496, %cond.end.495 ]
  %410 = load %struct.window*, %struct.window** %w, align 8
  %contents499 = getelementptr inbounds %struct.window, %struct.window* %410, i32 0, i32 10
  %411 = load i64, i64* %contents499, align 8
  %call500 = call %struct.buffer* @XBUFFER(i64 %411)
  %412 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp501 = icmp eq %struct.buffer* %call500, %412
  br i1 %cmp501, label %cond.true.503, label %cond.false.506

cond.true.503:                                    ; preds = %cond.end.497
  %413 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte504 = getelementptr inbounds %struct.buffer, %struct.buffer* %413, i32 0, i32 76
  %414 = load i64, i64* %pt_byte504, align 8
  %add505 = add nsw i64 %414, 0
  br label %cond.end.524

cond.false.506:                                   ; preds = %cond.end.497
  %415 = load %struct.window*, %struct.window** %w, align 8
  %contents507 = getelementptr inbounds %struct.window, %struct.window* %415, i32 0, i32 10
  %416 = load i64, i64* %contents507, align 8
  %call508 = call %struct.buffer* @XBUFFER(i64 %416)
  %pt_marker_509 = getelementptr inbounds %struct.buffer, %struct.buffer* %call508, i32 0, i32 45
  %417 = load i64, i64* %pt_marker_509, align 8
  %call510 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp511 = icmp eq i64 %417, %call510
  br i1 %cmp511, label %cond.true.513, label %cond.false.517

cond.true.513:                                    ; preds = %cond.false.506
  %418 = load %struct.window*, %struct.window** %w, align 8
  %contents514 = getelementptr inbounds %struct.window, %struct.window* %418, i32 0, i32 10
  %419 = load i64, i64* %contents514, align 8
  %call515 = call %struct.buffer* @XBUFFER(i64 %419)
  %pt_byte516 = getelementptr inbounds %struct.buffer, %struct.buffer* %call515, i32 0, i32 76
  %420 = load i64, i64* %pt_byte516, align 8
  br label %cond.end.522

cond.false.517:                                   ; preds = %cond.false.506
  %421 = load %struct.window*, %struct.window** %w, align 8
  %contents518 = getelementptr inbounds %struct.window, %struct.window* %421, i32 0, i32 10
  %422 = load i64, i64* %contents518, align 8
  %call519 = call %struct.buffer* @XBUFFER(i64 %422)
  %pt_marker_520 = getelementptr inbounds %struct.buffer, %struct.buffer* %call519, i32 0, i32 45
  %423 = load i64, i64* %pt_marker_520, align 8
  %call521 = call i64 @marker_byte_position(i64 %423)
  br label %cond.end.522

cond.end.522:                                     ; preds = %cond.false.517, %cond.true.513
  %cond523 = phi i64 [ %420, %cond.true.513 ], [ %call521, %cond.false.517 ]
  br label %cond.end.524

cond.end.524:                                     ; preds = %cond.end.522, %cond.true.503
  %cond525 = phi i64 [ %add505, %cond.true.503 ], [ %cond523, %cond.end.522 ]
  %call526 = call i64 @set_marker_restricted_both(i64 %393, i64 %395, i64 %cond498, i64 %cond525)
  br label %if.end.527

if.end.527:                                       ; preds = %cond.end.524, %if.end.463
  %424 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg528 = getelementptr inbounds %struct.window, %struct.window* %424, i32 0, i32 67
  %bf.load529 = load i16, i16* %start_at_line_beg528, align 4
  %bf.clear530 = and i16 %bf.load529, -17
  %bf.set531 = or i16 %bf.clear530, 16
  store i16 %bf.set531, i16* %start_at_line_beg528, align 4
  br label %if.end.562

if.else.532:                                      ; preds = %land.lhs.true.382, %if.else.378
  %425 = load %struct.window*, %struct.window** %w, align 8
  %start533 = getelementptr inbounds %struct.window, %struct.window* %425, i32 0, i32 11
  %426 = load i64, i64* %start533, align 8
  %call534 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp535 = icmp eq i64 %426, %call534
  br i1 %cmp535, label %if.end.561, label %if.then.537

if.then.537:                                      ; preds = %if.else.532
  %427 = load %struct.window*, %struct.window** %w, align 8
  %call538 = call i64 @Fcurrent_buffer()
  %call539 = call i64 @other_buffer_safely(i64 %call538)
  call void @wset_buffer(%struct.window* %427, i64 %call539)
  %428 = load %struct.window*, %struct.window** %w, align 8
  %start540 = getelementptr inbounds %struct.window, %struct.window* %428, i32 0, i32 11
  %429 = load i64, i64* %start540, align 8
  %430 = load %struct.window*, %struct.window** %w, align 8
  %contents541 = getelementptr inbounds %struct.window, %struct.window* %430, i32 0, i32 10
  %431 = load i64, i64* %contents541, align 8
  %call542 = call i64 @set_marker_restricted_both(i64 %429, i64 %431, i64 0, i64 0)
  %432 = load %struct.window*, %struct.window** %w, align 8
  %pointm543 = getelementptr inbounds %struct.window, %struct.window* %432, i32 0, i32 12
  %433 = load i64, i64* %pointm543, align 8
  %434 = load %struct.window*, %struct.window** %w, align 8
  %contents544 = getelementptr inbounds %struct.window, %struct.window* %434, i32 0, i32 10
  %435 = load i64, i64* %contents544, align 8
  %call545 = call i64 @set_marker_restricted_both(i64 %433, i64 %435, i64 0, i64 0)
  %436 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm546 = getelementptr inbounds %struct.window, %struct.window* %436, i32 0, i32 13
  %437 = load i64, i64* %old_pointm546, align 8
  %438 = load %struct.window*, %struct.window** %w, align 8
  %contents547 = getelementptr inbounds %struct.window, %struct.window* %438, i32 0, i32 10
  %439 = load i64, i64* %contents547, align 8
  %call548 = call i64 @set_marker_restricted_both(i64 %437, i64 %439, i64 0, i64 0)
  %440 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg549 = getelementptr inbounds %struct.window, %struct.window* %440, i32 0, i32 67
  %bf.load550 = load i16, i16* %start_at_line_beg549, align 4
  %bf.clear551 = and i16 %bf.load550, -17
  %bf.set552 = or i16 %bf.clear551, 16
  store i16 %bf.set552, i16* %start_at_line_beg549, align 4
  %441 = load %struct.window*, %struct.window** %w, align 8
  %dedicated553 = getelementptr inbounds %struct.window, %struct.window* %441, i32 0, i32 20
  %442 = load i64, i64* %dedicated553, align 8
  %call554 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp555 = icmp eq i64 %442, %call554
  br i1 %cmp555, label %if.end.559, label %if.then.557

if.then.557:                                      ; preds = %if.then.537
  %443 = load i64, i64* %window64, align 8
  %444 = load i64, i64* %dead_windows, align 8
  %call558 = call i64 @Fcons(i64 %443, i64 %444)
  store i64 %call558, i64* %dead_windows, align 8
  br label %if.end.559

if.end.559:                                       ; preds = %if.then.557, %if.then.537
  %445 = load %struct.window*, %struct.window** %w, align 8
  %call560 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_dedicated(%struct.window* %445, i64 %call560)
  br label %if.end.561

if.end.561:                                       ; preds = %if.end.559, %if.else.532
  br label %if.end.562

if.end.562:                                       ; preds = %if.end.561, %if.end.527
  br label %if.end.563

if.end.563:                                       ; preds = %if.end.562, %if.end.377
  br label %for.inc.564

for.inc.564:                                      ; preds = %if.end.563
  %446 = load i64, i64* %k, align 8
  %inc565 = add nsw i64 %446, 1
  store i64 %inc565, i64* %k, align 8
  br label %for.cond.161

for.end.566:                                      ; preds = %for.cond.161
  %447 = load %struct.frame*, %struct.frame** %f, align 8
  %448 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %root_window567 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %448, i32 0, i32 6
  %449 = load i64, i64* %root_window567, align 8
  call void @fset_root_window(%struct.frame* %447, i64 %449)
  %450 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window568 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %450, i32 0, i32 2
  %451 = load i64, i64* %current_window568, align 8
  %call569 = call %struct.window* @XWINDOW(i64 %451)
  %contents570 = getelementptr inbounds %struct.window, %struct.window* %call569, i32 0, i32 10
  %452 = load i64, i64* %contents570, align 8
  %453 = load i64, i64* %new_current_buffer, align 8
  %cmp571 = icmp eq i64 %452, %453
  br i1 %cmp571, label %if.then.573, label %if.end.582

if.then.573:                                      ; preds = %for.end.566
  %454 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window574 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %454, i32 0, i32 2
  %455 = load i64, i64* %current_window574, align 8
  %call575 = call %struct.window* @XWINDOW(i64 %455)
  %pointm576 = getelementptr inbounds %struct.window, %struct.window* %call575, i32 0, i32 12
  %456 = load i64, i64* %pointm576, align 8
  %457 = load i64, i64* %old_point, align 8
  %shl = shl i64 %457, 2
  %add577 = add i64 %shl, 2
  %458 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window578 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %458, i32 0, i32 2
  %459 = load i64, i64* %current_window578, align 8
  %call579 = call %struct.window* @XWINDOW(i64 %459)
  %contents580 = getelementptr inbounds %struct.window, %struct.window* %call579, i32 0, i32 10
  %460 = load i64, i64* %contents580, align 8
  %call581 = call i64 @set_marker_restricted(i64 %456, i64 %add577, i64 %460)
  br label %if.end.582

if.end.582:                                       ; preds = %if.then.573, %for.end.566
  %461 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window583 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %461, i32 0, i32 2
  %462 = load i64, i64* %current_window583, align 8
  %call584 = call i64 @builtin_lisp_symbol(i32 901)
  %call585 = call i64 @select_window(i64 %462, i64 %call584, i1 zeroext true)
  %463 = load i64, i64* @selected_window, align 8
  %464 = load i64, i64* @selected_window, align 8
  %call586 = call %struct.window* @XWINDOW(i64 %464)
  %contents587 = getelementptr inbounds %struct.window, %struct.window* %call586, i32 0, i32 10
  %465 = load i64, i64* %contents587, align 8
  %call588 = call %struct.buffer* @XBUFFER(i64 %465)
  %last_selected_window_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call588, i32 0, i32 51
  store i64 %463, i64* %last_selected_window_, align 8
  %466 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %focus_frame = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %466, i32 0, i32 7
  %467 = load i64, i64* %focus_frame, align 8
  %call589 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp590 = icmp eq i64 %467, %call589
  br i1 %cmp590, label %if.then.601, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.582
  %468 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %focus_frame592 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %468, i32 0, i32 7
  %469 = load i64, i64* %focus_frame592, align 8
  %call593 = call zeroext i1 @FRAMEP(i64 %469)
  br i1 %call593, label %land.lhs.true.595, label %if.end.604

land.lhs.true.595:                                ; preds = %lor.lhs.false
  %470 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %focus_frame596 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %470, i32 0, i32 7
  %471 = load i64, i64* %focus_frame596, align 8
  %sub597 = sub nsw i64 %471, 5
  %472 = inttoptr i64 %sub597 to i8*
  %473 = bitcast i8* %472 to %struct.frame*
  %terminal598 = getelementptr inbounds %struct.frame, %struct.frame* %473, i32 0, i32 61
  %474 = load %struct.terminal*, %struct.terminal** %terminal598, align 8
  %cmp599 = icmp ne %struct.terminal* %474, null
  br i1 %cmp599, label %if.then.601, label %if.end.604

if.then.601:                                      ; preds = %land.lhs.true.595, %if.end.582
  %475 = load i64, i64* %frame, align 8
  %476 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %focus_frame602 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %476, i32 0, i32 7
  %477 = load i64, i64* %focus_frame602, align 8
  %call603 = call i64 @Fredirect_frame_focus(i64 %475, i64 %477)
  br label %if.end.604

if.end.604:                                       ; preds = %if.then.601, %land.lhs.true.595, %lor.lhs.false
  store i64 0, i64* %i, align 8
  br label %for.cond.605

for.cond.605:                                     ; preds = %for.inc.617, %if.end.604
  %478 = load i64, i64* %i, align 8
  %479 = load i64, i64* %n_leaf_windows, align 8
  %cmp606 = icmp slt i64 %478, %479
  br i1 %cmp606, label %for.body.608, label %for.end.619

for.body.608:                                     ; preds = %for.cond.605
  %480 = load i64, i64* %i, align 8
  %481 = load %struct.window**, %struct.window*** %leaf_windows, align 8
  %arrayidx609 = getelementptr inbounds %struct.window*, %struct.window** %481, i64 %480
  %482 = load %struct.window*, %struct.window** %arrayidx609, align 8
  %contents610 = getelementptr inbounds %struct.window, %struct.window* %482, i32 0, i32 10
  %483 = load i64, i64* %contents610, align 8
  %call611 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp612 = icmp eq i64 %483, %call611
  br i1 %cmp612, label %if.then.614, label %if.end.616

if.then.614:                                      ; preds = %for.body.608
  %484 = load i64, i64* %i, align 8
  %485 = load %struct.window**, %struct.window*** %leaf_windows, align 8
  %arrayidx615 = getelementptr inbounds %struct.window*, %struct.window** %485, i64 %484
  %486 = load %struct.window*, %struct.window** %arrayidx615, align 8
  call void @free_window_matrices(%struct.window* %486)
  br label %if.end.616

if.end.616:                                       ; preds = %if.then.614, %for.body.608
  br label %for.inc.617

for.inc.617:                                      ; preds = %if.end.616
  %487 = load i64, i64* %i, align 8
  %inc618 = add nsw i64 %487, 1
  store i64 %inc618, i64* %i, align 8
  br label %for.cond.605

for.end.619:                                      ; preds = %for.cond.605
  %488 = load %struct.frame*, %struct.frame** %f, align 8
  %can_x_set_window_size620 = getelementptr inbounds %struct.frame, %struct.frame* %488, i32 0, i32 26
  %489 = bitcast i48* %can_x_set_window_size620 to i64*
  %bf.load621 = load i64, i64* %489, align 8
  %bf.clear622 = and i64 %bf.load621, -17179869185
  %bf.set623 = or i64 %bf.clear622, 17179869184
  store i64 %bf.set623, i64* %489, align 8
  %490 = load %struct.frame*, %struct.frame** %f, align 8
  %call624 = call i64 @builtin_lisp_symbol(i32 853)
  call void @adjust_frame_size(%struct.frame* %490, i32 -1, i32 -1, i32 1, i1 zeroext false, i64 %call624)
  %491 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %491)
  call void @unblock_input()
  br label %for.cond.625

for.cond.625:                                     ; preds = %for.inc.646, %for.end.619
  %492 = load i64, i64* %dead_windows, align 8
  %and626 = and i64 %492, 7
  %conv627 = trunc i64 %and626 to i32
  %cmp628 = icmp eq i32 %conv627, 3
  br i1 %cmp628, label %for.body.630, label %for.end.650

for.body.630:                                     ; preds = %for.cond.625
  %493 = load i64, i64* %dead_windows, align 8
  %sub631 = sub nsw i64 %493, 3
  %494 = inttoptr i64 %sub631 to i8*
  %495 = bitcast i8* %494 to %struct.Lisp_Cons*
  %car632 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %495, i32 0, i32 0
  %496 = load i64, i64* %car632, align 8
  store i64 %496, i64* %window64, align 8
  %497 = load i64, i64* %window64, align 8
  %call633 = call zeroext i1 @WINDOWP(i64 %497)
  br i1 %call633, label %land.lhs.true.635, label %if.end.645

land.lhs.true.635:                                ; preds = %for.body.630
  %498 = load i64, i64* %window64, align 8
  %call636 = call %struct.window* @XWINDOW(i64 %498)
  %contents637 = getelementptr inbounds %struct.window, %struct.window* %call636, i32 0, i32 10
  %499 = load i64, i64* %contents637, align 8
  %call638 = call zeroext i1 @BUFFERP(i64 %499)
  br i1 %call638, label %land.lhs.true.640, label %if.end.645

land.lhs.true.640:                                ; preds = %land.lhs.true.635
  %500 = load i64, i64* %window64, align 8
  %501 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window641 = getelementptr inbounds %struct.frame, %struct.frame* %501, i32 0, i32 5
  %502 = load i64, i64* %root_window641, align 8
  %cmp642 = icmp eq i64 %500, %502
  br i1 %cmp642, label %if.end.645, label %if.then.644

if.then.644:                                      ; preds = %land.lhs.true.640
  %503 = load i64, i64* %window64, align 8
  call void @delete_deletable_window(i64 %503)
  br label %if.end.645

if.end.645:                                       ; preds = %if.then.644, %land.lhs.true.640, %land.lhs.true.635, %for.body.630
  br label %for.inc.646

for.inc.646:                                      ; preds = %if.end.645
  %504 = load i64, i64* %dead_windows, align 8
  %sub647 = sub nsw i64 %504, 3
  %505 = inttoptr i64 %sub647 to i8*
  %506 = bitcast i8* %505 to %struct.Lisp_Cons*
  %u648 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %506, i32 0, i32 1
  %cdr649 = bitcast %union.anon.11* %u648 to i64*
  %507 = load i64, i64* %cdr649, align 8
  store i64 %507, i64* %dead_windows, align 8
  br label %for.cond.625

for.end.650:                                      ; preds = %for.cond.625
  %508 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window651 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %508, i32 0, i32 2
  %509 = load i64, i64* %current_window651, align 8
  %call652 = call i64 @builtin_lisp_symbol(i32 0)
  %call653 = call i64 @select_window(i64 %509, i64 %call652, i1 zeroext false)
  %510 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %selected_frame = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %510, i32 0, i32 1
  %511 = load i64, i64* %selected_frame, align 8
  %sub654 = sub nsw i64 %511, 5
  %512 = inttoptr i64 %sub654 to i8*
  %513 = bitcast i8* %512 to %struct.frame*
  %terminal655 = getelementptr inbounds %struct.frame, %struct.frame* %513, i32 0, i32 61
  %514 = load %struct.terminal*, %struct.terminal** %terminal655, align 8
  %cmp656 = icmp ne %struct.terminal* %514, null
  br i1 %cmp656, label %if.then.658, label %if.end.662

if.then.658:                                      ; preds = %for.end.650
  %515 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %selected_frame659 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %515, i32 0, i32 1
  %516 = load i64, i64* %selected_frame659, align 8
  %call660 = call i64 @builtin_lisp_symbol(i32 0)
  %call661 = call i64 @do_switch_frame(i64 %516, i32 0, i32 0, i64 %call660)
  br label %if.end.662

if.end.662:                                       ; preds = %if.then.658, %for.end.650
  %517 = load %struct.frame*, %struct.frame** %f, align 8
  call void @run_window_configuration_change_hook(%struct.frame* %517)
  br label %if.end.663

if.end.663:                                       ; preds = %if.end.662, %if.end.57
  %518 = load i64, i64* %new_current_buffer, align 8
  %call664 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp665 = icmp eq i64 %518, %call664
  br i1 %cmp665, label %if.end.679, label %if.then.667

if.then.667:                                      ; preds = %if.end.663
  %519 = load i64, i64* %new_current_buffer, align 8
  %call668 = call i64 @Fset_buffer(i64 %519)
  %520 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window669 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %520, i32 0, i32 2
  %521 = load i64, i64* %current_window669, align 8
  %call670 = call %struct.window* @XWINDOW(i64 %521)
  %contents671 = getelementptr inbounds %struct.window, %struct.window* %call670, i32 0, i32 10
  %522 = load i64, i64* %contents671, align 8
  %523 = load i64, i64* %new_current_buffer, align 8
  %cmp672 = icmp eq i64 %522, %523
  br i1 %cmp672, label %if.end.678, label %if.then.674

if.then.674:                                      ; preds = %if.then.667
  %524 = load i64, i64* %old_point, align 8
  %shl675 = shl i64 %524, 2
  %add676 = add i64 %shl675, 2
  %call677 = call i64 @Fgoto_char(i64 %add676)
  br label %if.end.678

if.end.678:                                       ; preds = %if.then.674, %if.then.667
  br label %if.end.679

if.end.679:                                       ; preds = %if.end.678, %if.end.663
  %525 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %minibuf_scroll_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %525, i32 0, i32 4
  %526 = load i64, i64* %minibuf_scroll_window, align 8
  store i64 %526, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  %527 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %minibuf_selected_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %527, i32 0, i32 5
  %528 = load i64, i64* %minibuf_selected_window, align 8
  store i64 %528, i64* @minibuf_selected_window, align 8
  br label %do.body.680

do.body.680:                                      ; preds = %if.end.679
  %529 = load i8, i8* %sa_must_free, align 1
  %tobool681 = trunc i8 %529 to i1
  br i1 %tobool681, label %if.then.682, label %if.end.685

if.then.682:                                      ; preds = %do.body.680
  store i8 0, i8* %sa_must_free, align 1
  %530 = load i64, i64* %sa_count, align 8
  %call683 = call i64 @builtin_lisp_symbol(i32 0)
  %call684 = call i64 @unbind_to(i64 %530, i64 %call683)
  br label %if.end.685

if.end.685:                                       ; preds = %if.then.682, %do.body.680
  br label %do.end.686

do.end.686:                                       ; preds = %if.end.685
  %531 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal687 = getelementptr inbounds %struct.frame, %struct.frame* %531, i32 0, i32 61
  %532 = load %struct.terminal*, %struct.terminal** %terminal687, align 8
  %cmp688 = icmp ne %struct.terminal* %532, null
  br i1 %cmp688, label %cond.true.690, label %cond.false.692

cond.true.690:                                    ; preds = %do.end.686
  %call691 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.694

cond.false.692:                                   ; preds = %do.end.686
  %call693 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.694

cond.end.694:                                     ; preds = %cond.false.692, %cond.true.690
  %cond695 = phi i64 [ %call691, %cond.true.690 ], [ %call693, %cond.false.692 ]
  ret i64 %cond695
}

; Function Attrs: nounwind uwtable
define internal i64 @count_windows(%struct.window* %window) #0 {
entry:
  %window.addr = alloca %struct.window*, align 8
  %count = alloca i64, align 8
  store %struct.window* %window, %struct.window** %window.addr, align 8
  store i64 1, i64* %count, align 8
  %0 = load %struct.window*, %struct.window** %window.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 2
  %1 = load i64, i64* %next, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %window.addr, align 8
  %next1 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 2
  %3 = load i64, i64* %next1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %3)
  %call3 = call i64 @count_windows(%struct.window* %call2)
  %4 = load i64, i64* %count, align 8
  %add = add nsw i64 %4, %call3
  store i64 %add, i64* %count, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.window*, %struct.window** %window.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call4 = call zeroext i1 @WINDOWP(i64 %6)
  br i1 %call4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %if.end
  %7 = load %struct.window*, %struct.window** %window.addr, align 8
  %contents6 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 10
  %8 = load i64, i64* %contents6, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %8)
  %call8 = call i64 @count_windows(%struct.window* %call7)
  %9 = load i64, i64* %count, align 8
  %add9 = add nsw i64 %9, %call8
  store i64 %add9, i64* %count, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.5, %if.end
  %10 = load i64, i64* %count, align 8
  ret i64 %10
}

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define internal i64 @get_leaf_windows(%struct.window* %w, %struct.window** %flat, i64 %i) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %flat.addr = alloca %struct.window**, align 8
  %i.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.window** %flat, %struct.window*** %flat.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %5 = load %struct.window**, %struct.window*** %flat.addr, align 8
  %6 = load i64, i64* %i.addr, align 8
  %call3 = call i64 @get_leaf_windows(%struct.window* %call2, %struct.window** %5, i64 %6)
  store i64 %call3, i64* %i.addr, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %8 = load i64, i64* %i.addr, align 8
  %inc = add nsw i64 %8, 1
  store i64 %inc, i64* %i.addr, align 8
  %9 = load %struct.window**, %struct.window*** %flat.addr, align 8
  %arrayidx = getelementptr inbounds %struct.window*, %struct.window** %9, i64 %8
  store %struct.window* %7, %struct.window** %arrayidx, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 2
  %11 = load i64, i64* %next, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %next5 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 2
  %13 = load i64, i64* %next5, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %13)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call6, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i64, i64* %i.addr, align 8
  ret i64 %14
}

declare i64 @other_buffer_safely(i64) #1

declare void @fset_root_window(%struct.frame*, i64) #1

declare i64 @Fredirect_frame_focus(i64, i64) #1

declare void @adjust_frame_size(%struct.frame*, i32, i32, i32, i1 zeroext, i64) #1

; Function Attrs: nounwind uwtable
define internal void @delete_deletable_window(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 1022)
  %0 = load i64, i64* %window.addr, align 8
  %call1 = call i64 @call1(i64 %call, i64 %0)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call1, %call2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 338)
  %1 = load i64, i64* %window.addr, align 8
  %call4 = call i64 @call1(i64 %call3, i64 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @do_switch_frame(i64, i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define void @restore_window_configuration(i64 %configuration) #0 {
entry:
  %configuration.addr = alloca i64, align 8
  store i64 %configuration, i64* %configuration.addr, align 8
  %0 = load i64, i64* %configuration.addr, align 8
  %call = call i64 @Fset_window_configuration(i64 %0)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.glyph* @get_phys_cursor_glyph(%struct.window* %w) #0 {
entry:
  %retval = alloca %struct.glyph*, align 8
  %w.addr = alloca %struct.window*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %hpos = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 50
  %hpos1 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor, i32 0, i32 2
  %1 = load i32, i32* %hpos1, align 4
  store i32 %1, i32* %hpos, align 4
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor2 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 50
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor2, i32 0, i32 3
  %3 = load i32, i32* %vpos, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor3 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 50
  %vpos4 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor3, i32 0, i32 3
  %5 = load i32, i32* %vpos4, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 24
  %7 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %7, i32 0, i32 3
  %8 = load i32, i32* %nrows, align 4
  %cmp5 = icmp slt i32 %5, %8
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  store %struct.glyph* null, %struct.glyph** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix6 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 24
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix6, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %10, i32 0, i32 1
  %11 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor7 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 50
  %vpos8 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor7, i32 0, i32 3
  %13 = load i32, i32* %vpos8, align 4
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %11, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 22
  %15 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %15, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end
  store %struct.glyph* null, %struct.glyph** %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 38
  %17 = load i64, i64* %hscroll, align 8
  %tobool = icmp ne i64 %17, 0
  br i1 %tobool, label %if.then.11, label %if.end.33

if.then.11:                                       ; preds = %if.end.10
  %18 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 22
  %19 = bitcast i40* %reversed_p to i64*
  %bf.load12 = load i64, i64* %19, align 4
  %bf.lshr13 = lshr i64 %bf.load12, 34
  %bf.clear14 = and i64 %bf.lshr13, 1
  %bf.cast15 = trunc i64 %bf.clear14 to i1
  br i1 %bf.cast15, label %if.end.19, label %land.lhs.true.16

land.lhs.true.16:                                 ; preds = %if.then.11
  %20 = load i32, i32* %hpos, align 4
  %cmp17 = icmp slt i32 %20, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true.16
  store i32 0, i32* %hpos, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %land.lhs.true.16, %if.then.11
  %21 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %reversed_p20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 22
  %22 = bitcast i40* %reversed_p20 to i64*
  %bf.load21 = load i64, i64* %22, align 4
  %bf.lshr22 = lshr i64 %bf.load21, 34
  %bf.clear23 = and i64 %bf.lshr22, 1
  %bf.cast24 = trunc i64 %bf.clear23 to i1
  br i1 %bf.cast24, label %land.lhs.true.25, label %if.end.32

land.lhs.true.25:                                 ; preds = %if.end.19
  %23 = load i32, i32* %hpos, align 4
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %25 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %25 to i32
  %cmp26 = icmp sge i32 %23, %conv
  br i1 %cmp26, label %if.then.28, label %if.end.32

if.then.28:                                       ; preds = %land.lhs.true.25
  %26 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [4 x i16], [4 x i16]* %used29, i32 0, i64 1
  %27 = load i16, i16* %arrayidx30, align 2
  %conv31 = sext i16 %27 to i32
  %sub = sub nsw i32 %conv31, 1
  store i32 %sub, i32* %hpos, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.28, %land.lhs.true.25, %if.end.19
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.10
  %28 = load i32, i32* %hpos, align 4
  %cmp34 = icmp sle i32 0, %28
  br i1 %cmp34, label %land.lhs.true.36, label %if.else

land.lhs.true.36:                                 ; preds = %if.end.33
  %29 = load i32, i32* %hpos, align 4
  %30 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [4 x i16], [4 x i16]* %used37, i32 0, i64 1
  %31 = load i16, i16* %arrayidx38, align 2
  %conv39 = sext i16 %31 to i32
  %cmp40 = icmp slt i32 %29, %conv39
  br i1 %cmp40, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %land.lhs.true.36
  %32 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %32, i32 0, i32 0
  %arrayidx43 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %33 = load %struct.glyph*, %struct.glyph** %arrayidx43, align 8
  %34 = load i32, i32* %hpos, align 4
  %idx.ext44 = sext i32 %34 to i64
  %add.ptr45 = getelementptr inbounds %struct.glyph, %struct.glyph* %33, i64 %idx.ext44
  store %struct.glyph* %add.ptr45, %struct.glyph** %glyph, align 8
  br label %if.end.46

if.else:                                          ; preds = %land.lhs.true.36, %if.end.33
  store %struct.glyph* null, %struct.glyph** %glyph, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.else, %if.then.42
  %35 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  store %struct.glyph* %35, %struct.glyph** %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then.9, %if.then
  %36 = load %struct.glyph*, %struct.glyph** %retval
  ret %struct.glyph* %36
}

; Function Attrs: nounwind uwtable
define i64 @Fcurrent_window_configuration(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %tem = alloca i64, align 8
  %i = alloca i64, align 8
  %n_windows = alloca i64, align 8
  %data = alloca %struct.save_window_data*, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 5
  %2 = load i64, i64* %root_window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %2)
  %call2 = call i64 @count_windows(%struct.window* %call1)
  store i64 %call2, i64* %n_windows, align 8
  %call3 = call %struct.Lisp_Vector* @allocate_pseudovector(i32 12, i32 8, i32 8, i32 9)
  %3 = bitcast %struct.Lisp_Vector* %call3 to %struct.save_window_data*
  store %struct.save_window_data* %3, %struct.save_window_data** %data, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 36
  %5 = load i32, i32* %text_cols, align 4
  %6 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_cols = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %6, i32 0, i32 9
  store i32 %5, i32* %frame_cols, align 4
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 37
  %8 = load i32, i32* %text_lines, align 4
  %9 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_lines = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %9, i32 0, i32 10
  store i32 %8, i32* %frame_lines, align 4
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 57
  %11 = load i32, i32* %menu_bar_lines, align 4
  %12 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_menu_bar_lines = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %12, i32 0, i32 11
  store i32 %11, i32* %frame_menu_bar_lines, align 4
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 27
  %14 = load i32, i32* %tool_bar_lines, align 4
  %15 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_tool_bar_lines = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %15, i32 0, i32 12
  store i32 %14, i32* %frame_tool_bar_lines, align 4
  %16 = load %struct.frame*, %struct.frame** %f, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 40
  %17 = load i32, i32* %text_width, align 4
  %18 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_text_width = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %18, i32 0, i32 13
  store i32 %17, i32* %frame_text_width, align 4
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 41
  %20 = load i32, i32* %text_height, align 4
  %21 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_text_height = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %21, i32 0, i32 14
  store i32 %20, i32* %frame_text_height, align 4
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 58
  %23 = load i32, i32* %menu_bar_height, align 4
  %24 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_menu_bar_height = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %24, i32 0, i32 15
  store i32 %23, i32* %frame_menu_bar_height, align 4
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 28
  %26 = load i32, i32* %tool_bar_height, align 4
  %27 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %frame_tool_bar_height = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %27, i32 0, i32 16
  store i32 %26, i32* %frame_tool_bar_height, align 4
  %28 = load i64, i64* @selected_frame, align 8
  %29 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %selected_frame = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %29, i32 0, i32 1
  store i64 %28, i64* %selected_frame, align 8
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 6
  %31 = load i64, i64* %selected_window, align 8
  %32 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %32, i32 0, i32 2
  store i64 %31, i64* %current_window, align 8
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %34 = bitcast %struct.buffer* %33 to i8*
  %call4 = call i64 @make_lisp_ptr(i8* %34, i32 5)
  %35 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %current_buffer = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %35, i32 0, i32 3
  store i64 %call4, i64* %current_buffer, align 8
  %36 = load i64, i64* @minibuf_level, align 8
  %cmp = icmp sgt i64 %36, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %37 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %37, %cond.true ], [ %call5, %cond.false ]
  %38 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %minibuf_scroll_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %38, i32 0, i32 4
  store i64 %cond, i64* %minibuf_scroll_window, align 8
  %39 = load i64, i64* @minibuf_level, align 8
  %cmp6 = icmp sgt i64 %39, 0
  br i1 %cmp6, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.end
  %40 = load i64, i64* @minibuf_selected_window, align 8
  br label %cond.end.10

cond.false.8:                                     ; preds = %cond.end
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.8, %cond.true.7
  %cond11 = phi i64 [ %40, %cond.true.7 ], [ %call9, %cond.false.8 ]
  %41 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %minibuf_selected_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %41, i32 0, i32 5
  store i64 %cond11, i64* %minibuf_selected_window, align 8
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window12 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 5
  %43 = load i64, i64* %root_window12, align 8
  %44 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %root_window13 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %44, i32 0, i32 6
  store i64 %43, i64* %root_window13, align 8
  %45 = load %struct.frame*, %struct.frame** %f, align 8
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 4
  %46 = load i64, i64* %focus_frame, align 8
  %47 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %focus_frame14 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %47, i32 0, i32 7
  store i64 %46, i64* %focus_frame14, align 8
  %48 = load i64, i64* %n_windows, align 8
  %call15 = call i64 @make_uninit_vector(i64 %48)
  store i64 %call15, i64* %tem, align 8
  %49 = load i64, i64* %tem, align 8
  %50 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %saved_windows = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %50, i32 0, i32 8
  store i64 %49, i64* %saved_windows, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.10
  %51 = load i64, i64* %i, align 8
  %52 = load i64, i64* %n_windows, align 8
  %cmp16 = icmp slt i64 %51, %52
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %53 = load i64, i64* %tem, align 8
  %54 = load i64, i64* %i, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %call18 = call i64 @Fmake_vector(i64 142, i64 %call17)
  call void @ASET(i64 %53, i64 %54, i64 %call18)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %55 = load i64, i64* %i, align 8
  %inc = add nsw i64 %55, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %56 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window19 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 5
  %57 = load i64, i64* %root_window19, align 8
  %58 = load i64, i64* %tem, align 8
  %call20 = call %struct.Lisp_Vector* @XVECTOR(i64 %58)
  %call21 = call i64 @save_window_save(i64 %57, %struct.Lisp_Vector* %call20, i64 0)
  %59 = load %struct.save_window_data*, %struct.save_window_data** %data, align 8
  %60 = bitcast %struct.save_window_data* %59 to i8*
  %call22 = call i64 @make_lisp_ptr(i8* %60, i32 5)
  store i64 %call22, i64* %tem, align 8
  %61 = load i64, i64* %tem, align 8
  ret i64 %61
}

declare %struct.Lisp_Vector* @allocate_pseudovector(i32, i32, i32, i32) #1

declare i64 @make_uninit_vector(i64) #1

declare void @ASET(i64, i64, i64) #1

declare i64 @Fmake_vector(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @save_window_save(i64 %window, %struct.Lisp_Vector* %vector, i64 %i) #0 {
entry:
  %window.addr = alloca i64, align 8
  %vector.addr = alloca %struct.Lisp_Vector*, align 8
  %i.addr = alloca i64, align 8
  %p = alloca %struct.saved_window*, align 8
  %w = alloca %struct.window*, align 8
  %tem = alloca i64, align 8
  %pers = alloca i64, align 8
  %par = alloca i64, align 8
  %tortoise = alloca i64, align 8
  %hare = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store %struct.Lisp_Vector* %vector, %struct.Lisp_Vector** %vector.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.315, %entry
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end.316

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %i.addr, align 8
  %2 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %vector.addr, align 8
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 %1
  %3 = load i64, i64* %arrayidx, align 8
  %call1 = call %struct.Lisp_Vector* @XVECTOR(i64 %3)
  %4 = bitcast %struct.Lisp_Vector* %call1 to %struct.saved_window*
  store %struct.saved_window* %4, %struct.saved_window** %p, align 8
  %5 = load i64, i64* %window.addr, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %5)
  store %struct.window* %call2, %struct.window** %w, align 8
  %6 = load %struct.window*, %struct.window** %w, align 8
  %7 = load i64, i64* %i.addr, align 8
  %shl = shl i64 %7, 2
  %add = add i64 %shl, 2
  call void @wset_temslot(%struct.window* %6, i64 %add)
  %8 = load i64, i64* %i.addr, align 8
  %inc = add nsw i64 %8, 1
  store i64 %inc, i64* %i.addr, align 8
  %9 = load i64, i64* %window.addr, align 8
  %10 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window3 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %10, i32 0, i32 1
  store i64 %9, i64* %window3, align 8
  %11 = load %struct.window*, %struct.window** %w, align 8
  %contents4 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 10
  %12 = load i64, i64* %contents4, align 8
  %call5 = call zeroext i1 @BUFFERP(i64 %12)
  br i1 %call5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load %struct.window*, %struct.window** %w, align 8
  %contents6 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 10
  %14 = load i64, i64* %contents6, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %call7, %cond.false ]
  %15 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %buffer = getelementptr inbounds %struct.saved_window, %struct.saved_window* %15, i32 0, i32 2
  store i64 %cond, i64* %buffer, align 8
  %16 = load %struct.window*, %struct.window** %w, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 30
  %17 = load i32, i32* %pixel_left, align 4
  %conv = sext i32 %17 to i64
  %shl8 = shl i64 %conv, 2
  %add9 = add i64 %shl8, 2
  %18 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_left10 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %18, i32 0, i32 6
  store i64 %add9, i64* %pixel_left10, align 8
  %19 = load %struct.window*, %struct.window** %w, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 31
  %20 = load i32, i32* %pixel_top, align 4
  %conv11 = sext i32 %20 to i64
  %shl12 = shl i64 %conv11, 2
  %add13 = add i64 %shl12, 2
  %21 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_top14 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %21, i32 0, i32 7
  store i64 %add13, i64* %pixel_top14, align 8
  %22 = load %struct.window*, %struct.window** %w, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 34
  %23 = load i32, i32* %pixel_width, align 4
  %conv15 = sext i32 %23 to i64
  %shl16 = shl i64 %conv15, 2
  %add17 = add i64 %shl16, 2
  %24 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_width18 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %24, i32 0, i32 9
  store i64 %add17, i64* %pixel_width18, align 8
  %25 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 35
  %26 = load i32, i32* %pixel_height, align 4
  %conv19 = sext i32 %26 to i64
  %shl20 = shl i64 %conv19, 2
  %add21 = add i64 %shl20, 2
  %27 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pixel_height22 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %27, i32 0, i32 8
  store i64 %add21, i64* %pixel_height22, align 8
  %28 = load %struct.window*, %struct.window** %w, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 32
  %29 = load i32, i32* %left_col, align 4
  %conv23 = sext i32 %29 to i64
  %shl24 = shl i64 %conv23, 2
  %add25 = add i64 %shl24, 2
  %30 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_col26 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %30, i32 0, i32 10
  store i64 %add25, i64* %left_col26, align 8
  %31 = load %struct.window*, %struct.window** %w, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 33
  %32 = load i32, i32* %top_line, align 4
  %conv27 = sext i32 %32 to i64
  %shl28 = shl i64 %conv27, 2
  %add29 = add i64 %shl28, 2
  %33 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %top_line30 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %33, i32 0, i32 11
  store i64 %add29, i64* %top_line30, align 8
  %34 = load %struct.window*, %struct.window** %w, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 36
  %35 = load i32, i32* %total_cols, align 4
  %conv31 = sext i32 %35 to i64
  %shl32 = shl i64 %conv31, 2
  %add33 = add i64 %shl32, 2
  %36 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %total_cols34 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %36, i32 0, i32 12
  store i64 %add33, i64* %total_cols34, align 8
  %37 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 37
  %38 = load i32, i32* %total_lines, align 4
  %conv35 = sext i32 %38 to i64
  %shl36 = shl i64 %conv35, 2
  %add37 = add i64 %shl36, 2
  %39 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %total_lines38 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %39, i32 0, i32 13
  store i64 %add37, i64* %total_lines38, align 8
  %40 = load %struct.window*, %struct.window** %w, align 8
  %normal_cols = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 6
  %41 = load i64, i64* %normal_cols, align 8
  %42 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %normal_cols39 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %42, i32 0, i32 14
  store i64 %41, i64* %normal_cols39, align 8
  %43 = load %struct.window*, %struct.window** %w, align 8
  %normal_lines = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 5
  %44 = load i64, i64* %normal_lines, align 8
  %45 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %normal_lines40 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %45, i32 0, i32 15
  store i64 %44, i64* %normal_lines40, align 8
  %46 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 38
  %47 = load i64, i64* %hscroll, align 8
  %call41 = call i64 @make_natnum(i64 %47)
  %48 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %hscroll42 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %48, i32 0, i32 16
  store i64 %call41, i64* %hscroll42, align 8
  %49 = load %struct.window*, %struct.window** %w, align 8
  %suspend_auto_hscroll = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 67
  %bf.load = load i16, i16* %suspend_auto_hscroll, align 4
  %bf.lshr = lshr i16 %bf.load, 15
  %bf.cast = trunc i16 %bf.lshr to i1
  br i1 %bf.cast, label %cond.true.44, label %cond.false.46

cond.true.44:                                     ; preds = %cond.end
  %call45 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.48

cond.false.46:                                    ; preds = %cond.end
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.46, %cond.true.44
  %cond49 = phi i64 [ %call45, %cond.true.44 ], [ %call47, %cond.false.46 ]
  %50 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %suspend_auto_hscroll50 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %50, i32 0, i32 19
  store i64 %cond49, i64* %suspend_auto_hscroll50, align 8
  %51 = load %struct.window*, %struct.window** %w, align 8
  %min_hscroll = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 39
  %52 = load i64, i64* %min_hscroll, align 8
  %call51 = call i64 @make_natnum(i64 %52)
  %53 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %min_hscroll52 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %53, i32 0, i32 17
  store i64 %call51, i64* %min_hscroll52, align 8
  %54 = load %struct.window*, %struct.window** %w, align 8
  %hscroll_whole = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 40
  %55 = load i64, i64* %hscroll_whole, align 8
  %call53 = call i64 @make_natnum(i64 %55)
  %56 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %hscroll_whole54 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %56, i32 0, i32 18
  store i64 %call53, i64* %hscroll_whole54, align 8
  %57 = load %struct.window*, %struct.window** %w, align 8
  %display_table = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 19
  %58 = load i64, i64* %display_table, align 8
  %59 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %display_table55 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %59, i32 0, i32 23
  store i64 %58, i64* %display_table55, align 8
  %60 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 59
  %61 = load i32, i32* %left_margin_cols, align 4
  %conv56 = sext i32 %61 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  %62 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_margin_cols59 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %62, i32 0, i32 24
  store i64 %add58, i64* %left_margin_cols59, align 8
  %63 = load %struct.window*, %struct.window** %w, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 60
  %64 = load i32, i32* %right_margin_cols, align 4
  %conv60 = sext i32 %64 to i64
  %shl61 = shl i64 %conv60, 2
  %add62 = add i64 %shl61, 2
  %65 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %right_margin_cols63 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %65, i32 0, i32 25
  store i64 %add62, i64* %right_margin_cols63, align 8
  %66 = load %struct.window*, %struct.window** %w, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 57
  %67 = load i32, i32* %left_fringe_width, align 4
  %conv64 = sext i32 %67 to i64
  %shl65 = shl i64 %conv64, 2
  %add66 = add i64 %shl65, 2
  %68 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %left_fringe_width67 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %68, i32 0, i32 26
  store i64 %add66, i64* %left_fringe_width67, align 8
  %69 = load %struct.window*, %struct.window** %w, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 58
  %70 = load i32, i32* %right_fringe_width, align 4
  %conv68 = sext i32 %70 to i64
  %shl69 = shl i64 %conv68, 2
  %add70 = add i64 %shl69, 2
  %71 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %right_fringe_width71 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %71, i32 0, i32 27
  store i64 %add70, i64* %right_fringe_width71, align 8
  %72 = load %struct.window*, %struct.window** %w, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 67
  %bf.load72 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr73 = lshr i16 %bf.load72, 12
  %bf.clear = and i16 %bf.lshr73, 1
  %bf.cast74 = trunc i16 %bf.clear to i1
  br i1 %bf.cast74, label %cond.true.76, label %cond.false.78

cond.true.76:                                     ; preds = %cond.end.48
  %call77 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.80

cond.false.78:                                    ; preds = %cond.end.48
  %call79 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.78, %cond.true.76
  %cond81 = phi i64 [ %call77, %cond.true.76 ], [ %call79, %cond.false.78 ]
  %73 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %fringes_outside_margins82 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %73, i32 0, i32 28
  store i64 %cond81, i64* %fringes_outside_margins82, align 8
  %74 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 61
  %75 = load i32, i32* %scroll_bar_width, align 4
  %conv83 = sext i32 %75 to i64
  %shl84 = shl i64 %conv83, 2
  %add85 = add i64 %shl84, 2
  %76 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %scroll_bar_width86 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %76, i32 0, i32 29
  store i64 %add85, i64* %scroll_bar_width86, align 8
  %77 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 62
  %78 = load i32, i32* %scroll_bar_height, align 4
  %conv87 = sext i32 %78 to i64
  %shl88 = shl i64 %conv87, 2
  %add89 = add i64 %shl88, 2
  %79 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %scroll_bar_height90 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %79, i32 0, i32 32
  store i64 %add89, i64* %scroll_bar_height90, align 8
  %80 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 16
  %81 = load i64, i64* %vertical_scroll_bar_type, align 8
  %82 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %vertical_scroll_bar_type91 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %82, i32 0, i32 30
  store i64 %81, i64* %vertical_scroll_bar_type91, align 8
  %83 = load %struct.window*, %struct.window** %w, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 18
  %84 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %85 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %horizontal_scroll_bar_type92 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %85, i32 0, i32 33
  store i64 %84, i64* %horizontal_scroll_bar_type92, align 8
  %86 = load %struct.window*, %struct.window** %w, align 8
  %dedicated = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 20
  %87 = load i64, i64* %dedicated, align 8
  %88 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %dedicated93 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %88, i32 0, i32 31
  store i64 %87, i64* %dedicated93, align 8
  %89 = load %struct.window*, %struct.window** %w, align 8
  %combination_limit = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 22
  %90 = load i64, i64* %combination_limit, align 8
  %91 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %combination_limit94 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %91, i32 0, i32 34
  store i64 %90, i64* %combination_limit94, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %92 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters = getelementptr inbounds %struct.saved_window, %struct.saved_window* %92, i32 0, i32 35
  store i64 %call95, i64* %window_parameters, align 8
  %93 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330), align 8
  %call96 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp97 = icmp eq i64 %93, %call96
  br i1 %cmp97, label %if.end.165, label %if.then

if.then:                                          ; preds = %cond.end.80
  %94 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330), align 8
  store i64 %94, i64* %tortoise, align 8
  store i64 %94, i64* %hare, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.117, %if.then
  %95 = load i64, i64* %hare, align 8
  %and = and i64 %95, 7
  %conv99 = trunc i64 %and to i32
  %cmp100 = icmp eq i32 %conv99, 3
  br i1 %cmp100, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %96 = load i64, i64* %hare, align 8
  %sub = sub nsw i64 %96, 3
  %97 = inttoptr i64 %sub to i8*
  %98 = bitcast i8* %97 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %98, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %99 = load i64, i64* %cdr, align 8
  store i64 %99, i64* %hare, align 8
  %100 = load i64, i64* %hare, align 8
  %and102 = and i64 %100, 7
  %conv103 = trunc i64 %and102 to i32
  %cmp104 = icmp eq i32 %conv103, 3
  br i1 %cmp104, label %if.end, label %if.then.106

if.then.106:                                      ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %101 = load i64, i64* %hare, align 8
  %sub107 = sub nsw i64 %101, 3
  %102 = inttoptr i64 %sub107 to i8*
  %103 = bitcast i8* %102 to %struct.Lisp_Cons*
  %u108 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %103, i32 0, i32 1
  %cdr109 = bitcast %union.anon.11* %u108 to i64*
  %104 = load i64, i64* %cdr109, align 8
  store i64 %104, i64* %hare, align 8
  %105 = load i64, i64* %tortoise, align 8
  %sub110 = sub nsw i64 %105, 3
  %106 = inttoptr i64 %sub110 to i8*
  %107 = bitcast i8* %106 to %struct.Lisp_Cons*
  %u111 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %107, i32 0, i32 1
  %cdr112 = bitcast %union.anon.11* %u111 to i64*
  %108 = load i64, i64* %cdr112, align 8
  store i64 %108, i64* %tortoise, align 8
  %109 = load i64, i64* %hare, align 8
  %110 = load i64, i64* %tortoise, align 8
  %cmp113 = icmp eq i64 %109, %110
  br i1 %cmp113, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %if.end
  %call116 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call116, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330), align 8
  br label %while.end

if.end.117:                                       ; preds = %if.end
  br label %while.cond

while.end:                                        ; preds = %if.then.115, %if.then.106, %while.cond
  %111 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330), align 8
  store i64 %111, i64* %tem, align 8
  br label %for.cond.118

for.cond.118:                                     ; preds = %for.inc, %while.end
  %112 = load i64, i64* %tem, align 8
  %and119 = and i64 %112, 7
  %conv120 = trunc i64 %and119 to i32
  %cmp121 = icmp eq i32 %conv120, 3
  br i1 %cmp121, label %for.body.123, label %for.end

for.body.123:                                     ; preds = %for.cond.118
  %113 = load i64, i64* %tem, align 8
  %sub124 = sub nsw i64 %113, 3
  %114 = inttoptr i64 %sub124 to i8*
  %115 = bitcast i8* %114 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %115, i32 0, i32 0
  %116 = load i64, i64* %car, align 8
  store i64 %116, i64* %pers, align 8
  %117 = load i64, i64* %pers, align 8
  %and125 = and i64 %117, 7
  %conv126 = trunc i64 %and125 to i32
  %cmp127 = icmp eq i32 %conv126, 3
  br i1 %cmp127, label %land.lhs.true, label %if.end.161

land.lhs.true:                                    ; preds = %for.body.123
  %118 = load i64, i64* %pers, align 8
  %sub129 = sub nsw i64 %118, 3
  %119 = inttoptr i64 %sub129 to i8*
  %120 = bitcast i8* %119 to %struct.Lisp_Cons*
  %u130 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %120, i32 0, i32 1
  %cdr131 = bitcast %union.anon.11* %u130 to i64*
  %121 = load i64, i64* %cdr131, align 8
  %call132 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp133 = icmp eq i64 %121, %call132
  br i1 %cmp133, label %if.end.161, label %if.then.135

if.then.135:                                      ; preds = %land.lhs.true
  %122 = load i64, i64* %pers, align 8
  %sub136 = sub nsw i64 %122, 3
  %123 = inttoptr i64 %sub136 to i8*
  %124 = bitcast i8* %123 to %struct.Lisp_Cons*
  %car137 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %124, i32 0, i32 0
  %125 = load i64, i64* %car137, align 8
  %126 = load %struct.window*, %struct.window** %w, align 8
  %window_parameters138 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 23
  %127 = load i64, i64* %window_parameters138, align 8
  %call139 = call i64 @Fassq(i64 %125, i64 %127)
  store i64 %call139, i64* %par, align 8
  %128 = load i64, i64* %par, align 8
  %call140 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp141 = icmp eq i64 %128, %call140
  br i1 %cmp141, label %if.then.143, label %if.else

if.then.143:                                      ; preds = %if.then.135
  %129 = load i64, i64* %pers, align 8
  %sub144 = sub nsw i64 %129, 3
  %130 = inttoptr i64 %sub144 to i8*
  %131 = bitcast i8* %130 to %struct.Lisp_Cons*
  %car145 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %131, i32 0, i32 0
  %132 = load i64, i64* %car145, align 8
  %call146 = call i64 @builtin_lisp_symbol(i32 0)
  %call147 = call i64 @Fcons(i64 %132, i64 %call146)
  %133 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters148 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %133, i32 0, i32 35
  %134 = load i64, i64* %window_parameters148, align 8
  %call149 = call i64 @Fcons(i64 %call147, i64 %134)
  %135 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters150 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %135, i32 0, i32 35
  store i64 %call149, i64* %window_parameters150, align 8
  br label %if.end.160

if.else:                                          ; preds = %if.then.135
  %136 = load i64, i64* %par, align 8
  %sub151 = sub nsw i64 %136, 3
  %137 = inttoptr i64 %sub151 to i8*
  %138 = bitcast i8* %137 to %struct.Lisp_Cons*
  %car152 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %138, i32 0, i32 0
  %139 = load i64, i64* %car152, align 8
  %140 = load i64, i64* %par, align 8
  %sub153 = sub nsw i64 %140, 3
  %141 = inttoptr i64 %sub153 to i8*
  %142 = bitcast i8* %141 to %struct.Lisp_Cons*
  %u154 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %142, i32 0, i32 1
  %cdr155 = bitcast %union.anon.11* %u154 to i64*
  %143 = load i64, i64* %cdr155, align 8
  %call156 = call i64 @Fcons(i64 %139, i64 %143)
  %144 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters157 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %144, i32 0, i32 35
  %145 = load i64, i64* %window_parameters157, align 8
  %call158 = call i64 @Fcons(i64 %call156, i64 %145)
  %146 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %window_parameters159 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %146, i32 0, i32 35
  store i64 %call158, i64* %window_parameters159, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.else, %if.then.143
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %land.lhs.true, %for.body.123
  br label %for.inc

for.inc:                                          ; preds = %if.end.161
  %147 = load i64, i64* %tem, align 8
  %sub162 = sub nsw i64 %147, 3
  %148 = inttoptr i64 %sub162 to i8*
  %149 = bitcast i8* %148 to %struct.Lisp_Cons*
  %u163 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %149, i32 0, i32 1
  %cdr164 = bitcast %union.anon.11* %u163 to i64*
  %150 = load i64, i64* %cdr164, align 8
  store i64 %150, i64* %tem, align 8
  br label %for.cond.118

for.end:                                          ; preds = %for.cond.118
  br label %if.end.165

if.end.165:                                       ; preds = %for.end, %cond.end.80
  %151 = load %struct.window*, %struct.window** %w, align 8
  %contents166 = getelementptr inbounds %struct.window, %struct.window* %151, i32 0, i32 10
  %152 = load i64, i64* %contents166, align 8
  %call167 = call zeroext i1 @BUFFERP(i64 %152)
  br i1 %call167, label %if.then.168, label %if.else.276

if.then.168:                                      ; preds = %if.end.165
  %153 = load i64, i64* %window.addr, align 8
  %154 = load i64, i64* @selected_window, align 8
  %cmp169 = icmp eq i64 %153, %154
  br i1 %cmp169, label %if.then.171, label %if.else.226

if.then.171:                                      ; preds = %if.then.168
  %155 = load %struct.window*, %struct.window** %w, align 8
  %contents172 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 10
  %156 = load i64, i64* %contents172, align 8
  %call173 = call %struct.buffer* @XBUFFER(i64 %156)
  %157 = load %struct.window*, %struct.window** %w, align 8
  %contents174 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 10
  %158 = load i64, i64* %contents174, align 8
  %call175 = call %struct.buffer* @XBUFFER(i64 %158)
  %159 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp176 = icmp eq %struct.buffer* %call175, %159
  br i1 %cmp176, label %cond.true.178, label %cond.false.180

cond.true.178:                                    ; preds = %if.then.171
  %160 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %160, i32 0, i32 75
  %161 = load i64, i64* %pt, align 8
  %add179 = add nsw i64 %161, 0
  br label %cond.end.197

cond.false.180:                                   ; preds = %if.then.171
  %162 = load %struct.window*, %struct.window** %w, align 8
  %contents181 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 10
  %163 = load i64, i64* %contents181, align 8
  %call182 = call %struct.buffer* @XBUFFER(i64 %163)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call182, i32 0, i32 45
  %164 = load i64, i64* %pt_marker_, align 8
  %call183 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp184 = icmp eq i64 %164, %call183
  br i1 %cmp184, label %cond.true.186, label %cond.false.190

cond.true.186:                                    ; preds = %cond.false.180
  %165 = load %struct.window*, %struct.window** %w, align 8
  %contents187 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 10
  %166 = load i64, i64* %contents187, align 8
  %call188 = call %struct.buffer* @XBUFFER(i64 %166)
  %pt189 = getelementptr inbounds %struct.buffer, %struct.buffer* %call188, i32 0, i32 75
  %167 = load i64, i64* %pt189, align 8
  br label %cond.end.195

cond.false.190:                                   ; preds = %cond.false.180
  %168 = load %struct.window*, %struct.window** %w, align 8
  %contents191 = getelementptr inbounds %struct.window, %struct.window* %168, i32 0, i32 10
  %169 = load i64, i64* %contents191, align 8
  %call192 = call %struct.buffer* @XBUFFER(i64 %169)
  %pt_marker_193 = getelementptr inbounds %struct.buffer, %struct.buffer* %call192, i32 0, i32 45
  %170 = load i64, i64* %pt_marker_193, align 8
  %call194 = call i64 @marker_position(i64 %170)
  br label %cond.end.195

cond.end.195:                                     ; preds = %cond.false.190, %cond.true.186
  %cond196 = phi i64 [ %167, %cond.true.186 ], [ %call194, %cond.false.190 ]
  br label %cond.end.197

cond.end.197:                                     ; preds = %cond.end.195, %cond.true.178
  %cond198 = phi i64 [ %add179, %cond.true.178 ], [ %cond196, %cond.end.195 ]
  %171 = load %struct.window*, %struct.window** %w, align 8
  %contents199 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 10
  %172 = load i64, i64* %contents199, align 8
  %call200 = call %struct.buffer* @XBUFFER(i64 %172)
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp201 = icmp eq %struct.buffer* %call200, %173
  br i1 %cmp201, label %cond.true.203, label %cond.false.205

cond.true.203:                                    ; preds = %cond.end.197
  %174 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %174, i32 0, i32 76
  %175 = load i64, i64* %pt_byte, align 8
  %add204 = add nsw i64 %175, 0
  br label %cond.end.223

cond.false.205:                                   ; preds = %cond.end.197
  %176 = load %struct.window*, %struct.window** %w, align 8
  %contents206 = getelementptr inbounds %struct.window, %struct.window* %176, i32 0, i32 10
  %177 = load i64, i64* %contents206, align 8
  %call207 = call %struct.buffer* @XBUFFER(i64 %177)
  %pt_marker_208 = getelementptr inbounds %struct.buffer, %struct.buffer* %call207, i32 0, i32 45
  %178 = load i64, i64* %pt_marker_208, align 8
  %call209 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp210 = icmp eq i64 %178, %call209
  br i1 %cmp210, label %cond.true.212, label %cond.false.216

cond.true.212:                                    ; preds = %cond.false.205
  %179 = load %struct.window*, %struct.window** %w, align 8
  %contents213 = getelementptr inbounds %struct.window, %struct.window* %179, i32 0, i32 10
  %180 = load i64, i64* %contents213, align 8
  %call214 = call %struct.buffer* @XBUFFER(i64 %180)
  %pt_byte215 = getelementptr inbounds %struct.buffer, %struct.buffer* %call214, i32 0, i32 76
  %181 = load i64, i64* %pt_byte215, align 8
  br label %cond.end.221

cond.false.216:                                   ; preds = %cond.false.205
  %182 = load %struct.window*, %struct.window** %w, align 8
  %contents217 = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 10
  %183 = load i64, i64* %contents217, align 8
  %call218 = call %struct.buffer* @XBUFFER(i64 %183)
  %pt_marker_219 = getelementptr inbounds %struct.buffer, %struct.buffer* %call218, i32 0, i32 45
  %184 = load i64, i64* %pt_marker_219, align 8
  %call220 = call i64 @marker_byte_position(i64 %184)
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.216, %cond.true.212
  %cond222 = phi i64 [ %181, %cond.true.212 ], [ %call220, %cond.false.216 ]
  br label %cond.end.223

cond.end.223:                                     ; preds = %cond.end.221, %cond.true.203
  %cond224 = phi i64 [ %add204, %cond.true.203 ], [ %cond222, %cond.end.221 ]
  %call225 = call i64 @build_marker(%struct.buffer* %call173, i64 %cond198, i64 %cond224)
  %185 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pointm = getelementptr inbounds %struct.saved_window, %struct.saved_window* %185, i32 0, i32 4
  store i64 %call225, i64* %pointm, align 8
  br label %if.end.231

if.else.226:                                      ; preds = %if.then.168
  %186 = load %struct.window*, %struct.window** %w, align 8
  %pointm227 = getelementptr inbounds %struct.window, %struct.window* %186, i32 0, i32 12
  %187 = load i64, i64* %pointm227, align 8
  %call228 = call i64 @builtin_lisp_symbol(i32 0)
  %call229 = call i64 @Fcopy_marker(i64 %187, i64 %call228)
  %188 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pointm230 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %188, i32 0, i32 4
  store i64 %call229, i64* %pointm230, align 8
  br label %if.end.231

if.end.231:                                       ; preds = %if.else.226, %cond.end.223
  %189 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %189, i32 0, i32 13
  %190 = load i64, i64* %old_pointm, align 8
  %call232 = call i64 @builtin_lisp_symbol(i32 0)
  %call233 = call i64 @Fcopy_marker(i64 %190, i64 %call232)
  %191 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %old_pointm234 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %191, i32 0, i32 5
  store i64 %call233, i64* %old_pointm234, align 8
  %call235 = call i64 @builtin_lisp_symbol(i32 1029)
  %192 = load %struct.window*, %struct.window** %w, align 8
  %contents236 = getelementptr inbounds %struct.window, %struct.window* %192, i32 0, i32 10
  %193 = load i64, i64* %contents236, align 8
  %call237 = call i64 @buffer_local_value(i64 %call235, i64 %193)
  %call238 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp239 = icmp eq i64 %call237, %call238
  %lnot241 = xor i1 %cmp239, true
  %194 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pointm242 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %194, i32 0, i32 4
  %195 = load i64, i64* %pointm242, align 8
  %call243 = call %struct.Lisp_Marker* @XMARKER(i64 %195)
  %196 = bitcast %struct.Lisp_Marker* %call243 to i32*
  %197 = zext i1 %lnot241 to i32
  %bf.load244 = load i32, i32* %196, align 8
  %bf.shl = shl i32 %197, 31
  %bf.clear245 = and i32 %bf.load244, 2147483647
  %bf.set = or i32 %bf.clear245, %bf.shl
  store i32 %bf.set, i32* %196, align 8
  %bf.result.cast = trunc i32 %197 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %call246 = call i64 @builtin_lisp_symbol(i32 1029)
  %198 = load %struct.window*, %struct.window** %w, align 8
  %contents247 = getelementptr inbounds %struct.window, %struct.window* %198, i32 0, i32 10
  %199 = load i64, i64* %contents247, align 8
  %call248 = call i64 @buffer_local_value(i64 %call246, i64 %199)
  %call249 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp250 = icmp eq i64 %call248, %call249
  %lnot252 = xor i1 %cmp250, true
  %200 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %old_pointm253 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %200, i32 0, i32 5
  %201 = load i64, i64* %old_pointm253, align 8
  %call254 = call %struct.Lisp_Marker* @XMARKER(i64 %201)
  %202 = bitcast %struct.Lisp_Marker* %call254 to i32*
  %203 = zext i1 %lnot252 to i32
  %bf.load255 = load i32, i32* %202, align 8
  %bf.shl256 = shl i32 %203, 31
  %bf.clear257 = and i32 %bf.load255, 2147483647
  %bf.set258 = or i32 %bf.clear257, %bf.shl256
  store i32 %bf.set258, i32* %202, align 8
  %bf.result.cast259 = trunc i32 %203 to i8
  %tobool260 = trunc i8 %bf.result.cast259 to i1
  %204 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %204, i32 0, i32 11
  %205 = load i64, i64* %start, align 8
  %call261 = call i64 @builtin_lisp_symbol(i32 0)
  %call262 = call i64 @Fcopy_marker(i64 %205, i64 %call261)
  %206 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start263 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %206, i32 0, i32 3
  store i64 %call262, i64* %start263, align 8
  %207 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %207, i32 0, i32 67
  %bf.load264 = load i16, i16* %start_at_line_beg, align 4
  %bf.lshr265 = lshr i16 %bf.load264, 4
  %bf.clear266 = and i16 %bf.lshr265, 1
  %bf.cast267 = trunc i16 %bf.clear266 to i1
  br i1 %bf.cast267, label %cond.true.269, label %cond.false.271

cond.true.269:                                    ; preds = %if.end.231
  %call270 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.273

cond.false.271:                                   ; preds = %if.end.231
  %call272 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.273

cond.end.273:                                     ; preds = %cond.false.271, %cond.true.269
  %cond274 = phi i64 [ %call270, %cond.true.269 ], [ %call272, %cond.false.271 ]
  %208 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start_at_line_beg275 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %208, i32 0, i32 22
  store i64 %cond274, i64* %start_at_line_beg275, align 8
  br label %if.end.285

if.else.276:                                      ; preds = %if.end.165
  %call277 = call i64 @builtin_lisp_symbol(i32 0)
  %209 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %pointm278 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %209, i32 0, i32 4
  store i64 %call277, i64* %pointm278, align 8
  %call279 = call i64 @builtin_lisp_symbol(i32 0)
  %210 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %old_pointm280 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %210, i32 0, i32 5
  store i64 %call279, i64* %old_pointm280, align 8
  %call281 = call i64 @builtin_lisp_symbol(i32 0)
  %211 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start282 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %211, i32 0, i32 3
  store i64 %call281, i64* %start282, align 8
  %call283 = call i64 @builtin_lisp_symbol(i32 0)
  %212 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %start_at_line_beg284 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %212, i32 0, i32 22
  store i64 %call283, i64* %start_at_line_beg284, align 8
  br label %if.end.285

if.end.285:                                       ; preds = %if.else.276, %cond.end.273
  %213 = load %struct.window*, %struct.window** %w, align 8
  %parent = getelementptr inbounds %struct.window, %struct.window* %213, i32 0, i32 4
  %214 = load i64, i64* %parent, align 8
  %call286 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp287 = icmp eq i64 %214, %call286
  br i1 %cmp287, label %cond.true.289, label %cond.false.291

cond.true.289:                                    ; preds = %if.end.285
  %call290 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.294

cond.false.291:                                   ; preds = %if.end.285
  %215 = load %struct.window*, %struct.window** %w, align 8
  %parent292 = getelementptr inbounds %struct.window, %struct.window* %215, i32 0, i32 4
  %216 = load i64, i64* %parent292, align 8
  %call293 = call %struct.window* @XWINDOW(i64 %216)
  %temslot = getelementptr inbounds %struct.window, %struct.window* %call293, i32 0, i32 14
  %217 = load i64, i64* %temslot, align 8
  br label %cond.end.294

cond.end.294:                                     ; preds = %cond.false.291, %cond.true.289
  %cond295 = phi i64 [ %call290, %cond.true.289 ], [ %217, %cond.false.291 ]
  %218 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %parent296 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %218, i32 0, i32 20
  store i64 %cond295, i64* %parent296, align 8
  %219 = load %struct.window*, %struct.window** %w, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %219, i32 0, i32 3
  %220 = load i64, i64* %prev, align 8
  %call297 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp298 = icmp eq i64 %220, %call297
  br i1 %cmp298, label %cond.true.300, label %cond.false.302

cond.true.300:                                    ; preds = %cond.end.294
  %call301 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.306

cond.false.302:                                   ; preds = %cond.end.294
  %221 = load %struct.window*, %struct.window** %w, align 8
  %prev303 = getelementptr inbounds %struct.window, %struct.window* %221, i32 0, i32 3
  %222 = load i64, i64* %prev303, align 8
  %call304 = call %struct.window* @XWINDOW(i64 %222)
  %temslot305 = getelementptr inbounds %struct.window, %struct.window* %call304, i32 0, i32 14
  %223 = load i64, i64* %temslot305, align 8
  br label %cond.end.306

cond.end.306:                                     ; preds = %cond.false.302, %cond.true.300
  %cond307 = phi i64 [ %call301, %cond.true.300 ], [ %223, %cond.false.302 ]
  %224 = load %struct.saved_window*, %struct.saved_window** %p, align 8
  %prev308 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %224, i32 0, i32 21
  store i64 %cond307, i64* %prev308, align 8
  %225 = load %struct.window*, %struct.window** %w, align 8
  %contents309 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 10
  %226 = load i64, i64* %contents309, align 8
  %call310 = call zeroext i1 @WINDOWP(i64 %226)
  br i1 %call310, label %if.then.311, label %if.end.314

if.then.311:                                      ; preds = %cond.end.306
  %227 = load %struct.window*, %struct.window** %w, align 8
  %contents312 = getelementptr inbounds %struct.window, %struct.window* %227, i32 0, i32 10
  %228 = load i64, i64* %contents312, align 8
  %229 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %vector.addr, align 8
  %230 = load i64, i64* %i.addr, align 8
  %call313 = call i64 @save_window_save(i64 %228, %struct.Lisp_Vector* %229, i64 %230)
  store i64 %call313, i64* %i.addr, align 8
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.311, %cond.end.306
  br label %for.inc.315

for.inc.315:                                      ; preds = %if.end.314
  %231 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %231, i32 0, i32 2
  %232 = load i64, i64* %next, align 8
  store i64 %232, i64* %window.addr, align 8
  br label %for.cond

for.end.316:                                      ; preds = %for.cond
  %233 = load i64, i64* %i.addr, align 8
  ret i64 %233
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_margins(i64 %window, i64 %left_width, i64 %right_width) #0 {
entry:
  %window.addr = alloca i64, align 8
  %left_width.addr = alloca i64, align 8
  %right_width.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %left_width, i64* %left_width.addr, align 8
  store i64 %right_width, i64* %right_width.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %left_width.addr, align 8
  %2 = load i64, i64* %right_width.addr, align 8
  %call1 = call %struct.window* @set_window_margins(%struct.window* %call, i64 %1, i64 %2)
  store %struct.window* %call1, %struct.window** %w, align 8
  %3 = load %struct.window*, %struct.window** %w, align 8
  %tobool = icmp ne %struct.window* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w, align 8
  call void @apply_window_adjustment(%struct.window* %4)
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_margins(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 59
  %2 = load i32, i32* %left_margin_cols, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 59
  %4 = load i32, i32* %left_margin_cols1, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %call2, %cond.false ]
  %5 = load %struct.window*, %struct.window** %w, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 60
  %6 = load i32, i32* %right_margin_cols, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %cond.true.4, label %cond.false.9

cond.true.4:                                      ; preds = %cond.end
  %7 = load %struct.window*, %struct.window** %w, align 8
  %right_margin_cols5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 60
  %8 = load i32, i32* %right_margin_cols5, align 4
  %conv6 = sext i32 %8 to i64
  %shl7 = shl i64 %conv6, 2
  %add8 = add i64 %shl7, 2
  br label %cond.end.11

cond.false.9:                                     ; preds = %cond.end
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.9, %cond.true.4
  %cond12 = phi i64 [ %add8, %cond.true.4 ], [ %call10, %cond.false.9 ]
  %call13 = call i64 @Fcons(i64 %cond, i64 %cond12)
  ret i64 %call13
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_fringes(i64 %window, i64 %left_width, i64 %right_width, i64 %outside_margins) #0 {
entry:
  %window.addr = alloca i64, align 8
  %left_width.addr = alloca i64, align 8
  %right_width.addr = alloca i64, align 8
  %outside_margins.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %left_width, i64* %left_width.addr, align 8
  store i64 %right_width, i64* %right_width.addr, align 8
  store i64 %outside_margins, i64* %outside_margins.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %left_width.addr, align 8
  %2 = load i64, i64* %right_width.addr, align 8
  %3 = load i64, i64* %outside_margins.addr, align 8
  %call1 = call %struct.window* @set_window_fringes(%struct.window* %call, i64 %1, i64 %2, i64 %3)
  store %struct.window* %call1, %struct.window** %w, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  %tobool = icmp ne %struct.window* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  call void @apply_window_adjustment(%struct.window* %5)
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_fringes(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 57
  %2 = load i32, i32* %left_fringe_width, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %left_fringe_width1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 57
  %4 = load i32, i32* %left_fringe_width1, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 1
  %6 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %left_fringe_width2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 54
  %9 = load i32, i32* %left_fringe_width2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %9, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %10 = load %struct.window*, %struct.window** %w, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 58
  %11 = load i32, i32* %right_fringe_width, align 4
  %cmp3 = icmp sge i32 %11, 0
  br i1 %cmp3, label %cond.true.5, label %cond.false.7

cond.true.5:                                      ; preds = %cond.end
  %12 = load %struct.window*, %struct.window** %w, align 8
  %right_fringe_width6 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 58
  %13 = load i32, i32* %right_fringe_width6, align 4
  br label %cond.end.11

cond.false.7:                                     ; preds = %cond.end
  %14 = load %struct.window*, %struct.window** %w, align 8
  %frame8 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 1
  %15 = load i64, i64* %frame8, align 8
  %sub9 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub9 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %right_fringe_width10 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 55
  %18 = load i32, i32* %right_fringe_width10, align 4
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.7, %cond.true.5
  %cond12 = phi i32 [ %13, %cond.true.5 ], [ %18, %cond.false.7 ]
  %conv13 = sext i32 %cond12 to i64
  %shl14 = shl i64 %conv13, 2
  %add15 = add i64 %shl14, 2
  %19 = load %struct.window*, %struct.window** %w, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 67
  %bf.load = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr = lshr i16 %bf.load, 12
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.17, label %cond.false.19

cond.true.17:                                     ; preds = %cond.end.11
  %call18 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.21

cond.false.19:                                    ; preds = %cond.end.11
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.19, %cond.true.17
  %cond22 = phi i64 [ %call18, %cond.true.17 ], [ %call20, %cond.false.19 ]
  %call23 = call i64 @list3(i64 %add, i64 %add15, i64 %cond22)
  ret i64 %call23
}

declare i64 @list3(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_window_scroll_bars(i64 %window, i64 %width, i64 %vertical_type, i64 %height, i64 %horizontal_type) #0 {
entry:
  %window.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %vertical_type.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %horizontal_type.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %vertical_type, i64* %vertical_type.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i64 %horizontal_type, i64* %horizontal_type.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  %1 = load i64, i64* %width.addr, align 8
  %2 = load i64, i64* %vertical_type.addr, align 8
  %3 = load i64, i64* %height.addr, align 8
  %4 = load i64, i64* %horizontal_type.addr, align 8
  %call1 = call %struct.window* @set_window_scroll_bars(%struct.window* %call, i64 %1, i64 %2, i64 %3, i64 %4)
  store %struct.window* %call1, %struct.window** %w, align 8
  %5 = load %struct.window*, %struct.window** %w, align 8
  %tobool = icmp ne %struct.window* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.window*, %struct.window** %w, align 8
  call void @apply_window_adjustment(%struct.window* %6)
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_scroll_bars(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 61
  %2 = load i32, i32* %scroll_bar_width, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 61
  %4 = load i32, i32* %scroll_bar_width1, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %call2, %cond.false ]
  %5 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.4, label %cond.false.5

cond.true.4:                                      ; preds = %cond.end
  br label %cond.end.31

cond.false.5:                                     ; preds = %cond.end
  %6 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 16
  %7 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp7 = icmp eq i64 %7, %call6
  br i1 %cmp7, label %cond.true.9, label %cond.false.15

cond.true.9:                                      ; preds = %cond.false.5
  %8 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 1
  %9 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %vertical_scroll_bar_type10 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %vertical_scroll_bar_type10 to i64*
  %bf.load11 = load i64, i64* %12, align 8
  %bf.lshr12 = lshr i64 %bf.load11, 30
  %bf.clear13 = and i64 %bf.lshr12, 3
  %bf.cast14 = trunc i64 %bf.clear13 to i32
  br label %cond.end.29

cond.false.15:                                    ; preds = %cond.false.5
  %13 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type16 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 16
  %14 = load i64, i64* %vertical_scroll_bar_type16, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp18 = icmp eq i64 %14, %call17
  br i1 %cmp18, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %cond.false.15
  br label %cond.end.27

cond.false.21:                                    ; preds = %cond.false.15
  %15 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type22 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 16
  %16 = load i64, i64* %vertical_scroll_bar_type22, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp24 = icmp eq i64 %16, %call23
  %cond26 = select i1 %cmp24, i32 2, i32 0
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.21, %cond.true.20
  %cond28 = phi i32 [ 1, %cond.true.20 ], [ %cond26, %cond.false.21 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end.27, %cond.true.9
  %cond30 = phi i32 [ %bf.cast14, %cond.true.9 ], [ %cond28, %cond.end.27 ]
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.end.29, %cond.true.4
  %cond32 = phi i32 [ 0, %cond.true.4 ], [ %cond30, %cond.end.29 ]
  %cmp33 = icmp eq i32 %cond32, 1
  br i1 %cmp33, label %cond.true.75, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.31
  %17 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p35 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 67
  %bf.load36 = load i16, i16* %pseudo_window_p35, align 4
  %bf.lshr37 = lshr i16 %bf.load36, 11
  %bf.clear38 = and i16 %bf.lshr37, 1
  %bf.cast39 = trunc i16 %bf.clear38 to i1
  br i1 %bf.cast39, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %lor.lhs.false
  br label %cond.end.71

cond.false.42:                                    ; preds = %lor.lhs.false
  %18 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type43 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 16
  %19 = load i64, i64* %vertical_scroll_bar_type43, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp45 = icmp eq i64 %19, %call44
  br i1 %cmp45, label %cond.true.47, label %cond.false.55

cond.true.47:                                     ; preds = %cond.false.42
  %20 = load %struct.window*, %struct.window** %w, align 8
  %frame48 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 1
  %21 = load i64, i64* %frame48, align 8
  %sub49 = sub nsw i64 %21, 5
  %22 = inttoptr i64 %sub49 to i8*
  %23 = bitcast i8* %22 to %struct.frame*
  %vertical_scroll_bar_type50 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %vertical_scroll_bar_type50 to i64*
  %bf.load51 = load i64, i64* %24, align 8
  %bf.lshr52 = lshr i64 %bf.load51, 30
  %bf.clear53 = and i64 %bf.lshr52, 3
  %bf.cast54 = trunc i64 %bf.clear53 to i32
  br label %cond.end.69

cond.false.55:                                    ; preds = %cond.false.42
  %25 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type56 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 16
  %26 = load i64, i64* %vertical_scroll_bar_type56, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp58 = icmp eq i64 %26, %call57
  br i1 %cmp58, label %cond.true.60, label %cond.false.61

cond.true.60:                                     ; preds = %cond.false.55
  br label %cond.end.67

cond.false.61:                                    ; preds = %cond.false.55
  %27 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type62 = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 16
  %28 = load i64, i64* %vertical_scroll_bar_type62, align 8
  %call63 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp64 = icmp eq i64 %28, %call63
  %cond66 = select i1 %cmp64, i32 2, i32 0
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.61, %cond.true.60
  %cond68 = phi i32 [ 1, %cond.true.60 ], [ %cond66, %cond.false.61 ]
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.end.67, %cond.true.47
  %cond70 = phi i32 [ %bf.cast54, %cond.true.47 ], [ %cond68, %cond.end.67 ]
  br label %cond.end.71

cond.end.71:                                      ; preds = %cond.end.69, %cond.true.41
  %cond72 = phi i32 [ 0, %cond.true.41 ], [ %cond70, %cond.end.69 ]
  %cmp73 = icmp eq i32 %cond72, 2
  br i1 %cmp73, label %cond.true.75, label %cond.false.93

cond.true.75:                                     ; preds = %cond.end.71, %cond.end.31
  %29 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width76 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 61
  %30 = load i32, i32* %scroll_bar_width76, align 4
  %cmp77 = icmp sge i32 %30, 0
  br i1 %cmp77, label %cond.true.79, label %cond.false.88

cond.true.79:                                     ; preds = %cond.true.75
  %31 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_width80 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 61
  %32 = load i32, i32* %scroll_bar_width80, align 4
  %33 = load %struct.window*, %struct.window** %w, align 8
  %frame81 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 1
  %34 = load i64, i64* %frame81, align 8
  %sub82 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub82 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 59
  %37 = load i32, i32* %column_width, align 4
  %add83 = add nsw i32 %32, %37
  %sub84 = sub nsw i32 %add83, 1
  %38 = load %struct.window*, %struct.window** %w, align 8
  %frame85 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 1
  %39 = load i64, i64* %frame85, align 8
  %sub86 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub86 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %column_width87 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 59
  %42 = load i32, i32* %column_width87, align 4
  %div = sdiv i32 %sub84, %42
  br label %cond.end.91

cond.false.88:                                    ; preds = %cond.true.75
  %43 = load %struct.window*, %struct.window** %w, align 8
  %frame89 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 1
  %44 = load i64, i64* %frame89, align 8
  %sub90 = sub nsw i64 %44, 5
  %45 = inttoptr i64 %sub90 to i8*
  %46 = bitcast i8* %45 to %struct.frame*
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 70
  %47 = load i32, i32* %config_scroll_bar_cols, align 4
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.88, %cond.true.79
  %cond92 = phi i32 [ %div, %cond.true.79 ], [ %47, %cond.false.88 ]
  br label %cond.end.94

cond.false.93:                                    ; preds = %cond.end.71
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.93, %cond.end.91
  %cond95 = phi i32 [ %cond92, %cond.end.91 ], [ 0, %cond.false.93 ]
  %conv96 = sext i32 %cond95 to i64
  %shl97 = shl i64 %conv96, 2
  %add98 = add i64 %shl97, 2
  %48 = load %struct.window*, %struct.window** %w, align 8
  %vertical_scroll_bar_type99 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 16
  %49 = load i64, i64* %vertical_scroll_bar_type99, align 8
  %50 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 62
  %51 = load i32, i32* %scroll_bar_height, align 4
  %cmp100 = icmp sge i32 %51, 0
  br i1 %cmp100, label %cond.true.102, label %cond.false.107

cond.true.102:                                    ; preds = %cond.end.94
  %52 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height103 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 62
  %53 = load i32, i32* %scroll_bar_height103, align 4
  %conv104 = sext i32 %53 to i64
  %shl105 = shl i64 %conv104, 2
  %add106 = add i64 %shl105, 2
  br label %cond.end.109

cond.false.107:                                   ; preds = %cond.end.94
  %call108 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.false.107, %cond.true.102
  %cond110 = phi i64 [ %add106, %cond.true.102 ], [ %call108, %cond.false.107 ]
  %54 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p111 = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 67
  %bf.load112 = load i16, i16* %pseudo_window_p111, align 4
  %bf.lshr113 = lshr i16 %bf.load112, 11
  %bf.clear114 = and i16 %bf.lshr113, 1
  %bf.cast115 = trunc i16 %bf.clear114 to i1
  br i1 %bf.cast115, label %cond.true.126, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %cond.end.109
  %55 = load %struct.window*, %struct.window** %w, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 67
  %bf.load118 = load i16, i16* %mini, align 4
  %bf.clear119 = and i16 %bf.load118, 1
  %bf.cast120 = trunc i16 %bf.clear119 to i1
  br i1 %bf.cast120, label %land.lhs.true, label %cond.false.127

land.lhs.true:                                    ; preds = %lor.lhs.false.117
  %56 = load %struct.window*, %struct.window** %w, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 3
  %57 = load i64, i64* %prev, align 8
  %58 = load %struct.window*, %struct.window** %w, align 8
  %frame122 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 1
  %59 = load i64, i64* %frame122, align 8
  %sub123 = sub nsw i64 %59, 5
  %60 = inttoptr i64 %sub123 to i8*
  %61 = bitcast i8* %60 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 5
  %62 = load i64, i64* %root_window, align 8
  %cmp124 = icmp eq i64 %57, %62
  br i1 %cmp124, label %cond.true.126, label %cond.false.127

cond.true.126:                                    ; preds = %land.lhs.true, %cond.end.109
  br i1 false, label %cond.true.146, label %cond.false.165

cond.false.127:                                   ; preds = %land.lhs.true, %lor.lhs.false.117
  %63 = load %struct.window*, %struct.window** %w, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 18
  %64 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call128 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp129 = icmp eq i64 %64, %call128
  br i1 %cmp129, label %cond.true.131, label %cond.false.139

cond.true.131:                                    ; preds = %cond.false.127
  %65 = load %struct.window*, %struct.window** %w, align 8
  %frame132 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 1
  %66 = load i64, i64* %frame132, align 8
  %sub133 = sub nsw i64 %66, 5
  %67 = inttoptr i64 %sub133 to i8*
  %68 = bitcast i8* %67 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 26
  %69 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load134 = load i64, i64* %69, align 8
  %bf.lshr135 = lshr i64 %bf.load134, 32
  %bf.clear136 = and i64 %bf.lshr135, 1
  %bf.cast137 = trunc i64 %bf.clear136 to i1
  br i1 %bf.cast137, label %cond.true.146, label %cond.false.165

cond.false.139:                                   ; preds = %cond.false.127
  %70 = load %struct.window*, %struct.window** %w, align 8
  %horizontal_scroll_bar_type140 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 18
  %71 = load i64, i64* %horizontal_scroll_bar_type140, align 8
  %call141 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp142 = icmp eq i64 %71, %call141
  br i1 %cmp142, label %cond.true.144, label %cond.false.145

cond.true.144:                                    ; preds = %cond.false.139
  br i1 true, label %cond.true.146, label %cond.false.165

cond.false.145:                                   ; preds = %cond.false.139
  br i1 false, label %cond.true.146, label %cond.false.165

cond.true.146:                                    ; preds = %cond.false.145, %cond.true.144, %cond.true.131, %cond.true.126
  %72 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height147 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 62
  %73 = load i32, i32* %scroll_bar_height147, align 4
  %cmp148 = icmp sge i32 %73, 0
  br i1 %cmp148, label %cond.true.150, label %cond.false.160

cond.true.150:                                    ; preds = %cond.true.146
  %74 = load %struct.window*, %struct.window** %w, align 8
  %scroll_bar_height151 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 62
  %75 = load i32, i32* %scroll_bar_height151, align 4
  %76 = load %struct.window*, %struct.window** %w, align 8
  %frame152 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 1
  %77 = load i64, i64* %frame152, align 8
  %sub153 = sub nsw i64 %77, 5
  %78 = inttoptr i64 %sub153 to i8*
  %79 = bitcast i8* %78 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 60
  %80 = load i32, i32* %line_height, align 4
  %add154 = add nsw i32 %75, %80
  %sub155 = sub nsw i32 %add154, 1
  %81 = load %struct.window*, %struct.window** %w, align 8
  %frame156 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 1
  %82 = load i64, i64* %frame156, align 8
  %sub157 = sub nsw i64 %82, 5
  %83 = inttoptr i64 %sub157 to i8*
  %84 = bitcast i8* %83 to %struct.frame*
  %line_height158 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 60
  %85 = load i32, i32* %line_height158, align 4
  %div159 = sdiv i32 %sub155, %85
  br label %cond.end.163

cond.false.160:                                   ; preds = %cond.true.146
  %86 = load %struct.window*, %struct.window** %w, align 8
  %frame161 = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 1
  %87 = load i64, i64* %frame161, align 8
  %sub162 = sub nsw i64 %87, 5
  %88 = inttoptr i64 %sub162 to i8*
  %89 = bitcast i8* %88 to %struct.frame*
  %config_scroll_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 72
  %90 = load i32, i32* %config_scroll_bar_lines, align 4
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.160, %cond.true.150
  %cond164 = phi i32 [ %div159, %cond.true.150 ], [ %90, %cond.false.160 ]
  br label %cond.end.166

cond.false.165:                                   ; preds = %cond.false.145, %cond.true.144, %cond.true.131, %cond.true.126
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.165, %cond.end.163
  %cond167 = phi i32 [ %cond164, %cond.end.163 ], [ 0, %cond.false.165 ]
  %conv168 = sext i32 %cond167 to i64
  %shl169 = shl i64 %conv168, 2
  %add170 = add i64 %shl169, 2
  %91 = load %struct.window*, %struct.window** %w, align 8
  %horizontal_scroll_bar_type171 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 18
  %92 = load i64, i64* %horizontal_scroll_bar_type171, align 8
  %call172 = call i64 @list5(i64 %add98, i64 %49, i64 %cond110, i64 %add170, i64 %92)
  %call173 = call i64 @Fcons(i64 %cond, i64 %call172)
  ret i64 %call173
}

declare i64 @list5(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fwindow_vscroll(i64 %window, i64 %pixels_p) #0 {
entry:
  %window.addr = alloca i64, align 8
  %pixels_p.addr = alloca i64, align 8
  %result = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %pixels_p, i64* %pixels_p.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %6, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %pixels_p.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %7, %call1
  br i1 %cmp2, label %cond.true, label %cond.false.15

cond.true:                                        ; preds = %if.then
  %8 = load %struct.window*, %struct.window** %w, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 68
  %9 = load i32, i32* %vscroll, align 4
  %sub3 = sub nsw i32 0, %9
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 60
  %11 = load i32, i32* %line_height, align 4
  %rem = srem i32 %sub3, %11
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %cond.true.4, label %cond.false

cond.true.4:                                      ; preds = %cond.true
  %12 = load %struct.window*, %struct.window** %w, align 8
  %vscroll5 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 68
  %13 = load i32, i32* %vscroll5, align 4
  %sub6 = sub nsw i32 0, %13
  %conv = sitofp i32 %sub6 to double
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height7 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 60
  %15 = load i32, i32* %line_height7, align 4
  %conv8 = sitofp i32 %15 to double
  %div = fdiv double %conv, %conv8
  %call9 = call i64 @make_float(double %div)
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %16 = load %struct.window*, %struct.window** %w, align 8
  %vscroll10 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 68
  %17 = load i32, i32* %vscroll10, align 4
  %sub11 = sub nsw i32 0, %17
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height12 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 60
  %19 = load i32, i32* %line_height12, align 4
  %div13 = sdiv i32 %sub11, %19
  %conv14 = sext i32 %div13 to i64
  %shl = shl i64 %conv14, 2
  %add = add i64 %shl, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.4
  %cond = phi i64 [ %call9, %cond.true.4 ], [ %add, %cond.false ]
  br label %cond.end.21

cond.false.15:                                    ; preds = %if.then
  %20 = load %struct.window*, %struct.window** %w, align 8
  %vscroll16 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 68
  %21 = load i32, i32* %vscroll16, align 4
  %sub17 = sub nsw i32 0, %21
  %conv18 = sext i32 %sub17 to i64
  %shl19 = shl i64 %conv18, 2
  %add20 = add i64 %shl19, 2
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.15, %cond.end
  %cond22 = phi i64 [ %cond, %cond.end ], [ %add20, %cond.false.15 ]
  store i64 %cond22, i64* %result, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store i64 2, i64* %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end.21
  %22 = load i64, i64* %result, align 8
  ret i64 %22
}

; Function Attrs: nounwind uwtable
define i64 @Fset_window_vscroll(i64 %window, i64 %vscroll, i64 %pixels_p) #0 {
entry:
  %window.addr = alloca i64, align 8
  %vscroll.addr = alloca i64, align 8
  %pixels_p.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %old_dy = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i64 %vscroll, i64* %vscroll.addr, align 8
  store i64 %pixels_p, i64* %pixels_p.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  %5 = load i64, i64* %vscroll.addr, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %5)
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end.33

if.then:                                          ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w, align 8
  %vscroll1 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 68
  %9 = load i32, i32* %vscroll1, align 4
  store i32 %9, i32* %old_dy, align 4
  %10 = load i64, i64* %pixels_p.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %10, %call2
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 60
  %12 = load i32, i32* %line_height, align 4
  %conv = sitofp i32 %12 to double
  %13 = load i64, i64* %vscroll.addr, align 8
  %call4 = call double @XFLOATINT(i64 %13)
  %mul = fmul double %conv, %call4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %14 = load i64, i64* %vscroll.addr, align 8
  %call5 = call double @XFLOATINT(i64 %14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %mul, %cond.true ], [ %call5, %cond.false ]
  %sub6 = fsub double -0.000000e+00, %cond
  %conv7 = fptosi double %sub6 to i32
  %15 = load %struct.window*, %struct.window** %w, align 8
  %vscroll8 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 68
  store i32 %conv7, i32* %vscroll8, align 4
  %16 = load %struct.window*, %struct.window** %w, align 8
  %vscroll9 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 68
  %17 = load i32, i32* %vscroll9, align 4
  %cmp10 = icmp slt i32 %17, 0
  br i1 %cmp10, label %cond.true.12, label %cond.false.14

cond.true.12:                                     ; preds = %cond.end
  %18 = load %struct.window*, %struct.window** %w, align 8
  %vscroll13 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 68
  %19 = load i32, i32* %vscroll13, align 4
  br label %cond.end.15

cond.false.14:                                    ; preds = %cond.end
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.14, %cond.true.12
  %cond16 = phi i32 [ %19, %cond.true.12 ], [ 0, %cond.false.14 ]
  %20 = load %struct.window*, %struct.window** %w, align 8
  %vscroll17 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 68
  store i32 %cond16, i32* %vscroll17, align 4
  %21 = load %struct.window*, %struct.window** %w, align 8
  %vscroll18 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 68
  %22 = load i32, i32* %vscroll18, align 4
  %23 = load i32, i32* %old_dy, align 4
  %cmp19 = icmp ne i32 %22, %23
  br i1 %cmp19, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %cond.end.15
  %24 = load %struct.window*, %struct.window** %w, align 8
  %vscroll22 = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 68
  %25 = load i32, i32* %vscroll22, align 4
  %cmp23 = icmp slt i32 %25, 0
  br i1 %cmp23, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then.21
  %26 = load %struct.window*, %struct.window** %w, align 8
  %vscroll25 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 68
  %27 = load i32, i32* %vscroll25, align 4
  %28 = load i32, i32* %old_dy, align 4
  %cmp26 = icmp slt i32 %27, %28
  br i1 %cmp26, label %if.then.28, label %if.end

if.then.28:                                       ; preds = %land.lhs.true
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %29)
  br label %if.end

if.end:                                           ; preds = %if.then.28, %land.lhs.true, %if.then.21
  %30 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 10
  %31 = load i64, i64* %contents, align 8
  %call29 = call %struct.buffer* @XBUFFER(i64 %31)
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %call29, i32 0, i32 94
  %bf.load30 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear31 = and i8 %bf.load30, -2
  %bf.set = or i8 %bf.clear31, 1
  store i8 %bf.set, i8* %prevent_redisplay_optimizations_p, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.end, %cond.end.15
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %entry
  %32 = load i64, i64* %window.addr, align 8
  %33 = load i64, i64* %pixels_p.addr, align 8
  %call34 = call i64 @Fwindow_vscroll(i64 %32, i64 %33)
  ret i64 %call34
}

declare double @XFLOATINT(i64) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @compare_window_configurations(i64 %configuration1, i64 %configuration2, i1 zeroext %ignore_positions) #0 {
entry:
  %retval = alloca i1, align 1
  %configuration1.addr = alloca i64, align 8
  %configuration2.addr = alloca i64, align 8
  %ignore_positions.addr = alloca i8, align 1
  %d1 = alloca %struct.save_window_data*, align 8
  %d2 = alloca %struct.save_window_data*, align 8
  %sws1 = alloca %struct.Lisp_Vector*, align 8
  %sws2 = alloca %struct.Lisp_Vector*, align 8
  %i = alloca i64, align 8
  %sw1 = alloca %struct.saved_window*, align 8
  %sw2 = alloca %struct.saved_window*, align 8
  store i64 %configuration1, i64* %configuration1.addr, align 8
  store i64 %configuration2, i64* %configuration2.addr, align 8
  %frombool = zext i1 %ignore_positions to i8
  store i8 %frombool, i8* %ignore_positions.addr, align 1
  %0 = load i64, i64* %configuration1.addr, align 8
  call void @CHECK_WINDOW_CONFIGURATION(i64 %0)
  %1 = load i64, i64* %configuration2.addr, align 8
  call void @CHECK_WINDOW_CONFIGURATION(i64 %1)
  %2 = load i64, i64* %configuration1.addr, align 8
  %call = call %struct.Lisp_Vector* @XVECTOR(i64 %2)
  %3 = bitcast %struct.Lisp_Vector* %call to %struct.save_window_data*
  store %struct.save_window_data* %3, %struct.save_window_data** %d1, align 8
  %4 = load i64, i64* %configuration2.addr, align 8
  %call1 = call %struct.Lisp_Vector* @XVECTOR(i64 %4)
  %5 = bitcast %struct.Lisp_Vector* %call1 to %struct.save_window_data*
  store %struct.save_window_data* %5, %struct.save_window_data** %d2, align 8
  %6 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %saved_windows = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %6, i32 0, i32 8
  %7 = load i64, i64* %saved_windows, align 8
  %call2 = call %struct.Lisp_Vector* @XVECTOR(i64 %7)
  store %struct.Lisp_Vector* %call2, %struct.Lisp_Vector** %sws1, align 8
  %8 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %saved_windows3 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %8, i32 0, i32 8
  %9 = load i64, i64* %saved_windows3, align 8
  %call4 = call %struct.Lisp_Vector* @XVECTOR(i64 %9)
  store %struct.Lisp_Vector* %call4, %struct.Lisp_Vector** %sws2, align 8
  %10 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %frame_cols = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %10, i32 0, i32 9
  %11 = load i32, i32* %frame_cols, align 4
  %12 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %frame_cols5 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %12, i32 0, i32 9
  %13 = load i32, i32* %frame_cols5, align 4
  %cmp = icmp ne i32 %11, %13
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %14 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %frame_lines = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %14, i32 0, i32 10
  %15 = load i32, i32* %frame_lines, align 4
  %16 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %frame_lines6 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %16, i32 0, i32 10
  %17 = load i32, i32* %frame_lines6, align 4
  %cmp7 = icmp ne i32 %15, %17
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false
  %18 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %frame_menu_bar_lines = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %18, i32 0, i32 11
  %19 = load i32, i32* %frame_menu_bar_lines, align 4
  %20 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %frame_menu_bar_lines9 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %20, i32 0, i32 11
  %21 = load i32, i32* %frame_menu_bar_lines9, align 4
  %cmp10 = icmp ne i32 %19, %21
  br i1 %cmp10, label %if.then, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false.8
  %22 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %selected_frame = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %22, i32 0, i32 1
  %23 = load i64, i64* %selected_frame, align 8
  %24 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %selected_frame12 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %24, i32 0, i32 1
  %25 = load i64, i64* %selected_frame12, align 8
  %cmp13 = icmp eq i64 %23, %25
  br i1 %cmp13, label %lor.lhs.false.14, label %if.then

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.11
  %26 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %current_buffer = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %26, i32 0, i32 3
  %27 = load i64, i64* %current_buffer, align 8
  %28 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %current_buffer15 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %28, i32 0, i32 3
  %29 = load i64, i64* %current_buffer15, align 8
  %cmp16 = icmp eq i64 %27, %29
  br i1 %cmp16, label %lor.lhs.false.17, label %if.then

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.14
  %30 = load i8, i8* %ignore_positions.addr, align 1
  %tobool = trunc i8 %30 to i1
  br i1 %tobool, label %lor.lhs.false.23, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false.17
  %31 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %minibuf_scroll_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %31, i32 0, i32 4
  %32 = load i64, i64* %minibuf_scroll_window, align 8
  %33 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %minibuf_scroll_window18 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %33, i32 0, i32 4
  %34 = load i64, i64* %minibuf_scroll_window18, align 8
  %cmp19 = icmp eq i64 %32, %34
  br i1 %cmp19, label %lor.lhs.false.20, label %if.then

lor.lhs.false.20:                                 ; preds = %land.lhs.true
  %35 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %minibuf_selected_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %35, i32 0, i32 5
  %36 = load i64, i64* %minibuf_selected_window, align 8
  %37 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %minibuf_selected_window21 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %37, i32 0, i32 5
  %38 = load i64, i64* %minibuf_selected_window21, align 8
  %cmp22 = icmp eq i64 %36, %38
  br i1 %cmp22, label %lor.lhs.false.23, label %if.then

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.20, %lor.lhs.false.17
  %39 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %focus_frame = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %39, i32 0, i32 7
  %40 = load i64, i64* %focus_frame, align 8
  %41 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %focus_frame24 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %41, i32 0, i32 7
  %42 = load i64, i64* %focus_frame24, align 8
  %cmp25 = icmp eq i64 %40, %42
  br i1 %cmp25, label %lor.lhs.false.26, label %if.then

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.23
  %43 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %sws1, align 8
  %header = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %43, i32 0, i32 0
  %size = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header, i32 0, i32 0
  %44 = load i64, i64* %size, align 8
  %45 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %sws2, align 8
  %header27 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %45, i32 0, i32 0
  %size28 = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header27, i32 0, i32 0
  %46 = load i64, i64* %size28, align 8
  %cmp29 = icmp ne i64 %44, %46
  br i1 %cmp29, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.26, %lor.lhs.false.23, %lor.lhs.false.20, %land.lhs.true, %lor.lhs.false.14, %lor.lhs.false.11, %lor.lhs.false.8, %lor.lhs.false, %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.26
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %47 = load i64, i64* %i, align 8
  %48 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %sws1, align 8
  %header30 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %48, i32 0, i32 0
  %size31 = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header30, i32 0, i32 0
  %49 = load i64, i64* %size31, align 8
  %cmp32 = icmp slt i64 %47, %49
  br i1 %cmp32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %50 = load i64, i64* %i, align 8
  %51 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %sws1, align 8
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %51, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 %50
  %52 = load i64, i64* %arrayidx, align 8
  %call33 = call %struct.Lisp_Vector* @XVECTOR(i64 %52)
  %53 = bitcast %struct.Lisp_Vector* %call33 to %struct.saved_window*
  store %struct.saved_window* %53, %struct.saved_window** %sw1, align 8
  %54 = load i64, i64* %i, align 8
  %55 = load %struct.Lisp_Vector*, %struct.Lisp_Vector** %sws2, align 8
  %contents34 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %55, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [0 x i64], [0 x i64]* %contents34, i32 0, i64 %54
  %56 = load i64, i64* %arrayidx35, align 8
  %call36 = call %struct.Lisp_Vector* @XVECTOR(i64 %56)
  %57 = bitcast %struct.Lisp_Vector* %call36 to %struct.saved_window*
  store %struct.saved_window* %57, %struct.saved_window** %sw2, align 8
  %58 = load %struct.save_window_data*, %struct.save_window_data** %d1, align 8
  %current_window = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %58, i32 0, i32 2
  %59 = load i64, i64* %current_window, align 8
  %60 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %window = getelementptr inbounds %struct.saved_window, %struct.saved_window* %60, i32 0, i32 1
  %61 = load i64, i64* %window, align 8
  %cmp37 = icmp eq i64 %59, %61
  %conv = zext i1 %cmp37 to i32
  %62 = load %struct.save_window_data*, %struct.save_window_data** %d2, align 8
  %current_window38 = getelementptr inbounds %struct.save_window_data, %struct.save_window_data* %62, i32 0, i32 2
  %63 = load i64, i64* %current_window38, align 8
  %64 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %window39 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %64, i32 0, i32 1
  %65 = load i64, i64* %window39, align 8
  %cmp40 = icmp eq i64 %63, %65
  %conv41 = zext i1 %cmp40 to i32
  %cmp42 = icmp ne i32 %conv, %conv41
  br i1 %cmp42, label %if.then.154, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %for.body
  %66 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %buffer = getelementptr inbounds %struct.saved_window, %struct.saved_window* %66, i32 0, i32 2
  %67 = load i64, i64* %buffer, align 8
  %68 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %buffer45 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %68, i32 0, i32 2
  %69 = load i64, i64* %buffer45, align 8
  %cmp46 = icmp eq i64 %67, %69
  br i1 %cmp46, label %lor.lhs.false.48, label %if.then.154

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.44
  %70 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %pixel_left = getelementptr inbounds %struct.saved_window, %struct.saved_window* %70, i32 0, i32 6
  %71 = load i64, i64* %pixel_left, align 8
  %72 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %pixel_left49 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %72, i32 0, i32 6
  %73 = load i64, i64* %pixel_left49, align 8
  %cmp50 = icmp eq i64 %71, %73
  br i1 %cmp50, label %lor.lhs.false.52, label %if.then.154

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.48
  %74 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %pixel_top = getelementptr inbounds %struct.saved_window, %struct.saved_window* %74, i32 0, i32 7
  %75 = load i64, i64* %pixel_top, align 8
  %76 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %pixel_top53 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %76, i32 0, i32 7
  %77 = load i64, i64* %pixel_top53, align 8
  %cmp54 = icmp eq i64 %75, %77
  br i1 %cmp54, label %lor.lhs.false.56, label %if.then.154

lor.lhs.false.56:                                 ; preds = %lor.lhs.false.52
  %78 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %pixel_height = getelementptr inbounds %struct.saved_window, %struct.saved_window* %78, i32 0, i32 8
  %79 = load i64, i64* %pixel_height, align 8
  %80 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %pixel_height57 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %80, i32 0, i32 8
  %81 = load i64, i64* %pixel_height57, align 8
  %cmp58 = icmp eq i64 %79, %81
  br i1 %cmp58, label %lor.lhs.false.60, label %if.then.154

lor.lhs.false.60:                                 ; preds = %lor.lhs.false.56
  %82 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %pixel_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %82, i32 0, i32 9
  %83 = load i64, i64* %pixel_width, align 8
  %84 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %pixel_width61 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %84, i32 0, i32 9
  %85 = load i64, i64* %pixel_width61, align 8
  %cmp62 = icmp eq i64 %83, %85
  br i1 %cmp62, label %lor.lhs.false.64, label %if.then.154

lor.lhs.false.64:                                 ; preds = %lor.lhs.false.60
  %86 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %left_col = getelementptr inbounds %struct.saved_window, %struct.saved_window* %86, i32 0, i32 10
  %87 = load i64, i64* %left_col, align 8
  %88 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %left_col65 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %88, i32 0, i32 10
  %89 = load i64, i64* %left_col65, align 8
  %cmp66 = icmp eq i64 %87, %89
  br i1 %cmp66, label %lor.lhs.false.68, label %if.then.154

lor.lhs.false.68:                                 ; preds = %lor.lhs.false.64
  %90 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %top_line = getelementptr inbounds %struct.saved_window, %struct.saved_window* %90, i32 0, i32 11
  %91 = load i64, i64* %top_line, align 8
  %92 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %top_line69 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %92, i32 0, i32 11
  %93 = load i64, i64* %top_line69, align 8
  %cmp70 = icmp eq i64 %91, %93
  br i1 %cmp70, label %lor.lhs.false.72, label %if.then.154

lor.lhs.false.72:                                 ; preds = %lor.lhs.false.68
  %94 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %total_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %94, i32 0, i32 12
  %95 = load i64, i64* %total_cols, align 8
  %96 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %total_cols73 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %96, i32 0, i32 12
  %97 = load i64, i64* %total_cols73, align 8
  %cmp74 = icmp eq i64 %95, %97
  br i1 %cmp74, label %lor.lhs.false.76, label %if.then.154

lor.lhs.false.76:                                 ; preds = %lor.lhs.false.72
  %98 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %total_lines = getelementptr inbounds %struct.saved_window, %struct.saved_window* %98, i32 0, i32 13
  %99 = load i64, i64* %total_lines, align 8
  %100 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %total_lines77 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %100, i32 0, i32 13
  %101 = load i64, i64* %total_lines77, align 8
  %cmp78 = icmp eq i64 %99, %101
  br i1 %cmp78, label %lor.lhs.false.80, label %if.then.154

lor.lhs.false.80:                                 ; preds = %lor.lhs.false.76
  %102 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %display_table = getelementptr inbounds %struct.saved_window, %struct.saved_window* %102, i32 0, i32 23
  %103 = load i64, i64* %display_table, align 8
  %104 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %display_table81 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %104, i32 0, i32 23
  %105 = load i64, i64* %display_table81, align 8
  %cmp82 = icmp eq i64 %103, %105
  br i1 %cmp82, label %lor.lhs.false.84, label %if.then.154

lor.lhs.false.84:                                 ; preds = %lor.lhs.false.80
  %106 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %parent = getelementptr inbounds %struct.saved_window, %struct.saved_window* %106, i32 0, i32 20
  %107 = load i64, i64* %parent, align 8
  %108 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %parent85 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %108, i32 0, i32 20
  %109 = load i64, i64* %parent85, align 8
  %cmp86 = icmp eq i64 %107, %109
  br i1 %cmp86, label %lor.lhs.false.88, label %if.then.154

lor.lhs.false.88:                                 ; preds = %lor.lhs.false.84
  %110 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %prev = getelementptr inbounds %struct.saved_window, %struct.saved_window* %110, i32 0, i32 21
  %111 = load i64, i64* %prev, align 8
  %112 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %prev89 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %112, i32 0, i32 21
  %113 = load i64, i64* %prev89, align 8
  %cmp90 = icmp eq i64 %111, %113
  br i1 %cmp90, label %lor.lhs.false.92, label %if.then.154

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.88
  %114 = load i8, i8* %ignore_positions.addr, align 1
  %tobool93 = trunc i8 %114 to i1
  br i1 %tobool93, label %lor.lhs.false.118, label %land.lhs.true.94

land.lhs.true.94:                                 ; preds = %lor.lhs.false.92
  %115 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %hscroll = getelementptr inbounds %struct.saved_window, %struct.saved_window* %115, i32 0, i32 16
  %116 = load i64, i64* %hscroll, align 8
  %117 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %hscroll95 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %117, i32 0, i32 16
  %118 = load i64, i64* %hscroll95, align 8
  %cmp96 = icmp eq i64 %116, %118
  br i1 %cmp96, label %lor.lhs.false.98, label %if.then.154

lor.lhs.false.98:                                 ; preds = %land.lhs.true.94
  %119 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %min_hscroll = getelementptr inbounds %struct.saved_window, %struct.saved_window* %119, i32 0, i32 17
  %120 = load i64, i64* %min_hscroll, align 8
  %121 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %min_hscroll99 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %121, i32 0, i32 17
  %122 = load i64, i64* %min_hscroll99, align 8
  %cmp100 = icmp eq i64 %120, %122
  br i1 %cmp100, label %lor.lhs.false.102, label %if.then.154

lor.lhs.false.102:                                ; preds = %lor.lhs.false.98
  %123 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %start_at_line_beg = getelementptr inbounds %struct.saved_window, %struct.saved_window* %123, i32 0, i32 22
  %124 = load i64, i64* %start_at_line_beg, align 8
  %125 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %start_at_line_beg103 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %125, i32 0, i32 22
  %126 = load i64, i64* %start_at_line_beg103, align 8
  %cmp104 = icmp eq i64 %124, %126
  br i1 %cmp104, label %lor.lhs.false.106, label %if.then.154

lor.lhs.false.106:                                ; preds = %lor.lhs.false.102
  %127 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %start = getelementptr inbounds %struct.saved_window, %struct.saved_window* %127, i32 0, i32 3
  %128 = load i64, i64* %start, align 8
  %129 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %start107 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %129, i32 0, i32 3
  %130 = load i64, i64* %start107, align 8
  %call108 = call i64 @Fequal(i64 %128, i64 %130)
  %call109 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp110 = icmp eq i64 %call108, %call109
  br i1 %cmp110, label %if.then.154, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %lor.lhs.false.106
  %131 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %pointm = getelementptr inbounds %struct.saved_window, %struct.saved_window* %131, i32 0, i32 4
  %132 = load i64, i64* %pointm, align 8
  %133 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %pointm113 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %133, i32 0, i32 4
  %134 = load i64, i64* %pointm113, align 8
  %call114 = call i64 @Fequal(i64 %132, i64 %134)
  %call115 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp116 = icmp eq i64 %call114, %call115
  br i1 %cmp116, label %if.then.154, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %lor.lhs.false.112, %lor.lhs.false.92
  %135 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %left_margin_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %135, i32 0, i32 24
  %136 = load i64, i64* %left_margin_cols, align 8
  %137 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %left_margin_cols119 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %137, i32 0, i32 24
  %138 = load i64, i64* %left_margin_cols119, align 8
  %cmp120 = icmp eq i64 %136, %138
  br i1 %cmp120, label %lor.lhs.false.122, label %if.then.154

lor.lhs.false.122:                                ; preds = %lor.lhs.false.118
  %139 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %right_margin_cols = getelementptr inbounds %struct.saved_window, %struct.saved_window* %139, i32 0, i32 25
  %140 = load i64, i64* %right_margin_cols, align 8
  %141 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %right_margin_cols123 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %141, i32 0, i32 25
  %142 = load i64, i64* %right_margin_cols123, align 8
  %cmp124 = icmp eq i64 %140, %142
  br i1 %cmp124, label %lor.lhs.false.126, label %if.then.154

lor.lhs.false.126:                                ; preds = %lor.lhs.false.122
  %143 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %left_fringe_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %143, i32 0, i32 26
  %144 = load i64, i64* %left_fringe_width, align 8
  %145 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %left_fringe_width127 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %145, i32 0, i32 26
  %146 = load i64, i64* %left_fringe_width127, align 8
  %cmp128 = icmp eq i64 %144, %146
  br i1 %cmp128, label %lor.lhs.false.130, label %if.then.154

lor.lhs.false.130:                                ; preds = %lor.lhs.false.126
  %147 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %right_fringe_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %147, i32 0, i32 27
  %148 = load i64, i64* %right_fringe_width, align 8
  %149 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %right_fringe_width131 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %149, i32 0, i32 27
  %150 = load i64, i64* %right_fringe_width131, align 8
  %cmp132 = icmp eq i64 %148, %150
  br i1 %cmp132, label %lor.lhs.false.134, label %if.then.154

lor.lhs.false.134:                                ; preds = %lor.lhs.false.130
  %151 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.saved_window, %struct.saved_window* %151, i32 0, i32 28
  %152 = load i64, i64* %fringes_outside_margins, align 8
  %153 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %fringes_outside_margins135 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %153, i32 0, i32 28
  %154 = load i64, i64* %fringes_outside_margins135, align 8
  %cmp136 = icmp eq i64 %152, %154
  br i1 %cmp136, label %lor.lhs.false.138, label %if.then.154

lor.lhs.false.138:                                ; preds = %lor.lhs.false.134
  %155 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %scroll_bar_width = getelementptr inbounds %struct.saved_window, %struct.saved_window* %155, i32 0, i32 29
  %156 = load i64, i64* %scroll_bar_width, align 8
  %157 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %scroll_bar_width139 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %157, i32 0, i32 29
  %158 = load i64, i64* %scroll_bar_width139, align 8
  %cmp140 = icmp eq i64 %156, %158
  br i1 %cmp140, label %lor.lhs.false.142, label %if.then.154

lor.lhs.false.142:                                ; preds = %lor.lhs.false.138
  %159 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %scroll_bar_height = getelementptr inbounds %struct.saved_window, %struct.saved_window* %159, i32 0, i32 32
  %160 = load i64, i64* %scroll_bar_height, align 8
  %161 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %scroll_bar_height143 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %161, i32 0, i32 32
  %162 = load i64, i64* %scroll_bar_height143, align 8
  %cmp144 = icmp eq i64 %160, %162
  br i1 %cmp144, label %lor.lhs.false.146, label %if.then.154

lor.lhs.false.146:                                ; preds = %lor.lhs.false.142
  %163 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.saved_window, %struct.saved_window* %163, i32 0, i32 30
  %164 = load i64, i64* %vertical_scroll_bar_type, align 8
  %165 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %vertical_scroll_bar_type147 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %165, i32 0, i32 30
  %166 = load i64, i64* %vertical_scroll_bar_type147, align 8
  %cmp148 = icmp eq i64 %164, %166
  br i1 %cmp148, label %lor.lhs.false.150, label %if.then.154

lor.lhs.false.150:                                ; preds = %lor.lhs.false.146
  %167 = load %struct.saved_window*, %struct.saved_window** %sw1, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.saved_window, %struct.saved_window* %167, i32 0, i32 33
  %168 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %169 = load %struct.saved_window*, %struct.saved_window** %sw2, align 8
  %horizontal_scroll_bar_type151 = getelementptr inbounds %struct.saved_window, %struct.saved_window* %169, i32 0, i32 33
  %170 = load i64, i64* %horizontal_scroll_bar_type151, align 8
  %cmp152 = icmp eq i64 %168, %170
  br i1 %cmp152, label %if.end.155, label %if.then.154

if.then.154:                                      ; preds = %lor.lhs.false.150, %lor.lhs.false.146, %lor.lhs.false.142, %lor.lhs.false.138, %lor.lhs.false.134, %lor.lhs.false.130, %lor.lhs.false.126, %lor.lhs.false.122, %lor.lhs.false.118, %lor.lhs.false.112, %lor.lhs.false.106, %lor.lhs.false.102, %lor.lhs.false.98, %land.lhs.true.94, %lor.lhs.false.88, %lor.lhs.false.84, %lor.lhs.false.80, %lor.lhs.false.76, %lor.lhs.false.72, %lor.lhs.false.68, %lor.lhs.false.64, %lor.lhs.false.60, %lor.lhs.false.56, %lor.lhs.false.52, %lor.lhs.false.48, %lor.lhs.false.44, %for.body
  store i1 false, i1* %retval
  br label %return

if.end.155:                                       ; preds = %lor.lhs.false.150
  br label %for.inc

for.inc:                                          ; preds = %if.end.155
  %171 = load i64, i64* %i, align 8
  %inc = add nsw i64 %171, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.154, %if.then
  %172 = load i1, i1* %retval
  ret i1 %172
}

declare i64 @Fequal(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fcompare_window_configurations(i64 %x, i64 %y) #0 {
entry:
  %retval = alloca i64, align 8
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64, i64* %x.addr, align 8
  %1 = load i64, i64* %y.addr, align 8
  %call = call zeroext i1 @compare_window_configurations(i64 %0, i64 %1, i1 zeroext true)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i64, i64* %retval
  ret i64 %2
}

; Function Attrs: nounwind uwtable
define void @init_window_once() #0 {
entry:
  %f = alloca %struct.frame*, align 8
  %call = call %struct.frame* @make_initial_frame()
  store %struct.frame* %call, %struct.frame** %f, align 8
  %0 = load %struct.frame*, %struct.frame** %f, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call1, i64* @selected_frame, align 8
  %2 = load i64, i64* @selected_frame, align 8
  store i64 %2, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 290), align 8
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 7
  %4 = load i64, i64* %minibuffer_window, align 8
  store i64 %4, i64* @minibuf_window, align 8
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 6
  %6 = load i64, i64* %selected_window, align 8
  store i64 %6, i64* @selected_window, align 8
  ret void
}

declare %struct.frame* @make_initial_frame() #1

; Function Attrs: nounwind uwtable
define void @init_window() #0 {
entry:
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* @Vwindow_list, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @syms_of_window() #0 {
entry:
  %call = call i64 @builtin_lisp_symbol(i32 838)
  %call1 = call i64 @builtin_lisp_symbol(i32 836)
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  %call3 = call i64 @Fput(i64 %call, i64 %call1, i64 %call2)
  %call4 = call i64 @builtin_lisp_symbol(i32 837)
  %call5 = call i64 @builtin_lisp_symbol(i32 836)
  %call6 = call i64 @builtin_lisp_symbol(i32 901)
  %call7 = call i64 @Fput(i64 %call4, i64 %call5, i64 %call6)
  call void @staticpro(i64* @Vwindow_list)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call8, i64* @minibuf_selected_window, align 8
  call void @staticpro(i64* @minibuf_selected_window)
  store i32 -1, i32* @window_scroll_pixel_based_preserve_x, align 4
  store i32 -1, i32* @window_scroll_pixel_based_preserve_y, align 4
  store i64 -1, i64* @window_scroll_preserve_hpos, align 8
  store i64 -1, i64* @window_scroll_preserve_vpos, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.22, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 288))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call9, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 288), align 8
  br label %do.body.10

do.body.10:                                       ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.23, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.24, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181))
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.10
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call12, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 181), align 8
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.11
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_window.b_fwd, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473))
  br label %do.end.14

do.end.14:                                        ; preds = %do.body.13
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  br label %do.body.15

do.body.15:                                       ; preds = %do.end.14
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.26, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211))
  br label %do.end.16

do.end.16:                                        ; preds = %do.body.15
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call17, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 211), align 8
  br label %do.body.18

do.body.18:                                       ; preds = %do.end.16
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_window.b_fwd.28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 423))
  br label %do.end.19

do.end.19:                                        ; preds = %do.body.18
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 423), align 1
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  call void @defvar_int(%struct.Lisp_Intfwd* @syms_of_window.i_fwd, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.30, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399))
  br label %do.end.21

do.end.21:                                        ; preds = %do.body.20
  store i64 2, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.31, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.32, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261))
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.22
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call24, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.23
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.33, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.34, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 331))
  br label %do.end.26

do.end.26:                                        ; preds = %do.body.25
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call27, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 331), align 8
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.26
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.35, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.36, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 329))
  br label %do.end.29

do.end.29:                                        ; preds = %do.body.28
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call30, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 329), align 8
  br label %do.body.31

do.body.31:                                       ; preds = %do.end.29
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.37, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.38, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 249))
  br label %do.end.32

do.end.32:                                        ; preds = %do.body.31
  %call33 = call i64 @builtin_lisp_symbol(i32 938)
  store i64 %call33, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 249), align 8
  br label %do.body.34

do.body.34:                                       ; preds = %do.end.32
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.39, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 328))
  br label %do.end.35

do.end.35:                                        ; preds = %do.body.34
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call36, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 328), align 8
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.35
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.41, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.42, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 327))
  br label %do.end.38

do.end.38:                                        ; preds = %do.body.37
  %call39 = call i64 @builtin_lisp_symbol(i32 1034)
  store i64 %call39, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 327), align 8
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.38
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_window.o_fwd.43, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.44, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330))
  br label %do.end.41

do.end.41:                                        ; preds = %do.body.40
  %call42 = call i64 @builtin_lisp_symbol(i32 266)
  %call43 = call i64 @builtin_lisp_symbol(i32 901)
  %call44 = call i64 @Fcons(i64 %call42, i64 %call43)
  %call45 = call i64 @list1(i64 %call44)
  store i64 %call45, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 330), align 8
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.41
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_window.b_fwd.45, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 498))
  br label %do.end.47

do.end.47:                                        ; preds = %do.body.46
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 498), align 1
  br label %do.body.48

do.body.48:                                       ; preds = %do.end.47
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_window.b_fwd.47, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 421))
  br label %do.end.49

do.end.49:                                        ; preds = %do.body.48
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 421), align 1
  call void @defsubr(%struct.Lisp_Subr* @Sselected_window)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sminibuffer_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_minibuffer_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindowp to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_valid_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_live_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_root_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_first_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_selected_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_frame_selected_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Spos_visible_in_window_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_line_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_parent to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_top_child to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_left_child to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_next_sibling to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_prev_sibling to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_combination_limit to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_combination_limit to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_use_time to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_pixel_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_pixel_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_total_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_total_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_normal_size to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_new_pixel to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_new_total to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_new_normal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_pixel_left to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_pixel_top to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_left_column to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_top_line to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_new_pixel to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_new_total to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_new_normal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_resize_apply to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_resize_apply_total to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_body_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_body_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_hscroll to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_hscroll to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_redisplay_end_trigger to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_redisplay_end_trigger to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_mode_line_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_header_line_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_right_divider_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_bottom_divider_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_scroll_bar_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_scroll_bar_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Scoordinates_in_window_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_at to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_point to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_old_point to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_start to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_end to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_point to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_start to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_dedicated_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_dedicated_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_display_table to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_display_table to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Snext_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sprevious_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow__sanitize_window_sizes to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sget_buffer_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdelete_other_windows_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sdelete_window_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sresize_mini_window_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_buffer to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Srun_window_configuration_change_hook to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Srun_window_scroll_functions to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sselect_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sforce_window_update to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Ssplit_window_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_up to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_down to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_left to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_right to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sother_window_for_scrolling)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_other_window to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sminibuffer_selected_window)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Srecenter to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_text_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_text_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Smove_to_window_line to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_configuration_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_configuration_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_configuration to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scurrent_window_configuration to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_margins to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_margins to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_fringes to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_fringes to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_scroll_bars to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_scroll_bars to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_vscroll to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_vscroll to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Scompare_window_configurations to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_list to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_list_1 to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_prev_buffers to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_prev_buffers to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_next_buffers to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_next_buffers to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_parameters to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_parameter to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_window_parameter to %struct.Lisp_Subr*))
  ret void
}

declare i64 @Fput(i64, i64, i64) #1

declare void @staticpro(i64*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_int(%struct.Lisp_Intfwd*, i8*, i64*) #1

declare i64 @list1(i64) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

; Function Attrs: nounwind uwtable
define void @keys_of_window() #0 {
entry:
  %0 = load i64, i64* @control_x_map, align 8
  call void @initial_define_key(i64 %0, i32 60, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49, i32 0, i32 0))
  %1 = load i64, i64* @control_x_map, align 8
  call void @initial_define_key(i64 %1, i32 62, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i32 0, i32 0))
  %2 = load i64, i64* @global_map, align 8
  call void @initial_define_key(i64 %2, i32 22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51, i32 0, i32 0))
  %3 = load i64, i64* @meta_map, align 8
  call void @initial_define_key(i64 %3, i32 22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i32 0, i32 0))
  %4 = load i64, i64* @meta_map, align 8
  call void @initial_define_key(i64 %4, i32 118, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.53, i32 0, i32 0))
  ret void
}

declare void @initial_define_key(i64, i32, i8*) #1

declare void @redisplay_other_windows() #1

declare i64 @Fselect_frame(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @select_window_1(i64 %window, i1 zeroext %inhibit_point_swap) #0 {
entry:
  %window.addr = alloca i64, align 8
  %inhibit_point_swap.addr = alloca i8, align 1
  %ow = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  %frombool = zext i1 %inhibit_point_swap to i8
  store i8 %frombool, i8* %inhibit_point_swap.addr, align 1
  %0 = load i8, i8* %inhibit_point_swap.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.end.46, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call, %struct.window** %ow, align 8
  %2 = load %struct.window*, %struct.window** %ow, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %3)
  br i1 %call1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %4 = load %struct.window*, %struct.window** %ow, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 12
  %5 = load i64, i64* %pointm, align 8
  %6 = load %struct.window*, %struct.window** %ow, align 8
  %contents3 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 10
  %7 = load i64, i64* %contents3, align 8
  %8 = load %struct.window*, %struct.window** %ow, align 8
  %contents4 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 10
  %9 = load i64, i64* %contents4, align 8
  %call5 = call %struct.buffer* @XBUFFER(i64 %9)
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp eq %struct.buffer* %call5, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.2
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 75
  %12 = load i64, i64* %pt, align 8
  %add = add nsw i64 %12, 0
  br label %cond.end.19

cond.false:                                       ; preds = %if.then.2
  %13 = load %struct.window*, %struct.window** %ow, align 8
  %contents6 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 10
  %14 = load i64, i64* %contents6, align 8
  %call7 = call %struct.buffer* @XBUFFER(i64 %14)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call7, i32 0, i32 45
  %15 = load i64, i64* %pt_marker_, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %15, %call8
  br i1 %cmp9, label %cond.true.10, label %cond.false.14

cond.true.10:                                     ; preds = %cond.false
  %16 = load %struct.window*, %struct.window** %ow, align 8
  %contents11 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 10
  %17 = load i64, i64* %contents11, align 8
  %call12 = call %struct.buffer* @XBUFFER(i64 %17)
  %pt13 = getelementptr inbounds %struct.buffer, %struct.buffer* %call12, i32 0, i32 75
  %18 = load i64, i64* %pt13, align 8
  br label %cond.end

cond.false.14:                                    ; preds = %cond.false
  %19 = load %struct.window*, %struct.window** %ow, align 8
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 10
  %20 = load i64, i64* %contents15, align 8
  %call16 = call %struct.buffer* @XBUFFER(i64 %20)
  %pt_marker_17 = getelementptr inbounds %struct.buffer, %struct.buffer* %call16, i32 0, i32 45
  %21 = load i64, i64* %pt_marker_17, align 8
  %call18 = call i64 @marker_position(i64 %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.14, %cond.true.10
  %cond = phi i64 [ %18, %cond.true.10 ], [ %call18, %cond.false.14 ]
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.end, %cond.true
  %cond20 = phi i64 [ %add, %cond.true ], [ %cond, %cond.end ]
  %22 = load %struct.window*, %struct.window** %ow, align 8
  %contents21 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 10
  %23 = load i64, i64* %contents21, align 8
  %call22 = call %struct.buffer* @XBUFFER(i64 %23)
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp23 = icmp eq %struct.buffer* %call22, %24
  br i1 %cmp23, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %cond.end.19
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 76
  %26 = load i64, i64* %pt_byte, align 8
  %add25 = add nsw i64 %26, 0
  br label %cond.end.43

cond.false.26:                                    ; preds = %cond.end.19
  %27 = load %struct.window*, %struct.window** %ow, align 8
  %contents27 = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 10
  %28 = load i64, i64* %contents27, align 8
  %call28 = call %struct.buffer* @XBUFFER(i64 %28)
  %pt_marker_29 = getelementptr inbounds %struct.buffer, %struct.buffer* %call28, i32 0, i32 45
  %29 = load i64, i64* %pt_marker_29, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %29, %call30
  br i1 %cmp31, label %cond.true.32, label %cond.false.36

cond.true.32:                                     ; preds = %cond.false.26
  %30 = load %struct.window*, %struct.window** %ow, align 8
  %contents33 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 10
  %31 = load i64, i64* %contents33, align 8
  %call34 = call %struct.buffer* @XBUFFER(i64 %31)
  %pt_byte35 = getelementptr inbounds %struct.buffer, %struct.buffer* %call34, i32 0, i32 76
  %32 = load i64, i64* %pt_byte35, align 8
  br label %cond.end.41

cond.false.36:                                    ; preds = %cond.false.26
  %33 = load %struct.window*, %struct.window** %ow, align 8
  %contents37 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 10
  %34 = load i64, i64* %contents37, align 8
  %call38 = call %struct.buffer* @XBUFFER(i64 %34)
  %pt_marker_39 = getelementptr inbounds %struct.buffer, %struct.buffer* %call38, i32 0, i32 45
  %35 = load i64, i64* %pt_marker_39, align 8
  %call40 = call i64 @marker_byte_position(i64 %35)
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.36, %cond.true.32
  %cond42 = phi i64 [ %32, %cond.true.32 ], [ %call40, %cond.false.36 ]
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.end.41, %cond.true.24
  %cond44 = phi i64 [ %add25, %cond.true.24 ], [ %cond42, %cond.end.41 ]
  %call45 = call i64 @set_marker_both(i64 %5, i64 %7, i64 %cond20, i64 %cond44)
  br label %if.end

if.end:                                           ; preds = %cond.end.43, %if.then
  br label %if.end.46

if.end.46:                                        ; preds = %if.end, %entry
  %36 = load i64, i64* %window.addr, align 8
  store i64 %36, i64* @selected_window, align 8
  %37 = load i64, i64* %window.addr, align 8
  %call47 = call %struct.window* @XWINDOW(i64 %37)
  %pointm48 = getelementptr inbounds %struct.window, %struct.window* %call47, i32 0, i32 12
  %38 = load i64, i64* %pointm48, align 8
  call void @set_point_from_marker(i64 %38)
  ret void
}

declare void @record_buffer(i64) #1

declare void @set_point_from_marker(i64) #1

; Function Attrs: nounwind uwtable
define internal void @decode_next_window_args(i64* %window, i64* %minibuf, i64* %all_frames) #0 {
entry:
  %window.addr = alloca i64*, align 8
  %minibuf.addr = alloca i64*, align 8
  %all_frames.addr = alloca i64*, align 8
  %w = alloca %struct.window*, align 8
  store i64* %window, i64** %window.addr, align 8
  store i64* %minibuf, i64** %minibuf.addr, align 8
  store i64* %all_frames, i64** %all_frames.addr, align 8
  %0 = load i64*, i64** %window.addr, align 8
  %1 = load i64, i64* %0, align 8
  %call = call %struct.window* @decode_live_window(i64 %1)
  store %struct.window* %call, %struct.window** %w, align 8
  %2 = load %struct.window*, %struct.window** %w, align 8
  %3 = bitcast %struct.window* %2 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %3, i32 5)
  %4 = load i64*, i64** %window.addr, align 8
  store i64 %call1, i64* %4, align 8
  %5 = load i64*, i64** %minibuf.addr, align 8
  %6 = load i64, i64* %5, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i64, i64* @minibuf_level, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load i64, i64* @minibuf_window, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call3 = call i64 @builtin_lisp_symbol(i32 598)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call3, %cond.false ]
  %9 = load i64*, i64** %minibuf.addr, align 8
  store i64 %cond, i64* %9, align 8
  br label %if.end.8

if.else:                                          ; preds = %entry
  %10 = load i64*, i64** %minibuf.addr, align 8
  %11 = load i64, i64* %10, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp5 = icmp eq i64 %11, %call4
  br i1 %cmp5, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %if.else
  %call7 = call i64 @builtin_lisp_symbol(i32 598)
  %12 = load i64*, i64** %minibuf.addr, align 8
  store i64 %call7, i64* %12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %cond.end
  %13 = load i64*, i64** %all_frames.addr, align 8
  %14 = load i64, i64* %13, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %14, %call9
  br i1 %cmp10, label %if.then.11, label %if.else.19

if.then.11:                                       ; preds = %if.end.8
  %15 = load i64*, i64** %minibuf.addr, align 8
  %16 = load i64, i64* %15, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 598)
  %cmp13 = icmp eq i64 %16, %call12
  br i1 %cmp13, label %cond.false.15, label %cond.true.14

cond.true.14:                                     ; preds = %if.then.11
  %17 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 1
  %18 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 7
  %21 = load i64, i64* %minibuffer_window, align 8
  br label %cond.end.17

cond.false.15:                                    ; preds = %if.then.11
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.15, %cond.true.14
  %cond18 = phi i64 [ %21, %cond.true.14 ], [ %call16, %cond.false.15 ]
  %22 = load i64*, i64** %all_frames.addr, align 8
  store i64 %cond18, i64* %22, align 8
  br label %if.end.38

if.else.19:                                       ; preds = %if.end.8
  %23 = load i64*, i64** %all_frames.addr, align 8
  %24 = load i64, i64* %23, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 1005)
  %cmp21 = icmp eq i64 %24, %call20
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %if.else.19
  br label %if.end.37

if.else.23:                                       ; preds = %if.else.19
  %25 = load i64*, i64** %all_frames.addr, align 8
  %26 = load i64, i64* %25, align 8
  %cmp24 = icmp eq i64 %26, 2
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.else.23
  br label %if.end.36

if.else.26:                                       ; preds = %if.else.23
  %27 = load i64*, i64** %all_frames.addr, align 8
  %28 = load i64, i64* %27, align 8
  %call27 = call zeroext i1 @FRAMEP(i64 %28)
  br i1 %call27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %if.else.26
  br label %if.end.35

if.else.29:                                       ; preds = %if.else.26
  %29 = load i64*, i64** %all_frames.addr, align 8
  %30 = load i64, i64* %29, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp31 = icmp eq i64 %30, %call30
  br i1 %cmp31, label %if.end.34, label %if.then.32

if.then.32:                                       ; preds = %if.else.29
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %31 = load i64*, i64** %all_frames.addr, align 8
  store i64 %call33, i64* %31, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.else.29
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.28
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.25
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then.22
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %cond.end.17
  ret void
}

declare i64 @Fmemq(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @candidate_window_p(i64 %window, i64 %owindow, i64 %minibuf, i64 %all_frames) #0 {
entry:
  %window.addr = alloca i64, align 8
  %owindow.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %all_frames.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %candidate_p = alloca i8, align 1
  store i64 %window, i64* %window.addr, align 8
  store i64 %owindow, i64* %owindow.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i64 %all_frames, i64* %all_frames.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  store i8 1, i8* %candidate_p, align 1
  %5 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %6)
  br i1 %call1, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8 0, i8* %candidate_p, align 1
  br label %if.end.111

if.else:                                          ; preds = %entry
  %7 = load %struct.window*, %struct.window** %w, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.else.7

land.lhs.true:                                    ; preds = %if.else
  %8 = load i64, i64* %minibuf.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 598)
  %cmp = icmp eq i64 %8, %call2
  br i1 %cmp, label %if.then.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i64, i64* %minibuf.addr, align 8
  %call3 = call zeroext i1 @WINDOWP(i64 %9)
  br i1 %call3, label %land.lhs.true.4, label %if.else.7

land.lhs.true.4:                                  ; preds = %lor.lhs.false
  %10 = load i64, i64* %minibuf.addr, align 8
  %11 = load i64, i64* %window.addr, align 8
  %cmp5 = icmp eq i64 %10, %11
  br i1 %cmp5, label %if.else.7, label %if.then.6

if.then.6:                                        ; preds = %land.lhs.true.4, %land.lhs.true
  store i8 0, i8* %candidate_p, align 1
  br label %if.end.110

if.else.7:                                        ; preds = %land.lhs.true.4, %lor.lhs.false, %if.else
  %12 = load i64, i64* %all_frames.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp9 = icmp eq i64 %12, %call8
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %if.else.7
  store i8 1, i8* %candidate_p, align 1
  br label %if.end.109

if.else.11:                                       ; preds = %if.else.7
  %13 = load i64, i64* %all_frames.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %13, %call12
  br i1 %cmp13, label %if.then.14, label %if.else.19

if.then.14:                                       ; preds = %if.else.11
  %14 = load %struct.window*, %struct.window** %w, align 8
  %frame15 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 1
  %15 = load i64, i64* %frame15, align 8
  %16 = load i64, i64* %owindow.addr, align 8
  %call16 = call %struct.window* @XWINDOW(i64 %16)
  %frame17 = getelementptr inbounds %struct.window, %struct.window* %call16, i32 0, i32 1
  %17 = load i64, i64* %frame17, align 8
  %cmp18 = icmp eq i64 %15, %17
  %frombool = zext i1 %cmp18 to i8
  store i8 %frombool, i8* %candidate_p, align 1
  br label %if.end.108

if.else.19:                                       ; preds = %if.else.11
  %18 = load i64, i64* %all_frames.addr, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 1005)
  %cmp21 = icmp eq i64 %18, %call20
  br i1 %cmp21, label %if.then.22, label %if.else.32

if.then.22:                                       ; preds = %if.else.19
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %visible to i64*
  %bf.load23 = load i64, i64* %20, align 8
  %bf.lshr = lshr i64 %bf.load23, 10
  %bf.clear24 = and i64 %bf.lshr, 3
  %bf.cast25 = trunc i64 %bf.clear24 to i32
  %tobool = icmp ne i32 %bf.cast25, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.22
  %21 = load %struct.window*, %struct.window** %w, align 8
  %frame26 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 1
  %22 = load i64, i64* %frame26, align 8
  %sub27 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub27 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 61
  %25 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %26 = load i64, i64* @selected_frame, align 8
  %sub28 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub28 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %terminal29 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 61
  %29 = load %struct.terminal*, %struct.terminal** %terminal29, align 8
  %cmp30 = icmp eq %struct.terminal* %25, %29
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.22
  %30 = phi i1 [ false, %if.then.22 ], [ %cmp30, %land.rhs ]
  %frombool31 = zext i1 %30 to i8
  store i8 %frombool31, i8* %candidate_p, align 1
  br label %if.end.107

if.else.32:                                       ; preds = %if.else.19
  %31 = load i64, i64* %all_frames.addr, align 8
  %and = and i64 %31, 7
  %conv = trunc i64 %and to i32
  %and33 = and i32 %conv, -5
  %cmp34 = icmp eq i32 %and33, 2
  br i1 %cmp34, label %land.lhs.true.36, label %if.else.82

land.lhs.true.36:                                 ; preds = %if.else.32
  %32 = load i64, i64* %all_frames.addr, align 8
  %shr = ashr i64 %32, 2
  %cmp37 = icmp eq i64 %shr, 0
  br i1 %cmp37, label %if.then.39, label %if.else.82

if.then.39:                                       ; preds = %land.lhs.true.36
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  %visible40 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 26
  %34 = bitcast i48* %visible40 to i64*
  %bf.load41 = load i64, i64* %34, align 8
  %bf.lshr42 = lshr i64 %bf.load41, 10
  %bf.clear43 = and i64 %bf.lshr42, 3
  %bf.cast44 = trunc i64 %bf.clear43 to i32
  %tobool45 = icmp ne i32 %bf.cast44, 0
  br i1 %tobool45, label %land.rhs.72, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %if.then.39
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 26
  %36 = bitcast i48* %iconified to i64*
  %bf.load47 = load i64, i64* %36, align 8
  %bf.lshr48 = lshr i64 %bf.load47, 12
  %bf.clear49 = and i64 %bf.lshr48, 1
  %bf.cast50 = trunc i64 %bf.clear49 to i1
  br i1 %bf.cast50, label %land.rhs.72, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.46
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 26
  %38 = bitcast i48* %output_method to i64*
  %bf.load53 = load i64, i64* %38, align 8
  %bf.lshr54 = lshr i64 %bf.load53, 23
  %bf.clear55 = and i64 %bf.lshr54, 7
  %bf.cast56 = trunc i64 %bf.clear55 to i32
  %cmp57 = icmp eq i32 %bf.cast56, 2
  br i1 %cmp57, label %land.lhs.true.59, label %land.end.80

land.lhs.true.59:                                 ; preds = %lor.lhs.false.52
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x, align 8
  %asked_for_visible = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 46
  %bf.load60 = load i8, i8* %asked_for_visible, align 8
  %bf.lshr61 = lshr i8 %bf.load60, 2
  %bf.clear62 = and i8 %bf.lshr61, 1
  %bf.cast63 = trunc i8 %bf.clear62 to i1
  br i1 %bf.cast63, label %land.lhs.true.65, label %land.end.80

land.lhs.true.65:                                 ; preds = %land.lhs.true.59
  %41 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data66 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 62
  %x67 = bitcast %union.output_data* %output_data66 to %struct.x_output**
  %42 = load %struct.x_output*, %struct.x_output** %x67, align 8
  %has_been_visible = getelementptr inbounds %struct.x_output, %struct.x_output* %42, i32 0, i32 46
  %bf.load68 = load i8, i8* %has_been_visible, align 8
  %bf.lshr69 = lshr i8 %bf.load68, 3
  %bf.clear70 = and i8 %bf.lshr69, 1
  %bf.cast71 = trunc i8 %bf.clear70 to i1
  br i1 %bf.cast71, label %land.end.80, label %land.rhs.72

land.rhs.72:                                      ; preds = %land.lhs.true.65, %lor.lhs.false.46, %if.then.39
  %43 = load %struct.window*, %struct.window** %w, align 8
  %frame73 = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 1
  %44 = load i64, i64* %frame73, align 8
  %sub74 = sub nsw i64 %44, 5
  %45 = inttoptr i64 %sub74 to i8*
  %46 = bitcast i8* %45 to %struct.frame*
  %terminal75 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 61
  %47 = load %struct.terminal*, %struct.terminal** %terminal75, align 8
  %48 = load i64, i64* @selected_frame, align 8
  %sub76 = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub76 to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %terminal77 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 61
  %51 = load %struct.terminal*, %struct.terminal** %terminal77, align 8
  %cmp78 = icmp eq %struct.terminal* %47, %51
  br label %land.end.80

land.end.80:                                      ; preds = %land.rhs.72, %land.lhs.true.65, %land.lhs.true.59, %lor.lhs.false.52
  %52 = phi i1 [ false, %land.lhs.true.65 ], [ false, %land.lhs.true.59 ], [ false, %lor.lhs.false.52 ], [ %cmp78, %land.rhs.72 ]
  %frombool81 = zext i1 %52 to i8
  store i8 %frombool81, i8* %candidate_p, align 1
  br label %if.end.106

if.else.82:                                       ; preds = %land.lhs.true.36, %if.else.32
  %53 = load i64, i64* %all_frames.addr, align 8
  %call83 = call zeroext i1 @WINDOWP(i64 %53)
  br i1 %call83, label %if.then.84, label %if.else.98

if.then.84:                                       ; preds = %if.else.82
  %54 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 7
  %55 = load i64, i64* %minibuffer_window, align 8
  %56 = load i64, i64* %all_frames.addr, align 8
  %cmp85 = icmp eq i64 %55, %56
  br i1 %cmp85, label %lor.end, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %if.then.84
  %57 = load i64, i64* %all_frames.addr, align 8
  %call88 = call %struct.window* @XWINDOW(i64 %57)
  %frame89 = getelementptr inbounds %struct.window, %struct.window* %call88, i32 0, i32 1
  %58 = load i64, i64* %frame89, align 8
  %59 = load %struct.window*, %struct.window** %w, align 8
  %frame90 = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 1
  %60 = load i64, i64* %frame90, align 8
  %cmp91 = icmp eq i64 %58, %60
  br i1 %cmp91, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.87
  %61 = load i64, i64* %all_frames.addr, align 8
  %call93 = call %struct.window* @XWINDOW(i64 %61)
  %frame94 = getelementptr inbounds %struct.window, %struct.window* %call93, i32 0, i32 1
  %62 = load i64, i64* %frame94, align 8
  %63 = load %struct.frame*, %struct.frame** %f, align 8
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 4
  %64 = load i64, i64* %focus_frame, align 8
  %cmp95 = icmp eq i64 %62, %64
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.87, %if.then.84
  %65 = phi i1 [ true, %lor.lhs.false.87 ], [ true, %if.then.84 ], [ %cmp95, %lor.rhs ]
  %frombool97 = zext i1 %65 to i8
  store i8 %frombool97, i8* %candidate_p, align 1
  br label %if.end.105

if.else.98:                                       ; preds = %if.else.82
  %66 = load i64, i64* %all_frames.addr, align 8
  %call99 = call zeroext i1 @FRAMEP(i64 %66)
  br i1 %call99, label %if.then.100, label %if.end

if.then.100:                                      ; preds = %if.else.98
  %67 = load i64, i64* %all_frames.addr, align 8
  %68 = load %struct.window*, %struct.window** %w, align 8
  %frame101 = getelementptr inbounds %struct.window, %struct.window* %68, i32 0, i32 1
  %69 = load i64, i64* %frame101, align 8
  %cmp102 = icmp eq i64 %67, %69
  %frombool104 = zext i1 %cmp102 to i8
  store i8 %frombool104, i8* %candidate_p, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.100, %if.else.98
  br label %if.end.105

if.end.105:                                       ; preds = %if.end, %lor.end
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %land.end.80
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %land.end
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.then.14
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then.10
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.6
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.then
  %70 = load i8, i8* %candidate_p, align 1
  %tobool112 = trunc i8 %70 to i1
  ret i1 %tobool112
}

declare void @XSETCDR(i64, i64) #1

declare i64 @nconc2(i64, i64) #1

declare i64 @call5(i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare i64 @call0(i64) #1

declare void @temp_set_point_both(%struct.buffer*, i64, i64) #1

declare zeroext i1 @NUMBERP(i64) #1

declare void @specbind(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @window_scroll_pixel_based(i64 %window, i32 %n, i1 zeroext %whole, i1 zeroext %noerror) #0 {
entry:
  %window.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %whole.addr = alloca i8, align 1
  %noerror.addr = alloca i8, align 1
  %it = alloca %struct.it, align 8
  %w = alloca %struct.window*, align 8
  %start = alloca %struct.text_pos, align 8
  %this_scroll_margin = alloca i32, align 4
  %vscrolled = alloca i8, align 1
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %rtop = alloca i32, align 4
  %rbot = alloca i32, align 4
  %rowh = alloca i32, align 4
  %vpos = alloca i32, align 4
  %itdata = alloca i8*, align 8
  %window_total_lines = alloca i32, align 4
  %frame_line_height = alloca i32, align 4
  %adjust_old_pointm = alloca i8, align 1
  %px = alloca i32, align 4
  %dy = alloca i32, align 4
  %spos = alloca i64, align 8
  %start_pos = alloca i64, align 8
  %dy216 = alloca i32, align 4
  %pos357 = alloca i64, align 8
  %bytepos361 = alloca i64, align 8
  %last_y = alloca i32, align 4
  %goal_y = alloca i32, align 4
  %prev = alloca i32, align 4
  %charpos742 = alloca i64, align 8
  %bytepos743 = alloca i64, align 8
  %partial_p = alloca i8, align 1
  %it2 = alloca %struct.it, align 8
  %it_data = alloca i8*, align 8
  %goal_y959 = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %frombool = zext i1 %whole to i8
  store i8 %frombool, i8* %whole.addr, align 1
  %frombool1 = zext i1 %noerror to i8
  store i8 %frombool1, i8* %noerror.addr, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  store i8 0, i8* %vscrolled, align 1
  store i8* null, i8** %itdata, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %call2 = call i32 @default_line_pixel_height(%struct.window* %1)
  store i32 %call2, i32* %frame_line_height, align 4
  %2 = load i64, i64* %window.addr, align 8
  %call3 = call i64 @Fwindow_point(i64 %2)
  %3 = load i64, i64* %window.addr, align 8
  %call4 = call i64 @Fwindow_old_point(i64 %3)
  %call5 = call i64 @Fequal(i64 %call3, i64 %call4)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call5, %call6
  %lnot = xor i1 %cmp, true
  %frombool7 = zext i1 %lnot to i8
  store i8 %frombool7, i8* %adjust_old_pointm, align 1
  %4 = load %struct.window*, %struct.window** %w, align 8
  %start8 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 11
  %5 = load i64, i64* %start8, align 8
  %call9 = call i64 @marker_position(i64 %5)
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  store i64 %call9, i64* %charpos, align 8
  %6 = load %struct.window*, %struct.window** %w, align 8
  %start10 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 11
  %7 = load i64, i64* %start10, align 8
  %call11 = call i64 @marker_byte_position(i64 %7)
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 1
  store i64 %call11, i64* %bytepos, align 8
  %charpos12 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  %8 = load i64, i64* %charpos12, align 8
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 79
  %10 = load i64, i64* %zv, align 8
  %cmp13 = icmp sgt i64 %8, %10
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 77
  %12 = load i64, i64* %begv, align 8
  %charpos14 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  store i64 %12, i64* %charpos14, align 8
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 78
  %14 = load i64, i64* %begv_byte, align 8
  %bytepos15 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 1
  store i64 %14, i64* %bytepos15, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.window*, %struct.window** %w, align 8
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 75
  %17 = load i64, i64* %pt, align 8
  %add = add nsw i64 %17, 0
  %call16 = call zeroext i1 @pos_visible_p(%struct.window* %15, i64 %add, i32* %x, i32* %y, i32* %rtop, i32* %rbot, i32* %rowh, i32* %vpos)
  br i1 %call16, label %if.else, label %if.then.17

if.then.17:                                       ; preds = %if.end
  %call18 = call i8* @bidi_shelve_cache()
  store i8* %call18, i8** %itdata, align 8
  %18 = load %struct.window*, %struct.window** %w, align 8
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt19 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 75
  %20 = load i64, i64* %pt19, align 8
  %add20 = add nsw i64 %20, 0
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 76
  %22 = load i64, i64* %pt_byte, align 8
  %add21 = add nsw i64 %22, 0
  call void @init_iterator(%struct.it* %it, %struct.window* %18, i64 %add20, i64 %add21, %struct.glyph_row* null, i32 0)
  %last_visible_y = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %23 = load i32, i32* %last_visible_y, align 4
  %current_y = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  store i32 %23, i32* %current_y, align 4
  %24 = load %struct.window*, %struct.window** %w, align 8
  %call22 = call i32 @window_box_height(%struct.window* %24)
  %div = sdiv i32 %call22, 2
  call void @move_it_vertically_backward(%struct.it* %it, i32 %div)
  %current_y23 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %25 = load i32, i32* %current_y23, align 4
  %cmp24 = icmp sle i32 %25, 0
  br i1 %cmp24, label %if.then.25, label %if.end.31

if.then.25:                                       ; preds = %if.then.17
  %26 = load %struct.window*, %struct.window** %w, align 8
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt26 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt26, align 8
  %add27 = add nsw i64 %28, 0
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte28 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 76
  %30 = load i64, i64* %pt_byte28, align 8
  %add29 = add nsw i64 %30, 0
  call void @init_iterator(%struct.it* %it, %struct.window* %26, i64 %add27, i64 %add29, %struct.glyph_row* null, i32 0)
  call void @move_it_vertically_backward(%struct.it* %it, i32 0)
  %current_y30 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  store i32 0, i32* %current_y30, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.25, %if.then.17
  %current = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current, i32 0, i32 0
  %31 = bitcast %struct.text_pos* %start to i8*
  %32 = bitcast %struct.text_pos* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  %33 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %33, i1 zeroext false)
  br label %if.end.184

if.else:                                          ; preds = %if.end
  %34 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 423), align 1
  %tobool = trunc i8 %34 to i1
  br i1 %tobool, label %if.then.32, label %if.end.183

if.then.32:                                       ; preds = %if.else
  %35 = load i32, i32* %rtop, align 4
  %tobool33 = icmp ne i32 %35, 0
  br i1 %tobool33, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.32
  %36 = load i32, i32* %rbot, align 4
  %tobool34 = icmp ne i32 %36, 0
  br i1 %tobool34, label %if.then.35, label %if.end.180

if.then.35:                                       ; preds = %lor.lhs.false, %if.then.32
  %37 = load i32, i32* %frame_line_height, align 4
  store i32 %37, i32* %dy, align 4
  %38 = load i8, i8* %whole.addr, align 1
  %tobool36 = trunc i8 %38 to i1
  br i1 %tobool36, label %if.then.37, label %if.end.52

if.then.37:                                       ; preds = %if.then.35
  %39 = load %struct.window*, %struct.window** %w, align 8
  %call38 = call i32 @window_box_height(%struct.window* %39)
  %40 = load i32, i32* %dy, align 4
  %div39 = sdiv i32 %call38, %40
  %conv = sext i32 %div39 to i64
  %41 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub = sub nsw i64 %conv, %41
  %42 = load i32, i32* %dy, align 4
  %conv40 = sext i32 %42 to i64
  %mul = mul nsw i64 %sub, %conv40
  %43 = load i32, i32* %dy, align 4
  %conv41 = sext i32 %43 to i64
  %cmp42 = icmp sgt i64 %mul, %conv41
  br i1 %cmp42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.37
  %44 = load %struct.window*, %struct.window** %w, align 8
  %call44 = call i32 @window_box_height(%struct.window* %44)
  %45 = load i32, i32* %dy, align 4
  %div45 = sdiv i32 %call44, %45
  %conv46 = sext i32 %div45 to i64
  %46 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub47 = sub nsw i64 %conv46, %46
  %47 = load i32, i32* %dy, align 4
  %conv48 = sext i32 %47 to i64
  %mul49 = mul nsw i64 %sub47, %conv48
  br label %cond.end

cond.false:                                       ; preds = %if.then.37
  %48 = load i32, i32* %dy, align 4
  %conv50 = sext i32 %48 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul49, %cond.true ], [ %conv50, %cond.false ]
  %conv51 = trunc i64 %cond to i32
  store i32 %conv51, i32* %dy, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %cond.end, %if.then.35
  %49 = load i32, i32* %n.addr, align 4
  %50 = load i32, i32* %dy, align 4
  %mul53 = mul nsw i32 %50, %49
  store i32 %mul53, i32* %dy, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp54 = icmp slt i32 %51, 0
  br i1 %cmp54, label %if.then.56, label %if.end.95

if.then.56:                                       ; preds = %if.end.52
  %52 = load %struct.window*, %struct.window** %w, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 68
  %53 = load i32, i32* %vscroll, align 4
  %cmp57 = icmp slt i32 %53, 0
  br i1 %cmp57, label %land.lhs.true, label %if.end.94

land.lhs.true:                                    ; preds = %if.then.56
  %54 = load i32, i32* %rtop, align 4
  %cmp59 = icmp sgt i32 %54, 0
  br i1 %cmp59, label %if.then.61, label %if.end.94

if.then.61:                                       ; preds = %land.lhs.true
  %55 = load %struct.window*, %struct.window** %w, align 8
  %vscroll62 = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 68
  %56 = load i32, i32* %vscroll62, align 4
  %sub63 = sub nsw i32 0, %56
  %57 = load i32, i32* %rtop, align 4
  %58 = load i32, i32* %dy, align 4
  %sub64 = sub nsw i32 0, %58
  %cmp65 = icmp slt i32 %57, %sub64
  br i1 %cmp65, label %cond.true.67, label %cond.false.68

cond.true.67:                                     ; preds = %if.then.61
  %59 = load i32, i32* %rtop, align 4
  br label %cond.end.70

cond.false.68:                                    ; preds = %if.then.61
  %60 = load i32, i32* %dy, align 4
  %sub69 = sub nsw i32 0, %60
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.false.68, %cond.true.67
  %cond71 = phi i32 [ %59, %cond.true.67 ], [ %sub69, %cond.false.68 ]
  %sub72 = sub nsw i32 %sub63, %cond71
  %cmp73 = icmp sgt i32 0, %sub72
  br i1 %cmp73, label %cond.true.75, label %cond.false.76

cond.true.75:                                     ; preds = %cond.end.70
  br label %cond.end.88

cond.false.76:                                    ; preds = %cond.end.70
  %61 = load %struct.window*, %struct.window** %w, align 8
  %vscroll77 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 68
  %62 = load i32, i32* %vscroll77, align 4
  %sub78 = sub nsw i32 0, %62
  %63 = load i32, i32* %rtop, align 4
  %64 = load i32, i32* %dy, align 4
  %sub79 = sub nsw i32 0, %64
  %cmp80 = icmp slt i32 %63, %sub79
  br i1 %cmp80, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %cond.false.76
  %65 = load i32, i32* %rtop, align 4
  br label %cond.end.85

cond.false.83:                                    ; preds = %cond.false.76
  %66 = load i32, i32* %dy, align 4
  %sub84 = sub nsw i32 0, %66
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.false.83, %cond.true.82
  %cond86 = phi i32 [ %65, %cond.true.82 ], [ %sub84, %cond.false.83 ]
  %sub87 = sub nsw i32 %sub78, %cond86
  br label %cond.end.88

cond.end.88:                                      ; preds = %cond.end.85, %cond.true.75
  %cond89 = phi i32 [ 0, %cond.true.75 ], [ %sub87, %cond.end.85 ]
  store i32 %cond89, i32* %px, align 4
  %67 = load i64, i64* %window.addr, align 8
  %68 = load i32, i32* %px, align 4
  %conv90 = sext i32 %68 to i64
  %shl = shl i64 %conv90, 2
  %add91 = add i64 %shl, 2
  %call92 = call i64 @builtin_lisp_symbol(i32 901)
  %call93 = call i64 @Fset_window_vscroll(i64 %67, i64 %add91, i64 %call92)
  br label %if.end.1044

if.end.94:                                        ; preds = %land.lhs.true, %if.then.56
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.end.52
  %69 = load i32, i32* %n.addr, align 4
  %cmp96 = icmp sgt i32 %69, 0
  br i1 %cmp96, label %if.then.98, label %if.end.179

if.then.98:                                       ; preds = %if.end.95
  %70 = load i32, i32* %rbot, align 4
  %cmp99 = icmp sgt i32 %70, 0
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.138

land.lhs.true.101:                                ; preds = %if.then.98
  %71 = load %struct.window*, %struct.window** %w, align 8
  %vscroll102 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 68
  %72 = load i32, i32* %vscroll102, align 4
  %cmp103 = icmp slt i32 %72, 0
  br i1 %cmp103, label %if.then.108, label %lor.lhs.false.105

lor.lhs.false.105:                                ; preds = %land.lhs.true.101
  %73 = load i32, i32* %vpos, align 4
  %cmp106 = icmp eq i32 %73, 0
  br i1 %cmp106, label %if.then.108, label %if.end.138

if.then.108:                                      ; preds = %lor.lhs.false.105, %land.lhs.true.101
  %74 = load %struct.window*, %struct.window** %w, align 8
  %vscroll109 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 68
  %75 = load i32, i32* %vscroll109, align 4
  %sub110 = sub nsw i32 0, %75
  %76 = load i32, i32* %rbot, align 4
  %77 = load i32, i32* %dy, align 4
  %cmp111 = icmp slt i32 %76, %77
  br i1 %cmp111, label %cond.true.113, label %cond.false.114

cond.true.113:                                    ; preds = %if.then.108
  %78 = load i32, i32* %rbot, align 4
  br label %cond.end.115

cond.false.114:                                   ; preds = %if.then.108
  %79 = load i32, i32* %dy, align 4
  br label %cond.end.115

cond.end.115:                                     ; preds = %cond.false.114, %cond.true.113
  %cond116 = phi i32 [ %78, %cond.true.113 ], [ %79, %cond.false.114 ]
  %add117 = add nsw i32 %sub110, %cond116
  %cmp118 = icmp sgt i32 0, %add117
  br i1 %cmp118, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %cond.end.115
  br label %cond.end.131

cond.false.121:                                   ; preds = %cond.end.115
  %80 = load %struct.window*, %struct.window** %w, align 8
  %vscroll122 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 68
  %81 = load i32, i32* %vscroll122, align 4
  %sub123 = sub nsw i32 0, %81
  %82 = load i32, i32* %rbot, align 4
  %83 = load i32, i32* %dy, align 4
  %cmp124 = icmp slt i32 %82, %83
  br i1 %cmp124, label %cond.true.126, label %cond.false.127

cond.true.126:                                    ; preds = %cond.false.121
  %84 = load i32, i32* %rbot, align 4
  br label %cond.end.128

cond.false.127:                                   ; preds = %cond.false.121
  %85 = load i32, i32* %dy, align 4
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.127, %cond.true.126
  %cond129 = phi i32 [ %84, %cond.true.126 ], [ %85, %cond.false.127 ]
  %add130 = add nsw i32 %sub123, %cond129
  br label %cond.end.131

cond.end.131:                                     ; preds = %cond.end.128, %cond.true.120
  %cond132 = phi i32 [ 0, %cond.true.120 ], [ %add130, %cond.end.128 ]
  store i32 %cond132, i32* %px, align 4
  %86 = load i64, i64* %window.addr, align 8
  %87 = load i32, i32* %px, align 4
  %conv133 = sext i32 %87 to i64
  %shl134 = shl i64 %conv133, 2
  %add135 = add i64 %shl134, 2
  %call136 = call i64 @builtin_lisp_symbol(i32 901)
  %call137 = call i64 @Fset_window_vscroll(i64 %86, i64 %add135, i64 %call136)
  br label %if.end.1044

if.end.138:                                       ; preds = %lor.lhs.false.105, %if.then.98
  %88 = load i32, i32* %rbot, align 4
  %cmp139 = icmp sgt i32 %88, 0
  br i1 %cmp139, label %if.then.145, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %if.end.138
  %89 = load %struct.window*, %struct.window** %w, align 8
  %vscroll142 = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 68
  %90 = load i32, i32* %vscroll142, align 4
  %cmp143 = icmp slt i32 %90, 0
  br i1 %cmp143, label %if.then.145, label %if.end.178

if.then.145:                                      ; preds = %lor.lhs.false.141, %if.end.138
  %91 = load i64, i64* %window.addr, align 8
  %call146 = call i64 @builtin_lisp_symbol(i32 901)
  %call147 = call i64 @Fset_window_vscroll(i64 %91, i64 2, i64 %call146)
  %92 = load i32, i32* %rbot, align 4
  %cmp148 = icmp sgt i32 %92, 0
  br i1 %cmp148, label %if.then.150, label %if.else.153

if.then.150:                                      ; preds = %if.then.145
  %call151 = call i64 @builtin_lisp_symbol(i32 0)
  %call152 = call i64 @Fline_beginning_position(i64 %call151)
  %shr = ashr i64 %call152, 2
  store i64 %shr, i64* %spos, align 8
  br label %if.end.170

if.else.153:                                      ; preds = %if.then.145
  %call154 = call i64 @builtin_lisp_symbol(i32 0)
  %call155 = call i64 @Fline_end_position(i64 %call154)
  %shr156 = ashr i64 %call155, 2
  %add157 = add nsw i64 %shr156, 1
  %93 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv158 = getelementptr inbounds %struct.buffer, %struct.buffer* %93, i32 0, i32 79
  %94 = load i64, i64* %zv158, align 8
  %cmp159 = icmp slt i64 %add157, %94
  br i1 %cmp159, label %cond.true.161, label %cond.false.166

cond.true.161:                                    ; preds = %if.else.153
  %call162 = call i64 @builtin_lisp_symbol(i32 0)
  %call163 = call i64 @Fline_end_position(i64 %call162)
  %shr164 = ashr i64 %call163, 2
  %add165 = add nsw i64 %shr164, 1
  br label %cond.end.168

cond.false.166:                                   ; preds = %if.else.153
  %95 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv167 = getelementptr inbounds %struct.buffer, %struct.buffer* %95, i32 0, i32 79
  %96 = load i64, i64* %zv167, align 8
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.false.166, %cond.true.161
  %cond169 = phi i64 [ %add165, %cond.true.161 ], [ %96, %cond.false.166 ]
  store i64 %cond169, i64* %spos, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %cond.end.168, %if.then.150
  %97 = load %struct.window*, %struct.window** %w, align 8
  %start171 = getelementptr inbounds %struct.window, %struct.window* %97, i32 0, i32 11
  %98 = load i64, i64* %start171, align 8
  %99 = load i64, i64* %spos, align 8
  %shl172 = shl i64 %99, 2
  %add173 = add i64 %shl172, 2
  %100 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 10
  %101 = load i64, i64* %contents, align 8
  %call174 = call i64 @set_marker_restricted(i64 %98, i64 %add173, i64 %101)
  %102 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 67
  %bf.load = load i16, i16* %start_at_line_beg, align 4
  %bf.clear = and i16 %bf.load, -17
  %bf.set = or i16 %bf.clear, 16
  store i16 %bf.set, i16* %start_at_line_beg, align 4
  %103 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_update_mode_line(%struct.window* %103)
  %104 = load %struct.window*, %struct.window** %w, align 8
  %force_start = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 67
  %bf.load175 = load i16, i16* %force_start, align 4
  %bf.clear176 = and i16 %bf.load175, -33
  %bf.set177 = or i16 %bf.clear176, 32
  store i16 %bf.set177, i16* %force_start, align 4
  br label %if.end.1044

if.end.178:                                       ; preds = %lor.lhs.false.141
  br label %if.end.179

if.end.179:                                       ; preds = %if.end.178, %if.end.95
  br label %if.end.180

if.end.180:                                       ; preds = %if.end.179, %lor.lhs.false
  %105 = load i64, i64* %window.addr, align 8
  %call181 = call i64 @builtin_lisp_symbol(i32 901)
  %call182 = call i64 @Fset_window_vscroll(i64 %105, i64 2, i64 %call181)
  br label %if.end.183

if.end.183:                                       ; preds = %if.end.180, %if.else
  br label %if.end.184

if.end.184:                                       ; preds = %if.end.183, %if.end.31
  %call185 = call i8* @bidi_shelve_cache()
  store i8* %call185, i8** %itdata, align 8
  %106 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call186 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp187 = icmp eq i64 %106, %call186
  br i1 %cmp187, label %if.else.209, label %if.then.189

if.then.189:                                      ; preds = %if.end.184
  %107 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  %cmp190 = icmp slt i32 %107, 0
  br i1 %cmp190, label %if.then.203, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %if.then.189
  %108 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %Vlast_command_ = getelementptr inbounds %struct.kboard, %struct.kboard* %108, i32 0, i32 2
  %109 = load i64, i64* %Vlast_command_, align 8
  %and = and i64 %109, 7
  %conv193 = trunc i64 %and to i32
  %cmp194 = icmp eq i32 %conv193, 0
  br i1 %cmp194, label %lor.lhs.false.196, label %if.then.203

lor.lhs.false.196:                                ; preds = %lor.lhs.false.192
  %110 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %Vlast_command_197 = getelementptr inbounds %struct.kboard, %struct.kboard* %110, i32 0, i32 2
  %111 = load i64, i64* %Vlast_command_197, align 8
  %call198 = call i64 @builtin_lisp_symbol(i32 836)
  %call199 = call i64 @Fget(i64 %111, i64 %call198)
  %call200 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp201 = icmp eq i64 %call199, %call200
  br i1 %cmp201, label %if.then.203, label %if.end.208

if.then.203:                                      ; preds = %lor.lhs.false.196, %lor.lhs.false.192, %if.then.189
  %112 = load %struct.window*, %struct.window** %w, align 8
  %113 = bitcast %struct.text_pos* %start to { i64, i64 }*
  %114 = getelementptr { i64, i64 }, { i64, i64 }* %113, i32 0, i32 0
  %115 = load i64, i64* %114, align 1
  %116 = getelementptr { i64, i64 }, { i64, i64 }* %113, i32 0, i32 1
  %117 = load i64, i64* %116, align 1
  call void @start_display(%struct.it* %it, %struct.window* %112, i64 %115, i64 %117)
  %118 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt204 = getelementptr inbounds %struct.buffer, %struct.buffer* %118, i32 0, i32 75
  %119 = load i64, i64* %pt204, align 8
  %add205 = add nsw i64 %119, 0
  %call206 = call i32 @move_it_to(%struct.it* %it, i64 %add205, i32 -1, i32 -1, i32 -1, i32 8)
  %current_y207 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %120 = load i32, i32* %current_y207, align 4
  store i32 %120, i32* @window_scroll_pixel_based_preserve_y, align 4
  %current_x = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 71
  %121 = load i32, i32* %current_x, align 4
  store i32 %121, i32* @window_scroll_pixel_based_preserve_x, align 4
  br label %if.end.208

if.end.208:                                       ; preds = %if.then.203, %lor.lhs.false.196
  br label %if.end.210

if.else.209:                                      ; preds = %if.end.184
  store i32 -1, i32* @window_scroll_pixel_based_preserve_x, align 4
  store i32 -1, i32* @window_scroll_pixel_based_preserve_y, align 4
  br label %if.end.210

if.end.210:                                       ; preds = %if.else.209, %if.end.208
  %122 = load %struct.window*, %struct.window** %w, align 8
  %123 = bitcast %struct.text_pos* %start to { i64, i64 }*
  %124 = getelementptr { i64, i64 }, { i64, i64 }* %123, i32 0, i32 0
  %125 = load i64, i64* %124, align 1
  %126 = getelementptr { i64, i64 }, { i64, i64 }* %123, i32 0, i32 1
  %127 = load i64, i64* %126, align 1
  call void @start_display(%struct.it* %it, %struct.window* %122, i64 %125, i64 %127)
  %128 = load i8, i8* %whole.addr, align 1
  %tobool211 = trunc i8 %128 to i1
  br i1 %tobool211, label %if.then.212, label %if.else.275

if.then.212:                                      ; preds = %if.end.210
  %current213 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos214 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current213, i32 0, i32 0
  %charpos215 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos214, i32 0, i32 0
  %129 = load i64, i64* %charpos215, align 8
  store i64 %129, i64* %start_pos, align 8
  %130 = load i32, i32* %frame_line_height, align 4
  store i32 %130, i32* %dy216, align 4
  %131 = load %struct.window*, %struct.window** %w, align 8
  %call217 = call i32 @window_box_height(%struct.window* %131)
  %132 = load i32, i32* %dy216, align 4
  %div218 = sdiv i32 %call217, %132
  %conv219 = sext i32 %div218 to i64
  %133 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub220 = sub nsw i64 %conv219, %133
  %134 = load i32, i32* %dy216, align 4
  %conv221 = sext i32 %134 to i64
  %mul222 = mul nsw i64 %sub220, %conv221
  %135 = load i32, i32* %dy216, align 4
  %conv223 = sext i32 %135 to i64
  %cmp224 = icmp sgt i64 %mul222, %conv223
  br i1 %cmp224, label %cond.true.226, label %cond.false.233

cond.true.226:                                    ; preds = %if.then.212
  %136 = load %struct.window*, %struct.window** %w, align 8
  %call227 = call i32 @window_box_height(%struct.window* %136)
  %137 = load i32, i32* %dy216, align 4
  %div228 = sdiv i32 %call227, %137
  %conv229 = sext i32 %div228 to i64
  %138 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub230 = sub nsw i64 %conv229, %138
  %139 = load i32, i32* %dy216, align 4
  %conv231 = sext i32 %139 to i64
  %mul232 = mul nsw i64 %sub230, %conv231
  br label %cond.end.235

cond.false.233:                                   ; preds = %if.then.212
  %140 = load i32, i32* %dy216, align 4
  %conv234 = sext i32 %140 to i64
  br label %cond.end.235

cond.end.235:                                     ; preds = %cond.false.233, %cond.true.226
  %cond236 = phi i64 [ %mul232, %cond.true.226 ], [ %conv234, %cond.false.233 ]
  %141 = load i32, i32* %n.addr, align 4
  %conv237 = sext i32 %141 to i64
  %mul238 = mul nsw i64 %cond236, %conv237
  %conv239 = trunc i64 %mul238 to i32
  store i32 %conv239, i32* %dy216, align 4
  %142 = load i32, i32* %dy216, align 4
  %cmp240 = icmp sle i32 %142, 0
  br i1 %cmp240, label %if.then.242, label %if.else.252

if.then.242:                                      ; preds = %cond.end.235
  %143 = load i32, i32* %dy216, align 4
  %sub243 = sub nsw i32 0, %143
  call void @move_it_vertically_backward(%struct.it* %it, i32 %sub243)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.242
  %144 = load i64, i64* %start_pos, align 8
  %current244 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos245 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current244, i32 0, i32 0
  %charpos246 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos245, i32 0, i32 0
  %145 = load i64, i64* %charpos246, align 8
  %cmp247 = icmp eq i64 %144, %145
  br i1 %cmp247, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %146 = load i64, i64* %start_pos, align 8
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv249 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 77
  %148 = load i64, i64* %begv249, align 8
  %cmp250 = icmp sgt i64 %146, %148
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %149 = phi i1 [ false, %while.cond ], [ %cmp250, %land.rhs ]
  br i1 %149, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @move_it_by_lines(%struct.it* %it, i64 -1)
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end.274

if.else.252:                                      ; preds = %cond.end.235
  %150 = load i32, i32* %dy216, align 4
  %cmp253 = icmp sgt i32 %150, 0
  br i1 %cmp253, label %if.then.255, label %if.end.273

if.then.255:                                      ; preds = %if.else.252
  %151 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv256 = getelementptr inbounds %struct.buffer, %struct.buffer* %151, i32 0, i32 79
  %152 = load i64, i64* %zv256, align 8
  %current_y257 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %153 = load i32, i32* %current_y257, align 4
  %154 = load i32, i32* %dy216, align 4
  %add258 = add nsw i32 %153, %154
  %call259 = call i32 @move_it_to(%struct.it* %it, i64 %152, i32 -1, i32 %add258, i32 -1, i32 10)
  br label %while.cond.260

while.cond.260:                                   ; preds = %while.body.271, %if.then.255
  %155 = load i64, i64* %start_pos, align 8
  %current261 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos262 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current261, i32 0, i32 0
  %charpos263 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos262, i32 0, i32 0
  %156 = load i64, i64* %charpos263, align 8
  %cmp264 = icmp eq i64 %155, %156
  br i1 %cmp264, label %land.rhs.266, label %land.end.270

land.rhs.266:                                     ; preds = %while.cond.260
  %157 = load i64, i64* %start_pos, align 8
  %158 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv267 = getelementptr inbounds %struct.buffer, %struct.buffer* %158, i32 0, i32 79
  %159 = load i64, i64* %zv267, align 8
  %cmp268 = icmp slt i64 %157, %159
  br label %land.end.270

land.end.270:                                     ; preds = %land.rhs.266, %while.cond.260
  %160 = phi i1 [ false, %while.cond.260 ], [ %cmp268, %land.rhs.266 ]
  br i1 %160, label %while.body.271, label %while.end.272

while.body.271:                                   ; preds = %land.end.270
  call void @move_it_by_lines(%struct.it* %it, i64 1)
  br label %while.cond.260

while.end.272:                                    ; preds = %land.end.270
  br label %if.end.273

if.end.273:                                       ; preds = %while.end.272, %if.else.252
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %while.end
  br label %if.end.277

if.else.275:                                      ; preds = %if.end.210
  %161 = load i32, i32* %n.addr, align 4
  %conv276 = sext i32 %161 to i64
  call void @move_it_by_lines(%struct.it* %it, i64 %conv276)
  br label %if.end.277

if.end.277:                                       ; preds = %if.else.275, %if.end.274
  %162 = load i32, i32* %n.addr, align 4
  %cmp278 = icmp sgt i32 %162, 0
  br i1 %cmp278, label %land.lhs.true.280, label %lor.lhs.false.287

land.lhs.true.280:                                ; preds = %if.end.277
  %current281 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos282 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current281, i32 0, i32 0
  %charpos283 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos282, i32 0, i32 0
  %163 = load i64, i64* %charpos283, align 8
  %164 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv284 = getelementptr inbounds %struct.buffer, %struct.buffer* %164, i32 0, i32 79
  %165 = load i64, i64* %zv284, align 8
  %cmp285 = icmp eq i64 %163, %165
  br i1 %cmp285, label %if.then.297, label %lor.lhs.false.287

lor.lhs.false.287:                                ; preds = %land.lhs.true.280, %if.end.277
  %166 = load i32, i32* %n.addr, align 4
  %cmp288 = icmp slt i32 %166, 0
  br i1 %cmp288, label %land.lhs.true.290, label %if.end.354

land.lhs.true.290:                                ; preds = %lor.lhs.false.287
  %current291 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos292 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current291, i32 0, i32 0
  %charpos293 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos292, i32 0, i32 0
  %167 = load i64, i64* %charpos293, align 8
  %charpos294 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  %168 = load i64, i64* %charpos294, align 8
  %cmp295 = icmp eq i64 %167, %168
  br i1 %cmp295, label %if.then.297, label %if.end.354

if.then.297:                                      ; preds = %land.lhs.true.290, %land.lhs.true.280
  %current298 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos299 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current298, i32 0, i32 0
  %charpos300 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos299, i32 0, i32 0
  %169 = load i64, i64* %charpos300, align 8
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv301 = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 79
  %171 = load i64, i64* %zv301, align 8
  %cmp302 = icmp eq i64 %169, %171
  br i1 %cmp302, label %if.then.304, label %if.else.336

if.then.304:                                      ; preds = %if.then.297
  %current_y305 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %172 = load i32, i32* %current_y305, align 4
  %last_visible_y306 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %173 = load i32, i32* %last_visible_y306, align 4
  %cmp307 = icmp slt i32 %172, %173
  br i1 %cmp307, label %land.lhs.true.309, label %if.else.325

land.lhs.true.309:                                ; preds = %if.then.304
  %current_y310 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %174 = load i32, i32* %current_y310, align 4
  %max_ascent = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 65
  %175 = load i32, i32* %max_ascent, align 4
  %add311 = add nsw i32 %174, %175
  %max_descent = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 66
  %176 = load i32, i32* %max_descent, align 4
  %add312 = add nsw i32 %add311, %176
  %last_visible_y313 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %177 = load i32, i32* %last_visible_y313, align 4
  %cmp314 = icmp sgt i32 %add312, %177
  br i1 %cmp314, label %if.then.316, label %if.else.325

if.then.316:                                      ; preds = %land.lhs.true.309
  %last_visible_y317 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %178 = load i32, i32* %last_visible_y317, align 4
  %current_y318 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %179 = load i32, i32* %current_y318, align 4
  %sub319 = sub nsw i32 %178, %179
  %max_ascent320 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 65
  %180 = load i32, i32* %max_ascent320, align 4
  %add321 = add nsw i32 %sub319, %180
  %max_descent322 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 66
  %181 = load i32, i32* %max_descent322, align 4
  %add323 = add nsw i32 %add321, %181
  %182 = load %struct.window*, %struct.window** %w, align 8
  %vscroll324 = getelementptr inbounds %struct.window, %struct.window* %182, i32 0, i32 68
  store i32 %add323, i32* %vscroll324, align 4
  %f = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 2
  %183 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %183)
  br label %if.end.335

if.else.325:                                      ; preds = %land.lhs.true.309, %if.then.304
  %184 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %184, i1 zeroext false)
  %185 = load i8, i8* %noerror.addr, align 1
  %tobool326 = trunc i8 %185 to i1
  br i1 %tobool326, label %if.then.327, label %if.else.328

if.then.327:                                      ; preds = %if.else.325
  br label %if.end.1044

if.else.328:                                      ; preds = %if.else.325
  %186 = load i32, i32* %n.addr, align 4
  %cmp329 = icmp slt i32 %186, 0
  br i1 %cmp329, label %if.then.331, label %if.else.333

if.then.331:                                      ; preds = %if.else.328
  %call332 = call i64 @builtin_lisp_symbol(i32 200)
  call void @xsignal0(i64 %call332) #5
  unreachable

if.else.333:                                      ; preds = %if.else.328
  %call334 = call i64 @builtin_lisp_symbol(i32 366)
  call void @xsignal0(i64 %call334) #5
  unreachable

if.end.335:                                       ; preds = %if.then.316
  br label %if.end.348

if.else.336:                                      ; preds = %if.then.297
  %187 = load %struct.window*, %struct.window** %w, align 8
  %vscroll337 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 68
  %188 = load i32, i32* %vscroll337, align 4
  %cmp338 = icmp ne i32 %188, 0
  br i1 %cmp338, label %if.then.340, label %if.else.342

if.then.340:                                      ; preds = %if.else.336
  %189 = load %struct.window*, %struct.window** %w, align 8
  %vscroll341 = getelementptr inbounds %struct.window, %struct.window* %189, i32 0, i32 68
  store i32 0, i32* %vscroll341, align 4
  br label %if.end.347

if.else.342:                                      ; preds = %if.else.336
  %190 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %190, i1 zeroext false)
  %191 = load i8, i8* %noerror.addr, align 1
  %tobool343 = trunc i8 %191 to i1
  br i1 %tobool343, label %if.then.344, label %if.else.345

if.then.344:                                      ; preds = %if.else.342
  br label %if.end.1044

if.else.345:                                      ; preds = %if.else.342
  %call346 = call i64 @builtin_lisp_symbol(i32 200)
  call void @xsignal0(i64 %call346) #5
  unreachable

if.end.347:                                       ; preds = %if.then.340
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %if.end.335
  %192 = load %struct.window*, %struct.window** %w, align 8
  %contents349 = getelementptr inbounds %struct.window, %struct.window* %192, i32 0, i32 10
  %193 = load i64, i64* %contents349, align 8
  %call350 = call %struct.buffer* @XBUFFER(i64 %193)
  %prevent_redisplay_optimizations_p = getelementptr inbounds %struct.buffer, %struct.buffer* %call350, i32 0, i32 94
  %bf.load351 = load i8, i8* %prevent_redisplay_optimizations_p, align 8
  %bf.clear352 = and i8 %bf.load351, -2
  %bf.set353 = or i8 %bf.clear352, 1
  store i8 %bf.set353, i8* %prevent_redisplay_optimizations_p, align 8
  store i8 1, i8* %vscrolled, align 1
  br label %if.end.354

if.end.354:                                       ; preds = %if.end.348, %land.lhs.true.290, %lor.lhs.false.287
  %194 = load i8, i8* %vscrolled, align 1
  %tobool355 = trunc i8 %194 to i1
  br i1 %tobool355, label %if.end.404, label %if.then.356

if.then.356:                                      ; preds = %if.end.354
  %current358 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos359 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current358, i32 0, i32 0
  %charpos360 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos359, i32 0, i32 0
  %195 = load i64, i64* %charpos360, align 8
  store i64 %195, i64* %pos357, align 8
  %call362 = call zeroext i1 @in_display_vector_p(%struct.it* %it)
  br i1 %call362, label %if.then.363, label %if.end.365

if.then.363:                                      ; preds = %if.then.356
  %196 = load i64, i64* %pos357, align 8
  %inc = add nsw i64 %196, 1
  store i64 %inc, i64* %pos357, align 8
  %197 = load i64, i64* %pos357, align 8
  %call364 = call i32 @move_it_to(%struct.it* %it, i64 %197, i32 -1, i32 -1, i32 -1, i32 8)
  br label %if.end.365

if.end.365:                                       ; preds = %if.then.363, %if.then.356
  %198 = load %struct.window*, %struct.window** %w, align 8
  %start366 = getelementptr inbounds %struct.window, %struct.window* %198, i32 0, i32 11
  %199 = load i64, i64* %start366, align 8
  %200 = load %struct.window*, %struct.window** %w, align 8
  %contents367 = getelementptr inbounds %struct.window, %struct.window* %200, i32 0, i32 10
  %201 = load i64, i64* %contents367, align 8
  %current368 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos369 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current368, i32 0, i32 0
  %charpos370 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos369, i32 0, i32 0
  %202 = load i64, i64* %charpos370, align 8
  %current371 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos372 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current371, i32 0, i32 0
  %bytepos373 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos372, i32 0, i32 1
  %203 = load i64, i64* %bytepos373, align 8
  %call374 = call i64 @set_marker_restricted_both(i64 %199, i64 %201, i64 %202, i64 %203)
  %204 = load %struct.window*, %struct.window** %w, align 8
  %start375 = getelementptr inbounds %struct.window, %struct.window* %204, i32 0, i32 11
  %205 = load i64, i64* %start375, align 8
  %call376 = call i64 @marker_byte_position(i64 %205)
  store i64 %call376, i64* %bytepos361, align 8
  %206 = load i64, i64* %pos357, align 8
  %207 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv377 = getelementptr inbounds %struct.buffer, %struct.buffer* %207, i32 0, i32 77
  %208 = load i64, i64* %begv377, align 8
  %cmp378 = icmp eq i64 %206, %208
  br i1 %cmp378, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.365
  %209 = load i64, i64* %bytepos361, align 8
  %sub380 = sub nsw i64 %209, 1
  %210 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %210, i32 0, i32 73
  %211 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %211, i32 0, i32 3
  %212 = load i64, i64* %gpt_byte, align 8
  %cmp381 = icmp sge i64 %sub380, %212
  br i1 %cmp381, label %cond.true.383, label %cond.false.385

cond.true.383:                                    ; preds = %lor.rhs
  %213 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text384 = getelementptr inbounds %struct.buffer, %struct.buffer* %213, i32 0, i32 73
  %214 = load %struct.buffer_text*, %struct.buffer_text** %text384, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %214, i32 0, i32 5
  %215 = load i64, i64* %gap_size, align 8
  br label %cond.end.386

cond.false.385:                                   ; preds = %lor.rhs
  br label %cond.end.386

cond.end.386:                                     ; preds = %cond.false.385, %cond.true.383
  %cond387 = phi i64 [ %215, %cond.true.383 ], [ 0, %cond.false.385 ]
  %216 = load i64, i64* %bytepos361, align 8
  %sub388 = sub nsw i64 %216, 1
  %add389 = add nsw i64 %cond387, %sub388
  %217 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text390 = getelementptr inbounds %struct.buffer, %struct.buffer* %217, i32 0, i32 73
  %218 = load %struct.buffer_text*, %struct.buffer_text** %text390, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %218, i32 0, i32 0
  %219 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %219, i64 %add389
  %add.ptr391 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %220 = load i8, i8* %add.ptr391, align 1
  %conv392 = zext i8 %220 to i32
  %cmp393 = icmp eq i32 %conv392, 10
  br label %lor.end

lor.end:                                          ; preds = %cond.end.386, %if.end.365
  %221 = phi i1 [ true, %if.end.365 ], [ %cmp393, %cond.end.386 ]
  %222 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg395 = getelementptr inbounds %struct.window, %struct.window* %222, i32 0, i32 67
  %223 = zext i1 %221 to i16
  %bf.load396 = load i16, i16* %start_at_line_beg395, align 4
  %bf.shl = shl i16 %223, 4
  %bf.clear397 = and i16 %bf.load396, -17
  %bf.set398 = or i16 %bf.clear397, %bf.shl
  store i16 %bf.set398, i16* %start_at_line_beg395, align 4
  %bf.result.cast = trunc i16 %223 to i8
  %tobool399 = trunc i8 %bf.result.cast to i1
  %224 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_update_mode_line(%struct.window* %224)
  %225 = load %struct.window*, %struct.window** %w, align 8
  %force_start400 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 67
  %bf.load401 = load i16, i16* %force_start400, align 4
  %bf.clear402 = and i16 %bf.load401, -33
  %bf.set403 = or i16 %bf.clear402, 32
  store i16 %bf.set403, i16* %force_start400, align 4
  br label %if.end.404

if.end.404:                                       ; preds = %lor.end, %if.end.354
  %vpos405 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 76
  store i32 0, i32* %vpos405, align 4
  %current_y406 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  store i32 0, i32* %current_y406, align 4
  %226 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %226, i32 0, i32 37
  %227 = load i32, i32* %total_lines, align 4
  %228 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %228, i32 0, i32 1
  %229 = load i64, i64* %frame, align 8
  %sub407 = sub nsw i64 %229, 5
  %230 = inttoptr i64 %sub407 to i8*
  %231 = bitcast i8* %230 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %231, i32 0, i32 60
  %232 = load i32, i32* %line_height, align 4
  %mul408 = mul nsw i32 %227, %232
  %233 = load i32, i32* %frame_line_height, align 4
  %div409 = sdiv i32 %mul408, %233
  store i32 %div409, i32* %window_total_lines, align 4
  %234 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  %cmp410 = icmp sgt i64 0, %234
  br i1 %cmp410, label %cond.true.412, label %cond.false.413

cond.true.412:                                    ; preds = %if.end.404
  br label %cond.end.414

cond.false.413:                                   ; preds = %if.end.404
  %235 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  br label %cond.end.414

cond.end.414:                                     ; preds = %cond.false.413, %cond.true.412
  %cond415 = phi i64 [ 0, %cond.true.412 ], [ %235, %cond.false.413 ]
  %conv416 = trunc i64 %cond415 to i32
  store i32 %conv416, i32* %this_scroll_margin, align 4
  %236 = load i32, i32* %this_scroll_margin, align 4
  %237 = load i32, i32* %window_total_lines, align 4
  %div417 = sdiv i32 %237, 4
  %cmp418 = icmp slt i32 %236, %div417
  br i1 %cmp418, label %cond.true.420, label %cond.false.421

cond.true.420:                                    ; preds = %cond.end.414
  %238 = load i32, i32* %this_scroll_margin, align 4
  br label %cond.end.423

cond.false.421:                                   ; preds = %cond.end.414
  %239 = load i32, i32* %window_total_lines, align 4
  %div422 = sdiv i32 %239, 4
  br label %cond.end.423

cond.end.423:                                     ; preds = %cond.false.421, %cond.true.420
  %cond424 = phi i32 [ %238, %cond.true.420 ], [ %div422, %cond.false.421 ]
  store i32 %cond424, i32* %this_scroll_margin, align 4
  %240 = load i32, i32* %frame_line_height, align 4
  %241 = load i32, i32* %this_scroll_margin, align 4
  %mul425 = mul nsw i32 %241, %240
  store i32 %mul425, i32* %this_scroll_margin, align 4
  %242 = load i32, i32* %n.addr, align 4
  %cmp426 = icmp sgt i32 %242, 0
  br i1 %cmp426, label %if.then.428, label %if.else.738

if.then.428:                                      ; preds = %cond.end.423
  %last_visible_y429 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %243 = load i32, i32* %last_visible_y429, align 4
  %244 = load i32, i32* %this_scroll_margin, align 4
  %sub430 = sub nsw i32 %243, %244
  %sub431 = sub nsw i32 %sub430, 1
  store i32 %sub431, i32* %last_y, align 4
  %245 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt432 = getelementptr inbounds %struct.buffer, %struct.buffer* %245, i32 0, i32 75
  %246 = load i64, i64* %pt432, align 8
  %add433 = add nsw i64 %246, 0
  %call434 = call i32 @move_it_to(%struct.it* %it, i64 %add433, i32 -1, i32 -1, i32 -1, i32 8)
  %current435 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos436 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current435, i32 0, i32 0
  %charpos437 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos436, i32 0, i32 0
  %247 = load i64, i64* %charpos437, align 8
  %248 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt438 = getelementptr inbounds %struct.buffer, %struct.buffer* %248, i32 0, i32 75
  %249 = load i64, i64* %pt438, align 8
  %add439 = add nsw i64 %249, 0
  %cmp440 = icmp eq i64 %247, %add439
  br i1 %cmp440, label %land.lhs.true.442, label %if.else.577

land.lhs.true.442:                                ; preds = %if.then.428
  %current_y443 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %250 = load i32, i32* %current_y443, align 4
  %251 = load i32, i32* %this_scroll_margin, align 4
  %cmp444 = icmp sge i32 %250, %251
  br i1 %cmp444, label %land.lhs.true.446, label %if.else.577

land.lhs.true.446:                                ; preds = %land.lhs.true.442
  %current_y447 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %252 = load i32, i32* %current_y447, align 4
  %253 = load i32, i32* %last_y, align 4
  %254 = load %struct.window*, %struct.window** %w, align 8
  %contents448 = getelementptr inbounds %struct.window, %struct.window* %254, i32 0, i32 10
  %255 = load i64, i64* %contents448, align 8
  %call449 = call zeroext i1 @BUFFERP(i64 %255)
  br i1 %call449, label %cond.true.451, label %cond.false.523

cond.true.451:                                    ; preds = %land.lhs.true.446
  %256 = load %struct.window*, %struct.window** %w, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %256, i32 0, i32 67
  %bf.load452 = load i16, i16* %mini, align 4
  %bf.clear453 = and i16 %bf.load452, 1
  %bf.cast = trunc i16 %bf.clear453 to i1
  br i1 %bf.cast, label %cond.false.562, label %land.lhs.true.454

land.lhs.true.454:                                ; preds = %cond.true.451
  %257 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %257, i32 0, i32 67
  %bf.load455 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load455, 11
  %bf.clear456 = and i16 %bf.lshr, 1
  %bf.cast457 = trunc i16 %bf.clear456 to i1
  br i1 %bf.cast457, label %cond.false.562, label %land.lhs.true.458

land.lhs.true.458:                                ; preds = %land.lhs.true.454
  %258 = load %struct.window*, %struct.window** %w, align 8
  %frame459 = getelementptr inbounds %struct.window, %struct.window* %258, i32 0, i32 1
  %259 = load i64, i64* %frame459, align 8
  %sub460 = sub nsw i64 %259, 5
  %260 = inttoptr i64 %sub460 to i8*
  %261 = bitcast i8* %260 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %261, i32 0, i32 26
  %262 = bitcast i48* %wants_modeline to i64*
  %bf.load461 = load i64, i64* %262, align 8
  %bf.lshr462 = lshr i64 %bf.load461, 14
  %bf.clear463 = and i64 %bf.lshr462, 1
  %bf.cast464 = trunc i64 %bf.clear463 to i1
  br i1 %bf.cast464, label %land.lhs.true.466, label %cond.false.562

land.lhs.true.466:                                ; preds = %land.lhs.true.458
  %263 = load %struct.window*, %struct.window** %w, align 8
  %contents467 = getelementptr inbounds %struct.window, %struct.window* %263, i32 0, i32 10
  %264 = load i64, i64* %contents467, align 8
  %call468 = call %struct.buffer* @XBUFFER(i64 %264)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call468, i32 0, i32 13
  %265 = load i64, i64* %header_line_format_, align 8
  %call469 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp470 = icmp eq i64 %265, %call469
  br i1 %cmp470, label %cond.false.562, label %land.lhs.true.472

land.lhs.true.472:                                ; preds = %land.lhs.true.466
  %266 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %266, i32 0, i32 35
  %267 = load i32, i32* %pixel_height, align 4
  %268 = load %struct.window*, %struct.window** %w, align 8
  %contents473 = getelementptr inbounds %struct.window, %struct.window* %268, i32 0, i32 10
  %269 = load i64, i64* %contents473, align 8
  %call474 = call zeroext i1 @BUFFERP(i64 %269)
  br i1 %call474, label %cond.true.476, label %cond.false.509

cond.true.476:                                    ; preds = %land.lhs.true.472
  %270 = load %struct.window*, %struct.window** %w, align 8
  %mini477 = getelementptr inbounds %struct.window, %struct.window* %270, i32 0, i32 67
  %bf.load478 = load i16, i16* %mini477, align 4
  %bf.clear479 = and i16 %bf.load478, 1
  %bf.cast480 = trunc i16 %bf.clear479 to i1
  br i1 %bf.cast480, label %cond.false.515, label %land.lhs.true.481

land.lhs.true.481:                                ; preds = %cond.true.476
  %271 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p482 = getelementptr inbounds %struct.window, %struct.window* %271, i32 0, i32 67
  %bf.load483 = load i16, i16* %pseudo_window_p482, align 4
  %bf.lshr484 = lshr i16 %bf.load483, 11
  %bf.clear485 = and i16 %bf.lshr484, 1
  %bf.cast486 = trunc i16 %bf.clear485 to i1
  br i1 %bf.cast486, label %cond.false.515, label %land.lhs.true.487

land.lhs.true.487:                                ; preds = %land.lhs.true.481
  %272 = load %struct.window*, %struct.window** %w, align 8
  %frame488 = getelementptr inbounds %struct.window, %struct.window* %272, i32 0, i32 1
  %273 = load i64, i64* %frame488, align 8
  %sub489 = sub nsw i64 %273, 5
  %274 = inttoptr i64 %sub489 to i8*
  %275 = bitcast i8* %274 to %struct.frame*
  %wants_modeline490 = getelementptr inbounds %struct.frame, %struct.frame* %275, i32 0, i32 26
  %276 = bitcast i48* %wants_modeline490 to i64*
  %bf.load491 = load i64, i64* %276, align 8
  %bf.lshr492 = lshr i64 %bf.load491, 14
  %bf.clear493 = and i64 %bf.lshr492, 1
  %bf.cast494 = trunc i64 %bf.clear493 to i1
  br i1 %bf.cast494, label %land.lhs.true.496, label %cond.false.515

land.lhs.true.496:                                ; preds = %land.lhs.true.487
  %277 = load %struct.window*, %struct.window** %w, align 8
  %contents497 = getelementptr inbounds %struct.window, %struct.window* %277, i32 0, i32 10
  %278 = load i64, i64* %contents497, align 8
  %call498 = call %struct.buffer* @XBUFFER(i64 %278)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call498, i32 0, i32 12
  %279 = load i64, i64* %mode_line_format_, align 8
  %call499 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp500 = icmp eq i64 %279, %call499
  br i1 %cmp500, label %cond.false.515, label %land.lhs.true.502

land.lhs.true.502:                                ; preds = %land.lhs.true.496
  %280 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height503 = getelementptr inbounds %struct.window, %struct.window* %280, i32 0, i32 35
  %281 = load i32, i32* %pixel_height503, align 4
  %282 = load %struct.window*, %struct.window** %w, align 8
  %frame504 = getelementptr inbounds %struct.window, %struct.window* %282, i32 0, i32 1
  %283 = load i64, i64* %frame504, align 8
  %sub505 = sub nsw i64 %283, 5
  %284 = inttoptr i64 %sub505 to i8*
  %285 = bitcast i8* %284 to %struct.frame*
  %line_height506 = getelementptr inbounds %struct.frame, %struct.frame* %285, i32 0, i32 60
  %286 = load i32, i32* %line_height506, align 4
  %cmp507 = icmp sgt i32 %281, %286
  br i1 %cmp507, label %cond.true.510, label %cond.false.515

cond.false.509:                                   ; preds = %land.lhs.true.472
  br i1 false, label %cond.true.510, label %cond.false.515

cond.true.510:                                    ; preds = %cond.false.509, %land.lhs.true.502
  %287 = load %struct.window*, %struct.window** %w, align 8
  %frame511 = getelementptr inbounds %struct.window, %struct.window* %287, i32 0, i32 1
  %288 = load i64, i64* %frame511, align 8
  %sub512 = sub nsw i64 %288, 5
  %289 = inttoptr i64 %sub512 to i8*
  %290 = bitcast i8* %289 to %struct.frame*
  %line_height513 = getelementptr inbounds %struct.frame, %struct.frame* %290, i32 0, i32 60
  %291 = load i32, i32* %line_height513, align 4
  %mul514 = mul nsw i32 2, %291
  br label %cond.end.519

cond.false.515:                                   ; preds = %cond.false.509, %land.lhs.true.502, %land.lhs.true.496, %land.lhs.true.487, %land.lhs.true.481, %cond.true.476
  %292 = load %struct.window*, %struct.window** %w, align 8
  %frame516 = getelementptr inbounds %struct.window, %struct.window* %292, i32 0, i32 1
  %293 = load i64, i64* %frame516, align 8
  %sub517 = sub nsw i64 %293, 5
  %294 = inttoptr i64 %sub517 to i8*
  %295 = bitcast i8* %294 to %struct.frame*
  %line_height518 = getelementptr inbounds %struct.frame, %struct.frame* %295, i32 0, i32 60
  %296 = load i32, i32* %line_height518, align 4
  br label %cond.end.519

cond.end.519:                                     ; preds = %cond.false.515, %cond.true.510
  %cond520 = phi i32 [ %mul514, %cond.true.510 ], [ %296, %cond.false.515 ]
  %cmp521 = icmp sgt i32 %267, %cond520
  br i1 %cmp521, label %cond.true.524, label %cond.false.562

cond.false.523:                                   ; preds = %land.lhs.true.446
  br i1 false, label %cond.true.524, label %cond.false.562

cond.true.524:                                    ; preds = %cond.false.523, %cond.end.519
  %297 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %297, i32 0, i32 64
  %298 = load i32, i32* %header_line_height, align 4
  %cmp525 = icmp sge i32 %298, 0
  br i1 %cmp525, label %cond.true.527, label %cond.false.529

cond.true.527:                                    ; preds = %cond.true.524
  %299 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height528 = getelementptr inbounds %struct.window, %struct.window* %299, i32 0, i32 64
  %300 = load i32, i32* %header_line_height528, align 4
  br label %cond.end.560

cond.false.529:                                   ; preds = %cond.true.524
  %301 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %301, i32 0, i32 24
  %302 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool530 = icmp ne %struct.glyph_matrix* %302, null
  br i1 %tobool530, label %land.lhs.true.531, label %cond.false.538

land.lhs.true.531:                                ; preds = %cond.false.529
  %303 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix532 = getelementptr inbounds %struct.window, %struct.window* %303, i32 0, i32 24
  %304 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix532, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %304, i32 0, i32 1
  %305 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool533 = icmp ne %struct.glyph_row* %305, null
  br i1 %tobool533, label %cond.true.534, label %cond.false.538

cond.true.534:                                    ; preds = %land.lhs.true.531
  %306 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix535 = getelementptr inbounds %struct.window, %struct.window* %306, i32 0, i32 24
  %307 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix535, align 8
  %rows536 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %307, i32 0, i32 1
  %308 = load %struct.glyph_row*, %struct.glyph_row** %rows536, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %308, i32 0, i32 7
  %309 = load i32, i32* %height, align 4
  %tobool537 = icmp ne i32 %309, 0
  br i1 %tobool537, label %cond.true.539, label %cond.false.553

cond.false.538:                                   ; preds = %land.lhs.true.531, %cond.false.529
  br i1 false, label %cond.true.539, label %cond.false.553

cond.true.539:                                    ; preds = %cond.false.538, %cond.true.534
  %310 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix540 = getelementptr inbounds %struct.window, %struct.window* %310, i32 0, i32 24
  %311 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix540, align 8
  %tobool541 = icmp ne %struct.glyph_matrix* %311, null
  br i1 %tobool541, label %land.lhs.true.542, label %cond.false.550

land.lhs.true.542:                                ; preds = %cond.true.539
  %312 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix543 = getelementptr inbounds %struct.window, %struct.window* %312, i32 0, i32 24
  %313 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix543, align 8
  %rows544 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %313, i32 0, i32 1
  %314 = load %struct.glyph_row*, %struct.glyph_row** %rows544, align 8
  %tobool545 = icmp ne %struct.glyph_row* %314, null
  br i1 %tobool545, label %cond.true.546, label %cond.false.550

cond.true.546:                                    ; preds = %land.lhs.true.542
  %315 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix547 = getelementptr inbounds %struct.window, %struct.window* %315, i32 0, i32 24
  %316 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix547, align 8
  %rows548 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %316, i32 0, i32 1
  %317 = load %struct.glyph_row*, %struct.glyph_row** %rows548, align 8
  %height549 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %317, i32 0, i32 7
  %318 = load i32, i32* %height549, align 4
  br label %cond.end.551

cond.false.550:                                   ; preds = %land.lhs.true.542, %cond.true.539
  br label %cond.end.551

cond.end.551:                                     ; preds = %cond.false.550, %cond.true.546
  %cond552 = phi i32 [ %318, %cond.true.546 ], [ 0, %cond.false.550 ]
  br label %cond.end.557

cond.false.553:                                   ; preds = %cond.false.538, %cond.true.534
  %319 = load %struct.window*, %struct.window** %w, align 8
  %frame554 = getelementptr inbounds %struct.window, %struct.window* %319, i32 0, i32 1
  %320 = load i64, i64* %frame554, align 8
  %sub555 = sub nsw i64 %320, 5
  %321 = inttoptr i64 %sub555 to i8*
  %322 = bitcast i8* %321 to %struct.frame*
  %call556 = call i32 @estimate_mode_line_height(%struct.frame* %322, i32 5)
  br label %cond.end.557

cond.end.557:                                     ; preds = %cond.false.553, %cond.end.551
  %cond558 = phi i32 [ %cond552, %cond.end.551 ], [ %call556, %cond.false.553 ]
  %323 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height559 = getelementptr inbounds %struct.window, %struct.window* %323, i32 0, i32 64
  store i32 %cond558, i32* %header_line_height559, align 4
  br label %cond.end.560

cond.end.560:                                     ; preds = %cond.end.557, %cond.true.527
  %cond561 = phi i32 [ %300, %cond.true.527 ], [ %cond558, %cond.end.557 ]
  br label %cond.end.563

cond.false.562:                                   ; preds = %cond.false.523, %cond.end.519, %land.lhs.true.466, %land.lhs.true.458, %land.lhs.true.454, %cond.true.451
  br label %cond.end.563

cond.end.563:                                     ; preds = %cond.false.562, %cond.end.560
  %cond564 = phi i32 [ %cond561, %cond.end.560 ], [ 0, %cond.false.562 ]
  %sub565 = sub nsw i32 %253, %cond564
  %cmp566 = icmp sle i32 %252, %sub565
  br i1 %cmp566, label %land.lhs.true.568, label %if.else.577

land.lhs.true.568:                                ; preds = %cond.end.563
  %324 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call569 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp570 = icmp eq i64 %324, %call569
  br i1 %cmp570, label %if.then.576, label %lor.lhs.false.572

lor.lhs.false.572:                                ; preds = %land.lhs.true.568
  %325 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call573 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp574 = icmp eq i64 %325, %call573
  br i1 %cmp574, label %if.then.576, label %if.else.577

if.then.576:                                      ; preds = %lor.lhs.false.572, %land.lhs.true.568
  br label %if.end.737

if.else.577:                                      ; preds = %lor.lhs.false.572, %cond.end.563, %land.lhs.true.442, %if.then.428
  %326 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  %cmp578 = icmp sge i32 %326, 0
  br i1 %cmp578, label %if.then.580, label %if.end.718

if.then.580:                                      ; preds = %if.else.577
  %327 = load i32, i32* %last_y, align 4
  %328 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  %cmp581 = icmp slt i32 %327, %328
  br i1 %cmp581, label %cond.true.583, label %cond.false.584

cond.true.583:                                    ; preds = %if.then.580
  %329 = load i32, i32* %last_y, align 4
  br label %cond.end.585

cond.false.584:                                   ; preds = %if.then.580
  %330 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  br label %cond.end.585

cond.end.585:                                     ; preds = %cond.false.584, %cond.true.583
  %cond586 = phi i32 [ %329, %cond.true.583 ], [ %330, %cond.false.584 ]
  store i32 %cond586, i32* %goal_y, align 4
  %331 = load i32, i32* @window_scroll_pixel_based_preserve_x, align 4
  %332 = load i32, i32* %goal_y, align 4
  %333 = load %struct.window*, %struct.window** %w, align 8
  %contents587 = getelementptr inbounds %struct.window, %struct.window* %333, i32 0, i32 10
  %334 = load i64, i64* %contents587, align 8
  %call588 = call zeroext i1 @BUFFERP(i64 %334)
  br i1 %call588, label %cond.true.590, label %cond.false.670

cond.true.590:                                    ; preds = %cond.end.585
  %335 = load %struct.window*, %struct.window** %w, align 8
  %mini591 = getelementptr inbounds %struct.window, %struct.window* %335, i32 0, i32 67
  %bf.load592 = load i16, i16* %mini591, align 4
  %bf.clear593 = and i16 %bf.load592, 1
  %bf.cast594 = trunc i16 %bf.clear593 to i1
  br i1 %bf.cast594, label %cond.false.713, label %land.lhs.true.595

land.lhs.true.595:                                ; preds = %cond.true.590
  %336 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p596 = getelementptr inbounds %struct.window, %struct.window* %336, i32 0, i32 67
  %bf.load597 = load i16, i16* %pseudo_window_p596, align 4
  %bf.lshr598 = lshr i16 %bf.load597, 11
  %bf.clear599 = and i16 %bf.lshr598, 1
  %bf.cast600 = trunc i16 %bf.clear599 to i1
  br i1 %bf.cast600, label %cond.false.713, label %land.lhs.true.601

land.lhs.true.601:                                ; preds = %land.lhs.true.595
  %337 = load %struct.window*, %struct.window** %w, align 8
  %frame602 = getelementptr inbounds %struct.window, %struct.window* %337, i32 0, i32 1
  %338 = load i64, i64* %frame602, align 8
  %sub603 = sub nsw i64 %338, 5
  %339 = inttoptr i64 %sub603 to i8*
  %340 = bitcast i8* %339 to %struct.frame*
  %wants_modeline604 = getelementptr inbounds %struct.frame, %struct.frame* %340, i32 0, i32 26
  %341 = bitcast i48* %wants_modeline604 to i64*
  %bf.load605 = load i64, i64* %341, align 8
  %bf.lshr606 = lshr i64 %bf.load605, 14
  %bf.clear607 = and i64 %bf.lshr606, 1
  %bf.cast608 = trunc i64 %bf.clear607 to i1
  br i1 %bf.cast608, label %land.lhs.true.610, label %cond.false.713

land.lhs.true.610:                                ; preds = %land.lhs.true.601
  %342 = load %struct.window*, %struct.window** %w, align 8
  %contents611 = getelementptr inbounds %struct.window, %struct.window* %342, i32 0, i32 10
  %343 = load i64, i64* %contents611, align 8
  %call612 = call %struct.buffer* @XBUFFER(i64 %343)
  %header_line_format_613 = getelementptr inbounds %struct.buffer, %struct.buffer* %call612, i32 0, i32 13
  %344 = load i64, i64* %header_line_format_613, align 8
  %call614 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp615 = icmp eq i64 %344, %call614
  br i1 %cmp615, label %cond.false.713, label %land.lhs.true.617

land.lhs.true.617:                                ; preds = %land.lhs.true.610
  %345 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height618 = getelementptr inbounds %struct.window, %struct.window* %345, i32 0, i32 35
  %346 = load i32, i32* %pixel_height618, align 4
  %347 = load %struct.window*, %struct.window** %w, align 8
  %contents619 = getelementptr inbounds %struct.window, %struct.window* %347, i32 0, i32 10
  %348 = load i64, i64* %contents619, align 8
  %call620 = call zeroext i1 @BUFFERP(i64 %348)
  br i1 %call620, label %cond.true.622, label %cond.false.656

cond.true.622:                                    ; preds = %land.lhs.true.617
  %349 = load %struct.window*, %struct.window** %w, align 8
  %mini623 = getelementptr inbounds %struct.window, %struct.window* %349, i32 0, i32 67
  %bf.load624 = load i16, i16* %mini623, align 4
  %bf.clear625 = and i16 %bf.load624, 1
  %bf.cast626 = trunc i16 %bf.clear625 to i1
  br i1 %bf.cast626, label %cond.false.662, label %land.lhs.true.627

land.lhs.true.627:                                ; preds = %cond.true.622
  %350 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p628 = getelementptr inbounds %struct.window, %struct.window* %350, i32 0, i32 67
  %bf.load629 = load i16, i16* %pseudo_window_p628, align 4
  %bf.lshr630 = lshr i16 %bf.load629, 11
  %bf.clear631 = and i16 %bf.lshr630, 1
  %bf.cast632 = trunc i16 %bf.clear631 to i1
  br i1 %bf.cast632, label %cond.false.662, label %land.lhs.true.633

land.lhs.true.633:                                ; preds = %land.lhs.true.627
  %351 = load %struct.window*, %struct.window** %w, align 8
  %frame634 = getelementptr inbounds %struct.window, %struct.window* %351, i32 0, i32 1
  %352 = load i64, i64* %frame634, align 8
  %sub635 = sub nsw i64 %352, 5
  %353 = inttoptr i64 %sub635 to i8*
  %354 = bitcast i8* %353 to %struct.frame*
  %wants_modeline636 = getelementptr inbounds %struct.frame, %struct.frame* %354, i32 0, i32 26
  %355 = bitcast i48* %wants_modeline636 to i64*
  %bf.load637 = load i64, i64* %355, align 8
  %bf.lshr638 = lshr i64 %bf.load637, 14
  %bf.clear639 = and i64 %bf.lshr638, 1
  %bf.cast640 = trunc i64 %bf.clear639 to i1
  br i1 %bf.cast640, label %land.lhs.true.642, label %cond.false.662

land.lhs.true.642:                                ; preds = %land.lhs.true.633
  %356 = load %struct.window*, %struct.window** %w, align 8
  %contents643 = getelementptr inbounds %struct.window, %struct.window* %356, i32 0, i32 10
  %357 = load i64, i64* %contents643, align 8
  %call644 = call %struct.buffer* @XBUFFER(i64 %357)
  %mode_line_format_645 = getelementptr inbounds %struct.buffer, %struct.buffer* %call644, i32 0, i32 12
  %358 = load i64, i64* %mode_line_format_645, align 8
  %call646 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp647 = icmp eq i64 %358, %call646
  br i1 %cmp647, label %cond.false.662, label %land.lhs.true.649

land.lhs.true.649:                                ; preds = %land.lhs.true.642
  %359 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height650 = getelementptr inbounds %struct.window, %struct.window* %359, i32 0, i32 35
  %360 = load i32, i32* %pixel_height650, align 4
  %361 = load %struct.window*, %struct.window** %w, align 8
  %frame651 = getelementptr inbounds %struct.window, %struct.window* %361, i32 0, i32 1
  %362 = load i64, i64* %frame651, align 8
  %sub652 = sub nsw i64 %362, 5
  %363 = inttoptr i64 %sub652 to i8*
  %364 = bitcast i8* %363 to %struct.frame*
  %line_height653 = getelementptr inbounds %struct.frame, %struct.frame* %364, i32 0, i32 60
  %365 = load i32, i32* %line_height653, align 4
  %cmp654 = icmp sgt i32 %360, %365
  br i1 %cmp654, label %cond.true.657, label %cond.false.662

cond.false.656:                                   ; preds = %land.lhs.true.617
  br i1 false, label %cond.true.657, label %cond.false.662

cond.true.657:                                    ; preds = %cond.false.656, %land.lhs.true.649
  %366 = load %struct.window*, %struct.window** %w, align 8
  %frame658 = getelementptr inbounds %struct.window, %struct.window* %366, i32 0, i32 1
  %367 = load i64, i64* %frame658, align 8
  %sub659 = sub nsw i64 %367, 5
  %368 = inttoptr i64 %sub659 to i8*
  %369 = bitcast i8* %368 to %struct.frame*
  %line_height660 = getelementptr inbounds %struct.frame, %struct.frame* %369, i32 0, i32 60
  %370 = load i32, i32* %line_height660, align 4
  %mul661 = mul nsw i32 2, %370
  br label %cond.end.666

cond.false.662:                                   ; preds = %cond.false.656, %land.lhs.true.649, %land.lhs.true.642, %land.lhs.true.633, %land.lhs.true.627, %cond.true.622
  %371 = load %struct.window*, %struct.window** %w, align 8
  %frame663 = getelementptr inbounds %struct.window, %struct.window* %371, i32 0, i32 1
  %372 = load i64, i64* %frame663, align 8
  %sub664 = sub nsw i64 %372, 5
  %373 = inttoptr i64 %sub664 to i8*
  %374 = bitcast i8* %373 to %struct.frame*
  %line_height665 = getelementptr inbounds %struct.frame, %struct.frame* %374, i32 0, i32 60
  %375 = load i32, i32* %line_height665, align 4
  br label %cond.end.666

cond.end.666:                                     ; preds = %cond.false.662, %cond.true.657
  %cond667 = phi i32 [ %mul661, %cond.true.657 ], [ %375, %cond.false.662 ]
  %cmp668 = icmp sgt i32 %346, %cond667
  br i1 %cmp668, label %cond.true.671, label %cond.false.713

cond.false.670:                                   ; preds = %cond.end.585
  br i1 false, label %cond.true.671, label %cond.false.713

cond.true.671:                                    ; preds = %cond.false.670, %cond.end.666
  %376 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height672 = getelementptr inbounds %struct.window, %struct.window* %376, i32 0, i32 64
  %377 = load i32, i32* %header_line_height672, align 4
  %cmp673 = icmp sge i32 %377, 0
  br i1 %cmp673, label %cond.true.675, label %cond.false.677

cond.true.675:                                    ; preds = %cond.true.671
  %378 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height676 = getelementptr inbounds %struct.window, %struct.window* %378, i32 0, i32 64
  %379 = load i32, i32* %header_line_height676, align 4
  br label %cond.end.711

cond.false.677:                                   ; preds = %cond.true.671
  %380 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix678 = getelementptr inbounds %struct.window, %struct.window* %380, i32 0, i32 24
  %381 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix678, align 8
  %tobool679 = icmp ne %struct.glyph_matrix* %381, null
  br i1 %tobool679, label %land.lhs.true.680, label %cond.false.689

land.lhs.true.680:                                ; preds = %cond.false.677
  %382 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix681 = getelementptr inbounds %struct.window, %struct.window* %382, i32 0, i32 24
  %383 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix681, align 8
  %rows682 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %383, i32 0, i32 1
  %384 = load %struct.glyph_row*, %struct.glyph_row** %rows682, align 8
  %tobool683 = icmp ne %struct.glyph_row* %384, null
  br i1 %tobool683, label %cond.true.684, label %cond.false.689

cond.true.684:                                    ; preds = %land.lhs.true.680
  %385 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix685 = getelementptr inbounds %struct.window, %struct.window* %385, i32 0, i32 24
  %386 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix685, align 8
  %rows686 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %386, i32 0, i32 1
  %387 = load %struct.glyph_row*, %struct.glyph_row** %rows686, align 8
  %height687 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %387, i32 0, i32 7
  %388 = load i32, i32* %height687, align 4
  %tobool688 = icmp ne i32 %388, 0
  br i1 %tobool688, label %cond.true.690, label %cond.false.704

cond.false.689:                                   ; preds = %land.lhs.true.680, %cond.false.677
  br i1 false, label %cond.true.690, label %cond.false.704

cond.true.690:                                    ; preds = %cond.false.689, %cond.true.684
  %389 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix691 = getelementptr inbounds %struct.window, %struct.window* %389, i32 0, i32 24
  %390 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix691, align 8
  %tobool692 = icmp ne %struct.glyph_matrix* %390, null
  br i1 %tobool692, label %land.lhs.true.693, label %cond.false.701

land.lhs.true.693:                                ; preds = %cond.true.690
  %391 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix694 = getelementptr inbounds %struct.window, %struct.window* %391, i32 0, i32 24
  %392 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix694, align 8
  %rows695 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %392, i32 0, i32 1
  %393 = load %struct.glyph_row*, %struct.glyph_row** %rows695, align 8
  %tobool696 = icmp ne %struct.glyph_row* %393, null
  br i1 %tobool696, label %cond.true.697, label %cond.false.701

cond.true.697:                                    ; preds = %land.lhs.true.693
  %394 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix698 = getelementptr inbounds %struct.window, %struct.window* %394, i32 0, i32 24
  %395 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix698, align 8
  %rows699 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %395, i32 0, i32 1
  %396 = load %struct.glyph_row*, %struct.glyph_row** %rows699, align 8
  %height700 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %396, i32 0, i32 7
  %397 = load i32, i32* %height700, align 4
  br label %cond.end.702

cond.false.701:                                   ; preds = %land.lhs.true.693, %cond.true.690
  br label %cond.end.702

cond.end.702:                                     ; preds = %cond.false.701, %cond.true.697
  %cond703 = phi i32 [ %397, %cond.true.697 ], [ 0, %cond.false.701 ]
  br label %cond.end.708

cond.false.704:                                   ; preds = %cond.false.689, %cond.true.684
  %398 = load %struct.window*, %struct.window** %w, align 8
  %frame705 = getelementptr inbounds %struct.window, %struct.window* %398, i32 0, i32 1
  %399 = load i64, i64* %frame705, align 8
  %sub706 = sub nsw i64 %399, 5
  %400 = inttoptr i64 %sub706 to i8*
  %401 = bitcast i8* %400 to %struct.frame*
  %call707 = call i32 @estimate_mode_line_height(%struct.frame* %401, i32 5)
  br label %cond.end.708

cond.end.708:                                     ; preds = %cond.false.704, %cond.end.702
  %cond709 = phi i32 [ %cond703, %cond.end.702 ], [ %call707, %cond.false.704 ]
  %402 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height710 = getelementptr inbounds %struct.window, %struct.window* %402, i32 0, i32 64
  store i32 %cond709, i32* %header_line_height710, align 4
  br label %cond.end.711

cond.end.711:                                     ; preds = %cond.end.708, %cond.true.675
  %cond712 = phi i32 [ %379, %cond.true.675 ], [ %cond709, %cond.end.708 ]
  br label %cond.end.714

cond.false.713:                                   ; preds = %cond.false.670, %cond.end.666, %land.lhs.true.610, %land.lhs.true.601, %land.lhs.true.595, %cond.true.590
  br label %cond.end.714

cond.end.714:                                     ; preds = %cond.false.713, %cond.end.711
  %cond715 = phi i32 [ %cond712, %cond.end.711 ], [ 0, %cond.false.713 ]
  %sub716 = sub nsw i32 %332, %cond715
  %call717 = call i32 @move_it_to(%struct.it* %it, i64 -1, i32 %331, i32 %sub716, i32 -1, i32 3)
  br label %if.end.718

if.end.718:                                       ; preds = %cond.end.714, %if.else.577
  br label %while.cond.719

while.cond.719:                                   ; preds = %if.end.729, %if.end.718
  %current_y720 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %403 = load i32, i32* %current_y720, align 4
  %404 = load i32, i32* %this_scroll_margin, align 4
  %cmp721 = icmp slt i32 %403, %404
  br i1 %cmp721, label %while.body.723, label %while.end.730

while.body.723:                                   ; preds = %while.cond.719
  %current_y724 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %405 = load i32, i32* %current_y724, align 4
  store i32 %405, i32* %prev, align 4
  call void @move_it_by_lines(%struct.it* %it, i64 1)
  %406 = load i32, i32* %prev, align 4
  %current_y725 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %407 = load i32, i32* %current_y725, align 4
  %cmp726 = icmp eq i32 %406, %407
  br i1 %cmp726, label %if.then.728, label %if.end.729

if.then.728:                                      ; preds = %while.body.723
  br label %while.end.730

if.end.729:                                       ; preds = %while.body.723
  br label %while.cond.719

while.end.730:                                    ; preds = %if.then.728, %while.cond.719
  %current731 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos732 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current731, i32 0, i32 0
  %charpos733 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos732, i32 0, i32 0
  %408 = load i64, i64* %charpos733, align 8
  %current734 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos735 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current734, i32 0, i32 0
  %bytepos736 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos735, i32 0, i32 1
  %409 = load i64, i64* %bytepos736, align 8
  call void @set_point_both(i64 %408, i64 %409)
  br label %if.end.737

if.end.737:                                       ; preds = %while.end.730, %if.then.576
  br label %if.end.1003

if.else.738:                                      ; preds = %cond.end.423
  %410 = load i32, i32* %n.addr, align 4
  %cmp739 = icmp slt i32 %410, 0
  br i1 %cmp739, label %if.then.741, label %if.end.1002

if.then.741:                                      ; preds = %if.else.738
  %current744 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos745 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current744, i32 0, i32 0
  %charpos746 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos745, i32 0, i32 0
  %411 = load i64, i64* %charpos746, align 8
  store i64 %411, i64* %charpos742, align 8
  %current747 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos748 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current747, i32 0, i32 0
  %bytepos749 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos748, i32 0, i32 1
  %412 = load i64, i64* %bytepos749, align 8
  store i64 %412, i64* %bytepos743, align 8
  %413 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt750 = getelementptr inbounds %struct.buffer, %struct.buffer* %413, i32 0, i32 75
  %414 = load i64, i64* %pt750, align 8
  %add751 = add nsw i64 %414, 0
  %last_visible_y752 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %415 = load i32, i32* %last_visible_y752, align 4
  %416 = load %struct.window*, %struct.window** %w, align 8
  %contents753 = getelementptr inbounds %struct.window, %struct.window* %416, i32 0, i32 10
  %417 = load i64, i64* %contents753, align 8
  %call754 = call zeroext i1 @BUFFERP(i64 %417)
  br i1 %call754, label %cond.true.756, label %cond.false.836

cond.true.756:                                    ; preds = %if.then.741
  %418 = load %struct.window*, %struct.window** %w, align 8
  %mini757 = getelementptr inbounds %struct.window, %struct.window* %418, i32 0, i32 67
  %bf.load758 = load i16, i16* %mini757, align 4
  %bf.clear759 = and i16 %bf.load758, 1
  %bf.cast760 = trunc i16 %bf.clear759 to i1
  br i1 %bf.cast760, label %cond.false.879, label %land.lhs.true.761

land.lhs.true.761:                                ; preds = %cond.true.756
  %419 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p762 = getelementptr inbounds %struct.window, %struct.window* %419, i32 0, i32 67
  %bf.load763 = load i16, i16* %pseudo_window_p762, align 4
  %bf.lshr764 = lshr i16 %bf.load763, 11
  %bf.clear765 = and i16 %bf.lshr764, 1
  %bf.cast766 = trunc i16 %bf.clear765 to i1
  br i1 %bf.cast766, label %cond.false.879, label %land.lhs.true.767

land.lhs.true.767:                                ; preds = %land.lhs.true.761
  %420 = load %struct.window*, %struct.window** %w, align 8
  %frame768 = getelementptr inbounds %struct.window, %struct.window* %420, i32 0, i32 1
  %421 = load i64, i64* %frame768, align 8
  %sub769 = sub nsw i64 %421, 5
  %422 = inttoptr i64 %sub769 to i8*
  %423 = bitcast i8* %422 to %struct.frame*
  %wants_modeline770 = getelementptr inbounds %struct.frame, %struct.frame* %423, i32 0, i32 26
  %424 = bitcast i48* %wants_modeline770 to i64*
  %bf.load771 = load i64, i64* %424, align 8
  %bf.lshr772 = lshr i64 %bf.load771, 14
  %bf.clear773 = and i64 %bf.lshr772, 1
  %bf.cast774 = trunc i64 %bf.clear773 to i1
  br i1 %bf.cast774, label %land.lhs.true.776, label %cond.false.879

land.lhs.true.776:                                ; preds = %land.lhs.true.767
  %425 = load %struct.window*, %struct.window** %w, align 8
  %contents777 = getelementptr inbounds %struct.window, %struct.window* %425, i32 0, i32 10
  %426 = load i64, i64* %contents777, align 8
  %call778 = call %struct.buffer* @XBUFFER(i64 %426)
  %header_line_format_779 = getelementptr inbounds %struct.buffer, %struct.buffer* %call778, i32 0, i32 13
  %427 = load i64, i64* %header_line_format_779, align 8
  %call780 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp781 = icmp eq i64 %427, %call780
  br i1 %cmp781, label %cond.false.879, label %land.lhs.true.783

land.lhs.true.783:                                ; preds = %land.lhs.true.776
  %428 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height784 = getelementptr inbounds %struct.window, %struct.window* %428, i32 0, i32 35
  %429 = load i32, i32* %pixel_height784, align 4
  %430 = load %struct.window*, %struct.window** %w, align 8
  %contents785 = getelementptr inbounds %struct.window, %struct.window* %430, i32 0, i32 10
  %431 = load i64, i64* %contents785, align 8
  %call786 = call zeroext i1 @BUFFERP(i64 %431)
  br i1 %call786, label %cond.true.788, label %cond.false.822

cond.true.788:                                    ; preds = %land.lhs.true.783
  %432 = load %struct.window*, %struct.window** %w, align 8
  %mini789 = getelementptr inbounds %struct.window, %struct.window* %432, i32 0, i32 67
  %bf.load790 = load i16, i16* %mini789, align 4
  %bf.clear791 = and i16 %bf.load790, 1
  %bf.cast792 = trunc i16 %bf.clear791 to i1
  br i1 %bf.cast792, label %cond.false.828, label %land.lhs.true.793

land.lhs.true.793:                                ; preds = %cond.true.788
  %433 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p794 = getelementptr inbounds %struct.window, %struct.window* %433, i32 0, i32 67
  %bf.load795 = load i16, i16* %pseudo_window_p794, align 4
  %bf.lshr796 = lshr i16 %bf.load795, 11
  %bf.clear797 = and i16 %bf.lshr796, 1
  %bf.cast798 = trunc i16 %bf.clear797 to i1
  br i1 %bf.cast798, label %cond.false.828, label %land.lhs.true.799

land.lhs.true.799:                                ; preds = %land.lhs.true.793
  %434 = load %struct.window*, %struct.window** %w, align 8
  %frame800 = getelementptr inbounds %struct.window, %struct.window* %434, i32 0, i32 1
  %435 = load i64, i64* %frame800, align 8
  %sub801 = sub nsw i64 %435, 5
  %436 = inttoptr i64 %sub801 to i8*
  %437 = bitcast i8* %436 to %struct.frame*
  %wants_modeline802 = getelementptr inbounds %struct.frame, %struct.frame* %437, i32 0, i32 26
  %438 = bitcast i48* %wants_modeline802 to i64*
  %bf.load803 = load i64, i64* %438, align 8
  %bf.lshr804 = lshr i64 %bf.load803, 14
  %bf.clear805 = and i64 %bf.lshr804, 1
  %bf.cast806 = trunc i64 %bf.clear805 to i1
  br i1 %bf.cast806, label %land.lhs.true.808, label %cond.false.828

land.lhs.true.808:                                ; preds = %land.lhs.true.799
  %439 = load %struct.window*, %struct.window** %w, align 8
  %contents809 = getelementptr inbounds %struct.window, %struct.window* %439, i32 0, i32 10
  %440 = load i64, i64* %contents809, align 8
  %call810 = call %struct.buffer* @XBUFFER(i64 %440)
  %mode_line_format_811 = getelementptr inbounds %struct.buffer, %struct.buffer* %call810, i32 0, i32 12
  %441 = load i64, i64* %mode_line_format_811, align 8
  %call812 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp813 = icmp eq i64 %441, %call812
  br i1 %cmp813, label %cond.false.828, label %land.lhs.true.815

land.lhs.true.815:                                ; preds = %land.lhs.true.808
  %442 = load %struct.window*, %struct.window** %w, align 8
  %pixel_height816 = getelementptr inbounds %struct.window, %struct.window* %442, i32 0, i32 35
  %443 = load i32, i32* %pixel_height816, align 4
  %444 = load %struct.window*, %struct.window** %w, align 8
  %frame817 = getelementptr inbounds %struct.window, %struct.window* %444, i32 0, i32 1
  %445 = load i64, i64* %frame817, align 8
  %sub818 = sub nsw i64 %445, 5
  %446 = inttoptr i64 %sub818 to i8*
  %447 = bitcast i8* %446 to %struct.frame*
  %line_height819 = getelementptr inbounds %struct.frame, %struct.frame* %447, i32 0, i32 60
  %448 = load i32, i32* %line_height819, align 4
  %cmp820 = icmp sgt i32 %443, %448
  br i1 %cmp820, label %cond.true.823, label %cond.false.828

cond.false.822:                                   ; preds = %land.lhs.true.783
  br i1 false, label %cond.true.823, label %cond.false.828

cond.true.823:                                    ; preds = %cond.false.822, %land.lhs.true.815
  %449 = load %struct.window*, %struct.window** %w, align 8
  %frame824 = getelementptr inbounds %struct.window, %struct.window* %449, i32 0, i32 1
  %450 = load i64, i64* %frame824, align 8
  %sub825 = sub nsw i64 %450, 5
  %451 = inttoptr i64 %sub825 to i8*
  %452 = bitcast i8* %451 to %struct.frame*
  %line_height826 = getelementptr inbounds %struct.frame, %struct.frame* %452, i32 0, i32 60
  %453 = load i32, i32* %line_height826, align 4
  %mul827 = mul nsw i32 2, %453
  br label %cond.end.832

cond.false.828:                                   ; preds = %cond.false.822, %land.lhs.true.815, %land.lhs.true.808, %land.lhs.true.799, %land.lhs.true.793, %cond.true.788
  %454 = load %struct.window*, %struct.window** %w, align 8
  %frame829 = getelementptr inbounds %struct.window, %struct.window* %454, i32 0, i32 1
  %455 = load i64, i64* %frame829, align 8
  %sub830 = sub nsw i64 %455, 5
  %456 = inttoptr i64 %sub830 to i8*
  %457 = bitcast i8* %456 to %struct.frame*
  %line_height831 = getelementptr inbounds %struct.frame, %struct.frame* %457, i32 0, i32 60
  %458 = load i32, i32* %line_height831, align 4
  br label %cond.end.832

cond.end.832:                                     ; preds = %cond.false.828, %cond.true.823
  %cond833 = phi i32 [ %mul827, %cond.true.823 ], [ %458, %cond.false.828 ]
  %cmp834 = icmp sgt i32 %429, %cond833
  br i1 %cmp834, label %cond.true.837, label %cond.false.879

cond.false.836:                                   ; preds = %if.then.741
  br i1 false, label %cond.true.837, label %cond.false.879

cond.true.837:                                    ; preds = %cond.false.836, %cond.end.832
  %459 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height838 = getelementptr inbounds %struct.window, %struct.window* %459, i32 0, i32 64
  %460 = load i32, i32* %header_line_height838, align 4
  %cmp839 = icmp sge i32 %460, 0
  br i1 %cmp839, label %cond.true.841, label %cond.false.843

cond.true.841:                                    ; preds = %cond.true.837
  %461 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height842 = getelementptr inbounds %struct.window, %struct.window* %461, i32 0, i32 64
  %462 = load i32, i32* %header_line_height842, align 4
  br label %cond.end.877

cond.false.843:                                   ; preds = %cond.true.837
  %463 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix844 = getelementptr inbounds %struct.window, %struct.window* %463, i32 0, i32 24
  %464 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix844, align 8
  %tobool845 = icmp ne %struct.glyph_matrix* %464, null
  br i1 %tobool845, label %land.lhs.true.846, label %cond.false.855

land.lhs.true.846:                                ; preds = %cond.false.843
  %465 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix847 = getelementptr inbounds %struct.window, %struct.window* %465, i32 0, i32 24
  %466 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix847, align 8
  %rows848 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %466, i32 0, i32 1
  %467 = load %struct.glyph_row*, %struct.glyph_row** %rows848, align 8
  %tobool849 = icmp ne %struct.glyph_row* %467, null
  br i1 %tobool849, label %cond.true.850, label %cond.false.855

cond.true.850:                                    ; preds = %land.lhs.true.846
  %468 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix851 = getelementptr inbounds %struct.window, %struct.window* %468, i32 0, i32 24
  %469 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix851, align 8
  %rows852 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %469, i32 0, i32 1
  %470 = load %struct.glyph_row*, %struct.glyph_row** %rows852, align 8
  %height853 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %470, i32 0, i32 7
  %471 = load i32, i32* %height853, align 4
  %tobool854 = icmp ne i32 %471, 0
  br i1 %tobool854, label %cond.true.856, label %cond.false.870

cond.false.855:                                   ; preds = %land.lhs.true.846, %cond.false.843
  br i1 false, label %cond.true.856, label %cond.false.870

cond.true.856:                                    ; preds = %cond.false.855, %cond.true.850
  %472 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix857 = getelementptr inbounds %struct.window, %struct.window* %472, i32 0, i32 24
  %473 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix857, align 8
  %tobool858 = icmp ne %struct.glyph_matrix* %473, null
  br i1 %tobool858, label %land.lhs.true.859, label %cond.false.867

land.lhs.true.859:                                ; preds = %cond.true.856
  %474 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix860 = getelementptr inbounds %struct.window, %struct.window* %474, i32 0, i32 24
  %475 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix860, align 8
  %rows861 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %475, i32 0, i32 1
  %476 = load %struct.glyph_row*, %struct.glyph_row** %rows861, align 8
  %tobool862 = icmp ne %struct.glyph_row* %476, null
  br i1 %tobool862, label %cond.true.863, label %cond.false.867

cond.true.863:                                    ; preds = %land.lhs.true.859
  %477 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix864 = getelementptr inbounds %struct.window, %struct.window* %477, i32 0, i32 24
  %478 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix864, align 8
  %rows865 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %478, i32 0, i32 1
  %479 = load %struct.glyph_row*, %struct.glyph_row** %rows865, align 8
  %height866 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %479, i32 0, i32 7
  %480 = load i32, i32* %height866, align 4
  br label %cond.end.868

cond.false.867:                                   ; preds = %land.lhs.true.859, %cond.true.856
  br label %cond.end.868

cond.end.868:                                     ; preds = %cond.false.867, %cond.true.863
  %cond869 = phi i32 [ %480, %cond.true.863 ], [ 0, %cond.false.867 ]
  br label %cond.end.874

cond.false.870:                                   ; preds = %cond.false.855, %cond.true.850
  %481 = load %struct.window*, %struct.window** %w, align 8
  %frame871 = getelementptr inbounds %struct.window, %struct.window* %481, i32 0, i32 1
  %482 = load i64, i64* %frame871, align 8
  %sub872 = sub nsw i64 %482, 5
  %483 = inttoptr i64 %sub872 to i8*
  %484 = bitcast i8* %483 to %struct.frame*
  %call873 = call i32 @estimate_mode_line_height(%struct.frame* %484, i32 5)
  br label %cond.end.874

cond.end.874:                                     ; preds = %cond.false.870, %cond.end.868
  %cond875 = phi i32 [ %cond869, %cond.end.868 ], [ %call873, %cond.false.870 ]
  %485 = load %struct.window*, %struct.window** %w, align 8
  %header_line_height876 = getelementptr inbounds %struct.window, %struct.window* %485, i32 0, i32 64
  store i32 %cond875, i32* %header_line_height876, align 4
  br label %cond.end.877

cond.end.877:                                     ; preds = %cond.end.874, %cond.true.841
  %cond878 = phi i32 [ %462, %cond.true.841 ], [ %cond875, %cond.end.874 ]
  br label %cond.end.880

cond.false.879:                                   ; preds = %cond.false.836, %cond.end.832, %land.lhs.true.776, %land.lhs.true.767, %land.lhs.true.761, %cond.true.756
  br label %cond.end.880

cond.end.880:                                     ; preds = %cond.false.879, %cond.end.877
  %cond881 = phi i32 [ %cond878, %cond.end.877 ], [ 0, %cond.false.879 ]
  %sub882 = sub nsw i32 %415, %cond881
  %486 = load i32, i32* %this_scroll_margin, align 4
  %sub883 = sub nsw i32 %sub882, %486
  %sub884 = sub nsw i32 %sub883, 1
  %call885 = call i32 @move_it_to(%struct.it* %it, i64 %add751, i32 -1, i32 %sub884, i32 -1, i32 10)
  %current886 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos887 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current886, i32 0, i32 0
  %charpos888 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos887, i32 0, i32 0
  %487 = load i64, i64* %charpos888, align 8
  store i64 %487, i64* %charpos742, align 8
  %current889 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos890 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current889, i32 0, i32 0
  %bytepos891 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos890, i32 0, i32 1
  %488 = load i64, i64* %bytepos891, align 8
  store i64 %488, i64* %bytepos743, align 8
  %489 = load i64, i64* %charpos742, align 8
  %490 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt892 = getelementptr inbounds %struct.buffer, %struct.buffer* %490, i32 0, i32 75
  %491 = load i64, i64* %pt892, align 8
  %add893 = add nsw i64 %491, 0
  %cmp894 = icmp ne i64 %489, %add893
  br i1 %cmp894, label %if.then.896, label %if.end.922

if.then.896:                                      ; preds = %cond.end.880
  %492 = bitcast %struct.it* %it2 to i8*
  %493 = bitcast %struct.it* %it to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %492, i8* %493, i64 4800, i32 8, i1 false)
  %call897 = call i8* @bidi_shelve_cache()
  store i8* %call897, i8** %it_data, align 8
  %494 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt898 = getelementptr inbounds %struct.buffer, %struct.buffer* %494, i32 0, i32 75
  %495 = load i64, i64* %pt898, align 8
  %add899 = add nsw i64 %495, 0
  %call900 = call i32 @move_it_to(%struct.it* %it, i64 %add899, i32 -1, i32 -1, i32 -1, i32 8)
  %current901 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos902 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current901, i32 0, i32 0
  %charpos903 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos902, i32 0, i32 0
  %496 = load i64, i64* %charpos903, align 8
  %497 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt904 = getelementptr inbounds %struct.buffer, %struct.buffer* %497, i32 0, i32 75
  %498 = load i64, i64* %pt904, align 8
  %add905 = add nsw i64 %498, 0
  %cmp906 = icmp eq i64 %496, %add905
  br i1 %cmp906, label %land.lhs.true.908, label %if.else.920

land.lhs.true.908:                                ; preds = %if.then.896
  %current_y909 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %499 = load i32, i32* %current_y909, align 4
  %current_y910 = getelementptr inbounds %struct.it, %struct.it* %it2, i32 0, i32 74
  %500 = load i32, i32* %current_y910, align 4
  %cmp911 = icmp eq i32 %499, %500
  br i1 %cmp911, label %if.then.913, label %if.else.920

if.then.913:                                      ; preds = %land.lhs.true.908
  %current914 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos915 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current914, i32 0, i32 0
  %charpos916 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos915, i32 0, i32 0
  %501 = load i64, i64* %charpos916, align 8
  store i64 %501, i64* %charpos742, align 8
  %current917 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos918 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current917, i32 0, i32 0
  %bytepos919 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos918, i32 0, i32 1
  %502 = load i64, i64* %bytepos919, align 8
  store i64 %502, i64* %bytepos743, align 8
  %503 = load i8*, i8** %it_data, align 8
  call void @bidi_unshelve_cache(i8* %503, i1 zeroext true)
  br label %if.end.921

if.else.920:                                      ; preds = %land.lhs.true.908, %if.then.896
  %504 = bitcast %struct.it* %it to i8*
  %505 = bitcast %struct.it* %it2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %504, i8* %505, i64 4800, i32 8, i1 false)
  %506 = load i8*, i8** %it_data, align 8
  call void @bidi_unshelve_cache(i8* %506, i1 zeroext false)
  br label %if.end.921

if.end.921:                                       ; preds = %if.else.920, %if.then.913
  br label %if.end.922

if.end.922:                                       ; preds = %if.end.921, %cond.end.880
  %what = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 30
  %507 = load i32, i32* %what, align 4
  %cmp923 = icmp eq i32 %507, 5
  br i1 %cmp923, label %if.then.925, label %if.else.933

if.then.925:                                      ; preds = %if.end.922
  %current_y926 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %508 = load i32, i32* %current_y926, align 4
  %ascent = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 63
  %509 = load i32, i32* %ascent, align 4
  %add927 = add nsw i32 %508, %509
  %descent = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 64
  %510 = load i32, i32* %descent, align 4
  %add928 = add nsw i32 %add927, %510
  %last_visible_y929 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %511 = load i32, i32* %last_visible_y929, align 4
  %cmp930 = icmp sgt i32 %add928, %511
  %frombool932 = zext i1 %cmp930 to i8
  store i8 %frombool932, i8* %partial_p, align 1
  br label %if.end.939

if.else.933:                                      ; preds = %if.end.922
  call void @move_it_by_lines(%struct.it* %it, i64 1)
  %current_y934 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %512 = load i32, i32* %current_y934, align 4
  %last_visible_y935 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %513 = load i32, i32* %last_visible_y935, align 4
  %cmp936 = icmp sgt i32 %512, %513
  %frombool938 = zext i1 %cmp936 to i8
  store i8 %frombool938, i8* %partial_p, align 1
  br label %if.end.939

if.end.939:                                       ; preds = %if.else.933, %if.then.925
  %514 = load i64, i64* %charpos742, align 8
  %515 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt940 = getelementptr inbounds %struct.buffer, %struct.buffer* %515, i32 0, i32 75
  %516 = load i64, i64* %pt940, align 8
  %add941 = add nsw i64 %516, 0
  %cmp942 = icmp eq i64 %514, %add941
  br i1 %cmp942, label %land.lhs.true.944, label %if.else.955

land.lhs.true.944:                                ; preds = %if.end.939
  %517 = load i8, i8* %partial_p, align 1
  %tobool945 = trunc i8 %517 to i1
  br i1 %tobool945, label %if.else.955, label %land.lhs.true.946

land.lhs.true.946:                                ; preds = %land.lhs.true.944
  %518 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call947 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp948 = icmp eq i64 %518, %call947
  br i1 %cmp948, label %if.then.954, label %lor.lhs.false.950

lor.lhs.false.950:                                ; preds = %land.lhs.true.946
  %519 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call951 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp952 = icmp eq i64 %519, %call951
  br i1 %cmp952, label %if.then.954, label %if.else.955

if.then.954:                                      ; preds = %lor.lhs.false.950, %land.lhs.true.946
  br label %if.end.1001

if.else.955:                                      ; preds = %lor.lhs.false.950, %land.lhs.true.944, %if.end.939
  %520 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  %cmp956 = icmp sge i32 %520, 0
  br i1 %cmp956, label %if.then.958, label %if.else.989

if.then.958:                                      ; preds = %if.else.955
  %last_visible_y960 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %521 = load i32, i32* %last_visible_y960, align 4
  %522 = load i32, i32* %this_scroll_margin, align 4
  %sub961 = sub nsw i32 %521, %522
  %sub962 = sub nsw i32 %sub961, 1
  %523 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  %cmp963 = icmp slt i32 %sub962, %523
  br i1 %cmp963, label %cond.true.965, label %cond.false.969

cond.true.965:                                    ; preds = %if.then.958
  %last_visible_y966 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 53
  %524 = load i32, i32* %last_visible_y966, align 4
  %525 = load i32, i32* %this_scroll_margin, align 4
  %sub967 = sub nsw i32 %524, %525
  %sub968 = sub nsw i32 %sub967, 1
  br label %cond.end.970

cond.false.969:                                   ; preds = %if.then.958
  %526 = load i32, i32* @window_scroll_pixel_based_preserve_y, align 4
  br label %cond.end.970

cond.end.970:                                     ; preds = %cond.false.969, %cond.true.965
  %cond971 = phi i32 [ %sub968, %cond.true.965 ], [ %526, %cond.false.969 ]
  store i32 %cond971, i32* %goal_y959, align 4
  %527 = load i32, i32* %goal_y959, align 4
  %528 = load i32, i32* %this_scroll_margin, align 4
  %cmp972 = icmp slt i32 %527, %528
  br i1 %cmp972, label %if.then.974, label %if.end.975

if.then.974:                                      ; preds = %cond.end.970
  %529 = load i32, i32* %this_scroll_margin, align 4
  store i32 %529, i32* %goal_y959, align 4
  br label %if.end.975

if.end.975:                                       ; preds = %if.then.974, %cond.end.970
  %530 = load %struct.window*, %struct.window** %w, align 8
  %start976 = getelementptr inbounds %struct.window, %struct.window* %530, i32 0, i32 11
  %531 = load i64, i64* %start976, align 8
  %call977 = call i64 @marker_position(i64 %531)
  %charpos978 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 0
  store i64 %call977, i64* %charpos978, align 8
  %532 = load %struct.window*, %struct.window** %w, align 8
  %start979 = getelementptr inbounds %struct.window, %struct.window* %532, i32 0, i32 11
  %533 = load i64, i64* %start979, align 8
  %call980 = call i64 @marker_byte_position(i64 %533)
  %bytepos981 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %start, i32 0, i32 1
  store i64 %call980, i64* %bytepos981, align 8
  %534 = load %struct.window*, %struct.window** %w, align 8
  %535 = bitcast %struct.text_pos* %start to { i64, i64 }*
  %536 = getelementptr { i64, i64 }, { i64, i64 }* %535, i32 0, i32 0
  %537 = load i64, i64* %536, align 1
  %538 = getelementptr { i64, i64 }, { i64, i64 }* %535, i32 0, i32 1
  %539 = load i64, i64* %538, align 1
  call void @start_display(%struct.it* %it, %struct.window* %534, i64 %537, i64 %539)
  %540 = load i32, i32* @window_scroll_pixel_based_preserve_x, align 4
  %541 = load i32, i32* %goal_y959, align 4
  %call982 = call i32 @move_it_to(%struct.it* %it, i64 -1, i32 %540, i32 %541, i32 -1, i32 3)
  %current983 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos984 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current983, i32 0, i32 0
  %charpos985 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos984, i32 0, i32 0
  %542 = load i64, i64* %charpos985, align 8
  %current986 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos987 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current986, i32 0, i32 0
  %bytepos988 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos987, i32 0, i32 1
  %543 = load i64, i64* %bytepos988, align 8
  call void @set_point_both(i64 %542, i64 %543)
  br label %if.end.1000

if.else.989:                                      ; preds = %if.else.955
  %544 = load i8, i8* %partial_p, align 1
  %tobool990 = trunc i8 %544 to i1
  br i1 %tobool990, label %if.then.991, label %if.else.998

if.then.991:                                      ; preds = %if.else.989
  call void @move_it_by_lines(%struct.it* %it, i64 -2)
  %current992 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos993 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current992, i32 0, i32 0
  %charpos994 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos993, i32 0, i32 0
  %545 = load i64, i64* %charpos994, align 8
  %current995 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %pos996 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %current995, i32 0, i32 0
  %bytepos997 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos996, i32 0, i32 1
  %546 = load i64, i64* %bytepos997, align 8
  call void @set_point_both(i64 %545, i64 %546)
  br label %if.end.999

if.else.998:                                      ; preds = %if.else.989
  %547 = load i64, i64* %charpos742, align 8
  %548 = load i64, i64* %bytepos743, align 8
  call void @set_point_both(i64 %547, i64 %548)
  br label %if.end.999

if.end.999:                                       ; preds = %if.else.998, %if.then.991
  br label %if.end.1000

if.end.1000:                                      ; preds = %if.end.999, %if.end.975
  br label %if.end.1001

if.end.1001:                                      ; preds = %if.end.1000, %if.then.954
  br label %if.end.1002

if.end.1002:                                      ; preds = %if.end.1001, %if.else.738
  br label %if.end.1003

if.end.1003:                                      ; preds = %if.end.1002, %if.end.737
  %549 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %549, i1 zeroext false)
  %550 = load i8, i8* %adjust_old_pointm, align 1
  %tobool1004 = trunc i8 %550 to i1
  br i1 %tobool1004, label %if.then.1005, label %if.end.1044

if.then.1005:                                     ; preds = %if.end.1003
  %551 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %551, i32 0, i32 13
  %552 = load i64, i64* %old_pointm, align 8
  %553 = load %struct.window*, %struct.window** %w, align 8
  %554 = load i64, i64* @selected_window, align 8
  %call1006 = call %struct.window* @XWINDOW(i64 %554)
  %cmp1007 = icmp eq %struct.window* %553, %call1006
  br i1 %cmp1007, label %cond.true.1009, label %cond.false.1038

cond.true.1009:                                   ; preds = %if.then.1005
  %555 = load %struct.window*, %struct.window** %w, align 8
  %contents1010 = getelementptr inbounds %struct.window, %struct.window* %555, i32 0, i32 10
  %556 = load i64, i64* %contents1010, align 8
  %call1011 = call %struct.buffer* @XBUFFER(i64 %556)
  %557 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp1012 = icmp eq %struct.buffer* %call1011, %557
  br i1 %cmp1012, label %cond.true.1014, label %cond.false.1017

cond.true.1014:                                   ; preds = %cond.true.1009
  %558 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt1015 = getelementptr inbounds %struct.buffer, %struct.buffer* %558, i32 0, i32 75
  %559 = load i64, i64* %pt1015, align 8
  %add1016 = add nsw i64 %559, 0
  br label %cond.end.1034

cond.false.1017:                                  ; preds = %cond.true.1009
  %560 = load %struct.window*, %struct.window** %w, align 8
  %contents1018 = getelementptr inbounds %struct.window, %struct.window* %560, i32 0, i32 10
  %561 = load i64, i64* %contents1018, align 8
  %call1019 = call %struct.buffer* @XBUFFER(i64 %561)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call1019, i32 0, i32 45
  %562 = load i64, i64* %pt_marker_, align 8
  %call1020 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1021 = icmp eq i64 %562, %call1020
  br i1 %cmp1021, label %cond.true.1023, label %cond.false.1027

cond.true.1023:                                   ; preds = %cond.false.1017
  %563 = load %struct.window*, %struct.window** %w, align 8
  %contents1024 = getelementptr inbounds %struct.window, %struct.window* %563, i32 0, i32 10
  %564 = load i64, i64* %contents1024, align 8
  %call1025 = call %struct.buffer* @XBUFFER(i64 %564)
  %pt1026 = getelementptr inbounds %struct.buffer, %struct.buffer* %call1025, i32 0, i32 75
  %565 = load i64, i64* %pt1026, align 8
  br label %cond.end.1032

cond.false.1027:                                  ; preds = %cond.false.1017
  %566 = load %struct.window*, %struct.window** %w, align 8
  %contents1028 = getelementptr inbounds %struct.window, %struct.window* %566, i32 0, i32 10
  %567 = load i64, i64* %contents1028, align 8
  %call1029 = call %struct.buffer* @XBUFFER(i64 %567)
  %pt_marker_1030 = getelementptr inbounds %struct.buffer, %struct.buffer* %call1029, i32 0, i32 45
  %568 = load i64, i64* %pt_marker_1030, align 8
  %call1031 = call i64 @marker_position(i64 %568)
  br label %cond.end.1032

cond.end.1032:                                    ; preds = %cond.false.1027, %cond.true.1023
  %cond1033 = phi i64 [ %565, %cond.true.1023 ], [ %call1031, %cond.false.1027 ]
  br label %cond.end.1034

cond.end.1034:                                    ; preds = %cond.end.1032, %cond.true.1014
  %cond1035 = phi i64 [ %add1016, %cond.true.1014 ], [ %cond1033, %cond.end.1032 ]
  %shl1036 = shl i64 %cond1035, 2
  %add1037 = add i64 %shl1036, 2
  br label %cond.end.1040

cond.false.1038:                                  ; preds = %if.then.1005
  %569 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %569, i32 0, i32 12
  %570 = load i64, i64* %pointm, align 8
  %call1039 = call i64 @Fmarker_position(i64 %570)
  br label %cond.end.1040

cond.end.1040:                                    ; preds = %cond.false.1038, %cond.end.1034
  %cond1041 = phi i64 [ %add1037, %cond.end.1034 ], [ %call1039, %cond.false.1038 ]
  %571 = load %struct.window*, %struct.window** %w, align 8
  %contents1042 = getelementptr inbounds %struct.window, %struct.window* %571, i32 0, i32 10
  %572 = load i64, i64* %contents1042, align 8
  %call1043 = call i64 @Fset_marker(i64 %552, i64 %cond1041, i64 %572)
  br label %if.end.1044

if.end.1044:                                      ; preds = %cond.end.88, %cond.end.131, %if.end.170, %if.then.327, %if.then.344, %cond.end.1040, %if.end.1003
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @window_scroll_line_based(i64 %window, i32 %n, i1 zeroext %whole, i1 zeroext %noerror) #0 {
entry:
  %window.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %whole.addr = alloca i8, align 1
  %noerror.addr = alloca i8, align 1
  %w = alloca %struct.window*, align 8
  %opoint_marker = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %ht = alloca i32, align 4
  %tem = alloca i64, align 8
  %lose = alloca i8, align 1
  %bolp = alloca i64, align 8
  %startpos = alloca i64, align 8
  %startbyte = alloca i64, align 8
  %original_pos = alloca i64, align 8
  %adjust_old_pointm = alloca i8, align 1
  %posit = alloca %struct.position, align 8
  %this_scroll_margin = alloca i32, align 4
  %top_margin = alloca i32, align 4
  %nlines = alloca i32, align 4
  %bottom_margin = alloca i32, align 4
  %nlines243 = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %frombool = zext i1 %whole to i8
  store i8 %frombool, i8* %whole.addr, align 1
  %frombool1 = zext i1 %noerror to i8
  store i8 %frombool1, i8* %noerror.addr, align 1
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %call2 = call i64 @Fpoint_marker()
  store i64 %call2, i64* %opoint_marker, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %call3 = call i32 @window_internal_height(%struct.window* %1)
  store i32 %call3, i32* %ht, align 4
  %2 = load %struct.window*, %struct.window** %w, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 11
  %3 = load i64, i64* %start, align 8
  %call4 = call i64 @marker_position(i64 %3)
  store i64 %call4, i64* %startpos, align 8
  %4 = load %struct.window*, %struct.window** %w, align 8
  %start5 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 11
  %5 = load i64, i64* %start5, align 8
  %call6 = call i64 @marker_byte_position(i64 %5)
  store i64 %call6, i64* %startbyte, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %original_pos, align 8
  %6 = load i64, i64* %window.addr, align 8
  %call8 = call i64 @Fwindow_point(i64 %6)
  %7 = load i64, i64* %window.addr, align 8
  %call9 = call i64 @Fwindow_old_point(i64 %7)
  %call10 = call i64 @Fequal(i64 %call8, i64 %call9)
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call10, %call11
  %lnot = xor i1 %cmp, true
  %frombool12 = zext i1 %lnot to i8
  store i8 %frombool12, i8* %adjust_old_pointm, align 1
  %8 = load i8, i8* %whole.addr, align 1
  %tobool = trunc i8 %8 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %ht, align 4
  %conv = sext i32 %9 to i64
  %10 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub = sub nsw i64 %conv, %10
  %cmp13 = icmp sgt i64 1, %sub
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %11 = load i32, i32* %ht, align 4
  %conv15 = sext i32 %11 to i64
  %12 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 399), align 8
  %sub16 = sub nsw i64 %conv15, %12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 1, %cond.true ], [ %sub16, %cond.false ]
  %13 = load i32, i32* %n.addr, align 4
  %conv17 = sext i32 %13 to i64
  %mul = mul nsw i64 %conv17, %cond
  %conv18 = trunc i64 %mul to i32
  store i32 %conv18, i32* %n.addr, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %14 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp20 = icmp eq i64 %14, %call19
  br i1 %cmp20, label %if.end.45, label %if.then.22

if.then.22:                                       ; preds = %if.end
  %15 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %cmp23 = icmp sle i64 %15, 0
  br i1 %cmp23, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.22
  %16 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %Vlast_command_ = getelementptr inbounds %struct.kboard, %struct.kboard* %16, i32 0, i32 2
  %17 = load i64, i64* %Vlast_command_, align 8
  %and = and i64 %17, 7
  %conv25 = trunc i64 %and to i32
  %cmp26 = icmp eq i32 %conv25, 0
  br i1 %cmp26, label %lor.lhs.false.28, label %if.then.35

lor.lhs.false.28:                                 ; preds = %lor.lhs.false
  %18 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %Vlast_command_29 = getelementptr inbounds %struct.kboard, %struct.kboard* %18, i32 0, i32 2
  %19 = load i64, i64* %Vlast_command_29, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 836)
  %call31 = call i64 @Fget(i64 %19, i64 %call30)
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %call31, %call32
  br i1 %cmp33, label %if.then.35, label %if.end.40

if.then.35:                                       ; preds = %lor.lhs.false.28, %lor.lhs.false, %if.then.22
  %20 = load i64, i64* %startpos, align 8
  %21 = load i64, i64* %startbyte, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 75
  %23 = load i64, i64* %pt, align 8
  %add = add nsw i64 %23, 0
  %24 = load i32, i32* %ht, align 4
  %conv36 = sext i32 %24 to i64
  %25 = load %struct.window*, %struct.window** %w, align 8
  %hscroll = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 38
  %26 = load i64, i64* %hscroll, align 8
  %27 = load %struct.window*, %struct.window** %w, align 8
  %call37 = call %struct.position* @compute_motion(i64 %20, i64 %21, i64 0, i64 0, i1 zeroext false, i64 %add, i64 %conv36, i64 0, i64 -1, i64 %26, i32 0, %struct.window* %27)
  %28 = bitcast %struct.position* %posit to i8*
  %29 = bitcast %struct.position* %call37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 48, i32 8, i1 false)
  %vpos = getelementptr inbounds %struct.position, %struct.position* %posit, i32 0, i32 3
  %30 = load i64, i64* %vpos, align 8
  store i64 %30, i64* @window_scroll_preserve_vpos, align 8
  %hpos = getelementptr inbounds %struct.position, %struct.position* %posit, i32 0, i32 2
  %31 = load i64, i64* %hpos, align 8
  %32 = load %struct.window*, %struct.window** %w, align 8
  %hscroll38 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 38
  %33 = load i64, i64* %hscroll38, align 8
  %add39 = add nsw i64 %31, %33
  store i64 %add39, i64* @window_scroll_preserve_hpos, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.35, %lor.lhs.false.28
  %34 = load i64, i64* @window_scroll_preserve_hpos, align 8
  %shl = shl i64 %34, 2
  %add41 = add i64 %shl, 2
  %35 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %shl42 = shl i64 %35, 2
  %add43 = add i64 %shl42, 2
  %call44 = call i64 @Fcons(i64 %add41, i64 %add43)
  store i64 %call44, i64* %original_pos, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.40, %if.end
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt46 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 75
  %37 = load i64, i64* %pt46, align 8
  %add47 = add nsw i64 %37, 0
  %call48 = call i64 @make_natnum(i64 %add47)
  store i64 %call48, i64* %tem, align 8
  %38 = load i64, i64* %tem, align 8
  %39 = load i64, i64* %window.addr, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %call50 = call i64 @Fpos_visible_in_window_p(i64 %38, i64 %39, i64 %call49)
  store i64 %call50, i64* %tem, align 8
  %40 = load i64, i64* %tem, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp52 = icmp eq i64 %40, %call51
  br i1 %cmp52, label %if.then.54, label %if.end.64

if.then.54:                                       ; preds = %if.end.45
  %41 = load i32, i32* %ht, align 4
  %div = sdiv i32 %41, 2
  %sub55 = sub nsw i32 0, %div
  %conv56 = sext i32 %sub55 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  %42 = load i64, i64* %window.addr, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 0)
  %call60 = call i64 @Fvertical_motion(i64 %add58, i64 %42, i64 %call59)
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt61 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 75
  %44 = load i64, i64* %pt61, align 8
  %add62 = add nsw i64 %44, 0
  store i64 %add62, i64* %startpos, align 8
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 76
  %46 = load i64, i64* %pt_byte, align 8
  %add63 = add nsw i64 %46, 0
  store i64 %add63, i64* %startbyte, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.54, %if.end.45
  %47 = load i64, i64* %startpos, align 8
  %48 = load i64, i64* %startbyte, align 8
  call void @set_point_both(i64 %47, i64 %48)
  %49 = load i32, i32* %n.addr, align 4
  %cmp65 = icmp slt i32 %49, 0
  br i1 %cmp65, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.64
  %50 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt67 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 75
  %51 = load i64, i64* %pt67, align 8
  %add68 = add nsw i64 %51, 0
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 77
  %53 = load i64, i64* %begv, align 8
  %cmp69 = icmp eq i64 %add68, %53
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.64
  %54 = phi i1 [ false, %if.end.64 ], [ %cmp69, %land.rhs ]
  %frombool71 = zext i1 %54 to i8
  store i8 %frombool71, i8* %lose, align 1
  %55 = load i32, i32* %n.addr, align 4
  %conv72 = sext i32 %55 to i64
  %shl73 = shl i64 %conv72, 2
  %add74 = add i64 %shl73, 2
  %56 = load i64, i64* %window.addr, align 8
  %call75 = call i64 @builtin_lisp_symbol(i32 0)
  %call76 = call i64 @Fvertical_motion(i64 %add74, i64 %56, i64 %call75)
  %57 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt77 = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 75
  %58 = load i64, i64* %pt77, align 8
  %add78 = add nsw i64 %58, 0
  store i64 %add78, i64* %pos, align 8
  %59 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte79 = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 76
  %60 = load i64, i64* %pt_byte79, align 8
  %add80 = add nsw i64 %60, 0
  store i64 %add80, i64* %pos_byte, align 8
  %call81 = call i64 @Fbolp()
  store i64 %call81, i64* %bolp, align 8
  %61 = load i64, i64* %opoint_marker, align 8
  %call82 = call i64 @marker_position(i64 %61)
  %62 = load i64, i64* %opoint_marker, align 8
  %call83 = call i64 @marker_byte_position(i64 %62)
  call void @set_point_both(i64 %call82, i64 %call83)
  %63 = load i8, i8* %lose, align 1
  %tobool84 = trunc i8 %63 to i1
  br i1 %tobool84, label %if.then.85, label %if.end.89

if.then.85:                                       ; preds = %land.end
  %64 = load i8, i8* %noerror.addr, align 1
  %tobool86 = trunc i8 %64 to i1
  br i1 %tobool86, label %if.then.87, label %if.else

if.then.87:                                       ; preds = %if.then.85
  br label %if.end.321

if.else:                                          ; preds = %if.then.85
  %call88 = call i64 @builtin_lisp_symbol(i32 200)
  call void @xsignal0(i64 %call88) #5
  unreachable

if.end.89:                                        ; preds = %land.end
  %65 = load i64, i64* %pos, align 8
  %66 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 79
  %67 = load i64, i64* %zv, align 8
  %cmp90 = icmp slt i64 %65, %67
  br i1 %cmp90, label %if.then.92, label %if.else.275

if.then.92:                                       ; preds = %if.end.89
  %68 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  %69 = load %struct.window*, %struct.window** %w, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 37
  %70 = load i32, i32* %total_lines, align 4
  %div93 = sdiv i32 %70, 4
  %conv94 = sext i32 %div93 to i64
  %cmp95 = icmp slt i64 %68, %conv94
  br i1 %cmp95, label %cond.true.97, label %cond.false.98

cond.true.97:                                     ; preds = %if.then.92
  %71 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  br label %cond.end.102

cond.false.98:                                    ; preds = %if.then.92
  %72 = load %struct.window*, %struct.window** %w, align 8
  %total_lines99 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 37
  %73 = load i32, i32* %total_lines99, align 4
  %div100 = sdiv i32 %73, 4
  %conv101 = sext i32 %div100 to i64
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.98, %cond.true.97
  %cond103 = phi i64 [ %71, %cond.true.97 ], [ %conv101, %cond.false.98 ]
  %cmp104 = icmp sgt i64 0, %cond103
  br i1 %cmp104, label %cond.true.106, label %cond.false.107

cond.true.106:                                    ; preds = %cond.end.102
  br label %cond.end.120

cond.false.107:                                   ; preds = %cond.end.102
  %74 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  %75 = load %struct.window*, %struct.window** %w, align 8
  %total_lines108 = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 37
  %76 = load i32, i32* %total_lines108, align 4
  %div109 = sdiv i32 %76, 4
  %conv110 = sext i32 %div109 to i64
  %cmp111 = icmp slt i64 %74, %conv110
  br i1 %cmp111, label %cond.true.113, label %cond.false.114

cond.true.113:                                    ; preds = %cond.false.107
  %77 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 408), align 8
  br label %cond.end.118

cond.false.114:                                   ; preds = %cond.false.107
  %78 = load %struct.window*, %struct.window** %w, align 8
  %total_lines115 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 37
  %79 = load i32, i32* %total_lines115, align 4
  %div116 = sdiv i32 %79, 4
  %conv117 = sext i32 %div116 to i64
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.114, %cond.true.113
  %cond119 = phi i64 [ %77, %cond.true.113 ], [ %conv117, %cond.false.114 ]
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.end.118, %cond.true.106
  %cond121 = phi i64 [ 0, %cond.true.106 ], [ %cond119, %cond.end.118 ]
  %conv122 = trunc i64 %cond121 to i32
  store i32 %conv122, i32* %this_scroll_margin, align 4
  %80 = load %struct.window*, %struct.window** %w, align 8
  %start123 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 11
  %81 = load i64, i64* %start123, align 8
  %82 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 10
  %83 = load i64, i64* %contents, align 8
  %84 = load i64, i64* %pos, align 8
  %85 = load i64, i64* %pos_byte, align 8
  %call124 = call i64 @set_marker_restricted_both(i64 %81, i64 %83, i64 %84, i64 %85)
  %86 = load i64, i64* %bolp, align 8
  %call125 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp126 = icmp eq i64 %86, %call125
  %lnot128 = xor i1 %cmp126, true
  %87 = load %struct.window*, %struct.window** %w, align 8
  %start_at_line_beg = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 67
  %88 = zext i1 %lnot128 to i16
  %bf.load = load i16, i16* %start_at_line_beg, align 4
  %bf.shl = shl i16 %88, 4
  %bf.clear = and i16 %bf.load, -17
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %start_at_line_beg, align 4
  %bf.result.cast = trunc i16 %88 to i8
  %tobool129 = trunc i8 %bf.result.cast to i1
  %89 = load %struct.window*, %struct.window** %w, align 8
  call void @wset_update_mode_line(%struct.window* %89)
  %90 = load %struct.window*, %struct.window** %w, align 8
  %force_start = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 67
  %bf.load130 = load i16, i16* %force_start, align 4
  %bf.clear131 = and i16 %bf.load130, -33
  %bf.set132 = or i16 %bf.clear131, 32
  store i16 %bf.set132, i16* %force_start, align 4
  %91 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call133 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp134 = icmp eq i64 %91, %call133
  br i1 %cmp134, label %if.else.148, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end.120
  %92 = load i32, i32* %this_scroll_margin, align 4
  %cmp136 = icmp eq i32 %92, 0
  br i1 %cmp136, label %land.lhs.true.138, label %if.else.148

land.lhs.true.138:                                ; preds = %land.lhs.true
  %93 = load i8, i8* %whole.addr, align 1
  %tobool139 = trunc i8 %93 to i1
  br i1 %tobool139, label %if.then.145, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %land.lhs.true.138
  %94 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call142 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp143 = icmp eq i64 %94, %call142
  br i1 %cmp143, label %if.else.148, label %if.then.145

if.then.145:                                      ; preds = %lor.lhs.false.141, %land.lhs.true.138
  %95 = load i64, i64* %pos, align 8
  %96 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %95, i64 %96)
  %97 = load i64, i64* %original_pos, align 8
  %98 = load i64, i64* %window.addr, align 8
  %call146 = call i64 @builtin_lisp_symbol(i32 0)
  %call147 = call i64 @Fvertical_motion(i64 %97, i64 %98, i64 %call146)
  br label %if.end.274

if.else.148:                                      ; preds = %lor.lhs.false.141, %land.lhs.true, %cond.end.120
  %99 = load i32, i32* %n.addr, align 4
  %cmp149 = icmp sgt i32 %99, 0
  br i1 %cmp149, label %if.then.151, label %if.else.207

if.then.151:                                      ; preds = %if.else.148
  %100 = load i32, i32* %this_scroll_margin, align 4
  %cmp152 = icmp sgt i32 %100, 0
  br i1 %cmp152, label %if.then.154, label %if.else.163

if.then.154:                                      ; preds = %if.then.151
  %101 = load i64, i64* %pos, align 8
  %102 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %101, i64 %102)
  %103 = load i32, i32* %this_scroll_margin, align 4
  %conv155 = sext i32 %103 to i64
  %shl156 = shl i64 %conv155, 2
  %add157 = add i64 %shl156, 2
  %104 = load i64, i64* %window.addr, align 8
  %call158 = call i64 @builtin_lisp_symbol(i32 0)
  %call159 = call i64 @Fvertical_motion(i64 %add157, i64 %104, i64 %call158)
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt160 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 75
  %106 = load i64, i64* %pt160, align 8
  %add161 = add nsw i64 %106, 0
  %conv162 = trunc i64 %add161 to i32
  store i32 %conv162, i32* %top_margin, align 4
  br label %if.end.165

if.else.163:                                      ; preds = %if.then.151
  %107 = load i64, i64* %pos, align 8
  %conv164 = trunc i64 %107 to i32
  store i32 %conv164, i32* %top_margin, align 4
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.163, %if.then.154
  %108 = load i32, i32* %top_margin, align 4
  %conv166 = sext i32 %108 to i64
  %109 = load i64, i64* %opoint_marker, align 8
  %call167 = call i64 @marker_position(i64 %109)
  %cmp168 = icmp sle i64 %conv166, %call167
  br i1 %cmp168, label %if.then.170, label %if.else.173

if.then.170:                                      ; preds = %if.end.165
  %110 = load i64, i64* %opoint_marker, align 8
  %call171 = call i64 @marker_position(i64 %110)
  %111 = load i64, i64* %opoint_marker, align 8
  %call172 = call i64 @marker_byte_position(i64 %111)
  call void @set_point_both(i64 %call171, i64 %call172)
  br label %if.end.206

if.else.173:                                      ; preds = %if.end.165
  %112 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call174 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp175 = icmp eq i64 %112, %call174
  br i1 %cmp175, label %if.else.203, label %if.then.177

if.then.177:                                      ; preds = %if.else.173
  %113 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %conv178 = trunc i64 %113 to i32
  store i32 %conv178, i32* %nlines, align 4
  %114 = load i64, i64* %pos, align 8
  %115 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %114, i64 %115)
  %116 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %117 = load i32, i32* %this_scroll_margin, align 4
  %conv179 = sext i32 %117 to i64
  %cmp180 = icmp slt i64 %116, %conv179
  br i1 %cmp180, label %if.then.182, label %if.else.183

if.then.182:                                      ; preds = %if.then.177
  %118 = load i32, i32* %this_scroll_margin, align 4
  store i32 %118, i32* %nlines, align 4
  br label %if.end.194

if.else.183:                                      ; preds = %if.then.177
  %119 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %120 = load %struct.window*, %struct.window** %w, align 8
  %total_lines184 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 37
  %121 = load i32, i32* %total_lines184, align 4
  %122 = load i32, i32* %this_scroll_margin, align 4
  %sub185 = sub nsw i32 %121, %122
  %conv186 = sext i32 %sub185 to i64
  %cmp187 = icmp sge i64 %119, %conv186
  br i1 %cmp187, label %if.then.189, label %if.end.193

if.then.189:                                      ; preds = %if.else.183
  %123 = load %struct.window*, %struct.window** %w, align 8
  %total_lines190 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 37
  %124 = load i32, i32* %total_lines190, align 4
  %125 = load i32, i32* %this_scroll_margin, align 4
  %sub191 = sub nsw i32 %124, %125
  %sub192 = sub nsw i32 %sub191, 1
  store i32 %sub192, i32* %nlines, align 4
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.189, %if.else.183
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %if.then.182
  %126 = load i64, i64* @window_scroll_preserve_hpos, align 8
  %shl195 = shl i64 %126, 2
  %add196 = add i64 %shl195, 2
  %127 = load i32, i32* %nlines, align 4
  %conv197 = sext i32 %127 to i64
  %shl198 = shl i64 %conv197, 2
  %add199 = add i64 %shl198, 2
  %call200 = call i64 @Fcons(i64 %add196, i64 %add199)
  %128 = load i64, i64* %window.addr, align 8
  %call201 = call i64 @builtin_lisp_symbol(i32 0)
  %call202 = call i64 @Fvertical_motion(i64 %call200, i64 %128, i64 %call201)
  br label %if.end.205

if.else.203:                                      ; preds = %if.else.173
  %129 = load i32, i32* %top_margin, align 4
  %conv204 = sext i32 %129 to i64
  call void @set_point(i64 %conv204)
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.203, %if.end.194
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %if.then.170
  br label %if.end.273

if.else.207:                                      ; preds = %if.else.148
  %130 = load i32, i32* %n.addr, align 4
  %cmp208 = icmp slt i32 %130, 0
  br i1 %cmp208, label %if.then.210, label %if.end.272

if.then.210:                                      ; preds = %if.else.207
  %131 = load i64, i64* %pos, align 8
  %132 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %131, i64 %132)
  %133 = load i32, i32* %ht, align 4
  %134 = load i32, i32* %this_scroll_margin, align 4
  %sub211 = sub nsw i32 %133, %134
  %conv212 = sext i32 %sub211 to i64
  %shl213 = shl i64 %conv212, 2
  %add214 = add i64 %shl213, 2
  %135 = load i64, i64* %window.addr, align 8
  %call215 = call i64 @builtin_lisp_symbol(i32 0)
  %call216 = call i64 @Fvertical_motion(i64 %add214, i64 %135, i64 %call215)
  store i64 %call216, i64* %tem, align 8
  %136 = load i64, i64* %tem, align 8
  %shr = ashr i64 %136, 2
  %137 = load i32, i32* %ht, align 4
  %138 = load i32, i32* %this_scroll_margin, align 4
  %sub217 = sub nsw i32 %137, %138
  %conv218 = sext i32 %sub217 to i64
  %cmp219 = icmp eq i64 %shr, %conv218
  br i1 %cmp219, label %if.then.221, label %if.else.225

if.then.221:                                      ; preds = %if.then.210
  %139 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt222 = getelementptr inbounds %struct.buffer, %struct.buffer* %139, i32 0, i32 75
  %140 = load i64, i64* %pt222, align 8
  %add223 = add nsw i64 %140, 0
  %conv224 = trunc i64 %add223 to i32
  store i32 %conv224, i32* %bottom_margin, align 4
  br label %if.end.230

if.else.225:                                      ; preds = %if.then.210
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt226 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 75
  %142 = load i64, i64* %pt226, align 8
  %add227 = add nsw i64 %142, 0
  %add228 = add nsw i64 %add227, 1
  %conv229 = trunc i64 %add228 to i32
  store i32 %conv229, i32* %bottom_margin, align 4
  br label %if.end.230

if.end.230:                                       ; preds = %if.else.225, %if.then.221
  %143 = load i32, i32* %bottom_margin, align 4
  %conv231 = sext i32 %143 to i64
  %144 = load i64, i64* %opoint_marker, align 8
  %call232 = call i64 @marker_position(i64 %144)
  %cmp233 = icmp sgt i64 %conv231, %call232
  br i1 %cmp233, label %if.then.235, label %if.else.238

if.then.235:                                      ; preds = %if.end.230
  %145 = load i64, i64* %opoint_marker, align 8
  %call236 = call i64 @marker_position(i64 %145)
  %146 = load i64, i64* %opoint_marker, align 8
  %call237 = call i64 @marker_byte_position(i64 %146)
  call void @set_point_both(i64 %call236, i64 %call237)
  br label %if.end.271

if.else.238:                                      ; preds = %if.end.230
  %147 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 261), align 8
  %call239 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp240 = icmp eq i64 %147, %call239
  br i1 %cmp240, label %if.else.267, label %if.then.242

if.then.242:                                      ; preds = %if.else.238
  %148 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %conv244 = trunc i64 %148 to i32
  store i32 %conv244, i32* %nlines243, align 4
  %149 = load i64, i64* %pos, align 8
  %150 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %149, i64 %150)
  %151 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %152 = load i32, i32* %this_scroll_margin, align 4
  %conv245 = sext i32 %152 to i64
  %cmp246 = icmp slt i64 %151, %conv245
  br i1 %cmp246, label %if.then.248, label %if.else.249

if.then.248:                                      ; preds = %if.then.242
  %153 = load i32, i32* %this_scroll_margin, align 4
  store i32 %153, i32* %nlines243, align 4
  br label %if.end.258

if.else.249:                                      ; preds = %if.then.242
  %154 = load i64, i64* @window_scroll_preserve_vpos, align 8
  %155 = load i32, i32* %ht, align 4
  %156 = load i32, i32* %this_scroll_margin, align 4
  %sub250 = sub nsw i32 %155, %156
  %conv251 = sext i32 %sub250 to i64
  %cmp252 = icmp sge i64 %154, %conv251
  br i1 %cmp252, label %if.then.254, label %if.end.257

if.then.254:                                      ; preds = %if.else.249
  %157 = load i32, i32* %ht, align 4
  %158 = load i32, i32* %this_scroll_margin, align 4
  %sub255 = sub nsw i32 %157, %158
  %sub256 = sub nsw i32 %sub255, 1
  store i32 %sub256, i32* %nlines243, align 4
  br label %if.end.257

if.end.257:                                       ; preds = %if.then.254, %if.else.249
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %if.then.248
  %159 = load i64, i64* @window_scroll_preserve_hpos, align 8
  %shl259 = shl i64 %159, 2
  %add260 = add i64 %shl259, 2
  %160 = load i32, i32* %nlines243, align 4
  %conv261 = sext i32 %160 to i64
  %shl262 = shl i64 %conv261, 2
  %add263 = add i64 %shl262, 2
  %call264 = call i64 @Fcons(i64 %add260, i64 %add263)
  %161 = load i64, i64* %window.addr, align 8
  %call265 = call i64 @builtin_lisp_symbol(i32 0)
  %call266 = call i64 @Fvertical_motion(i64 %call264, i64 %161, i64 %call265)
  br label %if.end.270

if.else.267:                                      ; preds = %if.else.238
  %162 = load i64, i64* %window.addr, align 8
  %call268 = call i64 @builtin_lisp_symbol(i32 0)
  %call269 = call i64 @Fvertical_motion(i64 -2, i64 %162, i64 %call268)
  br label %if.end.270

if.end.270:                                       ; preds = %if.else.267, %if.end.258
  br label %if.end.271

if.end.271:                                       ; preds = %if.end.270, %if.then.235
  br label %if.end.272

if.end.272:                                       ; preds = %if.end.271, %if.else.207
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.end.206
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %if.then.145
  br label %if.end.280

if.else.275:                                      ; preds = %if.end.89
  %163 = load i8, i8* %noerror.addr, align 1
  %tobool276 = trunc i8 %163 to i1
  br i1 %tobool276, label %if.then.277, label %if.else.278

if.then.277:                                      ; preds = %if.else.275
  br label %if.end.321

if.else.278:                                      ; preds = %if.else.275
  %call279 = call i64 @builtin_lisp_symbol(i32 366)
  call void @xsignal0(i64 %call279) #5
  unreachable

if.end.280:                                       ; preds = %if.end.274
  %164 = load i8, i8* %adjust_old_pointm, align 1
  %tobool281 = trunc i8 %164 to i1
  br i1 %tobool281, label %if.then.282, label %if.end.321

if.then.282:                                      ; preds = %if.end.280
  %165 = load %struct.window*, %struct.window** %w, align 8
  %old_pointm = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 13
  %166 = load i64, i64* %old_pointm, align 8
  %167 = load %struct.window*, %struct.window** %w, align 8
  %168 = load i64, i64* @selected_window, align 8
  %call283 = call %struct.window* @XWINDOW(i64 %168)
  %cmp284 = icmp eq %struct.window* %167, %call283
  br i1 %cmp284, label %cond.true.286, label %cond.false.315

cond.true.286:                                    ; preds = %if.then.282
  %169 = load %struct.window*, %struct.window** %w, align 8
  %contents287 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 10
  %170 = load i64, i64* %contents287, align 8
  %call288 = call %struct.buffer* @XBUFFER(i64 %170)
  %171 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp289 = icmp eq %struct.buffer* %call288, %171
  br i1 %cmp289, label %cond.true.291, label %cond.false.294

cond.true.291:                                    ; preds = %cond.true.286
  %172 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt292 = getelementptr inbounds %struct.buffer, %struct.buffer* %172, i32 0, i32 75
  %173 = load i64, i64* %pt292, align 8
  %add293 = add nsw i64 %173, 0
  br label %cond.end.311

cond.false.294:                                   ; preds = %cond.true.286
  %174 = load %struct.window*, %struct.window** %w, align 8
  %contents295 = getelementptr inbounds %struct.window, %struct.window* %174, i32 0, i32 10
  %175 = load i64, i64* %contents295, align 8
  %call296 = call %struct.buffer* @XBUFFER(i64 %175)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call296, i32 0, i32 45
  %176 = load i64, i64* %pt_marker_, align 8
  %call297 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp298 = icmp eq i64 %176, %call297
  br i1 %cmp298, label %cond.true.300, label %cond.false.304

cond.true.300:                                    ; preds = %cond.false.294
  %177 = load %struct.window*, %struct.window** %w, align 8
  %contents301 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 10
  %178 = load i64, i64* %contents301, align 8
  %call302 = call %struct.buffer* @XBUFFER(i64 %178)
  %pt303 = getelementptr inbounds %struct.buffer, %struct.buffer* %call302, i32 0, i32 75
  %179 = load i64, i64* %pt303, align 8
  br label %cond.end.309

cond.false.304:                                   ; preds = %cond.false.294
  %180 = load %struct.window*, %struct.window** %w, align 8
  %contents305 = getelementptr inbounds %struct.window, %struct.window* %180, i32 0, i32 10
  %181 = load i64, i64* %contents305, align 8
  %call306 = call %struct.buffer* @XBUFFER(i64 %181)
  %pt_marker_307 = getelementptr inbounds %struct.buffer, %struct.buffer* %call306, i32 0, i32 45
  %182 = load i64, i64* %pt_marker_307, align 8
  %call308 = call i64 @marker_position(i64 %182)
  br label %cond.end.309

cond.end.309:                                     ; preds = %cond.false.304, %cond.true.300
  %cond310 = phi i64 [ %179, %cond.true.300 ], [ %call308, %cond.false.304 ]
  br label %cond.end.311

cond.end.311:                                     ; preds = %cond.end.309, %cond.true.291
  %cond312 = phi i64 [ %add293, %cond.true.291 ], [ %cond310, %cond.end.309 ]
  %shl313 = shl i64 %cond312, 2
  %add314 = add i64 %shl313, 2
  br label %cond.end.317

cond.false.315:                                   ; preds = %if.then.282
  %183 = load %struct.window*, %struct.window** %w, align 8
  %pointm = getelementptr inbounds %struct.window, %struct.window* %183, i32 0, i32 12
  %184 = load i64, i64* %pointm, align 8
  %call316 = call i64 @Fmarker_position(i64 %184)
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.false.315, %cond.end.311
  %cond318 = phi i64 [ %add314, %cond.end.311 ], [ %call316, %cond.false.315 ]
  %185 = load %struct.window*, %struct.window** %w, align 8
  %contents319 = getelementptr inbounds %struct.window, %struct.window* %185, i32 0, i32 10
  %186 = load i64, i64* %contents319, align 8
  %call320 = call i64 @Fset_marker(i64 %166, i64 %cond318, i64 %186)
  br label %if.end.321

if.end.321:                                       ; preds = %if.then.87, %if.then.277, %cond.end.317, %if.end.280
  ret void
}

declare i32 @default_line_pixel_height(%struct.window*) #1

declare void @init_iterator(%struct.it*, %struct.window*, i64, i64, %struct.glyph_row*, i32) #1

declare i64 @Fline_beginning_position(i64) #1

declare i64 @Fline_end_position(i64) #1

declare i64 @Fget(i64, i64) #1

declare i32 @move_it_to(%struct.it*, i64, i32, i32, i32, i32) #1

; Function Attrs: noreturn
declare void @xsignal0(i64) #2

declare zeroext i1 @in_display_vector_p(%struct.it*) #1

declare i64 @Fset_marker(i64, i64, i64) #1

declare i64 @Fpoint_marker() #1

declare %struct.position* @compute_motion(i64, i64, i64, i64, i1 zeroext, i64, i64, i64, i64, i64, i32, %struct.window*) #1

; Function Attrs: nounwind uwtable
define internal void @wset_temslot(%struct.window* %w, i64 %val) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %val.addr = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %temslot = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 14
  store i64 %0, i64* %temslot, align 8
  ret void
}

declare i64 @build_marker(%struct.buffer*, i64, i64) #1

declare i64 @Fcopy_marker(i64, i64) #1

declare i64 @buffer_local_value(i64, i64) #1

declare void @clear_glyph_matrix(%struct.glyph_matrix*) #1

; Function Attrs: nounwind uwtable
define internal i32 @extract_dimension(i64 %dimension) #0 {
entry:
  %retval = alloca i32, align 4
  %dimension.addr = alloca i64, align 8
  store i64 %dimension, i64* %dimension.addr, align 8
  %0 = load i64, i64* %dimension.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load i64, i64* %dimension.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp2 = icmp eq i32 %and1, 2
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %dimension.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %dimension.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp5 = icmp sle i64 0, %shr
  br i1 %cmp5, label %land.lhs.true, label %if.then.10

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i64, i64* %dimension.addr, align 8
  %shr7 = ashr i64 %6, 2
  %cmp8 = icmp sle i64 %shr7, 2147483647
  br i1 %cmp8, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true, %cond.end
  %7 = load i64, i64* %dimension.addr, align 8
  call void @args_out_of_range_3(i64 %7, i64 2, i64 8589934590) #5
  unreachable

if.end.11:                                        ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end.11
  %8 = load i64, i64* %dimension.addr, align 8
  %shr12 = ashr i64 %8, 2
  %conv13 = trunc i64 %shr12 to i32
  store i32 %conv13, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @foreach_window_1(%struct.window* %w, i1 (%struct.window*, i8*)* %fn, i8* %user_data) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %fn.addr = alloca i1 (%struct.window*, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  %cont = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i1 (%struct.window*, i8*)* %fn, i1 (%struct.window*, i8*)** %fn.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  store i8 1, i8* %cont, align 1
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i8, i8* %cont, align 1
  %tobool1 = trunc i8 %1 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %2 = phi i1 [ false, %for.cond ], [ %tobool1, %land.rhs ]
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %4)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents2, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %6)
  %7 = load i1 (%struct.window*, i8*)*, i1 (%struct.window*, i8*)** %fn.addr, align 8
  %8 = load i8*, i8** %user_data.addr, align 8
  %call4 = call zeroext i1 @foreach_window_1(%struct.window* %call3, i1 (%struct.window*, i8*)* %7, i8* %8)
  %frombool = zext i1 %call4 to i8
  store i8 %frombool, i8* %cont, align 1
  br label %if.end

if.else:                                          ; preds = %for.body
  %9 = load i1 (%struct.window*, i8*)*, i1 (%struct.window*, i8*)** %fn.addr, align 8
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %11 = load i8*, i8** %user_data.addr, align 8
  %call5 = call zeroext i1 %9(%struct.window* %10, i8* %11)
  %frombool6 = zext i1 %call5 to i8
  store i8 %frombool6, i8* %cont, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 2
  %13 = load i64, i64* %next, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %13, %call7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %next8 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 2
  %15 = load i64, i64* %next8, align 8
  %call9 = call %struct.window* @XWINDOW(i64 %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call9, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %16 = load i8, i8* %cont, align 1
  %tobool10 = trunc i8 %16 to i1
  ret i1 %tobool10
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
